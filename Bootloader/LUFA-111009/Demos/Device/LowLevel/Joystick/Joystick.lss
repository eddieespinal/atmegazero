
Joystick.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c4c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000000f  00800100  00800100  00000cc0  2**0
                  ALLOC
  2 .debug_aranges 000002c8  00000000  00000000  00000cc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000080e  00000000  00000000  00000f88  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00004745  00000000  00000000  00001796  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00001144  00000000  00000000  00005edb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00003dec  00000000  00000000  0000701f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000410  00000000  00000000  0000ae0c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00002045  00000000  00000000  0000b21c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000024aa  00000000  00000000  0000d261  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000368  00000000  00000000  0000f70b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	return true;
#endif
}

void Endpoint_ClearEndpoints(void)
{
   0:	a2 c0       	rjmp	.+324    	; 0x146 <__ctors_end>
	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
}
   2:	00 00       	nop

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
   4:	bd c0       	rjmp	.+378    	; 0x180 <__bad_interrupt>
   6:	00 00       	nop
   8:	bb c0       	rjmp	.+374    	; 0x180 <__bad_interrupt>
   a:	00 00       	nop
   c:	b9 c0       	rjmp	.+370    	; 0x180 <__bad_interrupt>
   e:	00 00       	nop
  10:	b7 c0       	rjmp	.+366    	; 0x180 <__bad_interrupt>
  12:	00 00       	nop
  14:	b5 c0       	rjmp	.+362    	; 0x180 <__bad_interrupt>
  16:	00 00       	nop
  18:	b3 c0       	rjmp	.+358    	; 0x180 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	b1 c0       	rjmp	.+354    	; 0x180 <__bad_interrupt>
  1e:	00 00       	nop
  20:	af c0       	rjmp	.+350    	; 0x180 <__bad_interrupt>
  22:	00 00       	nop
  24:	ad c0       	rjmp	.+346    	; 0x180 <__bad_interrupt>
  26:	00 00       	nop
  28:	b7 c2       	rjmp	.+1390   	; 0x598 <__vector_10>
  2a:	00 00       	nop
  2c:	a9 c0       	rjmp	.+338    	; 0x180 <__bad_interrupt>
  2e:	00 00       	nop
  30:	a7 c0       	rjmp	.+334    	; 0x180 <__bad_interrupt>
  32:	00 00       	nop
  34:	a5 c0       	rjmp	.+330    	; 0x180 <__bad_interrupt>
  36:	00 00       	nop
  38:	a3 c0       	rjmp	.+326    	; 0x180 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	a1 c0       	rjmp	.+322    	; 0x180 <__bad_interrupt>
  3e:	00 00       	nop
  40:	9f c0       	rjmp	.+318    	; 0x180 <__bad_interrupt>
  42:	00 00       	nop
  44:	9d c0       	rjmp	.+314    	; 0x180 <__bad_interrupt>
  46:	00 00       	nop
  48:	9b c0       	rjmp	.+310    	; 0x180 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	99 c0       	rjmp	.+306    	; 0x180 <__bad_interrupt>
  4e:	00 00       	nop
  50:	97 c0       	rjmp	.+302    	; 0x180 <__bad_interrupt>
  52:	00 00       	nop
  54:	95 c0       	rjmp	.+298    	; 0x180 <__bad_interrupt>
  56:	00 00       	nop
  58:	93 c0       	rjmp	.+294    	; 0x180 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	91 c0       	rjmp	.+290    	; 0x180 <__bad_interrupt>
  5e:	00 00       	nop
  60:	8f c0       	rjmp	.+286    	; 0x180 <__bad_interrupt>
  62:	00 00       	nop
  64:	8d c0       	rjmp	.+282    	; 0x180 <__bad_interrupt>
  66:	00 00       	nop
  68:	8b c0       	rjmp	.+278    	; 0x180 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	89 c0       	rjmp	.+274    	; 0x180 <__bad_interrupt>
  6e:	00 00       	nop
  70:	87 c0       	rjmp	.+270    	; 0x180 <__bad_interrupt>
  72:	00 00       	nop
  74:	85 c0       	rjmp	.+266    	; 0x180 <__bad_interrupt>
  76:	00 00       	nop
  78:	83 c0       	rjmp	.+262    	; 0x180 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	81 c0       	rjmp	.+258    	; 0x180 <__bad_interrupt>
  7e:	00 00       	nop
  80:	7f c0       	rjmp	.+254    	; 0x180 <__bad_interrupt>
  82:	00 00       	nop
  84:	7d c0       	rjmp	.+250    	; 0x180 <__bad_interrupt>
  86:	00 00       	nop
  88:	7b c0       	rjmp	.+246    	; 0x180 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	79 c0       	rjmp	.+242    	; 0x180 <__bad_interrupt>
  8e:	00 00       	nop
  90:	77 c0       	rjmp	.+238    	; 0x180 <__bad_interrupt>
  92:	00 00       	nop
  94:	75 c0       	rjmp	.+234    	; 0x180 <__bad_interrupt>
  96:	00 00       	nop

00000098 <JoystickReport>:
  98:	05 01 09 04 a1 01 09 01 a1 00 09 30 09 31 15 9c     ...........0.1..
  a8:	25 64 35 ff 45 01 95 02 75 08 81 02 c0 05 09 19     %d5.E...u.......
  b8:	01 29 02 15 00 25 01 75 01 95 02 81 02 75 06 95     .)...%.u.....u..
  c8:	01 81 01 c0                                         ....

000000cc <DeviceDescriptor>:
  cc:	12 01 10 01 00 00 00 08 eb 03 43 20 01 00 01 02     ..........C ....
  dc:	00 01                                               ..

000000de <ConfigurationDescriptor>:
  de:	09 02 22 00 01 01 00 c0 32 09 04 00 00 01 03 00     ..".....2.......
  ee:	00 00 09 21 11 01 00 01 22 34 00 07 05 81 03 08     ...!...."4......
  fe:	00 01                                               ..

00000100 <LanguageString>:
 100:	04 03 09 04                                         ....

00000104 <ManufacturerString>:
 104:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
 114:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

0000011e <ProductString>:
 11e:	26 03 4c 00 55 00 46 00 41 00 20 00 4a 00 6f 00     &.L.U.F.A. .J.o.
 12e:	79 00 73 00 74 00 69 00 63 00 6b 00 20 00 44 00     y.s.t.i.c.k. .D.
 13e:	65 00 6d 00 6f 00 00 00                             e.m.o...

00000146 <__ctors_end>:
 146:	11 24       	eor	r1, r1
 148:	1f be       	out	0x3f, r1	; 63
 14a:	cf ef       	ldi	r28, 0xFF	; 255
 14c:	d0 e2       	ldi	r29, 0x20	; 32
 14e:	de bf       	out	0x3e, r29	; 62
 150:	cd bf       	out	0x3d, r28	; 61

00000152 <__do_copy_data>:
 152:	11 e0       	ldi	r17, 0x01	; 1
 154:	a0 e0       	ldi	r26, 0x00	; 0
 156:	b1 e0       	ldi	r27, 0x01	; 1
 158:	ec e4       	ldi	r30, 0x4C	; 76
 15a:	fc e0       	ldi	r31, 0x0C	; 12
 15c:	00 e0       	ldi	r16, 0x00	; 0
 15e:	0b bf       	out	0x3b, r16	; 59
 160:	02 c0       	rjmp	.+4      	; 0x166 <__do_copy_data+0x14>
 162:	07 90       	elpm	r0, Z+
 164:	0d 92       	st	X+, r0
 166:	a0 30       	cpi	r26, 0x00	; 0
 168:	b1 07       	cpc	r27, r17
 16a:	d9 f7       	brne	.-10     	; 0x162 <__do_copy_data+0x10>

0000016c <__do_clear_bss>:
 16c:	11 e0       	ldi	r17, 0x01	; 1
 16e:	a0 e0       	ldi	r26, 0x00	; 0
 170:	b1 e0       	ldi	r27, 0x01	; 1
 172:	01 c0       	rjmp	.+2      	; 0x176 <.do_clear_bss_start>

00000174 <.do_clear_bss_loop>:
 174:	1d 92       	st	X+, r1

00000176 <.do_clear_bss_start>:
 176:	af 30       	cpi	r26, 0x0F	; 15
 178:	b1 07       	cpc	r27, r17
 17a:	e1 f7       	brne	.-8      	; 0x174 <.do_clear_bss_loop>
 17c:	dd d0       	rcall	.+442    	; 0x338 <main>
 17e:	64 c5       	rjmp	.+2760   	; 0xc48 <_exit>

00000180 <__bad_interrupt>:
 180:	3f cf       	rjmp	.-386    	; 0x0 <__vectors>

00000182 <EVENT_USB_Device_Connect>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
 182:	8b b1       	in	r24, 0x0b	; 11
 184:	8f 70       	andi	r24, 0x0F	; 15
 186:	80 6a       	ori	r24, 0xA0	; 160
 188:	8b b9       	out	0x0b, r24	; 11
 */
void EVENT_USB_Device_Connect(void)
{
	/* Indicate USB enumerating */
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
}
 18a:	08 95       	ret

0000018c <EVENT_USB_Device_Disconnect>:
 18c:	8b b1       	in	r24, 0x0b	; 11
 18e:	8f 70       	andi	r24, 0x0F	; 15
 190:	80 61       	ori	r24, 0x10	; 16
 192:	8b b9       	out	0x0b, r24	; 11
 */
void EVENT_USB_Device_Disconnect(void)
{
	/* Indicate USB not ready */
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
}
 194:	08 95       	ret

00000196 <GetNextReport>:
 *  \param[out] ReportData  Pointer to a HID report data structure to be filled
 *
 *  \return Boolean true if the new report differs from the last report, false otherwise
 */
bool GetNextReport(USB_JoystickReport_Data_t* const ReportData)
{
 196:	fc 01       	movw	r30, r24
			}

			static inline uint8_t Joystick_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Joystick_GetStatus(void)
			{
				return (((uint8_t)~PINB & JOY_BMASK) | (((uint8_t)~PINE & JOY_EMASK) >> JOY_PORTE_MASK_SHIFT));
 198:	23 b1       	in	r18, 0x03	; 3
 19a:	8c b1       	in	r24, 0x0c	; 12
 19c:	80 95       	com	r24
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	80 73       	andi	r24, 0x30	; 48
 1a2:	90 70       	andi	r25, 0x00	; 0
 1a4:	95 95       	asr	r25
 1a6:	87 95       	ror	r24
 1a8:	20 95       	com	r18
 1aa:	20 7e       	andi	r18, 0xE0	; 224
 1ac:	28 2b       	or	r18, r24
			}

			static inline uint8_t Buttons_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Buttons_GetStatus(void)
			{
				return ((PINE & BUTTONS_BUTTON1) ^ BUTTONS_BUTTON1);
 1ae:	3c b1       	in	r19, 0x0c	; 12
 1b0:	30 95       	com	r19
 1b2:	34 70       	andi	r19, 0x04	; 4
	uint8_t        JoyStatus_LCL    = Joystick_GetStatus();
	uint8_t        ButtonStatus_LCL = Buttons_GetStatus();
	bool           InputChanged     = false;

	/* Clear the report contents */
	memset(ReportData, 0, sizeof(USB_JoystickReport_Data_t));
 1b4:	83 e0       	ldi	r24, 0x03	; 3
 1b6:	df 01       	movw	r26, r30
 1b8:	1d 92       	st	X+, r1
 1ba:	8a 95       	dec	r24
 1bc:	e9 f7       	brne	.-6      	; 0x1b8 <GetNextReport+0x22>

	if (JoyStatus_LCL & JOY_UP)
 1be:	27 ff       	sbrs	r18, 7
 1c0:	02 c0       	rjmp	.+4      	; 0x1c6 <GetNextReport+0x30>
	  ReportData->Y = -100;
 1c2:	8c e9       	ldi	r24, 0x9C	; 156
 1c4:	03 c0       	rjmp	.+6      	; 0x1cc <GetNextReport+0x36>
	else if (JoyStatus_LCL & JOY_DOWN)
 1c6:	24 ff       	sbrs	r18, 4
 1c8:	02 c0       	rjmp	.+4      	; 0x1ce <GetNextReport+0x38>
	  ReportData->Y =  100;
 1ca:	84 e6       	ldi	r24, 0x64	; 100
 1cc:	81 83       	std	Z+1, r24	; 0x01

	if (JoyStatus_LCL & JOY_LEFT)
 1ce:	92 2f       	mov	r25, r18
 1d0:	26 ff       	sbrs	r18, 6
 1d2:	02 c0       	rjmp	.+4      	; 0x1d8 <GetNextReport+0x42>
	  ReportData->X = -100;
 1d4:	8c e9       	ldi	r24, 0x9C	; 156
 1d6:	03 c0       	rjmp	.+6      	; 0x1de <GetNextReport+0x48>
	else if (JoyStatus_LCL & JOY_RIGHT)
 1d8:	23 ff       	sbrs	r18, 3
 1da:	02 c0       	rjmp	.+4      	; 0x1e0 <GetNextReport+0x4a>
	  ReportData->X =  100;
 1dc:	84 e6       	ldi	r24, 0x64	; 100
 1de:	80 83       	st	Z, r24

	if (JoyStatus_LCL & JOY_PRESS)
 1e0:	95 ff       	sbrs	r25, 5
 1e2:	03 c0       	rjmp	.+6      	; 0x1ea <GetNextReport+0x54>
	  ReportData->Button |= (1 << 1);
 1e4:	82 81       	ldd	r24, Z+2	; 0x02
 1e6:	82 60       	ori	r24, 0x02	; 2
 1e8:	82 83       	std	Z+2, r24	; 0x02

	if (ButtonStatus_LCL & BUTTONS_BUTTON1)
 1ea:	33 23       	and	r19, r19
 1ec:	19 f0       	breq	.+6      	; 0x1f4 <GetNextReport+0x5e>
	  ReportData->Button |= (1 << 0);
 1ee:	82 81       	ldd	r24, Z+2	; 0x02
 1f0:	81 60       	ori	r24, 0x01	; 1
 1f2:	82 83       	std	Z+2, r24	; 0x02

	/* Check if the new report is different to the previous report */
	InputChanged = (uint8_t)(PrevJoyStatus ^ JoyStatus_LCL) | (uint8_t)(PrevButtonStatus ^ ButtonStatus_LCL);
 1f4:	90 91 01 01 	lds	r25, 0x0101
 1f8:	92 27       	eor	r25, r18
 1fa:	80 91 00 01 	lds	r24, 0x0100
 1fe:	83 27       	eor	r24, r19
 200:	98 2b       	or	r25, r24
 202:	09 f0       	breq	.+2      	; 0x206 <GetNextReport+0x70>
 204:	91 e0       	ldi	r25, 0x01	; 1

	/* Save the current joystick status for later comparison */
	PrevJoyStatus    = JoyStatus_LCL;
 206:	20 93 01 01 	sts	0x0101, r18
	PrevButtonStatus = ButtonStatus_LCL;
 20a:	30 93 00 01 	sts	0x0100, r19

	/* Return whether the new report is different to the previous report or not */
	return InputChanged;
}
 20e:	89 2f       	mov	r24, r25
 210:	08 95       	ret

00000212 <HID_Task>:

/** Function to manage HID report generation and transmission to the host. */
void HID_Task(void)
{
 212:	0f 93       	push	r16
 214:	1f 93       	push	r17
 216:	df 93       	push	r29
 218:	cf 93       	push	r28
 21a:	00 d0       	rcall	.+0      	; 0x21c <HID_Task+0xa>
 21c:	0f 92       	push	r0
 21e:	cd b7       	in	r28, 0x3d	; 61
 220:	de b7       	in	r29, 0x3e	; 62
	/* Device must be connected and configured for the task to run */
	if (USB_DeviceState != DEVICE_STATE_Configured)
 222:	80 91 06 01 	lds	r24, 0x0106
 226:	84 30       	cpi	r24, 0x04	; 4
 228:	e1 f4       	brne	.+56     	; 0x262 <HID_Task+0x50>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 230:	80 91 e8 00 	lds	r24, 0x00E8

	/* Select the Joystick Report Endpoint */
	Endpoint_SelectEndpoint(JOYSTICK_EPNUM);

	/* Check to see if the host is ready for another packet */
	if (Endpoint_IsINReady())
 234:	80 ff       	sbrs	r24, 0
 236:	15 c0       	rjmp	.+42     	; 0x262 <HID_Task+0x50>
	{
		USB_JoystickReport_Data_t JoystickReportData;

		/* Create the next HID report to send to the host */
		GetNextReport(&JoystickReportData);
 238:	8e 01       	movw	r16, r28
 23a:	0f 5f       	subi	r16, 0xFF	; 255
 23c:	1f 4f       	sbci	r17, 0xFF	; 255
 23e:	c8 01       	movw	r24, r16
 240:	aa df       	rcall	.-172    	; 0x196 <GetNextReport>

		/* Write Joystick Report Data */
		Endpoint_Write_Stream_LE(&JoystickReportData, sizeof(JoystickReportData), NULL);
 242:	c8 01       	movw	r24, r16
 244:	63 e0       	ldi	r22, 0x03	; 3
 246:	70 e0       	ldi	r23, 0x00	; 0
 248:	40 e0       	ldi	r20, 0x00	; 0
 24a:	50 e0       	ldi	r21, 0x00	; 0
 24c:	2c d3       	rcall	.+1624   	; 0x8a6 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 24e:	80 91 e8 00 	lds	r24, 0x00E8
 252:	8e 77       	andi	r24, 0x7E	; 126
 254:	80 93 e8 00 	sts	0x00E8, r24

		/* Finalize the stream transfer to send the last packet */
		Endpoint_ClearIN();

		/* Clear the report data afterwards */
		memset(&JoystickReportData, 0, sizeof(JoystickReportData));
 258:	83 e0       	ldi	r24, 0x03	; 3
 25a:	f8 01       	movw	r30, r16
 25c:	11 92       	st	Z+, r1
 25e:	8a 95       	dec	r24
 260:	e9 f7       	brne	.-6      	; 0x25c <HID_Task+0x4a>
	}
}
 262:	0f 90       	pop	r0
 264:	0f 90       	pop	r0
 266:	0f 90       	pop	r0
 268:	cf 91       	pop	r28
 26a:	df 91       	pop	r29
 26c:	1f 91       	pop	r17
 26e:	0f 91       	pop	r16
 270:	08 95       	ret

00000272 <EVENT_USB_Device_ControlRequest>:
/** Event handler for the USB_ControlRequest event. This is used to catch and process control requests sent to
 *  the device from the USB host before passing along unhandled control requests to the library for processing
 *  internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
 272:	0f 93       	push	r16
 274:	1f 93       	push	r17
 276:	df 93       	push	r29
 278:	cf 93       	push	r28
 27a:	00 d0       	rcall	.+0      	; 0x27c <EVENT_USB_Device_ControlRequest+0xa>
 27c:	0f 92       	push	r0
 27e:	cd b7       	in	r28, 0x3d	; 61
 280:	de b7       	in	r29, 0x3e	; 62
	/* Handle HID Class specific requests */
	switch (USB_ControlRequest.bRequest)
 282:	80 91 08 01 	lds	r24, 0x0108
 286:	81 30       	cpi	r24, 0x01	; 1
 288:	b9 f4       	brne	.+46     	; 0x2b8 <EVENT_USB_Device_ControlRequest+0x46>
	{
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
 28a:	80 91 07 01 	lds	r24, 0x0107
 28e:	81 3a       	cpi	r24, 0xA1	; 161
 290:	99 f4       	brne	.+38     	; 0x2b8 <EVENT_USB_Device_ControlRequest+0x46>
			{
				USB_JoystickReport_Data_t JoystickReportData;

				/* Create the next HID report to send to the host */
				GetNextReport(&JoystickReportData);
 292:	8e 01       	movw	r16, r28
 294:	0f 5f       	subi	r16, 0xFF	; 255
 296:	1f 4f       	sbci	r17, 0xFF	; 255
 298:	c8 01       	movw	r24, r16
 29a:	7d df       	rcall	.-262    	; 0x196 <GetNextReport>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 29c:	80 91 e8 00 	lds	r24, 0x00E8
 2a0:	87 7f       	andi	r24, 0xF7	; 247
 2a2:	80 93 e8 00 	sts	0x00E8, r24

				Endpoint_ClearSETUP();

				/* Write the report data to the control endpoint */
				Endpoint_Write_Control_Stream_LE(&JoystickReportData, sizeof(JoystickReportData));
 2a6:	c8 01       	movw	r24, r16
 2a8:	63 e0       	ldi	r22, 0x03	; 3
 2aa:	70 e0       	ldi	r23, 0x00	; 0
 2ac:	3d d2       	rcall	.+1146   	; 0x728 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 2ae:	80 91 e8 00 	lds	r24, 0x00E8
 2b2:	8b 77       	andi	r24, 0x7B	; 123
 2b4:	80 93 e8 00 	sts	0x00E8, r24
				Endpoint_ClearOUT();
			}

			break;
	}
}
 2b8:	0f 90       	pop	r0
 2ba:	0f 90       	pop	r0
 2bc:	0f 90       	pop	r0
 2be:	cf 91       	pop	r28
 2c0:	df 91       	pop	r29
 2c2:	1f 91       	pop	r17
 2c4:	0f 91       	pop	r16
 2c6:	08 95       	ret

000002c8 <EVENT_USB_Device_ConfigurationChanged>:
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
 2c8:	81 e0       	ldi	r24, 0x01	; 1
 2ca:	61 ec       	ldi	r22, 0xC1	; 193
 2cc:	42 e0       	ldi	r20, 0x02	; 2
 2ce:	7d d0       	rcall	.+250    	; 0x3ca <Endpoint_ConfigureEndpoint_Prv>
	/* Setup HID Report Endpoint */
	ConfigSuccess &= Endpoint_ConfigureEndpoint(JOYSTICK_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_IN,
	                                            JOYSTICK_EPSIZE, ENDPOINT_BANK_SINGLE);

	/* Indicate endpoint configuration success or failure */
	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
 2d0:	80 fd       	sbrc	r24, 0
 2d2:	02 c0       	rjmp	.+4      	; 0x2d8 <EVENT_USB_Device_ConfigurationChanged+0x10>
 2d4:	90 e9       	ldi	r25, 0x90	; 144
 2d6:	01 c0       	rjmp	.+2      	; 0x2da <EVENT_USB_Device_ConfigurationChanged+0x12>
 2d8:	90 e6       	ldi	r25, 0x60	; 96
 2da:	8b b1       	in	r24, 0x0b	; 11
 2dc:	8f 70       	andi	r24, 0x0F	; 15
 2de:	98 2b       	or	r25, r24
 2e0:	9b b9       	out	0x0b, r25	; 11
}
 2e2:	08 95       	ret

000002e4 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
 2e4:	84 b7       	in	r24, 0x34	; 52
 2e6:	87 7f       	andi	r24, 0xF7	; 247
 2e8:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
 2ea:	88 e1       	ldi	r24, 0x18	; 24
 2ec:	0f b6       	in	r0, 0x3f	; 63
 2ee:	f8 94       	cli
 2f0:	80 93 60 00 	sts	0x0060, r24
 2f4:	10 92 60 00 	sts	0x0060, r1
 2f8:	0f be       	out	0x3f, r0	; 63

	/* Disable clock division */
	clock_prescale_set(clock_div_1);
 2fa:	80 e0       	ldi	r24, 0x00	; 0
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	20 e8       	ldi	r18, 0x80	; 128
 300:	0f b6       	in	r0, 0x3f	; 63
 302:	f8 94       	cli
 304:	20 93 61 00 	sts	0x0061, r18
 308:	80 93 61 00 	sts	0x0061, r24
 30c:	0f be       	out	0x3f, r0	; 63

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Joystick_Init(void)
			{
				DDRB  &= ~(JOY_BMASK);
 30e:	84 b1       	in	r24, 0x04	; 4
 310:	8f 71       	andi	r24, 0x1F	; 31
 312:	84 b9       	out	0x04, r24	; 4
				DDRE  &= ~(JOY_EMASK);
 314:	8d b1       	in	r24, 0x0d	; 13
 316:	8f 7c       	andi	r24, 0xCF	; 207
 318:	8d b9       	out	0x0d, r24	; 13

				PORTB |= JOY_BMASK;
 31a:	85 b1       	in	r24, 0x05	; 5
 31c:	80 6e       	ori	r24, 0xE0	; 224
 31e:	85 b9       	out	0x05, r24	; 5
				PORTE |= JOY_EMASK;
 320:	8e b1       	in	r24, 0x0e	; 14
 322:	80 63       	ori	r24, 0x30	; 48
 324:	8e b9       	out	0x0e, r24	; 14

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
 326:	8a b1       	in	r24, 0x0a	; 10
 328:	80 6f       	ori	r24, 0xF0	; 240
 32a:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
 32c:	8b b1       	in	r24, 0x0b	; 11
 32e:	8f 70       	andi	r24, 0x0F	; 15
 330:	8b b9       	out	0x0b, r24	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Buttons_Init(void)
			{
				DDRE  &= ~BUTTONS_BUTTON1;
 332:	6a 98       	cbi	0x0d, 2	; 13
				PORTE |=  BUTTONS_BUTTON1;
 334:	72 9a       	sbi	0x0e, 2	; 14
	/* Hardware Initialization */
	Joystick_Init();
	LEDs_Init();
	Buttons_Init();
	USB_Init();
}
 336:	1a c1       	rjmp	.+564    	; 0x56c <USB_Init>

00000338 <main>:
/** Main program entry point. This routine configures the hardware required by the application, then
 *  enters a loop to run the application tasks in sequence.
 */
int main(void)
{
	SetupHardware();
 338:	d5 df       	rcall	.-86     	; 0x2e4 <SetupHardware>
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
 33a:	8b b1       	in	r24, 0x0b	; 11
 33c:	8f 70       	andi	r24, 0x0F	; 15
 33e:	80 61       	ori	r24, 0x10	; 16
 340:	8b b9       	out	0x0b, r24	; 11

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
	sei();
 342:	78 94       	sei

	for (;;)
	{
		HID_Task();
 344:	66 df       	rcall	.-308    	; 0x212 <HID_Task>
		USB_USBTask();
 346:	6d d4       	rcall	.+2266   	; 0xc22 <USB_USBTask>
 348:	fd cf       	rjmp	.-6      	; 0x344 <main+0xc>

0000034a <CALLBACK_USB_GetDescriptor>:
 *  USB host.
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
 34a:	da 01       	movw	r26, r20
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
 34c:	93 30       	cpi	r25, 0x03	; 3
 34e:	b1 f0       	breq	.+44     	; 0x37c <CALLBACK_USB_GetDescriptor+0x32>
 350:	94 30       	cpi	r25, 0x04	; 4
 352:	28 f4       	brcc	.+10     	; 0x35e <CALLBACK_USB_GetDescriptor+0x14>
 354:	91 30       	cpi	r25, 0x01	; 1
 356:	41 f0       	breq	.+16     	; 0x368 <CALLBACK_USB_GetDescriptor+0x1e>
 358:	92 30       	cpi	r25, 0x02	; 2
 35a:	79 f5       	brne	.+94     	; 0x3ba <CALLBACK_USB_GetDescriptor+0x70>
 35c:	0a c0       	rjmp	.+20     	; 0x372 <CALLBACK_USB_GetDescriptor+0x28>
 35e:	91 32       	cpi	r25, 0x21	; 33
 360:	11 f1       	breq	.+68     	; 0x3a6 <CALLBACK_USB_GetDescriptor+0x5c>
 362:	92 32       	cpi	r25, 0x22	; 34
 364:	51 f5       	brne	.+84     	; 0x3ba <CALLBACK_USB_GetDescriptor+0x70>
 366:	24 c0       	rjmp	.+72     	; 0x3b0 <CALLBACK_USB_GetDescriptor+0x66>
 368:	ec ec       	ldi	r30, 0xCC	; 204
 36a:	f0 e0       	ldi	r31, 0x00	; 0
 36c:	22 e1       	ldi	r18, 0x12	; 18
 36e:	30 e0       	ldi	r19, 0x00	; 0
 370:	28 c0       	rjmp	.+80     	; 0x3c2 <CALLBACK_USB_GetDescriptor+0x78>
 372:	ee ed       	ldi	r30, 0xDE	; 222
 374:	f0 e0       	ldi	r31, 0x00	; 0
 376:	22 e2       	ldi	r18, 0x22	; 34
 378:	30 e0       	ldi	r19, 0x00	; 0
 37a:	23 c0       	rjmp	.+70     	; 0x3c2 <CALLBACK_USB_GetDescriptor+0x78>
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
 37c:	81 30       	cpi	r24, 0x01	; 1
 37e:	49 f0       	breq	.+18     	; 0x392 <CALLBACK_USB_GetDescriptor+0x48>
 380:	81 30       	cpi	r24, 0x01	; 1
 382:	18 f0       	brcs	.+6      	; 0x38a <CALLBACK_USB_GetDescriptor+0x40>
 384:	82 30       	cpi	r24, 0x02	; 2
 386:	c9 f4       	brne	.+50     	; 0x3ba <CALLBACK_USB_GetDescriptor+0x70>
 388:	0a c0       	rjmp	.+20     	; 0x39e <CALLBACK_USB_GetDescriptor+0x54>
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
 38a:	e0 e0       	ldi	r30, 0x00	; 0
 38c:	f1 e0       	ldi	r31, 0x01	; 1
 38e:	84 91       	lpm	r24, Z+
 390:	03 c0       	rjmp	.+6      	; 0x398 <CALLBACK_USB_GetDescriptor+0x4e>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
 392:	e4 e0       	ldi	r30, 0x04	; 4
 394:	f1 e0       	ldi	r31, 0x01	; 1
 396:	84 91       	lpm	r24, Z+
 398:	28 2f       	mov	r18, r24
 39a:	30 e0       	ldi	r19, 0x00	; 0
 39c:	12 c0       	rjmp	.+36     	; 0x3c2 <CALLBACK_USB_GetDescriptor+0x78>
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
 39e:	ee e1       	ldi	r30, 0x1E	; 30
 3a0:	f1 e0       	ldi	r31, 0x01	; 1
 3a2:	84 91       	lpm	r24, Z+
 3a4:	f9 cf       	rjmp	.-14     	; 0x398 <CALLBACK_USB_GetDescriptor+0x4e>
 3a6:	e0 ef       	ldi	r30, 0xF0	; 240
 3a8:	f0 e0       	ldi	r31, 0x00	; 0
 3aa:	29 e0       	ldi	r18, 0x09	; 9
 3ac:	30 e0       	ldi	r19, 0x00	; 0
 3ae:	09 c0       	rjmp	.+18     	; 0x3c2 <CALLBACK_USB_GetDescriptor+0x78>

			break;
		case DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_JoystickHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
 3b0:	e8 e9       	ldi	r30, 0x98	; 152
 3b2:	f0 e0       	ldi	r31, 0x00	; 0
 3b4:	24 e3       	ldi	r18, 0x34	; 52
 3b6:	30 e0       	ldi	r19, 0x00	; 0
 3b8:	04 c0       	rjmp	.+8      	; 0x3c2 <CALLBACK_USB_GetDescriptor+0x78>
 3ba:	e0 e0       	ldi	r30, 0x00	; 0
 3bc:	f0 e0       	ldi	r31, 0x00	; 0
 3be:	20 e0       	ldi	r18, 0x00	; 0
 3c0:	30 e0       	ldi	r19, 0x00	; 0
			Address = &JoystickReport;
			Size    = sizeof(JoystickReport);
			break;
	}

	*DescriptorAddress = Address;
 3c2:	ed 93       	st	X+, r30
 3c4:	fc 93       	st	X, r31
	return Size;
}
 3c6:	c9 01       	movw	r24, r18
 3c8:	08 95       	ret

000003ca <Endpoint_ConfigureEndpoint_Prv>:
#endif

bool Endpoint_ConfigureEndpoint_Prv(const uint8_t Number,
                                    const uint8_t UECFG0XData,
                                    const uint8_t UECFG1XData)
{
 3ca:	38 2f       	mov	r19, r24
 3cc:	28 2f       	mov	r18, r24
 3ce:	2c c0       	rjmp	.+88     	; 0x428 <Endpoint_ConfigureEndpoint_Prv+0x5e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 3d0:	20 93 e9 00 	sts	0x00E9, r18
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);
		
		if (EPNum == Number)
 3d4:	23 17       	cp	r18, r19
 3d6:	21 f4       	brne	.+8      	; 0x3e0 <Endpoint_ConfigureEndpoint_Prv+0x16>
 3d8:	76 2f       	mov	r23, r22
 3da:	94 2f       	mov	r25, r20
 3dc:	50 e0       	ldi	r21, 0x00	; 0
 3de:	06 c0       	rjmp	.+12     	; 0x3ec <Endpoint_ConfigureEndpoint_Prv+0x22>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
 3e0:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
 3e4:	90 91 ed 00 	lds	r25, 0x00ED
			UEIENXTemp  = UEIENX;
 3e8:	50 91 f0 00 	lds	r21, 0x00F0
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
 3ec:	91 ff       	sbrs	r25, 1
 3ee:	1b c0       	rjmp	.+54     	; 0x426 <Endpoint_ConfigureEndpoint_Prv+0x5c>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
 3f0:	80 91 eb 00 	lds	r24, 0x00EB
 3f4:	8e 7f       	andi	r24, 0xFE	; 254
 3f6:	80 93 eb 00 	sts	0x00EB, r24
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
 3fa:	80 91 ed 00 	lds	r24, 0x00ED
 3fe:	8d 7f       	andi	r24, 0xFD	; 253
 400:	80 93 ed 00 	sts	0x00ED, r24
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
 404:	80 91 eb 00 	lds	r24, 0x00EB
 408:	81 60       	ori	r24, 0x01	; 1
 40a:	80 93 eb 00 	sts	0x00EB, r24

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
 40e:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
 412:	90 93 ed 00 	sts	0x00ED, r25
		UEIENX  = UEIENXTemp;
 416:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
 41a:	80 91 ee 00 	lds	r24, 0x00EE
			
		if (!(Endpoint_IsConfigured()))
 41e:	87 fd       	sbrc	r24, 7
 420:	02 c0       	rjmp	.+4      	; 0x426 <Endpoint_ConfigureEndpoint_Prv+0x5c>
 422:	80 e0       	ldi	r24, 0x00	; 0
 424:	08 95       	ret
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else	
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
 426:	2f 5f       	subi	r18, 0xFF	; 255
 428:	27 30       	cpi	r18, 0x07	; 7
 42a:	90 f2       	brcs	.-92     	; 0x3d0 <Endpoint_ConfigureEndpoint_Prv+0x6>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 42c:	30 93 e9 00 	sts	0x00E9, r19
 430:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
 432:	08 95       	ret

00000434 <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
 434:	80 91 07 01 	lds	r24, 0x0107
 438:	88 23       	and	r24, r24
 43a:	9c f4       	brge	.+38     	; 0x462 <Endpoint_ClearStatusStage+0x2e>
 43c:	04 c0       	rjmp	.+8      	; 0x446 <Endpoint_ClearStatusStage+0x12>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 43e:	80 91 06 01 	lds	r24, 0x0106
 442:	88 23       	and	r24, r24
 444:	b9 f0       	breq	.+46     	; 0x474 <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 446:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
 44a:	82 ff       	sbrs	r24, 2
 44c:	f8 cf       	rjmp	.-16     	; 0x43e <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 44e:	80 91 e8 00 	lds	r24, 0x00E8
 452:	8b 77       	andi	r24, 0x7B	; 123
 454:	80 93 e8 00 	sts	0x00E8, r24
 458:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 45a:	80 91 06 01 	lds	r24, 0x0106
 45e:	88 23       	and	r24, r24
 460:	49 f0       	breq	.+18     	; 0x474 <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 462:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
 466:	80 ff       	sbrs	r24, 0
 468:	f8 cf       	rjmp	.-16     	; 0x45a <Endpoint_ClearStatusStage+0x26>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 46a:	80 91 e8 00 	lds	r24, 0x00E8
 46e:	8e 77       	andi	r24, 0x7E	; 126
 470:	80 93 e8 00 	sts	0x00E8, r24
 474:	08 95       	ret

00000476 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
 476:	40 91 e4 00 	lds	r20, 0x00E4
 47a:	50 91 e5 00 	lds	r21, 0x00E5
 47e:	24 e6       	ldi	r18, 0x64	; 100
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 480:	80 91 ec 00 	lds	r24, 0x00EC
 484:	80 ff       	sbrs	r24, 0
 486:	24 c0       	rjmp	.+72     	; 0x4d0 <Endpoint_WaitUntilReady+0x5a>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 488:	80 91 e8 00 	lds	r24, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
 48c:	80 fd       	sbrc	r24, 0
 48e:	1e c0       	rjmp	.+60     	; 0x4cc <Endpoint_WaitUntilReady+0x56>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}
		
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 490:	80 91 06 01 	lds	r24, 0x0106

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 494:	88 23       	and	r24, r24
 496:	11 f4       	brne	.+4      	; 0x49c <Endpoint_WaitUntilReady+0x26>
 498:	82 e0       	ldi	r24, 0x02	; 2
 49a:	08 95       	ret
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 49c:	85 30       	cpi	r24, 0x05	; 5
 49e:	11 f4       	brne	.+4      	; 0x4a4 <Endpoint_WaitUntilReady+0x2e>
 4a0:	83 e0       	ldi	r24, 0x03	; 3
 4a2:	08 95       	ret
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 4a4:	80 91 eb 00 	lds	r24, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
 4a8:	85 ff       	sbrs	r24, 5
 4aa:	02 c0       	rjmp	.+4      	; 0x4b0 <Endpoint_WaitUntilReady+0x3a>
 4ac:	81 e0       	ldi	r24, 0x01	; 1
 4ae:	08 95       	ret
 4b0:	80 91 e4 00 	lds	r24, 0x00E4
 4b4:	90 91 e5 00 	lds	r25, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
 4b8:	84 17       	cp	r24, r20
 4ba:	95 07       	cpc	r25, r21
 4bc:	09 f3       	breq	.-62     	; 0x480 <Endpoint_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
 4be:	22 23       	and	r18, r18
 4c0:	11 f4       	brne	.+4      	; 0x4c6 <Endpoint_WaitUntilReady+0x50>
 4c2:	84 e0       	ldi	r24, 0x04	; 4
 4c4:	08 95       	ret
 4c6:	21 50       	subi	r18, 0x01	; 1
 4c8:	ac 01       	movw	r20, r24
 4ca:	da cf       	rjmp	.-76     	; 0x480 <Endpoint_WaitUntilReady+0xa>
 4cc:	80 e0       	ldi	r24, 0x00	; 0
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
 4ce:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 4d0:	80 91 e8 00 	lds	r24, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
 4d4:	82 ff       	sbrs	r24, 2
 4d6:	dc cf       	rjmp	.-72     	; 0x490 <Endpoint_WaitUntilReady+0x1a>
 4d8:	f9 cf       	rjmp	.-14     	; 0x4cc <Endpoint_WaitUntilReady+0x56>

000004da <USB_ResetInterface>:

void USB_ResetInterface(void)
{
 4da:	ef 92       	push	r14
 4dc:	ff 92       	push	r15
 4de:	0f 93       	push	r16
 4e0:	1f 93       	push	r17
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
 4e2:	4d d0       	rcall	.+154    	; 0x57e <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
 4e4:	54 d0       	rcall	.+168    	; 0x58e <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
 4e6:	08 ed       	ldi	r16, 0xD8	; 216
 4e8:	10 e0       	ldi	r17, 0x00	; 0
 4ea:	f8 01       	movw	r30, r16
 4ec:	80 81       	ld	r24, Z
 4ee:	8f 77       	andi	r24, 0x7F	; 127
 4f0:	80 83       	st	Z, r24
				USBCON |=  (1 << USBE);
 4f2:	80 81       	ld	r24, Z
 4f4:	80 68       	ori	r24, 0x80	; 128
 4f6:	80 83       	st	Z, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
 4f8:	80 81       	ld	r24, Z
 4fa:	8f 7d       	andi	r24, 0xDF	; 223
 4fc:	80 83       	st	Z, r24

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
 4fe:	e7 ed       	ldi	r30, 0xD7	; 215
 500:	f0 e0       	ldi	r31, 0x00	; 0
 502:	80 81       	ld	r24, Z
 504:	80 68       	ori	r24, 0x80	; 128
 506:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
 508:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
 50a:	10 92 06 01 	sts	0x0106, r1
	USB_Device_ConfigurationNumber  = 0;
 50e:	10 92 02 01 	sts	0x0102, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
 512:	10 92 04 01 	sts	0x0104, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
 516:	10 92 03 01 	sts	0x0103, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
 51a:	80 ee       	ldi	r24, 0xE0	; 224
 51c:	e8 2e       	mov	r14, r24
 51e:	f1 2c       	mov	r15, r1
 520:	f7 01       	movw	r30, r14
 522:	80 81       	ld	r24, Z
 524:	8b 7f       	andi	r24, 0xFB	; 251
 526:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
 528:	f8 01       	movw	r30, r16
 52a:	80 81       	ld	r24, Z
 52c:	81 60       	ori	r24, 0x01	; 1
 52e:	80 83       	st	Z, r24
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
 530:	80 e0       	ldi	r24, 0x00	; 0
 532:	60 e0       	ldi	r22, 0x00	; 0
 534:	42 e0       	ldi	r20, 0x02	; 2
 536:	49 df       	rcall	.-366    	; 0x3ca <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 538:	e1 ee       	ldi	r30, 0xE1	; 225
 53a:	f0 e0       	ldi	r31, 0x00	; 0
 53c:	80 81       	ld	r24, Z
 53e:	8e 7f       	andi	r24, 0xFE	; 254
 540:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 542:	e2 ee       	ldi	r30, 0xE2	; 226
 544:	f0 e0       	ldi	r31, 0x00	; 0
 546:	80 81       	ld	r24, Z
 548:	81 60       	ori	r24, 0x01	; 1
 54a:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
 54c:	80 81       	ld	r24, Z
 54e:	88 60       	ori	r24, 0x08	; 8
 550:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
 552:	f7 01       	movw	r30, r14
 554:	80 81       	ld	r24, Z
 556:	8e 7f       	andi	r24, 0xFE	; 254
 558:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
 55a:	f8 01       	movw	r30, r16
 55c:	80 81       	ld	r24, Z
 55e:	80 61       	ori	r24, 0x10	; 16
 560:	80 83       	st	Z, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
 562:	1f 91       	pop	r17
 564:	0f 91       	pop	r16
 566:	ff 90       	pop	r15
 568:	ef 90       	pop	r14
 56a:	08 95       	ret

0000056c <USB_Init>:

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
 56c:	e7 ed       	ldi	r30, 0xD7	; 215
 56e:	f0 e0       	ldi	r31, 0x00	; 0
 570:	80 81       	ld	r24, Z
 572:	81 60       	ori	r24, 0x01	; 1
 574:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
 576:	81 e0       	ldi	r24, 0x01	; 1
 578:	80 93 05 01 	sts	0x0105, r24

	USB_ResetInterface();
}
 57c:	ae cf       	rjmp	.-164    	; 0x4da <USB_ResetInterface>

0000057e <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
 57e:	e8 ed       	ldi	r30, 0xD8	; 216
 580:	f0 e0       	ldi	r31, 0x00	; 0
 582:	80 81       	ld	r24, Z
 584:	8c 7f       	andi	r24, 0xFC	; 252
 586:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
 588:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
 58c:	08 95       	ret

0000058e <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
 58e:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
 592:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
 596:	08 95       	ret

00000598 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
 598:	1f 92       	push	r1
 59a:	0f 92       	push	r0
 59c:	0f b6       	in	r0, 0x3f	; 63
 59e:	0f 92       	push	r0
 5a0:	0b b6       	in	r0, 0x3b	; 59
 5a2:	0f 92       	push	r0
 5a4:	11 24       	eor	r1, r1
 5a6:	2f 93       	push	r18
 5a8:	3f 93       	push	r19
 5aa:	4f 93       	push	r20
 5ac:	5f 93       	push	r21
 5ae:	6f 93       	push	r22
 5b0:	7f 93       	push	r23
 5b2:	8f 93       	push	r24
 5b4:	9f 93       	push	r25
 5b6:	af 93       	push	r26
 5b8:	bf 93       	push	r27
 5ba:	ef 93       	push	r30
 5bc:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
 5be:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
 5c2:	82 ff       	sbrs	r24, 2
 5c4:	0a c0       	rjmp	.+20     	; 0x5da <__vector_10+0x42>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
 5c6:	80 91 e2 00 	lds	r24, 0x00E2
 5ca:	82 ff       	sbrs	r24, 2
 5cc:	06 c0       	rjmp	.+12     	; 0x5da <__vector_10+0x42>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
 5ce:	80 91 e1 00 	lds	r24, 0x00E1
 5d2:	8b 7f       	andi	r24, 0xFB	; 251
 5d4:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
 5d8:	23 d3       	rcall	.+1606   	; 0xc20 <USB_Event_Stub>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
 5da:	80 91 da 00 	lds	r24, 0x00DA
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
 5de:	80 ff       	sbrs	r24, 0
 5e0:	1d c0       	rjmp	.+58     	; 0x61c <__vector_10+0x84>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
 5e2:	80 91 d8 00 	lds	r24, 0x00D8
 5e6:	80 ff       	sbrs	r24, 0
 5e8:	19 c0       	rjmp	.+50     	; 0x61c <__vector_10+0x84>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
 5ea:	80 91 da 00 	lds	r24, 0x00DA
 5ee:	8e 7f       	andi	r24, 0xFE	; 254
 5f0:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
 5f4:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
 5f8:	80 ff       	sbrs	r24, 0
 5fa:	0c c0       	rjmp	.+24     	; 0x614 <__vector_10+0x7c>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 5fc:	8c e0       	ldi	r24, 0x0C	; 12
 5fe:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 600:	8e e0       	ldi	r24, 0x0E	; 14
 602:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
 604:	09 b4       	in	r0, 0x29	; 41
 606:	00 fe       	sbrs	r0, 0
 608:	fd cf       	rjmp	.-6      	; 0x604 <__vector_10+0x6c>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
 60a:	81 e0       	ldi	r24, 0x01	; 1
 60c:	80 93 06 01 	sts	0x0106, r24
			EVENT_USB_Device_Connect();
 610:	b8 dd       	rcall	.-1168   	; 0x182 <EVENT_USB_Device_Connect>
 612:	04 c0       	rjmp	.+8      	; 0x61c <__vector_10+0x84>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
 614:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
 616:	10 92 06 01 	sts	0x0106, r1
			EVENT_USB_Device_Disconnect();
 61a:	b8 dd       	rcall	.-1168   	; 0x18c <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
 61c:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
 620:	80 ff       	sbrs	r24, 0
 622:	18 c0       	rjmp	.+48     	; 0x654 <__vector_10+0xbc>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
 624:	80 91 e2 00 	lds	r24, 0x00E2
 628:	80 ff       	sbrs	r24, 0
 62a:	14 c0       	rjmp	.+40     	; 0x654 <__vector_10+0xbc>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 62c:	80 91 e2 00 	lds	r24, 0x00E2
 630:	8e 7f       	andi	r24, 0xFE	; 254
 632:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 636:	80 91 e2 00 	lds	r24, 0x00E2
 63a:	80 61       	ori	r24, 0x10	; 16
 63c:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON  |=  (1 << FRZCLK);
 640:	80 91 d8 00 	lds	r24, 0x00D8
 644:	80 62       	ori	r24, 0x20	; 32
 646:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
 64a:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
 64c:	85 e0       	ldi	r24, 0x05	; 5
 64e:	80 93 06 01 	sts	0x0106, r24
		EVENT_USB_Device_Suspend();
 652:	e6 d2       	rcall	.+1484   	; 0xc20 <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
 654:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
 658:	84 ff       	sbrs	r24, 4
 65a:	2d c0       	rjmp	.+90     	; 0x6b6 <__vector_10+0x11e>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
 65c:	80 91 e2 00 	lds	r24, 0x00E2
 660:	84 ff       	sbrs	r24, 4
 662:	29 c0       	rjmp	.+82     	; 0x6b6 <__vector_10+0x11e>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 664:	8c e0       	ldi	r24, 0x0C	; 12
 666:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 668:	8e e0       	ldi	r24, 0x0E	; 14
 66a:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 66c:	09 b4       	in	r0, 0x29	; 41
 66e:	00 fe       	sbrs	r0, 0
 670:	fd cf       	rjmp	.-6      	; 0x66c <__vector_10+0xd4>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
 672:	80 91 d8 00 	lds	r24, 0x00D8
 676:	8f 7d       	andi	r24, 0xDF	; 223
 678:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
 67c:	80 91 e1 00 	lds	r24, 0x00E1
 680:	8f 7e       	andi	r24, 0xEF	; 239
 682:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
 686:	80 91 e2 00 	lds	r24, 0x00E2
 68a:	8f 7e       	andi	r24, 0xEF	; 239
 68c:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 690:	80 91 e2 00 	lds	r24, 0x00E2
 694:	81 60       	ori	r24, 0x01	; 1
 696:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
 69a:	80 91 02 01 	lds	r24, 0x0102
 69e:	88 23       	and	r24, r24
 6a0:	31 f4       	brne	.+12     	; 0x6ae <__vector_10+0x116>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 6a2:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 6a6:	87 fd       	sbrc	r24, 7
 6a8:	02 c0       	rjmp	.+4      	; 0x6ae <__vector_10+0x116>
 6aa:	81 e0       	ldi	r24, 0x01	; 1
 6ac:	01 c0       	rjmp	.+2      	; 0x6b0 <__vector_10+0x118>
 6ae:	84 e0       	ldi	r24, 0x04	; 4
 6b0:	80 93 06 01 	sts	0x0106, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
 6b4:	b5 d2       	rcall	.+1386   	; 0xc20 <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
 6b6:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
 6ba:	83 ff       	sbrs	r24, 3
 6bc:	22 c0       	rjmp	.+68     	; 0x702 <__vector_10+0x16a>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
 6be:	80 91 e2 00 	lds	r24, 0x00E2
 6c2:	83 ff       	sbrs	r24, 3
 6c4:	1e c0       	rjmp	.+60     	; 0x702 <__vector_10+0x16a>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
 6c6:	80 91 e1 00 	lds	r24, 0x00E1
 6ca:	87 7f       	andi	r24, 0xF7	; 247
 6cc:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
 6d0:	82 e0       	ldi	r24, 0x02	; 2
 6d2:	80 93 06 01 	sts	0x0106, r24
		USB_Device_ConfigurationNumber = 0;
 6d6:	10 92 02 01 	sts	0x0102, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 6da:	80 91 e1 00 	lds	r24, 0x00E1
 6de:	8e 7f       	andi	r24, 0xFE	; 254
 6e0:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 6e4:	80 91 e2 00 	lds	r24, 0x00E2
 6e8:	8e 7f       	andi	r24, 0xFE	; 254
 6ea:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 6ee:	80 91 e2 00 	lds	r24, 0x00E2
 6f2:	80 61       	ori	r24, 0x10	; 16
 6f4:	80 93 e2 00 	sts	0x00E2, r24
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
 6f8:	80 e0       	ldi	r24, 0x00	; 0
 6fa:	60 e0       	ldi	r22, 0x00	; 0
 6fc:	42 e0       	ldi	r20, 0x02	; 2
 6fe:	65 de       	rcall	.-822    	; 0x3ca <Endpoint_ConfigureEndpoint_Prv>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
 700:	8f d2       	rcall	.+1310   	; 0xc20 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
 702:	ff 91       	pop	r31
 704:	ef 91       	pop	r30
 706:	bf 91       	pop	r27
 708:	af 91       	pop	r26
 70a:	9f 91       	pop	r25
 70c:	8f 91       	pop	r24
 70e:	7f 91       	pop	r23
 710:	6f 91       	pop	r22
 712:	5f 91       	pop	r21
 714:	4f 91       	pop	r20
 716:	3f 91       	pop	r19
 718:	2f 91       	pop	r18
 71a:	0f 90       	pop	r0
 71c:	0b be       	out	0x3b, r0	; 59
 71e:	0f 90       	pop	r0
 720:	0f be       	out	0x3f, r0	; 63
 722:	0f 90       	pop	r0
 724:	1f 90       	pop	r1
 726:	18 95       	reti

00000728 <Endpoint_Write_Control_Stream_LE>:
 728:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 72a:	40 91 0d 01 	lds	r20, 0x010D
 72e:	50 91 0e 01 	lds	r21, 0x010E
 732:	46 17       	cp	r20, r22
 734:	57 07       	cpc	r21, r23
 736:	18 f4       	brcc	.+6      	; 0x73e <Endpoint_Write_Control_Stream_LE+0x16>
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
 738:	f9 01       	movw	r30, r18
 73a:	90 e0       	ldi	r25, 0x00	; 0
 73c:	3d c0       	rjmp	.+122    	; 0x7b8 <Endpoint_Write_Control_Stream_LE+0x90>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 73e:	61 15       	cp	r22, r1
 740:	71 05       	cpc	r23, r1
 742:	11 f0       	breq	.+4      	; 0x748 <Endpoint_Write_Control_Stream_LE+0x20>
 744:	ab 01       	movw	r20, r22
 746:	f8 cf       	rjmp	.-16     	; 0x738 <Endpoint_Write_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 748:	80 91 e8 00 	lds	r24, 0x00E8
 74c:	8e 77       	andi	r24, 0x7E	; 126
 74e:	80 93 e8 00 	sts	0x00E8, r24
 752:	40 e0       	ldi	r20, 0x00	; 0
 754:	50 e0       	ldi	r21, 0x00	; 0
 756:	f0 cf       	rjmp	.-32     	; 0x738 <Endpoint_Write_Control_Stream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 758:	80 91 06 01 	lds	r24, 0x0106

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 75c:	88 23       	and	r24, r24
 75e:	f1 f1       	breq	.+124    	; 0x7dc <Endpoint_Write_Control_Stream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 760:	85 30       	cpi	r24, 0x05	; 5
 762:	f1 f1       	breq	.+124    	; 0x7e0 <Endpoint_Write_Control_Stream_LE+0xb8>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 764:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 768:	83 ff       	sbrs	r24, 3
 76a:	02 c0       	rjmp	.+4      	; 0x770 <Endpoint_Write_Control_Stream_LE+0x48>
 76c:	81 e0       	ldi	r24, 0x01	; 1
 76e:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 770:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
 774:	82 fd       	sbrc	r24, 2
 776:	2c c0       	rjmp	.+88     	; 0x7d0 <Endpoint_Write_Control_Stream_LE+0xa8>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 778:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
 77c:	80 ff       	sbrs	r24, 0
 77e:	1c c0       	rjmp	.+56     	; 0x7b8 <Endpoint_Write_Control_Stream_LE+0x90>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
 780:	20 91 f2 00 	lds	r18, 0x00F2
 784:	30 91 f3 00 	lds	r19, 0x00F3
 788:	07 c0       	rjmp	.+14     	; 0x798 <Endpoint_Write_Control_Stream_LE+0x70>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 78a:	81 91       	ld	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 78c:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
 790:	41 50       	subi	r20, 0x01	; 1
 792:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
 794:	2f 5f       	subi	r18, 0xFF	; 255
 796:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 798:	41 15       	cp	r20, r1
 79a:	51 05       	cpc	r21, r1
 79c:	19 f0       	breq	.+6      	; 0x7a4 <Endpoint_Write_Control_Stream_LE+0x7c>
 79e:	28 30       	cpi	r18, 0x08	; 8
 7a0:	31 05       	cpc	r19, r1
 7a2:	98 f3       	brcs	.-26     	; 0x78a <Endpoint_Write_Control_Stream_LE+0x62>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
 7a4:	90 e0       	ldi	r25, 0x00	; 0
 7a6:	28 30       	cpi	r18, 0x08	; 8
 7a8:	31 05       	cpc	r19, r1
 7aa:	09 f4       	brne	.+2      	; 0x7ae <Endpoint_Write_Control_Stream_LE+0x86>
 7ac:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 7ae:	80 91 e8 00 	lds	r24, 0x00E8
 7b2:	8e 77       	andi	r24, 0x7E	; 126
 7b4:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 7b8:	41 15       	cp	r20, r1
 7ba:	51 05       	cpc	r21, r1
 7bc:	69 f6       	brne	.-102    	; 0x758 <Endpoint_Write_Control_Stream_LE+0x30>
 7be:	99 23       	and	r25, r25
 7c0:	59 f6       	brne	.-106    	; 0x758 <Endpoint_Write_Control_Stream_LE+0x30>
 7c2:	06 c0       	rjmp	.+12     	; 0x7d0 <Endpoint_Write_Control_Stream_LE+0xa8>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 7c4:	80 91 06 01 	lds	r24, 0x0106

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 7c8:	88 23       	and	r24, r24
 7ca:	41 f0       	breq	.+16     	; 0x7dc <Endpoint_Write_Control_Stream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 7cc:	85 30       	cpi	r24, 0x05	; 5
 7ce:	41 f0       	breq	.+16     	; 0x7e0 <Endpoint_Write_Control_Stream_LE+0xb8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 7d0:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 7d4:	82 ff       	sbrs	r24, 2
 7d6:	f6 cf       	rjmp	.-20     	; 0x7c4 <Endpoint_Write_Control_Stream_LE+0x9c>
 7d8:	80 e0       	ldi	r24, 0x00	; 0
 7da:	08 95       	ret
 7dc:	82 e0       	ldi	r24, 0x02	; 2
 7de:	08 95       	ret
 7e0:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 7e2:	08 95       	ret

000007e4 <Endpoint_Write_Control_PStream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
 7e4:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 7e6:	40 91 0d 01 	lds	r20, 0x010D
 7ea:	50 91 0e 01 	lds	r21, 0x010E
 7ee:	46 17       	cp	r20, r22
 7f0:	57 07       	cpc	r21, r23
 7f2:	18 f4       	brcc	.+6      	; 0x7fa <Endpoint_Write_Control_PStream_LE+0x16>
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
 7f4:	f9 01       	movw	r30, r18
 7f6:	90 e0       	ldi	r25, 0x00	; 0
 7f8:	40 c0       	rjmp	.+128    	; 0x87a <Endpoint_Write_Control_PStream_LE+0x96>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 7fa:	61 15       	cp	r22, r1
 7fc:	71 05       	cpc	r23, r1
 7fe:	11 f0       	breq	.+4      	; 0x804 <Endpoint_Write_Control_PStream_LE+0x20>
 800:	ab 01       	movw	r20, r22
 802:	f8 cf       	rjmp	.-16     	; 0x7f4 <Endpoint_Write_Control_PStream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 804:	80 91 e8 00 	lds	r24, 0x00E8
 808:	8e 77       	andi	r24, 0x7E	; 126
 80a:	80 93 e8 00 	sts	0x00E8, r24
 80e:	40 e0       	ldi	r20, 0x00	; 0
 810:	50 e0       	ldi	r21, 0x00	; 0
 812:	f0 cf       	rjmp	.-32     	; 0x7f4 <Endpoint_Write_Control_PStream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 814:	80 91 06 01 	lds	r24, 0x0106

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 818:	88 23       	and	r24, r24
 81a:	09 f4       	brne	.+2      	; 0x81e <Endpoint_Write_Control_PStream_LE+0x3a>
 81c:	40 c0       	rjmp	.+128    	; 0x89e <Endpoint_Write_Control_PStream_LE+0xba>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 81e:	85 30       	cpi	r24, 0x05	; 5
 820:	09 f4       	brne	.+2      	; 0x824 <Endpoint_Write_Control_PStream_LE+0x40>
 822:	3f c0       	rjmp	.+126    	; 0x8a2 <Endpoint_Write_Control_PStream_LE+0xbe>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 824:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 828:	83 ff       	sbrs	r24, 3
 82a:	02 c0       	rjmp	.+4      	; 0x830 <Endpoint_Write_Control_PStream_LE+0x4c>
 82c:	81 e0       	ldi	r24, 0x01	; 1
 82e:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 830:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
 834:	82 fd       	sbrc	r24, 2
 836:	2d c0       	rjmp	.+90     	; 0x892 <Endpoint_Write_Control_PStream_LE+0xae>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 838:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
 83c:	80 ff       	sbrs	r24, 0
 83e:	1d c0       	rjmp	.+58     	; 0x87a <Endpoint_Write_Control_PStream_LE+0x96>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
 840:	20 91 f2 00 	lds	r18, 0x00F2
 844:	30 91 f3 00 	lds	r19, 0x00F3
 848:	08 c0       	rjmp	.+16     	; 0x85a <Endpoint_Write_Control_PStream_LE+0x76>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 84a:	84 91       	lpm	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 84c:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
 850:	31 96       	adiw	r30, 0x01	; 1
				Length--;
 852:	41 50       	subi	r20, 0x01	; 1
 854:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
 856:	2f 5f       	subi	r18, 0xFF	; 255
 858:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 85a:	41 15       	cp	r20, r1
 85c:	51 05       	cpc	r21, r1
 85e:	19 f0       	breq	.+6      	; 0x866 <Endpoint_Write_Control_PStream_LE+0x82>
 860:	28 30       	cpi	r18, 0x08	; 8
 862:	31 05       	cpc	r19, r1
 864:	90 f3       	brcs	.-28     	; 0x84a <Endpoint_Write_Control_PStream_LE+0x66>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
 866:	90 e0       	ldi	r25, 0x00	; 0
 868:	28 30       	cpi	r18, 0x08	; 8
 86a:	31 05       	cpc	r19, r1
 86c:	09 f4       	brne	.+2      	; 0x870 <Endpoint_Write_Control_PStream_LE+0x8c>
 86e:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 870:	80 91 e8 00 	lds	r24, 0x00E8
 874:	8e 77       	andi	r24, 0x7E	; 126
 876:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 87a:	41 15       	cp	r20, r1
 87c:	51 05       	cpc	r21, r1
 87e:	51 f6       	brne	.-108    	; 0x814 <Endpoint_Write_Control_PStream_LE+0x30>
 880:	99 23       	and	r25, r25
 882:	41 f6       	brne	.-112    	; 0x814 <Endpoint_Write_Control_PStream_LE+0x30>
 884:	06 c0       	rjmp	.+12     	; 0x892 <Endpoint_Write_Control_PStream_LE+0xae>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 886:	80 91 06 01 	lds	r24, 0x0106

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 88a:	88 23       	and	r24, r24
 88c:	41 f0       	breq	.+16     	; 0x89e <Endpoint_Write_Control_PStream_LE+0xba>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 88e:	85 30       	cpi	r24, 0x05	; 5
 890:	41 f0       	breq	.+16     	; 0x8a2 <Endpoint_Write_Control_PStream_LE+0xbe>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 892:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 896:	82 ff       	sbrs	r24, 2
 898:	f6 cf       	rjmp	.-20     	; 0x886 <Endpoint_Write_Control_PStream_LE+0xa2>
 89a:	80 e0       	ldi	r24, 0x00	; 0
 89c:	08 95       	ret
 89e:	82 e0       	ldi	r24, 0x02	; 2
 8a0:	08 95       	ret
 8a2:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 8a4:	08 95       	ret

000008a6 <Endpoint_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
 8a6:	bf 92       	push	r11
 8a8:	cf 92       	push	r12
 8aa:	df 92       	push	r13
 8ac:	ef 92       	push	r14
 8ae:	ff 92       	push	r15
 8b0:	0f 93       	push	r16
 8b2:	1f 93       	push	r17
 8b4:	cf 93       	push	r28
 8b6:	df 93       	push	r29
 8b8:	18 2f       	mov	r17, r24
 8ba:	09 2f       	mov	r16, r25
 8bc:	7b 01       	movw	r14, r22
 8be:	6a 01       	movw	r12, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
 8c0:	da dd       	rcall	.-1100   	; 0x476 <Endpoint_WaitUntilReady>
 8c2:	b8 2e       	mov	r11, r24
 8c4:	88 23       	and	r24, r24
 8c6:	b1 f5       	brne	.+108    	; 0x934 <Endpoint_Write_Stream_LE+0x8e>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
 8c8:	81 2f       	mov	r24, r17
 8ca:	90 2f       	mov	r25, r16
 8cc:	9c 01       	movw	r18, r24
 8ce:	e9 01       	movw	r28, r18
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
 8d0:	c1 14       	cp	r12, r1
 8d2:	d1 04       	cpc	r13, r1
 8d4:	39 f0       	breq	.+14     	; 0x8e4 <Endpoint_Write_Stream_LE+0x3e>
	{
		Length -= *BytesProcessed;
 8d6:	f6 01       	movw	r30, r12
 8d8:	80 81       	ld	r24, Z
 8da:	91 81       	ldd	r25, Z+1	; 0x01
 8dc:	e8 1a       	sub	r14, r24
 8de:	f9 0a       	sbc	r15, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
 8e0:	c8 0f       	add	r28, r24
 8e2:	d9 1f       	adc	r29, r25
 8e4:	00 e0       	ldi	r16, 0x00	; 0
 8e6:	10 e0       	ldi	r17, 0x00	; 0
 8e8:	22 c0       	rjmp	.+68     	; 0x92e <Endpoint_Write_Stream_LE+0x88>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 8ea:	80 91 e8 00 	lds	r24, 0x00E8
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
 8ee:	85 fd       	sbrc	r24, 5
 8f0:	16 c0       	rjmp	.+44     	; 0x91e <Endpoint_Write_Stream_LE+0x78>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 8f2:	80 91 e8 00 	lds	r24, 0x00E8
 8f6:	8e 77       	andi	r24, 0x7E	; 126
 8f8:	80 93 e8 00 	sts	0x00E8, r24
		{
			TEMPLATE_CLEAR_ENDPOINT();

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
 8fc:	92 d1       	rcall	.+804    	; 0xc22 <USB_USBTask>
			#endif

			if (BytesProcessed != NULL)
 8fe:	c1 14       	cp	r12, r1
 900:	d1 04       	cpc	r13, r1
 902:	49 f0       	breq	.+18     	; 0x916 <Endpoint_Write_Stream_LE+0x70>
			{
				*BytesProcessed += BytesInTransfer;
 904:	f6 01       	movw	r30, r12
 906:	80 81       	ld	r24, Z
 908:	91 81       	ldd	r25, Z+1	; 0x01
 90a:	80 0f       	add	r24, r16
 90c:	91 1f       	adc	r25, r17
 90e:	91 83       	std	Z+1, r25	; 0x01
 910:	80 83       	st	Z, r24
 912:	85 e0       	ldi	r24, 0x05	; 5
 914:	10 c0       	rjmp	.+32     	; 0x936 <Endpoint_Write_Stream_LE+0x90>
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
 916:	af dd       	rcall	.-1186   	; 0x476 <Endpoint_WaitUntilReady>
 918:	88 23       	and	r24, r24
 91a:	49 f0       	breq	.+18     	; 0x92e <Endpoint_Write_Stream_LE+0x88>
 91c:	0c c0       	rjmp	.+24     	; 0x936 <Endpoint_Write_Stream_LE+0x90>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
 91e:	89 91       	ld	r24, Y+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 920:	80 93 f1 00 	sts	0x00F1, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
 924:	08 94       	sec
 926:	e1 08       	sbc	r14, r1
 928:	f1 08       	sbc	r15, r1
			BytesInTransfer++;
 92a:	0f 5f       	subi	r16, 0xFF	; 255
 92c:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
 92e:	e1 14       	cp	r14, r1
 930:	f1 04       	cpc	r15, r1
 932:	d9 f6       	brne	.-74     	; 0x8ea <Endpoint_Write_Stream_LE+0x44>
 934:	8b 2d       	mov	r24, r11
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
 936:	df 91       	pop	r29
 938:	cf 91       	pop	r28
 93a:	1f 91       	pop	r17
 93c:	0f 91       	pop	r16
 93e:	ff 90       	pop	r15
 940:	ef 90       	pop	r14
 942:	df 90       	pop	r13
 944:	cf 90       	pop	r12
 946:	bf 90       	pop	r11
 948:	08 95       	ret

0000094a <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
 94a:	0f 93       	push	r16
 94c:	1f 93       	push	r17
 94e:	df 93       	push	r29
 950:	cf 93       	push	r28
 952:	cd b7       	in	r28, 0x3d	; 61
 954:	de b7       	in	r29, 0x3e	; 62
 956:	ac 97       	sbiw	r28, 0x2c	; 44
 958:	0f b6       	in	r0, 0x3f	; 63
 95a:	f8 94       	cli
 95c:	de bf       	out	0x3e, r29	; 62
 95e:	0f be       	out	0x3f, r0	; 63
 960:	cd bf       	out	0x3d, r28	; 61
 962:	e7 e0       	ldi	r30, 0x07	; 7
 964:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 966:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
 96a:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
 96c:	21 e0       	ldi	r18, 0x01	; 1
 96e:	ef 30       	cpi	r30, 0x0F	; 15
 970:	f2 07       	cpc	r31, r18
 972:	c9 f7       	brne	.-14     	; 0x966 <USB_Device_ProcessControlRequest+0x1c>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
 974:	7e dc       	rcall	.-1796   	; 0x272 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 976:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
 97a:	83 ff       	sbrs	r24, 3
 97c:	38 c1       	rjmp	.+624    	; 0xbee <USB_Device_ProcessControlRequest+0x2a4>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
 97e:	80 91 07 01 	lds	r24, 0x0107

		switch (USB_ControlRequest.bRequest)
 982:	30 91 08 01 	lds	r19, 0x0108
 986:	35 30       	cpi	r19, 0x05	; 5
 988:	09 f4       	brne	.+2      	; 0x98c <USB_Device_ProcessControlRequest+0x42>
 98a:	87 c0       	rjmp	.+270    	; 0xa9a <USB_Device_ProcessControlRequest+0x150>
 98c:	36 30       	cpi	r19, 0x06	; 6
 98e:	40 f4       	brcc	.+16     	; 0x9a0 <USB_Device_ProcessControlRequest+0x56>
 990:	31 30       	cpi	r19, 0x01	; 1
 992:	c9 f1       	breq	.+114    	; 0xa06 <USB_Device_ProcessControlRequest+0xbc>
 994:	31 30       	cpi	r19, 0x01	; 1
 996:	70 f0       	brcs	.+28     	; 0x9b4 <USB_Device_ProcessControlRequest+0x6a>
 998:	33 30       	cpi	r19, 0x03	; 3
 99a:	09 f0       	breq	.+2      	; 0x99e <USB_Device_ProcessControlRequest+0x54>
 99c:	28 c1       	rjmp	.+592    	; 0xbee <USB_Device_ProcessControlRequest+0x2a4>
 99e:	33 c0       	rjmp	.+102    	; 0xa06 <USB_Device_ProcessControlRequest+0xbc>
 9a0:	38 30       	cpi	r19, 0x08	; 8
 9a2:	09 f4       	brne	.+2      	; 0x9a6 <USB_Device_ProcessControlRequest+0x5c>
 9a4:	f6 c0       	rjmp	.+492    	; 0xb92 <USB_Device_ProcessControlRequest+0x248>
 9a6:	39 30       	cpi	r19, 0x09	; 9
 9a8:	09 f4       	brne	.+2      	; 0x9ac <USB_Device_ProcessControlRequest+0x62>
 9aa:	05 c1       	rjmp	.+522    	; 0xbb6 <USB_Device_ProcessControlRequest+0x26c>
 9ac:	36 30       	cpi	r19, 0x06	; 6
 9ae:	09 f0       	breq	.+2      	; 0x9b2 <USB_Device_ProcessControlRequest+0x68>
 9b0:	1e c1       	rjmp	.+572    	; 0xbee <USB_Device_ProcessControlRequest+0x2a4>
 9b2:	97 c0       	rjmp	.+302    	; 0xae2 <USB_Device_ProcessControlRequest+0x198>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 9b4:	80 38       	cpi	r24, 0x80	; 128
 9b6:	21 f0       	breq	.+8      	; 0x9c0 <USB_Device_ProcessControlRequest+0x76>
 9b8:	82 38       	cpi	r24, 0x82	; 130
 9ba:	09 f0       	breq	.+2      	; 0x9be <USB_Device_ProcessControlRequest+0x74>
 9bc:	18 c1       	rjmp	.+560    	; 0xbee <USB_Device_ProcessControlRequest+0x2a4>
 9be:	08 c0       	rjmp	.+16     	; 0x9d0 <USB_Device_ProcessControlRequest+0x86>
 9c0:	90 91 03 01 	lds	r25, 0x0103
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
 9c4:	80 91 04 01 	lds	r24, 0x0104
 9c8:	88 23       	and	r24, r24
 9ca:	99 f0       	breq	.+38     	; 0x9f2 <USB_Device_ProcessControlRequest+0xa8>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
 9cc:	92 60       	ori	r25, 0x02	; 2
 9ce:	11 c0       	rjmp	.+34     	; 0x9f2 <USB_Device_ProcessControlRequest+0xa8>
			#endif
			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 9d0:	80 91 0b 01 	lds	r24, 0x010B
 9d4:	87 70       	andi	r24, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 9d6:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 9da:	80 91 eb 00 	lds	r24, 0x00EB

			CurrentStatus = Endpoint_IsStalled();
 9de:	90 e0       	ldi	r25, 0x00	; 0
 9e0:	25 e0       	ldi	r18, 0x05	; 5
 9e2:	96 95       	lsr	r25
 9e4:	87 95       	ror	r24
 9e6:	2a 95       	dec	r18
 9e8:	e1 f7       	brne	.-8      	; 0x9e2 <USB_Device_ProcessControlRequest+0x98>
 9ea:	98 2f       	mov	r25, r24
 9ec:	91 70       	andi	r25, 0x01	; 1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 9ee:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 9f2:	80 91 e8 00 	lds	r24, 0x00E8
 9f6:	87 7f       	andi	r24, 0xF7	; 247
 9f8:	80 93 e8 00 	sts	0x00E8, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
 9fc:	90 93 f1 00 	sts	0x00F1, r25
				UEDATX = (Data >> 8);
 a00:	10 92 f1 00 	sts	0x00F1, r1
 a04:	d1 c0       	rjmp	.+418    	; 0xba8 <USB_Device_ProcessControlRequest+0x25e>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 a06:	88 23       	and	r24, r24
 a08:	19 f0       	breq	.+6      	; 0xa10 <USB_Device_ProcessControlRequest+0xc6>
 a0a:	82 30       	cpi	r24, 0x02	; 2
 a0c:	09 f0       	breq	.+2      	; 0xa10 <USB_Device_ProcessControlRequest+0xc6>
 a0e:	ef c0       	rjmp	.+478    	; 0xbee <USB_Device_ProcessControlRequest+0x2a4>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
 a10:	90 e0       	ldi	r25, 0x00	; 0
 a12:	8f 71       	andi	r24, 0x1F	; 31
 a14:	90 70       	andi	r25, 0x00	; 0
 a16:	00 97       	sbiw	r24, 0x00	; 0
 a18:	21 f0       	breq	.+8      	; 0xa22 <USB_Device_ProcessControlRequest+0xd8>
 a1a:	02 97       	sbiw	r24, 0x02	; 2
 a1c:	09 f0       	breq	.+2      	; 0xa20 <USB_Device_ProcessControlRequest+0xd6>
 a1e:	e7 c0       	rjmp	.+462    	; 0xbee <USB_Device_ProcessControlRequest+0x2a4>
 a20:	0c c0       	rjmp	.+24     	; 0xa3a <USB_Device_ProcessControlRequest+0xf0>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
 a22:	80 91 09 01 	lds	r24, 0x0109
 a26:	81 30       	cpi	r24, 0x01	; 1
 a28:	09 f0       	breq	.+2      	; 0xa2c <USB_Device_ProcessControlRequest+0xe2>
 a2a:	e1 c0       	rjmp	.+450    	; 0xbee <USB_Device_ProcessControlRequest+0x2a4>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
 a2c:	10 92 04 01 	sts	0x0104, r1
 a30:	33 30       	cpi	r19, 0x03	; 3
 a32:	69 f5       	brne	.+90     	; 0xa8e <USB_Device_ProcessControlRequest+0x144>
 a34:	80 93 04 01 	sts	0x0104, r24
 a38:	2a c0       	rjmp	.+84     	; 0xa8e <USB_Device_ProcessControlRequest+0x144>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
 a3a:	80 91 09 01 	lds	r24, 0x0109
 a3e:	88 23       	and	r24, r24
 a40:	31 f5       	brne	.+76     	; 0xa8e <USB_Device_ProcessControlRequest+0x144>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 a42:	20 91 0b 01 	lds	r18, 0x010B
 a46:	27 70       	andi	r18, 0x07	; 7

				if (EndpointIndex == ENDPOINT_CONTROLEP)
 a48:	09 f4       	brne	.+2      	; 0xa4c <USB_Device_ProcessControlRequest+0x102>
 a4a:	d1 c0       	rjmp	.+418    	; 0xbee <USB_Device_ProcessControlRequest+0x2a4>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 a4c:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
 a50:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
 a54:	80 ff       	sbrs	r24, 0
 a56:	1b c0       	rjmp	.+54     	; 0xa8e <USB_Device_ProcessControlRequest+0x144>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
 a58:	33 30       	cpi	r19, 0x03	; 3
 a5a:	21 f4       	brne	.+8      	; 0xa64 <USB_Device_ProcessControlRequest+0x11a>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 a5c:	80 91 eb 00 	lds	r24, 0x00EB
 a60:	80 62       	ori	r24, 0x20	; 32
 a62:	13 c0       	rjmp	.+38     	; 0xa8a <USB_Device_ProcessControlRequest+0x140>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
 a64:	80 91 eb 00 	lds	r24, 0x00EB
 a68:	80 61       	ori	r24, 0x10	; 16
 a6a:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
 a6e:	81 e0       	ldi	r24, 0x01	; 1
 a70:	90 e0       	ldi	r25, 0x00	; 0
 a72:	02 c0       	rjmp	.+4      	; 0xa78 <USB_Device_ProcessControlRequest+0x12e>
 a74:	88 0f       	add	r24, r24
 a76:	99 1f       	adc	r25, r25
 a78:	2a 95       	dec	r18
 a7a:	e2 f7       	brpl	.-8      	; 0xa74 <USB_Device_ProcessControlRequest+0x12a>
 a7c:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
 a80:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
 a84:	80 91 eb 00 	lds	r24, 0x00EB
 a88:	88 60       	ori	r24, 0x08	; 8
 a8a:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 a8e:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 a92:	80 91 e8 00 	lds	r24, 0x00E8
 a96:	87 7f       	andi	r24, 0xF7	; 247
 a98:	8a c0       	rjmp	.+276    	; 0xbae <USB_Device_ProcessControlRequest+0x264>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 a9a:	88 23       	and	r24, r24
 a9c:	09 f0       	breq	.+2      	; 0xaa0 <USB_Device_ProcessControlRequest+0x156>
 a9e:	a7 c0       	rjmp	.+334    	; 0xbee <USB_Device_ProcessControlRequest+0x2a4>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t    DeviceAddress    = (USB_ControlRequest.wValue & 0x7F);
 aa0:	10 91 09 01 	lds	r17, 0x0109
 aa4:	1f 77       	andi	r17, 0x7F	; 127
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 aa6:	0f b7       	in	r16, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 aa8:	f8 94       	cli
 aaa:	80 91 e8 00 	lds	r24, 0x00E8
 aae:	87 7f       	andi	r24, 0xF7	; 247
 ab0:	80 93 e8 00 	sts	0x00E8, r24
	uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
	GlobalInterruptDisable();
				
	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
 ab4:	bf dc       	rcall	.-1666   	; 0x434 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 ab6:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
 aba:	80 ff       	sbrs	r24, 0
 abc:	fc cf       	rjmp	.-8      	; 0xab6 <USB_Device_ProcessControlRequest+0x16c>
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				uint8_t Temp = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
 abe:	80 91 e3 00 	lds	r24, 0x00E3
 ac2:	80 78       	andi	r24, 0x80	; 128
 ac4:	81 2b       	or	r24, r17

				UDADDR = Temp;
 ac6:	80 93 e3 00 	sts	0x00E3, r24
				UDADDR = Temp | (1 << ADDEN);
 aca:	80 68       	ori	r24, 0x80	; 128
 acc:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_SetDeviceAddress(DeviceAddress);
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
 ad0:	11 23       	and	r17, r17
 ad2:	11 f4       	brne	.+4      	; 0xad8 <USB_Device_ProcessControlRequest+0x18e>
 ad4:	82 e0       	ldi	r24, 0x02	; 2
 ad6:	01 c0       	rjmp	.+2      	; 0xada <USB_Device_ProcessControlRequest+0x190>
 ad8:	83 e0       	ldi	r24, 0x03	; 3
 ada:	80 93 06 01 	sts	0x0106, r24
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
 ade:	0f bf       	out	0x3f, r16	; 63
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;				
				#endif
				
				GCC_MEMORY_BARRIER();
 ae0:	86 c0       	rjmp	.+268    	; 0xbee <USB_Device_ProcessControlRequest+0x2a4>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 ae2:	80 58       	subi	r24, 0x80	; 128
 ae4:	82 30       	cpi	r24, 0x02	; 2
 ae6:	08 f0       	brcs	.+2      	; 0xaea <USB_Device_ProcessControlRequest+0x1a0>
 ae8:	82 c0       	rjmp	.+260    	; 0xbee <USB_Device_ProcessControlRequest+0x2a4>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
 aea:	80 91 09 01 	lds	r24, 0x0109
 aee:	90 91 0a 01 	lds	r25, 0x010A
 af2:	23 e0       	ldi	r18, 0x03	; 3
 af4:	8c 3d       	cpi	r24, 0xDC	; 220
 af6:	92 07       	cpc	r25, r18
 af8:	09 f0       	breq	.+2      	; 0xafc <USB_Device_ProcessControlRequest+0x1b2>
 afa:	33 c0       	rjmp	.+102    	; 0xb62 <USB_Device_ProcessControlRequest+0x218>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
 afc:	83 e0       	ldi	r24, 0x03	; 3
 afe:	8c 83       	std	Y+4, r24	; 0x04
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
 b00:	8a e2       	ldi	r24, 0x2A	; 42
 b02:	8b 83       	std	Y+3, r24	; 0x03
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 b04:	7f b7       	in	r23, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 b06:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
 b08:	de 01       	movw	r26, r28
 b0a:	15 96       	adiw	r26, 0x05	; 5
 b0c:	6e e0       	ldi	r22, 0x0E	; 14
 b0e:	40 e0       	ldi	r20, 0x00	; 0
 b10:	50 e0       	ldi	r21, 0x00	; 0
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
 b12:	11 e2       	ldi	r17, 0x21	; 33
 b14:	e6 2f       	mov	r30, r22
 b16:	f0 e0       	ldi	r31, 0x00	; 0
 b18:	10 93 57 00 	sts	0x0057, r17
 b1c:	84 91       	lpm	r24, Z+

					if (SerialCharNum & 0x01)
 b1e:	40 ff       	sbrs	r20, 0
 b20:	03 c0       	rjmp	.+6      	; 0xb28 <USB_Device_ProcessControlRequest+0x1de>
					{
						SerialByte >>= 4;
 b22:	82 95       	swap	r24
 b24:	8f 70       	andi	r24, 0x0F	; 15
						SigReadAddress++;
 b26:	6f 5f       	subi	r22, 0xFF	; 255
					}

					SerialByte &= 0x0F;
 b28:	8f 70       	andi	r24, 0x0F	; 15
 b2a:	28 2f       	mov	r18, r24
 b2c:	30 e0       	ldi	r19, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
 b2e:	8a 30       	cpi	r24, 0x0A	; 10
 b30:	18 f0       	brcs	.+6      	; 0xb38 <USB_Device_ProcessControlRequest+0x1ee>
 b32:	c9 01       	movw	r24, r18
 b34:	c7 96       	adiw	r24, 0x37	; 55
 b36:	02 c0       	rjmp	.+4      	; 0xb3c <USB_Device_ProcessControlRequest+0x1f2>
 b38:	c9 01       	movw	r24, r18
 b3a:	c0 96       	adiw	r24, 0x30	; 48
 b3c:	8d 93       	st	X+, r24
 b3e:	9d 93       	st	X+, r25
 b40:	4f 5f       	subi	r20, 0xFF	; 255
 b42:	5f 4f       	sbci	r21, 0xFF	; 255
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 b44:	44 31       	cpi	r20, 0x14	; 20
 b46:	51 05       	cpc	r21, r1
 b48:	29 f7       	brne	.-54     	; 0xb14 <USB_Device_ProcessControlRequest+0x1ca>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
 b4a:	7f bf       	out	0x3f, r23	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 b4c:	80 91 e8 00 	lds	r24, 0x00E8
 b50:	87 7f       	andi	r24, 0xF7	; 247
 b52:	80 93 e8 00 	sts	0x00E8, r24
	
	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
 b56:	ce 01       	movw	r24, r28
 b58:	03 96       	adiw	r24, 0x03	; 3
 b5a:	6a e2       	ldi	r22, 0x2A	; 42
 b5c:	70 e0       	ldi	r23, 0x00	; 0
 b5e:	e4 dd       	rcall	.-1080   	; 0x728 <Endpoint_Write_Control_Stream_LE>
 b60:	12 c0       	rjmp	.+36     	; 0xb86 <USB_Device_ProcessControlRequest+0x23c>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
 b62:	60 91 0b 01 	lds	r22, 0x010B
 b66:	ae 01       	movw	r20, r28
 b68:	4f 5f       	subi	r20, 0xFF	; 255
 b6a:	5f 4f       	sbci	r21, 0xFF	; 255
 b6c:	ee db       	rcall	.-2084   	; 0x34a <CALLBACK_USB_GetDescriptor>
 b6e:	bc 01       	movw	r22, r24
 b70:	00 97       	sbiw	r24, 0x00	; 0
 b72:	09 f4       	brne	.+2      	; 0xb76 <USB_Device_ProcessControlRequest+0x22c>
 b74:	3c c0       	rjmp	.+120    	; 0xbee <USB_Device_ProcessControlRequest+0x2a4>
 b76:	80 91 e8 00 	lds	r24, 0x00E8
 b7a:	87 7f       	andi	r24, 0xF7	; 247
 b7c:	80 93 e8 00 	sts	0x00E8, r24
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
 b80:	89 81       	ldd	r24, Y+1	; 0x01
 b82:	9a 81       	ldd	r25, Y+2	; 0x02
 b84:	2f de       	rcall	.-930    	; 0x7e4 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 b86:	80 91 e8 00 	lds	r24, 0x00E8
 b8a:	8b 77       	andi	r24, 0x7B	; 123
 b8c:	80 93 e8 00 	sts	0x00E8, r24
 b90:	2e c0       	rjmp	.+92     	; 0xbee <USB_Device_ProcessControlRequest+0x2a4>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
 b92:	80 38       	cpi	r24, 0x80	; 128
 b94:	61 f5       	brne	.+88     	; 0xbee <USB_Device_ProcessControlRequest+0x2a4>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 b96:	80 91 e8 00 	lds	r24, 0x00E8
 b9a:	87 7f       	andi	r24, 0xF7	; 247
 b9c:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
 ba0:	80 91 02 01 	lds	r24, 0x0102
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 ba4:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 ba8:	80 91 e8 00 	lds	r24, 0x00E8
 bac:	8e 77       	andi	r24, 0x7E	; 126
 bae:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
 bb2:	40 dc       	rcall	.-1920   	; 0x434 <Endpoint_ClearStatusStage>
 bb4:	1c c0       	rjmp	.+56     	; 0xbee <USB_Device_ProcessControlRequest+0x2a4>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 bb6:	88 23       	and	r24, r24
 bb8:	d1 f4       	brne	.+52     	; 0xbee <USB_Device_ProcessControlRequest+0x2a4>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
 bba:	90 91 09 01 	lds	r25, 0x0109
 bbe:	92 30       	cpi	r25, 0x02	; 2
 bc0:	b0 f4       	brcc	.+44     	; 0xbee <USB_Device_ProcessControlRequest+0x2a4>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 bc2:	80 91 e8 00 	lds	r24, 0x00E8
 bc6:	87 7f       	andi	r24, 0xF7	; 247
 bc8:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
 bcc:	90 93 02 01 	sts	0x0102, r25

	Endpoint_ClearStatusStage();
 bd0:	31 dc       	rcall	.-1950   	; 0x434 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
 bd2:	80 91 02 01 	lds	r24, 0x0102
 bd6:	88 23       	and	r24, r24
 bd8:	31 f4       	brne	.+12     	; 0xbe6 <USB_Device_ProcessControlRequest+0x29c>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 bda:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 bde:	87 fd       	sbrc	r24, 7
 be0:	02 c0       	rjmp	.+4      	; 0xbe6 <USB_Device_ProcessControlRequest+0x29c>
 be2:	81 e0       	ldi	r24, 0x01	; 1
 be4:	01 c0       	rjmp	.+2      	; 0xbe8 <USB_Device_ProcessControlRequest+0x29e>
 be6:	84 e0       	ldi	r24, 0x04	; 4
 be8:	80 93 06 01 	sts	0x0106, r24

	EVENT_USB_Device_ConfigurationChanged();
 bec:	6d db       	rcall	.-2342   	; 0x2c8 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 bee:	80 91 e8 00 	lds	r24, 0x00E8

				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
 bf2:	83 ff       	sbrs	r24, 3
 bf4:	0a c0       	rjmp	.+20     	; 0xc0a <USB_Device_ProcessControlRequest+0x2c0>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 bf6:	80 91 eb 00 	lds	r24, 0x00EB
 bfa:	80 62       	ori	r24, 0x20	; 32
 bfc:	80 93 eb 00 	sts	0x00EB, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 c00:	80 91 e8 00 	lds	r24, 0x00E8
 c04:	87 7f       	andi	r24, 0xF7	; 247
 c06:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_StallTransaction();
		Endpoint_ClearSETUP();
	}
}
 c0a:	ac 96       	adiw	r28, 0x2c	; 44
 c0c:	0f b6       	in	r0, 0x3f	; 63
 c0e:	f8 94       	cli
 c10:	de bf       	out	0x3e, r29	; 62
 c12:	0f be       	out	0x3f, r0	; 63
 c14:	cd bf       	out	0x3d, r28	; 61
 c16:	cf 91       	pop	r28
 c18:	df 91       	pop	r29
 c1a:	1f 91       	pop	r17
 c1c:	0f 91       	pop	r16
 c1e:	08 95       	ret

00000c20 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
 c20:	08 95       	ret

00000c22 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
 c22:	1f 93       	push	r17
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
 c24:	80 91 06 01 	lds	r24, 0x0106
 c28:	88 23       	and	r24, r24
 c2a:	61 f0       	breq	.+24     	; 0xc44 <USB_USBTask+0x22>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
 c2c:	10 91 e9 00 	lds	r17, 0x00E9
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 c30:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 c34:	80 91 e8 00 	lds	r24, 0x00E8
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
 c38:	83 ff       	sbrs	r24, 3
 c3a:	01 c0       	rjmp	.+2      	; 0xc3e <USB_USBTask+0x1c>
		  USB_Device_ProcessControlRequest();
 c3c:	86 de       	rcall	.-756    	; 0x94a <USB_Device_ProcessControlRequest>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
 c3e:	17 70       	andi	r17, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 c40:	10 93 e9 00 	sts	0x00E9, r17
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
 c44:	1f 91       	pop	r17
 c46:	08 95       	ret

00000c48 <_exit>:
 c48:	f8 94       	cli

00000c4a <__stop_program>:
 c4a:	ff cf       	rjmp	.-2      	; 0xc4a <__stop_program>
