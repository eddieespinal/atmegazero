
Keyboard.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  00001118  000011ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001118  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000015  0080010e  0080010e  000011ba  2**0
                  ALLOC
  3 .debug_aranges 00000480  00000000  00000000  000011ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000cd4  00000000  00000000  0000163a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00007ee4  00000000  00000000  0000230e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001fc1  00000000  00000000  0000a1f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00006390  00000000  00000000  0000c1b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000006c0  00000000  00000000  00012544  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00003351  00000000  00000000  00012c04  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000035ca  00000000  00000000  00015f55  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000588  00000000  00000000  0001951f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	return true;
#endif
}

void Endpoint_ClearEndpoints(void)
{
       0:	a8 c0       	rjmp	.+336    	; 0x152 <__ctors_end>
	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
}
       2:	00 00       	nop

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
       4:	c3 c0       	rjmp	.+390    	; 0x18c <__bad_interrupt>
       6:	00 00       	nop
       8:	c1 c0       	rjmp	.+386    	; 0x18c <__bad_interrupt>
       a:	00 00       	nop
       c:	bf c0       	rjmp	.+382    	; 0x18c <__bad_interrupt>
       e:	00 00       	nop
      10:	bd c0       	rjmp	.+378    	; 0x18c <__bad_interrupt>
      12:	00 00       	nop
      14:	bb c0       	rjmp	.+374    	; 0x18c <__bad_interrupt>
      16:	00 00       	nop
      18:	b9 c0       	rjmp	.+370    	; 0x18c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	b7 c0       	rjmp	.+366    	; 0x18c <__bad_interrupt>
      1e:	00 00       	nop
      20:	b5 c0       	rjmp	.+362    	; 0x18c <__bad_interrupt>
      22:	00 00       	nop
      24:	b3 c0       	rjmp	.+358    	; 0x18c <__bad_interrupt>
      26:	00 00       	nop
      28:	93 c2       	rjmp	.+1318   	; 0x550 <__vector_10>
      2a:	00 00       	nop
      2c:	af c0       	rjmp	.+350    	; 0x18c <__bad_interrupt>
      2e:	00 00       	nop
      30:	ad c0       	rjmp	.+346    	; 0x18c <__bad_interrupt>
      32:	00 00       	nop
      34:	ab c0       	rjmp	.+342    	; 0x18c <__bad_interrupt>
      36:	00 00       	nop
      38:	a9 c0       	rjmp	.+338    	; 0x18c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	a7 c0       	rjmp	.+334    	; 0x18c <__bad_interrupt>
      3e:	00 00       	nop
      40:	a5 c0       	rjmp	.+330    	; 0x18c <__bad_interrupt>
      42:	00 00       	nop
      44:	a3 c0       	rjmp	.+326    	; 0x18c <__bad_interrupt>
      46:	00 00       	nop
      48:	a1 c0       	rjmp	.+322    	; 0x18c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	9f c0       	rjmp	.+318    	; 0x18c <__bad_interrupt>
      4e:	00 00       	nop
      50:	9d c0       	rjmp	.+314    	; 0x18c <__bad_interrupt>
      52:	00 00       	nop
      54:	9b c0       	rjmp	.+310    	; 0x18c <__bad_interrupt>
      56:	00 00       	nop
      58:	99 c0       	rjmp	.+306    	; 0x18c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	97 c0       	rjmp	.+302    	; 0x18c <__bad_interrupt>
      5e:	00 00       	nop
      60:	95 c0       	rjmp	.+298    	; 0x18c <__bad_interrupt>
      62:	00 00       	nop
      64:	93 c0       	rjmp	.+294    	; 0x18c <__bad_interrupt>
      66:	00 00       	nop
      68:	91 c0       	rjmp	.+290    	; 0x18c <__bad_interrupt>
      6a:	00 00       	nop
      6c:	8f c0       	rjmp	.+286    	; 0x18c <__bad_interrupt>
      6e:	00 00       	nop
      70:	8d c0       	rjmp	.+282    	; 0x18c <__bad_interrupt>
      72:	00 00       	nop
      74:	8b c0       	rjmp	.+278    	; 0x18c <__bad_interrupt>
      76:	00 00       	nop
      78:	89 c0       	rjmp	.+274    	; 0x18c <__bad_interrupt>
      7a:	00 00       	nop
      7c:	87 c0       	rjmp	.+270    	; 0x18c <__bad_interrupt>
      7e:	00 00       	nop
      80:	85 c0       	rjmp	.+266    	; 0x18c <__bad_interrupt>
      82:	00 00       	nop
      84:	83 c0       	rjmp	.+262    	; 0x18c <__bad_interrupt>
      86:	00 00       	nop
      88:	81 c0       	rjmp	.+258    	; 0x18c <__bad_interrupt>
      8a:	00 00       	nop
      8c:	7f c0       	rjmp	.+254    	; 0x18c <__bad_interrupt>
      8e:	00 00       	nop
      90:	7d c0       	rjmp	.+250    	; 0x18c <__bad_interrupt>
      92:	00 00       	nop
      94:	7b c0       	rjmp	.+246    	; 0x18c <__bad_interrupt>
      96:	00 00       	nop

00000098 <KeyboardReport>:
      98:	05 01 09 06 a1 01 05 07 19 e0 29 e7 15 00 25 01     ..........)...%.
      a8:	75 01 95 08 81 02 95 01 75 08 81 01 05 08 19 01     u.......u.......
      b8:	29 05 95 05 75 01 91 02 95 01 75 03 91 01 15 00     )...u.....u.....
      c8:	25 65 05 07 19 00 29 65 95 06 75 08 81 00 c0        %e....)e..u....

000000d7 <DeviceDescriptor>:
      d7:	12 01 10 01 00 00 00 08 eb 03 42 20 01 00 01 02     ..........B ....
      e7:	00 01                                               ..

000000e9 <ConfigurationDescriptor>:
      e9:	09 02 22 00 01 01 00 c0 32 09 04 00 00 01 03 01     ..".....2.......
      f9:	01 00 09 21 11 01 00 01 22 3f 00 07 05 81 03 08     ...!...."?......
     109:	00 01                                               ..

0000010b <LanguageString>:
     10b:	04 03 09 04                                         ....

0000010f <ManufacturerString>:
     10f:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
     11f:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

00000129 <ProductString>:
     129:	26 03 4c 00 55 00 46 00 41 00 20 00 4b 00 65 00     &.L.U.F.A. .K.e.
     139:	79 00 62 00 6f 00 61 00 72 00 64 00 20 00 44 00     y.b.o.a.r.d. .D.
     149:	65 00 6d 00 6f 00 00 00 00                          e.m.o....

00000152 <__ctors_end>:
     152:	11 24       	eor	r1, r1
     154:	1f be       	out	0x3f, r1	; 63
     156:	cf ef       	ldi	r28, 0xFF	; 255
     158:	d0 e2       	ldi	r29, 0x20	; 32
     15a:	de bf       	out	0x3e, r29	; 62
     15c:	cd bf       	out	0x3d, r28	; 61

0000015e <__do_copy_data>:
     15e:	11 e0       	ldi	r17, 0x01	; 1
     160:	a0 e0       	ldi	r26, 0x00	; 0
     162:	b1 e0       	ldi	r27, 0x01	; 1
     164:	e8 e1       	ldi	r30, 0x18	; 24
     166:	f1 e1       	ldi	r31, 0x11	; 17
     168:	00 e0       	ldi	r16, 0x00	; 0
     16a:	0b bf       	out	0x3b, r16	; 59
     16c:	02 c0       	rjmp	.+4      	; 0x172 <__do_copy_data+0x14>
     16e:	07 90       	elpm	r0, Z+
     170:	0d 92       	st	X+, r0
     172:	ae 30       	cpi	r26, 0x0E	; 14
     174:	b1 07       	cpc	r27, r17
     176:	d9 f7       	brne	.-10     	; 0x16e <__do_copy_data+0x10>

00000178 <__do_clear_bss>:
     178:	11 e0       	ldi	r17, 0x01	; 1
     17a:	ae e0       	ldi	r26, 0x0E	; 14
     17c:	b1 e0       	ldi	r27, 0x01	; 1
     17e:	01 c0       	rjmp	.+2      	; 0x182 <.do_clear_bss_start>

00000180 <.do_clear_bss_loop>:
     180:	1d 92       	st	X+, r1

00000182 <.do_clear_bss_start>:
     182:	a3 32       	cpi	r26, 0x23	; 35
     184:	b1 07       	cpc	r27, r17
     186:	e1 f7       	brne	.-8      	; 0x180 <.do_clear_bss_loop>
     188:	b1 d0       	rcall	.+354    	; 0x2ec <main>
     18a:	c4 c7       	rjmp	.+3976   	; 0x1114 <_exit>

0000018c <__bad_interrupt>:
     18c:	39 cf       	rjmp	.-398    	; 0x0 <__vectors>

0000018e <EVENT_USB_Device_Connect>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     18e:	8b b1       	in	r24, 0x0b	; 11
     190:	8f 70       	andi	r24, 0x0F	; 15
     192:	80 6a       	ori	r24, 0xA0	; 160
     194:	8b b9       	out	0x0b, r24	; 11

/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_Connect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
}
     196:	08 95       	ret

00000198 <EVENT_USB_Device_Disconnect>:
     198:	8b b1       	in	r24, 0x0b	; 11
     19a:	8f 70       	andi	r24, 0x0F	; 15
     19c:	80 61       	ori	r24, 0x10	; 16
     19e:	8b b9       	out	0x0b, r24	; 11

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
}
     1a0:	08 95       	ret

000001a2 <EVENT_USB_Device_StartOfFrame>:
			 *  \param[in,out] HIDInterfaceInfo  Pointer to a structure containing a HID Class configuration and state.
			 */
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo) ATTR_ALWAYS_INLINE ATTR_NON_NULL_PTR_ARG(1);
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
			{
				if (HIDInterfaceInfo->State.IdleMSRemaining)
     1a2:	80 91 0b 01 	lds	r24, 0x010B
     1a6:	90 91 0c 01 	lds	r25, 0x010C
     1aa:	00 97       	sbiw	r24, 0x00	; 0
     1ac:	29 f0       	breq	.+10     	; 0x1b8 <EVENT_USB_Device_StartOfFrame+0x16>
				  HIDInterfaceInfo->State.IdleMSRemaining--;
     1ae:	01 97       	sbiw	r24, 0x01	; 1
     1b0:	90 93 0c 01 	sts	0x010C, r25
     1b4:	80 93 0b 01 	sts	0x010B, r24
     1b8:	08 95       	ret

000001ba <CALLBACK_HID_Device_CreateHIDReport>:
bool CALLBACK_HID_Device_CreateHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
                                         uint8_t* const ReportID,
                                         const uint8_t ReportType,
                                         void* ReportData,
                                         uint16_t* const ReportSize)
{
     1ba:	0f 93       	push	r16
     1bc:	1f 93       	push	r17
     1be:	cf 93       	push	r28
     1c0:	df 93       	push	r29
     1c2:	e8 01       	movw	r28, r16
	USB_KeyboardReport_Data_t* KeyboardReport = (USB_KeyboardReport_Data_t*)ReportData;
     1c4:	d9 01       	movw	r26, r18
			}

			static inline uint8_t Joystick_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Joystick_GetStatus(void)
			{
				return (((uint8_t)~PINB & JOY_BMASK) | (((uint8_t)~PINE & JOY_EMASK) >> JOY_PORTE_MASK_SHIFT));
     1c6:	23 b1       	in	r18, 0x03	; 3
     1c8:	8c b1       	in	r24, 0x0c	; 12
     1ca:	80 95       	com	r24
     1cc:	90 e0       	ldi	r25, 0x00	; 0
     1ce:	80 73       	andi	r24, 0x30	; 48
     1d0:	90 70       	andi	r25, 0x00	; 0
     1d2:	95 95       	asr	r25
     1d4:	87 95       	ror	r24
     1d6:	20 95       	com	r18
     1d8:	20 7e       	andi	r18, 0xE0	; 224
     1da:	28 2b       	or	r18, r24
			}

			static inline uint8_t Buttons_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Buttons_GetStatus(void)
			{
				return ((PINE & BUTTONS_BUTTON1) ^ BUTTONS_BUTTON1);
     1dc:	3c b1       	in	r19, 0x0c	; 12
	uint8_t JoyStatus_LCL    = Joystick_GetStatus();
	uint8_t ButtonStatus_LCL = Buttons_GetStatus();

	uint8_t UsedKeyCodes = 0;

	if (JoyStatus_LCL & JOY_UP)
     1de:	27 ff       	sbrs	r18, 7
     1e0:	02 c0       	rjmp	.+4      	; 0x1e6 <CALLBACK_HID_Device_CreateHIDReport+0x2c>
	  KeyboardReport->KeyCode[UsedKeyCodes++] = HID_KEYBOARD_SC_A;
     1e2:	84 e0       	ldi	r24, 0x04	; 4
     1e4:	05 c0       	rjmp	.+10     	; 0x1f0 <CALLBACK_HID_Device_CreateHIDReport+0x36>
	else if (JoyStatus_LCL & JOY_DOWN)
     1e6:	24 fd       	sbrc	r18, 4
     1e8:	02 c0       	rjmp	.+4      	; 0x1ee <CALLBACK_HID_Device_CreateHIDReport+0x34>
     1ea:	90 e0       	ldi	r25, 0x00	; 0
     1ec:	05 c0       	rjmp	.+10     	; 0x1f8 <CALLBACK_HID_Device_CreateHIDReport+0x3e>
	  KeyboardReport->KeyCode[UsedKeyCodes++] = HID_KEYBOARD_SC_B;
     1ee:	85 e0       	ldi	r24, 0x05	; 5
     1f0:	12 96       	adiw	r26, 0x02	; 2
     1f2:	8c 93       	st	X, r24
     1f4:	12 97       	sbiw	r26, 0x02	; 2
     1f6:	91 e0       	ldi	r25, 0x01	; 1

	if (JoyStatus_LCL & JOY_LEFT)
     1f8:	26 ff       	sbrs	r18, 6
     1fa:	05 c0       	rjmp	.+10     	; 0x206 <CALLBACK_HID_Device_CreateHIDReport+0x4c>
	  KeyboardReport->KeyCode[UsedKeyCodes++] = HID_KEYBOARD_SC_C;
     1fc:	fd 01       	movw	r30, r26
     1fe:	e9 0f       	add	r30, r25
     200:	f1 1d       	adc	r31, r1
     202:	86 e0       	ldi	r24, 0x06	; 6
     204:	06 c0       	rjmp	.+12     	; 0x212 <CALLBACK_HID_Device_CreateHIDReport+0x58>
	else if (JoyStatus_LCL & JOY_RIGHT)
     206:	23 ff       	sbrs	r18, 3
     208:	06 c0       	rjmp	.+12     	; 0x216 <CALLBACK_HID_Device_CreateHIDReport+0x5c>
	  KeyboardReport->KeyCode[UsedKeyCodes++] = HID_KEYBOARD_SC_D;
     20a:	fd 01       	movw	r30, r26
     20c:	e9 0f       	add	r30, r25
     20e:	f1 1d       	adc	r31, r1
     210:	87 e0       	ldi	r24, 0x07	; 7
     212:	82 83       	std	Z+2, r24	; 0x02
     214:	9f 5f       	subi	r25, 0xFF	; 255

	if (JoyStatus_LCL & JOY_PRESS)
     216:	25 ff       	sbrs	r18, 5
     218:	06 c0       	rjmp	.+12     	; 0x226 <CALLBACK_HID_Device_CreateHIDReport+0x6c>
	  KeyboardReport->KeyCode[UsedKeyCodes++] = HID_KEYBOARD_SC_E;
     21a:	fd 01       	movw	r30, r26
     21c:	e9 0f       	add	r30, r25
     21e:	f1 1d       	adc	r31, r1
     220:	88 e0       	ldi	r24, 0x08	; 8
     222:	82 83       	std	Z+2, r24	; 0x02
     224:	9f 5f       	subi	r25, 0xFF	; 255

	if (ButtonStatus_LCL & BUTTONS_BUTTON1)
     226:	32 fd       	sbrc	r19, 2
     228:	06 c0       	rjmp	.+12     	; 0x236 <CALLBACK_HID_Device_CreateHIDReport+0x7c>
	  KeyboardReport->KeyCode[UsedKeyCodes++] = HID_KEYBOARD_SC_F;
     22a:	fd 01       	movw	r30, r26
     22c:	e9 0f       	add	r30, r25
     22e:	f1 1d       	adc	r31, r1
     230:	89 e0       	ldi	r24, 0x09	; 9
     232:	82 83       	std	Z+2, r24	; 0x02
     234:	02 c0       	rjmp	.+4      	; 0x23a <CALLBACK_HID_Device_CreateHIDReport+0x80>

	if (UsedKeyCodes)
     236:	99 23       	and	r25, r25
     238:	11 f0       	breq	.+4      	; 0x23e <CALLBACK_HID_Device_CreateHIDReport+0x84>
	  KeyboardReport->Modifier = HID_KEYBOARD_MODIFER_LEFTSHIFT;
     23a:	82 e0       	ldi	r24, 0x02	; 2
     23c:	8c 93       	st	X, r24

	*ReportSize = sizeof(USB_KeyboardReport_Data_t);
     23e:	88 e0       	ldi	r24, 0x08	; 8
     240:	90 e0       	ldi	r25, 0x00	; 0
     242:	99 83       	std	Y+1, r25	; 0x01
     244:	88 83       	st	Y, r24
	return false;
}
     246:	80 e0       	ldi	r24, 0x00	; 0
     248:	df 91       	pop	r29
     24a:	cf 91       	pop	r28
     24c:	1f 91       	pop	r17
     24e:	0f 91       	pop	r16
     250:	08 95       	ret

00000252 <CALLBACK_HID_Device_ProcessHIDReport>:
void CALLBACK_HID_Device_ProcessHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
                                          const uint8_t ReportID,
                                          const uint8_t ReportType,
                                          const void* ReportData,
                                          const uint16_t ReportSize)
{
     252:	f9 01       	movw	r30, r18
	uint8_t  LEDMask   = LEDS_NO_LEDS;
	uint8_t* LEDReport = (uint8_t*)ReportData;

	if (*LEDReport & HID_KEYBOARD_LED_NUMLOCK)
     254:	80 81       	ld	r24, Z
     256:	90 e0       	ldi	r25, 0x00	; 0
     258:	80 fd       	sbrc	r24, 0
     25a:	90 e1       	ldi	r25, 0x10	; 16
	  LEDMask |= LEDS_LED1;

	if (*LEDReport & HID_KEYBOARD_LED_CAPSLOCK)
     25c:	81 fd       	sbrc	r24, 1
	  LEDMask |= LEDS_LED3;
     25e:	90 68       	ori	r25, 0x80	; 128

	if (*LEDReport & HID_KEYBOARD_LED_SCROLLLOCK)
     260:	82 fd       	sbrc	r24, 2
	  LEDMask |= LEDS_LED4;
     262:	90 64       	ori	r25, 0x40	; 64
     264:	8b b1       	in	r24, 0x0b	; 11
     266:	8f 70       	andi	r24, 0x0F	; 15
     268:	98 2b       	or	r25, r24
     26a:	9b b9       	out	0x0b, r25	; 11

	LEDs_SetAllLEDs(LEDMask);
}
     26c:	08 95       	ret

0000026e <EVENT_USB_Device_ControlRequest>:
}

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	HID_Device_ProcessControlRequest(&Keyboard_HID_Interface);
     26e:	80 e0       	ldi	r24, 0x00	; 0
     270:	91 e0       	ldi	r25, 0x01	; 1
}
     272:	f9 c5       	rjmp	.+3058   	; 0xe66 <HID_Device_ProcessControlRequest>

00000274 <EVENT_USB_Device_ConfigurationChanged>:
/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
	bool ConfigSuccess = true;

	ConfigSuccess &= HID_Device_ConfigureEndpoints(&Keyboard_HID_Interface);
     274:	80 e0       	ldi	r24, 0x00	; 0
     276:	91 e0       	ldi	r25, 0x01	; 1
     278:	be d5       	rcall	.+2940   	; 0xdf6 <HID_Device_ConfigureEndpoints>
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
     27a:	90 91 e2 00 	lds	r25, 0x00E2
     27e:	94 60       	ori	r25, 0x04	; 4
     280:	90 93 e2 00 	sts	0x00E2, r25

	USB_Device_EnableSOFEvents();

	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
     284:	80 fd       	sbrc	r24, 0
     286:	02 c0       	rjmp	.+4      	; 0x28c <EVENT_USB_Device_ConfigurationChanged+0x18>
     288:	90 e9       	ldi	r25, 0x90	; 144
     28a:	01 c0       	rjmp	.+2      	; 0x28e <EVENT_USB_Device_ConfigurationChanged+0x1a>
     28c:	90 e6       	ldi	r25, 0x60	; 96
     28e:	8b b1       	in	r24, 0x0b	; 11
     290:	8f 70       	andi	r24, 0x0F	; 15
     292:	98 2b       	or	r25, r24
     294:	9b b9       	out	0x0b, r25	; 11
}
     296:	08 95       	ret

00000298 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware()
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     298:	84 b7       	in	r24, 0x34	; 52
     29a:	87 7f       	andi	r24, 0xF7	; 247
     29c:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     29e:	88 e1       	ldi	r24, 0x18	; 24
     2a0:	0f b6       	in	r0, 0x3f	; 63
     2a2:	f8 94       	cli
     2a4:	80 93 60 00 	sts	0x0060, r24
     2a8:	10 92 60 00 	sts	0x0060, r1
     2ac:	0f be       	out	0x3f, r0	; 63

	/* Disable clock division */
	clock_prescale_set(clock_div_1);
     2ae:	80 e0       	ldi	r24, 0x00	; 0
     2b0:	90 e0       	ldi	r25, 0x00	; 0
     2b2:	20 e8       	ldi	r18, 0x80	; 128
     2b4:	0f b6       	in	r0, 0x3f	; 63
     2b6:	f8 94       	cli
     2b8:	20 93 61 00 	sts	0x0061, r18
     2bc:	80 93 61 00 	sts	0x0061, r24
     2c0:	0f be       	out	0x3f, r0	; 63

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Joystick_Init(void)
			{
				DDRB  &= ~(JOY_BMASK);
     2c2:	84 b1       	in	r24, 0x04	; 4
     2c4:	8f 71       	andi	r24, 0x1F	; 31
     2c6:	84 b9       	out	0x04, r24	; 4
				DDRE  &= ~(JOY_EMASK);
     2c8:	8d b1       	in	r24, 0x0d	; 13
     2ca:	8f 7c       	andi	r24, 0xCF	; 207
     2cc:	8d b9       	out	0x0d, r24	; 13

				PORTB |= JOY_BMASK;
     2ce:	85 b1       	in	r24, 0x05	; 5
     2d0:	80 6e       	ori	r24, 0xE0	; 224
     2d2:	85 b9       	out	0x05, r24	; 5
				PORTE |= JOY_EMASK;
     2d4:	8e b1       	in	r24, 0x0e	; 14
     2d6:	80 63       	ori	r24, 0x30	; 48
     2d8:	8e b9       	out	0x0e, r24	; 14

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     2da:	8a b1       	in	r24, 0x0a	; 10
     2dc:	80 6f       	ori	r24, 0xF0	; 240
     2de:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     2e0:	8b b1       	in	r24, 0x0b	; 11
     2e2:	8f 70       	andi	r24, 0x0F	; 15
     2e4:	8b b9       	out	0x0b, r24	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Buttons_Init(void)
			{
				DDRE  &= ~BUTTONS_BUTTON1;
     2e6:	6a 98       	cbi	0x0d, 2	; 13
				PORTE |=  BUTTONS_BUTTON1;
     2e8:	72 9a       	sbi	0x0e, 2	; 14
	/* Hardware Initialization */
	Joystick_Init();
	LEDs_Init();
	Buttons_Init();
	USB_Init();
}
     2ea:	1c c1       	rjmp	.+568    	; 0x524 <USB_Init>

000002ec <main>:
/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
	SetupHardware();
     2ec:	d5 df       	rcall	.-86     	; 0x298 <SetupHardware>
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     2ee:	8b b1       	in	r24, 0x0b	; 11
     2f0:	8f 70       	andi	r24, 0x0F	; 15
     2f2:	80 61       	ori	r24, 0x10	; 16
     2f4:	8b b9       	out	0x0b, r24	; 11

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
	sei();
     2f6:	78 94       	sei

	for (;;)
	{
		HID_Device_USBTask(&Keyboard_HID_Interface);
     2f8:	80 e0       	ldi	r24, 0x00	; 0
     2fa:	91 e0       	ldi	r25, 0x01	; 1
     2fc:	c2 d4       	rcall	.+2436   	; 0xc82 <HID_Device_USBTask>
		USB_USBTask();
     2fe:	ae d4       	rcall	.+2396   	; 0xc5c <USB_USBTask>
     300:	fb cf       	rjmp	.-10     	; 0x2f8 <main+0xc>

00000302 <CALLBACK_USB_GetDescriptor>:
 *  USB host.
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
     302:	da 01       	movw	r26, r20
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     304:	93 30       	cpi	r25, 0x03	; 3
     306:	b1 f0       	breq	.+44     	; 0x334 <CALLBACK_USB_GetDescriptor+0x32>
     308:	94 30       	cpi	r25, 0x04	; 4
     30a:	28 f4       	brcc	.+10     	; 0x316 <CALLBACK_USB_GetDescriptor+0x14>
     30c:	91 30       	cpi	r25, 0x01	; 1
     30e:	41 f0       	breq	.+16     	; 0x320 <CALLBACK_USB_GetDescriptor+0x1e>
     310:	92 30       	cpi	r25, 0x02	; 2
     312:	79 f5       	brne	.+94     	; 0x372 <CALLBACK_USB_GetDescriptor+0x70>
     314:	0a c0       	rjmp	.+20     	; 0x32a <CALLBACK_USB_GetDescriptor+0x28>
     316:	91 32       	cpi	r25, 0x21	; 33
     318:	11 f1       	breq	.+68     	; 0x35e <CALLBACK_USB_GetDescriptor+0x5c>
     31a:	92 32       	cpi	r25, 0x22	; 34
     31c:	51 f5       	brne	.+84     	; 0x372 <CALLBACK_USB_GetDescriptor+0x70>
     31e:	24 c0       	rjmp	.+72     	; 0x368 <CALLBACK_USB_GetDescriptor+0x66>
     320:	e7 ed       	ldi	r30, 0xD7	; 215
     322:	f0 e0       	ldi	r31, 0x00	; 0
     324:	22 e1       	ldi	r18, 0x12	; 18
     326:	30 e0       	ldi	r19, 0x00	; 0
     328:	28 c0       	rjmp	.+80     	; 0x37a <CALLBACK_USB_GetDescriptor+0x78>
     32a:	e9 ee       	ldi	r30, 0xE9	; 233
     32c:	f0 e0       	ldi	r31, 0x00	; 0
     32e:	22 e2       	ldi	r18, 0x22	; 34
     330:	30 e0       	ldi	r19, 0x00	; 0
     332:	23 c0       	rjmp	.+70     	; 0x37a <CALLBACK_USB_GetDescriptor+0x78>
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
     334:	81 30       	cpi	r24, 0x01	; 1
     336:	49 f0       	breq	.+18     	; 0x34a <CALLBACK_USB_GetDescriptor+0x48>
     338:	81 30       	cpi	r24, 0x01	; 1
     33a:	18 f0       	brcs	.+6      	; 0x342 <CALLBACK_USB_GetDescriptor+0x40>
     33c:	82 30       	cpi	r24, 0x02	; 2
     33e:	c9 f4       	brne	.+50     	; 0x372 <CALLBACK_USB_GetDescriptor+0x70>
     340:	0a c0       	rjmp	.+20     	; 0x356 <CALLBACK_USB_GetDescriptor+0x54>
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     342:	eb e0       	ldi	r30, 0x0B	; 11
     344:	f1 e0       	ldi	r31, 0x01	; 1
     346:	84 91       	lpm	r24, Z+
     348:	03 c0       	rjmp	.+6      	; 0x350 <CALLBACK_USB_GetDescriptor+0x4e>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     34a:	ef e0       	ldi	r30, 0x0F	; 15
     34c:	f1 e0       	ldi	r31, 0x01	; 1
     34e:	84 91       	lpm	r24, Z+
     350:	28 2f       	mov	r18, r24
     352:	30 e0       	ldi	r19, 0x00	; 0
     354:	12 c0       	rjmp	.+36     	; 0x37a <CALLBACK_USB_GetDescriptor+0x78>
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     356:	e9 e2       	ldi	r30, 0x29	; 41
     358:	f1 e0       	ldi	r31, 0x01	; 1
     35a:	84 91       	lpm	r24, Z+
     35c:	f9 cf       	rjmp	.-14     	; 0x350 <CALLBACK_USB_GetDescriptor+0x4e>
     35e:	eb ef       	ldi	r30, 0xFB	; 251
     360:	f0 e0       	ldi	r31, 0x00	; 0
     362:	29 e0       	ldi	r18, 0x09	; 9
     364:	30 e0       	ldi	r19, 0x00	; 0
     366:	09 c0       	rjmp	.+18     	; 0x37a <CALLBACK_USB_GetDescriptor+0x78>

			break;
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_KeyboardHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
     368:	e8 e9       	ldi	r30, 0x98	; 152
     36a:	f0 e0       	ldi	r31, 0x00	; 0
     36c:	2f e3       	ldi	r18, 0x3F	; 63
     36e:	30 e0       	ldi	r19, 0x00	; 0
     370:	04 c0       	rjmp	.+8      	; 0x37a <CALLBACK_USB_GetDescriptor+0x78>
     372:	e0 e0       	ldi	r30, 0x00	; 0
     374:	f0 e0       	ldi	r31, 0x00	; 0
     376:	20 e0       	ldi	r18, 0x00	; 0
     378:	30 e0       	ldi	r19, 0x00	; 0
			Address = &KeyboardReport;
			Size    = sizeof(KeyboardReport);
			break;
	}

	*DescriptorAddress = Address;
     37a:	ed 93       	st	X+, r30
     37c:	fc 93       	st	X, r31
	return Size;
}
     37e:	c9 01       	movw	r24, r18
     380:	08 95       	ret

00000382 <Endpoint_ConfigureEndpoint_Prv>:
#endif

bool Endpoint_ConfigureEndpoint_Prv(const uint8_t Number,
                                    const uint8_t UECFG0XData,
                                    const uint8_t UECFG1XData)
{
     382:	38 2f       	mov	r19, r24
     384:	28 2f       	mov	r18, r24
     386:	2c c0       	rjmp	.+88     	; 0x3e0 <Endpoint_ConfigureEndpoint_Prv+0x5e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     388:	20 93 e9 00 	sts	0x00E9, r18
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);
		
		if (EPNum == Number)
     38c:	23 17       	cp	r18, r19
     38e:	21 f4       	brne	.+8      	; 0x398 <Endpoint_ConfigureEndpoint_Prv+0x16>
     390:	76 2f       	mov	r23, r22
     392:	94 2f       	mov	r25, r20
     394:	50 e0       	ldi	r21, 0x00	; 0
     396:	06 c0       	rjmp	.+12     	; 0x3a4 <Endpoint_ConfigureEndpoint_Prv+0x22>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
     398:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
     39c:	90 91 ed 00 	lds	r25, 0x00ED
			UEIENXTemp  = UEIENX;
     3a0:	50 91 f0 00 	lds	r21, 0x00F0
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
     3a4:	91 ff       	sbrs	r25, 1
     3a6:	1b c0       	rjmp	.+54     	; 0x3de <Endpoint_ConfigureEndpoint_Prv+0x5c>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
     3a8:	80 91 eb 00 	lds	r24, 0x00EB
     3ac:	8e 7f       	andi	r24, 0xFE	; 254
     3ae:	80 93 eb 00 	sts	0x00EB, r24
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
     3b2:	80 91 ed 00 	lds	r24, 0x00ED
     3b6:	8d 7f       	andi	r24, 0xFD	; 253
     3b8:	80 93 ed 00 	sts	0x00ED, r24
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
     3bc:	80 91 eb 00 	lds	r24, 0x00EB
     3c0:	81 60       	ori	r24, 0x01	; 1
     3c2:	80 93 eb 00 	sts	0x00EB, r24

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
     3c6:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
     3ca:	90 93 ed 00 	sts	0x00ED, r25
		UEIENX  = UEIENXTemp;
     3ce:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
     3d2:	80 91 ee 00 	lds	r24, 0x00EE
			
		if (!(Endpoint_IsConfigured()))
     3d6:	87 fd       	sbrc	r24, 7
     3d8:	02 c0       	rjmp	.+4      	; 0x3de <Endpoint_ConfigureEndpoint_Prv+0x5c>
     3da:	80 e0       	ldi	r24, 0x00	; 0
     3dc:	08 95       	ret
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else	
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
     3de:	2f 5f       	subi	r18, 0xFF	; 255
     3e0:	27 30       	cpi	r18, 0x07	; 7
     3e2:	90 f2       	brcs	.-92     	; 0x388 <Endpoint_ConfigureEndpoint_Prv+0x6>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     3e4:	30 93 e9 00 	sts	0x00E9, r19
     3e8:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
     3ea:	08 95       	ret

000003ec <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     3ec:	80 91 1b 01 	lds	r24, 0x011B
     3f0:	88 23       	and	r24, r24
     3f2:	9c f4       	brge	.+38     	; 0x41a <Endpoint_ClearStatusStage+0x2e>
     3f4:	04 c0       	rjmp	.+8      	; 0x3fe <Endpoint_ClearStatusStage+0x12>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     3f6:	80 91 1a 01 	lds	r24, 0x011A
     3fa:	88 23       	and	r24, r24
     3fc:	b9 f0       	breq	.+46     	; 0x42c <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     3fe:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
     402:	82 ff       	sbrs	r24, 2
     404:	f8 cf       	rjmp	.-16     	; 0x3f6 <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     406:	80 91 e8 00 	lds	r24, 0x00E8
     40a:	8b 77       	andi	r24, 0x7B	; 123
     40c:	80 93 e8 00 	sts	0x00E8, r24
     410:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     412:	80 91 1a 01 	lds	r24, 0x011A
     416:	88 23       	and	r24, r24
     418:	49 f0       	breq	.+18     	; 0x42c <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     41a:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     41e:	80 ff       	sbrs	r24, 0
     420:	f8 cf       	rjmp	.-16     	; 0x412 <Endpoint_ClearStatusStage+0x26>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     422:	80 91 e8 00 	lds	r24, 0x00E8
     426:	8e 77       	andi	r24, 0x7E	; 126
     428:	80 93 e8 00 	sts	0x00E8, r24
     42c:	08 95       	ret

0000042e <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     42e:	40 91 e4 00 	lds	r20, 0x00E4
     432:	50 91 e5 00 	lds	r21, 0x00E5
     436:	24 e6       	ldi	r18, 0x64	; 100
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     438:	80 91 ec 00 	lds	r24, 0x00EC
     43c:	80 ff       	sbrs	r24, 0
     43e:	24 c0       	rjmp	.+72     	; 0x488 <Endpoint_WaitUntilReady+0x5a>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     440:	80 91 e8 00 	lds	r24, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
     444:	80 fd       	sbrc	r24, 0
     446:	1e c0       	rjmp	.+60     	; 0x484 <Endpoint_WaitUntilReady+0x56>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}
		
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     448:	80 91 1a 01 	lds	r24, 0x011A

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     44c:	88 23       	and	r24, r24
     44e:	11 f4       	brne	.+4      	; 0x454 <Endpoint_WaitUntilReady+0x26>
     450:	82 e0       	ldi	r24, 0x02	; 2
     452:	08 95       	ret
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     454:	85 30       	cpi	r24, 0x05	; 5
     456:	11 f4       	brne	.+4      	; 0x45c <Endpoint_WaitUntilReady+0x2e>
     458:	83 e0       	ldi	r24, 0x03	; 3
     45a:	08 95       	ret
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     45c:	80 91 eb 00 	lds	r24, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
     460:	85 ff       	sbrs	r24, 5
     462:	02 c0       	rjmp	.+4      	; 0x468 <Endpoint_WaitUntilReady+0x3a>
     464:	81 e0       	ldi	r24, 0x01	; 1
     466:	08 95       	ret
     468:	80 91 e4 00 	lds	r24, 0x00E4
     46c:	90 91 e5 00 	lds	r25, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     470:	84 17       	cp	r24, r20
     472:	95 07       	cpc	r25, r21
     474:	09 f3       	breq	.-62     	; 0x438 <Endpoint_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     476:	22 23       	and	r18, r18
     478:	11 f4       	brne	.+4      	; 0x47e <Endpoint_WaitUntilReady+0x50>
     47a:	84 e0       	ldi	r24, 0x04	; 4
     47c:	08 95       	ret
     47e:	21 50       	subi	r18, 0x01	; 1
     480:	ac 01       	movw	r20, r24
     482:	da cf       	rjmp	.-76     	; 0x438 <Endpoint_WaitUntilReady+0xa>
     484:	80 e0       	ldi	r24, 0x00	; 0
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
     486:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     488:	80 91 e8 00 	lds	r24, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
     48c:	82 ff       	sbrs	r24, 2
     48e:	dc cf       	rjmp	.-72     	; 0x448 <Endpoint_WaitUntilReady+0x1a>
     490:	f9 cf       	rjmp	.-14     	; 0x484 <Endpoint_WaitUntilReady+0x56>

00000492 <USB_ResetInterface>:

void USB_ResetInterface(void)
{
     492:	ef 92       	push	r14
     494:	ff 92       	push	r15
     496:	0f 93       	push	r16
     498:	1f 93       	push	r17
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     49a:	4d d0       	rcall	.+154    	; 0x536 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     49c:	54 d0       	rcall	.+168    	; 0x546 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     49e:	08 ed       	ldi	r16, 0xD8	; 216
     4a0:	10 e0       	ldi	r17, 0x00	; 0
     4a2:	f8 01       	movw	r30, r16
     4a4:	80 81       	ld	r24, Z
     4a6:	8f 77       	andi	r24, 0x7F	; 127
     4a8:	80 83       	st	Z, r24
				USBCON |=  (1 << USBE);
     4aa:	80 81       	ld	r24, Z
     4ac:	80 68       	ori	r24, 0x80	; 128
     4ae:	80 83       	st	Z, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
     4b0:	80 81       	ld	r24, Z
     4b2:	8f 7d       	andi	r24, 0xDF	; 223
     4b4:	80 83       	st	Z, r24

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
     4b6:	e7 ed       	ldi	r30, 0xD7	; 215
     4b8:	f0 e0       	ldi	r31, 0x00	; 0
     4ba:	80 81       	ld	r24, Z
     4bc:	80 68       	ori	r24, 0x80	; 128
     4be:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     4c0:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
     4c2:	10 92 1a 01 	sts	0x011A, r1
	USB_Device_ConfigurationNumber  = 0;
     4c6:	10 92 16 01 	sts	0x0116, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
     4ca:	10 92 18 01 	sts	0x0118, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
     4ce:	10 92 17 01 	sts	0x0117, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
     4d2:	80 ee       	ldi	r24, 0xE0	; 224
     4d4:	e8 2e       	mov	r14, r24
     4d6:	f1 2c       	mov	r15, r1
     4d8:	f7 01       	movw	r30, r14
     4da:	80 81       	ld	r24, Z
     4dc:	8b 7f       	andi	r24, 0xFB	; 251
     4de:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
     4e0:	f8 01       	movw	r30, r16
     4e2:	80 81       	ld	r24, Z
     4e4:	81 60       	ori	r24, 0x01	; 1
     4e6:	80 83       	st	Z, r24
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
     4e8:	80 e0       	ldi	r24, 0x00	; 0
     4ea:	60 e0       	ldi	r22, 0x00	; 0
     4ec:	42 e0       	ldi	r20, 0x02	; 2
     4ee:	49 df       	rcall	.-366    	; 0x382 <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     4f0:	e1 ee       	ldi	r30, 0xE1	; 225
     4f2:	f0 e0       	ldi	r31, 0x00	; 0
     4f4:	80 81       	ld	r24, Z
     4f6:	8e 7f       	andi	r24, 0xFE	; 254
     4f8:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     4fa:	e2 ee       	ldi	r30, 0xE2	; 226
     4fc:	f0 e0       	ldi	r31, 0x00	; 0
     4fe:	80 81       	ld	r24, Z
     500:	81 60       	ori	r24, 0x01	; 1
     502:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
     504:	80 81       	ld	r24, Z
     506:	88 60       	ori	r24, 0x08	; 8
     508:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     50a:	f7 01       	movw	r30, r14
     50c:	80 81       	ld	r24, Z
     50e:	8e 7f       	andi	r24, 0xFE	; 254
     510:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     512:	f8 01       	movw	r30, r16
     514:	80 81       	ld	r24, Z
     516:	80 61       	ori	r24, 0x10	; 16
     518:	80 83       	st	Z, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     51a:	1f 91       	pop	r17
     51c:	0f 91       	pop	r16
     51e:	ff 90       	pop	r15
     520:	ef 90       	pop	r14
     522:	08 95       	ret

00000524 <USB_Init>:

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
     524:	e7 ed       	ldi	r30, 0xD7	; 215
     526:	f0 e0       	ldi	r31, 0x00	; 0
     528:	80 81       	ld	r24, Z
     52a:	81 60       	ori	r24, 0x01	; 1
     52c:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	80 93 19 01 	sts	0x0119, r24

	USB_ResetInterface();
}
     534:	ae cf       	rjmp	.-164    	; 0x492 <USB_ResetInterface>

00000536 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     536:	e8 ed       	ldi	r30, 0xD8	; 216
     538:	f0 e0       	ldi	r31, 0x00	; 0
     53a:	80 81       	ld	r24, Z
     53c:	8c 7f       	andi	r24, 0xFC	; 252
     53e:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
     540:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
     544:	08 95       	ret

00000546 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     546:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
     54a:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
     54e:	08 95       	ret

00000550 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
     550:	1f 92       	push	r1
     552:	0f 92       	push	r0
     554:	0f b6       	in	r0, 0x3f	; 63
     556:	0f 92       	push	r0
     558:	0b b6       	in	r0, 0x3b	; 59
     55a:	0f 92       	push	r0
     55c:	11 24       	eor	r1, r1
     55e:	2f 93       	push	r18
     560:	3f 93       	push	r19
     562:	4f 93       	push	r20
     564:	5f 93       	push	r21
     566:	6f 93       	push	r22
     568:	7f 93       	push	r23
     56a:	8f 93       	push	r24
     56c:	9f 93       	push	r25
     56e:	af 93       	push	r26
     570:	bf 93       	push	r27
     572:	ef 93       	push	r30
     574:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
     576:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
     57a:	82 ff       	sbrs	r24, 2
     57c:	0a c0       	rjmp	.+20     	; 0x592 <__vector_10+0x42>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
     57e:	80 91 e2 00 	lds	r24, 0x00E2
     582:	82 ff       	sbrs	r24, 2
     584:	06 c0       	rjmp	.+12     	; 0x592 <__vector_10+0x42>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
     586:	80 91 e1 00 	lds	r24, 0x00E1
     58a:	8b 7f       	andi	r24, 0xFB	; 251
     58c:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
     590:	08 de       	rcall	.-1008   	; 0x1a2 <EVENT_USB_Device_StartOfFrame>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
     592:	80 91 da 00 	lds	r24, 0x00DA
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
     596:	80 ff       	sbrs	r24, 0
     598:	1d c0       	rjmp	.+58     	; 0x5d4 <__vector_10+0x84>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
     59a:	80 91 d8 00 	lds	r24, 0x00D8
     59e:	80 ff       	sbrs	r24, 0
     5a0:	19 c0       	rjmp	.+50     	; 0x5d4 <__vector_10+0x84>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
     5a2:	80 91 da 00 	lds	r24, 0x00DA
     5a6:	8e 7f       	andi	r24, 0xFE	; 254
     5a8:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
     5ac:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
     5b0:	80 ff       	sbrs	r24, 0
     5b2:	0c c0       	rjmp	.+24     	; 0x5cc <__vector_10+0x7c>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     5b4:	8c e0       	ldi	r24, 0x0C	; 12
     5b6:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     5b8:	8e e0       	ldi	r24, 0x0E	; 14
     5ba:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
     5bc:	09 b4       	in	r0, 0x29	; 41
     5be:	00 fe       	sbrs	r0, 0
     5c0:	fd cf       	rjmp	.-6      	; 0x5bc <__vector_10+0x6c>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
     5c2:	81 e0       	ldi	r24, 0x01	; 1
     5c4:	80 93 1a 01 	sts	0x011A, r24
			EVENT_USB_Device_Connect();
     5c8:	e2 dd       	rcall	.-1084   	; 0x18e <EVENT_USB_Device_Connect>
     5ca:	04 c0       	rjmp	.+8      	; 0x5d4 <__vector_10+0x84>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     5cc:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
     5ce:	10 92 1a 01 	sts	0x011A, r1
			EVENT_USB_Device_Disconnect();
     5d2:	e2 dd       	rcall	.-1084   	; 0x198 <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
     5d4:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
     5d8:	80 ff       	sbrs	r24, 0
     5da:	18 c0       	rjmp	.+48     	; 0x60c <__vector_10+0xbc>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
     5dc:	80 91 e2 00 	lds	r24, 0x00E2
     5e0:	80 ff       	sbrs	r24, 0
     5e2:	14 c0       	rjmp	.+40     	; 0x60c <__vector_10+0xbc>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     5e4:	80 91 e2 00 	lds	r24, 0x00E2
     5e8:	8e 7f       	andi	r24, 0xFE	; 254
     5ea:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     5ee:	80 91 e2 00 	lds	r24, 0x00E2
     5f2:	80 61       	ori	r24, 0x10	; 16
     5f4:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON  |=  (1 << FRZCLK);
     5f8:	80 91 d8 00 	lds	r24, 0x00D8
     5fc:	80 62       	ori	r24, 0x20	; 32
     5fe:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     602:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
     604:	85 e0       	ldi	r24, 0x05	; 5
     606:	80 93 1a 01 	sts	0x011A, r24
		EVENT_USB_Device_Suspend();
     60a:	27 d3       	rcall	.+1614   	; 0xc5a <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
     60c:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
     610:	84 ff       	sbrs	r24, 4
     612:	2d c0       	rjmp	.+90     	; 0x66e <__vector_10+0x11e>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
     614:	80 91 e2 00 	lds	r24, 0x00E2
     618:	84 ff       	sbrs	r24, 4
     61a:	29 c0       	rjmp	.+82     	; 0x66e <__vector_10+0x11e>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     61c:	8c e0       	ldi	r24, 0x0C	; 12
     61e:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     620:	8e e0       	ldi	r24, 0x0E	; 14
     622:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     624:	09 b4       	in	r0, 0x29	; 41
     626:	00 fe       	sbrs	r0, 0
     628:	fd cf       	rjmp	.-6      	; 0x624 <__vector_10+0xd4>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
     62a:	80 91 d8 00 	lds	r24, 0x00D8
     62e:	8f 7d       	andi	r24, 0xDF	; 223
     630:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
     634:	80 91 e1 00 	lds	r24, 0x00E1
     638:	8f 7e       	andi	r24, 0xEF	; 239
     63a:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
     63e:	80 91 e2 00 	lds	r24, 0x00E2
     642:	8f 7e       	andi	r24, 0xEF	; 239
     644:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     648:	80 91 e2 00 	lds	r24, 0x00E2
     64c:	81 60       	ori	r24, 0x01	; 1
     64e:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
     652:	80 91 16 01 	lds	r24, 0x0116
     656:	88 23       	and	r24, r24
     658:	31 f4       	brne	.+12     	; 0x666 <__vector_10+0x116>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     65a:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     65e:	87 fd       	sbrc	r24, 7
     660:	02 c0       	rjmp	.+4      	; 0x666 <__vector_10+0x116>
     662:	81 e0       	ldi	r24, 0x01	; 1
     664:	01 c0       	rjmp	.+2      	; 0x668 <__vector_10+0x118>
     666:	84 e0       	ldi	r24, 0x04	; 4
     668:	80 93 1a 01 	sts	0x011A, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
     66c:	f6 d2       	rcall	.+1516   	; 0xc5a <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
     66e:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
     672:	83 ff       	sbrs	r24, 3
     674:	22 c0       	rjmp	.+68     	; 0x6ba <__vector_10+0x16a>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
     676:	80 91 e2 00 	lds	r24, 0x00E2
     67a:	83 ff       	sbrs	r24, 3
     67c:	1e c0       	rjmp	.+60     	; 0x6ba <__vector_10+0x16a>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
     67e:	80 91 e1 00 	lds	r24, 0x00E1
     682:	87 7f       	andi	r24, 0xF7	; 247
     684:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
     688:	82 e0       	ldi	r24, 0x02	; 2
     68a:	80 93 1a 01 	sts	0x011A, r24
		USB_Device_ConfigurationNumber = 0;
     68e:	10 92 16 01 	sts	0x0116, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     692:	80 91 e1 00 	lds	r24, 0x00E1
     696:	8e 7f       	andi	r24, 0xFE	; 254
     698:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     69c:	80 91 e2 00 	lds	r24, 0x00E2
     6a0:	8e 7f       	andi	r24, 0xFE	; 254
     6a2:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     6a6:	80 91 e2 00 	lds	r24, 0x00E2
     6aa:	80 61       	ori	r24, 0x10	; 16
     6ac:	80 93 e2 00 	sts	0x00E2, r24
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
     6b0:	80 e0       	ldi	r24, 0x00	; 0
     6b2:	60 e0       	ldi	r22, 0x00	; 0
     6b4:	42 e0       	ldi	r20, 0x02	; 2
     6b6:	65 de       	rcall	.-822    	; 0x382 <Endpoint_ConfigureEndpoint_Prv>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
     6b8:	d0 d2       	rcall	.+1440   	; 0xc5a <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     6ba:	ff 91       	pop	r31
     6bc:	ef 91       	pop	r30
     6be:	bf 91       	pop	r27
     6c0:	af 91       	pop	r26
     6c2:	9f 91       	pop	r25
     6c4:	8f 91       	pop	r24
     6c6:	7f 91       	pop	r23
     6c8:	6f 91       	pop	r22
     6ca:	5f 91       	pop	r21
     6cc:	4f 91       	pop	r20
     6ce:	3f 91       	pop	r19
     6d0:	2f 91       	pop	r18
     6d2:	0f 90       	pop	r0
     6d4:	0b be       	out	0x3b, r0	; 59
     6d6:	0f 90       	pop	r0
     6d8:	0f be       	out	0x3f, r0	; 63
     6da:	0f 90       	pop	r0
     6dc:	1f 90       	pop	r1
     6de:	18 95       	reti

000006e0 <Endpoint_Write_Control_Stream_LE>:
     6e0:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     6e2:	40 91 21 01 	lds	r20, 0x0121
     6e6:	50 91 22 01 	lds	r21, 0x0122
     6ea:	46 17       	cp	r20, r22
     6ec:	57 07       	cpc	r21, r23
     6ee:	18 f4       	brcc	.+6      	; 0x6f6 <Endpoint_Write_Control_Stream_LE+0x16>
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     6f0:	f9 01       	movw	r30, r18
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	3d c0       	rjmp	.+122    	; 0x770 <Endpoint_Write_Control_Stream_LE+0x90>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     6f6:	61 15       	cp	r22, r1
     6f8:	71 05       	cpc	r23, r1
     6fa:	11 f0       	breq	.+4      	; 0x700 <Endpoint_Write_Control_Stream_LE+0x20>
     6fc:	ab 01       	movw	r20, r22
     6fe:	f8 cf       	rjmp	.-16     	; 0x6f0 <Endpoint_Write_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     700:	80 91 e8 00 	lds	r24, 0x00E8
     704:	8e 77       	andi	r24, 0x7E	; 126
     706:	80 93 e8 00 	sts	0x00E8, r24
     70a:	40 e0       	ldi	r20, 0x00	; 0
     70c:	50 e0       	ldi	r21, 0x00	; 0
     70e:	f0 cf       	rjmp	.-32     	; 0x6f0 <Endpoint_Write_Control_Stream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     710:	80 91 1a 01 	lds	r24, 0x011A

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     714:	88 23       	and	r24, r24
     716:	f1 f1       	breq	.+124    	; 0x794 <Endpoint_Write_Control_Stream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     718:	85 30       	cpi	r24, 0x05	; 5
     71a:	f1 f1       	breq	.+124    	; 0x798 <Endpoint_Write_Control_Stream_LE+0xb8>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     71c:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     720:	83 ff       	sbrs	r24, 3
     722:	02 c0       	rjmp	.+4      	; 0x728 <Endpoint_Write_Control_Stream_LE+0x48>
     724:	81 e0       	ldi	r24, 0x01	; 1
     726:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     728:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     72c:	82 fd       	sbrc	r24, 2
     72e:	2c c0       	rjmp	.+88     	; 0x788 <Endpoint_Write_Control_Stream_LE+0xa8>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     730:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
     734:	80 ff       	sbrs	r24, 0
     736:	1c c0       	rjmp	.+56     	; 0x770 <Endpoint_Write_Control_Stream_LE+0x90>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
     738:	20 91 f2 00 	lds	r18, 0x00F2
     73c:	30 91 f3 00 	lds	r19, 0x00F3
     740:	07 c0       	rjmp	.+14     	; 0x750 <Endpoint_Write_Control_Stream_LE+0x70>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     742:	81 91       	ld	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     744:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
     748:	41 50       	subi	r20, 0x01	; 1
     74a:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
     74c:	2f 5f       	subi	r18, 0xFF	; 255
     74e:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     750:	41 15       	cp	r20, r1
     752:	51 05       	cpc	r21, r1
     754:	19 f0       	breq	.+6      	; 0x75c <Endpoint_Write_Control_Stream_LE+0x7c>
     756:	28 30       	cpi	r18, 0x08	; 8
     758:	31 05       	cpc	r19, r1
     75a:	98 f3       	brcs	.-26     	; 0x742 <Endpoint_Write_Control_Stream_LE+0x62>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     75c:	90 e0       	ldi	r25, 0x00	; 0
     75e:	28 30       	cpi	r18, 0x08	; 8
     760:	31 05       	cpc	r19, r1
     762:	09 f4       	brne	.+2      	; 0x766 <Endpoint_Write_Control_Stream_LE+0x86>
     764:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     766:	80 91 e8 00 	lds	r24, 0x00E8
     76a:	8e 77       	andi	r24, 0x7E	; 126
     76c:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     770:	41 15       	cp	r20, r1
     772:	51 05       	cpc	r21, r1
     774:	69 f6       	brne	.-102    	; 0x710 <Endpoint_Write_Control_Stream_LE+0x30>
     776:	99 23       	and	r25, r25
     778:	59 f6       	brne	.-106    	; 0x710 <Endpoint_Write_Control_Stream_LE+0x30>
     77a:	06 c0       	rjmp	.+12     	; 0x788 <Endpoint_Write_Control_Stream_LE+0xa8>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     77c:	80 91 1a 01 	lds	r24, 0x011A

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     780:	88 23       	and	r24, r24
     782:	41 f0       	breq	.+16     	; 0x794 <Endpoint_Write_Control_Stream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     784:	85 30       	cpi	r24, 0x05	; 5
     786:	41 f0       	breq	.+16     	; 0x798 <Endpoint_Write_Control_Stream_LE+0xb8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     788:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     78c:	82 ff       	sbrs	r24, 2
     78e:	f6 cf       	rjmp	.-20     	; 0x77c <Endpoint_Write_Control_Stream_LE+0x9c>
     790:	80 e0       	ldi	r24, 0x00	; 0
     792:	08 95       	ret
     794:	82 e0       	ldi	r24, 0x02	; 2
     796:	08 95       	ret
     798:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     79a:	08 95       	ret

0000079c <Endpoint_Read_Control_Stream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
     79c:	9c 01       	movw	r18, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
     79e:	61 15       	cp	r22, r1
     7a0:	71 05       	cpc	r23, r1
     7a2:	29 f4       	brne	.+10     	; 0x7ae <Endpoint_Read_Control_Stream_LE+0x12>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     7a4:	80 91 e8 00 	lds	r24, 0x00E8
     7a8:	8b 77       	andi	r24, 0x7B	; 123
     7aa:	80 93 e8 00 	sts	0x00E8, r24
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     7ae:	f9 01       	movw	r30, r18
     7b0:	22 c0       	rjmp	.+68     	; 0x7f6 <Endpoint_Read_Control_Stream_LE+0x5a>
	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     7b2:	80 91 1a 01 	lds	r24, 0x011A

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     7b6:	88 23       	and	r24, r24
     7b8:	71 f1       	breq	.+92     	; 0x816 <Endpoint_Read_Control_Stream_LE+0x7a>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     7ba:	85 30       	cpi	r24, 0x05	; 5
     7bc:	71 f1       	breq	.+92     	; 0x81a <Endpoint_Read_Control_Stream_LE+0x7e>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     7be:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     7c2:	83 ff       	sbrs	r24, 3
     7c4:	02 c0       	rjmp	.+4      	; 0x7ca <Endpoint_Read_Control_Stream_LE+0x2e>
     7c6:	81 e0       	ldi	r24, 0x01	; 1
     7c8:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     7ca:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
     7ce:	82 ff       	sbrs	r24, 2
     7d0:	f0 cf       	rjmp	.-32     	; 0x7b2 <Endpoint_Read_Control_Stream_LE+0x16>
     7d2:	06 c0       	rjmp	.+12     	; 0x7e0 <Endpoint_Read_Control_Stream_LE+0x44>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     7d4:	80 91 f1 00 	lds	r24, 0x00F1
		{
			while (Length && Endpoint_BytesInEndpoint())
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     7d8:	81 93       	st	Z+, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
     7da:	61 50       	subi	r22, 0x01	; 1
     7dc:	70 40       	sbci	r23, 0x00	; 0
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
		{
			while (Length && Endpoint_BytesInEndpoint())
     7de:	31 f0       	breq	.+12     	; 0x7ec <Endpoint_Read_Control_Stream_LE+0x50>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
     7e0:	80 91 f2 00 	lds	r24, 0x00F2
     7e4:	90 91 f3 00 	lds	r25, 0x00F3
     7e8:	89 2b       	or	r24, r25
     7ea:	a1 f7       	brne	.-24     	; 0x7d4 <Endpoint_Read_Control_Stream_LE+0x38>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     7ec:	80 91 e8 00 	lds	r24, 0x00E8
     7f0:	8b 77       	andi	r24, 0x7B	; 123
     7f2:	80 93 e8 00 	sts	0x00E8, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
     7f6:	61 15       	cp	r22, r1
     7f8:	71 05       	cpc	r23, r1
     7fa:	d9 f6       	brne	.-74     	; 0x7b2 <Endpoint_Read_Control_Stream_LE+0x16>
     7fc:	06 c0       	rjmp	.+12     	; 0x80a <Endpoint_Read_Control_Stream_LE+0x6e>
		}
	}

	while (!(Endpoint_IsINReady()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     7fe:	80 91 1a 01 	lds	r24, 0x011A

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     802:	88 23       	and	r24, r24
     804:	41 f0       	breq	.+16     	; 0x816 <Endpoint_Read_Control_Stream_LE+0x7a>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     806:	85 30       	cpi	r24, 0x05	; 5
     808:	41 f0       	breq	.+16     	; 0x81a <Endpoint_Read_Control_Stream_LE+0x7e>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     80a:	80 91 e8 00 	lds	r24, 0x00E8

			Endpoint_ClearOUT();
		}
	}

	while (!(Endpoint_IsINReady()))
     80e:	80 ff       	sbrs	r24, 0
     810:	f6 cf       	rjmp	.-20     	; 0x7fe <Endpoint_Read_Control_Stream_LE+0x62>
     812:	80 e0       	ldi	r24, 0x00	; 0
     814:	08 95       	ret
     816:	82 e0       	ldi	r24, 0x02	; 2
     818:	08 95       	ret
     81a:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     81c:	08 95       	ret

0000081e <Endpoint_Write_Control_PStream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
     81e:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     820:	40 91 21 01 	lds	r20, 0x0121
     824:	50 91 22 01 	lds	r21, 0x0122
     828:	46 17       	cp	r20, r22
     82a:	57 07       	cpc	r21, r23
     82c:	18 f4       	brcc	.+6      	; 0x834 <Endpoint_Write_Control_PStream_LE+0x16>
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     82e:	f9 01       	movw	r30, r18
     830:	90 e0       	ldi	r25, 0x00	; 0
     832:	40 c0       	rjmp	.+128    	; 0x8b4 <Endpoint_Write_Control_PStream_LE+0x96>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     834:	61 15       	cp	r22, r1
     836:	71 05       	cpc	r23, r1
     838:	11 f0       	breq	.+4      	; 0x83e <Endpoint_Write_Control_PStream_LE+0x20>
     83a:	ab 01       	movw	r20, r22
     83c:	f8 cf       	rjmp	.-16     	; 0x82e <Endpoint_Write_Control_PStream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     83e:	80 91 e8 00 	lds	r24, 0x00E8
     842:	8e 77       	andi	r24, 0x7E	; 126
     844:	80 93 e8 00 	sts	0x00E8, r24
     848:	40 e0       	ldi	r20, 0x00	; 0
     84a:	50 e0       	ldi	r21, 0x00	; 0
     84c:	f0 cf       	rjmp	.-32     	; 0x82e <Endpoint_Write_Control_PStream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     84e:	80 91 1a 01 	lds	r24, 0x011A

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     852:	88 23       	and	r24, r24
     854:	09 f4       	brne	.+2      	; 0x858 <Endpoint_Write_Control_PStream_LE+0x3a>
     856:	40 c0       	rjmp	.+128    	; 0x8d8 <Endpoint_Write_Control_PStream_LE+0xba>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     858:	85 30       	cpi	r24, 0x05	; 5
     85a:	09 f4       	brne	.+2      	; 0x85e <Endpoint_Write_Control_PStream_LE+0x40>
     85c:	3f c0       	rjmp	.+126    	; 0x8dc <Endpoint_Write_Control_PStream_LE+0xbe>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     85e:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     862:	83 ff       	sbrs	r24, 3
     864:	02 c0       	rjmp	.+4      	; 0x86a <Endpoint_Write_Control_PStream_LE+0x4c>
     866:	81 e0       	ldi	r24, 0x01	; 1
     868:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     86a:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     86e:	82 fd       	sbrc	r24, 2
     870:	2d c0       	rjmp	.+90     	; 0x8cc <Endpoint_Write_Control_PStream_LE+0xae>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     872:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
     876:	80 ff       	sbrs	r24, 0
     878:	1d c0       	rjmp	.+58     	; 0x8b4 <Endpoint_Write_Control_PStream_LE+0x96>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
     87a:	20 91 f2 00 	lds	r18, 0x00F2
     87e:	30 91 f3 00 	lds	r19, 0x00F3
     882:	08 c0       	rjmp	.+16     	; 0x894 <Endpoint_Write_Control_PStream_LE+0x76>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     884:	84 91       	lpm	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     886:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
     88a:	31 96       	adiw	r30, 0x01	; 1
				Length--;
     88c:	41 50       	subi	r20, 0x01	; 1
     88e:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
     890:	2f 5f       	subi	r18, 0xFF	; 255
     892:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     894:	41 15       	cp	r20, r1
     896:	51 05       	cpc	r21, r1
     898:	19 f0       	breq	.+6      	; 0x8a0 <Endpoint_Write_Control_PStream_LE+0x82>
     89a:	28 30       	cpi	r18, 0x08	; 8
     89c:	31 05       	cpc	r19, r1
     89e:	90 f3       	brcs	.-28     	; 0x884 <Endpoint_Write_Control_PStream_LE+0x66>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     8a0:	90 e0       	ldi	r25, 0x00	; 0
     8a2:	28 30       	cpi	r18, 0x08	; 8
     8a4:	31 05       	cpc	r19, r1
     8a6:	09 f4       	brne	.+2      	; 0x8aa <Endpoint_Write_Control_PStream_LE+0x8c>
     8a8:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     8aa:	80 91 e8 00 	lds	r24, 0x00E8
     8ae:	8e 77       	andi	r24, 0x7E	; 126
     8b0:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     8b4:	41 15       	cp	r20, r1
     8b6:	51 05       	cpc	r21, r1
     8b8:	51 f6       	brne	.-108    	; 0x84e <Endpoint_Write_Control_PStream_LE+0x30>
     8ba:	99 23       	and	r25, r25
     8bc:	41 f6       	brne	.-112    	; 0x84e <Endpoint_Write_Control_PStream_LE+0x30>
     8be:	06 c0       	rjmp	.+12     	; 0x8cc <Endpoint_Write_Control_PStream_LE+0xae>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     8c0:	80 91 1a 01 	lds	r24, 0x011A

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     8c4:	88 23       	and	r24, r24
     8c6:	41 f0       	breq	.+16     	; 0x8d8 <Endpoint_Write_Control_PStream_LE+0xba>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     8c8:	85 30       	cpi	r24, 0x05	; 5
     8ca:	41 f0       	breq	.+16     	; 0x8dc <Endpoint_Write_Control_PStream_LE+0xbe>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     8cc:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     8d0:	82 ff       	sbrs	r24, 2
     8d2:	f6 cf       	rjmp	.-20     	; 0x8c0 <Endpoint_Write_Control_PStream_LE+0xa2>
     8d4:	80 e0       	ldi	r24, 0x00	; 0
     8d6:	08 95       	ret
     8d8:	82 e0       	ldi	r24, 0x02	; 2
     8da:	08 95       	ret
     8dc:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     8de:	08 95       	ret

000008e0 <Endpoint_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     8e0:	bf 92       	push	r11
     8e2:	cf 92       	push	r12
     8e4:	df 92       	push	r13
     8e6:	ef 92       	push	r14
     8e8:	ff 92       	push	r15
     8ea:	0f 93       	push	r16
     8ec:	1f 93       	push	r17
     8ee:	cf 93       	push	r28
     8f0:	df 93       	push	r29
     8f2:	18 2f       	mov	r17, r24
     8f4:	09 2f       	mov	r16, r25
     8f6:	7b 01       	movw	r14, r22
     8f8:	6a 01       	movw	r12, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
     8fa:	99 dd       	rcall	.-1230   	; 0x42e <Endpoint_WaitUntilReady>
     8fc:	b8 2e       	mov	r11, r24
     8fe:	88 23       	and	r24, r24
     900:	b1 f5       	brne	.+108    	; 0x96e <Endpoint_Write_Stream_LE+0x8e>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     902:	81 2f       	mov	r24, r17
     904:	90 2f       	mov	r25, r16
     906:	9c 01       	movw	r18, r24
     908:	e9 01       	movw	r28, r18
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
     90a:	c1 14       	cp	r12, r1
     90c:	d1 04       	cpc	r13, r1
     90e:	39 f0       	breq	.+14     	; 0x91e <Endpoint_Write_Stream_LE+0x3e>
	{
		Length -= *BytesProcessed;
     910:	f6 01       	movw	r30, r12
     912:	80 81       	ld	r24, Z
     914:	91 81       	ldd	r25, Z+1	; 0x01
     916:	e8 1a       	sub	r14, r24
     918:	f9 0a       	sbc	r15, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     91a:	c8 0f       	add	r28, r24
     91c:	d9 1f       	adc	r29, r25
     91e:	00 e0       	ldi	r16, 0x00	; 0
     920:	10 e0       	ldi	r17, 0x00	; 0
     922:	22 c0       	rjmp	.+68     	; 0x968 <Endpoint_Write_Stream_LE+0x88>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     924:	80 91 e8 00 	lds	r24, 0x00E8
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
     928:	85 fd       	sbrc	r24, 5
     92a:	16 c0       	rjmp	.+44     	; 0x958 <Endpoint_Write_Stream_LE+0x78>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     92c:	80 91 e8 00 	lds	r24, 0x00E8
     930:	8e 77       	andi	r24, 0x7E	; 126
     932:	80 93 e8 00 	sts	0x00E8, r24
		{
			TEMPLATE_CLEAR_ENDPOINT();

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
     936:	92 d1       	rcall	.+804    	; 0xc5c <USB_USBTask>
			#endif

			if (BytesProcessed != NULL)
     938:	c1 14       	cp	r12, r1
     93a:	d1 04       	cpc	r13, r1
     93c:	49 f0       	breq	.+18     	; 0x950 <Endpoint_Write_Stream_LE+0x70>
			{
				*BytesProcessed += BytesInTransfer;
     93e:	f6 01       	movw	r30, r12
     940:	80 81       	ld	r24, Z
     942:	91 81       	ldd	r25, Z+1	; 0x01
     944:	80 0f       	add	r24, r16
     946:	91 1f       	adc	r25, r17
     948:	91 83       	std	Z+1, r25	; 0x01
     94a:	80 83       	st	Z, r24
     94c:	85 e0       	ldi	r24, 0x05	; 5
     94e:	10 c0       	rjmp	.+32     	; 0x970 <Endpoint_Write_Stream_LE+0x90>
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
     950:	6e dd       	rcall	.-1316   	; 0x42e <Endpoint_WaitUntilReady>
     952:	88 23       	and	r24, r24
     954:	49 f0       	breq	.+18     	; 0x968 <Endpoint_Write_Stream_LE+0x88>
     956:	0c c0       	rjmp	.+24     	; 0x970 <Endpoint_Write_Stream_LE+0x90>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
     958:	89 91       	ld	r24, Y+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     95a:	80 93 f1 00 	sts	0x00F1, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
     95e:	08 94       	sec
     960:	e1 08       	sbc	r14, r1
     962:	f1 08       	sbc	r15, r1
			BytesInTransfer++;
     964:	0f 5f       	subi	r16, 0xFF	; 255
     966:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
     968:	e1 14       	cp	r14, r1
     96a:	f1 04       	cpc	r15, r1
     96c:	d9 f6       	brne	.-74     	; 0x924 <Endpoint_Write_Stream_LE+0x44>
     96e:	8b 2d       	mov	r24, r11
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
     970:	df 91       	pop	r29
     972:	cf 91       	pop	r28
     974:	1f 91       	pop	r17
     976:	0f 91       	pop	r16
     978:	ff 90       	pop	r15
     97a:	ef 90       	pop	r14
     97c:	df 90       	pop	r13
     97e:	cf 90       	pop	r12
     980:	bf 90       	pop	r11
     982:	08 95       	ret

00000984 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
     984:	0f 93       	push	r16
     986:	1f 93       	push	r17
     988:	df 93       	push	r29
     98a:	cf 93       	push	r28
     98c:	cd b7       	in	r28, 0x3d	; 61
     98e:	de b7       	in	r29, 0x3e	; 62
     990:	ac 97       	sbiw	r28, 0x2c	; 44
     992:	0f b6       	in	r0, 0x3f	; 63
     994:	f8 94       	cli
     996:	de bf       	out	0x3e, r29	; 62
     998:	0f be       	out	0x3f, r0	; 63
     99a:	cd bf       	out	0x3d, r28	; 61
     99c:	eb e1       	ldi	r30, 0x1B	; 27
     99e:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     9a0:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
     9a4:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
     9a6:	21 e0       	ldi	r18, 0x01	; 1
     9a8:	e3 32       	cpi	r30, 0x23	; 35
     9aa:	f2 07       	cpc	r31, r18
     9ac:	c9 f7       	brne	.-14     	; 0x9a0 <USB_Device_ProcessControlRequest+0x1c>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
     9ae:	5f dc       	rcall	.-1858   	; 0x26e <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     9b0:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
     9b4:	83 ff       	sbrs	r24, 3
     9b6:	38 c1       	rjmp	.+624    	; 0xc28 <USB_Device_ProcessControlRequest+0x2a4>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
     9b8:	80 91 1b 01 	lds	r24, 0x011B

		switch (USB_ControlRequest.bRequest)
     9bc:	30 91 1c 01 	lds	r19, 0x011C
     9c0:	35 30       	cpi	r19, 0x05	; 5
     9c2:	09 f4       	brne	.+2      	; 0x9c6 <USB_Device_ProcessControlRequest+0x42>
     9c4:	87 c0       	rjmp	.+270    	; 0xad4 <USB_Device_ProcessControlRequest+0x150>
     9c6:	36 30       	cpi	r19, 0x06	; 6
     9c8:	40 f4       	brcc	.+16     	; 0x9da <USB_Device_ProcessControlRequest+0x56>
     9ca:	31 30       	cpi	r19, 0x01	; 1
     9cc:	c9 f1       	breq	.+114    	; 0xa40 <USB_Device_ProcessControlRequest+0xbc>
     9ce:	31 30       	cpi	r19, 0x01	; 1
     9d0:	70 f0       	brcs	.+28     	; 0x9ee <USB_Device_ProcessControlRequest+0x6a>
     9d2:	33 30       	cpi	r19, 0x03	; 3
     9d4:	09 f0       	breq	.+2      	; 0x9d8 <USB_Device_ProcessControlRequest+0x54>
     9d6:	28 c1       	rjmp	.+592    	; 0xc28 <USB_Device_ProcessControlRequest+0x2a4>
     9d8:	33 c0       	rjmp	.+102    	; 0xa40 <USB_Device_ProcessControlRequest+0xbc>
     9da:	38 30       	cpi	r19, 0x08	; 8
     9dc:	09 f4       	brne	.+2      	; 0x9e0 <USB_Device_ProcessControlRequest+0x5c>
     9de:	f6 c0       	rjmp	.+492    	; 0xbcc <USB_Device_ProcessControlRequest+0x248>
     9e0:	39 30       	cpi	r19, 0x09	; 9
     9e2:	09 f4       	brne	.+2      	; 0x9e6 <USB_Device_ProcessControlRequest+0x62>
     9e4:	05 c1       	rjmp	.+522    	; 0xbf0 <USB_Device_ProcessControlRequest+0x26c>
     9e6:	36 30       	cpi	r19, 0x06	; 6
     9e8:	09 f0       	breq	.+2      	; 0x9ec <USB_Device_ProcessControlRequest+0x68>
     9ea:	1e c1       	rjmp	.+572    	; 0xc28 <USB_Device_ProcessControlRequest+0x2a4>
     9ec:	97 c0       	rjmp	.+302    	; 0xb1c <USB_Device_ProcessControlRequest+0x198>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     9ee:	80 38       	cpi	r24, 0x80	; 128
     9f0:	21 f0       	breq	.+8      	; 0x9fa <USB_Device_ProcessControlRequest+0x76>
     9f2:	82 38       	cpi	r24, 0x82	; 130
     9f4:	09 f0       	breq	.+2      	; 0x9f8 <USB_Device_ProcessControlRequest+0x74>
     9f6:	18 c1       	rjmp	.+560    	; 0xc28 <USB_Device_ProcessControlRequest+0x2a4>
     9f8:	08 c0       	rjmp	.+16     	; 0xa0a <USB_Device_ProcessControlRequest+0x86>
     9fa:	90 91 17 01 	lds	r25, 0x0117
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
     9fe:	80 91 18 01 	lds	r24, 0x0118
     a02:	88 23       	and	r24, r24
     a04:	99 f0       	breq	.+38     	; 0xa2c <USB_Device_ProcessControlRequest+0xa8>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
     a06:	92 60       	ori	r25, 0x02	; 2
     a08:	11 c0       	rjmp	.+34     	; 0xa2c <USB_Device_ProcessControlRequest+0xa8>
			#endif
			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     a0a:	80 91 1f 01 	lds	r24, 0x011F
     a0e:	87 70       	andi	r24, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     a10:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     a14:	80 91 eb 00 	lds	r24, 0x00EB

			CurrentStatus = Endpoint_IsStalled();
     a18:	90 e0       	ldi	r25, 0x00	; 0
     a1a:	25 e0       	ldi	r18, 0x05	; 5
     a1c:	96 95       	lsr	r25
     a1e:	87 95       	ror	r24
     a20:	2a 95       	dec	r18
     a22:	e1 f7       	brne	.-8      	; 0xa1c <USB_Device_ProcessControlRequest+0x98>
     a24:	98 2f       	mov	r25, r24
     a26:	91 70       	andi	r25, 0x01	; 1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     a28:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     a2c:	80 91 e8 00 	lds	r24, 0x00E8
     a30:	87 7f       	andi	r24, 0xF7	; 247
     a32:	80 93 e8 00 	sts	0x00E8, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
     a36:	90 93 f1 00 	sts	0x00F1, r25
				UEDATX = (Data >> 8);
     a3a:	10 92 f1 00 	sts	0x00F1, r1
     a3e:	d1 c0       	rjmp	.+418    	; 0xbe2 <USB_Device_ProcessControlRequest+0x25e>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     a40:	88 23       	and	r24, r24
     a42:	19 f0       	breq	.+6      	; 0xa4a <USB_Device_ProcessControlRequest+0xc6>
     a44:	82 30       	cpi	r24, 0x02	; 2
     a46:	09 f0       	breq	.+2      	; 0xa4a <USB_Device_ProcessControlRequest+0xc6>
     a48:	ef c0       	rjmp	.+478    	; 0xc28 <USB_Device_ProcessControlRequest+0x2a4>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
     a4a:	90 e0       	ldi	r25, 0x00	; 0
     a4c:	8f 71       	andi	r24, 0x1F	; 31
     a4e:	90 70       	andi	r25, 0x00	; 0
     a50:	00 97       	sbiw	r24, 0x00	; 0
     a52:	21 f0       	breq	.+8      	; 0xa5c <USB_Device_ProcessControlRequest+0xd8>
     a54:	02 97       	sbiw	r24, 0x02	; 2
     a56:	09 f0       	breq	.+2      	; 0xa5a <USB_Device_ProcessControlRequest+0xd6>
     a58:	e7 c0       	rjmp	.+462    	; 0xc28 <USB_Device_ProcessControlRequest+0x2a4>
     a5a:	0c c0       	rjmp	.+24     	; 0xa74 <USB_Device_ProcessControlRequest+0xf0>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
     a5c:	80 91 1d 01 	lds	r24, 0x011D
     a60:	81 30       	cpi	r24, 0x01	; 1
     a62:	09 f0       	breq	.+2      	; 0xa66 <USB_Device_ProcessControlRequest+0xe2>
     a64:	e1 c0       	rjmp	.+450    	; 0xc28 <USB_Device_ProcessControlRequest+0x2a4>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
     a66:	10 92 18 01 	sts	0x0118, r1
     a6a:	33 30       	cpi	r19, 0x03	; 3
     a6c:	69 f5       	brne	.+90     	; 0xac8 <USB_Device_ProcessControlRequest+0x144>
     a6e:	80 93 18 01 	sts	0x0118, r24
     a72:	2a c0       	rjmp	.+84     	; 0xac8 <USB_Device_ProcessControlRequest+0x144>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
     a74:	80 91 1d 01 	lds	r24, 0x011D
     a78:	88 23       	and	r24, r24
     a7a:	31 f5       	brne	.+76     	; 0xac8 <USB_Device_ProcessControlRequest+0x144>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     a7c:	20 91 1f 01 	lds	r18, 0x011F
     a80:	27 70       	andi	r18, 0x07	; 7

				if (EndpointIndex == ENDPOINT_CONTROLEP)
     a82:	09 f4       	brne	.+2      	; 0xa86 <USB_Device_ProcessControlRequest+0x102>
     a84:	d1 c0       	rjmp	.+418    	; 0xc28 <USB_Device_ProcessControlRequest+0x2a4>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     a86:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
     a8a:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
     a8e:	80 ff       	sbrs	r24, 0
     a90:	1b c0       	rjmp	.+54     	; 0xac8 <USB_Device_ProcessControlRequest+0x144>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
     a92:	33 30       	cpi	r19, 0x03	; 3
     a94:	21 f4       	brne	.+8      	; 0xa9e <USB_Device_ProcessControlRequest+0x11a>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     a96:	80 91 eb 00 	lds	r24, 0x00EB
     a9a:	80 62       	ori	r24, 0x20	; 32
     a9c:	13 c0       	rjmp	.+38     	; 0xac4 <USB_Device_ProcessControlRequest+0x140>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
     a9e:	80 91 eb 00 	lds	r24, 0x00EB
     aa2:	80 61       	ori	r24, 0x10	; 16
     aa4:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
     aa8:	81 e0       	ldi	r24, 0x01	; 1
     aaa:	90 e0       	ldi	r25, 0x00	; 0
     aac:	02 c0       	rjmp	.+4      	; 0xab2 <USB_Device_ProcessControlRequest+0x12e>
     aae:	88 0f       	add	r24, r24
     ab0:	99 1f       	adc	r25, r25
     ab2:	2a 95       	dec	r18
     ab4:	e2 f7       	brpl	.-8      	; 0xaae <USB_Device_ProcessControlRequest+0x12a>
     ab6:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
     aba:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
     abe:	80 91 eb 00 	lds	r24, 0x00EB
     ac2:	88 60       	ori	r24, 0x08	; 8
     ac4:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     ac8:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     acc:	80 91 e8 00 	lds	r24, 0x00E8
     ad0:	87 7f       	andi	r24, 0xF7	; 247
     ad2:	8a c0       	rjmp	.+276    	; 0xbe8 <USB_Device_ProcessControlRequest+0x264>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     ad4:	88 23       	and	r24, r24
     ad6:	09 f0       	breq	.+2      	; 0xada <USB_Device_ProcessControlRequest+0x156>
     ad8:	a7 c0       	rjmp	.+334    	; 0xc28 <USB_Device_ProcessControlRequest+0x2a4>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t    DeviceAddress    = (USB_ControlRequest.wValue & 0x7F);
     ada:	10 91 1d 01 	lds	r17, 0x011D
     ade:	1f 77       	andi	r17, 0x7F	; 127
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     ae0:	0f b7       	in	r16, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     ae2:	f8 94       	cli
     ae4:	80 91 e8 00 	lds	r24, 0x00E8
     ae8:	87 7f       	andi	r24, 0xF7	; 247
     aea:	80 93 e8 00 	sts	0x00E8, r24
	uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
	GlobalInterruptDisable();
				
	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
     aee:	7e dc       	rcall	.-1796   	; 0x3ec <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     af0:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
     af4:	80 ff       	sbrs	r24, 0
     af6:	fc cf       	rjmp	.-8      	; 0xaf0 <USB_Device_ProcessControlRequest+0x16c>
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				uint8_t Temp = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
     af8:	80 91 e3 00 	lds	r24, 0x00E3
     afc:	80 78       	andi	r24, 0x80	; 128
     afe:	81 2b       	or	r24, r17

				UDADDR = Temp;
     b00:	80 93 e3 00 	sts	0x00E3, r24
				UDADDR = Temp | (1 << ADDEN);
     b04:	80 68       	ori	r24, 0x80	; 128
     b06:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_SetDeviceAddress(DeviceAddress);
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
     b0a:	11 23       	and	r17, r17
     b0c:	11 f4       	brne	.+4      	; 0xb12 <USB_Device_ProcessControlRequest+0x18e>
     b0e:	82 e0       	ldi	r24, 0x02	; 2
     b10:	01 c0       	rjmp	.+2      	; 0xb14 <USB_Device_ProcessControlRequest+0x190>
     b12:	83 e0       	ldi	r24, 0x03	; 3
     b14:	80 93 1a 01 	sts	0x011A, r24
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     b18:	0f bf       	out	0x3f, r16	; 63
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;				
				#endif
				
				GCC_MEMORY_BARRIER();
     b1a:	86 c0       	rjmp	.+268    	; 0xc28 <USB_Device_ProcessControlRequest+0x2a4>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     b1c:	80 58       	subi	r24, 0x80	; 128
     b1e:	82 30       	cpi	r24, 0x02	; 2
     b20:	08 f0       	brcs	.+2      	; 0xb24 <USB_Device_ProcessControlRequest+0x1a0>
     b22:	82 c0       	rjmp	.+260    	; 0xc28 <USB_Device_ProcessControlRequest+0x2a4>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
     b24:	80 91 1d 01 	lds	r24, 0x011D
     b28:	90 91 1e 01 	lds	r25, 0x011E
     b2c:	23 e0       	ldi	r18, 0x03	; 3
     b2e:	8c 3d       	cpi	r24, 0xDC	; 220
     b30:	92 07       	cpc	r25, r18
     b32:	09 f0       	breq	.+2      	; 0xb36 <USB_Device_ProcessControlRequest+0x1b2>
     b34:	33 c0       	rjmp	.+102    	; 0xb9c <USB_Device_ProcessControlRequest+0x218>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
     b36:	83 e0       	ldi	r24, 0x03	; 3
     b38:	8c 83       	std	Y+4, r24	; 0x04
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
     b3a:	8a e2       	ldi	r24, 0x2A	; 42
     b3c:	8b 83       	std	Y+3, r24	; 0x03
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     b3e:	7f b7       	in	r23, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     b40:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
     b42:	de 01       	movw	r26, r28
     b44:	15 96       	adiw	r26, 0x05	; 5
     b46:	6e e0       	ldi	r22, 0x0E	; 14
     b48:	40 e0       	ldi	r20, 0x00	; 0
     b4a:	50 e0       	ldi	r21, 0x00	; 0
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
     b4c:	11 e2       	ldi	r17, 0x21	; 33
     b4e:	e6 2f       	mov	r30, r22
     b50:	f0 e0       	ldi	r31, 0x00	; 0
     b52:	10 93 57 00 	sts	0x0057, r17
     b56:	84 91       	lpm	r24, Z+

					if (SerialCharNum & 0x01)
     b58:	40 ff       	sbrs	r20, 0
     b5a:	03 c0       	rjmp	.+6      	; 0xb62 <USB_Device_ProcessControlRequest+0x1de>
					{
						SerialByte >>= 4;
     b5c:	82 95       	swap	r24
     b5e:	8f 70       	andi	r24, 0x0F	; 15
						SigReadAddress++;
     b60:	6f 5f       	subi	r22, 0xFF	; 255
					}

					SerialByte &= 0x0F;
     b62:	8f 70       	andi	r24, 0x0F	; 15
     b64:	28 2f       	mov	r18, r24
     b66:	30 e0       	ldi	r19, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
     b68:	8a 30       	cpi	r24, 0x0A	; 10
     b6a:	18 f0       	brcs	.+6      	; 0xb72 <USB_Device_ProcessControlRequest+0x1ee>
     b6c:	c9 01       	movw	r24, r18
     b6e:	c7 96       	adiw	r24, 0x37	; 55
     b70:	02 c0       	rjmp	.+4      	; 0xb76 <USB_Device_ProcessControlRequest+0x1f2>
     b72:	c9 01       	movw	r24, r18
     b74:	c0 96       	adiw	r24, 0x30	; 48
     b76:	8d 93       	st	X+, r24
     b78:	9d 93       	st	X+, r25
     b7a:	4f 5f       	subi	r20, 0xFF	; 255
     b7c:	5f 4f       	sbci	r21, 0xFF	; 255
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     b7e:	44 31       	cpi	r20, 0x14	; 20
     b80:	51 05       	cpc	r21, r1
     b82:	29 f7       	brne	.-54     	; 0xb4e <USB_Device_ProcessControlRequest+0x1ca>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     b84:	7f bf       	out	0x3f, r23	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     b86:	80 91 e8 00 	lds	r24, 0x00E8
     b8a:	87 7f       	andi	r24, 0xF7	; 247
     b8c:	80 93 e8 00 	sts	0x00E8, r24
	
	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
     b90:	ce 01       	movw	r24, r28
     b92:	03 96       	adiw	r24, 0x03	; 3
     b94:	6a e2       	ldi	r22, 0x2A	; 42
     b96:	70 e0       	ldi	r23, 0x00	; 0
     b98:	a3 dd       	rcall	.-1210   	; 0x6e0 <Endpoint_Write_Control_Stream_LE>
     b9a:	12 c0       	rjmp	.+36     	; 0xbc0 <USB_Device_ProcessControlRequest+0x23c>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
     b9c:	60 91 1f 01 	lds	r22, 0x011F
     ba0:	ae 01       	movw	r20, r28
     ba2:	4f 5f       	subi	r20, 0xFF	; 255
     ba4:	5f 4f       	sbci	r21, 0xFF	; 255
     ba6:	ad db       	rcall	.-2214   	; 0x302 <CALLBACK_USB_GetDescriptor>
     ba8:	bc 01       	movw	r22, r24
     baa:	00 97       	sbiw	r24, 0x00	; 0
     bac:	09 f4       	brne	.+2      	; 0xbb0 <USB_Device_ProcessControlRequest+0x22c>
     bae:	3c c0       	rjmp	.+120    	; 0xc28 <USB_Device_ProcessControlRequest+0x2a4>
     bb0:	80 91 e8 00 	lds	r24, 0x00E8
     bb4:	87 7f       	andi	r24, 0xF7	; 247
     bb6:	80 93 e8 00 	sts	0x00E8, r24
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
     bba:	89 81       	ldd	r24, Y+1	; 0x01
     bbc:	9a 81       	ldd	r25, Y+2	; 0x02
     bbe:	2f de       	rcall	.-930    	; 0x81e <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     bc0:	80 91 e8 00 	lds	r24, 0x00E8
     bc4:	8b 77       	andi	r24, 0x7B	; 123
     bc6:	80 93 e8 00 	sts	0x00E8, r24
     bca:	2e c0       	rjmp	.+92     	; 0xc28 <USB_Device_ProcessControlRequest+0x2a4>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
     bcc:	80 38       	cpi	r24, 0x80	; 128
     bce:	61 f5       	brne	.+88     	; 0xc28 <USB_Device_ProcessControlRequest+0x2a4>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     bd0:	80 91 e8 00 	lds	r24, 0x00E8
     bd4:	87 7f       	andi	r24, 0xF7	; 247
     bd6:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
     bda:	80 91 16 01 	lds	r24, 0x0116
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     bde:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     be2:	80 91 e8 00 	lds	r24, 0x00E8
     be6:	8e 77       	andi	r24, 0x7E	; 126
     be8:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
     bec:	ff db       	rcall	.-2050   	; 0x3ec <Endpoint_ClearStatusStage>
     bee:	1c c0       	rjmp	.+56     	; 0xc28 <USB_Device_ProcessControlRequest+0x2a4>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     bf0:	88 23       	and	r24, r24
     bf2:	d1 f4       	brne	.+52     	; 0xc28 <USB_Device_ProcessControlRequest+0x2a4>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
     bf4:	90 91 1d 01 	lds	r25, 0x011D
     bf8:	92 30       	cpi	r25, 0x02	; 2
     bfa:	b0 f4       	brcc	.+44     	; 0xc28 <USB_Device_ProcessControlRequest+0x2a4>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     bfc:	80 91 e8 00 	lds	r24, 0x00E8
     c00:	87 7f       	andi	r24, 0xF7	; 247
     c02:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
     c06:	90 93 16 01 	sts	0x0116, r25

	Endpoint_ClearStatusStage();
     c0a:	f0 db       	rcall	.-2080   	; 0x3ec <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
     c0c:	80 91 16 01 	lds	r24, 0x0116
     c10:	88 23       	and	r24, r24
     c12:	31 f4       	brne	.+12     	; 0xc20 <USB_Device_ProcessControlRequest+0x29c>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     c14:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     c18:	87 fd       	sbrc	r24, 7
     c1a:	02 c0       	rjmp	.+4      	; 0xc20 <USB_Device_ProcessControlRequest+0x29c>
     c1c:	81 e0       	ldi	r24, 0x01	; 1
     c1e:	01 c0       	rjmp	.+2      	; 0xc22 <USB_Device_ProcessControlRequest+0x29e>
     c20:	84 e0       	ldi	r24, 0x04	; 4
     c22:	80 93 1a 01 	sts	0x011A, r24

	EVENT_USB_Device_ConfigurationChanged();
     c26:	26 db       	rcall	.-2484   	; 0x274 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     c28:	80 91 e8 00 	lds	r24, 0x00E8

				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
     c2c:	83 ff       	sbrs	r24, 3
     c2e:	0a c0       	rjmp	.+20     	; 0xc44 <USB_Device_ProcessControlRequest+0x2c0>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     c30:	80 91 eb 00 	lds	r24, 0x00EB
     c34:	80 62       	ori	r24, 0x20	; 32
     c36:	80 93 eb 00 	sts	0x00EB, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     c3a:	80 91 e8 00 	lds	r24, 0x00E8
     c3e:	87 7f       	andi	r24, 0xF7	; 247
     c40:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_StallTransaction();
		Endpoint_ClearSETUP();
	}
}
     c44:	ac 96       	adiw	r28, 0x2c	; 44
     c46:	0f b6       	in	r0, 0x3f	; 63
     c48:	f8 94       	cli
     c4a:	de bf       	out	0x3e, r29	; 62
     c4c:	0f be       	out	0x3f, r0	; 63
     c4e:	cd bf       	out	0x3d, r28	; 61
     c50:	cf 91       	pop	r28
     c52:	df 91       	pop	r29
     c54:	1f 91       	pop	r17
     c56:	0f 91       	pop	r16
     c58:	08 95       	ret

00000c5a <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
     c5a:	08 95       	ret

00000c5c <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
     c5c:	1f 93       	push	r17
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
     c5e:	80 91 1a 01 	lds	r24, 0x011A
     c62:	88 23       	and	r24, r24
     c64:	61 f0       	breq	.+24     	; 0xc7e <USB_USBTask+0x22>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
     c66:	10 91 e9 00 	lds	r17, 0x00E9
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     c6a:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     c6e:	80 91 e8 00 	lds	r24, 0x00E8
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
     c72:	83 ff       	sbrs	r24, 3
     c74:	01 c0       	rjmp	.+2      	; 0xc78 <USB_USBTask+0x1c>
		  USB_Device_ProcessControlRequest();
     c76:	86 de       	rcall	.-756    	; 0x984 <USB_Device_ProcessControlRequest>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
     c78:	17 70       	andi	r17, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     c7a:	10 93 e9 00 	sts	0x00E9, r17
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
     c7e:	1f 91       	pop	r17
     c80:	08 95       	ret

00000c82 <HID_Device_USBTask>:

	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
     c82:	4f 92       	push	r4
     c84:	5f 92       	push	r5
     c86:	6f 92       	push	r6
     c88:	7f 92       	push	r7
     c8a:	8f 92       	push	r8
     c8c:	9f 92       	push	r9
     c8e:	af 92       	push	r10
     c90:	bf 92       	push	r11
     c92:	cf 92       	push	r12
     c94:	df 92       	push	r13
     c96:	ef 92       	push	r14
     c98:	ff 92       	push	r15
     c9a:	0f 93       	push	r16
     c9c:	1f 93       	push	r17
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	00 d0       	rcall	.+0      	; 0xca4 <HID_Device_USBTask+0x22>
     ca4:	0f 92       	push	r0
     ca6:	cd b7       	in	r28, 0x3d	; 61
     ca8:	de b7       	in	r29, 0x3e	; 62
     caa:	7c 01       	movw	r14, r24
			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NULL);

			Endpoint_ClearIN();
		}
	}
}
     cac:	6d b6       	in	r6, 0x3d	; 61
     cae:	7e b6       	in	r7, 0x3e	; 62
	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
     cb0:	80 91 1a 01 	lds	r24, 0x011A
     cb4:	84 30       	cpi	r24, 0x04	; 4
     cb6:	09 f0       	breq	.+2      	; 0xcba <HID_Device_USBTask+0x38>
     cb8:	85 c0       	rjmp	.+266    	; 0xdc4 <HID_Device_USBTask+0x142>
	  return;

	Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpointNumber);
     cba:	f7 01       	movw	r30, r14
     cbc:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     cbe:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     cc2:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsReadWriteAllowed())
     cc6:	85 ff       	sbrs	r24, 5
     cc8:	7d c0       	rjmp	.+250    	; 0xdc4 <HID_Device_USBTask+0x142>
     cca:	5d b6       	in	r5, 0x3d	; 61
     ccc:	4e b6       	in	r4, 0x3e	; 62
	{
		uint8_t  ReportINData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
     cce:	47 81       	ldd	r20, Z+7	; 0x07
     cd0:	8d b7       	in	r24, 0x3d	; 61
     cd2:	9e b7       	in	r25, 0x3e	; 62
     cd4:	84 1b       	sub	r24, r20
     cd6:	91 09       	sbc	r25, r1
     cd8:	0f b6       	in	r0, 0x3f	; 63
     cda:	f8 94       	cli
     cdc:	9e bf       	out	0x3e, r25	; 62
     cde:	0f be       	out	0x3f, r0	; 63
     ce0:	8d bf       	out	0x3d, r24	; 61
     ce2:	0d b7       	in	r16, 0x3d	; 61
     ce4:	1e b7       	in	r17, 0x3e	; 62
     ce6:	0f 5f       	subi	r16, 0xFF	; 255
     ce8:	1f 4f       	sbci	r17, 0xFF	; 255
		uint8_t  ReportID     = 0;
     cea:	19 82       	std	Y+1, r1	; 0x01
		uint16_t ReportINSize = 0;
     cec:	1b 82       	std	Y+3, r1	; 0x03
     cee:	1a 82       	std	Y+2, r1	; 0x02

		memset(ReportINData, 0, sizeof(ReportINData));
     cf0:	c0 2e       	mov	r12, r16
     cf2:	91 2e       	mov	r9, r17
     cf4:	c8 01       	movw	r24, r16
     cf6:	60 e0       	ldi	r22, 0x00	; 0
     cf8:	70 e0       	ldi	r23, 0x00	; 0
     cfa:	50 e0       	ldi	r21, 0x00	; 0
     cfc:	04 d2       	rcall	.+1032   	; 0x1106 <memset>

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
		                                                             ReportINData, &ReportINSize);
     cfe:	c7 01       	movw	r24, r14
     d00:	be 01       	movw	r22, r28
     d02:	6f 5f       	subi	r22, 0xFF	; 255
     d04:	7f 4f       	sbci	r23, 0xFF	; 255
     d06:	40 e0       	ldi	r20, 0x00	; 0
     d08:	98 01       	movw	r18, r16
     d0a:	8e 01       	movw	r16, r28
     d0c:	0e 5f       	subi	r16, 0xFE	; 254
     d0e:	1f 4f       	sbci	r17, 0xFF	; 255
     d10:	54 da       	rcall	.-2904   	; 0x1ba <CALLBACK_HID_Device_CreateHIDReport>
     d12:	88 2e       	mov	r8, r24
		bool StatesChanged     = false;
		bool IdlePeriodElapsed = (HIDInterfaceInfo->State.IdleCount && !(HIDInterfaceInfo->State.IdleMSRemaining));
     d14:	f7 01       	movw	r30, r14
     d16:	81 85       	ldd	r24, Z+9	; 0x09
     d18:	92 85       	ldd	r25, Z+10	; 0x0a
     d1a:	89 2b       	or	r24, r25
     d1c:	19 f4       	brne	.+6      	; 0xd24 <HID_Device_USBTask+0xa2>
     d1e:	aa 24       	eor	r10, r10
     d20:	bb 24       	eor	r11, r11
     d22:	0b c0       	rjmp	.+22     	; 0xd3a <HID_Device_USBTask+0xb8>
     d24:	20 e0       	ldi	r18, 0x00	; 0
     d26:	f7 01       	movw	r30, r14
     d28:	83 85       	ldd	r24, Z+11	; 0x0b
     d2a:	94 85       	ldd	r25, Z+12	; 0x0c
     d2c:	89 2b       	or	r24, r25
     d2e:	09 f0       	breq	.+2      	; 0xd32 <HID_Device_USBTask+0xb0>
     d30:	21 e0       	ldi	r18, 0x01	; 1
     d32:	81 e0       	ldi	r24, 0x01	; 1
     d34:	28 27       	eor	r18, r24
     d36:	a2 2e       	mov	r10, r18
     d38:	bb 24       	eor	r11, r11

		if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
     d3a:	f7 01       	movw	r30, r14
     d3c:	05 81       	ldd	r16, Z+5	; 0x05
     d3e:	16 81       	ldd	r17, Z+6	; 0x06
     d40:	01 15       	cp	r16, r1
     d42:	11 05       	cpc	r17, r1
     d44:	11 f4       	brne	.+4      	; 0xd4a <HID_Device_USBTask+0xc8>
     d46:	dd 24       	eor	r13, r13
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <HID_Device_USBTask+0xec>
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
     d4a:	4a 81       	ldd	r20, Y+2	; 0x02
     d4c:	5b 81       	ldd	r21, Y+3	; 0x03
     d4e:	8c 2d       	mov	r24, r12
     d50:	99 2d       	mov	r25, r9
     d52:	b8 01       	movw	r22, r16
     d54:	c2 d1       	rcall	.+900    	; 0x10da <memcmp>
     d56:	dd 24       	eor	r13, r13
     d58:	00 97       	sbiw	r24, 0x00	; 0
     d5a:	11 f0       	breq	.+4      	; 0xd60 <HID_Device_USBTask+0xde>
     d5c:	dd 24       	eor	r13, r13
     d5e:	d3 94       	inc	r13
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
     d60:	f7 01       	movw	r30, r14
     d62:	47 81       	ldd	r20, Z+7	; 0x07
     d64:	c8 01       	movw	r24, r16
     d66:	6c 2d       	mov	r22, r12
     d68:	79 2d       	mov	r23, r9
     d6a:	50 e0       	ldi	r21, 0x00	; 0
     d6c:	c3 d1       	rcall	.+902    	; 0x10f4 <memcpy>
		}

		if (ReportINSize && (ForceSend || StatesChanged || IdlePeriodElapsed))
     d6e:	8a 81       	ldd	r24, Y+2	; 0x02
     d70:	9b 81       	ldd	r25, Y+3	; 0x03
     d72:	89 2b       	or	r24, r25
     d74:	f9 f0       	breq	.+62     	; 0xdb4 <HID_Device_USBTask+0x132>
     d76:	88 20       	and	r8, r8
     d78:	21 f4       	brne	.+8      	; 0xd82 <HID_Device_USBTask+0x100>
     d7a:	dd 20       	and	r13, r13
     d7c:	11 f4       	brne	.+4      	; 0xd82 <HID_Device_USBTask+0x100>
     d7e:	ab 28       	or	r10, r11
     d80:	c9 f0       	breq	.+50     	; 0xdb4 <HID_Device_USBTask+0x132>
		{
			HIDInterfaceInfo->State.IdleMSRemaining = HIDInterfaceInfo->State.IdleCount;
     d82:	f7 01       	movw	r30, r14
     d84:	81 85       	ldd	r24, Z+9	; 0x09
     d86:	92 85       	ldd	r25, Z+10	; 0x0a
     d88:	94 87       	std	Z+12, r25	; 0x0c
     d8a:	83 87       	std	Z+11, r24	; 0x0b

			Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpointNumber);
     d8c:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     d8e:	80 93 e9 00 	sts	0x00E9, r24

			if (ReportID)
     d92:	89 81       	ldd	r24, Y+1	; 0x01
     d94:	88 23       	and	r24, r24
     d96:	11 f0       	breq	.+4      	; 0xd9c <HID_Device_USBTask+0x11a>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     d98:	80 93 f1 00 	sts	0x00F1, r24
			  Endpoint_Write_8(ReportID);

			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NULL);
     d9c:	6a 81       	ldd	r22, Y+2	; 0x02
     d9e:	7b 81       	ldd	r23, Y+3	; 0x03
     da0:	8c 2d       	mov	r24, r12
     da2:	99 2d       	mov	r25, r9
     da4:	40 e0       	ldi	r20, 0x00	; 0
     da6:	50 e0       	ldi	r21, 0x00	; 0
     da8:	9b dd       	rcall	.-1226   	; 0x8e0 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     daa:	80 91 e8 00 	lds	r24, 0x00E8
     dae:	8e 77       	andi	r24, 0x7E	; 126
     db0:	80 93 e8 00 	sts	0x00E8, r24
     db4:	85 2d       	mov	r24, r5
     db6:	94 2d       	mov	r25, r4
     db8:	9c 01       	movw	r18, r24
     dba:	0f b6       	in	r0, 0x3f	; 63
     dbc:	f8 94       	cli
     dbe:	3e bf       	out	0x3e, r19	; 62
     dc0:	0f be       	out	0x3f, r0	; 63
     dc2:	2d bf       	out	0x3d, r18	; 61

			Endpoint_ClearIN();
		}
	}
}
     dc4:	0f b6       	in	r0, 0x3f	; 63
     dc6:	f8 94       	cli
     dc8:	7e be       	out	0x3e, r7	; 62
     dca:	0f be       	out	0x3f, r0	; 63
     dcc:	6d be       	out	0x3d, r6	; 61
     dce:	0f 90       	pop	r0
     dd0:	0f 90       	pop	r0
     dd2:	0f 90       	pop	r0
     dd4:	cf 91       	pop	r28
     dd6:	df 91       	pop	r29
     dd8:	1f 91       	pop	r17
     dda:	0f 91       	pop	r16
     ddc:	ff 90       	pop	r15
     dde:	ef 90       	pop	r14
     de0:	df 90       	pop	r13
     de2:	cf 90       	pop	r12
     de4:	bf 90       	pop	r11
     de6:	af 90       	pop	r10
     de8:	9f 90       	pop	r9
     dea:	8f 90       	pop	r8
     dec:	7f 90       	pop	r7
     dee:	6f 90       	pop	r6
     df0:	5f 90       	pop	r5
     df2:	4f 90       	pop	r4
     df4:	08 95       	ret

00000df6 <HID_Device_ConfigureEndpoints>:
			break;
	}
}

bool HID_Device_ConfigureEndpoints(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
     df6:	cf 93       	push	r28
     df8:	df 93       	push	r29
     dfa:	dc 01       	movw	r26, r24
	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));
     dfc:	08 96       	adiw	r24, 0x08	; 8
     dfe:	fc 01       	movw	r30, r24
     e00:	85 e0       	ldi	r24, 0x05	; 5
     e02:	ef 01       	movw	r28, r30
     e04:	19 92       	st	Y+, r1
     e06:	8a 95       	dec	r24
     e08:	e9 f7       	brne	.-6      	; 0xe04 <HID_Device_ConfigureEndpoints+0xe>
	HIDInterfaceInfo->State.UsingReportProtocol = true;
     e0a:	81 e0       	ldi	r24, 0x01	; 1
     e0c:	18 96       	adiw	r26, 0x08	; 8
     e0e:	8c 93       	st	X, r24
     e10:	18 97       	sbiw	r26, 0x08	; 8
	HIDInterfaceInfo->State.IdleCount           = 500;
     e12:	84 ef       	ldi	r24, 0xF4	; 244
     e14:	91 e0       	ldi	r25, 0x01	; 1
     e16:	1a 96       	adiw	r26, 0x0a	; 10
     e18:	9c 93       	st	X, r25
     e1a:	8e 93       	st	-X, r24
     e1c:	19 97       	sbiw	r26, 0x09	; 9

	if (!(Endpoint_ConfigureEndpoint(HIDInterfaceInfo->Config.ReportINEndpointNumber, EP_TYPE_INTERRUPT,
     e1e:	11 96       	adiw	r26, 0x01	; 1
     e20:	3c 91       	ld	r19, X
     e22:	11 97       	sbiw	r26, 0x01	; 1
     e24:	12 96       	adiw	r26, 0x02	; 2
     e26:	6d 91       	ld	r22, X+
     e28:	7c 91       	ld	r23, X
     e2a:	13 97       	sbiw	r26, 0x03	; 3
     e2c:	14 96       	adiw	r26, 0x04	; 4
     e2e:	8c 91       	ld	r24, X
     e30:	88 23       	and	r24, r24
     e32:	11 f4       	brne	.+4      	; 0xe38 <HID_Device_ConfigureEndpoints+0x42>
     e34:	40 e0       	ldi	r20, 0x00	; 0
     e36:	01 c0       	rjmp	.+2      	; 0xe3a <HID_Device_ConfigureEndpoints+0x44>
     e38:	44 e0       	ldi	r20, 0x04	; 4
     e3a:	20 e0       	ldi	r18, 0x00	; 0
     e3c:	88 e0       	ldi	r24, 0x08	; 8
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	03 c0       	rjmp	.+6      	; 0xe48 <HID_Device_ConfigureEndpoints+0x52>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
				{
					MaskVal++;
     e42:	2f 5f       	subi	r18, 0xFF	; 255
					CheckBytes <<= 1;
     e44:	88 0f       	add	r24, r24
     e46:	99 1f       	adc	r25, r25
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
     e48:	86 17       	cp	r24, r22
     e4a:	97 07       	cpc	r25, r23
     e4c:	d0 f3       	brcs	.-12     	; 0xe42 <HID_Device_ConfigureEndpoints+0x4c>
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
     e4e:	42 60       	ori	r20, 0x02	; 2
     e50:	22 95       	swap	r18
     e52:	20 7f       	andi	r18, 0xF0	; 240
     e54:	42 2b       	or	r20, r18
     e56:	83 2f       	mov	r24, r19
     e58:	61 ec       	ldi	r22, 0xC1	; 193
     e5a:	93 da       	rcall	.-2778   	; 0x382 <Endpoint_ConfigureEndpoint_Prv>
     e5c:	81 11       	cpse	r24, r1
     e5e:	81 e0       	ldi	r24, 0x01	; 1
	{
		return false;
	}

	return true;
}
     e60:	df 91       	pop	r29
     e62:	cf 91       	pop	r28
     e64:	08 95       	ret

00000e66 <HID_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_HID_DRIVER
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HID.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
     e66:	6f 92       	push	r6
     e68:	7f 92       	push	r7
     e6a:	8f 92       	push	r8
     e6c:	9f 92       	push	r9
     e6e:	af 92       	push	r10
     e70:	bf 92       	push	r11
     e72:	cf 92       	push	r12
     e74:	df 92       	push	r13
     e76:	ef 92       	push	r14
     e78:	ff 92       	push	r15
     e7a:	0f 93       	push	r16
     e7c:	1f 93       	push	r17
     e7e:	df 93       	push	r29
     e80:	cf 93       	push	r28
     e82:	00 d0       	rcall	.+0      	; 0xe84 <HID_Device_ProcessControlRequest+0x1e>
     e84:	0f 92       	push	r0
     e86:	cd b7       	in	r28, 0x3d	; 61
     e88:	de b7       	in	r29, 0x3e	; 62
     e8a:	6c 01       	movw	r12, r24
				Endpoint_ClearStatusStage();
			}

			break;
	}
}
     e8c:	6d b6       	in	r6, 0x3d	; 61
     e8e:	7e b6       	in	r7, 0x3e	; 62
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     e90:	80 91 e8 00 	lds	r24, 0x00E8
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HID.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (!(Endpoint_IsSETUPReceived()))
     e94:	83 ff       	sbrs	r24, 3
     e96:	0a c1       	rjmp	.+532    	; 0x10ac <HID_Device_ProcessControlRequest+0x246>
	  return;

	if (USB_ControlRequest.wIndex != HIDInterfaceInfo->Config.InterfaceNumber)
     e98:	f6 01       	movw	r30, r12
     e9a:	80 81       	ld	r24, Z
     e9c:	90 e0       	ldi	r25, 0x00	; 0
     e9e:	20 91 1f 01 	lds	r18, 0x011F
     ea2:	30 91 20 01 	lds	r19, 0x0120
     ea6:	28 17       	cp	r18, r24
     ea8:	39 07       	cpc	r19, r25
     eaa:	09 f0       	breq	.+2      	; 0xeae <HID_Device_ProcessControlRequest+0x48>
     eac:	ff c0       	rjmp	.+510    	; 0x10ac <HID_Device_ProcessControlRequest+0x246>
	  return;

	switch (USB_ControlRequest.bRequest)
     eae:	80 91 1c 01 	lds	r24, 0x011C
     eb2:	83 30       	cpi	r24, 0x03	; 3
     eb4:	09 f4       	brne	.+2      	; 0xeb8 <HID_Device_ProcessControlRequest+0x52>
     eb6:	aa c0       	rjmp	.+340    	; 0x100c <HID_Device_ProcessControlRequest+0x1a6>
     eb8:	84 30       	cpi	r24, 0x04	; 4
     eba:	30 f4       	brcc	.+12     	; 0xec8 <HID_Device_ProcessControlRequest+0x62>
     ebc:	81 30       	cpi	r24, 0x01	; 1
     ebe:	71 f0       	breq	.+28     	; 0xedc <HID_Device_ProcessControlRequest+0x76>
     ec0:	82 30       	cpi	r24, 0x02	; 2
     ec2:	09 f0       	breq	.+2      	; 0xec6 <HID_Device_ProcessControlRequest+0x60>
     ec4:	f3 c0       	rjmp	.+486    	; 0x10ac <HID_Device_ProcessControlRequest+0x246>
     ec6:	da c0       	rjmp	.+436    	; 0x107c <HID_Device_ProcessControlRequest+0x216>
     ec8:	8a 30       	cpi	r24, 0x0A	; 10
     eca:	09 f4       	brne	.+2      	; 0xece <HID_Device_ProcessControlRequest+0x68>
     ecc:	bf c0       	rjmp	.+382    	; 0x104c <HID_Device_ProcessControlRequest+0x1e6>
     ece:	8b 30       	cpi	r24, 0x0B	; 11
     ed0:	09 f4       	brne	.+2      	; 0xed4 <HID_Device_ProcessControlRequest+0x6e>
     ed2:	a9 c0       	rjmp	.+338    	; 0x1026 <HID_Device_ProcessControlRequest+0x1c0>
     ed4:	89 30       	cpi	r24, 0x09	; 9
     ed6:	09 f0       	breq	.+2      	; 0xeda <HID_Device_ProcessControlRequest+0x74>
     ed8:	e9 c0       	rjmp	.+466    	; 0x10ac <HID_Device_ProcessControlRequest+0x246>
     eda:	55 c0       	rjmp	.+170    	; 0xf86 <HID_Device_ProcessControlRequest+0x120>
	{
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     edc:	80 91 1b 01 	lds	r24, 0x011B
     ee0:	81 3a       	cpi	r24, 0xA1	; 161
     ee2:	09 f0       	breq	.+2      	; 0xee6 <HID_Device_ProcessControlRequest+0x80>
     ee4:	e3 c0       	rjmp	.+454    	; 0x10ac <HID_Device_ProcessControlRequest+0x246>
     ee6:	9d b6       	in	r9, 0x3d	; 61
     ee8:	8e b6       	in	r8, 0x3e	; 62
			{
				uint16_t ReportSize = 0;
     eea:	1b 82       	std	Y+3, r1	; 0x03
     eec:	1a 82       	std	Y+2, r1	; 0x02
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
     eee:	80 91 1d 01 	lds	r24, 0x011D
     ef2:	10 91 1e 01 	lds	r17, 0x011E
     ef6:	89 83       	std	Y+1, r24	; 0x01
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
     ef8:	f6 01       	movw	r30, r12
     efa:	47 81       	ldd	r20, Z+7	; 0x07
     efc:	8d b7       	in	r24, 0x3d	; 61
     efe:	9e b7       	in	r25, 0x3e	; 62
     f00:	84 1b       	sub	r24, r20
     f02:	91 09       	sbc	r25, r1
     f04:	0f b6       	in	r0, 0x3f	; 63
     f06:	f8 94       	cli
     f08:	9e bf       	out	0x3e, r25	; 62
     f0a:	0f be       	out	0x3f, r0	; 63
     f0c:	8d bf       	out	0x3d, r24	; 61
     f0e:	ed b6       	in	r14, 0x3d	; 61
     f10:	fe b6       	in	r15, 0x3e	; 62
     f12:	08 94       	sec
     f14:	e1 1c       	adc	r14, r1
     f16:	f1 1c       	adc	r15, r1

				memset(ReportData, 0, sizeof(ReportData));
     f18:	be 2c       	mov	r11, r14
     f1a:	af 2c       	mov	r10, r15
     f1c:	c7 01       	movw	r24, r14
     f1e:	60 e0       	ldi	r22, 0x00	; 0
     f20:	70 e0       	ldi	r23, 0x00	; 0
     f22:	50 e0       	ldi	r21, 0x00	; 0
     f24:	f0 d0       	rcall	.+480    	; 0x1106 <memset>

				CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, ReportType, ReportData, &ReportSize);
     f26:	11 50       	subi	r17, 0x01	; 1
     f28:	c6 01       	movw	r24, r12
     f2a:	be 01       	movw	r22, r28
     f2c:	6f 5f       	subi	r22, 0xFF	; 255
     f2e:	7f 4f       	sbci	r23, 0xFF	; 255
     f30:	41 2f       	mov	r20, r17
     f32:	97 01       	movw	r18, r14
     f34:	8e 01       	movw	r16, r28
     f36:	0e 5f       	subi	r16, 0xFE	; 254
     f38:	1f 4f       	sbci	r17, 0xFF	; 255
     f3a:	3f d9       	rcall	.-3458   	; 0x1ba <CALLBACK_HID_Device_CreateHIDReport>

				if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
     f3c:	f6 01       	movw	r30, r12
     f3e:	25 81       	ldd	r18, Z+5	; 0x05
     f40:	36 81       	ldd	r19, Z+6	; 0x06
     f42:	21 15       	cp	r18, r1
     f44:	31 05       	cpc	r19, r1
     f46:	29 f0       	breq	.+10     	; 0xf52 <HID_Device_ProcessControlRequest+0xec>
				{
					memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportData,
     f48:	47 81       	ldd	r20, Z+7	; 0x07
     f4a:	c9 01       	movw	r24, r18
     f4c:	b7 01       	movw	r22, r14
     f4e:	50 e0       	ldi	r21, 0x00	; 0
     f50:	d1 d0       	rcall	.+418    	; 0x10f4 <memcpy>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     f52:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     f56:	80 91 e8 00 	lds	r24, 0x00E8
     f5a:	87 7f       	andi	r24, 0xF7	; 247
     f5c:	80 93 e8 00 	sts	0x00E8, r24
				}
				
				Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

				Endpoint_ClearSETUP();
				Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
     f60:	6a 81       	ldd	r22, Y+2	; 0x02
     f62:	7b 81       	ldd	r23, Y+3	; 0x03
     f64:	8b 2d       	mov	r24, r11
     f66:	9a 2d       	mov	r25, r10
     f68:	bb db       	rcall	.-2186   	; 0x6e0 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     f6a:	80 91 e8 00 	lds	r24, 0x00E8
     f6e:	8b 77       	andi	r24, 0x7B	; 123
     f70:	80 93 e8 00 	sts	0x00E8, r24
     f74:	29 2d       	mov	r18, r9
     f76:	38 2d       	mov	r19, r8
     f78:	c9 01       	movw	r24, r18
     f7a:	0f b6       	in	r0, 0x3f	; 63
     f7c:	f8 94       	cli
     f7e:	9e bf       	out	0x3e, r25	; 62
     f80:	0f be       	out	0x3f, r0	; 63
     f82:	8d bf       	out	0x3d, r24	; 61
     f84:	93 c0       	rjmp	.+294    	; 0x10ac <HID_Device_ProcessControlRequest+0x246>
				Endpoint_ClearOUT();
			}

			break;
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     f86:	80 91 1b 01 	lds	r24, 0x011B
     f8a:	81 32       	cpi	r24, 0x21	; 33
     f8c:	09 f0       	breq	.+2      	; 0xf90 <HID_Device_ProcessControlRequest+0x12a>
     f8e:	8e c0       	rjmp	.+284    	; 0x10ac <HID_Device_ProcessControlRequest+0x246>
     f90:	9d b6       	in	r9, 0x3d	; 61
     f92:	8e b6       	in	r8, 0x3e	; 62
			{
				uint16_t ReportSize = USB_ControlRequest.wLength;
     f94:	00 91 21 01 	lds	r16, 0x0121
     f98:	10 91 22 01 	lds	r17, 0x0122
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
     f9c:	a0 90 1d 01 	lds	r10, 0x011D
     fa0:	b0 90 1e 01 	lds	r11, 0x011E
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[ReportSize];
     fa4:	8d b7       	in	r24, 0x3d	; 61
     fa6:	9e b7       	in	r25, 0x3e	; 62
     fa8:	80 1b       	sub	r24, r16
     faa:	91 0b       	sbc	r25, r17
     fac:	0f b6       	in	r0, 0x3f	; 63
     fae:	f8 94       	cli
     fb0:	9e bf       	out	0x3e, r25	; 62
     fb2:	0f be       	out	0x3f, r0	; 63
     fb4:	8d bf       	out	0x3d, r24	; 61
     fb6:	ed b6       	in	r14, 0x3d	; 61
     fb8:	fe b6       	in	r15, 0x3e	; 62
     fba:	08 94       	sec
     fbc:	e1 1c       	adc	r14, r1
     fbe:	f1 1c       	adc	r15, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     fc0:	80 91 e8 00 	lds	r24, 0x00E8
     fc4:	87 7f       	andi	r24, 0xF7	; 247
     fc6:	80 93 e8 00 	sts	0x00E8, r24

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
     fca:	c7 01       	movw	r24, r14
     fcc:	b8 01       	movw	r22, r16
     fce:	e6 db       	rcall	.-2100   	; 0x79c <Endpoint_Read_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     fd0:	80 91 e8 00 	lds	r24, 0x00E8
     fd4:	8e 77       	andi	r24, 0x7E	; 126
     fd6:	80 93 e8 00 	sts	0x00E8, r24
				Endpoint_ClearIN();
				
				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
     fda:	80 e0       	ldi	r24, 0x00	; 0
     fdc:	90 e0       	ldi	r25, 0x00	; 0
     fde:	aa 20       	and	r10, r10
     fe0:	11 f0       	breq	.+4      	; 0xfe6 <HID_Device_ProcessControlRequest+0x180>
     fe2:	81 e0       	ldi	r24, 0x01	; 1
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	ba 94       	dec	r11
     fe8:	e8 0e       	add	r14, r24
     fea:	f9 1e       	adc	r15, r25
     fec:	08 1b       	sub	r16, r24
     fee:	19 0b       	sbc	r17, r25
     ff0:	c6 01       	movw	r24, r12
     ff2:	6a 2d       	mov	r22, r10
     ff4:	4b 2d       	mov	r20, r11
     ff6:	97 01       	movw	r18, r14
     ff8:	2c d9       	rcall	.-3496   	; 0x252 <CALLBACK_HID_Device_ProcessHIDReport>
     ffa:	89 2d       	mov	r24, r9
     ffc:	98 2d       	mov	r25, r8
     ffe:	9c 01       	movw	r18, r24
    1000:	0f b6       	in	r0, 0x3f	; 63
    1002:	f8 94       	cli
    1004:	3e bf       	out	0x3e, r19	; 62
    1006:	0f be       	out	0x3f, r0	; 63
    1008:	2d bf       	out	0x3d, r18	; 61
    100a:	50 c0       	rjmp	.+160    	; 0x10ac <HID_Device_ProcessControlRequest+0x246>
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
			}

			break;
		case HID_REQ_GetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    100c:	80 91 1b 01 	lds	r24, 0x011B
    1010:	81 3a       	cpi	r24, 0xA1	; 161
    1012:	09 f0       	breq	.+2      	; 0x1016 <HID_Device_ProcessControlRequest+0x1b0>
    1014:	4b c0       	rjmp	.+150    	; 0x10ac <HID_Device_ProcessControlRequest+0x246>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1016:	80 91 e8 00 	lds	r24, 0x00E8
    101a:	87 7f       	andi	r24, 0xF7	; 247
    101c:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_Write_8(HIDInterfaceInfo->State.UsingReportProtocol);
    1020:	f6 01       	movw	r30, r12
    1022:	80 85       	ldd	r24, Z+8	; 0x08
    1024:	3b c0       	rjmp	.+118    	; 0x109c <HID_Device_ProcessControlRequest+0x236>
				Endpoint_ClearStatusStage();
			}

			break;
		case HID_REQ_SetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1026:	80 91 1b 01 	lds	r24, 0x011B
    102a:	81 32       	cpi	r24, 0x21	; 33
    102c:	09 f0       	breq	.+2      	; 0x1030 <HID_Device_ProcessControlRequest+0x1ca>
    102e:	3e c0       	rjmp	.+124    	; 0x10ac <HID_Device_ProcessControlRequest+0x246>
    1030:	80 91 e8 00 	lds	r24, 0x00E8
    1034:	87 7f       	andi	r24, 0xF7	; 247
    1036:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    103a:	d8 d9       	rcall	.-3152   	; 0x3ec <Endpoint_ClearStatusStage>

				HIDInterfaceInfo->State.UsingReportProtocol = ((USB_ControlRequest.wValue & 0xFF) != 0x00);
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	80 91 1d 01 	lds	r24, 0x011D
    1042:	81 11       	cpse	r24, r1
    1044:	91 e0       	ldi	r25, 0x01	; 1
    1046:	f6 01       	movw	r30, r12
    1048:	90 87       	std	Z+8, r25	; 0x08
    104a:	30 c0       	rjmp	.+96     	; 0x10ac <HID_Device_ProcessControlRequest+0x246>
			}

			break;
		case HID_REQ_SetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    104c:	80 91 1b 01 	lds	r24, 0x011B
    1050:	81 32       	cpi	r24, 0x21	; 33
    1052:	61 f5       	brne	.+88     	; 0x10ac <HID_Device_ProcessControlRequest+0x246>
    1054:	80 91 e8 00 	lds	r24, 0x00E8
    1058:	87 7f       	andi	r24, 0xF7	; 247
    105a:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    105e:	c6 d9       	rcall	.-3188   	; 0x3ec <Endpoint_ClearStatusStage>

				HIDInterfaceInfo->State.IdleCount = ((USB_ControlRequest.wValue & 0xFF00) >> 6);
    1060:	80 91 1d 01 	lds	r24, 0x011D
    1064:	90 91 1e 01 	lds	r25, 0x011E
    1068:	80 70       	andi	r24, 0x00	; 0
    106a:	76 e0       	ldi	r23, 0x06	; 6
    106c:	96 95       	lsr	r25
    106e:	87 95       	ror	r24
    1070:	7a 95       	dec	r23
    1072:	e1 f7       	brne	.-8      	; 0x106c <HID_Device_ProcessControlRequest+0x206>
    1074:	f6 01       	movw	r30, r12
    1076:	92 87       	std	Z+10, r25	; 0x0a
    1078:	81 87       	std	Z+9, r24	; 0x09
    107a:	18 c0       	rjmp	.+48     	; 0x10ac <HID_Device_ProcessControlRequest+0x246>
			}

			break;
		case HID_REQ_GetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    107c:	80 91 1b 01 	lds	r24, 0x011B
    1080:	81 3a       	cpi	r24, 0xA1	; 161
    1082:	a1 f4       	brne	.+40     	; 0x10ac <HID_Device_ProcessControlRequest+0x246>
    1084:	80 91 e8 00 	lds	r24, 0x00E8
    1088:	87 7f       	andi	r24, 0xF7	; 247
    108a:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_Write_8(HIDInterfaceInfo->State.IdleCount >> 2);
    108e:	f6 01       	movw	r30, r12
    1090:	81 85       	ldd	r24, Z+9	; 0x09
    1092:	92 85       	ldd	r25, Z+10	; 0x0a
    1094:	96 95       	lsr	r25
    1096:	87 95       	ror	r24
    1098:	96 95       	lsr	r25
    109a:	87 95       	ror	r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    109c:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    10a0:	80 91 e8 00 	lds	r24, 0x00E8
    10a4:	8e 77       	andi	r24, 0x7E	; 126
    10a6:	80 93 e8 00 	sts	0x00E8, r24
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    10aa:	a0 d9       	rcall	.-3264   	; 0x3ec <Endpoint_ClearStatusStage>
			}

			break;
	}
}
    10ac:	0f b6       	in	r0, 0x3f	; 63
    10ae:	f8 94       	cli
    10b0:	7e be       	out	0x3e, r7	; 62
    10b2:	0f be       	out	0x3f, r0	; 63
    10b4:	6d be       	out	0x3d, r6	; 61
    10b6:	0f 90       	pop	r0
    10b8:	0f 90       	pop	r0
    10ba:	0f 90       	pop	r0
    10bc:	cf 91       	pop	r28
    10be:	df 91       	pop	r29
    10c0:	1f 91       	pop	r17
    10c2:	0f 91       	pop	r16
    10c4:	ff 90       	pop	r15
    10c6:	ef 90       	pop	r14
    10c8:	df 90       	pop	r13
    10ca:	cf 90       	pop	r12
    10cc:	bf 90       	pop	r11
    10ce:	af 90       	pop	r10
    10d0:	9f 90       	pop	r9
    10d2:	8f 90       	pop	r8
    10d4:	7f 90       	pop	r7
    10d6:	6f 90       	pop	r6
    10d8:	08 95       	ret

000010da <memcmp>:
    10da:	fb 01       	movw	r30, r22
    10dc:	dc 01       	movw	r26, r24
    10de:	04 c0       	rjmp	.+8      	; 0x10e8 <memcmp+0xe>
    10e0:	8d 91       	ld	r24, X+
    10e2:	01 90       	ld	r0, Z+
    10e4:	80 19       	sub	r24, r0
    10e6:	21 f4       	brne	.+8      	; 0x10f0 <memcmp+0x16>
    10e8:	41 50       	subi	r20, 0x01	; 1
    10ea:	50 40       	sbci	r21, 0x00	; 0
    10ec:	c8 f7       	brcc	.-14     	; 0x10e0 <memcmp+0x6>
    10ee:	88 1b       	sub	r24, r24
    10f0:	99 0b       	sbc	r25, r25
    10f2:	08 95       	ret

000010f4 <memcpy>:
    10f4:	fb 01       	movw	r30, r22
    10f6:	dc 01       	movw	r26, r24
    10f8:	02 c0       	rjmp	.+4      	; 0x10fe <memcpy+0xa>
    10fa:	01 90       	ld	r0, Z+
    10fc:	0d 92       	st	X+, r0
    10fe:	41 50       	subi	r20, 0x01	; 1
    1100:	50 40       	sbci	r21, 0x00	; 0
    1102:	d8 f7       	brcc	.-10     	; 0x10fa <memcpy+0x6>
    1104:	08 95       	ret

00001106 <memset>:
    1106:	dc 01       	movw	r26, r24
    1108:	01 c0       	rjmp	.+2      	; 0x110c <memset+0x6>
    110a:	6d 93       	st	X+, r22
    110c:	41 50       	subi	r20, 0x01	; 1
    110e:	50 40       	sbci	r21, 0x00	; 0
    1110:	e0 f7       	brcc	.-8      	; 0x110a <memset+0x4>
    1112:	08 95       	ret

00001114 <_exit>:
    1114:	f8 94       	cli

00001116 <__stop_program>:
    1116:	ff cf       	rjmp	.-2      	; 0x1116 <__stop_program>
