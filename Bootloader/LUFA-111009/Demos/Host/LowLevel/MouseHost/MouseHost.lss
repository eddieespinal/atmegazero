
MouseHost.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  000018fa  0000198e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000018fa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000022  0080011a  0080011a  000019a8  2**0
                  ALLOC
  3 .debug_aranges 00000320  00000000  00000000  000019a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000007be  00000000  00000000  00001cc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00004b26  00000000  00000000  00002486  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000015f8  00000000  00000000  00006fac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00003da7  00000000  00000000  000085a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000004a0  00000000  00000000  0000c34c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000022eb  00000000  00000000  0000c7ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000020a9  00000000  00000000  0000ead7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000003d0  00000000  00000000  00010b80  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
		Pipe_DisablePipe();
	}
}

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
       0:	51 c1       	rjmp	.+674    	; 0x2a4 <__ctors_end>
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
       2:	00 00       	nop
{
	USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, AfterType);

	if (*BytesRem)
	  USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, Type);
}
       4:	6d c1       	rjmp	.+730    	; 0x2e0 <__bad_interrupt>
	return USB_Host_SendControlRequest(NULL);
}

uint8_t USB_Host_SetInterfaceAltSetting(const uint8_t InterfaceIndex,
                                        const uint8_t AltSetting)
{
       6:	00 00       	nop

	return Serial_ReceiveByte();
}

int Serial_getchar_Blocking(FILE *Stream)
{
       8:	6b c1       	rjmp	.+726    	; 0x2e0 <__bad_interrupt>
       a:	00 00       	nop
       c:	69 c1       	rjmp	.+722    	; 0x2e0 <__bad_interrupt>
       e:	00 00       	nop
      10:	67 c1       	rjmp	.+718    	; 0x2e0 <__bad_interrupt>
      12:	00 00       	nop
      14:	65 c1       	rjmp	.+714    	; 0x2e0 <__bad_interrupt>
      16:	00 00       	nop
      18:	63 c1       	rjmp	.+710    	; 0x2e0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	61 c1       	rjmp	.+706    	; 0x2e0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	5f c1       	rjmp	.+702    	; 0x2e0 <__bad_interrupt>
      22:	00 00       	nop
      24:	5d c1       	rjmp	.+698    	; 0x2e0 <__bad_interrupt>
      26:	00 00       	nop
      28:	68 c6       	rjmp	.+3280   	; 0xcfa <__vector_10>
      2a:	00 00       	nop
      2c:	59 c1       	rjmp	.+690    	; 0x2e0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	57 c1       	rjmp	.+686    	; 0x2e0 <__bad_interrupt>
      32:	00 00       	nop
      34:	55 c1       	rjmp	.+682    	; 0x2e0 <__bad_interrupt>
      36:	00 00       	nop
      38:	53 c1       	rjmp	.+678    	; 0x2e0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	51 c1       	rjmp	.+674    	; 0x2e0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	4f c1       	rjmp	.+670    	; 0x2e0 <__bad_interrupt>
      42:	00 00       	nop
      44:	4d c1       	rjmp	.+666    	; 0x2e0 <__bad_interrupt>
      46:	00 00       	nop
      48:	4b c1       	rjmp	.+662    	; 0x2e0 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	49 c1       	rjmp	.+658    	; 0x2e0 <__bad_interrupt>
      4e:	00 00       	nop
      50:	47 c1       	rjmp	.+654    	; 0x2e0 <__bad_interrupt>
      52:	00 00       	nop
      54:	45 c1       	rjmp	.+650    	; 0x2e0 <__bad_interrupt>
      56:	00 00       	nop
      58:	43 c1       	rjmp	.+646    	; 0x2e0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	41 c1       	rjmp	.+642    	; 0x2e0 <__bad_interrupt>
      5e:	00 00       	nop
      60:	3f c1       	rjmp	.+638    	; 0x2e0 <__bad_interrupt>
      62:	00 00       	nop
      64:	3d c1       	rjmp	.+634    	; 0x2e0 <__bad_interrupt>
      66:	00 00       	nop
      68:	3b c1       	rjmp	.+630    	; 0x2e0 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	39 c1       	rjmp	.+626    	; 0x2e0 <__bad_interrupt>
      6e:	00 00       	nop
      70:	37 c1       	rjmp	.+622    	; 0x2e0 <__bad_interrupt>
      72:	00 00       	nop
      74:	35 c1       	rjmp	.+618    	; 0x2e0 <__bad_interrupt>
      76:	00 00       	nop
      78:	33 c1       	rjmp	.+614    	; 0x2e0 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	31 c1       	rjmp	.+610    	; 0x2e0 <__bad_interrupt>
      7e:	00 00       	nop
      80:	2f c1       	rjmp	.+606    	; 0x2e0 <__bad_interrupt>
      82:	00 00       	nop
      84:	2d c1       	rjmp	.+602    	; 0x2e0 <__bad_interrupt>
      86:	00 00       	nop
      88:	2b c1       	rjmp	.+598    	; 0x2e0 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	29 c1       	rjmp	.+594    	; 0x2e0 <__bad_interrupt>
      8e:	00 00       	nop
      90:	27 c1       	rjmp	.+590    	; 0x2e0 <__bad_interrupt>
      92:	00 00       	nop
      94:	25 c1       	rjmp	.+586    	; 0x2e0 <__bad_interrupt>
      96:	00 00       	nop

00000098 <__c.4583>:
      98:	64 58 3a 25 32 64 20 64 59 3a 25 32 64 20 42 75     dX:%2d dY:%2d Bu
      a8:	74 74 6f 6e 3a 25 64 0d 0a 00                       tton:%d...

000000b2 <__c.4572>:
      b2:	1b 5b 33 31 6d 44 65 76 20 45 6e 75 6d 20 45 72     .[31mDev Enum Er
      c2:	72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     ror.. -- Error C
      d2:	6f 64 65 20 25 64 0d 0a 20 2d 2d 20 53 75 62 20     ode %d.. -- Sub 
      e2:	45 72 72 6f 72 20 43 6f 64 65 20 25 64 0d 0a 20     Error Code %d.. 
      f2:	2d 2d 20 49 6e 20 53 74 61 74 65 20 25 64 0d 0a     -- In State %d..
     102:	1b 5b 33 37 6d 00                                   .[37m.

00000108 <__c.4564>:
     108:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
     118:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 
     128:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

00000137 <__c.4554>:
     137:	4d 6f 75 73 65 20 45 6e 75 6d 65 72 61 74 65 64     Mouse Enumerated
     147:	2e 0d 0a 00                                         ....

0000014b <__c.4552>:
     14b:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
     15b:	6f 72 20 28 53 65 74 20 50 72 6f 74 6f 63 6f 6c     or (Set Protocol
     16b:	29 2e 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43 6f     )... -- Error Co
     17b:	64 65 3a 20 25 64 0d 0a 1b 5b 33 37 6d 00           de: %d...[37m.

00000189 <__c.4549>:
     189:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
     199:	6f 72 20 28 53 65 74 20 43 6f 6e 66 69 67 75 72     or (Set Configur
     1a9:	61 74 69 6f 6e 29 2e 0d 0a 20 2d 2d 20 45 72 72     ation)... -- Err
     1b9:	6f 72 20 43 6f 64 65 3a 20 25 64 0d 0a 1b 5b 33     or Code: %d...[3
     1c9:	37 6d 00                                            7m.

000001cc <__c.4547>:
     1cc:	20 2d 2d 20 45 72 72 6f 72 20 43 6f 64 65 3a 20      -- Error Code: 
     1dc:	25 64 0d 0a 1b 5b 33 37 6d 00                       %d...[37m.

000001e6 <__c.4545>:
     1e6:	1b 5b 33 31 6d 49 6e 76 61 6c 69 64 20 44 65 76     .[31mInvalid Dev
     1f6:	69 63 65 2e 0d 0a 00                                ice....

000001fd <__c.4543>:
     1fd:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
     20d:	6f 72 20 28 47 65 74 20 43 6f 6e 66 69 67 75 72     or (Get Configur
     21d:	61 74 69 6f 6e 29 2e 0d 0a 00                       ation)....

00000227 <__c.4540>:
     227:	47 65 74 74 69 6e 67 20 43 6f 6e 66 69 67 20 44     Getting Config D
     237:	61 74 61 2e 0d 0a 00                                ata....

0000023e <__c.4535>:
     23e:	1b 5b 33 32 6d 44 65 76 69 63 65 20 55 6e 61 74     .[32mDevice Unat
     24e:	74 61 63 68 65 64 2e 0d 0a 1b 5b 33 37 6d 00        tached....[37m.

0000025d <__c.4530>:
     25d:	1b 5b 33 32 6d 44 65 76 69 63 65 20 41 74 74 61     .[32mDevice Atta
     26d:	63 68 65 64 2e 0d 0a 1b 5b 33 37 6d 00              ched....[37m.

0000027a <__c.4516>:
     27a:	1b 5b 33 36 6d 4d 6f 75 73 65 20 48 49 44 20 48     .[36mMouse HID H
     28a:	6f 73 74 20 44 65 6d 6f 20 72 75 6e 6e 69 6e 67     ost Demo running
     29a:	2e 0d 0a 1b 5b 33 37 6d 00 00                       ....[37m..

000002a4 <__ctors_end>:
     2a4:	11 24       	eor	r1, r1
     2a6:	1f be       	out	0x3f, r1	; 63
     2a8:	cf ef       	ldi	r28, 0xFF	; 255
     2aa:	d0 e2       	ldi	r29, 0x20	; 32
     2ac:	de bf       	out	0x3e, r29	; 62
     2ae:	cd bf       	out	0x3d, r28	; 61

000002b0 <__do_copy_data>:
     2b0:	11 e0       	ldi	r17, 0x01	; 1
     2b2:	a0 e0       	ldi	r26, 0x00	; 0
     2b4:	b1 e0       	ldi	r27, 0x01	; 1
     2b6:	ea ef       	ldi	r30, 0xFA	; 250
     2b8:	f8 e1       	ldi	r31, 0x18	; 24
     2ba:	00 e0       	ldi	r16, 0x00	; 0
     2bc:	0b bf       	out	0x3b, r16	; 59
     2be:	02 c0       	rjmp	.+4      	; 0x2c4 <__do_copy_data+0x14>
     2c0:	07 90       	elpm	r0, Z+
     2c2:	0d 92       	st	X+, r0
     2c4:	aa 31       	cpi	r26, 0x1A	; 26
     2c6:	b1 07       	cpc	r27, r17
     2c8:	d9 f7       	brne	.-10     	; 0x2c0 <__do_copy_data+0x10>

000002ca <__do_clear_bss>:
     2ca:	11 e0       	ldi	r17, 0x01	; 1
     2cc:	aa e1       	ldi	r26, 0x1A	; 26
     2ce:	b1 e0       	ldi	r27, 0x01	; 1
     2d0:	01 c0       	rjmp	.+2      	; 0x2d4 <.do_clear_bss_start>

000002d2 <.do_clear_bss_loop>:
     2d2:	1d 92       	st	X+, r1

000002d4 <.do_clear_bss_start>:
     2d4:	ac 33       	cpi	r26, 0x3C	; 60
     2d6:	b1 07       	cpc	r27, r17
     2d8:	e1 f7       	brne	.-8      	; 0x2d2 <.do_clear_bss_loop>
     2da:	8e d1       	rcall	.+796    	; 0x5f8 <main>
     2dc:	0c 94 7b 0c 	jmp	0x18f6	; 0x18f6 <_exit>

000002e0 <__bad_interrupt>:
     2e0:	8f ce       	rjmp	.-738    	; 0x0 <__vectors>

000002e2 <MouseHost_Task>:

/** Reads in and processes the next report from the attached device, displaying the report
 *  contents on the board LEDs and via the serial port.
 */
void MouseHost_Task(void)
{
     2e2:	df 93       	push	r29
     2e4:	cf 93       	push	r28
     2e6:	00 d0       	rcall	.+0      	; 0x2e8 <MouseHost_Task+0x6>
     2e8:	0f 92       	push	r0
     2ea:	cd b7       	in	r28, 0x3d	; 61
     2ec:	de b7       	in	r29, 0x3e	; 62
	if (USB_HostState != HOST_STATE_Configured)
     2ee:	80 91 27 01 	lds	r24, 0x0127
     2f2:	8b 30       	cpi	r24, 0x0B	; 11
     2f4:	09 f0       	breq	.+2      	; 0x2f8 <MouseHost_Task+0x16>
     2f6:	67 c0       	rjmp	.+206    	; 0x3c6 <MouseHost_Task+0xe4>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     2f8:	81 e0       	ldi	r24, 0x01	; 1
     2fa:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     2fe:	80 91 a9 00 	lds	r24, 0x00A9
     302:	8f 7b       	andi	r24, 0xBF	; 191
     304:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     308:	80 91 a6 00 	lds	r24, 0x00A6

	/* Unfreeze mouse data pipe */
	Pipe_Unfreeze();

	/* Check to see if a packet has been received */
	if (!(Pipe_IsINReceived()))
     30c:	80 fd       	sbrc	r24, 0
     30e:	04 c0       	rjmp	.+8      	; 0x318 <MouseHost_Task+0x36>
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     310:	8b b1       	in	r24, 0x0b	; 11
     312:	8f 70       	andi	r24, 0x0F	; 15
     314:	8b b9       	out	0x0b, r24	; 11
     316:	52 c0       	rjmp	.+164    	; 0x3bc <MouseHost_Task+0xda>
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
     318:	80 91 a6 00 	lds	r24, 0x00A6

		return;
	}

	/* Ensure pipe contains data before trying to read from it */
	if (Pipe_IsReadWriteAllowed())
     31c:	85 ff       	sbrs	r24, 5
     31e:	49 c0       	rjmp	.+146    	; 0x3b2 <MouseHost_Task+0xd0>
	{
		/* Read in mouse report data */
		Pipe_Read_Stream_LE(&MouseReport, sizeof(MouseReport), NULL);
     320:	ce 01       	movw	r24, r28
     322:	01 96       	adiw	r24, 0x01	; 1
     324:	63 e0       	ldi	r22, 0x03	; 3
     326:	70 e0       	ldi	r23, 0x00	; 0
     328:	40 e0       	ldi	r20, 0x00	; 0
     32a:	50 e0       	ldi	r21, 0x00	; 0
     32c:	79 d5       	rcall	.+2802   	; 0xe20 <Pipe_Read_Stream_LE>

		/* Alter status LEDs according to mouse X movement */
		if (MouseReport.X > 0)
     32e:	3a 81       	ldd	r19, Y+2	; 0x02
     330:	13 16       	cp	r1, r19
     332:	14 f4       	brge	.+4      	; 0x338 <MouseHost_Task+0x56>
     334:	90 e1       	ldi	r25, 0x10	; 16
     336:	05 c0       	rjmp	.+10     	; 0x342 <MouseHost_Task+0x60>
		  LEDMask |= LEDS_LED1;
		else if (MouseReport.X < 0)
     338:	33 23       	and	r19, r19
     33a:	11 f0       	breq	.+4      	; 0x340 <MouseHost_Task+0x5e>
     33c:	90 e2       	ldi	r25, 0x20	; 32
     33e:	01 c0       	rjmp	.+2      	; 0x342 <MouseHost_Task+0x60>
     340:	90 e0       	ldi	r25, 0x00	; 0
		  LEDMask |= LEDS_LED2;

		/* Alter status LEDs according to mouse Y movement */
		if (MouseReport.Y > 0)
     342:	2b 81       	ldd	r18, Y+3	; 0x03
     344:	12 16       	cp	r1, r18
     346:	14 f4       	brge	.+4      	; 0x34c <MouseHost_Task+0x6a>
		  LEDMask |= LEDS_LED3;
     348:	90 68       	ori	r25, 0x80	; 128
     34a:	02 c0       	rjmp	.+4      	; 0x350 <MouseHost_Task+0x6e>
		else if (MouseReport.Y < 0)
     34c:	21 11       	cpse	r18, r1
		  LEDMask |= LEDS_LED4;
     34e:	90 64       	ori	r25, 0x40	; 64

		/* Alter status LEDs according to mouse button position */
		if (MouseReport.Button)
     350:	49 81       	ldd	r20, Y+1	; 0x01
     352:	41 11       	cpse	r20, r1
     354:	90 ef       	ldi	r25, 0xF0	; 240
     356:	8b b1       	in	r24, 0x0b	; 11
     358:	8f 70       	andi	r24, 0x0F	; 15
     35a:	98 2b       	or	r25, r24
     35c:	9b b9       	out	0x0b, r25	; 11
		  LEDMask  = LEDS_ALL_LEDS;

		LEDs_SetAllLEDs(LEDMask);

		/* Print mouse report data through the serial port */
		printf_P(PSTR("dX:%2d dY:%2d Button:%d\r\n"), MouseReport.X,
     35e:	8d b7       	in	r24, 0x3d	; 61
     360:	9e b7       	in	r25, 0x3e	; 62
     362:	08 97       	sbiw	r24, 0x08	; 8
     364:	0f b6       	in	r0, 0x3f	; 63
     366:	f8 94       	cli
     368:	9e bf       	out	0x3e, r25	; 62
     36a:	0f be       	out	0x3f, r0	; 63
     36c:	8d bf       	out	0x3d, r24	; 61
     36e:	ed b7       	in	r30, 0x3d	; 61
     370:	fe b7       	in	r31, 0x3e	; 62
     372:	31 96       	adiw	r30, 0x01	; 1
     374:	88 e9       	ldi	r24, 0x98	; 152
     376:	90 e0       	ldi	r25, 0x00	; 0
     378:	ad b7       	in	r26, 0x3d	; 61
     37a:	be b7       	in	r27, 0x3e	; 62
     37c:	12 96       	adiw	r26, 0x02	; 2
     37e:	9c 93       	st	X, r25
     380:	8e 93       	st	-X, r24
     382:	11 97       	sbiw	r26, 0x01	; 1
     384:	83 2f       	mov	r24, r19
     386:	99 27       	eor	r25, r25
     388:	87 fd       	sbrc	r24, 7
     38a:	90 95       	com	r25
     38c:	93 83       	std	Z+3, r25	; 0x03
     38e:	82 83       	std	Z+2, r24	; 0x02
     390:	82 2f       	mov	r24, r18
     392:	99 27       	eor	r25, r25
     394:	87 fd       	sbrc	r24, 7
     396:	90 95       	com	r25
     398:	95 83       	std	Z+5, r25	; 0x05
     39a:	84 83       	std	Z+4, r24	; 0x04
     39c:	46 83       	std	Z+6, r20	; 0x06
     39e:	17 82       	std	Z+7, r1	; 0x07
     3a0:	ba d7       	rcall	.+3956   	; 0x1316 <printf_P>
     3a2:	8d b7       	in	r24, 0x3d	; 61
     3a4:	9e b7       	in	r25, 0x3e	; 62
     3a6:	08 96       	adiw	r24, 0x08	; 8
     3a8:	0f b6       	in	r0, 0x3f	; 63
     3aa:	f8 94       	cli
     3ac:	9e bf       	out	0x3e, r25	; 62
     3ae:	0f be       	out	0x3f, r0	; 63
     3b0:	8d bf       	out	0x3d, r24	; 61
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     3b2:	80 91 a6 00 	lds	r24, 0x00A6
     3b6:	8e 77       	andi	r24, 0x7E	; 126
     3b8:	80 93 a6 00 	sts	0x00A6, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     3bc:	80 91 a9 00 	lds	r24, 0x00A9
     3c0:	80 64       	ori	r24, 0x40	; 64
     3c2:	80 93 a9 00 	sts	0x00A9, r24
	/* Clear the IN endpoint, ready for next data packet */
	Pipe_ClearIN();

	/* Refreeze mouse data pipe */
	Pipe_Freeze();
}
     3c6:	0f 90       	pop	r0
     3c8:	0f 90       	pop	r0
     3ca:	0f 90       	pop	r0
     3cc:	cf 91       	pop	r28
     3ce:	df 91       	pop	r29
     3d0:	08 95       	ret

000003d2 <EVENT_USB_Host_DeviceEnumerationFailed>:
 *  enumerating an attached USB device.
 */
void EVENT_USB_Host_DeviceEnumerationFailed(const uint8_t ErrorCode,
                                            const uint8_t SubErrorCode)
{
	printf_P(PSTR(ESC_FG_RED "Dev Enum Error\r\n"
     3d2:	90 91 27 01 	lds	r25, 0x0127
     3d6:	2d b7       	in	r18, 0x3d	; 61
     3d8:	3e b7       	in	r19, 0x3e	; 62
     3da:	28 50       	subi	r18, 0x08	; 8
     3dc:	30 40       	sbci	r19, 0x00	; 0
     3de:	0f b6       	in	r0, 0x3f	; 63
     3e0:	f8 94       	cli
     3e2:	3e bf       	out	0x3e, r19	; 62
     3e4:	0f be       	out	0x3f, r0	; 63
     3e6:	2d bf       	out	0x3d, r18	; 61
     3e8:	ed b7       	in	r30, 0x3d	; 61
     3ea:	fe b7       	in	r31, 0x3e	; 62
     3ec:	31 96       	adiw	r30, 0x01	; 1
     3ee:	22 eb       	ldi	r18, 0xB2	; 178
     3f0:	30 e0       	ldi	r19, 0x00	; 0
     3f2:	ad b7       	in	r26, 0x3d	; 61
     3f4:	be b7       	in	r27, 0x3e	; 62
     3f6:	12 96       	adiw	r26, 0x02	; 2
     3f8:	3c 93       	st	X, r19
     3fa:	2e 93       	st	-X, r18
     3fc:	11 97       	sbiw	r26, 0x01	; 1
     3fe:	82 83       	std	Z+2, r24	; 0x02
     400:	13 82       	std	Z+3, r1	; 0x03
     402:	64 83       	std	Z+4, r22	; 0x04
     404:	15 82       	std	Z+5, r1	; 0x05
     406:	96 83       	std	Z+6, r25	; 0x06
     408:	17 82       	std	Z+7, r1	; 0x07
     40a:	85 d7       	rcall	.+3850   	; 0x1316 <printf_P>
     40c:	8b b1       	in	r24, 0x0b	; 11
     40e:	8f 70       	andi	r24, 0x0F	; 15
     410:	80 69       	ori	r24, 0x90	; 144
     412:	8b b9       	out	0x0b, r24	; 11
     414:	2d b7       	in	r18, 0x3d	; 61
     416:	3e b7       	in	r19, 0x3e	; 62
     418:	28 5f       	subi	r18, 0xF8	; 248
     41a:	3f 4f       	sbci	r19, 0xFF	; 255
     41c:	0f b6       	in	r0, 0x3f	; 63
     41e:	f8 94       	cli
     420:	3e bf       	out	0x3e, r19	; 62
     422:	0f be       	out	0x3f, r0	; 63
     424:	2d bf       	out	0x3d, r18	; 61
	                         " -- Error Code %d\r\n"
	                         " -- Sub Error Code %d\r\n"
	                         " -- In State %d\r\n" ESC_FG_WHITE), ErrorCode, SubErrorCode, USB_HostState);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
}
     426:	08 95       	ret

00000428 <EVENT_USB_Host_HostError>:
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
}

/** Event handler for the USB_HostError event. This indicates that a hardware error occurred while in host mode. */
void EVENT_USB_Host_HostError(const uint8_t ErrorCode)
{
     428:	1f 93       	push	r17
     42a:	18 2f       	mov	r17, r24
	USB_Disable();
     42c:	41 d4       	rcall	.+2178   	; 0xcb0 <USB_Disable>

	printf_P(PSTR(ESC_FG_RED "Host Mode Error\r\n"
     42e:	00 d0       	rcall	.+0      	; 0x430 <EVENT_USB_Host_HostError+0x8>
     430:	00 d0       	rcall	.+0      	; 0x432 <EVENT_USB_Host_HostError+0xa>
     432:	ed b7       	in	r30, 0x3d	; 61
     434:	fe b7       	in	r31, 0x3e	; 62
     436:	31 96       	adiw	r30, 0x01	; 1
     438:	88 e0       	ldi	r24, 0x08	; 8
     43a:	91 e0       	ldi	r25, 0x01	; 1
     43c:	ad b7       	in	r26, 0x3d	; 61
     43e:	be b7       	in	r27, 0x3e	; 62
     440:	12 96       	adiw	r26, 0x02	; 2
     442:	9c 93       	st	X, r25
     444:	8e 93       	st	-X, r24
     446:	11 97       	sbiw	r26, 0x01	; 1
     448:	12 83       	std	Z+2, r17	; 0x02
     44a:	13 82       	std	Z+3, r1	; 0x03
     44c:	64 d7       	rcall	.+3784   	; 0x1316 <printf_P>
     44e:	8b b1       	in	r24, 0x0b	; 11
     450:	8f 70       	andi	r24, 0x0F	; 15
     452:	80 69       	ori	r24, 0x90	; 144
     454:	8b b9       	out	0x0b, r24	; 11
     456:	0f 90       	pop	r0
     458:	0f 90       	pop	r0
     45a:	0f 90       	pop	r0
     45c:	0f 90       	pop	r0
     45e:	ff cf       	rjmp	.-2      	; 0x45e <EVENT_USB_Host_HostError+0x36>

00000460 <EVENT_USB_Host_DeviceUnattached>:
/** Event handler for the USB_DeviceUnattached event. This indicates that a device has been removed from the host, and
 *  stops the library USB task management process.
 */
void EVENT_USB_Host_DeviceUnattached(void)
{
	puts_P(PSTR(ESC_FG_GREEN "Device Unattached.\r\n" ESC_FG_WHITE));
     460:	8e e3       	ldi	r24, 0x3E	; 62
     462:	92 e0       	ldi	r25, 0x02	; 2
     464:	7a d7       	rcall	.+3828   	; 0x135a <puts_P>
     466:	8b b1       	in	r24, 0x0b	; 11
     468:	8f 70       	andi	r24, 0x0F	; 15
     46a:	80 61       	ori	r24, 0x10	; 16
     46c:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
}
     46e:	08 95       	ret

00000470 <EVENT_USB_Host_DeviceAttached>:
/** Event handler for the USB_DeviceAttached event. This indicates that a device has been attached to the host, and
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Host_DeviceAttached(void)
{
	puts_P(PSTR(ESC_FG_GREEN "Device Attached.\r\n" ESC_FG_WHITE));
     470:	8d e5       	ldi	r24, 0x5D	; 93
     472:	92 e0       	ldi	r25, 0x02	; 2
     474:	72 d7       	rcall	.+3812   	; 0x135a <puts_P>
     476:	8b b1       	in	r24, 0x0b	; 11
     478:	8f 70       	andi	r24, 0x0F	; 15
     47a:	80 6a       	ori	r24, 0xA0	; 160
     47c:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
}
     47e:	08 95       	ret

00000480 <EVENT_USB_Host_DeviceEnumerationComplete>:

/** Event handler for the USB_DeviceEnumerationComplete event. This indicates that a device has been successfully
 *  enumerated by the host and is now ready to be used by the application.
 */
void EVENT_USB_Host_DeviceEnumerationComplete(void)
{
     480:	1f 93       	push	r17
	puts_P(PSTR("Getting Config Data.\r\n"));
     482:	87 e2       	ldi	r24, 0x27	; 39
     484:	92 e0       	ldi	r25, 0x02	; 2
     486:	69 d7       	rcall	.+3794   	; 0x135a <puts_P>

	uint8_t ErrorCode;

	/* Get and process the configuration descriptor data */
	if ((ErrorCode = ProcessConfigurationDescriptor()) != SuccessfulConfigRead)
     488:	dd d0       	rcall	.+442    	; 0x644 <ProcessConfigurationDescriptor>
     48a:	18 2f       	mov	r17, r24
     48c:	88 23       	and	r24, r24
     48e:	b9 f0       	breq	.+46     	; 0x4be <EVENT_USB_Host_DeviceEnumerationComplete+0x3e>
	{
		if (ErrorCode == ControlError)
     490:	81 30       	cpi	r24, 0x01	; 1
     492:	19 f4       	brne	.+6      	; 0x49a <EVENT_USB_Host_DeviceEnumerationComplete+0x1a>
		  puts_P(PSTR(ESC_FG_RED "Control Error (Get Configuration).\r\n"));
     494:	8d ef       	ldi	r24, 0xFD	; 253
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	02 c0       	rjmp	.+4      	; 0x49e <EVENT_USB_Host_DeviceEnumerationComplete+0x1e>
		else
		  puts_P(PSTR(ESC_FG_RED "Invalid Device.\r\n"));
     49a:	86 ee       	ldi	r24, 0xE6	; 230
     49c:	91 e0       	ldi	r25, 0x01	; 1
     49e:	5d d7       	rcall	.+3770   	; 0x135a <puts_P>

		printf_P(PSTR(" -- Error Code: %d\r\n" ESC_FG_WHITE), ErrorCode);
     4a0:	00 d0       	rcall	.+0      	; 0x4a2 <EVENT_USB_Host_DeviceEnumerationComplete+0x22>
     4a2:	00 d0       	rcall	.+0      	; 0x4a4 <EVENT_USB_Host_DeviceEnumerationComplete+0x24>
     4a4:	ed b7       	in	r30, 0x3d	; 61
     4a6:	fe b7       	in	r31, 0x3e	; 62
     4a8:	31 96       	adiw	r30, 0x01	; 1
     4aa:	8c ec       	ldi	r24, 0xCC	; 204
     4ac:	91 e0       	ldi	r25, 0x01	; 1
     4ae:	ad b7       	in	r26, 0x3d	; 61
     4b0:	be b7       	in	r27, 0x3e	; 62
     4b2:	12 96       	adiw	r26, 0x02	; 2
     4b4:	9c 93       	st	X, r25
     4b6:	8e 93       	st	-X, r24
     4b8:	11 97       	sbiw	r26, 0x01	; 1
     4ba:	12 83       	std	Z+2, r17	; 0x02
     4bc:	13 c0       	rjmp	.+38     	; 0x4e4 <EVENT_USB_Host_DeviceEnumerationComplete+0x64>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	/* Set the device configuration to the first configuration (rarely do devices use multiple configurations) */
	if ((ErrorCode = USB_Host_SetDeviceConfiguration(1)) != HOST_SENDCONTROL_Successful)
     4be:	81 e0       	ldi	r24, 0x01	; 1
     4c0:	d5 d6       	rcall	.+3498   	; 0x126c <USB_Host_SetDeviceConfiguration>
     4c2:	28 2f       	mov	r18, r24
     4c4:	88 23       	and	r24, r24
     4c6:	c9 f0       	breq	.+50     	; 0x4fa <EVENT_USB_Host_DeviceEnumerationComplete+0x7a>
	{
		printf_P(PSTR(ESC_FG_RED "Control Error (Set Configuration).\r\n"
     4c8:	00 d0       	rcall	.+0      	; 0x4ca <EVENT_USB_Host_DeviceEnumerationComplete+0x4a>
     4ca:	00 d0       	rcall	.+0      	; 0x4cc <EVENT_USB_Host_DeviceEnumerationComplete+0x4c>
     4cc:	ed b7       	in	r30, 0x3d	; 61
     4ce:	fe b7       	in	r31, 0x3e	; 62
     4d0:	31 96       	adiw	r30, 0x01	; 1
     4d2:	89 e8       	ldi	r24, 0x89	; 137
     4d4:	91 e0       	ldi	r25, 0x01	; 1
     4d6:	ad b7       	in	r26, 0x3d	; 61
     4d8:	be b7       	in	r27, 0x3e	; 62
     4da:	12 96       	adiw	r26, 0x02	; 2
     4dc:	9c 93       	st	X, r25
     4de:	8e 93       	st	-X, r24
     4e0:	11 97       	sbiw	r26, 0x01	; 1
     4e2:	22 83       	std	Z+2, r18	; 0x02
     4e4:	13 82       	std	Z+3, r1	; 0x03
     4e6:	17 d7       	rcall	.+3630   	; 0x1316 <printf_P>
     4e8:	8b b1       	in	r24, 0x0b	; 11
     4ea:	8f 70       	andi	r24, 0x0F	; 15
     4ec:	80 69       	ori	r24, 0x90	; 144
     4ee:	8b b9       	out	0x0b, r24	; 11
     4f0:	0f 90       	pop	r0
     4f2:	0f 90       	pop	r0
     4f4:	0f 90       	pop	r0
     4f6:	0f 90       	pop	r0
     4f8:	33 c0       	rjmp	.+102    	; 0x560 <EVENT_USB_Host_DeviceEnumerationComplete+0xe0>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	/* HID class request to set the mouse protocol to the Boot Protocol */
	USB_ControlRequest = (USB_Request_Header_t)
     4fa:	af e1       	ldi	r26, 0x1F	; 31
     4fc:	b1 e0       	ldi	r27, 0x01	; 1
     4fe:	e0 e0       	ldi	r30, 0x00	; 0
     500:	f1 e0       	ldi	r31, 0x01	; 1
     502:	88 e0       	ldi	r24, 0x08	; 8
     504:	01 90       	ld	r0, Z+
     506:	0d 92       	st	X+, r0
     508:	81 50       	subi	r24, 0x01	; 1
     50a:	e1 f7       	brne	.-8      	; 0x504 <EVENT_USB_Host_DeviceEnumerationComplete+0x84>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     50c:	10 92 a7 00 	sts	0x00A7, r1

	/* Select the control pipe for the request transfer */
	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	/* Send the request, display error and wait for device detach if request fails */
	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
     510:	80 e0       	ldi	r24, 0x00	; 0
     512:	90 e0       	ldi	r25, 0x00	; 0
     514:	a4 d5       	rcall	.+2888   	; 0x105e <USB_Host_SendControlRequest>
     516:	28 2f       	mov	r18, r24
     518:	88 23       	and	r24, r24
     51a:	d9 f0       	breq	.+54     	; 0x552 <EVENT_USB_Host_DeviceEnumerationComplete+0xd2>
	{
		printf_P(PSTR(ESC_FG_RED "Control Error (Set Protocol).\r\n"
     51c:	00 d0       	rcall	.+0      	; 0x51e <EVENT_USB_Host_DeviceEnumerationComplete+0x9e>
     51e:	00 d0       	rcall	.+0      	; 0x520 <EVENT_USB_Host_DeviceEnumerationComplete+0xa0>
     520:	ed b7       	in	r30, 0x3d	; 61
     522:	fe b7       	in	r31, 0x3e	; 62
     524:	31 96       	adiw	r30, 0x01	; 1
     526:	8b e4       	ldi	r24, 0x4B	; 75
     528:	91 e0       	ldi	r25, 0x01	; 1
     52a:	ad b7       	in	r26, 0x3d	; 61
     52c:	be b7       	in	r27, 0x3e	; 62
     52e:	12 96       	adiw	r26, 0x02	; 2
     530:	9c 93       	st	X, r25
     532:	8e 93       	st	-X, r24
     534:	11 97       	sbiw	r26, 0x01	; 1
     536:	22 83       	std	Z+2, r18	; 0x02
     538:	13 82       	std	Z+3, r1	; 0x03
     53a:	ed d6       	rcall	.+3546   	; 0x1316 <printf_P>
     53c:	8b b1       	in	r24, 0x0b	; 11
     53e:	8f 70       	andi	r24, 0x0F	; 15
     540:	80 69       	ori	r24, 0x90	; 144
     542:	8b b9       	out	0x0b, r24	; 11
								 " -- Error Code: %d\r\n" ESC_FG_WHITE), ErrorCode);

		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		USB_Host_SetDeviceConfiguration(0);
     544:	0f 90       	pop	r0
     546:	0f 90       	pop	r0
     548:	0f 90       	pop	r0
     54a:	0f 90       	pop	r0
     54c:	80 e0       	ldi	r24, 0x00	; 0
     54e:	8e d6       	rcall	.+3356   	; 0x126c <USB_Host_SetDeviceConfiguration>
     550:	07 c0       	rjmp	.+14     	; 0x560 <EVENT_USB_Host_DeviceEnumerationComplete+0xe0>
		return;
	}

	puts_P(PSTR("Mouse Enumerated.\r\n"));
     552:	87 e3       	ldi	r24, 0x37	; 55
     554:	91 e0       	ldi	r25, 0x01	; 1
     556:	01 d7       	rcall	.+3586   	; 0x135a <puts_P>
     558:	8b b1       	in	r24, 0x0b	; 11
     55a:	8f 70       	andi	r24, 0x0F	; 15
     55c:	80 66       	ori	r24, 0x60	; 96
     55e:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
}
     560:	1f 91       	pop	r17
     562:	08 95       	ret

00000564 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     564:	84 b7       	in	r24, 0x34	; 52
     566:	87 7f       	andi	r24, 0xF7	; 247
     568:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     56a:	38 e1       	ldi	r19, 0x18	; 24
     56c:	0f b6       	in	r0, 0x3f	; 63
     56e:	f8 94       	cli
     570:	30 93 60 00 	sts	0x0060, r19
     574:	10 92 60 00 	sts	0x0060, r1
     578:	0f be       	out	0x3f, r0	; 63

	/* Disable clock division */
	clock_prescale_set(clock_div_1);
     57a:	80 e0       	ldi	r24, 0x00	; 0
     57c:	90 e0       	ldi	r25, 0x00	; 0
     57e:	20 e8       	ldi	r18, 0x80	; 128
     580:	0f b6       	in	r0, 0x3f	; 63
     582:	f8 94       	cli
     584:	20 93 61 00 	sts	0x0061, r18
     588:	80 93 61 00 	sts	0x0061, r24
     58c:	0f be       	out	0x3f, r0	; 63
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     58e:	83 e3       	ldi	r24, 0x33	; 51
     590:	90 e0       	ldi	r25, 0x00	; 0
     592:	90 93 cd 00 	sts	0x00CD, r25
     596:	80 93 cc 00 	sts	0x00CC, r24

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     59a:	86 e0       	ldi	r24, 0x06	; 6
     59c:	80 93 ca 00 	sts	0x00CA, r24
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     5a0:	10 92 c8 00 	sts	0x00C8, r1
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     5a4:	30 93 c9 00 	sts	0x00C9, r19

				DDRD  |= (1 << 3);
     5a8:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     5aa:	5a 9a       	sbi	0x0b, 2	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     5ac:	8a b1       	in	r24, 0x0a	; 10
     5ae:	80 6f       	ori	r24, 0xF0	; 240
     5b0:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     5b2:	8b b1       	in	r24, 0x0b	; 11
     5b4:	8f 70       	andi	r24, 0x0F	; 15
     5b6:	8b b9       	out	0x0b, r24	; 11

	/* Hardware Initialization */
	Serial_Init(9600, false);
	LEDs_Init();
	USB_Init();
     5b8:	72 d3       	rcall	.+1764   	; 0xc9e <USB_Init>
			static inline void Serial_CreateStream(FILE* Stream)
			{
				if (!(Stream))
				{
					Stream = &USARTSerialStream;
					stdin  = Stream;
     5ba:	e8 e2       	ldi	r30, 0x28	; 40
     5bc:	f1 e0       	ldi	r31, 0x01	; 1
     5be:	f0 93 37 01 	sts	0x0137, r31
     5c2:	e0 93 36 01 	sts	0x0136, r30
					stdout = Stream;
     5c6:	f0 93 39 01 	sts	0x0139, r31
     5ca:	e0 93 38 01 	sts	0x0138, r30
				}
			
				*Stream = (FILE)FDEV_SETUP_STREAM(Serial_putchar, Serial_getchar, _FDEV_SETUP_RW);
     5ce:	8e e0       	ldi	r24, 0x0E	; 14
     5d0:	df 01       	movw	r26, r30
     5d2:	1d 92       	st	X+, r1
     5d4:	8a 95       	dec	r24
     5d6:	e9 f7       	brne	.-6      	; 0x5d2 <SetupHardware+0x6e>
     5d8:	83 e0       	ldi	r24, 0x03	; 3
     5da:	80 93 2b 01 	sts	0x012B, r24
     5de:	8d e6       	ldi	r24, 0x6D	; 109
     5e0:	99 e0       	ldi	r25, 0x09	; 9
     5e2:	90 93 31 01 	sts	0x0131, r25
     5e6:	80 93 30 01 	sts	0x0130, r24
     5ea:	87 e7       	ldi	r24, 0x77	; 119
     5ec:	99 e0       	ldi	r25, 0x09	; 9
     5ee:	90 93 33 01 	sts	0x0133, r25
     5f2:	80 93 32 01 	sts	0x0132, r24

	/* Create a stdio stream for the serial port for stdin and stdout */
	Serial_CreateStream(NULL);
}
     5f6:	08 95       	ret

000005f8 <main>:
/** Main program entry point. This routine configures the hardware required by the application, then
 *  enters a loop to run the application tasks in sequence.
 */
int main(void)
{
	SetupHardware();
     5f8:	b5 df       	rcall	.-150    	; 0x564 <SetupHardware>

	puts_P(PSTR(ESC_FG_CYAN "Mouse HID Host Demo running.\r\n" ESC_FG_WHITE));
     5fa:	8a e7       	ldi	r24, 0x7A	; 122
     5fc:	92 e0       	ldi	r25, 0x02	; 2
     5fe:	ad d6       	rcall	.+3418   	; 0x135a <puts_P>
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     600:	8b b1       	in	r24, 0x0b	; 11
     602:	8f 70       	andi	r24, 0x0F	; 15
     604:	80 61       	ori	r24, 0x10	; 16
     606:	8b b9       	out	0x0b, r24	; 11

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
	sei();
     608:	78 94       	sei

	for (;;)
	{
		MouseHost_Task();
     60a:	6b de       	rcall	.-810    	; 0x2e2 <MouseHost_Task>

		USB_USBTask();
     60c:	54 d6       	rcall	.+3240   	; 0x12b6 <USB_USBTask>
     60e:	fd cf       	rjmp	.-6      	; 0x60a <main+0x12>

00000610 <DComp_NextMouseInterface>:
 *  This comparator searches for the next Interface descriptor of the correct Mouse HID Class and Protocol values.
 *
 *  \return A value from the DSEARCH_Return_ErrorCodes_t enum
 */
uint8_t DComp_NextMouseInterface(void* CurrentDescriptor)
{
     610:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	/* Determine if the current descriptor is an interface descriptor */
	if (Header->Type == DTYPE_Interface)
     612:	81 81       	ldd	r24, Z+1	; 0x01
     614:	84 30       	cpi	r24, 0x04	; 4
     616:	41 f4       	brne	.+16     	; 0x628 <DComp_NextMouseInterface+0x18>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		/* Check the HID descriptor class and protocol, break out if correct class/protocol interface found */
		if ((Interface->Class    == HID_CSCP_HIDClass) &&
     618:	85 81       	ldd	r24, Z+5	; 0x05
     61a:	83 30       	cpi	r24, 0x03	; 3
     61c:	29 f4       	brne	.+10     	; 0x628 <DComp_NextMouseInterface+0x18>
     61e:	87 81       	ldd	r24, Z+7	; 0x07
     620:	82 30       	cpi	r24, 0x02	; 2
     622:	11 f4       	brne	.+4      	; 0x628 <DComp_NextMouseInterface+0x18>
     624:	80 e0       	ldi	r24, 0x00	; 0
     626:	08 95       	ret
     628:	82 e0       	ldi	r24, 0x02	; 2
		}
	}

	/* Current descriptor does not match what this comparator is looking for */
	return DESCRIPTOR_SEARCH_NotFound;
}
     62a:	08 95       	ret

0000062c <DComp_NextMouseInterfaceDataEndpoint>:
uint8_t DComp_NextMouseInterfaceDataEndpoint(void* CurrentDescriptor)
{
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	/* Determine the type of the current descriptor */
	if (Header->Type == DTYPE_Endpoint)
     62c:	fc 01       	movw	r30, r24
     62e:	81 81       	ldd	r24, Z+1	; 0x01
     630:	85 30       	cpi	r24, 0x05	; 5
     632:	11 f4       	brne	.+4      	; 0x638 <DComp_NextMouseInterfaceDataEndpoint+0xc>
     634:	80 e0       	ldi	r24, 0x00	; 0
     636:	08 95       	ret
	  return DESCRIPTOR_SEARCH_Found;
	else if (Header->Type == DTYPE_Interface)
     638:	84 30       	cpi	r24, 0x04	; 4
     63a:	11 f0       	breq	.+4      	; 0x640 <DComp_NextMouseInterfaceDataEndpoint+0x14>
     63c:	82 e0       	ldi	r24, 0x02	; 2
     63e:	08 95       	ret
     640:	81 e0       	ldi	r24, 0x01	; 1
	  return DESCRIPTOR_SEARCH_Fail;
	else
	  return DESCRIPTOR_SEARCH_NotFound;
}
     642:	08 95       	ret

00000644 <ProcessConfigurationDescriptor>:
 *  This routine searches for a HID interface descriptor containing at least one Interrupt type IN endpoint.
 *
 *  \return An error code from the \ref MouseHost_GetConfigDescriptorDataCodes_t enum.
 */
uint8_t ProcessConfigurationDescriptor(void)
{
     644:	af 92       	push	r10
     646:	bf 92       	push	r11
     648:	cf 92       	push	r12
     64a:	df 92       	push	r13
     64c:	ef 92       	push	r14
     64e:	ff 92       	push	r15
     650:	0f 93       	push	r16
     652:	1f 93       	push	r17
     654:	df 93       	push	r29
     656:	cf 93       	push	r28
     658:	cd b7       	in	r28, 0x3d	; 61
     65a:	de b7       	in	r29, 0x3e	; 62
     65c:	c4 50       	subi	r28, 0x04	; 4
     65e:	d2 40       	sbci	r29, 0x02	; 2
     660:	0f b6       	in	r0, 0x3f	; 63
     662:	f8 94       	cli
     664:	de bf       	out	0x3e, r29	; 62
     666:	0f be       	out	0x3f, r0	; 63
     668:	cd bf       	out	0x3d, r28	; 61
	uint8_t  ConfigDescriptorData[512];
	void*    CurrConfigLocation = ConfigDescriptorData;
     66a:	ae 01       	movw	r20, r28
     66c:	4b 5f       	subi	r20, 0xFB	; 251
     66e:	5f 4f       	sbci	r21, 0xFF	; 255
     670:	5a 83       	std	Y+2, r21	; 0x02
     672:	49 83       	std	Y+1, r20	; 0x01

	USB_Descriptor_Interface_t* HIDInterface   = NULL;
	USB_Descriptor_Endpoint_t*  DataINEndpoint = NULL;

	/* Retrieve the entire configuration descriptor into the allocated buffer */
	switch (USB_Host_GetDeviceConfigDescriptor(1, &CurrConfigBytesRem, ConfigDescriptorData, sizeof(ConfigDescriptorData)))
     674:	83 e0       	ldi	r24, 0x03	; 3
     676:	c8 2e       	mov	r12, r24
     678:	d1 2c       	mov	r13, r1
     67a:	cc 0e       	add	r12, r28
     67c:	dd 1e       	adc	r13, r29
     67e:	81 e0       	ldi	r24, 0x01	; 1
     680:	b6 01       	movw	r22, r12
     682:	20 e0       	ldi	r18, 0x00	; 0
     684:	32 e0       	ldi	r19, 0x02	; 2
     686:	67 d4       	rcall	.+2254   	; 0xf56 <USB_Host_GetDeviceConfigDescriptor>
     688:	85 30       	cpi	r24, 0x05	; 5
     68a:	29 f0       	breq	.+10     	; 0x696 <ProcessConfigurationDescriptor+0x52>
     68c:	86 30       	cpi	r24, 0x06	; 6
     68e:	69 f0       	breq	.+26     	; 0x6aa <ProcessConfigurationDescriptor+0x66>
     690:	88 23       	and	r24, r24
     692:	19 f0       	breq	.+6      	; 0x69a <ProcessConfigurationDescriptor+0x56>
     694:	0c c0       	rjmp	.+24     	; 0x6ae <ProcessConfigurationDescriptor+0x6a>
     696:	82 e0       	ldi	r24, 0x02	; 2
     698:	37 c0       	rjmp	.+110    	; 0x708 <ProcessConfigurationDescriptor+0xc4>
     69a:	00 e0       	ldi	r16, 0x00	; 0
     69c:	10 e0       	ldi	r17, 0x00	; 0
	}

	while (!(DataINEndpoint))
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(HIDInterface) ||
     69e:	56 01       	movw	r10, r12
     6a0:	7e 01       	movw	r14, r28
     6a2:	08 94       	sec
     6a4:	e1 1c       	adc	r14, r1
     6a6:	f1 1c       	adc	r15, r1
     6a8:	04 c0       	rjmp	.+8      	; 0x6b2 <ProcessConfigurationDescriptor+0x6e>

	USB_Descriptor_Interface_t* HIDInterface   = NULL;
	USB_Descriptor_Endpoint_t*  DataINEndpoint = NULL;

	/* Retrieve the entire configuration descriptor into the allocated buffer */
	switch (USB_Host_GetDeviceConfigDescriptor(1, &CurrConfigBytesRem, ConfigDescriptorData, sizeof(ConfigDescriptorData)))
     6aa:	83 e0       	ldi	r24, 0x03	; 3
     6ac:	2d c0       	rjmp	.+90     	; 0x708 <ProcessConfigurationDescriptor+0xc4>
     6ae:	81 e0       	ldi	r24, 0x01	; 1
     6b0:	2b c0       	rjmp	.+86     	; 0x708 <ProcessConfigurationDescriptor+0xc4>
	}

	while (!(DataINEndpoint))
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(HIDInterface) ||
     6b2:	01 15       	cp	r16, r1
     6b4:	11 05       	cpc	r17, r1
     6b6:	39 f0       	breq	.+14     	; 0x6c6 <ProcessConfigurationDescriptor+0x82>
     6b8:	c5 01       	movw	r24, r10
     6ba:	b7 01       	movw	r22, r14
     6bc:	46 e1       	ldi	r20, 0x16	; 22
     6be:	53 e0       	ldi	r21, 0x03	; 3
     6c0:	06 d4       	rcall	.+2060   	; 0xece <USB_GetNextDescriptorComp>
     6c2:	88 23       	and	r24, r24
     6c4:	61 f0       	breq	.+24     	; 0x6de <ProcessConfigurationDescriptor+0x9a>
		    USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
		                              DComp_NextMouseInterfaceDataEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			/* Get the next HID interface from the configuration descriptor */
			if (USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     6c6:	c5 01       	movw	r24, r10
     6c8:	b7 01       	movw	r22, r14
     6ca:	48 e0       	ldi	r20, 0x08	; 8
     6cc:	53 e0       	ldi	r21, 0x03	; 3
     6ce:	ff d3       	rcall	.+2046   	; 0xece <USB_GetNextDescriptorComp>
     6d0:	88 23       	and	r24, r24
     6d2:	11 f0       	breq	.+4      	; 0x6d8 <ProcessConfigurationDescriptor+0x94>
     6d4:	84 e0       	ldi	r24, 0x04	; 4
     6d6:	18 c0       	rjmp	.+48     	; 0x708 <ProcessConfigurationDescriptor+0xc4>
				/* Descriptor not found, error out */
				return NoCompatibleInterfaceFound;
			}

			/* Save the interface in case we need to refer back to it later */
			HIDInterface = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Interface_t);
     6d8:	09 81       	ldd	r16, Y+1	; 0x01
     6da:	1a 81       	ldd	r17, Y+2	; 0x02
     6dc:	ea cf       	rjmp	.-44     	; 0x6b2 <ProcessConfigurationDescriptor+0x6e>
			/* Skip the remainder of the loop as we have not found an endpoint yet */
			continue;
		}

		/* Retrieve the endpoint address from the endpoint descriptor */
		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Endpoint_t);
     6de:	c9 80       	ldd	r12, Y+1	; 0x01
     6e0:	da 80       	ldd	r13, Y+2	; 0x02

		/* If the endpoint is a IN type endpoint */
		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
     6e2:	f6 01       	movw	r30, r12
     6e4:	22 81       	ldd	r18, Z+2	; 0x02
     6e6:	27 ff       	sbrs	r18, 7
     6e8:	e4 cf       	rjmp	.-56     	; 0x6b2 <ProcessConfigurationDescriptor+0x6e>
			return DescriptorTooLarge;
		default:
			return ControlError;
	}

	while (!(DataINEndpoint))
     6ea:	c1 14       	cp	r12, r1
     6ec:	d1 04       	cpc	r13, r1
     6ee:	09 f3       	breq	.-62     	; 0x6b2 <ProcessConfigurationDescriptor+0x6e>
		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
		  DataINEndpoint = EndpointData;
	}

	/* Configure the HID data IN pipe */
	Pipe_ConfigurePipe(MOUSE_DATA_IN_PIPE, EP_TYPE_INTERRUPT, PIPE_TOKEN_IN,
     6f0:	04 81       	ldd	r16, Z+4	; 0x04
     6f2:	15 81       	ldd	r17, Z+5	; 0x05
     6f4:	81 e0       	ldi	r24, 0x01	; 1
     6f6:	63 e0       	ldi	r22, 0x03	; 3
     6f8:	40 e1       	ldi	r20, 0x10	; 16
     6fa:	ee 24       	eor	r14, r14
     6fc:	df d1       	rcall	.+958    	; 0xabc <Pipe_ConfigurePipe>
	                   DataINEndpoint->EndpointAddress, DataINEndpoint->EndpointSize, PIPE_BANK_SINGLE);
	Pipe_SetInterruptPeriod(DataINEndpoint->PollingIntervalMS);
     6fe:	f6 01       	movw	r30, r12
     700:	86 81       	ldd	r24, Z+6	; 0x06
			 *  \param[in] Milliseconds  Number of milliseconds between each pipe poll.
			 */
			static inline void Pipe_SetInterruptPeriod(const uint8_t Milliseconds) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInterruptPeriod(const uint8_t Milliseconds)
			{
				UPCFG2X = Milliseconds;
     702:	80 93 ad 00 	sts	0x00AD, r24
     706:	80 e0       	ldi	r24, 0x00	; 0

	/* Valid data found, return success */
	return SuccessfulConfigRead;
}
     708:	cc 5f       	subi	r28, 0xFC	; 252
     70a:	dd 4f       	sbci	r29, 0xFD	; 253
     70c:	0f b6       	in	r0, 0x3f	; 63
     70e:	f8 94       	cli
     710:	de bf       	out	0x3e, r29	; 62
     712:	0f be       	out	0x3f, r0	; 63
     714:	cd bf       	out	0x3d, r28	; 61
     716:	cf 91       	pop	r28
     718:	df 91       	pop	r29
     71a:	1f 91       	pop	r17
     71c:	0f 91       	pop	r16
     71e:	ff 90       	pop	r15
     720:	ef 90       	pop	r14
     722:	df 90       	pop	r13
     724:	cf 90       	pop	r12
     726:	bf 90       	pop	r11
     728:	af 90       	pop	r10
     72a:	08 95       	ret

0000072c <USB_Host_WaitMS>:
		USB_ResetInterface();
	}
}

uint8_t USB_Host_WaitMS(uint8_t MS)
{
     72c:	98 2f       	mov	r25, r24
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     72e:	20 91 9e 00 	lds	r18, 0x009E
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     732:	30 91 a0 00 	lds	r19, 0x00A0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     736:	80 91 a0 00 	lds	r24, 0x00A0
     73a:	8f 7d       	andi	r24, 0xDF	; 223
     73c:	80 93 a0 00 	sts	0x00A0, r24
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     740:	80 91 9f 00 	lds	r24, 0x009F
     744:	8f 7d       	andi	r24, 0xDF	; 223
     746:	80 93 9f 00 	sts	0x009F, r24
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     74a:	80 91 9e 00 	lds	r24, 0x009E
     74e:	81 60       	ori	r24, 0x01	; 1
     750:	80 93 9e 00 	sts	0x009E, r24
     754:	28 c0       	rjmp	.+80     	; 0x7a6 <USB_Host_WaitMS+0x7a>
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     756:	80 91 9f 00 	lds	r24, 0x009F

	USB_Host_ResumeBus();

	while (MS)
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     75a:	85 ff       	sbrs	r24, 5
     75c:	06 c0       	rjmp	.+12     	; 0x76a <USB_Host_WaitMS+0x3e>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     75e:	80 91 9f 00 	lds	r24, 0x009F
     762:	8f 7d       	andi	r24, 0xDF	; 223
     764:	80 93 9f 00 	sts	0x009F, r24
		{
			USB_INT_Clear(USB_INT_HSOFI);
			MS--;
     768:	91 50       	subi	r25, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
     76a:	80 91 27 01 	lds	r24, 0x0127
     76e:	81 30       	cpi	r24, 0x01	; 1
     770:	11 f4       	brne	.+4      	; 0x776 <USB_Host_WaitMS+0x4a>
     772:	91 e0       	ldi	r25, 0x01	; 1
     774:	1a c0       	rjmp	.+52     	; 0x7aa <USB_Host_WaitMS+0x7e>
			 *  \return Boolean \c true if an error has occurred on the selected pipe, \c false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
     776:	80 91 a6 00 	lds	r24, 0x00A6
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError() == true)
     77a:	84 ff       	sbrs	r24, 4
     77c:	09 c0       	rjmp	.+18     	; 0x790 <USB_Host_WaitMS+0x64>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     77e:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
     782:	80 91 a6 00 	lds	r24, 0x00A6
     786:	8f 7e       	andi	r24, 0xEF	; 239
     788:	80 93 a6 00 	sts	0x00A6, r24
     78c:	92 e0       	ldi	r25, 0x02	; 2
     78e:	0d c0       	rjmp	.+26     	; 0x7aa <USB_Host_WaitMS+0x7e>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     790:	80 91 a6 00 	lds	r24, 0x00A6
			ErrorCode = HOST_WAITERROR_PipeError;

			break;
		}

		if (Pipe_IsStalled() == true)
     794:	81 ff       	sbrs	r24, 1
     796:	07 c0       	rjmp	.+14     	; 0x7a6 <USB_Host_WaitMS+0x7a>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
     798:	80 91 a6 00 	lds	r24, 0x00A6
     79c:	8d 7f       	andi	r24, 0xFD	; 253
     79e:	80 93 a6 00 	sts	0x00A6, r24
     7a2:	93 e0       	ldi	r25, 0x03	; 3
     7a4:	02 c0       	rjmp	.+4      	; 0x7aa <USB_Host_WaitMS+0x7e>
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     7a6:	99 23       	and	r25, r25
     7a8:	b1 f6       	brne	.-84     	; 0x756 <USB_Host_WaitMS+0x2a>

			break;
		}
	}

	if (BusSuspended)
     7aa:	20 fd       	sbrc	r18, 0
     7ac:	05 c0       	rjmp	.+10     	; 0x7b8 <USB_Host_WaitMS+0x8c>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     7ae:	80 91 9e 00 	lds	r24, 0x009E
     7b2:	8e 7f       	andi	r24, 0xFE	; 254
     7b4:	80 93 9e 00 	sts	0x009E, r24
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
     7b8:	35 ff       	sbrs	r19, 5
     7ba:	05 c0       	rjmp	.+10     	; 0x7c6 <USB_Host_WaitMS+0x9a>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     7bc:	80 91 a0 00 	lds	r24, 0x00A0
     7c0:	80 62       	ori	r24, 0x20	; 32
     7c2:	80 93 a0 00 	sts	0x00A0, r24
	  USB_INT_Enable(USB_INT_HSOFI);

	return ErrorCode;
}
     7c6:	89 2f       	mov	r24, r25
     7c8:	08 95       	ret

000007ca <USB_Host_ResetDevice>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     7ca:	60 91 9e 00 	lds	r22, 0x009E
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     7ce:	80 91 a0 00 	lds	r24, 0x00A0
     7d2:	8d 7f       	andi	r24, 0xFD	; 253
     7d4:	80 93 a0 00 	sts	0x00A0, r24
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
     7d8:	80 91 9e 00 	lds	r24, 0x009E
     7dc:	82 60       	ori	r24, 0x02	; 2
     7de:	80 93 9e 00 	sts	0x009E, r24
			 *  \return Boolean \c true if no bus reset is currently being sent, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
     7e2:	80 91 9e 00 	lds	r24, 0x009E
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
     7e6:	81 fd       	sbrc	r24, 1
     7e8:	fc cf       	rjmp	.-8      	; 0x7e2 <USB_Host_ResetDevice+0x18>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     7ea:	80 91 9e 00 	lds	r24, 0x009E
     7ee:	81 60       	ori	r24, 0x01	; 1
     7f0:	80 93 9e 00 	sts	0x009E, r24
	USB_Host_ResumeBus();
	
	USB_Host_ConfigurationNumber = 0;
     7f4:	10 92 1d 01 	sts	0x011D, r1
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     7f8:	30 91 a0 00 	lds	r19, 0x00A0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     7fc:	80 91 a0 00 	lds	r24, 0x00A0
     800:	8f 7d       	andi	r24, 0xDF	; 223
     802:	80 93 a0 00 	sts	0x00A0, r24
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     806:	80 91 9f 00 	lds	r24, 0x009F
     80a:	8f 7d       	andi	r24, 0xDF	; 223
     80c:	80 93 9f 00 	sts	0x009F, r24
     810:	2a e0       	ldi	r18, 0x0A	; 10
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     812:	40 ed       	ldi	r20, 0xD0	; 208
     814:	57 e0       	ldi	r21, 0x07	; 7
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     816:	80 91 9f 00 	lds	r24, 0x009F
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     81a:	85 ff       	sbrs	r24, 5
     81c:	0b c0       	rjmp	.+22     	; 0x834 <USB_Host_ResetDevice+0x6a>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     81e:	80 91 9f 00 	lds	r24, 0x009F
     822:	8f 7d       	andi	r24, 0xDF	; 223
     824:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     828:	80 91 9f 00 	lds	r24, 0x009F
     82c:	8d 7f       	andi	r24, 0xFD	; 253
     82e:	80 93 9f 00 	sts	0x009F, r24
     832:	05 c0       	rjmp	.+10     	; 0x83e <USB_Host_ResetDevice+0x74>
     834:	ca 01       	movw	r24, r20
     836:	01 97       	sbiw	r24, 0x01	; 1
     838:	f1 f7       	brne	.-4      	; 0x836 <USB_Host_ResetDevice+0x6c>
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
     83a:	21 50       	subi	r18, 0x01	; 1
     83c:	61 f7       	brne	.-40     	; 0x816 <USB_Host_ResetDevice+0x4c>
		}

		Delay_MS(1);
	}

	if (HSOFIEnabled)
     83e:	35 ff       	sbrs	r19, 5
     840:	05 c0       	rjmp	.+10     	; 0x84c <USB_Host_ResetDevice+0x82>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     842:	80 91 a0 00 	lds	r24, 0x00A0
     846:	80 62       	ori	r24, 0x20	; 32
     848:	80 93 a0 00 	sts	0x00A0, r24
	  USB_INT_Enable(USB_INT_HSOFI);

	if (BusSuspended)
     84c:	60 fd       	sbrc	r22, 0
     84e:	05 c0       	rjmp	.+10     	; 0x85a <USB_Host_ResetDevice+0x90>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     850:	80 91 9e 00 	lds	r24, 0x009E
     854:	8e 7f       	andi	r24, 0xFE	; 254
     856:	80 93 9e 00 	sts	0x009E, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     85a:	80 91 a0 00 	lds	r24, 0x00A0
     85e:	82 60       	ori	r24, 0x02	; 2
     860:	80 93 a0 00 	sts	0x00A0, r24
	  USB_Host_SuspendBus();

	USB_INT_Enable(USB_INT_DDISCI);
}
     864:	08 95       	ret

00000866 <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "../Host.h"

void USB_Host_ProcessNextHostState(void)
{
     866:	ef 92       	push	r14
     868:	0f 93       	push	r16
     86a:	1f 93       	push	r17
     86c:	df 93       	push	r29
     86e:	cf 93       	push	r28
     870:	cd b7       	in	r28, 0x3d	; 61
     872:	de b7       	in	r29, 0x3e	; 62
     874:	28 97       	sbiw	r28, 0x08	; 8
     876:	0f b6       	in	r0, 0x3f	; 63
     878:	f8 94       	cli
     87a:	de bf       	out	0x3e, r29	; 62
     87c:	0f be       	out	0x3f, r0	; 63
     87e:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
     880:	80 91 27 01 	lds	r24, 0x0127
     884:	85 30       	cpi	r24, 0x05	; 5
     886:	09 f4       	brne	.+2      	; 0x88a <USB_Host_ProcessNextHostState+0x24>
     888:	94 c0       	rjmp	.+296    	; 0x9b2 <USB_Host_ProcessNextHostState+0x14c>
     88a:	86 30       	cpi	r24, 0x06	; 6
     88c:	68 f4       	brcc	.+26     	; 0x8a8 <USB_Host_ProcessNextHostState+0x42>
     88e:	82 30       	cpi	r24, 0x02	; 2
     890:	b9 f1       	breq	.+110    	; 0x900 <USB_Host_ProcessNextHostState+0x9a>
     892:	83 30       	cpi	r24, 0x03	; 3
     894:	18 f4       	brcc	.+6      	; 0x89c <USB_Host_ProcessNextHostState+0x36>
     896:	88 23       	and	r24, r24
     898:	a1 f0       	breq	.+40     	; 0x8c2 <USB_Host_ProcessNextHostState+0x5c>
     89a:	04 c1       	rjmp	.+520    	; 0xaa4 <USB_Host_ProcessNextHostState+0x23e>
     89c:	83 30       	cpi	r24, 0x03	; 3
     89e:	d1 f1       	breq	.+116    	; 0x914 <USB_Host_ProcessNextHostState+0xae>
     8a0:	84 30       	cpi	r24, 0x04	; 4
     8a2:	09 f0       	breq	.+2      	; 0x8a6 <USB_Host_ProcessNextHostState+0x40>
     8a4:	ff c0       	rjmp	.+510    	; 0xaa4 <USB_Host_ProcessNextHostState+0x23e>
     8a6:	5d c0       	rjmp	.+186    	; 0x962 <USB_Host_ProcessNextHostState+0xfc>
     8a8:	87 30       	cpi	r24, 0x07	; 7
     8aa:	09 f4       	brne	.+2      	; 0x8ae <USB_Host_ProcessNextHostState+0x48>
     8ac:	9b c0       	rjmp	.+310    	; 0x9e4 <USB_Host_ProcessNextHostState+0x17e>
     8ae:	87 30       	cpi	r24, 0x07	; 7
     8b0:	08 f4       	brcc	.+2      	; 0x8b4 <USB_Host_ProcessNextHostState+0x4e>
     8b2:	8a c0       	rjmp	.+276    	; 0x9c8 <USB_Host_ProcessNextHostState+0x162>
     8b4:	88 30       	cpi	r24, 0x08	; 8
     8b6:	09 f4       	brne	.+2      	; 0x8ba <USB_Host_ProcessNextHostState+0x54>
     8b8:	b3 c0       	rjmp	.+358    	; 0xa20 <USB_Host_ProcessNextHostState+0x1ba>
     8ba:	89 30       	cpi	r24, 0x09	; 9
     8bc:	09 f0       	breq	.+2      	; 0x8c0 <USB_Host_ProcessNextHostState+0x5a>
     8be:	f2 c0       	rjmp	.+484    	; 0xaa4 <USB_Host_ProcessNextHostState+0x23e>
     8c0:	d7 c0       	rjmp	.+430    	; 0xa70 <USB_Host_ProcessNextHostState+0x20a>
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
     8c2:	00 91 1b 01 	lds	r16, 0x011B
     8c6:	10 91 1c 01 	lds	r17, 0x011C
     8ca:	01 15       	cp	r16, r1
     8cc:	11 05       	cpc	r17, r1
     8ce:	09 f4       	brne	.+2      	; 0x8d2 <USB_Host_ProcessNextHostState+0x6c>
     8d0:	e9 c0       	rjmp	.+466    	; 0xaa4 <USB_Host_ProcessNextHostState+0x23e>
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     8d2:	81 e0       	ldi	r24, 0x01	; 1
     8d4:	2b df       	rcall	.-426    	; 0x72c <USB_Host_WaitMS>
     8d6:	68 2f       	mov	r22, r24
     8d8:	88 23       	and	r24, r24
     8da:	31 f0       	breq	.+12     	; 0x8e8 <USB_Host_ProcessNextHostState+0x82>
				{
					USB_HostState = PostWaitState;
     8dc:	80 91 1a 01 	lds	r24, 0x011A
     8e0:	80 93 27 01 	sts	0x0127, r24
     8e4:	91 e0       	ldi	r25, 0x01	; 1
     8e6:	da c0       	rjmp	.+436    	; 0xa9c <USB_Host_ProcessNextHostState+0x236>
					ErrorCode     = HOST_ENUMERROR_WaitStage;
					break;
				}

				if (!(--WaitMSRemaining))
     8e8:	c8 01       	movw	r24, r16
     8ea:	01 97       	sbiw	r24, 0x01	; 1
     8ec:	90 93 1c 01 	sts	0x011C, r25
     8f0:	80 93 1b 01 	sts	0x011B, r24
     8f4:	89 2b       	or	r24, r25
     8f6:	09 f0       	breq	.+2      	; 0x8fa <USB_Host_ProcessNextHostState+0x94>
     8f8:	d5 c0       	rjmp	.+426    	; 0xaa4 <USB_Host_ProcessNextHostState+0x23e>
				  USB_HostState = PostWaitState;
     8fa:	80 91 1a 01 	lds	r24, 0x011A
     8fe:	07 c0       	rjmp	.+14     	; 0x90e <USB_Host_ProcessNextHostState+0xa8>
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
     900:	88 ee       	ldi	r24, 0xE8	; 232
     902:	93 e0       	ldi	r25, 0x03	; 3
     904:	90 93 1c 01 	sts	0x011C, r25
     908:	80 93 1b 01 	sts	0x011B, r24

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
     90c:	83 e0       	ldi	r24, 0x03	; 3
     90e:	80 93 27 01 	sts	0x0127, r24
     912:	c8 c0       	rjmp	.+400    	; 0xaa4 <USB_Host_ProcessNextHostState+0x23e>
			break;
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
     914:	80 91 1b 01 	lds	r24, 0x011B
     918:	90 91 1c 01 	lds	r25, 0x011C
     91c:	01 97       	sbiw	r24, 0x01	; 1
     91e:	90 93 1c 01 	sts	0x011C, r25
     922:	80 93 1b 01 	sts	0x011B, r24
     926:	01 96       	adiw	r24, 0x01	; 1
     928:	29 f0       	breq	.+10     	; 0x934 <USB_Host_ProcessNextHostState+0xce>
     92a:	80 ed       	ldi	r24, 0xD0	; 208
     92c:	97 e0       	ldi	r25, 0x07	; 7
     92e:	01 97       	sbiw	r24, 0x01	; 1
     930:	f1 f7       	brne	.-4      	; 0x92e <USB_Host_ProcessNextHostState+0xc8>
     932:	b8 c0       	rjmp	.+368    	; 0xaa4 <USB_Host_ProcessNextHostState+0x23e>
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
     934:	77 98       	cbi	0x0e, 7	; 14

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     936:	80 91 d8 00 	lds	r24, 0x00D8
     93a:	80 61       	ori	r24, 0x10	; 16
     93c:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
     940:	80 91 dd 00 	lds	r24, 0x00DD
     944:	8b 7f       	andi	r24, 0xFB	; 251
     946:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON |=  (1 << UVCONE);
     94a:	80 91 d7 00 	lds	r24, 0x00D7
     94e:	80 61       	ori	r24, 0x10	; 16
     950:	80 93 d7 00 	sts	0x00D7, r24
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
     954:	80 91 dd 00 	lds	r24, 0x00DD
     958:	82 60       	ori	r24, 0x02	; 2
     95a:	80 93 dd 00 	sts	0x00DD, r24

				USB_OTGPAD_On();
				USB_Host_VBUS_Auto_Enable();
				USB_Host_VBUS_Auto_On();

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
     95e:	84 e0       	ldi	r24, 0x04	; 4
     960:	d6 cf       	rjmp	.-84     	; 0x90e <USB_Host_ProcessNextHostState+0xa8>
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
     962:	80 91 9f 00 	lds	r24, 0x009F
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
     966:	80 ff       	sbrs	r24, 0
     968:	9d c0       	rjmp	.+314    	; 0xaa4 <USB_Host_ProcessNextHostState+0x23e>
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     96a:	80 91 9f 00 	lds	r24, 0x009F
     96e:	8e 7f       	andi	r24, 0xFE	; 254
     970:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     974:	80 91 9f 00 	lds	r24, 0x009F
     978:	8d 7f       	andi	r24, 0xFD	; 253
     97a:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     97e:	80 91 df 00 	lds	r24, 0x00DF
     982:	8d 7f       	andi	r24, 0xFD	; 253
     984:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
     988:	80 91 de 00 	lds	r24, 0x00DE
     98c:	82 60       	ori	r24, 0x02	; 2
     98e:	80 93 de 00 	sts	0x00DE, r24
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     992:	80 91 9e 00 	lds	r24, 0x009E
     996:	81 60       	ori	r24, 0x01	; 1
     998:	80 93 9e 00 	sts	0x009E, r24

				USB_INT_Clear(USB_INT_VBERRI);
				USB_INT_Enable(USB_INT_VBERRI);

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
     99c:	ed d0       	rcall	.+474    	; 0xb78 <Pipe_ClearPipes>

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
     99e:	10 92 27 01 	sts	0x0127, r1
     9a2:	84 e6       	ldi	r24, 0x64	; 100
     9a4:	90 e0       	ldi	r25, 0x00	; 0
     9a6:	90 93 1c 01 	sts	0x011C, r25
     9aa:	80 93 1b 01 	sts	0x011B, r24
     9ae:	85 e0       	ldi	r24, 0x05	; 5
     9b0:	5c c0       	rjmp	.+184    	; 0xa6a <USB_Host_ProcessNextHostState+0x204>
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
     9b2:	0b df       	rcall	.-490    	; 0x7ca <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
     9b4:	10 92 27 01 	sts	0x0127, r1
     9b8:	88 ec       	ldi	r24, 0xC8	; 200
     9ba:	90 e0       	ldi	r25, 0x00	; 0
     9bc:	90 93 1c 01 	sts	0x011C, r25
     9c0:	80 93 1b 01 	sts	0x011B, r24
     9c4:	86 e0       	ldi	r24, 0x06	; 6
     9c6:	51 c0       	rjmp	.+162    	; 0xa6a <USB_Host_ProcessNextHostState+0x204>
			break;
		case HOST_STATE_Powered_ConfigPipe:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
     9c8:	80 e0       	ldi	r24, 0x00	; 0
     9ca:	60 e0       	ldi	r22, 0x00	; 0
     9cc:	40 e0       	ldi	r20, 0x00	; 0
     9ce:	20 e0       	ldi	r18, 0x00	; 0
     9d0:	00 e4       	ldi	r16, 0x40	; 64
     9d2:	10 e0       	ldi	r17, 0x00	; 0
     9d4:	ee 24       	eor	r14, r14
     9d6:	72 d0       	rcall	.+228    	; 0xabc <Pipe_ConfigurePipe>
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     9d8:	80 91 ac 00 	lds	r24, 0x00AC
							   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
							   PIPE_CONTROLPIPE_DEFAULT_SIZE, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
     9dc:	87 ff       	sbrs	r24, 7
     9de:	5c c0       	rjmp	.+184    	; 0xa98 <USB_Host_ProcessNextHostState+0x232>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
     9e0:	87 e0       	ldi	r24, 0x07	; 7
     9e2:	95 cf       	rjmp	.-214    	; 0x90e <USB_Host_ProcessNextHostState+0xa8>
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
     9e4:	af e1       	ldi	r26, 0x1F	; 31
     9e6:	b1 e0       	ldi	r27, 0x01	; 1
     9e8:	e0 e1       	ldi	r30, 0x10	; 16
     9ea:	f1 e0       	ldi	r31, 0x01	; 1
     9ec:	88 e0       	ldi	r24, 0x08	; 8
     9ee:	01 90       	ld	r0, Z+
     9f0:	0d 92       	st	X+, r0
     9f2:	81 50       	subi	r24, 0x01	; 1
     9f4:	e1 f7       	brne	.-8      	; 0x9ee <USB_Host_ProcessNextHostState+0x188>
					.wLength       = 8,
				};

			uint8_t DataBuffer[8];

			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
     9f6:	ce 01       	movw	r24, r28
     9f8:	01 96       	adiw	r24, 0x01	; 1
     9fa:	31 d3       	rcall	.+1634   	; 0x105e <USB_Host_SendControlRequest>
     9fc:	68 2f       	mov	r22, r24
     9fe:	88 23       	and	r24, r24
     a00:	09 f0       	breq	.+2      	; 0xa04 <USB_Host_ProcessNextHostState+0x19e>
     a02:	48 c0       	rjmp	.+144    	; 0xa94 <USB_Host_ProcessNextHostState+0x22e>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_Host_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
     a04:	88 85       	ldd	r24, Y+8	; 0x08
     a06:	80 93 18 01 	sts	0x0118, r24

			USB_Host_ResetDevice();
     a0a:	df de       	rcall	.-578    	; 0x7ca <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
     a0c:	10 92 27 01 	sts	0x0127, r1
     a10:	88 ec       	ldi	r24, 0xC8	; 200
     a12:	90 e0       	ldi	r25, 0x00	; 0
     a14:	90 93 1c 01 	sts	0x011C, r25
     a18:	80 93 1b 01 	sts	0x011B, r24
     a1c:	88 e0       	ldi	r24, 0x08	; 8
     a1e:	25 c0       	rjmp	.+74     	; 0xa6a <USB_Host_ProcessNextHostState+0x204>
			break;
		case HOST_STATE_Default_PostReset:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
     a20:	00 91 18 01 	lds	r16, 0x0118
     a24:	80 e0       	ldi	r24, 0x00	; 0
     a26:	60 e0       	ldi	r22, 0x00	; 0
     a28:	40 e0       	ldi	r20, 0x00	; 0
     a2a:	20 e0       	ldi	r18, 0x00	; 0
     a2c:	10 e0       	ldi	r17, 0x00	; 0
     a2e:	ee 24       	eor	r14, r14
     a30:	45 d0       	rcall	.+138    	; 0xabc <Pipe_ConfigurePipe>
     a32:	80 91 ac 00 	lds	r24, 0x00AC
			                   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
			                   USB_Host_ControlPipeSize, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
     a36:	87 ff       	sbrs	r24, 7
     a38:	2f c0       	rjmp	.+94     	; 0xa98 <USB_Host_ProcessNextHostState+0x232>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
     a3a:	af e1       	ldi	r26, 0x1F	; 31
     a3c:	b1 e0       	ldi	r27, 0x01	; 1
     a3e:	e8 e0       	ldi	r30, 0x08	; 8
     a40:	f1 e0       	ldi	r31, 0x01	; 1
     a42:	88 e0       	ldi	r24, 0x08	; 8
     a44:	01 90       	ld	r0, Z+
     a46:	0d 92       	st	X+, r0
     a48:	81 50       	subi	r24, 0x01	; 1
     a4a:	e1 f7       	brne	.-8      	; 0xa44 <USB_Host_ProcessNextHostState+0x1de>
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
     a4c:	80 e0       	ldi	r24, 0x00	; 0
     a4e:	90 e0       	ldi	r25, 0x00	; 0
     a50:	06 d3       	rcall	.+1548   	; 0x105e <USB_Host_SendControlRequest>
     a52:	68 2f       	mov	r22, r24
     a54:	88 23       	and	r24, r24
     a56:	f1 f4       	brne	.+60     	; 0xa94 <USB_Host_ProcessNextHostState+0x22e>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
     a58:	10 92 27 01 	sts	0x0127, r1
     a5c:	84 e6       	ldi	r24, 0x64	; 100
     a5e:	90 e0       	ldi	r25, 0x00	; 0
     a60:	90 93 1c 01 	sts	0x011C, r25
     a64:	80 93 1b 01 	sts	0x011B, r24
     a68:	89 e0       	ldi	r24, 0x09	; 9
     a6a:	80 93 1a 01 	sts	0x011A, r24
     a6e:	1a c0       	rjmp	.+52     	; 0xaa4 <USB_Host_ProcessNextHostState+0x23e>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
     a70:	81 e0       	ldi	r24, 0x01	; 1
     a72:	80 93 a1 00 	sts	0x00A1, r24
			break;
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			USB_HostState = HOST_STATE_Addressed;
     a76:	8a e0       	ldi	r24, 0x0A	; 10
     a78:	80 93 27 01 	sts	0x0127, r24

			EVENT_USB_Host_DeviceEnumerationComplete();
     a7c:	01 dd       	rcall	.-1534   	; 0x480 <EVENT_USB_Host_DeviceEnumerationComplete>
     a7e:	12 c0       	rjmp	.+36     	; 0xaa4 <USB_Host_ProcessNextHostState+0x23e>
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
     a80:	89 2f       	mov	r24, r25
     a82:	a7 dc       	rcall	.-1714   	; 0x3d2 <EVENT_USB_Host_DeviceEnumerationFailed>
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     a84:	80 91 dd 00 	lds	r24, 0x00DD
     a88:	81 60       	ori	r24, 0x01	; 1
     a8a:	80 93 dd 00 	sts	0x00DD, r24

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
     a8e:	e8 dc       	rcall	.-1584   	; 0x460 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     a90:	b6 d0       	rcall	.+364    	; 0xbfe <USB_ResetInterface>
     a92:	08 c0       	rjmp	.+16     	; 0xaa4 <USB_Host_ProcessNextHostState+0x23e>
	}
}
     a94:	93 e0       	ldi	r25, 0x03	; 3
     a96:	02 c0       	rjmp	.+4      	; 0xa9c <USB_Host_ProcessNextHostState+0x236>
     a98:	94 e0       	ldi	r25, 0x04	; 4
     a9a:	60 e0       	ldi	r22, 0x00	; 0

			EVENT_USB_Host_DeviceEnumerationComplete();
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
     a9c:	80 91 27 01 	lds	r24, 0x0127
     aa0:	81 30       	cpi	r24, 0x01	; 1
     aa2:	71 f7       	brne	.-36     	; 0xa80 <USB_Host_ProcessNextHostState+0x21a>

		EVENT_USB_Host_DeviceUnattached();

		USB_ResetInterface();
	}
}
     aa4:	28 96       	adiw	r28, 0x08	; 8
     aa6:	0f b6       	in	r0, 0x3f	; 63
     aa8:	f8 94       	cli
     aaa:	de bf       	out	0x3e, r29	; 62
     aac:	0f be       	out	0x3f, r0	; 63
     aae:	cd bf       	out	0x3d, r28	; 61
     ab0:	cf 91       	pop	r28
     ab2:	df 91       	pop	r29
     ab4:	1f 91       	pop	r17
     ab6:	0f 91       	pop	r16
     ab8:	ef 90       	pop	r14
     aba:	08 95       	ret

00000abc <Pipe_ConfigurePipe>:
                        const uint8_t Type,
                        const uint8_t Token,
                        const uint8_t EndpointNumber,
                        const uint16_t Size,
                        const uint8_t Banks)
{
     abc:	ef 92       	push	r14
     abe:	0f 93       	push	r16
     ac0:	1f 93       	push	r17
     ac2:	e8 2f       	mov	r30, r24
     ac4:	7e 2d       	mov	r23, r14

		Pipe_SelectPipe(PNum);
		
		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
     ac6:	62 95       	swap	r22
     ac8:	66 0f       	add	r22, r22
     aca:	66 0f       	add	r22, r22
     acc:	60 7c       	andi	r22, 0xC0	; 192
     ace:	64 2b       	or	r22, r20
     ad0:	2f 70       	andi	r18, 0x0F	; 15
     ad2:	62 2b       	or	r22, r18
     ad4:	38 2f       	mov	r19, r24
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     ad6:	72 60       	ori	r23, 0x02	; 2
     ad8:	45 c0       	rjmp	.+138    	; 0xb64 <Pipe_ConfigurePipe+0xa8>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     ada:	30 93 a7 00 	sts	0x00A7, r19
		uint8_t UPCFG2XTemp;
		uint8_t UPIENXTemp;

		Pipe_SelectPipe(PNum);
		
		if (PNum == Number)
     ade:	3e 17       	cp	r19, r30
     ae0:	a1 f4       	brne	.+40     	; 0xb0a <Pipe_ConfigurePipe+0x4e>
     ae2:	88 e0       	ldi	r24, 0x08	; 8
     ae4:	90 e0       	ldi	r25, 0x00	; 0
     ae6:	20 e0       	ldi	r18, 0x00	; 0
     ae8:	03 c0       	rjmp	.+6      	; 0xaf0 <Pipe_ConfigurePipe+0x34>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
				{
					MaskVal++;
     aea:	2f 5f       	subi	r18, 0xFF	; 255
					CheckBytes <<= 1;
     aec:	88 0f       	add	r24, r24
     aee:	99 1f       	adc	r25, r25
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
     af0:	80 17       	cp	r24, r16
     af2:	91 07       	cpc	r25, r17
     af4:	10 f4       	brcc	.+4      	; 0xafa <Pipe_ConfigurePipe+0x3e>
     af6:	25 30       	cpi	r18, 0x05	; 5
     af8:	c1 f7       	brne	.-16     	; 0xaea <Pipe_ConfigurePipe+0x2e>
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     afa:	92 2f       	mov	r25, r18
     afc:	92 95       	swap	r25
     afe:	90 7f       	andi	r25, 0xF0	; 240
     b00:	97 2b       	or	r25, r23
     b02:	56 2f       	mov	r21, r22
     b04:	40 e0       	ldi	r20, 0x00	; 0
     b06:	20 e0       	ldi	r18, 0x00	; 0
     b08:	08 c0       	rjmp	.+16     	; 0xb1a <Pipe_ConfigurePipe+0x5e>
			UPCFG2XTemp = 0;
			UPIENXTemp  = 0;
		}
		else
		{
			UPCFG0XTemp = UPCFG0X;
     b0a:	50 91 aa 00 	lds	r21, 0x00AA
			UPCFG1XTemp = UPCFG1X;
     b0e:	90 91 ab 00 	lds	r25, 0x00AB
			UPCFG2XTemp = UPCFG2X;
     b12:	40 91 ad 00 	lds	r20, 0x00AD
			UPIENXTemp  = UPIENX;
     b16:	20 91 ae 00 	lds	r18, 0x00AE
		}

		if (!(UPCFG1XTemp & (1 << ALLOC)))
     b1a:	91 ff       	sbrs	r25, 1
     b1c:	22 c0       	rjmp	.+68     	; 0xb62 <Pipe_ConfigurePipe+0xa6>
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     b1e:	80 91 a9 00 	lds	r24, 0x00A9
     b22:	8e 7f       	andi	r24, 0xFE	; 254
     b24:	80 93 a9 00 	sts	0x00A9, r24
		  continue;
		  
		Pipe_DisablePipe();
		UPCFG1X &= ~(1 << ALLOC);
     b28:	80 91 ab 00 	lds	r24, 0x00AB
     b2c:	8d 7f       	andi	r24, 0xFD	; 253
     b2e:	80 93 ab 00 	sts	0x00AB, r24
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
     b32:	80 91 a9 00 	lds	r24, 0x00A9
     b36:	81 60       	ori	r24, 0x01	; 1
     b38:	80 93 a9 00 	sts	0x00A9, r24

		Pipe_EnablePipe();
		UPCFG0X = UPCFG0XTemp;
     b3c:	50 93 aa 00 	sts	0x00AA, r21
		UPCFG1X = UPCFG1XTemp;
     b40:	90 93 ab 00 	sts	0x00AB, r25
		UPCFG2X = UPCFG2XTemp;
     b44:	40 93 ad 00 	sts	0x00AD, r20
		UPIENX  = UPIENXTemp;
     b48:	20 93 ae 00 	sts	0x00AE, r18

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
     b4c:	80 91 a9 00 	lds	r24, 0x00A9
     b50:	80 62       	ori	r24, 0x20	; 32
     b52:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     b56:	80 91 ac 00 	lds	r24, 0x00AC

		Pipe_SetInfiniteINRequests();
	
		if (!(Pipe_IsConfigured()))
     b5a:	87 fd       	sbrc	r24, 7
     b5c:	02 c0       	rjmp	.+4      	; 0xb62 <Pipe_ConfigurePipe+0xa6>
     b5e:	80 e0       	ldi	r24, 0x00	; 0
     b60:	07 c0       	rjmp	.+14     	; 0xb70 <Pipe_ConfigurePipe+0xb4>

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else	
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
     b62:	3f 5f       	subi	r19, 0xFF	; 255
     b64:	37 30       	cpi	r19, 0x07	; 7
     b66:	08 f4       	brcc	.+2      	; 0xb6a <Pipe_ConfigurePipe+0xae>
     b68:	b8 cf       	rjmp	.-144    	; 0xada <Pipe_ConfigurePipe+0x1e>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     b6a:	e0 93 a7 00 	sts	0x00A7, r30
     b6e:	81 e0       	ldi	r24, 0x01	; 1
	}
		
	Pipe_SelectPipe(Number);	
	return true;
#endif
}
     b70:	1f 91       	pop	r17
     b72:	0f 91       	pop	r16
     b74:	ef 90       	pop	r14
     b76:	08 95       	ret

00000b78 <Pipe_ClearPipes>:

void Pipe_ClearPipes(void)
{
	UPINT = 0;
     b78:	10 92 f8 00 	sts	0x00F8, r1
     b7c:	90 e0       	ldi	r25, 0x00	; 0
     b7e:	90 93 a7 00 	sts	0x00A7, r25

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
     b82:	10 92 ae 00 	sts	0x00AE, r1
		UPINTX  = 0;
     b86:	10 92 a6 00 	sts	0x00A6, r1
		UPCFG1X = 0;
     b8a:	10 92 ab 00 	sts	0x00AB, r1
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     b8e:	80 91 a9 00 	lds	r24, 0x00A9
     b92:	8e 7f       	andi	r24, 0xFE	; 254
     b94:	80 93 a9 00 	sts	0x00A9, r24

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     b98:	9f 5f       	subi	r25, 0xFF	; 255
     b9a:	97 30       	cpi	r25, 0x07	; 7
     b9c:	81 f7       	brne	.-32     	; 0xb7e <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
     b9e:	08 95       	ret

00000ba0 <Pipe_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
     ba0:	40 91 a2 00 	lds	r20, 0x00A2
     ba4:	50 91 a3 00 	lds	r21, 0x00A3
     ba8:	24 e6       	ldi	r18, 0x64	; 100
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
     baa:	80 91 aa 00 	lds	r24, 0x00AA

	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
     bae:	80 73       	andi	r24, 0x30	; 48
     bb0:	80 31       	cpi	r24, 0x10	; 16
     bb2:	29 f4       	brne	.+10     	; 0xbbe <Pipe_WaitUntilReady+0x1e>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     bb4:	80 91 a6 00 	lds	r24, 0x00A6
		{
			if (Pipe_IsINReceived())
     bb8:	80 ff       	sbrs	r24, 0
     bba:	05 c0       	rjmp	.+10     	; 0xbc6 <Pipe_WaitUntilReady+0x26>
     bbc:	1e c0       	rjmp	.+60     	; 0xbfa <Pipe_WaitUntilReady+0x5a>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     bbe:	80 91 a6 00 	lds	r24, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
     bc2:	82 fd       	sbrc	r24, 2
     bc4:	1a c0       	rjmp	.+52     	; 0xbfa <Pipe_WaitUntilReady+0x5a>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     bc6:	80 91 a6 00 	lds	r24, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
     bca:	81 ff       	sbrs	r24, 1
     bcc:	02 c0       	rjmp	.+4      	; 0xbd2 <Pipe_WaitUntilReady+0x32>
     bce:	81 e0       	ldi	r24, 0x01	; 1
     bd0:	08 95       	ret
		  return PIPE_READYWAIT_PipeStalled;
		else if (USB_HostState == HOST_STATE_Unattached)
     bd2:	80 91 27 01 	lds	r24, 0x0127
     bd6:	81 30       	cpi	r24, 0x01	; 1
     bd8:	11 f4       	brne	.+4      	; 0xbde <Pipe_WaitUntilReady+0x3e>
     bda:	82 e0       	ldi	r24, 0x02	; 2
     bdc:	08 95       	ret
     bde:	80 91 a2 00 	lds	r24, 0x00A2
     be2:	90 91 a3 00 	lds	r25, 0x00A3
		  return PIPE_READYWAIT_DeviceDisconnected;

		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     be6:	84 17       	cp	r24, r20
     be8:	95 07       	cpc	r25, r21
     bea:	f9 f2       	breq	.-66     	; 0xbaa <Pipe_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     bec:	22 23       	and	r18, r18
     bee:	11 f4       	brne	.+4      	; 0xbf4 <Pipe_WaitUntilReady+0x54>
     bf0:	83 e0       	ldi	r24, 0x03	; 3
     bf2:	08 95       	ret
     bf4:	21 50       	subi	r18, 0x01	; 1
     bf6:	ac 01       	movw	r20, r24
     bf8:	d8 cf       	rjmp	.-80     	; 0xbaa <Pipe_WaitUntilReady+0xa>
     bfa:	80 e0       	ldi	r24, 0x00	; 0
			  return PIPE_READYWAIT_Timeout;
		}
	}
}
     bfc:	08 95       	ret

00000bfe <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     bfe:	70 d0       	rcall	.+224    	; 0xce0 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     c00:	77 d0       	rcall	.+238    	; 0xcf0 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     c02:	80 91 d8 00 	lds	r24, 0x00D8
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	80 93 d8 00 	sts	0x00D8, r24
				USBCON |=  (1 << USBE);
     c0c:	80 91 d8 00 	lds	r24, 0x00D8
     c10:	80 68       	ori	r24, 0x80	; 128
     c12:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
     c16:	80 91 d8 00 	lds	r24, 0x00D8
     c1a:	8f 7d       	andi	r24, 0xDF	; 223
     c1c:	80 93 d8 00 	sts	0x00D8, r24
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
     c20:	80 91 d7 00 	lds	r24, 0x00D7
     c24:	8f 77       	andi	r24, 0x7F	; 127
     c26:	80 93 d7 00 	sts	0x00D7, r24

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     c2a:	8c e0       	ldi	r24, 0x0C	; 12
     c2c:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     c2e:	8e e0       	ldi	r24, 0x0E	; 14
     c30:	89 bd       	out	0x29, r24	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_CAN_BE_HOST)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));		
     c32:	09 b4       	in	r0, 0x29	; 41
     c34:	00 fe       	sbrs	r0, 0
     c36:	fd cf       	rjmp	.-6      	; 0xc32 <USB_ResetInterface+0x34>
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState                = HOST_STATE_Unattached;
     c38:	81 e0       	ldi	r24, 0x01	; 1
     c3a:	80 93 27 01 	sts	0x0127, r24
	USB_Host_ConfigurationNumber = 0;
     c3e:	10 92 1d 01 	sts	0x011D, r1
	USB_Host_ControlPipeSize     = PIPE_CONTROLPIPE_DEFAULT_SIZE;
     c42:	80 e4       	ldi	r24, 0x40	; 64
     c44:	80 93 18 01 	sts	0x0118, r24
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
     c48:	80 91 d8 00 	lds	r24, 0x00D8
     c4c:	80 64       	ori	r24, 0x40	; 64
     c4e:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     c52:	80 91 dd 00 	lds	r24, 0x00DD
     c56:	81 60       	ori	r24, 0x01	; 1
     c58:	80 93 dd 00 	sts	0x00DD, r24
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
     c5c:	80 91 dd 00 	lds	r24, 0x00DD
     c60:	84 60       	ori	r24, 0x04	; 4
     c62:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON &= ~(1 << UVCONE);
     c66:	80 91 d7 00 	lds	r24, 0x00D7
     c6a:	8f 7e       	andi	r24, 0xEF	; 239
     c6c:	80 93 d7 00 	sts	0x00D7, r24

				DDRE   |=  (1 << 7);
     c70:	6f 9a       	sbi	0x0d, 7	; 13
			}

			static inline void USB_Host_VBUS_Manual_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_On(void)
			{
				PORTE  |=  (1 << 7);
     c72:	77 9a       	sbi	0x0e, 7	; 14
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN |= (1 << SRPE);						
     c74:	80 91 de 00 	lds	r24, 0x00DE
     c78:	81 60       	ori	r24, 0x01	; 1
     c7a:	80 93 de 00 	sts	0x00DE, r24
						break;
					case USB_INT_RSTI:
						UHIEN  |= (1 << RSTE);
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
     c7e:	80 91 de 00 	lds	r24, 0x00DE
     c82:	84 60       	ori	r24, 0x04	; 4
     c84:	80 93 de 00 	sts	0x00DE, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     c88:	80 91 e0 00 	lds	r24, 0x00E0
     c8c:	8e 7f       	andi	r24, 0xFE	; 254
     c8e:	80 93 e0 00 	sts	0x00E0, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     c92:	80 91 d8 00 	lds	r24, 0x00D8
     c96:	80 61       	ori	r24, 0x10	; 16
     c98:	80 93 d8 00 	sts	0x00D8, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     c9c:	08 95       	ret

00000c9e <USB_Init>:

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
     c9e:	e7 ed       	ldi	r30, 0xD7	; 215
     ca0:	f0 e0       	ldi	r31, 0x00	; 0
     ca2:	80 81       	ld	r24, Z
     ca4:	81 60       	ori	r24, 0x01	; 1
     ca6:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     ca8:	81 e0       	ldi	r24, 0x01	; 1
     caa:	80 93 1e 01 	sts	0x011E, r24

	USB_ResetInterface();
}
     cae:	a7 cf       	rjmp	.-178    	; 0xbfe <USB_ResetInterface>

00000cb0 <USB_Disable>:

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
     cb0:	17 d0       	rcall	.+46     	; 0xce0 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     cb2:	1e d0       	rcall	.+60     	; 0xcf0 <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
     cb4:	e0 ee       	ldi	r30, 0xE0	; 224
     cb6:	f0 e0       	ldi	r31, 0x00	; 0
     cb8:	80 81       	ld	r24, Z
     cba:	81 60       	ori	r24, 0x01	; 1
     cbc:	80 83       	st	Z, r24
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON  &= ~(1 << USBE);
     cbe:	a8 ed       	ldi	r26, 0xD8	; 216
     cc0:	b0 e0       	ldi	r27, 0x00	; 0
     cc2:	8c 91       	ld	r24, X
     cc4:	8f 77       	andi	r24, 0x7F	; 127
     cc6:	8c 93       	st	X, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     cc8:	19 bc       	out	0x29, r1	; 41

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  &= ~(1 << UVREGE);
     cca:	e7 ed       	ldi	r30, 0xD7	; 215
     ccc:	f0 e0       	ldi	r31, 0x00	; 0
     cce:	80 81       	ld	r24, Z
     cd0:	8e 7f       	andi	r24, 0xFE	; 254
     cd2:	80 83       	st	Z, r24
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON  &= ~(1 << OTGPADE);
     cd4:	8c 91       	ld	r24, X
     cd6:	8f 7e       	andi	r24, 0xEF	; 239
     cd8:	8c 93       	st	X, r24

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
     cda:	10 92 1e 01 	sts	0x011E, r1
}
     cde:	08 95       	ret

00000ce0 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     ce0:	e8 ed       	ldi	r30, 0xD8	; 216
     ce2:	f0 e0       	ldi	r31, 0x00	; 0
     ce4:	80 81       	ld	r24, Z
     ce6:	8c 7f       	andi	r24, 0xFC	; 252
     ce8:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
     cea:	10 92 a0 00 	sts	0x00A0, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
	#endif
}
     cee:	08 95       	ret

00000cf0 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     cf0:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_BOTH)
	OTGINT = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
     cf4:	10 92 9f 00 	sts	0x009F, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
	#endif
}
     cf8:	08 95       	ret

00000cfa <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
     cfa:	1f 92       	push	r1
     cfc:	0f 92       	push	r0
     cfe:	0f b6       	in	r0, 0x3f	; 63
     d00:	0f 92       	push	r0
     d02:	0b b6       	in	r0, 0x3b	; 59
     d04:	0f 92       	push	r0
     d06:	11 24       	eor	r1, r1
     d08:	2f 93       	push	r18
     d0a:	3f 93       	push	r19
     d0c:	4f 93       	push	r20
     d0e:	5f 93       	push	r21
     d10:	6f 93       	push	r22
     d12:	7f 93       	push	r23
     d14:	8f 93       	push	r24
     d16:	9f 93       	push	r25
     d18:	af 93       	push	r26
     d1a:	bf 93       	push	r27
     d1c:	ef 93       	push	r30
     d1e:	ff 93       	push	r31
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     d20:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	#if defined(USB_CAN_BE_HOST)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
     d24:	85 ff       	sbrs	r24, 5
     d26:	0a c0       	rjmp	.+20     	; 0xd3c <__vector_10+0x42>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     d28:	80 91 a0 00 	lds	r24, 0x00A0
     d2c:	85 ff       	sbrs	r24, 5
     d2e:	06 c0       	rjmp	.+12     	; 0xd3c <__vector_10+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     d30:	80 91 9f 00 	lds	r24, 0x009F
     d34:	8f 7d       	andi	r24, 0xDF	; 223
     d36:	80 93 9f 00 	sts	0x009F, r24
	{
		USB_INT_Clear(USB_INT_HSOFI);

		EVENT_USB_Host_StartOfFrame();
     d3a:	67 d1       	rcall	.+718    	; 0x100a <USB_Event_Stub>
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
     d3c:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
     d40:	81 ff       	sbrs	r24, 1
     d42:	15 c0       	rjmp	.+42     	; 0xd6e <__vector_10+0x74>
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
					case USB_INT_DCONNI:
						return (UHIEN  & (1 << DCONNE));
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
     d44:	80 91 a0 00 	lds	r24, 0x00A0
     d48:	81 ff       	sbrs	r24, 1
     d4a:	11 c0       	rjmp	.+34     	; 0xd6e <__vector_10+0x74>
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     d4c:	80 91 9f 00 	lds	r24, 0x009F
     d50:	8d 7f       	andi	r24, 0xFD	; 253
     d52:	80 93 9f 00 	sts	0x009F, r24
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     d56:	80 91 9f 00 	lds	r24, 0x009F
     d5a:	8e 7f       	andi	r24, 0xFE	; 254
     d5c:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     d60:	80 91 a0 00 	lds	r24, 0x00A0
     d64:	8d 7f       	andi	r24, 0xFD	; 253
     d66:	80 93 a0 00 	sts	0x00A0, r24
	{
		USB_INT_Clear(USB_INT_DDISCI);
		USB_INT_Clear(USB_INT_DCONNI);
		USB_INT_Disable(USB_INT_DDISCI);

		EVENT_USB_Host_DeviceUnattached();
     d6a:	7a db       	rcall	.-2316   	; 0x460 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     d6c:	48 df       	rcall	.-368    	; 0xbfe <USB_ResetInterface>
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
     d6e:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
     d72:	81 ff       	sbrs	r24, 1
     d74:	15 c0       	rjmp	.+42     	; 0xda0 <__vector_10+0xa6>
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
     d76:	80 91 de 00 	lds	r24, 0x00DE
     d7a:	81 ff       	sbrs	r24, 1
     d7c:	11 c0       	rjmp	.+34     	; 0xda0 <__vector_10+0xa6>
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     d7e:	80 91 df 00 	lds	r24, 0x00DF
     d82:	8d 7f       	andi	r24, 0xFD	; 253
     d84:	80 93 df 00 	sts	0x00DF, r24
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
     d88:	77 98       	cbi	0x0e, 7	; 14
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     d8a:	80 91 dd 00 	lds	r24, 0x00DD
     d8e:	81 60       	ori	r24, 0x01	; 1
     d90:	80 93 dd 00 	sts	0x00DD, r24
		USB_INT_Clear(USB_INT_VBERRI);

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
     d94:	80 e0       	ldi	r24, 0x00	; 0
     d96:	48 db       	rcall	.-2416   	; 0x428 <EVENT_USB_Host_HostError>
		EVENT_USB_Host_DeviceUnattached();
     d98:	63 db       	rcall	.-2362   	; 0x460 <EVENT_USB_Host_DeviceUnattached>

		USB_HostState = HOST_STATE_Unattached;
     d9a:	81 e0       	ldi	r24, 0x01	; 1
     d9c:	80 93 27 01 	sts	0x0127, r24
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
					case USB_INT_SRPI:
						return (OTGINT & (1 << SRPI));
     da0:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
     da4:	80 ff       	sbrs	r24, 0
     da6:	17 c0       	rjmp	.+46     	; 0xdd6 <__vector_10+0xdc>
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
					case USB_INT_SRPI:
						return (OTGIEN & (1 << SRPE));
     da8:	80 91 de 00 	lds	r24, 0x00DE
     dac:	80 ff       	sbrs	r24, 0
     dae:	13 c0       	rjmp	.+38     	; 0xdd6 <__vector_10+0xdc>
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
						break;
					case USB_INT_SRPI:
						OTGINT &= ~(1 << SRPI);
     db0:	80 91 df 00 	lds	r24, 0x00DF
     db4:	8e 7f       	andi	r24, 0xFE	; 254
     db6:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_VBERRI:
						OTGIEN &= ~(1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN &= ~(1 << SRPE);						
     dba:	80 91 de 00 	lds	r24, 0x00DE
     dbe:	8e 7f       	andi	r24, 0xFE	; 254
     dc0:	80 93 de 00 	sts	0x00DE, r24
	{
		USB_INT_Clear(USB_INT_SRPI);
		USB_INT_Disable(USB_INT_SRPI);

		EVENT_USB_Host_DeviceAttached();
     dc4:	55 db       	rcall	.-2390   	; 0x470 <EVENT_USB_Host_DeviceAttached>
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     dc6:	80 91 a0 00 	lds	r24, 0x00A0
     dca:	82 60       	ori	r24, 0x02	; 2
     dcc:	80 93 a0 00 	sts	0x00A0, r24

		USB_INT_Enable(USB_INT_DDISCI);

		USB_HostState = HOST_STATE_Powered;
     dd0:	82 e0       	ldi	r24, 0x02	; 2
     dd2:	80 93 27 01 	sts	0x0127, r24
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
     dd6:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
     dda:	82 ff       	sbrs	r24, 2
     ddc:	0e c0       	rjmp	.+28     	; 0xdfa <__vector_10+0x100>
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
     dde:	80 91 de 00 	lds	r24, 0x00DE
     de2:	82 ff       	sbrs	r24, 2
     de4:	0a c0       	rjmp	.+20     	; 0xdfa <__vector_10+0x100>
						break;
					case USB_INT_RSTI:
						UHINT  &= ~(1 << RSTI);
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
     de6:	80 91 df 00 	lds	r24, 0x00DF
     dea:	8b 7f       	andi	r24, 0xFB	; 251
     dec:	80 93 df 00 	sts	0x00DF, r24
	{
		USB_INT_Clear(USB_INT_BCERRI);

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
     df0:	82 e0       	ldi	r24, 0x02	; 2
     df2:	60 e0       	ldi	r22, 0x00	; 0
     df4:	ee da       	rcall	.-2596   	; 0x3d2 <EVENT_USB_Host_DeviceEnumerationFailed>
		EVENT_USB_Host_DeviceUnattached();
     df6:	34 db       	rcall	.-2456   	; 0x460 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     df8:	02 df       	rcall	.-508    	; 0xbfe <USB_ResetInterface>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     dfa:	ff 91       	pop	r31
     dfc:	ef 91       	pop	r30
     dfe:	bf 91       	pop	r27
     e00:	af 91       	pop	r26
     e02:	9f 91       	pop	r25
     e04:	8f 91       	pop	r24
     e06:	7f 91       	pop	r23
     e08:	6f 91       	pop	r22
     e0a:	5f 91       	pop	r21
     e0c:	4f 91       	pop	r20
     e0e:	3f 91       	pop	r19
     e10:	2f 91       	pop	r18
     e12:	0f 90       	pop	r0
     e14:	0b be       	out	0x3b, r0	; 59
     e16:	0f 90       	pop	r0
     e18:	0f be       	out	0x3f, r0	; 63
     e1a:	0f 90       	pop	r0
     e1c:	1f 90       	pop	r1
     e1e:	18 95       	reti

00000e20 <Pipe_Read_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     e20:	bf 92       	push	r11
     e22:	cf 92       	push	r12
     e24:	df 92       	push	r13
     e26:	ef 92       	push	r14
     e28:	ff 92       	push	r15
     e2a:	0f 93       	push	r16
     e2c:	1f 93       	push	r17
     e2e:	cf 93       	push	r28
     e30:	df 93       	push	r29
     e32:	18 2f       	mov	r17, r24
     e34:	09 2f       	mov	r16, r25
     e36:	7b 01       	movw	r14, r22
     e38:	6a 01       	movw	r12, r20
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     e3a:	80 91 aa 00 	lds	r24, 0x00AA
     e3e:	8f 7c       	andi	r24, 0xCF	; 207
     e40:	80 61       	ori	r24, 0x10	; 16
     e42:	80 93 aa 00 	sts	0x00AA, r24
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
     e46:	ac de       	rcall	.-680    	; 0xba0 <Pipe_WaitUntilReady>
     e48:	b8 2e       	mov	r11, r24
     e4a:	88 23       	and	r24, r24
     e4c:	a9 f5       	brne	.+106    	; 0xeb8 <Pipe_Read_Stream_LE+0x98>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     e4e:	81 2f       	mov	r24, r17
     e50:	90 2f       	mov	r25, r16
     e52:	9c 01       	movw	r18, r24
     e54:	e9 01       	movw	r28, r18
	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
     e56:	c1 14       	cp	r12, r1
     e58:	d1 04       	cpc	r13, r1
     e5a:	39 f0       	breq	.+14     	; 0xe6a <Pipe_Read_Stream_LE+0x4a>
	{
		Length -= *BytesProcessed;
     e5c:	f6 01       	movw	r30, r12
     e5e:	80 81       	ld	r24, Z
     e60:	91 81       	ldd	r25, Z+1	; 0x01
     e62:	e8 1a       	sub	r14, r24
     e64:	f9 0a       	sbc	r15, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     e66:	c8 0f       	add	r28, r24
     e68:	d9 1f       	adc	r29, r25
     e6a:	00 e0       	ldi	r16, 0x00	; 0
     e6c:	10 e0       	ldi	r17, 0x00	; 0
     e6e:	21 c0       	rjmp	.+66     	; 0xeb2 <Pipe_Read_Stream_LE+0x92>
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
     e70:	80 91 a6 00 	lds	r24, 0x00A6
	}
	
	while (Length)
	{
		if (!(Pipe_IsReadWriteAllowed()))
     e74:	85 fd       	sbrc	r24, 5
     e76:	15 c0       	rjmp	.+42     	; 0xea2 <Pipe_Read_Stream_LE+0x82>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     e78:	80 91 a6 00 	lds	r24, 0x00A6
     e7c:	8e 77       	andi	r24, 0x7E	; 126
     e7e:	80 93 a6 00 	sts	0x00A6, r24
		{
			TEMPLATE_CLEAR_PIPE();

			if (BytesProcessed != NULL)
     e82:	c1 14       	cp	r12, r1
     e84:	d1 04       	cpc	r13, r1
     e86:	49 f0       	breq	.+18     	; 0xe9a <Pipe_Read_Stream_LE+0x7a>
			{
				*BytesProcessed += BytesInTransfer;
     e88:	f6 01       	movw	r30, r12
     e8a:	80 81       	ld	r24, Z
     e8c:	91 81       	ldd	r25, Z+1	; 0x01
     e8e:	80 0f       	add	r24, r16
     e90:	91 1f       	adc	r25, r17
     e92:	91 83       	std	Z+1, r25	; 0x01
     e94:	80 83       	st	Z, r24
     e96:	84 e0       	ldi	r24, 0x04	; 4
     e98:	10 c0       	rjmp	.+32     	; 0xeba <Pipe_Read_Stream_LE+0x9a>
				return PIPE_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
     e9a:	82 de       	rcall	.-764    	; 0xba0 <Pipe_WaitUntilReady>
     e9c:	88 23       	and	r24, r24
     e9e:	49 f0       	breq	.+18     	; 0xeb2 <Pipe_Read_Stream_LE+0x92>
     ea0:	0c c0       	rjmp	.+24     	; 0xeba <Pipe_Read_Stream_LE+0x9a>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
     ea2:	80 91 af 00 	lds	r24, 0x00AF
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
     ea6:	89 93       	st	Y+, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
     ea8:	08 94       	sec
     eaa:	e1 08       	sbc	r14, r1
     eac:	f1 08       	sbc	r15, r1
			BytesInTransfer++;
     eae:	0f 5f       	subi	r16, 0xFF	; 255
     eb0:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}
	
	while (Length)
     eb2:	e1 14       	cp	r14, r1
     eb4:	f1 04       	cpc	r15, r1
     eb6:	e1 f6       	brne	.-72     	; 0xe70 <Pipe_Read_Stream_LE+0x50>
     eb8:	8b 2d       	mov	r24, r11
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
     eba:	df 91       	pop	r29
     ebc:	cf 91       	pop	r28
     ebe:	1f 91       	pop	r17
     ec0:	0f 91       	pop	r16
     ec2:	ff 90       	pop	r15
     ec4:	ef 90       	pop	r14
     ec6:	df 90       	pop	r13
     ec8:	cf 90       	pop	r12
     eca:	bf 90       	pop	r11
     ecc:	08 95       	ret

00000ece <USB_GetNextDescriptorComp>:

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
     ece:	af 92       	push	r10
     ed0:	bf 92       	push	r11
     ed2:	cf 92       	push	r12
     ed4:	df 92       	push	r13
     ed6:	ef 92       	push	r14
     ed8:	ff 92       	push	r15
     eda:	0f 93       	push	r16
     edc:	1f 93       	push	r17
     ede:	cf 93       	push	r28
     ee0:	df 93       	push	r29
     ee2:	7c 01       	movw	r14, r24
     ee4:	eb 01       	movw	r28, r22
     ee6:	6a 01       	movw	r12, r20
     ee8:	24 c0       	rjmp	.+72     	; 0xf32 <USB_GetNextDescriptorComp+0x64>
	uint8_t ErrorCode;

	while (*BytesRem)
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
     eea:	e8 81       	ld	r30, Y
     eec:	f9 81       	ldd	r31, Y+1	; 0x01
     eee:	be 2e       	mov	r11, r30
     ef0:	af 2e       	mov	r10, r31
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc)
			{
				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;
     ef2:	80 81       	ld	r24, Z
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	98 01       	movw	r18, r16
     ef8:	80 17       	cp	r24, r16
     efa:	91 07       	cpc	r25, r17
     efc:	08 f4       	brcc	.+2      	; 0xf00 <USB_GetNextDescriptorComp+0x32>
     efe:	9c 01       	movw	r18, r24
				
				if (*BytesRem < CurrDescriptorSize)
				  CurrDescriptorSize = *BytesRem;

				*CurrConfigLoc  = (void*)((uintptr_t)*CurrConfigLoc + CurrDescriptorSize);
     f00:	e2 0f       	add	r30, r18
     f02:	f3 1f       	adc	r31, r19
     f04:	f9 83       	std	Y+1, r31	; 0x01
     f06:	e8 83       	st	Y, r30
				*BytesRem      -= CurrDescriptorSize;
     f08:	f7 01       	movw	r30, r14
     f0a:	80 81       	ld	r24, Z
     f0c:	91 81       	ldd	r25, Z+1	; 0x01
     f0e:	82 1b       	sub	r24, r18
     f10:	93 0b       	sbc	r25, r19
     f12:	91 83       	std	Z+1, r25	; 0x01
     f14:	80 83       	st	Z, r24
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
     f16:	88 81       	ld	r24, Y
     f18:	99 81       	ldd	r25, Y+1	; 0x01
     f1a:	f6 01       	movw	r30, r12
     f1c:	09 95       	icall
     f1e:	82 30       	cpi	r24, 0x02	; 2
     f20:	41 f0       	breq	.+16     	; 0xf32 <USB_GetNextDescriptorComp+0x64>
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
     f22:	81 30       	cpi	r24, 0x01	; 1
     f24:	69 f4       	brne	.+26     	; 0xf40 <USB_GetNextDescriptorComp+0x72>
			{
				*CurrConfigLoc = PrevDescLoc;
     f26:	b8 82       	st	Y, r11
     f28:	a9 82       	std	Y+1, r10	; 0x01
				*BytesRem      = PrevBytesRem;
     f2a:	f7 01       	movw	r30, r14
     f2c:	11 83       	std	Z+1, r17	; 0x01
     f2e:	00 83       	st	Z, r16
     f30:	07 c0       	rjmp	.+14     	; 0xf40 <USB_GetNextDescriptorComp+0x72>
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
	uint8_t ErrorCode;

	while (*BytesRem)
     f32:	f7 01       	movw	r30, r14
     f34:	00 81       	ld	r16, Z
     f36:	11 81       	ldd	r17, Z+1	; 0x01
     f38:	01 15       	cp	r16, r1
     f3a:	11 05       	cpc	r17, r1
     f3c:	b1 f6       	brne	.-84     	; 0xeea <USB_GetNextDescriptorComp+0x1c>
     f3e:	82 e0       	ldi	r24, 0x02	; 2
			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
}
     f40:	df 91       	pop	r29
     f42:	cf 91       	pop	r28
     f44:	1f 91       	pop	r17
     f46:	0f 91       	pop	r16
     f48:	ff 90       	pop	r15
     f4a:	ef 90       	pop	r14
     f4c:	df 90       	pop	r13
     f4e:	cf 90       	pop	r12
     f50:	bf 90       	pop	r11
     f52:	af 90       	pop	r10
     f54:	08 95       	ret

00000f56 <USB_Host_GetDeviceConfigDescriptor>:
#if defined(USB_CAN_BE_HOST)
uint8_t USB_Host_GetDeviceConfigDescriptor(const uint8_t ConfigNumber,
                                           uint16_t* const ConfigSizePtr,
                                           void* const BufferPtr,
                                           const uint16_t BufferSize)
{
     f56:	cf 92       	push	r12
     f58:	df 92       	push	r13
     f5a:	ef 92       	push	r14
     f5c:	ff 92       	push	r15
     f5e:	0f 93       	push	r16
     f60:	1f 93       	push	r17
     f62:	df 93       	push	r29
     f64:	cf 93       	push	r28
     f66:	cd b7       	in	r28, 0x3d	; 61
     f68:	de b7       	in	r29, 0x3e	; 62
     f6a:	29 97       	sbiw	r28, 0x09	; 9
     f6c:	0f b6       	in	r0, 0x3f	; 63
     f6e:	f8 94       	cli
     f70:	de bf       	out	0x3e, r29	; 62
     f72:	0f be       	out	0x3f, r0	; 63
     f74:	cd bf       	out	0x3d, r28	; 61
     f76:	6b 01       	movw	r12, r22
     f78:	8a 01       	movw	r16, r20
     f7a:	79 01       	movw	r14, r18
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
     f7c:	90 e8       	ldi	r25, 0x80	; 128
     f7e:	90 93 1f 01 	sts	0x011F, r25
     f82:	96 e0       	ldi	r25, 0x06	; 6
     f84:	90 93 20 01 	sts	0x0120, r25
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	01 97       	sbiw	r24, 0x01	; 1
     f8c:	92 60       	ori	r25, 0x02	; 2
     f8e:	90 93 22 01 	sts	0x0122, r25
     f92:	80 93 21 01 	sts	0x0121, r24
     f96:	10 92 24 01 	sts	0x0124, r1
     f9a:	10 92 23 01 	sts	0x0123, r1
     f9e:	89 e0       	ldi	r24, 0x09	; 9
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	90 93 26 01 	sts	0x0126, r25
     fa6:	80 93 25 01 	sts	0x0125, r24
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     faa:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = sizeof(USB_Descriptor_Configuration_Header_t),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(ConfigHeader)) != HOST_SENDCONTROL_Successful)
     fae:	ce 01       	movw	r24, r28
     fb0:	01 96       	adiw	r24, 0x01	; 1
     fb2:	55 d0       	rcall	.+170    	; 0x105e <USB_Host_SendControlRequest>
     fb4:	28 2f       	mov	r18, r24
     fb6:	88 23       	and	r24, r24
     fb8:	c1 f4       	brne	.+48     	; 0xfea <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);
     fba:	8b 81       	ldd	r24, Y+3	; 0x03
     fbc:	9c 81       	ldd	r25, Y+4	; 0x04
     fbe:	f6 01       	movw	r30, r12
     fc0:	91 83       	std	Z+1, r25	; 0x01
     fc2:	80 83       	st	Z, r24

	if (*ConfigSizePtr > BufferSize)
     fc4:	e8 16       	cp	r14, r24
     fc6:	f9 06       	cpc	r15, r25
     fc8:	10 f4       	brcc	.+4      	; 0xfce <USB_Host_GetDeviceConfigDescriptor+0x78>
     fca:	25 e0       	ldi	r18, 0x05	; 5
     fcc:	0e c0       	rjmp	.+28     	; 0xfea <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return HOST_GETCONFIG_BuffOverflow;

	USB_ControlRequest.wLength = *ConfigSizePtr;
     fce:	90 93 26 01 	sts	0x0126, r25
     fd2:	80 93 25 01 	sts	0x0125, r24

	if ((ErrorCode = USB_Host_SendControlRequest(BufferPtr)) != HOST_SENDCONTROL_Successful)
     fd6:	c8 01       	movw	r24, r16
     fd8:	42 d0       	rcall	.+132    	; 0x105e <USB_Host_SendControlRequest>
     fda:	28 2f       	mov	r18, r24
     fdc:	88 23       	and	r24, r24
     fde:	29 f4       	brne	.+10     	; 0xfea <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
     fe0:	f8 01       	movw	r30, r16
     fe2:	81 81       	ldd	r24, Z+1	; 0x01
     fe4:	82 30       	cpi	r24, 0x02	; 2
     fe6:	09 f0       	breq	.+2      	; 0xfea <USB_Host_GetDeviceConfigDescriptor+0x94>
     fe8:	26 e0       	ldi	r18, 0x06	; 6
	  return HOST_GETCONFIG_InvalidData;

	return HOST_GETCONFIG_Successful;
}
     fea:	82 2f       	mov	r24, r18
     fec:	29 96       	adiw	r28, 0x09	; 9
     fee:	0f b6       	in	r0, 0x3f	; 63
     ff0:	f8 94       	cli
     ff2:	de bf       	out	0x3e, r29	; 62
     ff4:	0f be       	out	0x3f, r0	; 63
     ff6:	cd bf       	out	0x3d, r28	; 61
     ff8:	cf 91       	pop	r28
     ffa:	df 91       	pop	r29
     ffc:	1f 91       	pop	r17
     ffe:	0f 91       	pop	r16
    1000:	ff 90       	pop	r15
    1002:	ef 90       	pop	r14
    1004:	df 90       	pop	r13
    1006:	cf 90       	pop	r12
    1008:	08 95       	ret

0000100a <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
    100a:	08 95       	ret

0000100c <USB_Host_WaitForIOS>:

	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
    100c:	1f 93       	push	r17
    100e:	cf 93       	push	r28
    1010:	df 93       	push	r29
    1012:	18 2f       	mov	r17, r24
    1014:	c8 ee       	ldi	r28, 0xE8	; 232
    1016:	d3 e0       	ldi	r29, 0x03	; 3
    1018:	09 c0       	rjmp	.+18     	; 0x102c <USB_Host_WaitForIOS+0x20>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    101a:	81 e0       	ldi	r24, 0x01	; 1
    101c:	87 db       	rcall	.-2290   	; 0x72c <USB_Host_WaitMS>
    101e:	88 23       	and	r24, r24
    1020:	d1 f4       	brne	.+52     	; 0x1056 <USB_Host_WaitForIOS+0x4a>
		  return ErrorCode;

		if (!(TimeoutCounter--))
    1022:	20 97       	sbiw	r28, 0x00	; 0
    1024:	11 f4       	brne	.+4      	; 0x102a <USB_Host_WaitForIOS+0x1e>
    1026:	84 e0       	ldi	r24, 0x04	; 4
    1028:	16 c0       	rjmp	.+44     	; 0x1056 <USB_Host_WaitForIOS+0x4a>
    102a:	21 97       	sbiw	r28, 0x01	; 1
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    102c:	11 23       	and	r17, r17
    102e:	29 f4       	brne	.+10     	; 0x103a <USB_Host_WaitForIOS+0x2e>
			 *  \return Boolean \c true if the current pipe is ready for a SETUP packet, \c false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
    1030:	80 91 a6 00 	lds	r24, 0x00A6
    1034:	83 ff       	sbrs	r24, 3
    1036:	f1 cf       	rjmp	.-30     	; 0x101a <USB_Host_WaitForIOS+0xe>
    1038:	0d c0       	rjmp	.+26     	; 0x1054 <USB_Host_WaitForIOS+0x48>
    103a:	11 30       	cpi	r17, 0x01	; 1
    103c:	29 f4       	brne	.+10     	; 0x1048 <USB_Host_WaitForIOS+0x3c>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    103e:	80 91 a6 00 	lds	r24, 0x00A6
    1042:	80 ff       	sbrs	r24, 0
    1044:	ea cf       	rjmp	.-44     	; 0x101a <USB_Host_WaitForIOS+0xe>
    1046:	06 c0       	rjmp	.+12     	; 0x1054 <USB_Host_WaitForIOS+0x48>
    1048:	12 30       	cpi	r17, 0x02	; 2
    104a:	39 f7       	brne	.-50     	; 0x101a <USB_Host_WaitForIOS+0xe>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
    104c:	80 91 a6 00 	lds	r24, 0x00A6
    1050:	82 ff       	sbrs	r24, 2
    1052:	e3 cf       	rjmp	.-58     	; 0x101a <USB_Host_WaitForIOS+0xe>
    1054:	80 e0       	ldi	r24, 0x00	; 0
		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
}
    1056:	df 91       	pop	r29
    1058:	cf 91       	pop	r28
    105a:	1f 91       	pop	r17
    105c:	08 95       	ret

0000105e <USB_Host_SendControlRequest>:
#include "HostStandardReq.h"

uint8_t USB_Host_ConfigurationNumber;

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
    105e:	ff 92       	push	r15
    1060:	0f 93       	push	r16
    1062:	1f 93       	push	r17
    1064:	cf 93       	push	r28
    1066:	df 93       	push	r29
    1068:	18 2f       	mov	r17, r24
    106a:	09 2f       	mov	r16, r25
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
    106c:	f0 90 9e 00 	lds	r15, 0x009E
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
	bool     BusSuspended = USB_Host_IsBusSuspended();
	uint8_t  ReturnStatus = HOST_SENDCONTROL_Successful;
	uint16_t DataLen      = USB_ControlRequest.wLength;
    1070:	c0 91 25 01 	lds	r28, 0x0125
    1074:	d0 91 26 01 	lds	r29, 0x0126
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    1078:	80 91 9e 00 	lds	r24, 0x009E
    107c:	81 60       	ori	r24, 0x01	; 1
    107e:	80 93 9e 00 	sts	0x009E, r24

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1082:	81 e0       	ldi	r24, 0x01	; 1
    1084:	53 db       	rcall	.-2394   	; 0x72c <USB_Host_WaitMS>
    1086:	98 2f       	mov	r25, r24
    1088:	88 23       	and	r24, r24
    108a:	09 f0       	breq	.+2      	; 0x108e <USB_Host_SendControlRequest+0x30>
    108c:	d7 c0       	rjmp	.+430    	; 0x123c <USB_Host_SendControlRequest+0x1de>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    108e:	80 91 aa 00 	lds	r24, 0x00AA
    1092:	8f 7c       	andi	r24, 0xCF	; 207
    1094:	80 93 aa 00 	sts	0x00AA, r24

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
    1098:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
    109c:	80 91 a6 00 	lds	r24, 0x00A6
    10a0:	8f 7e       	andi	r24, 0xEF	; 239
    10a2:	80 93 a6 00 	sts	0x00A6, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    10a6:	80 91 a9 00 	lds	r24, 0x00A9
    10aa:	8f 7b       	andi	r24, 0xBF	; 191
    10ac:	80 93 a9 00 	sts	0x00A9, r24
    10b0:	ef e1       	ldi	r30, 0x1F	; 31
    10b2:	f1 e0       	ldi	r31, 0x01	; 1
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
	  Pipe_Write_8(*(HeaderStream++));	
    10b4:	81 91       	ld	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    10b6:	80 93 af 00 	sts	0x00AF, r24
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
    10ba:	81 e0       	ldi	r24, 0x01	; 1
    10bc:	e7 32       	cpi	r30, 0x27	; 39
    10be:	f8 07       	cpc	r31, r24
    10c0:	c9 f7       	brne	.-14     	; 0x10b4 <USB_Host_SendControlRequest+0x56>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
    10c2:	80 91 a6 00 	lds	r24, 0x00A6
    10c6:	87 77       	andi	r24, 0x77	; 119
    10c8:	80 93 a6 00 	sts	0x00A6, r24
	  Pipe_Write_8(*(HeaderStream++));	
	#endif
	
	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
    10cc:	80 e0       	ldi	r24, 0x00	; 0
    10ce:	9e df       	rcall	.-196    	; 0x100c <USB_Host_WaitForIOS>
    10d0:	98 2f       	mov	r25, r24
    10d2:	88 23       	and	r24, r24
    10d4:	09 f0       	breq	.+2      	; 0x10d8 <USB_Host_SendControlRequest+0x7a>
    10d6:	b2 c0       	rjmp	.+356    	; 0x123c <USB_Host_SendControlRequest+0x1de>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    10d8:	80 91 a9 00 	lds	r24, 0x00A9
    10dc:	80 64       	ori	r24, 0x40	; 64
    10de:	80 93 a9 00 	sts	0x00A9, r24
	  goto End_Of_Control_Send;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    10e2:	81 e0       	ldi	r24, 0x01	; 1
    10e4:	23 db       	rcall	.-2490   	; 0x72c <USB_Host_WaitMS>
    10e6:	98 2f       	mov	r25, r24
    10e8:	88 23       	and	r24, r24
    10ea:	09 f0       	breq	.+2      	; 0x10ee <USB_Host_SendControlRequest+0x90>
    10ec:	a7 c0       	rjmp	.+334    	; 0x123c <USB_Host_SendControlRequest+0x1de>

uint8_t USB_Host_ConfigurationNumber;

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
    10ee:	21 2f       	mov	r18, r17
    10f0:	30 2f       	mov	r19, r16
    10f2:	c9 01       	movw	r24, r18
    10f4:	8c 01       	movw	r16, r24
	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
	  goto End_Of_Control_Send;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
    10f6:	80 91 1f 01 	lds	r24, 0x011F
    10fa:	87 ff       	sbrs	r24, 7
    10fc:	52 c0       	rjmp	.+164    	; 0x11a2 <USB_Host_SendControlRequest+0x144>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    10fe:	80 91 aa 00 	lds	r24, 0x00AA
    1102:	8f 7c       	andi	r24, 0xCF	; 207
    1104:	80 61       	ori	r24, 0x10	; 16
    1106:	80 93 aa 00 	sts	0x00AA, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
    110a:	01 15       	cp	r16, r1
    110c:	11 05       	cpc	r17, r1
    110e:	69 f5       	brne	.+90     	; 0x116a <USB_Host_SendControlRequest+0x10c>
    1110:	2e c0       	rjmp	.+92     	; 0x116e <USB_Host_SendControlRequest+0x110>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1112:	80 91 a9 00 	lds	r24, 0x00A9
    1116:	8f 7b       	andi	r24, 0xBF	; 191
    1118:	80 93 a9 00 	sts	0x00A9, r24
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    111c:	81 e0       	ldi	r24, 0x01	; 1
    111e:	76 df       	rcall	.-276    	; 0x100c <USB_Host_WaitForIOS>
    1120:	98 2f       	mov	r25, r24
    1122:	88 23       	and	r24, r24
    1124:	09 f0       	breq	.+2      	; 0x1128 <USB_Host_SendControlRequest+0xca>
    1126:	8a c0       	rjmp	.+276    	; 0x123c <USB_Host_SendControlRequest+0x1de>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1128:	80 91 f6 00 	lds	r24, 0x00F6
    112c:	90 91 f7 00 	lds	r25, 0x00F7
				  goto End_Of_Control_Send;

				if (!(Pipe_BytesInPipe()))
    1130:	89 2b       	or	r24, r25
    1132:	49 f4       	brne	.+18     	; 0x1146 <USB_Host_SendControlRequest+0xe8>
    1134:	c0 e0       	ldi	r28, 0x00	; 0
    1136:	d0 e0       	ldi	r29, 0x00	; 0
    1138:	06 c0       	rjmp	.+12     	; 0x1146 <USB_Host_SendControlRequest+0xe8>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    113a:	80 91 af 00 	lds	r24, 0x00AF
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
				{
					*(DataStream++) = Pipe_Read_8();
    113e:	f8 01       	movw	r30, r16
    1140:	81 93       	st	Z+, r24
    1142:	8f 01       	movw	r16, r30
					DataLen--;
    1144:	21 97       	sbiw	r28, 0x01	; 1
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1146:	80 91 f6 00 	lds	r24, 0x00F6
    114a:	90 91 f7 00 	lds	r25, 0x00F7
				  goto End_Of_Control_Send;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
    114e:	89 2b       	or	r24, r25
    1150:	11 f0       	breq	.+4      	; 0x1156 <USB_Host_SendControlRequest+0xf8>
    1152:	20 97       	sbiw	r28, 0x00	; 0
    1154:	91 f7       	brne	.-28     	; 0x113a <USB_Host_SendControlRequest+0xdc>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1156:	80 91 a9 00 	lds	r24, 0x00A9
    115a:	80 64       	ori	r24, 0x40	; 64
    115c:	80 93 a9 00 	sts	0x00A9, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1160:	80 91 a6 00 	lds	r24, 0x00A6
    1164:	8e 77       	andi	r24, 0x7E	; 126
    1166:	80 93 a6 00 	sts	0x00A6, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
    116a:	20 97       	sbiw	r28, 0x00	; 0
    116c:	91 f6       	brne	.-92     	; 0x1112 <USB_Host_SendControlRequest+0xb4>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    116e:	80 91 aa 00 	lds	r24, 0x00AA
    1172:	8f 7c       	andi	r24, 0xCF	; 207
    1174:	80 62       	ori	r24, 0x20	; 32
    1176:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    117a:	80 91 a9 00 	lds	r24, 0x00A9
    117e:	8f 7b       	andi	r24, 0xBF	; 191
    1180:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1184:	82 e0       	ldi	r24, 0x02	; 2
    1186:	42 df       	rcall	.-380    	; 0x100c <USB_Host_WaitForIOS>
    1188:	98 2f       	mov	r25, r24
    118a:	88 23       	and	r24, r24
    118c:	09 f0       	breq	.+2      	; 0x1190 <USB_Host_SendControlRequest+0x132>
    118e:	56 c0       	rjmp	.+172    	; 0x123c <USB_Host_SendControlRequest+0x1de>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1190:	80 91 a6 00 	lds	r24, 0x00A6
    1194:	8b 77       	andi	r24, 0x7B	; 123
    1196:	80 93 a6 00 	sts	0x00A6, r24
		  goto End_Of_Control_Send;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    119a:	82 e0       	ldi	r24, 0x02	; 2
    119c:	37 df       	rcall	.-402    	; 0x100c <USB_Host_WaitForIOS>
    119e:	98 2f       	mov	r25, r24
    11a0:	4d c0       	rjmp	.+154    	; 0x123c <USB_Host_SendControlRequest+0x1de>
		  goto End_Of_Control_Send;
	}
	else
	{
		if (DataStream != NULL)
    11a2:	01 15       	cp	r16, r1
    11a4:	11 05       	cpc	r17, r1
    11a6:	a9 f1       	breq	.+106    	; 0x1212 <USB_Host_SendControlRequest+0x1b4>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    11a8:	80 91 aa 00 	lds	r24, 0x00AA
    11ac:	8f 7c       	andi	r24, 0xCF	; 207
    11ae:	80 62       	ori	r24, 0x20	; 32
    11b0:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    11b4:	80 91 a9 00 	lds	r24, 0x00A9
    11b8:	8f 7b       	andi	r24, 0xBF	; 191
    11ba:	80 93 a9 00 	sts	0x00A9, r24
    11be:	1d c0       	rjmp	.+58     	; 0x11fa <USB_Host_SendControlRequest+0x19c>
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    11c0:	82 e0       	ldi	r24, 0x02	; 2
    11c2:	24 df       	rcall	.-440    	; 0x100c <USB_Host_WaitForIOS>
    11c4:	98 2f       	mov	r25, r24
    11c6:	88 23       	and	r24, r24
    11c8:	c9 f5       	brne	.+114    	; 0x123c <USB_Host_SendControlRequest+0x1de>
				  goto End_Of_Control_Send;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    11ca:	80 91 18 01 	lds	r24, 0x0118
    11ce:	28 2f       	mov	r18, r24
    11d0:	30 e0       	ldi	r19, 0x00	; 0
    11d2:	07 c0       	rjmp	.+14     	; 0x11e2 <USB_Host_SendControlRequest+0x184>
				{
					Pipe_Write_8(*(DataStream++));
    11d4:	f8 01       	movw	r30, r16
    11d6:	81 91       	ld	r24, Z+
    11d8:	8f 01       	movw	r16, r30
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    11da:	80 93 af 00 	sts	0x00AF, r24
					DataLen--;
    11de:	21 97       	sbiw	r28, 0x01	; 1
			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
				  goto End_Of_Control_Send;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    11e0:	39 f0       	breq	.+14     	; 0x11f0 <USB_Host_SendControlRequest+0x192>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    11e2:	80 91 f6 00 	lds	r24, 0x00F6
    11e6:	90 91 f7 00 	lds	r25, 0x00F7
    11ea:	82 17       	cp	r24, r18
    11ec:	93 07       	cpc	r25, r19
    11ee:	90 f3       	brcs	.-28     	; 0x11d4 <USB_Host_SendControlRequest+0x176>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    11f0:	80 91 a6 00 	lds	r24, 0x00A6
    11f4:	8b 77       	andi	r24, 0x7B	; 123
    11f6:	80 93 a6 00 	sts	0x00A6, r24
		if (DataStream != NULL)
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
    11fa:	20 97       	sbiw	r28, 0x00	; 0
    11fc:	09 f7       	brne	.-62     	; 0x11c0 <USB_Host_SendControlRequest+0x162>
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    11fe:	82 e0       	ldi	r24, 0x02	; 2
    1200:	05 df       	rcall	.-502    	; 0x100c <USB_Host_WaitForIOS>
    1202:	98 2f       	mov	r25, r24
    1204:	88 23       	and	r24, r24
    1206:	d1 f4       	brne	.+52     	; 0x123c <USB_Host_SendControlRequest+0x1de>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1208:	80 91 a9 00 	lds	r24, 0x00A9
    120c:	80 64       	ori	r24, 0x40	; 64
    120e:	80 93 a9 00 	sts	0x00A9, r24
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1212:	80 91 aa 00 	lds	r24, 0x00AA
    1216:	8f 7c       	andi	r24, 0xCF	; 207
    1218:	80 61       	ori	r24, 0x10	; 16
    121a:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    121e:	80 91 a9 00 	lds	r24, 0x00A9
    1222:	8f 7b       	andi	r24, 0xBF	; 191
    1224:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    1228:	81 e0       	ldi	r24, 0x01	; 1
    122a:	f0 de       	rcall	.-544    	; 0x100c <USB_Host_WaitForIOS>
    122c:	98 2f       	mov	r25, r24
    122e:	88 23       	and	r24, r24
    1230:	29 f4       	brne	.+10     	; 0x123c <USB_Host_SendControlRequest+0x1de>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1232:	80 91 a6 00 	lds	r24, 0x00A6
    1236:	8e 77       	andi	r24, 0x7E	; 126
    1238:	80 93 a6 00 	sts	0x00A6, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    123c:	80 91 a9 00 	lds	r24, 0x00A9
    1240:	80 64       	ori	r24, 0x40	; 64
    1242:	80 93 a9 00 	sts	0x00A9, r24
	}

End_Of_Control_Send:
	Pipe_Freeze();

	if (BusSuspended)
    1246:	f0 fc       	sbrc	r15, 0
    1248:	05 c0       	rjmp	.+10     	; 0x1254 <USB_Host_SendControlRequest+0x1f6>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    124a:	80 91 9e 00 	lds	r24, 0x009E
    124e:	8e 7f       	andi	r24, 0xFE	; 254
    1250:	80 93 9e 00 	sts	0x009E, r24
			 *  \param[in] PipeNumber  Index of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t PipeNumber)
			{
				UPRST = (1 << PipeNumber);
    1254:	81 e0       	ldi	r24, 0x01	; 1
    1256:	80 93 a8 00 	sts	0x00A8, r24
				UPRST = 0;
    125a:	10 92 a8 00 	sts	0x00A8, r1
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
    125e:	89 2f       	mov	r24, r25
    1260:	df 91       	pop	r29
    1262:	cf 91       	pop	r28
    1264:	1f 91       	pop	r17
    1266:	0f 91       	pop	r16
    1268:	ff 90       	pop	r15
    126a:	08 95       	ret

0000126c <USB_Host_SetDeviceConfiguration>:

	return HOST_SENDCONTROL_Successful;
}

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
    126c:	1f 93       	push	r17
    126e:	18 2f       	mov	r17, r24
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
    1270:	10 92 1f 01 	sts	0x011F, r1
    1274:	89 e0       	ldi	r24, 0x09	; 9
    1276:	80 93 20 01 	sts	0x0120, r24
    127a:	10 93 21 01 	sts	0x0121, r17
    127e:	10 92 22 01 	sts	0x0122, r1
    1282:	10 92 24 01 	sts	0x0124, r1
    1286:	10 92 23 01 	sts	0x0123, r1
    128a:	10 92 26 01 	sts	0x0126, r1
    128e:	10 92 25 01 	sts	0x0125, r1
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1292:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);
	
	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) == HOST_SENDCONTROL_Successful)
    1296:	80 e0       	ldi	r24, 0x00	; 0
    1298:	90 e0       	ldi	r25, 0x00	; 0
    129a:	e1 de       	rcall	.-574    	; 0x105e <USB_Host_SendControlRequest>
    129c:	88 23       	and	r24, r24
    129e:	49 f4       	brne	.+18     	; 0x12b2 <USB_Host_SetDeviceConfiguration+0x46>
	{
		USB_Host_ConfigurationNumber = ConfigNumber;
    12a0:	10 93 1d 01 	sts	0x011D, r17
		USB_HostState                = (ConfigNumber) ? HOST_STATE_Configured : HOST_STATE_Addressed;
    12a4:	11 23       	and	r17, r17
    12a6:	11 f4       	brne	.+4      	; 0x12ac <USB_Host_SetDeviceConfiguration+0x40>
    12a8:	9a e0       	ldi	r25, 0x0A	; 10
    12aa:	01 c0       	rjmp	.+2      	; 0x12ae <USB_Host_SetDeviceConfiguration+0x42>
    12ac:	9b e0       	ldi	r25, 0x0B	; 11
    12ae:	90 93 27 01 	sts	0x0127, r25
	}

	return ErrorCode;
}
    12b2:	1f 91       	pop	r17
    12b4:	08 95       	ret

000012b6 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    12b6:	ff 92       	push	r15
    12b8:	0f 93       	push	r16
    12ba:	1f 93       	push	r17
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
    12bc:	07 ea       	ldi	r16, 0xA7	; 167
    12be:	10 e0       	ldi	r17, 0x00	; 0
    12c0:	f8 01       	movw	r30, r16
    12c2:	f0 80       	ld	r15, Z
    12c4:	f7 e0       	ldi	r31, 0x07	; 7
    12c6:	ff 22       	and	r15, r31
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    12c8:	f8 01       	movw	r30, r16
    12ca:	10 82       	st	Z, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    12cc:	cc da       	rcall	.-2664   	; 0x866 <USB_Host_ProcessNextHostState>
    12ce:	f8 01       	movw	r30, r16
    12d0:	f0 82       	st	Z, r15
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
    12d2:	1f 91       	pop	r17
    12d4:	0f 91       	pop	r16
    12d6:	ff 90       	pop	r15
    12d8:	08 95       	ret

000012da <Serial_putchar>:

FILE USARTSerialStream;

int Serial_putchar(char DataByte,
                   FILE *Stream)
{
    12da:	98 2f       	mov	r25, r24
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
    12dc:	80 91 c8 00 	lds	r24, 0x00C8
    12e0:	85 ff       	sbrs	r24, 5
    12e2:	fc cf       	rjmp	.-8      	; 0x12dc <Serial_putchar+0x2>
				UDR1 = DataByte;
    12e4:	90 93 ce 00 	sts	0x00CE, r25
	(void)Stream;

	Serial_SendByte(DataByte);
	return 0;
}
    12e8:	80 e0       	ldi	r24, 0x00	; 0
    12ea:	90 e0       	ldi	r25, 0x00	; 0
    12ec:	08 95       	ret

000012ee <Serial_getchar>:
			 *  \return Boolean \c true if a character has been received, \c false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    12ee:	80 91 c8 00 	lds	r24, 0x00C8

int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    12f2:	87 fd       	sbrc	r24, 7
    12f4:	03 c0       	rjmp	.+6      	; 0x12fc <Serial_getchar+0xe>
    12f6:	2e ef       	ldi	r18, 0xFE	; 254
    12f8:	3f ef       	ldi	r19, 0xFF	; 255
    12fa:	0b c0       	rjmp	.+22     	; 0x1312 <Serial_getchar+0x24>
    12fc:	80 91 c8 00 	lds	r24, 0x00C8
			 *  \return Next byte received from the USART, or a negative value if no byte has been received.
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
    1300:	87 fd       	sbrc	r24, 7
    1302:	03 c0       	rjmp	.+6      	; 0x130a <Serial_getchar+0x1c>
    1304:	2f ef       	ldi	r18, 0xFF	; 255
    1306:	3f ef       	ldi	r19, 0xFF	; 255
    1308:	04 c0       	rjmp	.+8      	; 0x1312 <Serial_getchar+0x24>
				  return -1;
				
				return UDR1;
    130a:	80 91 ce 00 	lds	r24, 0x00CE
    130e:	28 2f       	mov	r18, r24
    1310:	30 e0       	ldi	r19, 0x00	; 0
	  return _FDEV_EOF;

	return Serial_ReceiveByte();
}
    1312:	c9 01       	movw	r24, r18
    1314:	08 95       	ret

00001316 <printf_P>:
    1316:	df 93       	push	r29
    1318:	cf 93       	push	r28
    131a:	cd b7       	in	r28, 0x3d	; 61
    131c:	de b7       	in	r29, 0x3e	; 62
    131e:	fe 01       	movw	r30, r28
    1320:	35 96       	adiw	r30, 0x05	; 5
    1322:	61 91       	ld	r22, Z+
    1324:	71 91       	ld	r23, Z+
    1326:	a0 91 38 01 	lds	r26, 0x0138
    132a:	b0 91 39 01 	lds	r27, 0x0139
    132e:	13 96       	adiw	r26, 0x03	; 3
    1330:	8c 91       	ld	r24, X
    1332:	13 97       	sbiw	r26, 0x03	; 3
    1334:	88 60       	ori	r24, 0x08	; 8
    1336:	13 96       	adiw	r26, 0x03	; 3
    1338:	8c 93       	st	X, r24
    133a:	80 91 38 01 	lds	r24, 0x0138
    133e:	90 91 39 01 	lds	r25, 0x0139
    1342:	af 01       	movw	r20, r30
    1344:	3f d0       	rcall	.+126    	; 0x13c4 <vfprintf>
    1346:	e0 91 38 01 	lds	r30, 0x0138
    134a:	f0 91 39 01 	lds	r31, 0x0139
    134e:	23 81       	ldd	r18, Z+3	; 0x03
    1350:	27 7f       	andi	r18, 0xF7	; 247
    1352:	23 83       	std	Z+3, r18	; 0x03
    1354:	cf 91       	pop	r28
    1356:	df 91       	pop	r29
    1358:	08 95       	ret

0000135a <puts_P>:
    135a:	0f 93       	push	r16
    135c:	1f 93       	push	r17
    135e:	cf 93       	push	r28
    1360:	df 93       	push	r29
    1362:	ec 01       	movw	r28, r24
    1364:	e0 91 38 01 	lds	r30, 0x0138
    1368:	f0 91 39 01 	lds	r31, 0x0139
    136c:	83 81       	ldd	r24, Z+3	; 0x03
    136e:	81 ff       	sbrs	r24, 1
    1370:	21 c0       	rjmp	.+66     	; 0x13b4 <puts_P+0x5a>
    1372:	00 e0       	ldi	r16, 0x00	; 0
    1374:	10 e0       	ldi	r17, 0x00	; 0
    1376:	0e c0       	rjmp	.+28     	; 0x1394 <puts_P+0x3a>
    1378:	e0 91 38 01 	lds	r30, 0x0138
    137c:	f0 91 39 01 	lds	r31, 0x0139
    1380:	20 85       	ldd	r18, Z+8	; 0x08
    1382:	31 85       	ldd	r19, Z+9	; 0x09
    1384:	bf 01       	movw	r22, r30
    1386:	f9 01       	movw	r30, r18
    1388:	09 95       	icall
    138a:	89 2b       	or	r24, r25
    138c:	11 f0       	breq	.+4      	; 0x1392 <puts_P+0x38>
    138e:	0f ef       	ldi	r16, 0xFF	; 255
    1390:	1f ef       	ldi	r17, 0xFF	; 255
    1392:	21 96       	adiw	r28, 0x01	; 1
    1394:	fe 01       	movw	r30, r28
    1396:	84 91       	lpm	r24, Z+
    1398:	88 23       	and	r24, r24
    139a:	71 f7       	brne	.-36     	; 0x1378 <puts_P+0x1e>
    139c:	e0 91 38 01 	lds	r30, 0x0138
    13a0:	f0 91 39 01 	lds	r31, 0x0139
    13a4:	20 85       	ldd	r18, Z+8	; 0x08
    13a6:	31 85       	ldd	r19, Z+9	; 0x09
    13a8:	8a e0       	ldi	r24, 0x0A	; 10
    13aa:	bf 01       	movw	r22, r30
    13ac:	f9 01       	movw	r30, r18
    13ae:	09 95       	icall
    13b0:	89 2b       	or	r24, r25
    13b2:	11 f0       	breq	.+4      	; 0x13b8 <puts_P+0x5e>
    13b4:	0f ef       	ldi	r16, 0xFF	; 255
    13b6:	1f ef       	ldi	r17, 0xFF	; 255
    13b8:	c8 01       	movw	r24, r16
    13ba:	df 91       	pop	r29
    13bc:	cf 91       	pop	r28
    13be:	1f 91       	pop	r17
    13c0:	0f 91       	pop	r16
    13c2:	08 95       	ret

000013c4 <vfprintf>:
    13c4:	2f 92       	push	r2
    13c6:	3f 92       	push	r3
    13c8:	4f 92       	push	r4
    13ca:	5f 92       	push	r5
    13cc:	6f 92       	push	r6
    13ce:	7f 92       	push	r7
    13d0:	8f 92       	push	r8
    13d2:	9f 92       	push	r9
    13d4:	af 92       	push	r10
    13d6:	bf 92       	push	r11
    13d8:	cf 92       	push	r12
    13da:	df 92       	push	r13
    13dc:	ef 92       	push	r14
    13de:	ff 92       	push	r15
    13e0:	0f 93       	push	r16
    13e2:	1f 93       	push	r17
    13e4:	df 93       	push	r29
    13e6:	cf 93       	push	r28
    13e8:	cd b7       	in	r28, 0x3d	; 61
    13ea:	de b7       	in	r29, 0x3e	; 62
    13ec:	2b 97       	sbiw	r28, 0x0b	; 11
    13ee:	0f b6       	in	r0, 0x3f	; 63
    13f0:	f8 94       	cli
    13f2:	de bf       	out	0x3e, r29	; 62
    13f4:	0f be       	out	0x3f, r0	; 63
    13f6:	cd bf       	out	0x3d, r28	; 61
    13f8:	3c 01       	movw	r6, r24
    13fa:	2b 01       	movw	r4, r22
    13fc:	5a 01       	movw	r10, r20
    13fe:	fc 01       	movw	r30, r24
    1400:	17 82       	std	Z+7, r1	; 0x07
    1402:	16 82       	std	Z+6, r1	; 0x06
    1404:	83 81       	ldd	r24, Z+3	; 0x03
    1406:	81 fd       	sbrc	r24, 1
    1408:	03 c0       	rjmp	.+6      	; 0x1410 <vfprintf+0x4c>
    140a:	6f ef       	ldi	r22, 0xFF	; 255
    140c:	7f ef       	ldi	r23, 0xFF	; 255
    140e:	b9 c1       	rjmp	.+882    	; 0x1782 <vfprintf+0x3be>
    1410:	9a e0       	ldi	r25, 0x0A	; 10
    1412:	89 2e       	mov	r8, r25
    1414:	1e 01       	movw	r2, r28
    1416:	08 94       	sec
    1418:	21 1c       	adc	r2, r1
    141a:	31 1c       	adc	r3, r1
    141c:	f3 01       	movw	r30, r6
    141e:	23 81       	ldd	r18, Z+3	; 0x03
    1420:	f2 01       	movw	r30, r4
    1422:	23 fd       	sbrc	r18, 3
    1424:	85 91       	lpm	r24, Z+
    1426:	23 ff       	sbrs	r18, 3
    1428:	81 91       	ld	r24, Z+
    142a:	2f 01       	movw	r4, r30
    142c:	88 23       	and	r24, r24
    142e:	09 f4       	brne	.+2      	; 0x1432 <vfprintf+0x6e>
    1430:	a5 c1       	rjmp	.+842    	; 0x177c <vfprintf+0x3b8>
    1432:	85 32       	cpi	r24, 0x25	; 37
    1434:	39 f4       	brne	.+14     	; 0x1444 <vfprintf+0x80>
    1436:	23 fd       	sbrc	r18, 3
    1438:	85 91       	lpm	r24, Z+
    143a:	23 ff       	sbrs	r18, 3
    143c:	81 91       	ld	r24, Z+
    143e:	2f 01       	movw	r4, r30
    1440:	85 32       	cpi	r24, 0x25	; 37
    1442:	21 f4       	brne	.+8      	; 0x144c <vfprintf+0x88>
    1444:	90 e0       	ldi	r25, 0x00	; 0
    1446:	b3 01       	movw	r22, r6
    1448:	cc d1       	rcall	.+920    	; 0x17e2 <fputc>
    144a:	e8 cf       	rjmp	.-48     	; 0x141c <vfprintf+0x58>
    144c:	98 2f       	mov	r25, r24
    144e:	ff 24       	eor	r15, r15
    1450:	ee 24       	eor	r14, r14
    1452:	99 24       	eor	r9, r9
    1454:	ff e1       	ldi	r31, 0x1F	; 31
    1456:	ff 15       	cp	r31, r15
    1458:	d0 f0       	brcs	.+52     	; 0x148e <vfprintf+0xca>
    145a:	9b 32       	cpi	r25, 0x2B	; 43
    145c:	69 f0       	breq	.+26     	; 0x1478 <vfprintf+0xb4>
    145e:	9c 32       	cpi	r25, 0x2C	; 44
    1460:	28 f4       	brcc	.+10     	; 0x146c <vfprintf+0xa8>
    1462:	90 32       	cpi	r25, 0x20	; 32
    1464:	59 f0       	breq	.+22     	; 0x147c <vfprintf+0xb8>
    1466:	93 32       	cpi	r25, 0x23	; 35
    1468:	91 f4       	brne	.+36     	; 0x148e <vfprintf+0xca>
    146a:	0e c0       	rjmp	.+28     	; 0x1488 <vfprintf+0xc4>
    146c:	9d 32       	cpi	r25, 0x2D	; 45
    146e:	49 f0       	breq	.+18     	; 0x1482 <vfprintf+0xbe>
    1470:	90 33       	cpi	r25, 0x30	; 48
    1472:	69 f4       	brne	.+26     	; 0x148e <vfprintf+0xca>
    1474:	41 e0       	ldi	r20, 0x01	; 1
    1476:	24 c0       	rjmp	.+72     	; 0x14c0 <vfprintf+0xfc>
    1478:	52 e0       	ldi	r21, 0x02	; 2
    147a:	f5 2a       	or	r15, r21
    147c:	84 e0       	ldi	r24, 0x04	; 4
    147e:	f8 2a       	or	r15, r24
    1480:	28 c0       	rjmp	.+80     	; 0x14d2 <vfprintf+0x10e>
    1482:	98 e0       	ldi	r25, 0x08	; 8
    1484:	f9 2a       	or	r15, r25
    1486:	25 c0       	rjmp	.+74     	; 0x14d2 <vfprintf+0x10e>
    1488:	e0 e1       	ldi	r30, 0x10	; 16
    148a:	fe 2a       	or	r15, r30
    148c:	22 c0       	rjmp	.+68     	; 0x14d2 <vfprintf+0x10e>
    148e:	f7 fc       	sbrc	r15, 7
    1490:	29 c0       	rjmp	.+82     	; 0x14e4 <vfprintf+0x120>
    1492:	89 2f       	mov	r24, r25
    1494:	80 53       	subi	r24, 0x30	; 48
    1496:	8a 30       	cpi	r24, 0x0A	; 10
    1498:	70 f4       	brcc	.+28     	; 0x14b6 <vfprintf+0xf2>
    149a:	f6 fe       	sbrs	r15, 6
    149c:	05 c0       	rjmp	.+10     	; 0x14a8 <vfprintf+0xe4>
    149e:	98 9c       	mul	r9, r8
    14a0:	90 2c       	mov	r9, r0
    14a2:	11 24       	eor	r1, r1
    14a4:	98 0e       	add	r9, r24
    14a6:	15 c0       	rjmp	.+42     	; 0x14d2 <vfprintf+0x10e>
    14a8:	e8 9c       	mul	r14, r8
    14aa:	e0 2c       	mov	r14, r0
    14ac:	11 24       	eor	r1, r1
    14ae:	e8 0e       	add	r14, r24
    14b0:	f0 e2       	ldi	r31, 0x20	; 32
    14b2:	ff 2a       	or	r15, r31
    14b4:	0e c0       	rjmp	.+28     	; 0x14d2 <vfprintf+0x10e>
    14b6:	9e 32       	cpi	r25, 0x2E	; 46
    14b8:	29 f4       	brne	.+10     	; 0x14c4 <vfprintf+0x100>
    14ba:	f6 fc       	sbrc	r15, 6
    14bc:	5f c1       	rjmp	.+702    	; 0x177c <vfprintf+0x3b8>
    14be:	40 e4       	ldi	r20, 0x40	; 64
    14c0:	f4 2a       	or	r15, r20
    14c2:	07 c0       	rjmp	.+14     	; 0x14d2 <vfprintf+0x10e>
    14c4:	9c 36       	cpi	r25, 0x6C	; 108
    14c6:	19 f4       	brne	.+6      	; 0x14ce <vfprintf+0x10a>
    14c8:	50 e8       	ldi	r21, 0x80	; 128
    14ca:	f5 2a       	or	r15, r21
    14cc:	02 c0       	rjmp	.+4      	; 0x14d2 <vfprintf+0x10e>
    14ce:	98 36       	cpi	r25, 0x68	; 104
    14d0:	49 f4       	brne	.+18     	; 0x14e4 <vfprintf+0x120>
    14d2:	f2 01       	movw	r30, r4
    14d4:	23 fd       	sbrc	r18, 3
    14d6:	95 91       	lpm	r25, Z+
    14d8:	23 ff       	sbrs	r18, 3
    14da:	91 91       	ld	r25, Z+
    14dc:	2f 01       	movw	r4, r30
    14de:	99 23       	and	r25, r25
    14e0:	09 f0       	breq	.+2      	; 0x14e4 <vfprintf+0x120>
    14e2:	b8 cf       	rjmp	.-144    	; 0x1454 <vfprintf+0x90>
    14e4:	89 2f       	mov	r24, r25
    14e6:	85 54       	subi	r24, 0x45	; 69
    14e8:	83 30       	cpi	r24, 0x03	; 3
    14ea:	18 f0       	brcs	.+6      	; 0x14f2 <vfprintf+0x12e>
    14ec:	80 52       	subi	r24, 0x20	; 32
    14ee:	83 30       	cpi	r24, 0x03	; 3
    14f0:	38 f4       	brcc	.+14     	; 0x1500 <vfprintf+0x13c>
    14f2:	44 e0       	ldi	r20, 0x04	; 4
    14f4:	50 e0       	ldi	r21, 0x00	; 0
    14f6:	a4 0e       	add	r10, r20
    14f8:	b5 1e       	adc	r11, r21
    14fa:	5f e3       	ldi	r21, 0x3F	; 63
    14fc:	59 83       	std	Y+1, r21	; 0x01
    14fe:	0f c0       	rjmp	.+30     	; 0x151e <vfprintf+0x15a>
    1500:	93 36       	cpi	r25, 0x63	; 99
    1502:	31 f0       	breq	.+12     	; 0x1510 <vfprintf+0x14c>
    1504:	93 37       	cpi	r25, 0x73	; 115
    1506:	79 f0       	breq	.+30     	; 0x1526 <vfprintf+0x162>
    1508:	93 35       	cpi	r25, 0x53	; 83
    150a:	09 f0       	breq	.+2      	; 0x150e <vfprintf+0x14a>
    150c:	52 c0       	rjmp	.+164    	; 0x15b2 <vfprintf+0x1ee>
    150e:	1f c0       	rjmp	.+62     	; 0x154e <vfprintf+0x18a>
    1510:	f5 01       	movw	r30, r10
    1512:	80 81       	ld	r24, Z
    1514:	89 83       	std	Y+1, r24	; 0x01
    1516:	42 e0       	ldi	r20, 0x02	; 2
    1518:	50 e0       	ldi	r21, 0x00	; 0
    151a:	a4 0e       	add	r10, r20
    151c:	b5 1e       	adc	r11, r21
    151e:	61 01       	movw	r12, r2
    1520:	01 e0       	ldi	r16, 0x01	; 1
    1522:	10 e0       	ldi	r17, 0x00	; 0
    1524:	11 c0       	rjmp	.+34     	; 0x1548 <vfprintf+0x184>
    1526:	f5 01       	movw	r30, r10
    1528:	c0 80       	ld	r12, Z
    152a:	d1 80       	ldd	r13, Z+1	; 0x01
    152c:	f6 fc       	sbrc	r15, 6
    152e:	03 c0       	rjmp	.+6      	; 0x1536 <vfprintf+0x172>
    1530:	6f ef       	ldi	r22, 0xFF	; 255
    1532:	7f ef       	ldi	r23, 0xFF	; 255
    1534:	02 c0       	rjmp	.+4      	; 0x153a <vfprintf+0x176>
    1536:	69 2d       	mov	r22, r9
    1538:	70 e0       	ldi	r23, 0x00	; 0
    153a:	42 e0       	ldi	r20, 0x02	; 2
    153c:	50 e0       	ldi	r21, 0x00	; 0
    153e:	a4 0e       	add	r10, r20
    1540:	b5 1e       	adc	r11, r21
    1542:	c6 01       	movw	r24, r12
    1544:	43 d1       	rcall	.+646    	; 0x17cc <strnlen>
    1546:	8c 01       	movw	r16, r24
    1548:	5f e7       	ldi	r21, 0x7F	; 127
    154a:	f5 22       	and	r15, r21
    154c:	13 c0       	rjmp	.+38     	; 0x1574 <vfprintf+0x1b0>
    154e:	f5 01       	movw	r30, r10
    1550:	c0 80       	ld	r12, Z
    1552:	d1 80       	ldd	r13, Z+1	; 0x01
    1554:	f6 fc       	sbrc	r15, 6
    1556:	03 c0       	rjmp	.+6      	; 0x155e <vfprintf+0x19a>
    1558:	6f ef       	ldi	r22, 0xFF	; 255
    155a:	7f ef       	ldi	r23, 0xFF	; 255
    155c:	02 c0       	rjmp	.+4      	; 0x1562 <vfprintf+0x19e>
    155e:	69 2d       	mov	r22, r9
    1560:	70 e0       	ldi	r23, 0x00	; 0
    1562:	42 e0       	ldi	r20, 0x02	; 2
    1564:	50 e0       	ldi	r21, 0x00	; 0
    1566:	a4 0e       	add	r10, r20
    1568:	b5 1e       	adc	r11, r21
    156a:	c6 01       	movw	r24, r12
    156c:	24 d1       	rcall	.+584    	; 0x17b6 <strnlen_P>
    156e:	8c 01       	movw	r16, r24
    1570:	50 e8       	ldi	r21, 0x80	; 128
    1572:	f5 2a       	or	r15, r21
    1574:	f3 fe       	sbrs	r15, 3
    1576:	06 c0       	rjmp	.+12     	; 0x1584 <vfprintf+0x1c0>
    1578:	18 c0       	rjmp	.+48     	; 0x15aa <vfprintf+0x1e6>
    157a:	80 e2       	ldi	r24, 0x20	; 32
    157c:	90 e0       	ldi	r25, 0x00	; 0
    157e:	b3 01       	movw	r22, r6
    1580:	30 d1       	rcall	.+608    	; 0x17e2 <fputc>
    1582:	ea 94       	dec	r14
    1584:	8e 2d       	mov	r24, r14
    1586:	90 e0       	ldi	r25, 0x00	; 0
    1588:	08 17       	cp	r16, r24
    158a:	19 07       	cpc	r17, r25
    158c:	b0 f3       	brcs	.-20     	; 0x157a <vfprintf+0x1b6>
    158e:	0d c0       	rjmp	.+26     	; 0x15aa <vfprintf+0x1e6>
    1590:	f6 01       	movw	r30, r12
    1592:	f7 fc       	sbrc	r15, 7
    1594:	85 91       	lpm	r24, Z+
    1596:	f7 fe       	sbrs	r15, 7
    1598:	81 91       	ld	r24, Z+
    159a:	6f 01       	movw	r12, r30
    159c:	90 e0       	ldi	r25, 0x00	; 0
    159e:	b3 01       	movw	r22, r6
    15a0:	20 d1       	rcall	.+576    	; 0x17e2 <fputc>
    15a2:	e1 10       	cpse	r14, r1
    15a4:	ea 94       	dec	r14
    15a6:	01 50       	subi	r16, 0x01	; 1
    15a8:	10 40       	sbci	r17, 0x00	; 0
    15aa:	01 15       	cp	r16, r1
    15ac:	11 05       	cpc	r17, r1
    15ae:	81 f7       	brne	.-32     	; 0x1590 <vfprintf+0x1cc>
    15b0:	e2 c0       	rjmp	.+452    	; 0x1776 <vfprintf+0x3b2>
    15b2:	94 36       	cpi	r25, 0x64	; 100
    15b4:	11 f0       	breq	.+4      	; 0x15ba <vfprintf+0x1f6>
    15b6:	99 36       	cpi	r25, 0x69	; 105
    15b8:	61 f5       	brne	.+88     	; 0x1612 <vfprintf+0x24e>
    15ba:	f7 fe       	sbrs	r15, 7
    15bc:	08 c0       	rjmp	.+16     	; 0x15ce <vfprintf+0x20a>
    15be:	f5 01       	movw	r30, r10
    15c0:	20 81       	ld	r18, Z
    15c2:	31 81       	ldd	r19, Z+1	; 0x01
    15c4:	42 81       	ldd	r20, Z+2	; 0x02
    15c6:	53 81       	ldd	r21, Z+3	; 0x03
    15c8:	84 e0       	ldi	r24, 0x04	; 4
    15ca:	90 e0       	ldi	r25, 0x00	; 0
    15cc:	0a c0       	rjmp	.+20     	; 0x15e2 <vfprintf+0x21e>
    15ce:	f5 01       	movw	r30, r10
    15d0:	80 81       	ld	r24, Z
    15d2:	91 81       	ldd	r25, Z+1	; 0x01
    15d4:	9c 01       	movw	r18, r24
    15d6:	44 27       	eor	r20, r20
    15d8:	37 fd       	sbrc	r19, 7
    15da:	40 95       	com	r20
    15dc:	54 2f       	mov	r21, r20
    15de:	82 e0       	ldi	r24, 0x02	; 2
    15e0:	90 e0       	ldi	r25, 0x00	; 0
    15e2:	a8 0e       	add	r10, r24
    15e4:	b9 1e       	adc	r11, r25
    15e6:	9f e6       	ldi	r25, 0x6F	; 111
    15e8:	f9 22       	and	r15, r25
    15ea:	57 ff       	sbrs	r21, 7
    15ec:	09 c0       	rjmp	.+18     	; 0x1600 <vfprintf+0x23c>
    15ee:	50 95       	com	r21
    15f0:	40 95       	com	r20
    15f2:	30 95       	com	r19
    15f4:	21 95       	neg	r18
    15f6:	3f 4f       	sbci	r19, 0xFF	; 255
    15f8:	4f 4f       	sbci	r20, 0xFF	; 255
    15fa:	5f 4f       	sbci	r21, 0xFF	; 255
    15fc:	e0 e8       	ldi	r30, 0x80	; 128
    15fe:	fe 2a       	or	r15, r30
    1600:	ca 01       	movw	r24, r20
    1602:	b9 01       	movw	r22, r18
    1604:	a1 01       	movw	r20, r2
    1606:	2a e0       	ldi	r18, 0x0A	; 10
    1608:	30 e0       	ldi	r19, 0x00	; 0
    160a:	17 d1       	rcall	.+558    	; 0x183a <__ultoa_invert>
    160c:	d8 2e       	mov	r13, r24
    160e:	d2 18       	sub	r13, r2
    1610:	3f c0       	rjmp	.+126    	; 0x1690 <vfprintf+0x2cc>
    1612:	95 37       	cpi	r25, 0x75	; 117
    1614:	29 f4       	brne	.+10     	; 0x1620 <vfprintf+0x25c>
    1616:	1f 2d       	mov	r17, r15
    1618:	1f 7e       	andi	r17, 0xEF	; 239
    161a:	2a e0       	ldi	r18, 0x0A	; 10
    161c:	30 e0       	ldi	r19, 0x00	; 0
    161e:	1d c0       	rjmp	.+58     	; 0x165a <vfprintf+0x296>
    1620:	1f 2d       	mov	r17, r15
    1622:	19 7f       	andi	r17, 0xF9	; 249
    1624:	9f 36       	cpi	r25, 0x6F	; 111
    1626:	61 f0       	breq	.+24     	; 0x1640 <vfprintf+0x27c>
    1628:	90 37       	cpi	r25, 0x70	; 112
    162a:	20 f4       	brcc	.+8      	; 0x1634 <vfprintf+0x270>
    162c:	98 35       	cpi	r25, 0x58	; 88
    162e:	09 f0       	breq	.+2      	; 0x1632 <vfprintf+0x26e>
    1630:	a5 c0       	rjmp	.+330    	; 0x177c <vfprintf+0x3b8>
    1632:	0f c0       	rjmp	.+30     	; 0x1652 <vfprintf+0x28e>
    1634:	90 37       	cpi	r25, 0x70	; 112
    1636:	39 f0       	breq	.+14     	; 0x1646 <vfprintf+0x282>
    1638:	98 37       	cpi	r25, 0x78	; 120
    163a:	09 f0       	breq	.+2      	; 0x163e <vfprintf+0x27a>
    163c:	9f c0       	rjmp	.+318    	; 0x177c <vfprintf+0x3b8>
    163e:	04 c0       	rjmp	.+8      	; 0x1648 <vfprintf+0x284>
    1640:	28 e0       	ldi	r18, 0x08	; 8
    1642:	30 e0       	ldi	r19, 0x00	; 0
    1644:	0a c0       	rjmp	.+20     	; 0x165a <vfprintf+0x296>
    1646:	10 61       	ori	r17, 0x10	; 16
    1648:	14 fd       	sbrc	r17, 4
    164a:	14 60       	ori	r17, 0x04	; 4
    164c:	20 e1       	ldi	r18, 0x10	; 16
    164e:	30 e0       	ldi	r19, 0x00	; 0
    1650:	04 c0       	rjmp	.+8      	; 0x165a <vfprintf+0x296>
    1652:	14 fd       	sbrc	r17, 4
    1654:	16 60       	ori	r17, 0x06	; 6
    1656:	20 e1       	ldi	r18, 0x10	; 16
    1658:	32 e0       	ldi	r19, 0x02	; 2
    165a:	17 ff       	sbrs	r17, 7
    165c:	08 c0       	rjmp	.+16     	; 0x166e <vfprintf+0x2aa>
    165e:	f5 01       	movw	r30, r10
    1660:	60 81       	ld	r22, Z
    1662:	71 81       	ldd	r23, Z+1	; 0x01
    1664:	82 81       	ldd	r24, Z+2	; 0x02
    1666:	93 81       	ldd	r25, Z+3	; 0x03
    1668:	44 e0       	ldi	r20, 0x04	; 4
    166a:	50 e0       	ldi	r21, 0x00	; 0
    166c:	08 c0       	rjmp	.+16     	; 0x167e <vfprintf+0x2ba>
    166e:	f5 01       	movw	r30, r10
    1670:	80 81       	ld	r24, Z
    1672:	91 81       	ldd	r25, Z+1	; 0x01
    1674:	bc 01       	movw	r22, r24
    1676:	80 e0       	ldi	r24, 0x00	; 0
    1678:	90 e0       	ldi	r25, 0x00	; 0
    167a:	42 e0       	ldi	r20, 0x02	; 2
    167c:	50 e0       	ldi	r21, 0x00	; 0
    167e:	a4 0e       	add	r10, r20
    1680:	b5 1e       	adc	r11, r21
    1682:	a1 01       	movw	r20, r2
    1684:	da d0       	rcall	.+436    	; 0x183a <__ultoa_invert>
    1686:	d8 2e       	mov	r13, r24
    1688:	d2 18       	sub	r13, r2
    168a:	8f e7       	ldi	r24, 0x7F	; 127
    168c:	f8 2e       	mov	r15, r24
    168e:	f1 22       	and	r15, r17
    1690:	f6 fe       	sbrs	r15, 6
    1692:	0b c0       	rjmp	.+22     	; 0x16aa <vfprintf+0x2e6>
    1694:	5e ef       	ldi	r21, 0xFE	; 254
    1696:	f5 22       	and	r15, r21
    1698:	d9 14       	cp	r13, r9
    169a:	38 f4       	brcc	.+14     	; 0x16aa <vfprintf+0x2e6>
    169c:	f4 fe       	sbrs	r15, 4
    169e:	07 c0       	rjmp	.+14     	; 0x16ae <vfprintf+0x2ea>
    16a0:	f2 fc       	sbrc	r15, 2
    16a2:	05 c0       	rjmp	.+10     	; 0x16ae <vfprintf+0x2ea>
    16a4:	8f ee       	ldi	r24, 0xEF	; 239
    16a6:	f8 22       	and	r15, r24
    16a8:	02 c0       	rjmp	.+4      	; 0x16ae <vfprintf+0x2ea>
    16aa:	1d 2d       	mov	r17, r13
    16ac:	01 c0       	rjmp	.+2      	; 0x16b0 <vfprintf+0x2ec>
    16ae:	19 2d       	mov	r17, r9
    16b0:	f4 fe       	sbrs	r15, 4
    16b2:	0d c0       	rjmp	.+26     	; 0x16ce <vfprintf+0x30a>
    16b4:	fe 01       	movw	r30, r28
    16b6:	ed 0d       	add	r30, r13
    16b8:	f1 1d       	adc	r31, r1
    16ba:	80 81       	ld	r24, Z
    16bc:	80 33       	cpi	r24, 0x30	; 48
    16be:	19 f4       	brne	.+6      	; 0x16c6 <vfprintf+0x302>
    16c0:	99 ee       	ldi	r25, 0xE9	; 233
    16c2:	f9 22       	and	r15, r25
    16c4:	08 c0       	rjmp	.+16     	; 0x16d6 <vfprintf+0x312>
    16c6:	1f 5f       	subi	r17, 0xFF	; 255
    16c8:	f2 fe       	sbrs	r15, 2
    16ca:	05 c0       	rjmp	.+10     	; 0x16d6 <vfprintf+0x312>
    16cc:	03 c0       	rjmp	.+6      	; 0x16d4 <vfprintf+0x310>
    16ce:	8f 2d       	mov	r24, r15
    16d0:	86 78       	andi	r24, 0x86	; 134
    16d2:	09 f0       	breq	.+2      	; 0x16d6 <vfprintf+0x312>
    16d4:	1f 5f       	subi	r17, 0xFF	; 255
    16d6:	0f 2d       	mov	r16, r15
    16d8:	f3 fc       	sbrc	r15, 3
    16da:	13 c0       	rjmp	.+38     	; 0x1702 <vfprintf+0x33e>
    16dc:	f0 fe       	sbrs	r15, 0
    16de:	0e c0       	rjmp	.+28     	; 0x16fc <vfprintf+0x338>
    16e0:	1e 15       	cp	r17, r14
    16e2:	10 f0       	brcs	.+4      	; 0x16e8 <vfprintf+0x324>
    16e4:	9d 2c       	mov	r9, r13
    16e6:	0a c0       	rjmp	.+20     	; 0x16fc <vfprintf+0x338>
    16e8:	9d 2c       	mov	r9, r13
    16ea:	9e 0c       	add	r9, r14
    16ec:	91 1a       	sub	r9, r17
    16ee:	1e 2d       	mov	r17, r14
    16f0:	05 c0       	rjmp	.+10     	; 0x16fc <vfprintf+0x338>
    16f2:	80 e2       	ldi	r24, 0x20	; 32
    16f4:	90 e0       	ldi	r25, 0x00	; 0
    16f6:	b3 01       	movw	r22, r6
    16f8:	74 d0       	rcall	.+232    	; 0x17e2 <fputc>
    16fa:	1f 5f       	subi	r17, 0xFF	; 255
    16fc:	1e 15       	cp	r17, r14
    16fe:	c8 f3       	brcs	.-14     	; 0x16f2 <vfprintf+0x32e>
    1700:	04 c0       	rjmp	.+8      	; 0x170a <vfprintf+0x346>
    1702:	1e 15       	cp	r17, r14
    1704:	10 f4       	brcc	.+4      	; 0x170a <vfprintf+0x346>
    1706:	e1 1a       	sub	r14, r17
    1708:	01 c0       	rjmp	.+2      	; 0x170c <vfprintf+0x348>
    170a:	ee 24       	eor	r14, r14
    170c:	04 ff       	sbrs	r16, 4
    170e:	0e c0       	rjmp	.+28     	; 0x172c <vfprintf+0x368>
    1710:	80 e3       	ldi	r24, 0x30	; 48
    1712:	90 e0       	ldi	r25, 0x00	; 0
    1714:	b3 01       	movw	r22, r6
    1716:	65 d0       	rcall	.+202    	; 0x17e2 <fputc>
    1718:	02 ff       	sbrs	r16, 2
    171a:	1b c0       	rjmp	.+54     	; 0x1752 <vfprintf+0x38e>
    171c:	01 fd       	sbrc	r16, 1
    171e:	03 c0       	rjmp	.+6      	; 0x1726 <vfprintf+0x362>
    1720:	88 e7       	ldi	r24, 0x78	; 120
    1722:	90 e0       	ldi	r25, 0x00	; 0
    1724:	0e c0       	rjmp	.+28     	; 0x1742 <vfprintf+0x37e>
    1726:	88 e5       	ldi	r24, 0x58	; 88
    1728:	90 e0       	ldi	r25, 0x00	; 0
    172a:	0b c0       	rjmp	.+22     	; 0x1742 <vfprintf+0x37e>
    172c:	80 2f       	mov	r24, r16
    172e:	86 78       	andi	r24, 0x86	; 134
    1730:	81 f0       	breq	.+32     	; 0x1752 <vfprintf+0x38e>
    1732:	01 ff       	sbrs	r16, 1
    1734:	02 c0       	rjmp	.+4      	; 0x173a <vfprintf+0x376>
    1736:	8b e2       	ldi	r24, 0x2B	; 43
    1738:	01 c0       	rjmp	.+2      	; 0x173c <vfprintf+0x378>
    173a:	80 e2       	ldi	r24, 0x20	; 32
    173c:	f7 fc       	sbrc	r15, 7
    173e:	8d e2       	ldi	r24, 0x2D	; 45
    1740:	90 e0       	ldi	r25, 0x00	; 0
    1742:	b3 01       	movw	r22, r6
    1744:	4e d0       	rcall	.+156    	; 0x17e2 <fputc>
    1746:	05 c0       	rjmp	.+10     	; 0x1752 <vfprintf+0x38e>
    1748:	80 e3       	ldi	r24, 0x30	; 48
    174a:	90 e0       	ldi	r25, 0x00	; 0
    174c:	b3 01       	movw	r22, r6
    174e:	49 d0       	rcall	.+146    	; 0x17e2 <fputc>
    1750:	9a 94       	dec	r9
    1752:	d9 14       	cp	r13, r9
    1754:	c8 f3       	brcs	.-14     	; 0x1748 <vfprintf+0x384>
    1756:	da 94       	dec	r13
    1758:	f1 01       	movw	r30, r2
    175a:	ed 0d       	add	r30, r13
    175c:	f1 1d       	adc	r31, r1
    175e:	80 81       	ld	r24, Z
    1760:	90 e0       	ldi	r25, 0x00	; 0
    1762:	b3 01       	movw	r22, r6
    1764:	3e d0       	rcall	.+124    	; 0x17e2 <fputc>
    1766:	dd 20       	and	r13, r13
    1768:	b1 f7       	brne	.-20     	; 0x1756 <vfprintf+0x392>
    176a:	05 c0       	rjmp	.+10     	; 0x1776 <vfprintf+0x3b2>
    176c:	80 e2       	ldi	r24, 0x20	; 32
    176e:	90 e0       	ldi	r25, 0x00	; 0
    1770:	b3 01       	movw	r22, r6
    1772:	37 d0       	rcall	.+110    	; 0x17e2 <fputc>
    1774:	ea 94       	dec	r14
    1776:	ee 20       	and	r14, r14
    1778:	c9 f7       	brne	.-14     	; 0x176c <vfprintf+0x3a8>
    177a:	50 ce       	rjmp	.-864    	; 0x141c <vfprintf+0x58>
    177c:	f3 01       	movw	r30, r6
    177e:	66 81       	ldd	r22, Z+6	; 0x06
    1780:	77 81       	ldd	r23, Z+7	; 0x07
    1782:	cb 01       	movw	r24, r22
    1784:	2b 96       	adiw	r28, 0x0b	; 11
    1786:	0f b6       	in	r0, 0x3f	; 63
    1788:	f8 94       	cli
    178a:	de bf       	out	0x3e, r29	; 62
    178c:	0f be       	out	0x3f, r0	; 63
    178e:	cd bf       	out	0x3d, r28	; 61
    1790:	cf 91       	pop	r28
    1792:	df 91       	pop	r29
    1794:	1f 91       	pop	r17
    1796:	0f 91       	pop	r16
    1798:	ff 90       	pop	r15
    179a:	ef 90       	pop	r14
    179c:	df 90       	pop	r13
    179e:	cf 90       	pop	r12
    17a0:	bf 90       	pop	r11
    17a2:	af 90       	pop	r10
    17a4:	9f 90       	pop	r9
    17a6:	8f 90       	pop	r8
    17a8:	7f 90       	pop	r7
    17aa:	6f 90       	pop	r6
    17ac:	5f 90       	pop	r5
    17ae:	4f 90       	pop	r4
    17b0:	3f 90       	pop	r3
    17b2:	2f 90       	pop	r2
    17b4:	08 95       	ret

000017b6 <strnlen_P>:
    17b6:	fc 01       	movw	r30, r24
    17b8:	05 90       	lpm	r0, Z+
    17ba:	61 50       	subi	r22, 0x01	; 1
    17bc:	70 40       	sbci	r23, 0x00	; 0
    17be:	01 10       	cpse	r0, r1
    17c0:	d8 f7       	brcc	.-10     	; 0x17b8 <strnlen_P+0x2>
    17c2:	80 95       	com	r24
    17c4:	90 95       	com	r25
    17c6:	8e 0f       	add	r24, r30
    17c8:	9f 1f       	adc	r25, r31
    17ca:	08 95       	ret

000017cc <strnlen>:
    17cc:	fc 01       	movw	r30, r24
    17ce:	61 50       	subi	r22, 0x01	; 1
    17d0:	70 40       	sbci	r23, 0x00	; 0
    17d2:	01 90       	ld	r0, Z+
    17d4:	01 10       	cpse	r0, r1
    17d6:	d8 f7       	brcc	.-10     	; 0x17ce <strnlen+0x2>
    17d8:	80 95       	com	r24
    17da:	90 95       	com	r25
    17dc:	8e 0f       	add	r24, r30
    17de:	9f 1f       	adc	r25, r31
    17e0:	08 95       	ret

000017e2 <fputc>:
    17e2:	0f 93       	push	r16
    17e4:	1f 93       	push	r17
    17e6:	cf 93       	push	r28
    17e8:	df 93       	push	r29
    17ea:	8c 01       	movw	r16, r24
    17ec:	eb 01       	movw	r28, r22
    17ee:	8b 81       	ldd	r24, Y+3	; 0x03
    17f0:	81 ff       	sbrs	r24, 1
    17f2:	1b c0       	rjmp	.+54     	; 0x182a <fputc+0x48>
    17f4:	82 ff       	sbrs	r24, 2
    17f6:	0d c0       	rjmp	.+26     	; 0x1812 <fputc+0x30>
    17f8:	2e 81       	ldd	r18, Y+6	; 0x06
    17fa:	3f 81       	ldd	r19, Y+7	; 0x07
    17fc:	8c 81       	ldd	r24, Y+4	; 0x04
    17fe:	9d 81       	ldd	r25, Y+5	; 0x05
    1800:	28 17       	cp	r18, r24
    1802:	39 07       	cpc	r19, r25
    1804:	64 f4       	brge	.+24     	; 0x181e <fputc+0x3c>
    1806:	e8 81       	ld	r30, Y
    1808:	f9 81       	ldd	r31, Y+1	; 0x01
    180a:	01 93       	st	Z+, r16
    180c:	f9 83       	std	Y+1, r31	; 0x01
    180e:	e8 83       	st	Y, r30
    1810:	06 c0       	rjmp	.+12     	; 0x181e <fputc+0x3c>
    1812:	e8 85       	ldd	r30, Y+8	; 0x08
    1814:	f9 85       	ldd	r31, Y+9	; 0x09
    1816:	80 2f       	mov	r24, r16
    1818:	09 95       	icall
    181a:	89 2b       	or	r24, r25
    181c:	31 f4       	brne	.+12     	; 0x182a <fputc+0x48>
    181e:	8e 81       	ldd	r24, Y+6	; 0x06
    1820:	9f 81       	ldd	r25, Y+7	; 0x07
    1822:	01 96       	adiw	r24, 0x01	; 1
    1824:	9f 83       	std	Y+7, r25	; 0x07
    1826:	8e 83       	std	Y+6, r24	; 0x06
    1828:	02 c0       	rjmp	.+4      	; 0x182e <fputc+0x4c>
    182a:	0f ef       	ldi	r16, 0xFF	; 255
    182c:	1f ef       	ldi	r17, 0xFF	; 255
    182e:	c8 01       	movw	r24, r16
    1830:	df 91       	pop	r29
    1832:	cf 91       	pop	r28
    1834:	1f 91       	pop	r17
    1836:	0f 91       	pop	r16
    1838:	08 95       	ret

0000183a <__ultoa_invert>:
    183a:	fa 01       	movw	r30, r20
    183c:	aa 27       	eor	r26, r26
    183e:	28 30       	cpi	r18, 0x08	; 8
    1840:	51 f1       	breq	.+84     	; 0x1896 <__ultoa_invert+0x5c>
    1842:	20 31       	cpi	r18, 0x10	; 16
    1844:	81 f1       	breq	.+96     	; 0x18a6 <__ultoa_invert+0x6c>
    1846:	e8 94       	clt
    1848:	6f 93       	push	r22
    184a:	6e 7f       	andi	r22, 0xFE	; 254
    184c:	6e 5f       	subi	r22, 0xFE	; 254
    184e:	7f 4f       	sbci	r23, 0xFF	; 255
    1850:	8f 4f       	sbci	r24, 0xFF	; 255
    1852:	9f 4f       	sbci	r25, 0xFF	; 255
    1854:	af 4f       	sbci	r26, 0xFF	; 255
    1856:	b1 e0       	ldi	r27, 0x01	; 1
    1858:	3e d0       	rcall	.+124    	; 0x18d6 <__ultoa_invert+0x9c>
    185a:	b4 e0       	ldi	r27, 0x04	; 4
    185c:	3c d0       	rcall	.+120    	; 0x18d6 <__ultoa_invert+0x9c>
    185e:	67 0f       	add	r22, r23
    1860:	78 1f       	adc	r23, r24
    1862:	89 1f       	adc	r24, r25
    1864:	9a 1f       	adc	r25, r26
    1866:	a1 1d       	adc	r26, r1
    1868:	68 0f       	add	r22, r24
    186a:	79 1f       	adc	r23, r25
    186c:	8a 1f       	adc	r24, r26
    186e:	91 1d       	adc	r25, r1
    1870:	a1 1d       	adc	r26, r1
    1872:	6a 0f       	add	r22, r26
    1874:	71 1d       	adc	r23, r1
    1876:	81 1d       	adc	r24, r1
    1878:	91 1d       	adc	r25, r1
    187a:	a1 1d       	adc	r26, r1
    187c:	20 d0       	rcall	.+64     	; 0x18be <__ultoa_invert+0x84>
    187e:	09 f4       	brne	.+2      	; 0x1882 <__ultoa_invert+0x48>
    1880:	68 94       	set
    1882:	3f 91       	pop	r19
    1884:	2a e0       	ldi	r18, 0x0A	; 10
    1886:	26 9f       	mul	r18, r22
    1888:	11 24       	eor	r1, r1
    188a:	30 19       	sub	r19, r0
    188c:	30 5d       	subi	r19, 0xD0	; 208
    188e:	31 93       	st	Z+, r19
    1890:	de f6       	brtc	.-74     	; 0x1848 <__ultoa_invert+0xe>
    1892:	cf 01       	movw	r24, r30
    1894:	08 95       	ret
    1896:	46 2f       	mov	r20, r22
    1898:	47 70       	andi	r20, 0x07	; 7
    189a:	40 5d       	subi	r20, 0xD0	; 208
    189c:	41 93       	st	Z+, r20
    189e:	b3 e0       	ldi	r27, 0x03	; 3
    18a0:	0f d0       	rcall	.+30     	; 0x18c0 <__ultoa_invert+0x86>
    18a2:	c9 f7       	brne	.-14     	; 0x1896 <__ultoa_invert+0x5c>
    18a4:	f6 cf       	rjmp	.-20     	; 0x1892 <__ultoa_invert+0x58>
    18a6:	46 2f       	mov	r20, r22
    18a8:	4f 70       	andi	r20, 0x0F	; 15
    18aa:	40 5d       	subi	r20, 0xD0	; 208
    18ac:	4a 33       	cpi	r20, 0x3A	; 58
    18ae:	18 f0       	brcs	.+6      	; 0x18b6 <__ultoa_invert+0x7c>
    18b0:	49 5d       	subi	r20, 0xD9	; 217
    18b2:	31 fd       	sbrc	r19, 1
    18b4:	40 52       	subi	r20, 0x20	; 32
    18b6:	41 93       	st	Z+, r20
    18b8:	02 d0       	rcall	.+4      	; 0x18be <__ultoa_invert+0x84>
    18ba:	a9 f7       	brne	.-22     	; 0x18a6 <__ultoa_invert+0x6c>
    18bc:	ea cf       	rjmp	.-44     	; 0x1892 <__ultoa_invert+0x58>
    18be:	b4 e0       	ldi	r27, 0x04	; 4
    18c0:	a6 95       	lsr	r26
    18c2:	97 95       	ror	r25
    18c4:	87 95       	ror	r24
    18c6:	77 95       	ror	r23
    18c8:	67 95       	ror	r22
    18ca:	ba 95       	dec	r27
    18cc:	c9 f7       	brne	.-14     	; 0x18c0 <__ultoa_invert+0x86>
    18ce:	00 97       	sbiw	r24, 0x00	; 0
    18d0:	61 05       	cpc	r22, r1
    18d2:	71 05       	cpc	r23, r1
    18d4:	08 95       	ret
    18d6:	9b 01       	movw	r18, r22
    18d8:	ac 01       	movw	r20, r24
    18da:	0a 2e       	mov	r0, r26
    18dc:	06 94       	lsr	r0
    18de:	57 95       	ror	r21
    18e0:	47 95       	ror	r20
    18e2:	37 95       	ror	r19
    18e4:	27 95       	ror	r18
    18e6:	ba 95       	dec	r27
    18e8:	c9 f7       	brne	.-14     	; 0x18dc <__ultoa_invert+0xa2>
    18ea:	62 0f       	add	r22, r18
    18ec:	73 1f       	adc	r23, r19
    18ee:	84 1f       	adc	r24, r20
    18f0:	95 1f       	adc	r25, r21
    18f2:	a0 1d       	adc	r26, r0
    18f4:	08 95       	ret

000018f6 <_exit>:
    18f6:	f8 94       	cli

000018f8 <__stop_program>:
    18f8:	ff cf       	rjmp	.-2      	; 0x18f8 <__stop_program>
