
KeyboardHost.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  000018ce  00001962  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000018ce  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000022  0080011a  0080011a  0000197c  2**0
                  ALLOC
  3 .debug_aranges 00000320  00000000  00000000  0000197c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000007c7  00000000  00000000  00001c9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00004b70  00000000  00000000  00002463  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001610  00000000  00000000  00006fd3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00003dcc  00000000  00000000  000085e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000004a0  00000000  00000000  0000c3b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000234c  00000000  00000000  0000c850  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000020f3  00000000  00000000  0000eb9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000003d0  00000000  00000000  00010c8f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
		Pipe_DisablePipe();
	}
}

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
       0:	47 c1       	rjmp	.+654    	; 0x290 <__ctors_end>
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
       2:	00 00       	nop
{
	USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, AfterType);

	if (*BytesRem)
	  USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, Type);
}
       4:	63 c1       	rjmp	.+710    	; 0x2cc <__bad_interrupt>
	return USB_Host_SendControlRequest(NULL);
}

uint8_t USB_Host_SetInterfaceAltSetting(const uint8_t InterfaceIndex,
                                        const uint8_t AltSetting)
{
       6:	00 00       	nop

	return Serial_ReceiveByte();
}

int Serial_getchar_Blocking(FILE *Stream)
{
       8:	61 c1       	rjmp	.+706    	; 0x2cc <__bad_interrupt>
       a:	00 00       	nop
       c:	5f c1       	rjmp	.+702    	; 0x2cc <__bad_interrupt>
       e:	00 00       	nop
      10:	5d c1       	rjmp	.+698    	; 0x2cc <__bad_interrupt>
      12:	00 00       	nop
      14:	5b c1       	rjmp	.+694    	; 0x2cc <__bad_interrupt>
      16:	00 00       	nop
      18:	59 c1       	rjmp	.+690    	; 0x2cc <__bad_interrupt>
      1a:	00 00       	nop
      1c:	57 c1       	rjmp	.+686    	; 0x2cc <__bad_interrupt>
      1e:	00 00       	nop
      20:	55 c1       	rjmp	.+682    	; 0x2cc <__bad_interrupt>
      22:	00 00       	nop
      24:	53 c1       	rjmp	.+678    	; 0x2cc <__bad_interrupt>
      26:	00 00       	nop
      28:	52 c6       	rjmp	.+3236   	; 0xcce <__vector_10>
      2a:	00 00       	nop
      2c:	4f c1       	rjmp	.+670    	; 0x2cc <__bad_interrupt>
      2e:	00 00       	nop
      30:	4d c1       	rjmp	.+666    	; 0x2cc <__bad_interrupt>
      32:	00 00       	nop
      34:	4b c1       	rjmp	.+662    	; 0x2cc <__bad_interrupt>
      36:	00 00       	nop
      38:	49 c1       	rjmp	.+658    	; 0x2cc <__bad_interrupt>
      3a:	00 00       	nop
      3c:	47 c1       	rjmp	.+654    	; 0x2cc <__bad_interrupt>
      3e:	00 00       	nop
      40:	45 c1       	rjmp	.+650    	; 0x2cc <__bad_interrupt>
      42:	00 00       	nop
      44:	43 c1       	rjmp	.+646    	; 0x2cc <__bad_interrupt>
      46:	00 00       	nop
      48:	41 c1       	rjmp	.+642    	; 0x2cc <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3f c1       	rjmp	.+638    	; 0x2cc <__bad_interrupt>
      4e:	00 00       	nop
      50:	3d c1       	rjmp	.+634    	; 0x2cc <__bad_interrupt>
      52:	00 00       	nop
      54:	3b c1       	rjmp	.+630    	; 0x2cc <__bad_interrupt>
      56:	00 00       	nop
      58:	39 c1       	rjmp	.+626    	; 0x2cc <__bad_interrupt>
      5a:	00 00       	nop
      5c:	37 c1       	rjmp	.+622    	; 0x2cc <__bad_interrupt>
      5e:	00 00       	nop
      60:	35 c1       	rjmp	.+618    	; 0x2cc <__bad_interrupt>
      62:	00 00       	nop
      64:	33 c1       	rjmp	.+614    	; 0x2cc <__bad_interrupt>
      66:	00 00       	nop
      68:	31 c1       	rjmp	.+610    	; 0x2cc <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2f c1       	rjmp	.+606    	; 0x2cc <__bad_interrupt>
      6e:	00 00       	nop
      70:	2d c1       	rjmp	.+602    	; 0x2cc <__bad_interrupt>
      72:	00 00       	nop
      74:	2b c1       	rjmp	.+598    	; 0x2cc <__bad_interrupt>
      76:	00 00       	nop
      78:	29 c1       	rjmp	.+594    	; 0x2cc <__bad_interrupt>
      7a:	00 00       	nop
      7c:	27 c1       	rjmp	.+590    	; 0x2cc <__bad_interrupt>
      7e:	00 00       	nop
      80:	25 c1       	rjmp	.+586    	; 0x2cc <__bad_interrupt>
      82:	00 00       	nop
      84:	23 c1       	rjmp	.+582    	; 0x2cc <__bad_interrupt>
      86:	00 00       	nop
      88:	21 c1       	rjmp	.+578    	; 0x2cc <__bad_interrupt>
      8a:	00 00       	nop
      8c:	1f c1       	rjmp	.+574    	; 0x2cc <__bad_interrupt>
      8e:	00 00       	nop
      90:	1d c1       	rjmp	.+570    	; 0x2cc <__bad_interrupt>
      92:	00 00       	nop
      94:	1b c1       	rjmp	.+566    	; 0x2cc <__bad_interrupt>
      96:	00 00       	nop

00000098 <__c.4570>:
      98:	1b 5b 33 31 6d 44 65 76 20 45 6e 75 6d 20 45 72     .[31mDev Enum Er
      a8:	72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     ror.. -- Error C
      b8:	6f 64 65 20 25 64 0d 0a 20 2d 2d 20 53 75 62 20     ode %d.. -- Sub 
      c8:	45 72 72 6f 72 20 43 6f 64 65 20 25 64 0d 0a 20     Error Code %d.. 
      d8:	2d 2d 20 49 6e 20 53 74 61 74 65 20 25 64 0d 0a     -- In State %d..
      e8:	1b 5b 33 37 6d 00                                   .[37m.

000000ee <__c.4562>:
      ee:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
      fe:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 
     10e:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

0000011d <__c.4552>:
     11d:	4b 65 79 62 6f 61 72 64 20 45 6e 75 6d 65 72 61     Keyboard Enumera
     12d:	74 65 64 2e 0d 0a 00                                ted....

00000134 <__c.4550>:
     134:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
     144:	6f 72 20 28 53 65 74 20 50 72 6f 74 6f 63 6f 6c     or (Set Protocol
     154:	29 2e 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43 6f     )... -- Error Co
     164:	64 65 3a 20 25 64 0d 0a 1b 5b 33 37 6d 00           de: %d...[37m.

00000172 <__c.4547>:
     172:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
     182:	6f 72 20 28 53 65 74 20 43 6f 6e 66 69 67 75 72     or (Set Configur
     192:	61 74 69 6f 6e 29 2e 0d 0a 20 2d 2d 20 45 72 72     ation)... -- Err
     1a2:	6f 72 20 43 6f 64 65 3a 20 25 64 0d 0a 1b 5b 33     or Code: %d...[3
     1b2:	37 6d 00                                            7m.

000001b5 <__c.4545>:
     1b5:	20 2d 2d 20 45 72 72 6f 72 20 43 6f 64 65 3a 20      -- Error Code: 
     1c5:	25 64 0d 0a 1b 5b 33 37 6d 00                       %d...[37m.

000001cf <__c.4543>:
     1cf:	1b 5b 33 31 6d 49 6e 76 61 6c 69 64 20 44 65 76     .[31mInvalid Dev
     1df:	69 63 65 2e 0d 0a 00                                ice....

000001e6 <__c.4541>:
     1e6:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
     1f6:	6f 72 20 28 47 65 74 20 43 6f 6e 66 69 67 75 72     or (Get Configur
     206:	61 74 69 6f 6e 29 2e 0d 0a 00                       ation)....

00000210 <__c.4538>:
     210:	47 65 74 74 69 6e 67 20 43 6f 6e 66 69 67 20 44     Getting Config D
     220:	61 74 61 2e 0d 0a 00                                ata....

00000227 <__c.4533>:
     227:	1b 5b 33 32 6d 44 65 76 69 63 65 20 55 6e 61 74     .[32mDevice Unat
     237:	74 61 63 68 65 64 2e 0d 0a 1b 5b 33 37 6d 00        tached....[37m.

00000246 <__c.4528>:
     246:	1b 5b 33 32 6d 44 65 76 69 63 65 20 41 74 74 61     .[32mDevice Atta
     256:	63 68 65 64 2e 0d 0a 1b 5b 33 37 6d 00              ched....[37m.

00000263 <__c.4514>:
     263:	1b 5b 33 36 6d 4b 65 79 62 6f 61 72 64 20 48 49     .[36mKeyboard HI
     273:	44 20 48 6f 73 74 20 44 65 6d 6f 20 72 75 6e 6e     D Host Demo runn
     283:	69 6e 67 2e 0d 0a 1b 5b 33 37 6d 00 00              ing....[37m..

00000290 <__ctors_end>:
     290:	11 24       	eor	r1, r1
     292:	1f be       	out	0x3f, r1	; 63
     294:	cf ef       	ldi	r28, 0xFF	; 255
     296:	d0 e2       	ldi	r29, 0x20	; 32
     298:	de bf       	out	0x3e, r29	; 62
     29a:	cd bf       	out	0x3d, r28	; 61

0000029c <__do_copy_data>:
     29c:	11 e0       	ldi	r17, 0x01	; 1
     29e:	a0 e0       	ldi	r26, 0x00	; 0
     2a0:	b1 e0       	ldi	r27, 0x01	; 1
     2a2:	ee ec       	ldi	r30, 0xCE	; 206
     2a4:	f8 e1       	ldi	r31, 0x18	; 24
     2a6:	00 e0       	ldi	r16, 0x00	; 0
     2a8:	0b bf       	out	0x3b, r16	; 59
     2aa:	02 c0       	rjmp	.+4      	; 0x2b0 <__do_copy_data+0x14>
     2ac:	07 90       	elpm	r0, Z+
     2ae:	0d 92       	st	X+, r0
     2b0:	aa 31       	cpi	r26, 0x1A	; 26
     2b2:	b1 07       	cpc	r27, r17
     2b4:	d9 f7       	brne	.-10     	; 0x2ac <__do_copy_data+0x10>

000002b6 <__do_clear_bss>:
     2b6:	11 e0       	ldi	r17, 0x01	; 1
     2b8:	aa e1       	ldi	r26, 0x1A	; 26
     2ba:	b1 e0       	ldi	r27, 0x01	; 1
     2bc:	01 c0       	rjmp	.+2      	; 0x2c0 <.do_clear_bss_start>

000002be <.do_clear_bss_loop>:
     2be:	1d 92       	st	X+, r1

000002c0 <.do_clear_bss_start>:
     2c0:	ac 33       	cpi	r26, 0x3C	; 60
     2c2:	b1 07       	cpc	r27, r17
     2c4:	e1 f7       	brne	.-8      	; 0x2be <.do_clear_bss_loop>
     2c6:	82 d1       	rcall	.+772    	; 0x5cc <main>
     2c8:	0c 94 65 0c 	jmp	0x18ca	; 0x18ca <_exit>

000002cc <__bad_interrupt>:
     2cc:	99 ce       	rjmp	.-718    	; 0x0 <__vectors>

000002ce <KeyboardHost_Task>:

/** Task to read in and processes the next report from the attached device, displaying the report
 *  contents on the board LEDs and via the serial port.
 */
void KeyboardHost_Task(void)
{
     2ce:	df 93       	push	r29
     2d0:	cf 93       	push	r28
     2d2:	cd b7       	in	r28, 0x3d	; 61
     2d4:	de b7       	in	r29, 0x3e	; 62
     2d6:	28 97       	sbiw	r28, 0x08	; 8
     2d8:	0f b6       	in	r0, 0x3f	; 63
     2da:	f8 94       	cli
     2dc:	de bf       	out	0x3e, r29	; 62
     2de:	0f be       	out	0x3f, r0	; 63
     2e0:	cd bf       	out	0x3d, r28	; 61
	if (USB_HostState != HOST_STATE_Configured)
     2e2:	80 91 27 01 	lds	r24, 0x0127
     2e6:	8b 30       	cpi	r24, 0x0B	; 11
     2e8:	09 f0       	breq	.+2      	; 0x2ec <KeyboardHost_Task+0x1e>
     2ea:	54 c0       	rjmp	.+168    	; 0x394 <KeyboardHost_Task+0xc6>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     2ec:	81 e0       	ldi	r24, 0x01	; 1
     2ee:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     2f2:	80 91 a9 00 	lds	r24, 0x00A9
     2f6:	8f 7b       	andi	r24, 0xBF	; 191
     2f8:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     2fc:	80 91 a6 00 	lds	r24, 0x00A6

	/* Unfreeze keyboard data pipe */
	Pipe_Unfreeze();

	/* Check to see if a packet has been received */
	if (!(Pipe_IsINReceived()))
     300:	80 ff       	sbrs	r24, 0
     302:	40 c0       	rjmp	.+128    	; 0x384 <KeyboardHost_Task+0xb6>
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
     304:	80 91 a6 00 	lds	r24, 0x00A6

		return;
	}

	/* Ensure pipe contains data before trying to read from it */
	if (Pipe_IsReadWriteAllowed())
     308:	85 ff       	sbrs	r24, 5
     30a:	37 c0       	rjmp	.+110    	; 0x37a <KeyboardHost_Task+0xac>
	{
		USB_KeyboardReport_Data_t KeyboardReport;

		/* Read in keyboard report data */
		Pipe_Read_Stream_LE(&KeyboardReport, sizeof(KeyboardReport), NULL);
     30c:	ce 01       	movw	r24, r28
     30e:	01 96       	adiw	r24, 0x01	; 1
     310:	68 e0       	ldi	r22, 0x08	; 8
     312:	70 e0       	ldi	r23, 0x00	; 0
     314:	40 e0       	ldi	r20, 0x00	; 0
     316:	50 e0       	ldi	r21, 0x00	; 0
     318:	6d d5       	rcall	.+2778   	; 0xdf4 <Pipe_Read_Stream_LE>

		/* Indicate if the modifier byte is non-zero (special key such as shift is being pressed) */
		LEDs_ChangeLEDs(LEDS_LED1, (KeyboardReport.Modifier) ? LEDS_LED1 : 0);
     31a:	89 81       	ldd	r24, Y+1	; 0x01
     31c:	88 23       	and	r24, r24
     31e:	11 f4       	brne	.+4      	; 0x324 <KeyboardHost_Task+0x56>
     320:	90 e0       	ldi	r25, 0x00	; 0
     322:	01 c0       	rjmp	.+2      	; 0x326 <KeyboardHost_Task+0x58>
     324:	90 e1       	ldi	r25, 0x10	; 16
			}

			static inline void LEDs_ChangeLEDs(const uint8_t LEDMask,
			                                   const uint8_t ActiveMask)
			{
				PORTD = ((PORTD & ~LEDMask) | ActiveMask);
     326:	8b b1       	in	r24, 0x0b	; 11
     328:	8f 7e       	andi	r24, 0xEF	; 239
     32a:	98 2b       	or	r25, r24
     32c:	9b b9       	out	0x0b, r25	; 11

		uint8_t KeyCode = KeyboardReport.KeyCode[0];
     32e:	2b 81       	ldd	r18, Y+3	; 0x03

		/* Check if a key has been pressed */
		if (KeyCode)
     330:	22 23       	and	r18, r18
     332:	19 f1       	breq	.+70     	; 0x37a <KeyboardHost_Task+0xac>
			}

			static inline void LEDs_ToggleLEDs(const uint8_t LEDMask)
			{
				PORTD ^= LEDMask;
     334:	8b b1       	in	r24, 0x0b	; 11
     336:	90 e2       	ldi	r25, 0x20	; 32
     338:	89 27       	eor	r24, r25
     33a:	8b b9       	out	0x0b, r24	; 11
			LEDs_ToggleLEDs(LEDS_LED2);

			char PressedKey = 0;

			/* Retrieve pressed key character if alphanumeric */
			if ((KeyCode >= HID_KEYBOARD_SC_A) && (KeyCode <= HID_KEYBOARD_SC_Z))
     33c:	82 2f       	mov	r24, r18
     33e:	84 50       	subi	r24, 0x04	; 4
     340:	8a 31       	cpi	r24, 0x1A	; 26
     342:	10 f4       	brcc	.+4      	; 0x348 <KeyboardHost_Task+0x7a>
			{
				PressedKey = (KeyCode - HID_KEYBOARD_SC_A) + 'A';
     344:	8f 5b       	subi	r24, 0xBF	; 191
     346:	11 c0       	rjmp	.+34     	; 0x36a <KeyboardHost_Task+0x9c>
			}
			else if ((KeyCode >= HID_KEYBOARD_SC_1_AND_EXCLAMATION) &
     348:	82 2f       	mov	r24, r18
     34a:	8e 51       	subi	r24, 0x1E	; 30
     34c:	89 30       	cpi	r24, 0x09	; 9
     34e:	10 f4       	brcc	.+4      	; 0x354 <KeyboardHost_Task+0x86>
					 (KeyCode  < HID_KEYBOARD_SC_0_AND_CLOSING_PARENTHESIS))
			{
				PressedKey = (KeyCode - HID_KEYBOARD_SC_1_AND_EXCLAMATION) + '1';
     350:	8f 5c       	subi	r24, 0xCF	; 207
     352:	0b c0       	rjmp	.+22     	; 0x36a <KeyboardHost_Task+0x9c>
			}
			else if (KeyCode == HID_KEYBOARD_SC_0_AND_CLOSING_PARENTHESIS)
     354:	27 32       	cpi	r18, 0x27	; 39
     356:	11 f4       	brne	.+4      	; 0x35c <KeyboardHost_Task+0x8e>
     358:	80 e3       	ldi	r24, 0x30	; 48
     35a:	09 c0       	rjmp	.+18     	; 0x36e <KeyboardHost_Task+0xa0>
			{
				PressedKey = '0';
			}
			else if (KeyCode == HID_KEYBOARD_SC_SPACE)
     35c:	2c 32       	cpi	r18, 0x2C	; 44
     35e:	11 f4       	brne	.+4      	; 0x364 <KeyboardHost_Task+0x96>
     360:	80 e2       	ldi	r24, 0x20	; 32
     362:	05 c0       	rjmp	.+10     	; 0x36e <KeyboardHost_Task+0xa0>
			{
				PressedKey = ' ';
			}
			else if (KeyCode == HID_KEYBOARD_SC_ENTER)
     364:	28 32       	cpi	r18, 0x28	; 40
     366:	49 f4       	brne	.+18     	; 0x37a <KeyboardHost_Task+0xac>
     368:	13 c0       	rjmp	.+38     	; 0x390 <KeyboardHost_Task+0xc2>
			{
				PressedKey = '\n';
			}

			/* Print the pressed key character out through the serial port if valid */
			if (PressedKey)
     36a:	88 23       	and	r24, r24
     36c:	31 f0       	breq	.+12     	; 0x37a <KeyboardHost_Task+0xac>
			  putchar(PressedKey);
     36e:	60 91 38 01 	lds	r22, 0x0138
     372:	70 91 39 01 	lds	r23, 0x0139
     376:	90 e0       	ldi	r25, 0x00	; 0
     378:	b8 d7       	rcall	.+3952   	; 0x12ea <fputc>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     37a:	80 91 a6 00 	lds	r24, 0x00A6
     37e:	8e 77       	andi	r24, 0x7E	; 126
     380:	80 93 a6 00 	sts	0x00A6, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     384:	80 91 a9 00 	lds	r24, 0x00A9
     388:	80 64       	ori	r24, 0x40	; 64
     38a:	80 93 a9 00 	sts	0x00A9, r24
     38e:	02 c0       	rjmp	.+4      	; 0x394 <KeyboardHost_Task+0xc6>
     390:	8a e0       	ldi	r24, 0x0A	; 10
     392:	ed cf       	rjmp	.-38     	; 0x36e <KeyboardHost_Task+0xa0>
	/* Clear the IN endpoint, ready for next data packet */
	Pipe_ClearIN();

	/* Refreeze keyboard data pipe */
	Pipe_Freeze();
}
     394:	28 96       	adiw	r28, 0x08	; 8
     396:	0f b6       	in	r0, 0x3f	; 63
     398:	f8 94       	cli
     39a:	de bf       	out	0x3e, r29	; 62
     39c:	0f be       	out	0x3f, r0	; 63
     39e:	cd bf       	out	0x3d, r28	; 61
     3a0:	cf 91       	pop	r28
     3a2:	df 91       	pop	r29
     3a4:	08 95       	ret

000003a6 <EVENT_USB_Host_DeviceEnumerationFailed>:
 *  enumerating an attached USB device.
 */
void EVENT_USB_Host_DeviceEnumerationFailed(const uint8_t ErrorCode,
                                            const uint8_t SubErrorCode)
{
	printf_P(PSTR(ESC_FG_RED "Dev Enum Error\r\n"
     3a6:	90 91 27 01 	lds	r25, 0x0127
     3aa:	2d b7       	in	r18, 0x3d	; 61
     3ac:	3e b7       	in	r19, 0x3e	; 62
     3ae:	28 50       	subi	r18, 0x08	; 8
     3b0:	30 40       	sbci	r19, 0x00	; 0
     3b2:	0f b6       	in	r0, 0x3f	; 63
     3b4:	f8 94       	cli
     3b6:	3e bf       	out	0x3e, r19	; 62
     3b8:	0f be       	out	0x3f, r0	; 63
     3ba:	2d bf       	out	0x3d, r18	; 61
     3bc:	ed b7       	in	r30, 0x3d	; 61
     3be:	fe b7       	in	r31, 0x3e	; 62
     3c0:	31 96       	adiw	r30, 0x01	; 1
     3c2:	28 e9       	ldi	r18, 0x98	; 152
     3c4:	30 e0       	ldi	r19, 0x00	; 0
     3c6:	ad b7       	in	r26, 0x3d	; 61
     3c8:	be b7       	in	r27, 0x3e	; 62
     3ca:	12 96       	adiw	r26, 0x02	; 2
     3cc:	3c 93       	st	X, r19
     3ce:	2e 93       	st	-X, r18
     3d0:	11 97       	sbiw	r26, 0x01	; 1
     3d2:	82 83       	std	Z+2, r24	; 0x02
     3d4:	13 82       	std	Z+3, r1	; 0x03
     3d6:	64 83       	std	Z+4, r22	; 0x04
     3d8:	15 82       	std	Z+5, r1	; 0x05
     3da:	96 83       	std	Z+6, r25	; 0x06
     3dc:	17 82       	std	Z+7, r1	; 0x07
     3de:	b1 d7       	rcall	.+3938   	; 0x1342 <printf_P>
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     3e0:	8b b1       	in	r24, 0x0b	; 11
     3e2:	8f 70       	andi	r24, 0x0F	; 15
     3e4:	80 69       	ori	r24, 0x90	; 144
     3e6:	8b b9       	out	0x0b, r24	; 11
     3e8:	2d b7       	in	r18, 0x3d	; 61
     3ea:	3e b7       	in	r19, 0x3e	; 62
     3ec:	28 5f       	subi	r18, 0xF8	; 248
     3ee:	3f 4f       	sbci	r19, 0xFF	; 255
     3f0:	0f b6       	in	r0, 0x3f	; 63
     3f2:	f8 94       	cli
     3f4:	3e bf       	out	0x3e, r19	; 62
     3f6:	0f be       	out	0x3f, r0	; 63
     3f8:	2d bf       	out	0x3d, r18	; 61
	                         " -- Error Code %d\r\n"
	                         " -- Sub Error Code %d\r\n"
	                         " -- In State %d\r\n" ESC_FG_WHITE), ErrorCode, SubErrorCode, USB_HostState);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
}
     3fa:	08 95       	ret

000003fc <EVENT_USB_Host_HostError>:
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
}

/** Event handler for the USB_HostError event. This indicates that a hardware error occurred while in host mode. */
void EVENT_USB_Host_HostError(const uint8_t ErrorCode)
{
     3fc:	1f 93       	push	r17
     3fe:	18 2f       	mov	r17, r24
	USB_Disable();
     400:	41 d4       	rcall	.+2178   	; 0xc84 <USB_Disable>

	printf_P(PSTR(ESC_FG_RED "Host Mode Error\r\n"
     402:	00 d0       	rcall	.+0      	; 0x404 <EVENT_USB_Host_HostError+0x8>
     404:	00 d0       	rcall	.+0      	; 0x406 <EVENT_USB_Host_HostError+0xa>
     406:	ed b7       	in	r30, 0x3d	; 61
     408:	fe b7       	in	r31, 0x3e	; 62
     40a:	31 96       	adiw	r30, 0x01	; 1
     40c:	8e ee       	ldi	r24, 0xEE	; 238
     40e:	90 e0       	ldi	r25, 0x00	; 0
     410:	ad b7       	in	r26, 0x3d	; 61
     412:	be b7       	in	r27, 0x3e	; 62
     414:	12 96       	adiw	r26, 0x02	; 2
     416:	9c 93       	st	X, r25
     418:	8e 93       	st	-X, r24
     41a:	11 97       	sbiw	r26, 0x01	; 1
     41c:	12 83       	std	Z+2, r17	; 0x02
     41e:	13 82       	std	Z+3, r1	; 0x03
     420:	90 d7       	rcall	.+3872   	; 0x1342 <printf_P>
     422:	8b b1       	in	r24, 0x0b	; 11
     424:	8f 70       	andi	r24, 0x0F	; 15
     426:	80 69       	ori	r24, 0x90	; 144
     428:	8b b9       	out	0x0b, r24	; 11
     42a:	0f 90       	pop	r0
     42c:	0f 90       	pop	r0
     42e:	0f 90       	pop	r0
     430:	0f 90       	pop	r0
     432:	ff cf       	rjmp	.-2      	; 0x432 <EVENT_USB_Host_HostError+0x36>

00000434 <EVENT_USB_Host_DeviceUnattached>:
/** Event handler for the USB_DeviceUnattached event. This indicates that a device has been removed from the host, and
 *  stops the library USB task management process.
 */
void EVENT_USB_Host_DeviceUnattached(void)
{
	puts_P(PSTR(ESC_FG_GREEN "Device Unattached.\r\n" ESC_FG_WHITE));
     434:	87 e2       	ldi	r24, 0x27	; 39
     436:	92 e0       	ldi	r25, 0x02	; 2
     438:	a6 d7       	rcall	.+3916   	; 0x1386 <puts_P>
     43a:	8b b1       	in	r24, 0x0b	; 11
     43c:	8f 70       	andi	r24, 0x0F	; 15
     43e:	80 61       	ori	r24, 0x10	; 16
     440:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
}
     442:	08 95       	ret

00000444 <EVENT_USB_Host_DeviceAttached>:
/** Event handler for the USB_DeviceAttached event. This indicates that a device has been attached to the host, and
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Host_DeviceAttached(void)
{
	puts_P(PSTR(ESC_FG_GREEN "Device Attached.\r\n" ESC_FG_WHITE));
     444:	86 e4       	ldi	r24, 0x46	; 70
     446:	92 e0       	ldi	r25, 0x02	; 2
     448:	9e d7       	rcall	.+3900   	; 0x1386 <puts_P>
     44a:	8b b1       	in	r24, 0x0b	; 11
     44c:	8f 70       	andi	r24, 0x0F	; 15
     44e:	80 6a       	ori	r24, 0xA0	; 160
     450:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
}
     452:	08 95       	ret

00000454 <EVENT_USB_Host_DeviceEnumerationComplete>:

/** Event handler for the USB_DeviceEnumerationComplete event. This indicates that a device has been successfully
 *  enumerated by the host and is now ready to be used by the application.
 */
void EVENT_USB_Host_DeviceEnumerationComplete(void)
{
     454:	1f 93       	push	r17
	puts_P(PSTR("Getting Config Data.\r\n"));
     456:	80 e1       	ldi	r24, 0x10	; 16
     458:	92 e0       	ldi	r25, 0x02	; 2
     45a:	95 d7       	rcall	.+3882   	; 0x1386 <puts_P>

	uint8_t ErrorCode;

	/* Get and process the configuration descriptor data */
	if ((ErrorCode = ProcessConfigurationDescriptor()) != SuccessfulConfigRead)
     45c:	dd d0       	rcall	.+442    	; 0x618 <ProcessConfigurationDescriptor>
     45e:	18 2f       	mov	r17, r24
     460:	88 23       	and	r24, r24
     462:	b9 f0       	breq	.+46     	; 0x492 <EVENT_USB_Host_DeviceEnumerationComplete+0x3e>
	{
		if (ErrorCode == ControlError)
     464:	81 30       	cpi	r24, 0x01	; 1
     466:	19 f4       	brne	.+6      	; 0x46e <EVENT_USB_Host_DeviceEnumerationComplete+0x1a>
		  puts_P(PSTR(ESC_FG_RED "Control Error (Get Configuration).\r\n"));
     468:	86 ee       	ldi	r24, 0xE6	; 230
     46a:	91 e0       	ldi	r25, 0x01	; 1
     46c:	02 c0       	rjmp	.+4      	; 0x472 <EVENT_USB_Host_DeviceEnumerationComplete+0x1e>
		else
		  puts_P(PSTR(ESC_FG_RED "Invalid Device.\r\n"));
     46e:	8f ec       	ldi	r24, 0xCF	; 207
     470:	91 e0       	ldi	r25, 0x01	; 1
     472:	89 d7       	rcall	.+3858   	; 0x1386 <puts_P>

		printf_P(PSTR(" -- Error Code: %d\r\n" ESC_FG_WHITE), ErrorCode);
     474:	00 d0       	rcall	.+0      	; 0x476 <EVENT_USB_Host_DeviceEnumerationComplete+0x22>
     476:	00 d0       	rcall	.+0      	; 0x478 <EVENT_USB_Host_DeviceEnumerationComplete+0x24>
     478:	ed b7       	in	r30, 0x3d	; 61
     47a:	fe b7       	in	r31, 0x3e	; 62
     47c:	31 96       	adiw	r30, 0x01	; 1
     47e:	85 eb       	ldi	r24, 0xB5	; 181
     480:	91 e0       	ldi	r25, 0x01	; 1
     482:	ad b7       	in	r26, 0x3d	; 61
     484:	be b7       	in	r27, 0x3e	; 62
     486:	12 96       	adiw	r26, 0x02	; 2
     488:	9c 93       	st	X, r25
     48a:	8e 93       	st	-X, r24
     48c:	11 97       	sbiw	r26, 0x01	; 1
     48e:	12 83       	std	Z+2, r17	; 0x02
     490:	13 c0       	rjmp	.+38     	; 0x4b8 <EVENT_USB_Host_DeviceEnumerationComplete+0x64>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	/* Set the device configuration to the first configuration (rarely do devices use multiple configurations) */
	if ((ErrorCode = USB_Host_SetDeviceConfiguration(1)) != HOST_SENDCONTROL_Successful)
     492:	81 e0       	ldi	r24, 0x01	; 1
     494:	d5 d6       	rcall	.+3498   	; 0x1240 <USB_Host_SetDeviceConfiguration>
     496:	28 2f       	mov	r18, r24
     498:	88 23       	and	r24, r24
     49a:	c9 f0       	breq	.+50     	; 0x4ce <EVENT_USB_Host_DeviceEnumerationComplete+0x7a>
	{
		printf_P(PSTR(ESC_FG_RED "Control Error (Set Configuration).\r\n"
     49c:	00 d0       	rcall	.+0      	; 0x49e <EVENT_USB_Host_DeviceEnumerationComplete+0x4a>
     49e:	00 d0       	rcall	.+0      	; 0x4a0 <EVENT_USB_Host_DeviceEnumerationComplete+0x4c>
     4a0:	ed b7       	in	r30, 0x3d	; 61
     4a2:	fe b7       	in	r31, 0x3e	; 62
     4a4:	31 96       	adiw	r30, 0x01	; 1
     4a6:	82 e7       	ldi	r24, 0x72	; 114
     4a8:	91 e0       	ldi	r25, 0x01	; 1
     4aa:	ad b7       	in	r26, 0x3d	; 61
     4ac:	be b7       	in	r27, 0x3e	; 62
     4ae:	12 96       	adiw	r26, 0x02	; 2
     4b0:	9c 93       	st	X, r25
     4b2:	8e 93       	st	-X, r24
     4b4:	11 97       	sbiw	r26, 0x01	; 1
     4b6:	22 83       	std	Z+2, r18	; 0x02
     4b8:	13 82       	std	Z+3, r1	; 0x03
     4ba:	43 d7       	rcall	.+3718   	; 0x1342 <printf_P>
     4bc:	8b b1       	in	r24, 0x0b	; 11
     4be:	8f 70       	andi	r24, 0x0F	; 15
     4c0:	80 69       	ori	r24, 0x90	; 144
     4c2:	8b b9       	out	0x0b, r24	; 11
     4c4:	0f 90       	pop	r0
     4c6:	0f 90       	pop	r0
     4c8:	0f 90       	pop	r0
     4ca:	0f 90       	pop	r0
     4cc:	33 c0       	rjmp	.+102    	; 0x534 <EVENT_USB_Host_DeviceEnumerationComplete+0xe0>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	/* HID class request to set the keyboard protocol to the Boot Protocol */
	USB_ControlRequest = (USB_Request_Header_t)
     4ce:	af e1       	ldi	r26, 0x1F	; 31
     4d0:	b1 e0       	ldi	r27, 0x01	; 1
     4d2:	e0 e0       	ldi	r30, 0x00	; 0
     4d4:	f1 e0       	ldi	r31, 0x01	; 1
     4d6:	88 e0       	ldi	r24, 0x08	; 8
     4d8:	01 90       	ld	r0, Z+
     4da:	0d 92       	st	X+, r0
     4dc:	81 50       	subi	r24, 0x01	; 1
     4de:	e1 f7       	brne	.-8      	; 0x4d8 <EVENT_USB_Host_DeviceEnumerationComplete+0x84>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     4e0:	10 92 a7 00 	sts	0x00A7, r1

	/* Select the control pipe for the request transfer */
	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	/* Send the request, display error and wait for device detach if request fails */
	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
     4e4:	80 e0       	ldi	r24, 0x00	; 0
     4e6:	90 e0       	ldi	r25, 0x00	; 0
     4e8:	a4 d5       	rcall	.+2888   	; 0x1032 <USB_Host_SendControlRequest>
     4ea:	28 2f       	mov	r18, r24
     4ec:	88 23       	and	r24, r24
     4ee:	d9 f0       	breq	.+54     	; 0x526 <EVENT_USB_Host_DeviceEnumerationComplete+0xd2>
	{
		printf_P(PSTR(ESC_FG_RED "Control Error (Set Protocol).\r\n"
     4f0:	00 d0       	rcall	.+0      	; 0x4f2 <EVENT_USB_Host_DeviceEnumerationComplete+0x9e>
     4f2:	00 d0       	rcall	.+0      	; 0x4f4 <EVENT_USB_Host_DeviceEnumerationComplete+0xa0>
     4f4:	ed b7       	in	r30, 0x3d	; 61
     4f6:	fe b7       	in	r31, 0x3e	; 62
     4f8:	31 96       	adiw	r30, 0x01	; 1
     4fa:	84 e3       	ldi	r24, 0x34	; 52
     4fc:	91 e0       	ldi	r25, 0x01	; 1
     4fe:	ad b7       	in	r26, 0x3d	; 61
     500:	be b7       	in	r27, 0x3e	; 62
     502:	12 96       	adiw	r26, 0x02	; 2
     504:	9c 93       	st	X, r25
     506:	8e 93       	st	-X, r24
     508:	11 97       	sbiw	r26, 0x01	; 1
     50a:	22 83       	std	Z+2, r18	; 0x02
     50c:	13 82       	std	Z+3, r1	; 0x03
     50e:	19 d7       	rcall	.+3634   	; 0x1342 <printf_P>
     510:	8b b1       	in	r24, 0x0b	; 11
     512:	8f 70       	andi	r24, 0x0F	; 15
     514:	80 69       	ori	r24, 0x90	; 144
     516:	8b b9       	out	0x0b, r24	; 11
		                         " -- Error Code: %d\r\n" ESC_FG_WHITE), ErrorCode);

		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		USB_Host_SetDeviceConfiguration(0);
     518:	0f 90       	pop	r0
     51a:	0f 90       	pop	r0
     51c:	0f 90       	pop	r0
     51e:	0f 90       	pop	r0
     520:	80 e0       	ldi	r24, 0x00	; 0
     522:	8e d6       	rcall	.+3356   	; 0x1240 <USB_Host_SetDeviceConfiguration>
     524:	07 c0       	rjmp	.+14     	; 0x534 <EVENT_USB_Host_DeviceEnumerationComplete+0xe0>
		return;
	}

	puts_P(PSTR("Keyboard Enumerated.\r\n"));
     526:	8d e1       	ldi	r24, 0x1D	; 29
     528:	91 e0       	ldi	r25, 0x01	; 1
     52a:	2d d7       	rcall	.+3674   	; 0x1386 <puts_P>
     52c:	8b b1       	in	r24, 0x0b	; 11
     52e:	8f 70       	andi	r24, 0x0F	; 15
     530:	80 66       	ori	r24, 0x60	; 96
     532:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
}
     534:	1f 91       	pop	r17
     536:	08 95       	ret

00000538 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     538:	84 b7       	in	r24, 0x34	; 52
     53a:	87 7f       	andi	r24, 0xF7	; 247
     53c:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     53e:	38 e1       	ldi	r19, 0x18	; 24
     540:	0f b6       	in	r0, 0x3f	; 63
     542:	f8 94       	cli
     544:	30 93 60 00 	sts	0x0060, r19
     548:	10 92 60 00 	sts	0x0060, r1
     54c:	0f be       	out	0x3f, r0	; 63

	/* Disable clock division */
	clock_prescale_set(clock_div_1);
     54e:	80 e0       	ldi	r24, 0x00	; 0
     550:	90 e0       	ldi	r25, 0x00	; 0
     552:	20 e8       	ldi	r18, 0x80	; 128
     554:	0f b6       	in	r0, 0x3f	; 63
     556:	f8 94       	cli
     558:	20 93 61 00 	sts	0x0061, r18
     55c:	80 93 61 00 	sts	0x0061, r24
     560:	0f be       	out	0x3f, r0	; 63
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     562:	83 e3       	ldi	r24, 0x33	; 51
     564:	90 e0       	ldi	r25, 0x00	; 0
     566:	90 93 cd 00 	sts	0x00CD, r25
     56a:	80 93 cc 00 	sts	0x00CC, r24

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     56e:	86 e0       	ldi	r24, 0x06	; 6
     570:	80 93 ca 00 	sts	0x00CA, r24
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     574:	10 92 c8 00 	sts	0x00C8, r1
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     578:	30 93 c9 00 	sts	0x00C9, r19

				DDRD  |= (1 << 3);
     57c:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     57e:	5a 9a       	sbi	0x0b, 2	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     580:	8a b1       	in	r24, 0x0a	; 10
     582:	80 6f       	ori	r24, 0xF0	; 240
     584:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     586:	8b b1       	in	r24, 0x0b	; 11
     588:	8f 70       	andi	r24, 0x0F	; 15
     58a:	8b b9       	out	0x0b, r24	; 11

	/* Hardware Initialization */
	Serial_Init(9600, false);
	LEDs_Init();
	USB_Init();
     58c:	72 d3       	rcall	.+1764   	; 0xc72 <USB_Init>
			static inline void Serial_CreateStream(FILE* Stream)
			{
				if (!(Stream))
				{
					Stream = &USARTSerialStream;
					stdin  = Stream;
     58e:	e8 e2       	ldi	r30, 0x28	; 40
     590:	f1 e0       	ldi	r31, 0x01	; 1
     592:	f0 93 37 01 	sts	0x0137, r31
     596:	e0 93 36 01 	sts	0x0136, r30
					stdout = Stream;
     59a:	f0 93 39 01 	sts	0x0139, r31
     59e:	e0 93 38 01 	sts	0x0138, r30
				}
			
				*Stream = (FILE)FDEV_SETUP_STREAM(Serial_putchar, Serial_getchar, _FDEV_SETUP_RW);
     5a2:	8e e0       	ldi	r24, 0x0E	; 14
     5a4:	df 01       	movw	r26, r30
     5a6:	1d 92       	st	X+, r1
     5a8:	8a 95       	dec	r24
     5aa:	e9 f7       	brne	.-6      	; 0x5a6 <SetupHardware+0x6e>
     5ac:	83 e0       	ldi	r24, 0x03	; 3
     5ae:	80 93 2b 01 	sts	0x012B, r24
     5b2:	87 e5       	ldi	r24, 0x57	; 87
     5b4:	99 e0       	ldi	r25, 0x09	; 9
     5b6:	90 93 31 01 	sts	0x0131, r25
     5ba:	80 93 30 01 	sts	0x0130, r24
     5be:	81 e6       	ldi	r24, 0x61	; 97
     5c0:	99 e0       	ldi	r25, 0x09	; 9
     5c2:	90 93 33 01 	sts	0x0133, r25
     5c6:	80 93 32 01 	sts	0x0132, r24

	/* Create a stdio stream for the serial port for stdin and stdout */
	Serial_CreateStream(NULL);
}
     5ca:	08 95       	ret

000005cc <main>:
/** Main program entry point. This routine configures the hardware required by the application, then
 *  enters a loop to run the application tasks in sequence.
 */
int main(void)
{
	SetupHardware();
     5cc:	b5 df       	rcall	.-150    	; 0x538 <SetupHardware>

	puts_P(PSTR(ESC_FG_CYAN "Keyboard HID Host Demo running.\r\n" ESC_FG_WHITE));
     5ce:	83 e6       	ldi	r24, 0x63	; 99
     5d0:	92 e0       	ldi	r25, 0x02	; 2
     5d2:	d9 d6       	rcall	.+3506   	; 0x1386 <puts_P>
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     5d4:	8b b1       	in	r24, 0x0b	; 11
     5d6:	8f 70       	andi	r24, 0x0F	; 15
     5d8:	80 61       	ori	r24, 0x10	; 16
     5da:	8b b9       	out	0x0b, r24	; 11

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
	sei();
     5dc:	78 94       	sei

	for (;;)
	{
		KeyboardHost_Task();
     5de:	77 de       	rcall	.-786    	; 0x2ce <KeyboardHost_Task>

		USB_USBTask();
     5e0:	54 d6       	rcall	.+3240   	; 0x128a <USB_USBTask>
     5e2:	fd cf       	rjmp	.-6      	; 0x5de <main+0x12>

000005e4 <DComp_NextKeyboardInterface>:
 *  This comparator searches for the next Interface descriptor of the correct Keyboard HID Class and Protocol values.
 *
 *  \return A value from the DSEARCH_Return_ErrorCodes_t enum
 */
uint8_t DComp_NextKeyboardInterface(void* CurrentDescriptor)
{
     5e4:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
     5e6:	81 81       	ldd	r24, Z+1	; 0x01
     5e8:	84 30       	cpi	r24, 0x04	; 4
     5ea:	41 f4       	brne	.+16     	; 0x5fc <DComp_NextKeyboardInterface+0x18>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		/* Check the HID descriptor class and protocol, break out if correct class/protocol interface found */
		if ((Interface->Class    == HID_CSCP_HIDClass) &&
     5ec:	85 81       	ldd	r24, Z+5	; 0x05
     5ee:	83 30       	cpi	r24, 0x03	; 3
     5f0:	29 f4       	brne	.+10     	; 0x5fc <DComp_NextKeyboardInterface+0x18>
     5f2:	87 81       	ldd	r24, Z+7	; 0x07
     5f4:	81 30       	cpi	r24, 0x01	; 1
     5f6:	11 f4       	brne	.+4      	; 0x5fc <DComp_NextKeyboardInterface+0x18>
     5f8:	80 e0       	ldi	r24, 0x00	; 0
     5fa:	08 95       	ret
     5fc:	82 e0       	ldi	r24, 0x02	; 2
			return DESCRIPTOR_SEARCH_Found;
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
     5fe:	08 95       	ret

00000600 <DComp_NextKeyboardInterfaceDataEndpoint>:
 */
uint8_t DComp_NextKeyboardInterfaceDataEndpoint(void* CurrentDescriptor)
{
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Endpoint)
     600:	fc 01       	movw	r30, r24
     602:	81 81       	ldd	r24, Z+1	; 0x01
     604:	85 30       	cpi	r24, 0x05	; 5
     606:	11 f4       	brne	.+4      	; 0x60c <DComp_NextKeyboardInterfaceDataEndpoint+0xc>
     608:	80 e0       	ldi	r24, 0x00	; 0
     60a:	08 95       	ret
	  return DESCRIPTOR_SEARCH_Found;
	else if (Header->Type == DTYPE_Interface)
     60c:	84 30       	cpi	r24, 0x04	; 4
     60e:	11 f0       	breq	.+4      	; 0x614 <DComp_NextKeyboardInterfaceDataEndpoint+0x14>
     610:	82 e0       	ldi	r24, 0x02	; 2
     612:	08 95       	ret
     614:	81 e0       	ldi	r24, 0x01	; 1
	  return DESCRIPTOR_SEARCH_Fail;
	else
	  return DESCRIPTOR_SEARCH_NotFound;
}
     616:	08 95       	ret

00000618 <ProcessConfigurationDescriptor>:
 *  This routine searches for a HID interface descriptor containing at least one Interrupt type IN endpoint.
 *
 *  \return An error code from the \ref KeyboardHost_GetConfigDescriptorDataCodes_t enum.
 */
uint8_t ProcessConfigurationDescriptor(void)
{
     618:	af 92       	push	r10
     61a:	bf 92       	push	r11
     61c:	cf 92       	push	r12
     61e:	df 92       	push	r13
     620:	ef 92       	push	r14
     622:	ff 92       	push	r15
     624:	0f 93       	push	r16
     626:	1f 93       	push	r17
     628:	df 93       	push	r29
     62a:	cf 93       	push	r28
     62c:	cd b7       	in	r28, 0x3d	; 61
     62e:	de b7       	in	r29, 0x3e	; 62
     630:	c4 50       	subi	r28, 0x04	; 4
     632:	d2 40       	sbci	r29, 0x02	; 2
     634:	0f b6       	in	r0, 0x3f	; 63
     636:	f8 94       	cli
     638:	de bf       	out	0x3e, r29	; 62
     63a:	0f be       	out	0x3f, r0	; 63
     63c:	cd bf       	out	0x3d, r28	; 61
	uint8_t  ConfigDescriptorData[512];
	void*    CurrConfigLocation = ConfigDescriptorData;
     63e:	ae 01       	movw	r20, r28
     640:	4b 5f       	subi	r20, 0xFB	; 251
     642:	5f 4f       	sbci	r21, 0xFF	; 255
     644:	5a 83       	std	Y+2, r21	; 0x02
     646:	49 83       	std	Y+1, r20	; 0x01

	USB_Descriptor_Interface_t* HIDInterface   = NULL;
	USB_Descriptor_Endpoint_t*  DataINEndpoint = NULL;

	/* Retrieve the entire configuration descriptor into the allocated buffer */
	switch (USB_Host_GetDeviceConfigDescriptor(1, &CurrConfigBytesRem, ConfigDescriptorData, sizeof(ConfigDescriptorData)))
     648:	83 e0       	ldi	r24, 0x03	; 3
     64a:	c8 2e       	mov	r12, r24
     64c:	d1 2c       	mov	r13, r1
     64e:	cc 0e       	add	r12, r28
     650:	dd 1e       	adc	r13, r29
     652:	81 e0       	ldi	r24, 0x01	; 1
     654:	b6 01       	movw	r22, r12
     656:	20 e0       	ldi	r18, 0x00	; 0
     658:	32 e0       	ldi	r19, 0x02	; 2
     65a:	67 d4       	rcall	.+2254   	; 0xf2a <USB_Host_GetDeviceConfigDescriptor>
     65c:	85 30       	cpi	r24, 0x05	; 5
     65e:	29 f0       	breq	.+10     	; 0x66a <ProcessConfigurationDescriptor+0x52>
     660:	86 30       	cpi	r24, 0x06	; 6
     662:	69 f0       	breq	.+26     	; 0x67e <ProcessConfigurationDescriptor+0x66>
     664:	88 23       	and	r24, r24
     666:	19 f0       	breq	.+6      	; 0x66e <ProcessConfigurationDescriptor+0x56>
     668:	0c c0       	rjmp	.+24     	; 0x682 <ProcessConfigurationDescriptor+0x6a>
     66a:	82 e0       	ldi	r24, 0x02	; 2
     66c:	37 c0       	rjmp	.+110    	; 0x6dc <ProcessConfigurationDescriptor+0xc4>
     66e:	00 e0       	ldi	r16, 0x00	; 0
     670:	10 e0       	ldi	r17, 0x00	; 0
	}

	while (!(DataINEndpoint))
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(HIDInterface) ||
     672:	56 01       	movw	r10, r12
     674:	7e 01       	movw	r14, r28
     676:	08 94       	sec
     678:	e1 1c       	adc	r14, r1
     67a:	f1 1c       	adc	r15, r1
     67c:	04 c0       	rjmp	.+8      	; 0x686 <ProcessConfigurationDescriptor+0x6e>

	USB_Descriptor_Interface_t* HIDInterface   = NULL;
	USB_Descriptor_Endpoint_t*  DataINEndpoint = NULL;

	/* Retrieve the entire configuration descriptor into the allocated buffer */
	switch (USB_Host_GetDeviceConfigDescriptor(1, &CurrConfigBytesRem, ConfigDescriptorData, sizeof(ConfigDescriptorData)))
     67e:	83 e0       	ldi	r24, 0x03	; 3
     680:	2d c0       	rjmp	.+90     	; 0x6dc <ProcessConfigurationDescriptor+0xc4>
     682:	81 e0       	ldi	r24, 0x01	; 1
     684:	2b c0       	rjmp	.+86     	; 0x6dc <ProcessConfigurationDescriptor+0xc4>
	}

	while (!(DataINEndpoint))
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(HIDInterface) ||
     686:	01 15       	cp	r16, r1
     688:	11 05       	cpc	r17, r1
     68a:	39 f0       	breq	.+14     	; 0x69a <ProcessConfigurationDescriptor+0x82>
     68c:	c5 01       	movw	r24, r10
     68e:	b7 01       	movw	r22, r14
     690:	40 e0       	ldi	r20, 0x00	; 0
     692:	53 e0       	ldi	r21, 0x03	; 3
     694:	06 d4       	rcall	.+2060   	; 0xea2 <USB_GetNextDescriptorComp>
     696:	88 23       	and	r24, r24
     698:	61 f0       	breq	.+24     	; 0x6b2 <ProcessConfigurationDescriptor+0x9a>
		    USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
		                              DComp_NextKeyboardInterfaceDataEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			/* Get the next HID interface from the configuration descriptor */
			if (USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     69a:	c5 01       	movw	r24, r10
     69c:	b7 01       	movw	r22, r14
     69e:	42 ef       	ldi	r20, 0xF2	; 242
     6a0:	52 e0       	ldi	r21, 0x02	; 2
     6a2:	ff d3       	rcall	.+2046   	; 0xea2 <USB_GetNextDescriptorComp>
     6a4:	88 23       	and	r24, r24
     6a6:	11 f0       	breq	.+4      	; 0x6ac <ProcessConfigurationDescriptor+0x94>
     6a8:	84 e0       	ldi	r24, 0x04	; 4
     6aa:	18 c0       	rjmp	.+48     	; 0x6dc <ProcessConfigurationDescriptor+0xc4>
				/* Descriptor not found, error out */
				return NoCompatibleInterfaceFound;
			}

			/* Save the interface in case we need to refer back to it later */
			HIDInterface = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Interface_t);
     6ac:	09 81       	ldd	r16, Y+1	; 0x01
     6ae:	1a 81       	ldd	r17, Y+2	; 0x02
     6b0:	ea cf       	rjmp	.-44     	; 0x686 <ProcessConfigurationDescriptor+0x6e>
			/* Skip the remainder of the loop as we have not found an endpoint yet */
			continue;
		}

		/* Retrieve the endpoint address from the endpoint descriptor */
		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Endpoint_t);
     6b2:	c9 80       	ldd	r12, Y+1	; 0x01
     6b4:	da 80       	ldd	r13, Y+2	; 0x02

		/* If the endpoint is a IN type endpoint */
		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
     6b6:	f6 01       	movw	r30, r12
     6b8:	22 81       	ldd	r18, Z+2	; 0x02
     6ba:	27 ff       	sbrs	r18, 7
     6bc:	e4 cf       	rjmp	.-56     	; 0x686 <ProcessConfigurationDescriptor+0x6e>
			return DescriptorTooLarge;
		default:
			return ControlError;
	}

	while (!(DataINEndpoint))
     6be:	c1 14       	cp	r12, r1
     6c0:	d1 04       	cpc	r13, r1
     6c2:	09 f3       	breq	.-62     	; 0x686 <ProcessConfigurationDescriptor+0x6e>
		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
		  DataINEndpoint = EndpointData;
	}

	/* Configure the HID data IN pipe */
	Pipe_ConfigurePipe(KEYBOARD_DATA_IN_PIPE, EP_TYPE_INTERRUPT, PIPE_TOKEN_IN,
     6c4:	04 81       	ldd	r16, Z+4	; 0x04
     6c6:	15 81       	ldd	r17, Z+5	; 0x05
     6c8:	81 e0       	ldi	r24, 0x01	; 1
     6ca:	63 e0       	ldi	r22, 0x03	; 3
     6cc:	40 e1       	ldi	r20, 0x10	; 16
     6ce:	ee 24       	eor	r14, r14
     6d0:	df d1       	rcall	.+958    	; 0xa90 <Pipe_ConfigurePipe>
	                   DataINEndpoint->EndpointAddress, DataINEndpoint->EndpointSize, PIPE_BANK_SINGLE);
	Pipe_SetInterruptPeriod(DataINEndpoint->PollingIntervalMS);
     6d2:	f6 01       	movw	r30, r12
     6d4:	86 81       	ldd	r24, Z+6	; 0x06
			 *  \param[in] Milliseconds  Number of milliseconds between each pipe poll.
			 */
			static inline void Pipe_SetInterruptPeriod(const uint8_t Milliseconds) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInterruptPeriod(const uint8_t Milliseconds)
			{
				UPCFG2X = Milliseconds;
     6d6:	80 93 ad 00 	sts	0x00AD, r24
     6da:	80 e0       	ldi	r24, 0x00	; 0

	/* Valid data found, return success */
	return SuccessfulConfigRead;
}
     6dc:	cc 5f       	subi	r28, 0xFC	; 252
     6de:	dd 4f       	sbci	r29, 0xFD	; 253
     6e0:	0f b6       	in	r0, 0x3f	; 63
     6e2:	f8 94       	cli
     6e4:	de bf       	out	0x3e, r29	; 62
     6e6:	0f be       	out	0x3f, r0	; 63
     6e8:	cd bf       	out	0x3d, r28	; 61
     6ea:	cf 91       	pop	r28
     6ec:	df 91       	pop	r29
     6ee:	1f 91       	pop	r17
     6f0:	0f 91       	pop	r16
     6f2:	ff 90       	pop	r15
     6f4:	ef 90       	pop	r14
     6f6:	df 90       	pop	r13
     6f8:	cf 90       	pop	r12
     6fa:	bf 90       	pop	r11
     6fc:	af 90       	pop	r10
     6fe:	08 95       	ret

00000700 <USB_Host_WaitMS>:
		USB_ResetInterface();
	}
}

uint8_t USB_Host_WaitMS(uint8_t MS)
{
     700:	98 2f       	mov	r25, r24
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     702:	20 91 9e 00 	lds	r18, 0x009E
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     706:	30 91 a0 00 	lds	r19, 0x00A0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     70a:	80 91 a0 00 	lds	r24, 0x00A0
     70e:	8f 7d       	andi	r24, 0xDF	; 223
     710:	80 93 a0 00 	sts	0x00A0, r24
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     714:	80 91 9f 00 	lds	r24, 0x009F
     718:	8f 7d       	andi	r24, 0xDF	; 223
     71a:	80 93 9f 00 	sts	0x009F, r24
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     71e:	80 91 9e 00 	lds	r24, 0x009E
     722:	81 60       	ori	r24, 0x01	; 1
     724:	80 93 9e 00 	sts	0x009E, r24
     728:	28 c0       	rjmp	.+80     	; 0x77a <USB_Host_WaitMS+0x7a>
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     72a:	80 91 9f 00 	lds	r24, 0x009F

	USB_Host_ResumeBus();

	while (MS)
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     72e:	85 ff       	sbrs	r24, 5
     730:	06 c0       	rjmp	.+12     	; 0x73e <USB_Host_WaitMS+0x3e>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     732:	80 91 9f 00 	lds	r24, 0x009F
     736:	8f 7d       	andi	r24, 0xDF	; 223
     738:	80 93 9f 00 	sts	0x009F, r24
		{
			USB_INT_Clear(USB_INT_HSOFI);
			MS--;
     73c:	91 50       	subi	r25, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
     73e:	80 91 27 01 	lds	r24, 0x0127
     742:	81 30       	cpi	r24, 0x01	; 1
     744:	11 f4       	brne	.+4      	; 0x74a <USB_Host_WaitMS+0x4a>
     746:	91 e0       	ldi	r25, 0x01	; 1
     748:	1a c0       	rjmp	.+52     	; 0x77e <USB_Host_WaitMS+0x7e>
			 *  \return Boolean \c true if an error has occurred on the selected pipe, \c false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
     74a:	80 91 a6 00 	lds	r24, 0x00A6
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError() == true)
     74e:	84 ff       	sbrs	r24, 4
     750:	09 c0       	rjmp	.+18     	; 0x764 <USB_Host_WaitMS+0x64>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     752:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
     756:	80 91 a6 00 	lds	r24, 0x00A6
     75a:	8f 7e       	andi	r24, 0xEF	; 239
     75c:	80 93 a6 00 	sts	0x00A6, r24
     760:	92 e0       	ldi	r25, 0x02	; 2
     762:	0d c0       	rjmp	.+26     	; 0x77e <USB_Host_WaitMS+0x7e>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     764:	80 91 a6 00 	lds	r24, 0x00A6
			ErrorCode = HOST_WAITERROR_PipeError;

			break;
		}

		if (Pipe_IsStalled() == true)
     768:	81 ff       	sbrs	r24, 1
     76a:	07 c0       	rjmp	.+14     	; 0x77a <USB_Host_WaitMS+0x7a>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
     76c:	80 91 a6 00 	lds	r24, 0x00A6
     770:	8d 7f       	andi	r24, 0xFD	; 253
     772:	80 93 a6 00 	sts	0x00A6, r24
     776:	93 e0       	ldi	r25, 0x03	; 3
     778:	02 c0       	rjmp	.+4      	; 0x77e <USB_Host_WaitMS+0x7e>
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     77a:	99 23       	and	r25, r25
     77c:	b1 f6       	brne	.-84     	; 0x72a <USB_Host_WaitMS+0x2a>

			break;
		}
	}

	if (BusSuspended)
     77e:	20 fd       	sbrc	r18, 0
     780:	05 c0       	rjmp	.+10     	; 0x78c <USB_Host_WaitMS+0x8c>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     782:	80 91 9e 00 	lds	r24, 0x009E
     786:	8e 7f       	andi	r24, 0xFE	; 254
     788:	80 93 9e 00 	sts	0x009E, r24
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
     78c:	35 ff       	sbrs	r19, 5
     78e:	05 c0       	rjmp	.+10     	; 0x79a <USB_Host_WaitMS+0x9a>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     790:	80 91 a0 00 	lds	r24, 0x00A0
     794:	80 62       	ori	r24, 0x20	; 32
     796:	80 93 a0 00 	sts	0x00A0, r24
	  USB_INT_Enable(USB_INT_HSOFI);

	return ErrorCode;
}
     79a:	89 2f       	mov	r24, r25
     79c:	08 95       	ret

0000079e <USB_Host_ResetDevice>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     79e:	60 91 9e 00 	lds	r22, 0x009E
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     7a2:	80 91 a0 00 	lds	r24, 0x00A0
     7a6:	8d 7f       	andi	r24, 0xFD	; 253
     7a8:	80 93 a0 00 	sts	0x00A0, r24
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
     7ac:	80 91 9e 00 	lds	r24, 0x009E
     7b0:	82 60       	ori	r24, 0x02	; 2
     7b2:	80 93 9e 00 	sts	0x009E, r24
			 *  \return Boolean \c true if no bus reset is currently being sent, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
     7b6:	80 91 9e 00 	lds	r24, 0x009E
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
     7ba:	81 fd       	sbrc	r24, 1
     7bc:	fc cf       	rjmp	.-8      	; 0x7b6 <USB_Host_ResetDevice+0x18>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     7be:	80 91 9e 00 	lds	r24, 0x009E
     7c2:	81 60       	ori	r24, 0x01	; 1
     7c4:	80 93 9e 00 	sts	0x009E, r24
	USB_Host_ResumeBus();
	
	USB_Host_ConfigurationNumber = 0;
     7c8:	10 92 1d 01 	sts	0x011D, r1
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     7cc:	30 91 a0 00 	lds	r19, 0x00A0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     7d0:	80 91 a0 00 	lds	r24, 0x00A0
     7d4:	8f 7d       	andi	r24, 0xDF	; 223
     7d6:	80 93 a0 00 	sts	0x00A0, r24
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     7da:	80 91 9f 00 	lds	r24, 0x009F
     7de:	8f 7d       	andi	r24, 0xDF	; 223
     7e0:	80 93 9f 00 	sts	0x009F, r24
     7e4:	2a e0       	ldi	r18, 0x0A	; 10
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     7e6:	40 ed       	ldi	r20, 0xD0	; 208
     7e8:	57 e0       	ldi	r21, 0x07	; 7
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     7ea:	80 91 9f 00 	lds	r24, 0x009F
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     7ee:	85 ff       	sbrs	r24, 5
     7f0:	0b c0       	rjmp	.+22     	; 0x808 <USB_Host_ResetDevice+0x6a>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     7f2:	80 91 9f 00 	lds	r24, 0x009F
     7f6:	8f 7d       	andi	r24, 0xDF	; 223
     7f8:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     7fc:	80 91 9f 00 	lds	r24, 0x009F
     800:	8d 7f       	andi	r24, 0xFD	; 253
     802:	80 93 9f 00 	sts	0x009F, r24
     806:	05 c0       	rjmp	.+10     	; 0x812 <USB_Host_ResetDevice+0x74>
     808:	ca 01       	movw	r24, r20
     80a:	01 97       	sbiw	r24, 0x01	; 1
     80c:	f1 f7       	brne	.-4      	; 0x80a <USB_Host_ResetDevice+0x6c>
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
     80e:	21 50       	subi	r18, 0x01	; 1
     810:	61 f7       	brne	.-40     	; 0x7ea <USB_Host_ResetDevice+0x4c>
		}

		Delay_MS(1);
	}

	if (HSOFIEnabled)
     812:	35 ff       	sbrs	r19, 5
     814:	05 c0       	rjmp	.+10     	; 0x820 <USB_Host_ResetDevice+0x82>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     816:	80 91 a0 00 	lds	r24, 0x00A0
     81a:	80 62       	ori	r24, 0x20	; 32
     81c:	80 93 a0 00 	sts	0x00A0, r24
	  USB_INT_Enable(USB_INT_HSOFI);

	if (BusSuspended)
     820:	60 fd       	sbrc	r22, 0
     822:	05 c0       	rjmp	.+10     	; 0x82e <USB_Host_ResetDevice+0x90>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     824:	80 91 9e 00 	lds	r24, 0x009E
     828:	8e 7f       	andi	r24, 0xFE	; 254
     82a:	80 93 9e 00 	sts	0x009E, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     82e:	80 91 a0 00 	lds	r24, 0x00A0
     832:	82 60       	ori	r24, 0x02	; 2
     834:	80 93 a0 00 	sts	0x00A0, r24
	  USB_Host_SuspendBus();

	USB_INT_Enable(USB_INT_DDISCI);
}
     838:	08 95       	ret

0000083a <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "../Host.h"

void USB_Host_ProcessNextHostState(void)
{
     83a:	ef 92       	push	r14
     83c:	0f 93       	push	r16
     83e:	1f 93       	push	r17
     840:	df 93       	push	r29
     842:	cf 93       	push	r28
     844:	cd b7       	in	r28, 0x3d	; 61
     846:	de b7       	in	r29, 0x3e	; 62
     848:	28 97       	sbiw	r28, 0x08	; 8
     84a:	0f b6       	in	r0, 0x3f	; 63
     84c:	f8 94       	cli
     84e:	de bf       	out	0x3e, r29	; 62
     850:	0f be       	out	0x3f, r0	; 63
     852:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
     854:	80 91 27 01 	lds	r24, 0x0127
     858:	85 30       	cpi	r24, 0x05	; 5
     85a:	09 f4       	brne	.+2      	; 0x85e <USB_Host_ProcessNextHostState+0x24>
     85c:	94 c0       	rjmp	.+296    	; 0x986 <USB_Host_ProcessNextHostState+0x14c>
     85e:	86 30       	cpi	r24, 0x06	; 6
     860:	68 f4       	brcc	.+26     	; 0x87c <USB_Host_ProcessNextHostState+0x42>
     862:	82 30       	cpi	r24, 0x02	; 2
     864:	b9 f1       	breq	.+110    	; 0x8d4 <USB_Host_ProcessNextHostState+0x9a>
     866:	83 30       	cpi	r24, 0x03	; 3
     868:	18 f4       	brcc	.+6      	; 0x870 <USB_Host_ProcessNextHostState+0x36>
     86a:	88 23       	and	r24, r24
     86c:	a1 f0       	breq	.+40     	; 0x896 <USB_Host_ProcessNextHostState+0x5c>
     86e:	04 c1       	rjmp	.+520    	; 0xa78 <USB_Host_ProcessNextHostState+0x23e>
     870:	83 30       	cpi	r24, 0x03	; 3
     872:	d1 f1       	breq	.+116    	; 0x8e8 <USB_Host_ProcessNextHostState+0xae>
     874:	84 30       	cpi	r24, 0x04	; 4
     876:	09 f0       	breq	.+2      	; 0x87a <USB_Host_ProcessNextHostState+0x40>
     878:	ff c0       	rjmp	.+510    	; 0xa78 <USB_Host_ProcessNextHostState+0x23e>
     87a:	5d c0       	rjmp	.+186    	; 0x936 <USB_Host_ProcessNextHostState+0xfc>
     87c:	87 30       	cpi	r24, 0x07	; 7
     87e:	09 f4       	brne	.+2      	; 0x882 <USB_Host_ProcessNextHostState+0x48>
     880:	9b c0       	rjmp	.+310    	; 0x9b8 <USB_Host_ProcessNextHostState+0x17e>
     882:	87 30       	cpi	r24, 0x07	; 7
     884:	08 f4       	brcc	.+2      	; 0x888 <USB_Host_ProcessNextHostState+0x4e>
     886:	8a c0       	rjmp	.+276    	; 0x99c <USB_Host_ProcessNextHostState+0x162>
     888:	88 30       	cpi	r24, 0x08	; 8
     88a:	09 f4       	brne	.+2      	; 0x88e <USB_Host_ProcessNextHostState+0x54>
     88c:	b3 c0       	rjmp	.+358    	; 0x9f4 <USB_Host_ProcessNextHostState+0x1ba>
     88e:	89 30       	cpi	r24, 0x09	; 9
     890:	09 f0       	breq	.+2      	; 0x894 <USB_Host_ProcessNextHostState+0x5a>
     892:	f2 c0       	rjmp	.+484    	; 0xa78 <USB_Host_ProcessNextHostState+0x23e>
     894:	d7 c0       	rjmp	.+430    	; 0xa44 <USB_Host_ProcessNextHostState+0x20a>
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
     896:	00 91 1b 01 	lds	r16, 0x011B
     89a:	10 91 1c 01 	lds	r17, 0x011C
     89e:	01 15       	cp	r16, r1
     8a0:	11 05       	cpc	r17, r1
     8a2:	09 f4       	brne	.+2      	; 0x8a6 <USB_Host_ProcessNextHostState+0x6c>
     8a4:	e9 c0       	rjmp	.+466    	; 0xa78 <USB_Host_ProcessNextHostState+0x23e>
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     8a6:	81 e0       	ldi	r24, 0x01	; 1
     8a8:	2b df       	rcall	.-426    	; 0x700 <USB_Host_WaitMS>
     8aa:	68 2f       	mov	r22, r24
     8ac:	88 23       	and	r24, r24
     8ae:	31 f0       	breq	.+12     	; 0x8bc <USB_Host_ProcessNextHostState+0x82>
				{
					USB_HostState = PostWaitState;
     8b0:	80 91 1a 01 	lds	r24, 0x011A
     8b4:	80 93 27 01 	sts	0x0127, r24
     8b8:	91 e0       	ldi	r25, 0x01	; 1
     8ba:	da c0       	rjmp	.+436    	; 0xa70 <USB_Host_ProcessNextHostState+0x236>
					ErrorCode     = HOST_ENUMERROR_WaitStage;
					break;
				}

				if (!(--WaitMSRemaining))
     8bc:	c8 01       	movw	r24, r16
     8be:	01 97       	sbiw	r24, 0x01	; 1
     8c0:	90 93 1c 01 	sts	0x011C, r25
     8c4:	80 93 1b 01 	sts	0x011B, r24
     8c8:	89 2b       	or	r24, r25
     8ca:	09 f0       	breq	.+2      	; 0x8ce <USB_Host_ProcessNextHostState+0x94>
     8cc:	d5 c0       	rjmp	.+426    	; 0xa78 <USB_Host_ProcessNextHostState+0x23e>
				  USB_HostState = PostWaitState;
     8ce:	80 91 1a 01 	lds	r24, 0x011A
     8d2:	07 c0       	rjmp	.+14     	; 0x8e2 <USB_Host_ProcessNextHostState+0xa8>
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
     8d4:	88 ee       	ldi	r24, 0xE8	; 232
     8d6:	93 e0       	ldi	r25, 0x03	; 3
     8d8:	90 93 1c 01 	sts	0x011C, r25
     8dc:	80 93 1b 01 	sts	0x011B, r24

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
     8e0:	83 e0       	ldi	r24, 0x03	; 3
     8e2:	80 93 27 01 	sts	0x0127, r24
     8e6:	c8 c0       	rjmp	.+400    	; 0xa78 <USB_Host_ProcessNextHostState+0x23e>
			break;
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
     8e8:	80 91 1b 01 	lds	r24, 0x011B
     8ec:	90 91 1c 01 	lds	r25, 0x011C
     8f0:	01 97       	sbiw	r24, 0x01	; 1
     8f2:	90 93 1c 01 	sts	0x011C, r25
     8f6:	80 93 1b 01 	sts	0x011B, r24
     8fa:	01 96       	adiw	r24, 0x01	; 1
     8fc:	29 f0       	breq	.+10     	; 0x908 <USB_Host_ProcessNextHostState+0xce>
     8fe:	80 ed       	ldi	r24, 0xD0	; 208
     900:	97 e0       	ldi	r25, 0x07	; 7
     902:	01 97       	sbiw	r24, 0x01	; 1
     904:	f1 f7       	brne	.-4      	; 0x902 <USB_Host_ProcessNextHostState+0xc8>
     906:	b8 c0       	rjmp	.+368    	; 0xa78 <USB_Host_ProcessNextHostState+0x23e>
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
     908:	77 98       	cbi	0x0e, 7	; 14

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     90a:	80 91 d8 00 	lds	r24, 0x00D8
     90e:	80 61       	ori	r24, 0x10	; 16
     910:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
     914:	80 91 dd 00 	lds	r24, 0x00DD
     918:	8b 7f       	andi	r24, 0xFB	; 251
     91a:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON |=  (1 << UVCONE);
     91e:	80 91 d7 00 	lds	r24, 0x00D7
     922:	80 61       	ori	r24, 0x10	; 16
     924:	80 93 d7 00 	sts	0x00D7, r24
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
     928:	80 91 dd 00 	lds	r24, 0x00DD
     92c:	82 60       	ori	r24, 0x02	; 2
     92e:	80 93 dd 00 	sts	0x00DD, r24

				USB_OTGPAD_On();
				USB_Host_VBUS_Auto_Enable();
				USB_Host_VBUS_Auto_On();

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
     932:	84 e0       	ldi	r24, 0x04	; 4
     934:	d6 cf       	rjmp	.-84     	; 0x8e2 <USB_Host_ProcessNextHostState+0xa8>
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
     936:	80 91 9f 00 	lds	r24, 0x009F
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
     93a:	80 ff       	sbrs	r24, 0
     93c:	9d c0       	rjmp	.+314    	; 0xa78 <USB_Host_ProcessNextHostState+0x23e>
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     93e:	80 91 9f 00 	lds	r24, 0x009F
     942:	8e 7f       	andi	r24, 0xFE	; 254
     944:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     948:	80 91 9f 00 	lds	r24, 0x009F
     94c:	8d 7f       	andi	r24, 0xFD	; 253
     94e:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     952:	80 91 df 00 	lds	r24, 0x00DF
     956:	8d 7f       	andi	r24, 0xFD	; 253
     958:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
     95c:	80 91 de 00 	lds	r24, 0x00DE
     960:	82 60       	ori	r24, 0x02	; 2
     962:	80 93 de 00 	sts	0x00DE, r24
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     966:	80 91 9e 00 	lds	r24, 0x009E
     96a:	81 60       	ori	r24, 0x01	; 1
     96c:	80 93 9e 00 	sts	0x009E, r24

				USB_INT_Clear(USB_INT_VBERRI);
				USB_INT_Enable(USB_INT_VBERRI);

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
     970:	ed d0       	rcall	.+474    	; 0xb4c <Pipe_ClearPipes>

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
     972:	10 92 27 01 	sts	0x0127, r1
     976:	84 e6       	ldi	r24, 0x64	; 100
     978:	90 e0       	ldi	r25, 0x00	; 0
     97a:	90 93 1c 01 	sts	0x011C, r25
     97e:	80 93 1b 01 	sts	0x011B, r24
     982:	85 e0       	ldi	r24, 0x05	; 5
     984:	5c c0       	rjmp	.+184    	; 0xa3e <USB_Host_ProcessNextHostState+0x204>
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
     986:	0b df       	rcall	.-490    	; 0x79e <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
     988:	10 92 27 01 	sts	0x0127, r1
     98c:	88 ec       	ldi	r24, 0xC8	; 200
     98e:	90 e0       	ldi	r25, 0x00	; 0
     990:	90 93 1c 01 	sts	0x011C, r25
     994:	80 93 1b 01 	sts	0x011B, r24
     998:	86 e0       	ldi	r24, 0x06	; 6
     99a:	51 c0       	rjmp	.+162    	; 0xa3e <USB_Host_ProcessNextHostState+0x204>
			break;
		case HOST_STATE_Powered_ConfigPipe:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
     99c:	80 e0       	ldi	r24, 0x00	; 0
     99e:	60 e0       	ldi	r22, 0x00	; 0
     9a0:	40 e0       	ldi	r20, 0x00	; 0
     9a2:	20 e0       	ldi	r18, 0x00	; 0
     9a4:	00 e4       	ldi	r16, 0x40	; 64
     9a6:	10 e0       	ldi	r17, 0x00	; 0
     9a8:	ee 24       	eor	r14, r14
     9aa:	72 d0       	rcall	.+228    	; 0xa90 <Pipe_ConfigurePipe>
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     9ac:	80 91 ac 00 	lds	r24, 0x00AC
							   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
							   PIPE_CONTROLPIPE_DEFAULT_SIZE, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
     9b0:	87 ff       	sbrs	r24, 7
     9b2:	5c c0       	rjmp	.+184    	; 0xa6c <USB_Host_ProcessNextHostState+0x232>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
     9b4:	87 e0       	ldi	r24, 0x07	; 7
     9b6:	95 cf       	rjmp	.-214    	; 0x8e2 <USB_Host_ProcessNextHostState+0xa8>
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
     9b8:	af e1       	ldi	r26, 0x1F	; 31
     9ba:	b1 e0       	ldi	r27, 0x01	; 1
     9bc:	e0 e1       	ldi	r30, 0x10	; 16
     9be:	f1 e0       	ldi	r31, 0x01	; 1
     9c0:	88 e0       	ldi	r24, 0x08	; 8
     9c2:	01 90       	ld	r0, Z+
     9c4:	0d 92       	st	X+, r0
     9c6:	81 50       	subi	r24, 0x01	; 1
     9c8:	e1 f7       	brne	.-8      	; 0x9c2 <USB_Host_ProcessNextHostState+0x188>
					.wLength       = 8,
				};

			uint8_t DataBuffer[8];

			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
     9ca:	ce 01       	movw	r24, r28
     9cc:	01 96       	adiw	r24, 0x01	; 1
     9ce:	31 d3       	rcall	.+1634   	; 0x1032 <USB_Host_SendControlRequest>
     9d0:	68 2f       	mov	r22, r24
     9d2:	88 23       	and	r24, r24
     9d4:	09 f0       	breq	.+2      	; 0x9d8 <USB_Host_ProcessNextHostState+0x19e>
     9d6:	48 c0       	rjmp	.+144    	; 0xa68 <USB_Host_ProcessNextHostState+0x22e>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_Host_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
     9d8:	88 85       	ldd	r24, Y+8	; 0x08
     9da:	80 93 18 01 	sts	0x0118, r24

			USB_Host_ResetDevice();
     9de:	df de       	rcall	.-578    	; 0x79e <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
     9e0:	10 92 27 01 	sts	0x0127, r1
     9e4:	88 ec       	ldi	r24, 0xC8	; 200
     9e6:	90 e0       	ldi	r25, 0x00	; 0
     9e8:	90 93 1c 01 	sts	0x011C, r25
     9ec:	80 93 1b 01 	sts	0x011B, r24
     9f0:	88 e0       	ldi	r24, 0x08	; 8
     9f2:	25 c0       	rjmp	.+74     	; 0xa3e <USB_Host_ProcessNextHostState+0x204>
			break;
		case HOST_STATE_Default_PostReset:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
     9f4:	00 91 18 01 	lds	r16, 0x0118
     9f8:	80 e0       	ldi	r24, 0x00	; 0
     9fa:	60 e0       	ldi	r22, 0x00	; 0
     9fc:	40 e0       	ldi	r20, 0x00	; 0
     9fe:	20 e0       	ldi	r18, 0x00	; 0
     a00:	10 e0       	ldi	r17, 0x00	; 0
     a02:	ee 24       	eor	r14, r14
     a04:	45 d0       	rcall	.+138    	; 0xa90 <Pipe_ConfigurePipe>
     a06:	80 91 ac 00 	lds	r24, 0x00AC
			                   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
			                   USB_Host_ControlPipeSize, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
     a0a:	87 ff       	sbrs	r24, 7
     a0c:	2f c0       	rjmp	.+94     	; 0xa6c <USB_Host_ProcessNextHostState+0x232>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
     a0e:	af e1       	ldi	r26, 0x1F	; 31
     a10:	b1 e0       	ldi	r27, 0x01	; 1
     a12:	e8 e0       	ldi	r30, 0x08	; 8
     a14:	f1 e0       	ldi	r31, 0x01	; 1
     a16:	88 e0       	ldi	r24, 0x08	; 8
     a18:	01 90       	ld	r0, Z+
     a1a:	0d 92       	st	X+, r0
     a1c:	81 50       	subi	r24, 0x01	; 1
     a1e:	e1 f7       	brne	.-8      	; 0xa18 <USB_Host_ProcessNextHostState+0x1de>
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
     a20:	80 e0       	ldi	r24, 0x00	; 0
     a22:	90 e0       	ldi	r25, 0x00	; 0
     a24:	06 d3       	rcall	.+1548   	; 0x1032 <USB_Host_SendControlRequest>
     a26:	68 2f       	mov	r22, r24
     a28:	88 23       	and	r24, r24
     a2a:	f1 f4       	brne	.+60     	; 0xa68 <USB_Host_ProcessNextHostState+0x22e>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
     a2c:	10 92 27 01 	sts	0x0127, r1
     a30:	84 e6       	ldi	r24, 0x64	; 100
     a32:	90 e0       	ldi	r25, 0x00	; 0
     a34:	90 93 1c 01 	sts	0x011C, r25
     a38:	80 93 1b 01 	sts	0x011B, r24
     a3c:	89 e0       	ldi	r24, 0x09	; 9
     a3e:	80 93 1a 01 	sts	0x011A, r24
     a42:	1a c0       	rjmp	.+52     	; 0xa78 <USB_Host_ProcessNextHostState+0x23e>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
     a44:	81 e0       	ldi	r24, 0x01	; 1
     a46:	80 93 a1 00 	sts	0x00A1, r24
			break;
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			USB_HostState = HOST_STATE_Addressed;
     a4a:	8a e0       	ldi	r24, 0x0A	; 10
     a4c:	80 93 27 01 	sts	0x0127, r24

			EVENT_USB_Host_DeviceEnumerationComplete();
     a50:	01 dd       	rcall	.-1534   	; 0x454 <EVENT_USB_Host_DeviceEnumerationComplete>
     a52:	12 c0       	rjmp	.+36     	; 0xa78 <USB_Host_ProcessNextHostState+0x23e>
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
     a54:	89 2f       	mov	r24, r25
     a56:	a7 dc       	rcall	.-1714   	; 0x3a6 <EVENT_USB_Host_DeviceEnumerationFailed>
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     a58:	80 91 dd 00 	lds	r24, 0x00DD
     a5c:	81 60       	ori	r24, 0x01	; 1
     a5e:	80 93 dd 00 	sts	0x00DD, r24

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
     a62:	e8 dc       	rcall	.-1584   	; 0x434 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     a64:	b6 d0       	rcall	.+364    	; 0xbd2 <USB_ResetInterface>
     a66:	08 c0       	rjmp	.+16     	; 0xa78 <USB_Host_ProcessNextHostState+0x23e>
	}
}
     a68:	93 e0       	ldi	r25, 0x03	; 3
     a6a:	02 c0       	rjmp	.+4      	; 0xa70 <USB_Host_ProcessNextHostState+0x236>
     a6c:	94 e0       	ldi	r25, 0x04	; 4
     a6e:	60 e0       	ldi	r22, 0x00	; 0

			EVENT_USB_Host_DeviceEnumerationComplete();
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
     a70:	80 91 27 01 	lds	r24, 0x0127
     a74:	81 30       	cpi	r24, 0x01	; 1
     a76:	71 f7       	brne	.-36     	; 0xa54 <USB_Host_ProcessNextHostState+0x21a>

		EVENT_USB_Host_DeviceUnattached();

		USB_ResetInterface();
	}
}
     a78:	28 96       	adiw	r28, 0x08	; 8
     a7a:	0f b6       	in	r0, 0x3f	; 63
     a7c:	f8 94       	cli
     a7e:	de bf       	out	0x3e, r29	; 62
     a80:	0f be       	out	0x3f, r0	; 63
     a82:	cd bf       	out	0x3d, r28	; 61
     a84:	cf 91       	pop	r28
     a86:	df 91       	pop	r29
     a88:	1f 91       	pop	r17
     a8a:	0f 91       	pop	r16
     a8c:	ef 90       	pop	r14
     a8e:	08 95       	ret

00000a90 <Pipe_ConfigurePipe>:
                        const uint8_t Type,
                        const uint8_t Token,
                        const uint8_t EndpointNumber,
                        const uint16_t Size,
                        const uint8_t Banks)
{
     a90:	ef 92       	push	r14
     a92:	0f 93       	push	r16
     a94:	1f 93       	push	r17
     a96:	e8 2f       	mov	r30, r24
     a98:	7e 2d       	mov	r23, r14

		Pipe_SelectPipe(PNum);
		
		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
     a9a:	62 95       	swap	r22
     a9c:	66 0f       	add	r22, r22
     a9e:	66 0f       	add	r22, r22
     aa0:	60 7c       	andi	r22, 0xC0	; 192
     aa2:	64 2b       	or	r22, r20
     aa4:	2f 70       	andi	r18, 0x0F	; 15
     aa6:	62 2b       	or	r22, r18
     aa8:	38 2f       	mov	r19, r24
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     aaa:	72 60       	ori	r23, 0x02	; 2
     aac:	45 c0       	rjmp	.+138    	; 0xb38 <Pipe_ConfigurePipe+0xa8>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     aae:	30 93 a7 00 	sts	0x00A7, r19
		uint8_t UPCFG2XTemp;
		uint8_t UPIENXTemp;

		Pipe_SelectPipe(PNum);
		
		if (PNum == Number)
     ab2:	3e 17       	cp	r19, r30
     ab4:	a1 f4       	brne	.+40     	; 0xade <Pipe_ConfigurePipe+0x4e>
     ab6:	88 e0       	ldi	r24, 0x08	; 8
     ab8:	90 e0       	ldi	r25, 0x00	; 0
     aba:	20 e0       	ldi	r18, 0x00	; 0
     abc:	03 c0       	rjmp	.+6      	; 0xac4 <Pipe_ConfigurePipe+0x34>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
				{
					MaskVal++;
     abe:	2f 5f       	subi	r18, 0xFF	; 255
					CheckBytes <<= 1;
     ac0:	88 0f       	add	r24, r24
     ac2:	99 1f       	adc	r25, r25
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
     ac4:	80 17       	cp	r24, r16
     ac6:	91 07       	cpc	r25, r17
     ac8:	10 f4       	brcc	.+4      	; 0xace <Pipe_ConfigurePipe+0x3e>
     aca:	25 30       	cpi	r18, 0x05	; 5
     acc:	c1 f7       	brne	.-16     	; 0xabe <Pipe_ConfigurePipe+0x2e>
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     ace:	92 2f       	mov	r25, r18
     ad0:	92 95       	swap	r25
     ad2:	90 7f       	andi	r25, 0xF0	; 240
     ad4:	97 2b       	or	r25, r23
     ad6:	56 2f       	mov	r21, r22
     ad8:	40 e0       	ldi	r20, 0x00	; 0
     ada:	20 e0       	ldi	r18, 0x00	; 0
     adc:	08 c0       	rjmp	.+16     	; 0xaee <Pipe_ConfigurePipe+0x5e>
			UPCFG2XTemp = 0;
			UPIENXTemp  = 0;
		}
		else
		{
			UPCFG0XTemp = UPCFG0X;
     ade:	50 91 aa 00 	lds	r21, 0x00AA
			UPCFG1XTemp = UPCFG1X;
     ae2:	90 91 ab 00 	lds	r25, 0x00AB
			UPCFG2XTemp = UPCFG2X;
     ae6:	40 91 ad 00 	lds	r20, 0x00AD
			UPIENXTemp  = UPIENX;
     aea:	20 91 ae 00 	lds	r18, 0x00AE
		}

		if (!(UPCFG1XTemp & (1 << ALLOC)))
     aee:	91 ff       	sbrs	r25, 1
     af0:	22 c0       	rjmp	.+68     	; 0xb36 <Pipe_ConfigurePipe+0xa6>
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     af2:	80 91 a9 00 	lds	r24, 0x00A9
     af6:	8e 7f       	andi	r24, 0xFE	; 254
     af8:	80 93 a9 00 	sts	0x00A9, r24
		  continue;
		  
		Pipe_DisablePipe();
		UPCFG1X &= ~(1 << ALLOC);
     afc:	80 91 ab 00 	lds	r24, 0x00AB
     b00:	8d 7f       	andi	r24, 0xFD	; 253
     b02:	80 93 ab 00 	sts	0x00AB, r24
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
     b06:	80 91 a9 00 	lds	r24, 0x00A9
     b0a:	81 60       	ori	r24, 0x01	; 1
     b0c:	80 93 a9 00 	sts	0x00A9, r24

		Pipe_EnablePipe();
		UPCFG0X = UPCFG0XTemp;
     b10:	50 93 aa 00 	sts	0x00AA, r21
		UPCFG1X = UPCFG1XTemp;
     b14:	90 93 ab 00 	sts	0x00AB, r25
		UPCFG2X = UPCFG2XTemp;
     b18:	40 93 ad 00 	sts	0x00AD, r20
		UPIENX  = UPIENXTemp;
     b1c:	20 93 ae 00 	sts	0x00AE, r18

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
     b20:	80 91 a9 00 	lds	r24, 0x00A9
     b24:	80 62       	ori	r24, 0x20	; 32
     b26:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     b2a:	80 91 ac 00 	lds	r24, 0x00AC

		Pipe_SetInfiniteINRequests();
	
		if (!(Pipe_IsConfigured()))
     b2e:	87 fd       	sbrc	r24, 7
     b30:	02 c0       	rjmp	.+4      	; 0xb36 <Pipe_ConfigurePipe+0xa6>
     b32:	80 e0       	ldi	r24, 0x00	; 0
     b34:	07 c0       	rjmp	.+14     	; 0xb44 <Pipe_ConfigurePipe+0xb4>

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else	
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
     b36:	3f 5f       	subi	r19, 0xFF	; 255
     b38:	37 30       	cpi	r19, 0x07	; 7
     b3a:	08 f4       	brcc	.+2      	; 0xb3e <Pipe_ConfigurePipe+0xae>
     b3c:	b8 cf       	rjmp	.-144    	; 0xaae <Pipe_ConfigurePipe+0x1e>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     b3e:	e0 93 a7 00 	sts	0x00A7, r30
     b42:	81 e0       	ldi	r24, 0x01	; 1
	}
		
	Pipe_SelectPipe(Number);	
	return true;
#endif
}
     b44:	1f 91       	pop	r17
     b46:	0f 91       	pop	r16
     b48:	ef 90       	pop	r14
     b4a:	08 95       	ret

00000b4c <Pipe_ClearPipes>:

void Pipe_ClearPipes(void)
{
	UPINT = 0;
     b4c:	10 92 f8 00 	sts	0x00F8, r1
     b50:	90 e0       	ldi	r25, 0x00	; 0
     b52:	90 93 a7 00 	sts	0x00A7, r25

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
     b56:	10 92 ae 00 	sts	0x00AE, r1
		UPINTX  = 0;
     b5a:	10 92 a6 00 	sts	0x00A6, r1
		UPCFG1X = 0;
     b5e:	10 92 ab 00 	sts	0x00AB, r1
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     b62:	80 91 a9 00 	lds	r24, 0x00A9
     b66:	8e 7f       	andi	r24, 0xFE	; 254
     b68:	80 93 a9 00 	sts	0x00A9, r24

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     b6c:	9f 5f       	subi	r25, 0xFF	; 255
     b6e:	97 30       	cpi	r25, 0x07	; 7
     b70:	81 f7       	brne	.-32     	; 0xb52 <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
     b72:	08 95       	ret

00000b74 <Pipe_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
     b74:	40 91 a2 00 	lds	r20, 0x00A2
     b78:	50 91 a3 00 	lds	r21, 0x00A3
     b7c:	24 e6       	ldi	r18, 0x64	; 100
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
     b7e:	80 91 aa 00 	lds	r24, 0x00AA

	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
     b82:	80 73       	andi	r24, 0x30	; 48
     b84:	80 31       	cpi	r24, 0x10	; 16
     b86:	29 f4       	brne	.+10     	; 0xb92 <Pipe_WaitUntilReady+0x1e>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     b88:	80 91 a6 00 	lds	r24, 0x00A6
		{
			if (Pipe_IsINReceived())
     b8c:	80 ff       	sbrs	r24, 0
     b8e:	05 c0       	rjmp	.+10     	; 0xb9a <Pipe_WaitUntilReady+0x26>
     b90:	1e c0       	rjmp	.+60     	; 0xbce <Pipe_WaitUntilReady+0x5a>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     b92:	80 91 a6 00 	lds	r24, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
     b96:	82 fd       	sbrc	r24, 2
     b98:	1a c0       	rjmp	.+52     	; 0xbce <Pipe_WaitUntilReady+0x5a>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     b9a:	80 91 a6 00 	lds	r24, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
     b9e:	81 ff       	sbrs	r24, 1
     ba0:	02 c0       	rjmp	.+4      	; 0xba6 <Pipe_WaitUntilReady+0x32>
     ba2:	81 e0       	ldi	r24, 0x01	; 1
     ba4:	08 95       	ret
		  return PIPE_READYWAIT_PipeStalled;
		else if (USB_HostState == HOST_STATE_Unattached)
     ba6:	80 91 27 01 	lds	r24, 0x0127
     baa:	81 30       	cpi	r24, 0x01	; 1
     bac:	11 f4       	brne	.+4      	; 0xbb2 <Pipe_WaitUntilReady+0x3e>
     bae:	82 e0       	ldi	r24, 0x02	; 2
     bb0:	08 95       	ret
     bb2:	80 91 a2 00 	lds	r24, 0x00A2
     bb6:	90 91 a3 00 	lds	r25, 0x00A3
		  return PIPE_READYWAIT_DeviceDisconnected;

		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     bba:	84 17       	cp	r24, r20
     bbc:	95 07       	cpc	r25, r21
     bbe:	f9 f2       	breq	.-66     	; 0xb7e <Pipe_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     bc0:	22 23       	and	r18, r18
     bc2:	11 f4       	brne	.+4      	; 0xbc8 <Pipe_WaitUntilReady+0x54>
     bc4:	83 e0       	ldi	r24, 0x03	; 3
     bc6:	08 95       	ret
     bc8:	21 50       	subi	r18, 0x01	; 1
     bca:	ac 01       	movw	r20, r24
     bcc:	d8 cf       	rjmp	.-80     	; 0xb7e <Pipe_WaitUntilReady+0xa>
     bce:	80 e0       	ldi	r24, 0x00	; 0
			  return PIPE_READYWAIT_Timeout;
		}
	}
}
     bd0:	08 95       	ret

00000bd2 <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     bd2:	70 d0       	rcall	.+224    	; 0xcb4 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     bd4:	77 d0       	rcall	.+238    	; 0xcc4 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     bd6:	80 91 d8 00 	lds	r24, 0x00D8
     bda:	8f 77       	andi	r24, 0x7F	; 127
     bdc:	80 93 d8 00 	sts	0x00D8, r24
				USBCON |=  (1 << USBE);
     be0:	80 91 d8 00 	lds	r24, 0x00D8
     be4:	80 68       	ori	r24, 0x80	; 128
     be6:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
     bea:	80 91 d8 00 	lds	r24, 0x00D8
     bee:	8f 7d       	andi	r24, 0xDF	; 223
     bf0:	80 93 d8 00 	sts	0x00D8, r24
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
     bf4:	80 91 d7 00 	lds	r24, 0x00D7
     bf8:	8f 77       	andi	r24, 0x7F	; 127
     bfa:	80 93 d7 00 	sts	0x00D7, r24

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     bfe:	8c e0       	ldi	r24, 0x0C	; 12
     c00:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     c02:	8e e0       	ldi	r24, 0x0E	; 14
     c04:	89 bd       	out	0x29, r24	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_CAN_BE_HOST)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));		
     c06:	09 b4       	in	r0, 0x29	; 41
     c08:	00 fe       	sbrs	r0, 0
     c0a:	fd cf       	rjmp	.-6      	; 0xc06 <USB_ResetInterface+0x34>
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState                = HOST_STATE_Unattached;
     c0c:	81 e0       	ldi	r24, 0x01	; 1
     c0e:	80 93 27 01 	sts	0x0127, r24
	USB_Host_ConfigurationNumber = 0;
     c12:	10 92 1d 01 	sts	0x011D, r1
	USB_Host_ControlPipeSize     = PIPE_CONTROLPIPE_DEFAULT_SIZE;
     c16:	80 e4       	ldi	r24, 0x40	; 64
     c18:	80 93 18 01 	sts	0x0118, r24
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
     c1c:	80 91 d8 00 	lds	r24, 0x00D8
     c20:	80 64       	ori	r24, 0x40	; 64
     c22:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     c26:	80 91 dd 00 	lds	r24, 0x00DD
     c2a:	81 60       	ori	r24, 0x01	; 1
     c2c:	80 93 dd 00 	sts	0x00DD, r24
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
     c30:	80 91 dd 00 	lds	r24, 0x00DD
     c34:	84 60       	ori	r24, 0x04	; 4
     c36:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON &= ~(1 << UVCONE);
     c3a:	80 91 d7 00 	lds	r24, 0x00D7
     c3e:	8f 7e       	andi	r24, 0xEF	; 239
     c40:	80 93 d7 00 	sts	0x00D7, r24

				DDRE   |=  (1 << 7);
     c44:	6f 9a       	sbi	0x0d, 7	; 13
			}

			static inline void USB_Host_VBUS_Manual_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_On(void)
			{
				PORTE  |=  (1 << 7);
     c46:	77 9a       	sbi	0x0e, 7	; 14
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN |= (1 << SRPE);						
     c48:	80 91 de 00 	lds	r24, 0x00DE
     c4c:	81 60       	ori	r24, 0x01	; 1
     c4e:	80 93 de 00 	sts	0x00DE, r24
						break;
					case USB_INT_RSTI:
						UHIEN  |= (1 << RSTE);
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
     c52:	80 91 de 00 	lds	r24, 0x00DE
     c56:	84 60       	ori	r24, 0x04	; 4
     c58:	80 93 de 00 	sts	0x00DE, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     c5c:	80 91 e0 00 	lds	r24, 0x00E0
     c60:	8e 7f       	andi	r24, 0xFE	; 254
     c62:	80 93 e0 00 	sts	0x00E0, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     c66:	80 91 d8 00 	lds	r24, 0x00D8
     c6a:	80 61       	ori	r24, 0x10	; 16
     c6c:	80 93 d8 00 	sts	0x00D8, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     c70:	08 95       	ret

00000c72 <USB_Init>:

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
     c72:	e7 ed       	ldi	r30, 0xD7	; 215
     c74:	f0 e0       	ldi	r31, 0x00	; 0
     c76:	80 81       	ld	r24, Z
     c78:	81 60       	ori	r24, 0x01	; 1
     c7a:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     c7c:	81 e0       	ldi	r24, 0x01	; 1
     c7e:	80 93 1e 01 	sts	0x011E, r24

	USB_ResetInterface();
}
     c82:	a7 cf       	rjmp	.-178    	; 0xbd2 <USB_ResetInterface>

00000c84 <USB_Disable>:

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
     c84:	17 d0       	rcall	.+46     	; 0xcb4 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     c86:	1e d0       	rcall	.+60     	; 0xcc4 <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
     c88:	e0 ee       	ldi	r30, 0xE0	; 224
     c8a:	f0 e0       	ldi	r31, 0x00	; 0
     c8c:	80 81       	ld	r24, Z
     c8e:	81 60       	ori	r24, 0x01	; 1
     c90:	80 83       	st	Z, r24
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON  &= ~(1 << USBE);
     c92:	a8 ed       	ldi	r26, 0xD8	; 216
     c94:	b0 e0       	ldi	r27, 0x00	; 0
     c96:	8c 91       	ld	r24, X
     c98:	8f 77       	andi	r24, 0x7F	; 127
     c9a:	8c 93       	st	X, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     c9c:	19 bc       	out	0x29, r1	; 41

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  &= ~(1 << UVREGE);
     c9e:	e7 ed       	ldi	r30, 0xD7	; 215
     ca0:	f0 e0       	ldi	r31, 0x00	; 0
     ca2:	80 81       	ld	r24, Z
     ca4:	8e 7f       	andi	r24, 0xFE	; 254
     ca6:	80 83       	st	Z, r24
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON  &= ~(1 << OTGPADE);
     ca8:	8c 91       	ld	r24, X
     caa:	8f 7e       	andi	r24, 0xEF	; 239
     cac:	8c 93       	st	X, r24

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
     cae:	10 92 1e 01 	sts	0x011E, r1
}
     cb2:	08 95       	ret

00000cb4 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     cb4:	e8 ed       	ldi	r30, 0xD8	; 216
     cb6:	f0 e0       	ldi	r31, 0x00	; 0
     cb8:	80 81       	ld	r24, Z
     cba:	8c 7f       	andi	r24, 0xFC	; 252
     cbc:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
     cbe:	10 92 a0 00 	sts	0x00A0, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
	#endif
}
     cc2:	08 95       	ret

00000cc4 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     cc4:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_BOTH)
	OTGINT = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
     cc8:	10 92 9f 00 	sts	0x009F, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
	#endif
}
     ccc:	08 95       	ret

00000cce <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
     cce:	1f 92       	push	r1
     cd0:	0f 92       	push	r0
     cd2:	0f b6       	in	r0, 0x3f	; 63
     cd4:	0f 92       	push	r0
     cd6:	0b b6       	in	r0, 0x3b	; 59
     cd8:	0f 92       	push	r0
     cda:	11 24       	eor	r1, r1
     cdc:	2f 93       	push	r18
     cde:	3f 93       	push	r19
     ce0:	4f 93       	push	r20
     ce2:	5f 93       	push	r21
     ce4:	6f 93       	push	r22
     ce6:	7f 93       	push	r23
     ce8:	8f 93       	push	r24
     cea:	9f 93       	push	r25
     cec:	af 93       	push	r26
     cee:	bf 93       	push	r27
     cf0:	ef 93       	push	r30
     cf2:	ff 93       	push	r31
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     cf4:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	#if defined(USB_CAN_BE_HOST)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
     cf8:	85 ff       	sbrs	r24, 5
     cfa:	0a c0       	rjmp	.+20     	; 0xd10 <__vector_10+0x42>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     cfc:	80 91 a0 00 	lds	r24, 0x00A0
     d00:	85 ff       	sbrs	r24, 5
     d02:	06 c0       	rjmp	.+12     	; 0xd10 <__vector_10+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     d04:	80 91 9f 00 	lds	r24, 0x009F
     d08:	8f 7d       	andi	r24, 0xDF	; 223
     d0a:	80 93 9f 00 	sts	0x009F, r24
	{
		USB_INT_Clear(USB_INT_HSOFI);

		EVENT_USB_Host_StartOfFrame();
     d0e:	67 d1       	rcall	.+718    	; 0xfde <USB_Event_Stub>
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
     d10:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
     d14:	81 ff       	sbrs	r24, 1
     d16:	15 c0       	rjmp	.+42     	; 0xd42 <__vector_10+0x74>
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
					case USB_INT_DCONNI:
						return (UHIEN  & (1 << DCONNE));
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
     d18:	80 91 a0 00 	lds	r24, 0x00A0
     d1c:	81 ff       	sbrs	r24, 1
     d1e:	11 c0       	rjmp	.+34     	; 0xd42 <__vector_10+0x74>
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     d20:	80 91 9f 00 	lds	r24, 0x009F
     d24:	8d 7f       	andi	r24, 0xFD	; 253
     d26:	80 93 9f 00 	sts	0x009F, r24
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     d2a:	80 91 9f 00 	lds	r24, 0x009F
     d2e:	8e 7f       	andi	r24, 0xFE	; 254
     d30:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     d34:	80 91 a0 00 	lds	r24, 0x00A0
     d38:	8d 7f       	andi	r24, 0xFD	; 253
     d3a:	80 93 a0 00 	sts	0x00A0, r24
	{
		USB_INT_Clear(USB_INT_DDISCI);
		USB_INT_Clear(USB_INT_DCONNI);
		USB_INT_Disable(USB_INT_DDISCI);

		EVENT_USB_Host_DeviceUnattached();
     d3e:	7a db       	rcall	.-2316   	; 0x434 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     d40:	48 df       	rcall	.-368    	; 0xbd2 <USB_ResetInterface>
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
     d42:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
     d46:	81 ff       	sbrs	r24, 1
     d48:	15 c0       	rjmp	.+42     	; 0xd74 <__vector_10+0xa6>
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
     d4a:	80 91 de 00 	lds	r24, 0x00DE
     d4e:	81 ff       	sbrs	r24, 1
     d50:	11 c0       	rjmp	.+34     	; 0xd74 <__vector_10+0xa6>
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     d52:	80 91 df 00 	lds	r24, 0x00DF
     d56:	8d 7f       	andi	r24, 0xFD	; 253
     d58:	80 93 df 00 	sts	0x00DF, r24
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
     d5c:	77 98       	cbi	0x0e, 7	; 14
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     d5e:	80 91 dd 00 	lds	r24, 0x00DD
     d62:	81 60       	ori	r24, 0x01	; 1
     d64:	80 93 dd 00 	sts	0x00DD, r24
		USB_INT_Clear(USB_INT_VBERRI);

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
     d68:	80 e0       	ldi	r24, 0x00	; 0
     d6a:	48 db       	rcall	.-2416   	; 0x3fc <EVENT_USB_Host_HostError>
		EVENT_USB_Host_DeviceUnattached();
     d6c:	63 db       	rcall	.-2362   	; 0x434 <EVENT_USB_Host_DeviceUnattached>

		USB_HostState = HOST_STATE_Unattached;
     d6e:	81 e0       	ldi	r24, 0x01	; 1
     d70:	80 93 27 01 	sts	0x0127, r24
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
					case USB_INT_SRPI:
						return (OTGINT & (1 << SRPI));
     d74:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
     d78:	80 ff       	sbrs	r24, 0
     d7a:	17 c0       	rjmp	.+46     	; 0xdaa <__vector_10+0xdc>
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
					case USB_INT_SRPI:
						return (OTGIEN & (1 << SRPE));
     d7c:	80 91 de 00 	lds	r24, 0x00DE
     d80:	80 ff       	sbrs	r24, 0
     d82:	13 c0       	rjmp	.+38     	; 0xdaa <__vector_10+0xdc>
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
						break;
					case USB_INT_SRPI:
						OTGINT &= ~(1 << SRPI);
     d84:	80 91 df 00 	lds	r24, 0x00DF
     d88:	8e 7f       	andi	r24, 0xFE	; 254
     d8a:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_VBERRI:
						OTGIEN &= ~(1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN &= ~(1 << SRPE);						
     d8e:	80 91 de 00 	lds	r24, 0x00DE
     d92:	8e 7f       	andi	r24, 0xFE	; 254
     d94:	80 93 de 00 	sts	0x00DE, r24
	{
		USB_INT_Clear(USB_INT_SRPI);
		USB_INT_Disable(USB_INT_SRPI);

		EVENT_USB_Host_DeviceAttached();
     d98:	55 db       	rcall	.-2390   	; 0x444 <EVENT_USB_Host_DeviceAttached>
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     d9a:	80 91 a0 00 	lds	r24, 0x00A0
     d9e:	82 60       	ori	r24, 0x02	; 2
     da0:	80 93 a0 00 	sts	0x00A0, r24

		USB_INT_Enable(USB_INT_DDISCI);

		USB_HostState = HOST_STATE_Powered;
     da4:	82 e0       	ldi	r24, 0x02	; 2
     da6:	80 93 27 01 	sts	0x0127, r24
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
     daa:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
     dae:	82 ff       	sbrs	r24, 2
     db0:	0e c0       	rjmp	.+28     	; 0xdce <__vector_10+0x100>
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
     db2:	80 91 de 00 	lds	r24, 0x00DE
     db6:	82 ff       	sbrs	r24, 2
     db8:	0a c0       	rjmp	.+20     	; 0xdce <__vector_10+0x100>
						break;
					case USB_INT_RSTI:
						UHINT  &= ~(1 << RSTI);
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
     dba:	80 91 df 00 	lds	r24, 0x00DF
     dbe:	8b 7f       	andi	r24, 0xFB	; 251
     dc0:	80 93 df 00 	sts	0x00DF, r24
	{
		USB_INT_Clear(USB_INT_BCERRI);

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
     dc4:	82 e0       	ldi	r24, 0x02	; 2
     dc6:	60 e0       	ldi	r22, 0x00	; 0
     dc8:	ee da       	rcall	.-2596   	; 0x3a6 <EVENT_USB_Host_DeviceEnumerationFailed>
		EVENT_USB_Host_DeviceUnattached();
     dca:	34 db       	rcall	.-2456   	; 0x434 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     dcc:	02 df       	rcall	.-508    	; 0xbd2 <USB_ResetInterface>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     dce:	ff 91       	pop	r31
     dd0:	ef 91       	pop	r30
     dd2:	bf 91       	pop	r27
     dd4:	af 91       	pop	r26
     dd6:	9f 91       	pop	r25
     dd8:	8f 91       	pop	r24
     dda:	7f 91       	pop	r23
     ddc:	6f 91       	pop	r22
     dde:	5f 91       	pop	r21
     de0:	4f 91       	pop	r20
     de2:	3f 91       	pop	r19
     de4:	2f 91       	pop	r18
     de6:	0f 90       	pop	r0
     de8:	0b be       	out	0x3b, r0	; 59
     dea:	0f 90       	pop	r0
     dec:	0f be       	out	0x3f, r0	; 63
     dee:	0f 90       	pop	r0
     df0:	1f 90       	pop	r1
     df2:	18 95       	reti

00000df4 <Pipe_Read_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     df4:	bf 92       	push	r11
     df6:	cf 92       	push	r12
     df8:	df 92       	push	r13
     dfa:	ef 92       	push	r14
     dfc:	ff 92       	push	r15
     dfe:	0f 93       	push	r16
     e00:	1f 93       	push	r17
     e02:	cf 93       	push	r28
     e04:	df 93       	push	r29
     e06:	18 2f       	mov	r17, r24
     e08:	09 2f       	mov	r16, r25
     e0a:	7b 01       	movw	r14, r22
     e0c:	6a 01       	movw	r12, r20
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     e0e:	80 91 aa 00 	lds	r24, 0x00AA
     e12:	8f 7c       	andi	r24, 0xCF	; 207
     e14:	80 61       	ori	r24, 0x10	; 16
     e16:	80 93 aa 00 	sts	0x00AA, r24
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
     e1a:	ac de       	rcall	.-680    	; 0xb74 <Pipe_WaitUntilReady>
     e1c:	b8 2e       	mov	r11, r24
     e1e:	88 23       	and	r24, r24
     e20:	a9 f5       	brne	.+106    	; 0xe8c <Pipe_Read_Stream_LE+0x98>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     e22:	81 2f       	mov	r24, r17
     e24:	90 2f       	mov	r25, r16
     e26:	9c 01       	movw	r18, r24
     e28:	e9 01       	movw	r28, r18
	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
     e2a:	c1 14       	cp	r12, r1
     e2c:	d1 04       	cpc	r13, r1
     e2e:	39 f0       	breq	.+14     	; 0xe3e <Pipe_Read_Stream_LE+0x4a>
	{
		Length -= *BytesProcessed;
     e30:	f6 01       	movw	r30, r12
     e32:	80 81       	ld	r24, Z
     e34:	91 81       	ldd	r25, Z+1	; 0x01
     e36:	e8 1a       	sub	r14, r24
     e38:	f9 0a       	sbc	r15, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     e3a:	c8 0f       	add	r28, r24
     e3c:	d9 1f       	adc	r29, r25
     e3e:	00 e0       	ldi	r16, 0x00	; 0
     e40:	10 e0       	ldi	r17, 0x00	; 0
     e42:	21 c0       	rjmp	.+66     	; 0xe86 <Pipe_Read_Stream_LE+0x92>
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
     e44:	80 91 a6 00 	lds	r24, 0x00A6
	}
	
	while (Length)
	{
		if (!(Pipe_IsReadWriteAllowed()))
     e48:	85 fd       	sbrc	r24, 5
     e4a:	15 c0       	rjmp	.+42     	; 0xe76 <Pipe_Read_Stream_LE+0x82>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     e4c:	80 91 a6 00 	lds	r24, 0x00A6
     e50:	8e 77       	andi	r24, 0x7E	; 126
     e52:	80 93 a6 00 	sts	0x00A6, r24
		{
			TEMPLATE_CLEAR_PIPE();

			if (BytesProcessed != NULL)
     e56:	c1 14       	cp	r12, r1
     e58:	d1 04       	cpc	r13, r1
     e5a:	49 f0       	breq	.+18     	; 0xe6e <Pipe_Read_Stream_LE+0x7a>
			{
				*BytesProcessed += BytesInTransfer;
     e5c:	f6 01       	movw	r30, r12
     e5e:	80 81       	ld	r24, Z
     e60:	91 81       	ldd	r25, Z+1	; 0x01
     e62:	80 0f       	add	r24, r16
     e64:	91 1f       	adc	r25, r17
     e66:	91 83       	std	Z+1, r25	; 0x01
     e68:	80 83       	st	Z, r24
     e6a:	84 e0       	ldi	r24, 0x04	; 4
     e6c:	10 c0       	rjmp	.+32     	; 0xe8e <Pipe_Read_Stream_LE+0x9a>
				return PIPE_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
     e6e:	82 de       	rcall	.-764    	; 0xb74 <Pipe_WaitUntilReady>
     e70:	88 23       	and	r24, r24
     e72:	49 f0       	breq	.+18     	; 0xe86 <Pipe_Read_Stream_LE+0x92>
     e74:	0c c0       	rjmp	.+24     	; 0xe8e <Pipe_Read_Stream_LE+0x9a>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
     e76:	80 91 af 00 	lds	r24, 0x00AF
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
     e7a:	89 93       	st	Y+, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
     e7c:	08 94       	sec
     e7e:	e1 08       	sbc	r14, r1
     e80:	f1 08       	sbc	r15, r1
			BytesInTransfer++;
     e82:	0f 5f       	subi	r16, 0xFF	; 255
     e84:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}
	
	while (Length)
     e86:	e1 14       	cp	r14, r1
     e88:	f1 04       	cpc	r15, r1
     e8a:	e1 f6       	brne	.-72     	; 0xe44 <Pipe_Read_Stream_LE+0x50>
     e8c:	8b 2d       	mov	r24, r11
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
     e8e:	df 91       	pop	r29
     e90:	cf 91       	pop	r28
     e92:	1f 91       	pop	r17
     e94:	0f 91       	pop	r16
     e96:	ff 90       	pop	r15
     e98:	ef 90       	pop	r14
     e9a:	df 90       	pop	r13
     e9c:	cf 90       	pop	r12
     e9e:	bf 90       	pop	r11
     ea0:	08 95       	ret

00000ea2 <USB_GetNextDescriptorComp>:

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
     ea2:	af 92       	push	r10
     ea4:	bf 92       	push	r11
     ea6:	cf 92       	push	r12
     ea8:	df 92       	push	r13
     eaa:	ef 92       	push	r14
     eac:	ff 92       	push	r15
     eae:	0f 93       	push	r16
     eb0:	1f 93       	push	r17
     eb2:	cf 93       	push	r28
     eb4:	df 93       	push	r29
     eb6:	7c 01       	movw	r14, r24
     eb8:	eb 01       	movw	r28, r22
     eba:	6a 01       	movw	r12, r20
     ebc:	24 c0       	rjmp	.+72     	; 0xf06 <USB_GetNextDescriptorComp+0x64>
	uint8_t ErrorCode;

	while (*BytesRem)
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
     ebe:	e8 81       	ld	r30, Y
     ec0:	f9 81       	ldd	r31, Y+1	; 0x01
     ec2:	be 2e       	mov	r11, r30
     ec4:	af 2e       	mov	r10, r31
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc)
			{
				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;
     ec6:	80 81       	ld	r24, Z
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	98 01       	movw	r18, r16
     ecc:	80 17       	cp	r24, r16
     ece:	91 07       	cpc	r25, r17
     ed0:	08 f4       	brcc	.+2      	; 0xed4 <USB_GetNextDescriptorComp+0x32>
     ed2:	9c 01       	movw	r18, r24
				
				if (*BytesRem < CurrDescriptorSize)
				  CurrDescriptorSize = *BytesRem;

				*CurrConfigLoc  = (void*)((uintptr_t)*CurrConfigLoc + CurrDescriptorSize);
     ed4:	e2 0f       	add	r30, r18
     ed6:	f3 1f       	adc	r31, r19
     ed8:	f9 83       	std	Y+1, r31	; 0x01
     eda:	e8 83       	st	Y, r30
				*BytesRem      -= CurrDescriptorSize;
     edc:	f7 01       	movw	r30, r14
     ede:	80 81       	ld	r24, Z
     ee0:	91 81       	ldd	r25, Z+1	; 0x01
     ee2:	82 1b       	sub	r24, r18
     ee4:	93 0b       	sbc	r25, r19
     ee6:	91 83       	std	Z+1, r25	; 0x01
     ee8:	80 83       	st	Z, r24
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
     eea:	88 81       	ld	r24, Y
     eec:	99 81       	ldd	r25, Y+1	; 0x01
     eee:	f6 01       	movw	r30, r12
     ef0:	09 95       	icall
     ef2:	82 30       	cpi	r24, 0x02	; 2
     ef4:	41 f0       	breq	.+16     	; 0xf06 <USB_GetNextDescriptorComp+0x64>
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
     ef6:	81 30       	cpi	r24, 0x01	; 1
     ef8:	69 f4       	brne	.+26     	; 0xf14 <USB_GetNextDescriptorComp+0x72>
			{
				*CurrConfigLoc = PrevDescLoc;
     efa:	b8 82       	st	Y, r11
     efc:	a9 82       	std	Y+1, r10	; 0x01
				*BytesRem      = PrevBytesRem;
     efe:	f7 01       	movw	r30, r14
     f00:	11 83       	std	Z+1, r17	; 0x01
     f02:	00 83       	st	Z, r16
     f04:	07 c0       	rjmp	.+14     	; 0xf14 <USB_GetNextDescriptorComp+0x72>
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
	uint8_t ErrorCode;

	while (*BytesRem)
     f06:	f7 01       	movw	r30, r14
     f08:	00 81       	ld	r16, Z
     f0a:	11 81       	ldd	r17, Z+1	; 0x01
     f0c:	01 15       	cp	r16, r1
     f0e:	11 05       	cpc	r17, r1
     f10:	b1 f6       	brne	.-84     	; 0xebe <USB_GetNextDescriptorComp+0x1c>
     f12:	82 e0       	ldi	r24, 0x02	; 2
			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
}
     f14:	df 91       	pop	r29
     f16:	cf 91       	pop	r28
     f18:	1f 91       	pop	r17
     f1a:	0f 91       	pop	r16
     f1c:	ff 90       	pop	r15
     f1e:	ef 90       	pop	r14
     f20:	df 90       	pop	r13
     f22:	cf 90       	pop	r12
     f24:	bf 90       	pop	r11
     f26:	af 90       	pop	r10
     f28:	08 95       	ret

00000f2a <USB_Host_GetDeviceConfigDescriptor>:
#if defined(USB_CAN_BE_HOST)
uint8_t USB_Host_GetDeviceConfigDescriptor(const uint8_t ConfigNumber,
                                           uint16_t* const ConfigSizePtr,
                                           void* const BufferPtr,
                                           const uint16_t BufferSize)
{
     f2a:	cf 92       	push	r12
     f2c:	df 92       	push	r13
     f2e:	ef 92       	push	r14
     f30:	ff 92       	push	r15
     f32:	0f 93       	push	r16
     f34:	1f 93       	push	r17
     f36:	df 93       	push	r29
     f38:	cf 93       	push	r28
     f3a:	cd b7       	in	r28, 0x3d	; 61
     f3c:	de b7       	in	r29, 0x3e	; 62
     f3e:	29 97       	sbiw	r28, 0x09	; 9
     f40:	0f b6       	in	r0, 0x3f	; 63
     f42:	f8 94       	cli
     f44:	de bf       	out	0x3e, r29	; 62
     f46:	0f be       	out	0x3f, r0	; 63
     f48:	cd bf       	out	0x3d, r28	; 61
     f4a:	6b 01       	movw	r12, r22
     f4c:	8a 01       	movw	r16, r20
     f4e:	79 01       	movw	r14, r18
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
     f50:	90 e8       	ldi	r25, 0x80	; 128
     f52:	90 93 1f 01 	sts	0x011F, r25
     f56:	96 e0       	ldi	r25, 0x06	; 6
     f58:	90 93 20 01 	sts	0x0120, r25
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	01 97       	sbiw	r24, 0x01	; 1
     f60:	92 60       	ori	r25, 0x02	; 2
     f62:	90 93 22 01 	sts	0x0122, r25
     f66:	80 93 21 01 	sts	0x0121, r24
     f6a:	10 92 24 01 	sts	0x0124, r1
     f6e:	10 92 23 01 	sts	0x0123, r1
     f72:	89 e0       	ldi	r24, 0x09	; 9
     f74:	90 e0       	ldi	r25, 0x00	; 0
     f76:	90 93 26 01 	sts	0x0126, r25
     f7a:	80 93 25 01 	sts	0x0125, r24
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     f7e:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = sizeof(USB_Descriptor_Configuration_Header_t),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(ConfigHeader)) != HOST_SENDCONTROL_Successful)
     f82:	ce 01       	movw	r24, r28
     f84:	01 96       	adiw	r24, 0x01	; 1
     f86:	55 d0       	rcall	.+170    	; 0x1032 <USB_Host_SendControlRequest>
     f88:	28 2f       	mov	r18, r24
     f8a:	88 23       	and	r24, r24
     f8c:	c1 f4       	brne	.+48     	; 0xfbe <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);
     f8e:	8b 81       	ldd	r24, Y+3	; 0x03
     f90:	9c 81       	ldd	r25, Y+4	; 0x04
     f92:	f6 01       	movw	r30, r12
     f94:	91 83       	std	Z+1, r25	; 0x01
     f96:	80 83       	st	Z, r24

	if (*ConfigSizePtr > BufferSize)
     f98:	e8 16       	cp	r14, r24
     f9a:	f9 06       	cpc	r15, r25
     f9c:	10 f4       	brcc	.+4      	; 0xfa2 <USB_Host_GetDeviceConfigDescriptor+0x78>
     f9e:	25 e0       	ldi	r18, 0x05	; 5
     fa0:	0e c0       	rjmp	.+28     	; 0xfbe <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return HOST_GETCONFIG_BuffOverflow;

	USB_ControlRequest.wLength = *ConfigSizePtr;
     fa2:	90 93 26 01 	sts	0x0126, r25
     fa6:	80 93 25 01 	sts	0x0125, r24

	if ((ErrorCode = USB_Host_SendControlRequest(BufferPtr)) != HOST_SENDCONTROL_Successful)
     faa:	c8 01       	movw	r24, r16
     fac:	42 d0       	rcall	.+132    	; 0x1032 <USB_Host_SendControlRequest>
     fae:	28 2f       	mov	r18, r24
     fb0:	88 23       	and	r24, r24
     fb2:	29 f4       	brne	.+10     	; 0xfbe <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
     fb4:	f8 01       	movw	r30, r16
     fb6:	81 81       	ldd	r24, Z+1	; 0x01
     fb8:	82 30       	cpi	r24, 0x02	; 2
     fba:	09 f0       	breq	.+2      	; 0xfbe <USB_Host_GetDeviceConfigDescriptor+0x94>
     fbc:	26 e0       	ldi	r18, 0x06	; 6
	  return HOST_GETCONFIG_InvalidData;

	return HOST_GETCONFIG_Successful;
}
     fbe:	82 2f       	mov	r24, r18
     fc0:	29 96       	adiw	r28, 0x09	; 9
     fc2:	0f b6       	in	r0, 0x3f	; 63
     fc4:	f8 94       	cli
     fc6:	de bf       	out	0x3e, r29	; 62
     fc8:	0f be       	out	0x3f, r0	; 63
     fca:	cd bf       	out	0x3d, r28	; 61
     fcc:	cf 91       	pop	r28
     fce:	df 91       	pop	r29
     fd0:	1f 91       	pop	r17
     fd2:	0f 91       	pop	r16
     fd4:	ff 90       	pop	r15
     fd6:	ef 90       	pop	r14
     fd8:	df 90       	pop	r13
     fda:	cf 90       	pop	r12
     fdc:	08 95       	ret

00000fde <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
     fde:	08 95       	ret

00000fe0 <USB_Host_WaitForIOS>:

	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
     fe0:	1f 93       	push	r17
     fe2:	cf 93       	push	r28
     fe4:	df 93       	push	r29
     fe6:	18 2f       	mov	r17, r24
     fe8:	c8 ee       	ldi	r28, 0xE8	; 232
     fea:	d3 e0       	ldi	r29, 0x03	; 3
     fec:	09 c0       	rjmp	.+18     	; 0x1000 <USB_Host_WaitForIOS+0x20>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     fee:	81 e0       	ldi	r24, 0x01	; 1
     ff0:	87 db       	rcall	.-2290   	; 0x700 <USB_Host_WaitMS>
     ff2:	88 23       	and	r24, r24
     ff4:	d1 f4       	brne	.+52     	; 0x102a <USB_Host_WaitForIOS+0x4a>
		  return ErrorCode;

		if (!(TimeoutCounter--))
     ff6:	20 97       	sbiw	r28, 0x00	; 0
     ff8:	11 f4       	brne	.+4      	; 0xffe <USB_Host_WaitForIOS+0x1e>
     ffa:	84 e0       	ldi	r24, 0x04	; 4
     ffc:	16 c0       	rjmp	.+44     	; 0x102a <USB_Host_WaitForIOS+0x4a>
     ffe:	21 97       	sbiw	r28, 0x01	; 1
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    1000:	11 23       	and	r17, r17
    1002:	29 f4       	brne	.+10     	; 0x100e <USB_Host_WaitForIOS+0x2e>
			 *  \return Boolean \c true if the current pipe is ready for a SETUP packet, \c false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
    1004:	80 91 a6 00 	lds	r24, 0x00A6
    1008:	83 ff       	sbrs	r24, 3
    100a:	f1 cf       	rjmp	.-30     	; 0xfee <USB_Host_WaitForIOS+0xe>
    100c:	0d c0       	rjmp	.+26     	; 0x1028 <USB_Host_WaitForIOS+0x48>
    100e:	11 30       	cpi	r17, 0x01	; 1
    1010:	29 f4       	brne	.+10     	; 0x101c <USB_Host_WaitForIOS+0x3c>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    1012:	80 91 a6 00 	lds	r24, 0x00A6
    1016:	80 ff       	sbrs	r24, 0
    1018:	ea cf       	rjmp	.-44     	; 0xfee <USB_Host_WaitForIOS+0xe>
    101a:	06 c0       	rjmp	.+12     	; 0x1028 <USB_Host_WaitForIOS+0x48>
    101c:	12 30       	cpi	r17, 0x02	; 2
    101e:	39 f7       	brne	.-50     	; 0xfee <USB_Host_WaitForIOS+0xe>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
    1020:	80 91 a6 00 	lds	r24, 0x00A6
    1024:	82 ff       	sbrs	r24, 2
    1026:	e3 cf       	rjmp	.-58     	; 0xfee <USB_Host_WaitForIOS+0xe>
    1028:	80 e0       	ldi	r24, 0x00	; 0
		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
}
    102a:	df 91       	pop	r29
    102c:	cf 91       	pop	r28
    102e:	1f 91       	pop	r17
    1030:	08 95       	ret

00001032 <USB_Host_SendControlRequest>:
#include "HostStandardReq.h"

uint8_t USB_Host_ConfigurationNumber;

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
    1032:	ff 92       	push	r15
    1034:	0f 93       	push	r16
    1036:	1f 93       	push	r17
    1038:	cf 93       	push	r28
    103a:	df 93       	push	r29
    103c:	18 2f       	mov	r17, r24
    103e:	09 2f       	mov	r16, r25
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
    1040:	f0 90 9e 00 	lds	r15, 0x009E
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
	bool     BusSuspended = USB_Host_IsBusSuspended();
	uint8_t  ReturnStatus = HOST_SENDCONTROL_Successful;
	uint16_t DataLen      = USB_ControlRequest.wLength;
    1044:	c0 91 25 01 	lds	r28, 0x0125
    1048:	d0 91 26 01 	lds	r29, 0x0126
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    104c:	80 91 9e 00 	lds	r24, 0x009E
    1050:	81 60       	ori	r24, 0x01	; 1
    1052:	80 93 9e 00 	sts	0x009E, r24

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1056:	81 e0       	ldi	r24, 0x01	; 1
    1058:	53 db       	rcall	.-2394   	; 0x700 <USB_Host_WaitMS>
    105a:	98 2f       	mov	r25, r24
    105c:	88 23       	and	r24, r24
    105e:	09 f0       	breq	.+2      	; 0x1062 <USB_Host_SendControlRequest+0x30>
    1060:	d7 c0       	rjmp	.+430    	; 0x1210 <USB_Host_SendControlRequest+0x1de>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1062:	80 91 aa 00 	lds	r24, 0x00AA
    1066:	8f 7c       	andi	r24, 0xCF	; 207
    1068:	80 93 aa 00 	sts	0x00AA, r24

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
    106c:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
    1070:	80 91 a6 00 	lds	r24, 0x00A6
    1074:	8f 7e       	andi	r24, 0xEF	; 239
    1076:	80 93 a6 00 	sts	0x00A6, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    107a:	80 91 a9 00 	lds	r24, 0x00A9
    107e:	8f 7b       	andi	r24, 0xBF	; 191
    1080:	80 93 a9 00 	sts	0x00A9, r24
    1084:	ef e1       	ldi	r30, 0x1F	; 31
    1086:	f1 e0       	ldi	r31, 0x01	; 1
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
	  Pipe_Write_8(*(HeaderStream++));	
    1088:	81 91       	ld	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    108a:	80 93 af 00 	sts	0x00AF, r24
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
    108e:	81 e0       	ldi	r24, 0x01	; 1
    1090:	e7 32       	cpi	r30, 0x27	; 39
    1092:	f8 07       	cpc	r31, r24
    1094:	c9 f7       	brne	.-14     	; 0x1088 <USB_Host_SendControlRequest+0x56>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
    1096:	80 91 a6 00 	lds	r24, 0x00A6
    109a:	87 77       	andi	r24, 0x77	; 119
    109c:	80 93 a6 00 	sts	0x00A6, r24
	  Pipe_Write_8(*(HeaderStream++));	
	#endif
	
	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
    10a0:	80 e0       	ldi	r24, 0x00	; 0
    10a2:	9e df       	rcall	.-196    	; 0xfe0 <USB_Host_WaitForIOS>
    10a4:	98 2f       	mov	r25, r24
    10a6:	88 23       	and	r24, r24
    10a8:	09 f0       	breq	.+2      	; 0x10ac <USB_Host_SendControlRequest+0x7a>
    10aa:	b2 c0       	rjmp	.+356    	; 0x1210 <USB_Host_SendControlRequest+0x1de>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    10ac:	80 91 a9 00 	lds	r24, 0x00A9
    10b0:	80 64       	ori	r24, 0x40	; 64
    10b2:	80 93 a9 00 	sts	0x00A9, r24
	  goto End_Of_Control_Send;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    10b6:	81 e0       	ldi	r24, 0x01	; 1
    10b8:	23 db       	rcall	.-2490   	; 0x700 <USB_Host_WaitMS>
    10ba:	98 2f       	mov	r25, r24
    10bc:	88 23       	and	r24, r24
    10be:	09 f0       	breq	.+2      	; 0x10c2 <USB_Host_SendControlRequest+0x90>
    10c0:	a7 c0       	rjmp	.+334    	; 0x1210 <USB_Host_SendControlRequest+0x1de>

uint8_t USB_Host_ConfigurationNumber;

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
    10c2:	21 2f       	mov	r18, r17
    10c4:	30 2f       	mov	r19, r16
    10c6:	c9 01       	movw	r24, r18
    10c8:	8c 01       	movw	r16, r24
	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
	  goto End_Of_Control_Send;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
    10ca:	80 91 1f 01 	lds	r24, 0x011F
    10ce:	87 ff       	sbrs	r24, 7
    10d0:	52 c0       	rjmp	.+164    	; 0x1176 <USB_Host_SendControlRequest+0x144>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    10d2:	80 91 aa 00 	lds	r24, 0x00AA
    10d6:	8f 7c       	andi	r24, 0xCF	; 207
    10d8:	80 61       	ori	r24, 0x10	; 16
    10da:	80 93 aa 00 	sts	0x00AA, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
    10de:	01 15       	cp	r16, r1
    10e0:	11 05       	cpc	r17, r1
    10e2:	69 f5       	brne	.+90     	; 0x113e <USB_Host_SendControlRequest+0x10c>
    10e4:	2e c0       	rjmp	.+92     	; 0x1142 <USB_Host_SendControlRequest+0x110>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    10e6:	80 91 a9 00 	lds	r24, 0x00A9
    10ea:	8f 7b       	andi	r24, 0xBF	; 191
    10ec:	80 93 a9 00 	sts	0x00A9, r24
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    10f0:	81 e0       	ldi	r24, 0x01	; 1
    10f2:	76 df       	rcall	.-276    	; 0xfe0 <USB_Host_WaitForIOS>
    10f4:	98 2f       	mov	r25, r24
    10f6:	88 23       	and	r24, r24
    10f8:	09 f0       	breq	.+2      	; 0x10fc <USB_Host_SendControlRequest+0xca>
    10fa:	8a c0       	rjmp	.+276    	; 0x1210 <USB_Host_SendControlRequest+0x1de>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    10fc:	80 91 f6 00 	lds	r24, 0x00F6
    1100:	90 91 f7 00 	lds	r25, 0x00F7
				  goto End_Of_Control_Send;

				if (!(Pipe_BytesInPipe()))
    1104:	89 2b       	or	r24, r25
    1106:	49 f4       	brne	.+18     	; 0x111a <USB_Host_SendControlRequest+0xe8>
    1108:	c0 e0       	ldi	r28, 0x00	; 0
    110a:	d0 e0       	ldi	r29, 0x00	; 0
    110c:	06 c0       	rjmp	.+12     	; 0x111a <USB_Host_SendControlRequest+0xe8>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    110e:	80 91 af 00 	lds	r24, 0x00AF
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
				{
					*(DataStream++) = Pipe_Read_8();
    1112:	f8 01       	movw	r30, r16
    1114:	81 93       	st	Z+, r24
    1116:	8f 01       	movw	r16, r30
					DataLen--;
    1118:	21 97       	sbiw	r28, 0x01	; 1
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    111a:	80 91 f6 00 	lds	r24, 0x00F6
    111e:	90 91 f7 00 	lds	r25, 0x00F7
				  goto End_Of_Control_Send;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
    1122:	89 2b       	or	r24, r25
    1124:	11 f0       	breq	.+4      	; 0x112a <USB_Host_SendControlRequest+0xf8>
    1126:	20 97       	sbiw	r28, 0x00	; 0
    1128:	91 f7       	brne	.-28     	; 0x110e <USB_Host_SendControlRequest+0xdc>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    112a:	80 91 a9 00 	lds	r24, 0x00A9
    112e:	80 64       	ori	r24, 0x40	; 64
    1130:	80 93 a9 00 	sts	0x00A9, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1134:	80 91 a6 00 	lds	r24, 0x00A6
    1138:	8e 77       	andi	r24, 0x7E	; 126
    113a:	80 93 a6 00 	sts	0x00A6, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
    113e:	20 97       	sbiw	r28, 0x00	; 0
    1140:	91 f6       	brne	.-92     	; 0x10e6 <USB_Host_SendControlRequest+0xb4>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1142:	80 91 aa 00 	lds	r24, 0x00AA
    1146:	8f 7c       	andi	r24, 0xCF	; 207
    1148:	80 62       	ori	r24, 0x20	; 32
    114a:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    114e:	80 91 a9 00 	lds	r24, 0x00A9
    1152:	8f 7b       	andi	r24, 0xBF	; 191
    1154:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1158:	82 e0       	ldi	r24, 0x02	; 2
    115a:	42 df       	rcall	.-380    	; 0xfe0 <USB_Host_WaitForIOS>
    115c:	98 2f       	mov	r25, r24
    115e:	88 23       	and	r24, r24
    1160:	09 f0       	breq	.+2      	; 0x1164 <USB_Host_SendControlRequest+0x132>
    1162:	56 c0       	rjmp	.+172    	; 0x1210 <USB_Host_SendControlRequest+0x1de>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1164:	80 91 a6 00 	lds	r24, 0x00A6
    1168:	8b 77       	andi	r24, 0x7B	; 123
    116a:	80 93 a6 00 	sts	0x00A6, r24
		  goto End_Of_Control_Send;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    116e:	82 e0       	ldi	r24, 0x02	; 2
    1170:	37 df       	rcall	.-402    	; 0xfe0 <USB_Host_WaitForIOS>
    1172:	98 2f       	mov	r25, r24
    1174:	4d c0       	rjmp	.+154    	; 0x1210 <USB_Host_SendControlRequest+0x1de>
		  goto End_Of_Control_Send;
	}
	else
	{
		if (DataStream != NULL)
    1176:	01 15       	cp	r16, r1
    1178:	11 05       	cpc	r17, r1
    117a:	a9 f1       	breq	.+106    	; 0x11e6 <USB_Host_SendControlRequest+0x1b4>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    117c:	80 91 aa 00 	lds	r24, 0x00AA
    1180:	8f 7c       	andi	r24, 0xCF	; 207
    1182:	80 62       	ori	r24, 0x20	; 32
    1184:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1188:	80 91 a9 00 	lds	r24, 0x00A9
    118c:	8f 7b       	andi	r24, 0xBF	; 191
    118e:	80 93 a9 00 	sts	0x00A9, r24
    1192:	1d c0       	rjmp	.+58     	; 0x11ce <USB_Host_SendControlRequest+0x19c>
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1194:	82 e0       	ldi	r24, 0x02	; 2
    1196:	24 df       	rcall	.-440    	; 0xfe0 <USB_Host_WaitForIOS>
    1198:	98 2f       	mov	r25, r24
    119a:	88 23       	and	r24, r24
    119c:	c9 f5       	brne	.+114    	; 0x1210 <USB_Host_SendControlRequest+0x1de>
				  goto End_Of_Control_Send;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    119e:	80 91 18 01 	lds	r24, 0x0118
    11a2:	28 2f       	mov	r18, r24
    11a4:	30 e0       	ldi	r19, 0x00	; 0
    11a6:	07 c0       	rjmp	.+14     	; 0x11b6 <USB_Host_SendControlRequest+0x184>
				{
					Pipe_Write_8(*(DataStream++));
    11a8:	f8 01       	movw	r30, r16
    11aa:	81 91       	ld	r24, Z+
    11ac:	8f 01       	movw	r16, r30
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    11ae:	80 93 af 00 	sts	0x00AF, r24
					DataLen--;
    11b2:	21 97       	sbiw	r28, 0x01	; 1
			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
				  goto End_Of_Control_Send;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    11b4:	39 f0       	breq	.+14     	; 0x11c4 <USB_Host_SendControlRequest+0x192>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    11b6:	80 91 f6 00 	lds	r24, 0x00F6
    11ba:	90 91 f7 00 	lds	r25, 0x00F7
    11be:	82 17       	cp	r24, r18
    11c0:	93 07       	cpc	r25, r19
    11c2:	90 f3       	brcs	.-28     	; 0x11a8 <USB_Host_SendControlRequest+0x176>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    11c4:	80 91 a6 00 	lds	r24, 0x00A6
    11c8:	8b 77       	andi	r24, 0x7B	; 123
    11ca:	80 93 a6 00 	sts	0x00A6, r24
		if (DataStream != NULL)
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
    11ce:	20 97       	sbiw	r28, 0x00	; 0
    11d0:	09 f7       	brne	.-62     	; 0x1194 <USB_Host_SendControlRequest+0x162>
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    11d2:	82 e0       	ldi	r24, 0x02	; 2
    11d4:	05 df       	rcall	.-502    	; 0xfe0 <USB_Host_WaitForIOS>
    11d6:	98 2f       	mov	r25, r24
    11d8:	88 23       	and	r24, r24
    11da:	d1 f4       	brne	.+52     	; 0x1210 <USB_Host_SendControlRequest+0x1de>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    11dc:	80 91 a9 00 	lds	r24, 0x00A9
    11e0:	80 64       	ori	r24, 0x40	; 64
    11e2:	80 93 a9 00 	sts	0x00A9, r24
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    11e6:	80 91 aa 00 	lds	r24, 0x00AA
    11ea:	8f 7c       	andi	r24, 0xCF	; 207
    11ec:	80 61       	ori	r24, 0x10	; 16
    11ee:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    11f2:	80 91 a9 00 	lds	r24, 0x00A9
    11f6:	8f 7b       	andi	r24, 0xBF	; 191
    11f8:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    11fc:	81 e0       	ldi	r24, 0x01	; 1
    11fe:	f0 de       	rcall	.-544    	; 0xfe0 <USB_Host_WaitForIOS>
    1200:	98 2f       	mov	r25, r24
    1202:	88 23       	and	r24, r24
    1204:	29 f4       	brne	.+10     	; 0x1210 <USB_Host_SendControlRequest+0x1de>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1206:	80 91 a6 00 	lds	r24, 0x00A6
    120a:	8e 77       	andi	r24, 0x7E	; 126
    120c:	80 93 a6 00 	sts	0x00A6, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1210:	80 91 a9 00 	lds	r24, 0x00A9
    1214:	80 64       	ori	r24, 0x40	; 64
    1216:	80 93 a9 00 	sts	0x00A9, r24
	}

End_Of_Control_Send:
	Pipe_Freeze();

	if (BusSuspended)
    121a:	f0 fc       	sbrc	r15, 0
    121c:	05 c0       	rjmp	.+10     	; 0x1228 <USB_Host_SendControlRequest+0x1f6>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    121e:	80 91 9e 00 	lds	r24, 0x009E
    1222:	8e 7f       	andi	r24, 0xFE	; 254
    1224:	80 93 9e 00 	sts	0x009E, r24
			 *  \param[in] PipeNumber  Index of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t PipeNumber)
			{
				UPRST = (1 << PipeNumber);
    1228:	81 e0       	ldi	r24, 0x01	; 1
    122a:	80 93 a8 00 	sts	0x00A8, r24
				UPRST = 0;
    122e:	10 92 a8 00 	sts	0x00A8, r1
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
    1232:	89 2f       	mov	r24, r25
    1234:	df 91       	pop	r29
    1236:	cf 91       	pop	r28
    1238:	1f 91       	pop	r17
    123a:	0f 91       	pop	r16
    123c:	ff 90       	pop	r15
    123e:	08 95       	ret

00001240 <USB_Host_SetDeviceConfiguration>:

	return HOST_SENDCONTROL_Successful;
}

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
    1240:	1f 93       	push	r17
    1242:	18 2f       	mov	r17, r24
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
    1244:	10 92 1f 01 	sts	0x011F, r1
    1248:	89 e0       	ldi	r24, 0x09	; 9
    124a:	80 93 20 01 	sts	0x0120, r24
    124e:	10 93 21 01 	sts	0x0121, r17
    1252:	10 92 22 01 	sts	0x0122, r1
    1256:	10 92 24 01 	sts	0x0124, r1
    125a:	10 92 23 01 	sts	0x0123, r1
    125e:	10 92 26 01 	sts	0x0126, r1
    1262:	10 92 25 01 	sts	0x0125, r1
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1266:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);
	
	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) == HOST_SENDCONTROL_Successful)
    126a:	80 e0       	ldi	r24, 0x00	; 0
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	e1 de       	rcall	.-574    	; 0x1032 <USB_Host_SendControlRequest>
    1270:	88 23       	and	r24, r24
    1272:	49 f4       	brne	.+18     	; 0x1286 <USB_Host_SetDeviceConfiguration+0x46>
	{
		USB_Host_ConfigurationNumber = ConfigNumber;
    1274:	10 93 1d 01 	sts	0x011D, r17
		USB_HostState                = (ConfigNumber) ? HOST_STATE_Configured : HOST_STATE_Addressed;
    1278:	11 23       	and	r17, r17
    127a:	11 f4       	brne	.+4      	; 0x1280 <USB_Host_SetDeviceConfiguration+0x40>
    127c:	9a e0       	ldi	r25, 0x0A	; 10
    127e:	01 c0       	rjmp	.+2      	; 0x1282 <USB_Host_SetDeviceConfiguration+0x42>
    1280:	9b e0       	ldi	r25, 0x0B	; 11
    1282:	90 93 27 01 	sts	0x0127, r25
	}

	return ErrorCode;
}
    1286:	1f 91       	pop	r17
    1288:	08 95       	ret

0000128a <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    128a:	ff 92       	push	r15
    128c:	0f 93       	push	r16
    128e:	1f 93       	push	r17
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
    1290:	07 ea       	ldi	r16, 0xA7	; 167
    1292:	10 e0       	ldi	r17, 0x00	; 0
    1294:	f8 01       	movw	r30, r16
    1296:	f0 80       	ld	r15, Z
    1298:	f7 e0       	ldi	r31, 0x07	; 7
    129a:	ff 22       	and	r15, r31
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    129c:	f8 01       	movw	r30, r16
    129e:	10 82       	st	Z, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    12a0:	cc da       	rcall	.-2664   	; 0x83a <USB_Host_ProcessNextHostState>
    12a2:	f8 01       	movw	r30, r16
    12a4:	f0 82       	st	Z, r15
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
    12a6:	1f 91       	pop	r17
    12a8:	0f 91       	pop	r16
    12aa:	ff 90       	pop	r15
    12ac:	08 95       	ret

000012ae <Serial_putchar>:

FILE USARTSerialStream;

int Serial_putchar(char DataByte,
                   FILE *Stream)
{
    12ae:	98 2f       	mov	r25, r24
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
    12b0:	80 91 c8 00 	lds	r24, 0x00C8
    12b4:	85 ff       	sbrs	r24, 5
    12b6:	fc cf       	rjmp	.-8      	; 0x12b0 <Serial_putchar+0x2>
				UDR1 = DataByte;
    12b8:	90 93 ce 00 	sts	0x00CE, r25
	(void)Stream;

	Serial_SendByte(DataByte);
	return 0;
}
    12bc:	80 e0       	ldi	r24, 0x00	; 0
    12be:	90 e0       	ldi	r25, 0x00	; 0
    12c0:	08 95       	ret

000012c2 <Serial_getchar>:
			 *  \return Boolean \c true if a character has been received, \c false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    12c2:	80 91 c8 00 	lds	r24, 0x00C8

int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    12c6:	87 fd       	sbrc	r24, 7
    12c8:	03 c0       	rjmp	.+6      	; 0x12d0 <Serial_getchar+0xe>
    12ca:	2e ef       	ldi	r18, 0xFE	; 254
    12cc:	3f ef       	ldi	r19, 0xFF	; 255
    12ce:	0b c0       	rjmp	.+22     	; 0x12e6 <Serial_getchar+0x24>
    12d0:	80 91 c8 00 	lds	r24, 0x00C8
			 *  \return Next byte received from the USART, or a negative value if no byte has been received.
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
    12d4:	87 fd       	sbrc	r24, 7
    12d6:	03 c0       	rjmp	.+6      	; 0x12de <Serial_getchar+0x1c>
    12d8:	2f ef       	ldi	r18, 0xFF	; 255
    12da:	3f ef       	ldi	r19, 0xFF	; 255
    12dc:	04 c0       	rjmp	.+8      	; 0x12e6 <Serial_getchar+0x24>
				  return -1;
				
				return UDR1;
    12de:	80 91 ce 00 	lds	r24, 0x00CE
    12e2:	28 2f       	mov	r18, r24
    12e4:	30 e0       	ldi	r19, 0x00	; 0
	  return _FDEV_EOF;

	return Serial_ReceiveByte();
}
    12e6:	c9 01       	movw	r24, r18
    12e8:	08 95       	ret

000012ea <fputc>:
    12ea:	0f 93       	push	r16
    12ec:	1f 93       	push	r17
    12ee:	cf 93       	push	r28
    12f0:	df 93       	push	r29
    12f2:	8c 01       	movw	r16, r24
    12f4:	eb 01       	movw	r28, r22
    12f6:	8b 81       	ldd	r24, Y+3	; 0x03
    12f8:	81 ff       	sbrs	r24, 1
    12fa:	1b c0       	rjmp	.+54     	; 0x1332 <fputc+0x48>
    12fc:	82 ff       	sbrs	r24, 2
    12fe:	0d c0       	rjmp	.+26     	; 0x131a <fputc+0x30>
    1300:	2e 81       	ldd	r18, Y+6	; 0x06
    1302:	3f 81       	ldd	r19, Y+7	; 0x07
    1304:	8c 81       	ldd	r24, Y+4	; 0x04
    1306:	9d 81       	ldd	r25, Y+5	; 0x05
    1308:	28 17       	cp	r18, r24
    130a:	39 07       	cpc	r19, r25
    130c:	64 f4       	brge	.+24     	; 0x1326 <fputc+0x3c>
    130e:	e8 81       	ld	r30, Y
    1310:	f9 81       	ldd	r31, Y+1	; 0x01
    1312:	01 93       	st	Z+, r16
    1314:	f9 83       	std	Y+1, r31	; 0x01
    1316:	e8 83       	st	Y, r30
    1318:	06 c0       	rjmp	.+12     	; 0x1326 <fputc+0x3c>
    131a:	e8 85       	ldd	r30, Y+8	; 0x08
    131c:	f9 85       	ldd	r31, Y+9	; 0x09
    131e:	80 2f       	mov	r24, r16
    1320:	09 95       	icall
    1322:	89 2b       	or	r24, r25
    1324:	31 f4       	brne	.+12     	; 0x1332 <fputc+0x48>
    1326:	8e 81       	ldd	r24, Y+6	; 0x06
    1328:	9f 81       	ldd	r25, Y+7	; 0x07
    132a:	01 96       	adiw	r24, 0x01	; 1
    132c:	9f 83       	std	Y+7, r25	; 0x07
    132e:	8e 83       	std	Y+6, r24	; 0x06
    1330:	02 c0       	rjmp	.+4      	; 0x1336 <fputc+0x4c>
    1332:	0f ef       	ldi	r16, 0xFF	; 255
    1334:	1f ef       	ldi	r17, 0xFF	; 255
    1336:	c8 01       	movw	r24, r16
    1338:	df 91       	pop	r29
    133a:	cf 91       	pop	r28
    133c:	1f 91       	pop	r17
    133e:	0f 91       	pop	r16
    1340:	08 95       	ret

00001342 <printf_P>:
    1342:	df 93       	push	r29
    1344:	cf 93       	push	r28
    1346:	cd b7       	in	r28, 0x3d	; 61
    1348:	de b7       	in	r29, 0x3e	; 62
    134a:	fe 01       	movw	r30, r28
    134c:	35 96       	adiw	r30, 0x05	; 5
    134e:	61 91       	ld	r22, Z+
    1350:	71 91       	ld	r23, Z+
    1352:	a0 91 38 01 	lds	r26, 0x0138
    1356:	b0 91 39 01 	lds	r27, 0x0139
    135a:	13 96       	adiw	r26, 0x03	; 3
    135c:	8c 91       	ld	r24, X
    135e:	13 97       	sbiw	r26, 0x03	; 3
    1360:	88 60       	ori	r24, 0x08	; 8
    1362:	13 96       	adiw	r26, 0x03	; 3
    1364:	8c 93       	st	X, r24
    1366:	80 91 38 01 	lds	r24, 0x0138
    136a:	90 91 39 01 	lds	r25, 0x0139
    136e:	af 01       	movw	r20, r30
    1370:	3f d0       	rcall	.+126    	; 0x13f0 <vfprintf>
    1372:	e0 91 38 01 	lds	r30, 0x0138
    1376:	f0 91 39 01 	lds	r31, 0x0139
    137a:	23 81       	ldd	r18, Z+3	; 0x03
    137c:	27 7f       	andi	r18, 0xF7	; 247
    137e:	23 83       	std	Z+3, r18	; 0x03
    1380:	cf 91       	pop	r28
    1382:	df 91       	pop	r29
    1384:	08 95       	ret

00001386 <puts_P>:
    1386:	0f 93       	push	r16
    1388:	1f 93       	push	r17
    138a:	cf 93       	push	r28
    138c:	df 93       	push	r29
    138e:	ec 01       	movw	r28, r24
    1390:	e0 91 38 01 	lds	r30, 0x0138
    1394:	f0 91 39 01 	lds	r31, 0x0139
    1398:	83 81       	ldd	r24, Z+3	; 0x03
    139a:	81 ff       	sbrs	r24, 1
    139c:	21 c0       	rjmp	.+66     	; 0x13e0 <puts_P+0x5a>
    139e:	00 e0       	ldi	r16, 0x00	; 0
    13a0:	10 e0       	ldi	r17, 0x00	; 0
    13a2:	0e c0       	rjmp	.+28     	; 0x13c0 <puts_P+0x3a>
    13a4:	e0 91 38 01 	lds	r30, 0x0138
    13a8:	f0 91 39 01 	lds	r31, 0x0139
    13ac:	20 85       	ldd	r18, Z+8	; 0x08
    13ae:	31 85       	ldd	r19, Z+9	; 0x09
    13b0:	bf 01       	movw	r22, r30
    13b2:	f9 01       	movw	r30, r18
    13b4:	09 95       	icall
    13b6:	89 2b       	or	r24, r25
    13b8:	11 f0       	breq	.+4      	; 0x13be <puts_P+0x38>
    13ba:	0f ef       	ldi	r16, 0xFF	; 255
    13bc:	1f ef       	ldi	r17, 0xFF	; 255
    13be:	21 96       	adiw	r28, 0x01	; 1
    13c0:	fe 01       	movw	r30, r28
    13c2:	84 91       	lpm	r24, Z+
    13c4:	88 23       	and	r24, r24
    13c6:	71 f7       	brne	.-36     	; 0x13a4 <puts_P+0x1e>
    13c8:	e0 91 38 01 	lds	r30, 0x0138
    13cc:	f0 91 39 01 	lds	r31, 0x0139
    13d0:	20 85       	ldd	r18, Z+8	; 0x08
    13d2:	31 85       	ldd	r19, Z+9	; 0x09
    13d4:	8a e0       	ldi	r24, 0x0A	; 10
    13d6:	bf 01       	movw	r22, r30
    13d8:	f9 01       	movw	r30, r18
    13da:	09 95       	icall
    13dc:	89 2b       	or	r24, r25
    13de:	11 f0       	breq	.+4      	; 0x13e4 <puts_P+0x5e>
    13e0:	0f ef       	ldi	r16, 0xFF	; 255
    13e2:	1f ef       	ldi	r17, 0xFF	; 255
    13e4:	c8 01       	movw	r24, r16
    13e6:	df 91       	pop	r29
    13e8:	cf 91       	pop	r28
    13ea:	1f 91       	pop	r17
    13ec:	0f 91       	pop	r16
    13ee:	08 95       	ret

000013f0 <vfprintf>:
    13f0:	2f 92       	push	r2
    13f2:	3f 92       	push	r3
    13f4:	4f 92       	push	r4
    13f6:	5f 92       	push	r5
    13f8:	6f 92       	push	r6
    13fa:	7f 92       	push	r7
    13fc:	8f 92       	push	r8
    13fe:	9f 92       	push	r9
    1400:	af 92       	push	r10
    1402:	bf 92       	push	r11
    1404:	cf 92       	push	r12
    1406:	df 92       	push	r13
    1408:	ef 92       	push	r14
    140a:	ff 92       	push	r15
    140c:	0f 93       	push	r16
    140e:	1f 93       	push	r17
    1410:	df 93       	push	r29
    1412:	cf 93       	push	r28
    1414:	cd b7       	in	r28, 0x3d	; 61
    1416:	de b7       	in	r29, 0x3e	; 62
    1418:	2b 97       	sbiw	r28, 0x0b	; 11
    141a:	0f b6       	in	r0, 0x3f	; 63
    141c:	f8 94       	cli
    141e:	de bf       	out	0x3e, r29	; 62
    1420:	0f be       	out	0x3f, r0	; 63
    1422:	cd bf       	out	0x3d, r28	; 61
    1424:	3c 01       	movw	r6, r24
    1426:	2b 01       	movw	r4, r22
    1428:	5a 01       	movw	r10, r20
    142a:	fc 01       	movw	r30, r24
    142c:	17 82       	std	Z+7, r1	; 0x07
    142e:	16 82       	std	Z+6, r1	; 0x06
    1430:	83 81       	ldd	r24, Z+3	; 0x03
    1432:	81 fd       	sbrc	r24, 1
    1434:	03 c0       	rjmp	.+6      	; 0x143c <vfprintf+0x4c>
    1436:	6f ef       	ldi	r22, 0xFF	; 255
    1438:	7f ef       	ldi	r23, 0xFF	; 255
    143a:	b9 c1       	rjmp	.+882    	; 0x17ae <vfprintf+0x3be>
    143c:	9a e0       	ldi	r25, 0x0A	; 10
    143e:	89 2e       	mov	r8, r25
    1440:	1e 01       	movw	r2, r28
    1442:	08 94       	sec
    1444:	21 1c       	adc	r2, r1
    1446:	31 1c       	adc	r3, r1
    1448:	f3 01       	movw	r30, r6
    144a:	23 81       	ldd	r18, Z+3	; 0x03
    144c:	f2 01       	movw	r30, r4
    144e:	23 fd       	sbrc	r18, 3
    1450:	85 91       	lpm	r24, Z+
    1452:	23 ff       	sbrs	r18, 3
    1454:	81 91       	ld	r24, Z+
    1456:	2f 01       	movw	r4, r30
    1458:	88 23       	and	r24, r24
    145a:	09 f4       	brne	.+2      	; 0x145e <vfprintf+0x6e>
    145c:	a5 c1       	rjmp	.+842    	; 0x17a8 <vfprintf+0x3b8>
    145e:	85 32       	cpi	r24, 0x25	; 37
    1460:	39 f4       	brne	.+14     	; 0x1470 <vfprintf+0x80>
    1462:	23 fd       	sbrc	r18, 3
    1464:	85 91       	lpm	r24, Z+
    1466:	23 ff       	sbrs	r18, 3
    1468:	81 91       	ld	r24, Z+
    146a:	2f 01       	movw	r4, r30
    146c:	85 32       	cpi	r24, 0x25	; 37
    146e:	21 f4       	brne	.+8      	; 0x1478 <vfprintf+0x88>
    1470:	90 e0       	ldi	r25, 0x00	; 0
    1472:	b3 01       	movw	r22, r6
    1474:	3a df       	rcall	.-396    	; 0x12ea <fputc>
    1476:	e8 cf       	rjmp	.-48     	; 0x1448 <vfprintf+0x58>
    1478:	98 2f       	mov	r25, r24
    147a:	ff 24       	eor	r15, r15
    147c:	ee 24       	eor	r14, r14
    147e:	99 24       	eor	r9, r9
    1480:	ff e1       	ldi	r31, 0x1F	; 31
    1482:	ff 15       	cp	r31, r15
    1484:	d0 f0       	brcs	.+52     	; 0x14ba <vfprintf+0xca>
    1486:	9b 32       	cpi	r25, 0x2B	; 43
    1488:	69 f0       	breq	.+26     	; 0x14a4 <vfprintf+0xb4>
    148a:	9c 32       	cpi	r25, 0x2C	; 44
    148c:	28 f4       	brcc	.+10     	; 0x1498 <vfprintf+0xa8>
    148e:	90 32       	cpi	r25, 0x20	; 32
    1490:	59 f0       	breq	.+22     	; 0x14a8 <vfprintf+0xb8>
    1492:	93 32       	cpi	r25, 0x23	; 35
    1494:	91 f4       	brne	.+36     	; 0x14ba <vfprintf+0xca>
    1496:	0e c0       	rjmp	.+28     	; 0x14b4 <vfprintf+0xc4>
    1498:	9d 32       	cpi	r25, 0x2D	; 45
    149a:	49 f0       	breq	.+18     	; 0x14ae <vfprintf+0xbe>
    149c:	90 33       	cpi	r25, 0x30	; 48
    149e:	69 f4       	brne	.+26     	; 0x14ba <vfprintf+0xca>
    14a0:	41 e0       	ldi	r20, 0x01	; 1
    14a2:	24 c0       	rjmp	.+72     	; 0x14ec <vfprintf+0xfc>
    14a4:	52 e0       	ldi	r21, 0x02	; 2
    14a6:	f5 2a       	or	r15, r21
    14a8:	84 e0       	ldi	r24, 0x04	; 4
    14aa:	f8 2a       	or	r15, r24
    14ac:	28 c0       	rjmp	.+80     	; 0x14fe <vfprintf+0x10e>
    14ae:	98 e0       	ldi	r25, 0x08	; 8
    14b0:	f9 2a       	or	r15, r25
    14b2:	25 c0       	rjmp	.+74     	; 0x14fe <vfprintf+0x10e>
    14b4:	e0 e1       	ldi	r30, 0x10	; 16
    14b6:	fe 2a       	or	r15, r30
    14b8:	22 c0       	rjmp	.+68     	; 0x14fe <vfprintf+0x10e>
    14ba:	f7 fc       	sbrc	r15, 7
    14bc:	29 c0       	rjmp	.+82     	; 0x1510 <vfprintf+0x120>
    14be:	89 2f       	mov	r24, r25
    14c0:	80 53       	subi	r24, 0x30	; 48
    14c2:	8a 30       	cpi	r24, 0x0A	; 10
    14c4:	70 f4       	brcc	.+28     	; 0x14e2 <vfprintf+0xf2>
    14c6:	f6 fe       	sbrs	r15, 6
    14c8:	05 c0       	rjmp	.+10     	; 0x14d4 <vfprintf+0xe4>
    14ca:	98 9c       	mul	r9, r8
    14cc:	90 2c       	mov	r9, r0
    14ce:	11 24       	eor	r1, r1
    14d0:	98 0e       	add	r9, r24
    14d2:	15 c0       	rjmp	.+42     	; 0x14fe <vfprintf+0x10e>
    14d4:	e8 9c       	mul	r14, r8
    14d6:	e0 2c       	mov	r14, r0
    14d8:	11 24       	eor	r1, r1
    14da:	e8 0e       	add	r14, r24
    14dc:	f0 e2       	ldi	r31, 0x20	; 32
    14de:	ff 2a       	or	r15, r31
    14e0:	0e c0       	rjmp	.+28     	; 0x14fe <vfprintf+0x10e>
    14e2:	9e 32       	cpi	r25, 0x2E	; 46
    14e4:	29 f4       	brne	.+10     	; 0x14f0 <vfprintf+0x100>
    14e6:	f6 fc       	sbrc	r15, 6
    14e8:	5f c1       	rjmp	.+702    	; 0x17a8 <vfprintf+0x3b8>
    14ea:	40 e4       	ldi	r20, 0x40	; 64
    14ec:	f4 2a       	or	r15, r20
    14ee:	07 c0       	rjmp	.+14     	; 0x14fe <vfprintf+0x10e>
    14f0:	9c 36       	cpi	r25, 0x6C	; 108
    14f2:	19 f4       	brne	.+6      	; 0x14fa <vfprintf+0x10a>
    14f4:	50 e8       	ldi	r21, 0x80	; 128
    14f6:	f5 2a       	or	r15, r21
    14f8:	02 c0       	rjmp	.+4      	; 0x14fe <vfprintf+0x10e>
    14fa:	98 36       	cpi	r25, 0x68	; 104
    14fc:	49 f4       	brne	.+18     	; 0x1510 <vfprintf+0x120>
    14fe:	f2 01       	movw	r30, r4
    1500:	23 fd       	sbrc	r18, 3
    1502:	95 91       	lpm	r25, Z+
    1504:	23 ff       	sbrs	r18, 3
    1506:	91 91       	ld	r25, Z+
    1508:	2f 01       	movw	r4, r30
    150a:	99 23       	and	r25, r25
    150c:	09 f0       	breq	.+2      	; 0x1510 <vfprintf+0x120>
    150e:	b8 cf       	rjmp	.-144    	; 0x1480 <vfprintf+0x90>
    1510:	89 2f       	mov	r24, r25
    1512:	85 54       	subi	r24, 0x45	; 69
    1514:	83 30       	cpi	r24, 0x03	; 3
    1516:	18 f0       	brcs	.+6      	; 0x151e <vfprintf+0x12e>
    1518:	80 52       	subi	r24, 0x20	; 32
    151a:	83 30       	cpi	r24, 0x03	; 3
    151c:	38 f4       	brcc	.+14     	; 0x152c <vfprintf+0x13c>
    151e:	44 e0       	ldi	r20, 0x04	; 4
    1520:	50 e0       	ldi	r21, 0x00	; 0
    1522:	a4 0e       	add	r10, r20
    1524:	b5 1e       	adc	r11, r21
    1526:	5f e3       	ldi	r21, 0x3F	; 63
    1528:	59 83       	std	Y+1, r21	; 0x01
    152a:	0f c0       	rjmp	.+30     	; 0x154a <vfprintf+0x15a>
    152c:	93 36       	cpi	r25, 0x63	; 99
    152e:	31 f0       	breq	.+12     	; 0x153c <vfprintf+0x14c>
    1530:	93 37       	cpi	r25, 0x73	; 115
    1532:	79 f0       	breq	.+30     	; 0x1552 <vfprintf+0x162>
    1534:	93 35       	cpi	r25, 0x53	; 83
    1536:	09 f0       	breq	.+2      	; 0x153a <vfprintf+0x14a>
    1538:	52 c0       	rjmp	.+164    	; 0x15de <vfprintf+0x1ee>
    153a:	1f c0       	rjmp	.+62     	; 0x157a <vfprintf+0x18a>
    153c:	f5 01       	movw	r30, r10
    153e:	80 81       	ld	r24, Z
    1540:	89 83       	std	Y+1, r24	; 0x01
    1542:	42 e0       	ldi	r20, 0x02	; 2
    1544:	50 e0       	ldi	r21, 0x00	; 0
    1546:	a4 0e       	add	r10, r20
    1548:	b5 1e       	adc	r11, r21
    154a:	61 01       	movw	r12, r2
    154c:	01 e0       	ldi	r16, 0x01	; 1
    154e:	10 e0       	ldi	r17, 0x00	; 0
    1550:	11 c0       	rjmp	.+34     	; 0x1574 <vfprintf+0x184>
    1552:	f5 01       	movw	r30, r10
    1554:	c0 80       	ld	r12, Z
    1556:	d1 80       	ldd	r13, Z+1	; 0x01
    1558:	f6 fc       	sbrc	r15, 6
    155a:	03 c0       	rjmp	.+6      	; 0x1562 <vfprintf+0x172>
    155c:	6f ef       	ldi	r22, 0xFF	; 255
    155e:	7f ef       	ldi	r23, 0xFF	; 255
    1560:	02 c0       	rjmp	.+4      	; 0x1566 <vfprintf+0x176>
    1562:	69 2d       	mov	r22, r9
    1564:	70 e0       	ldi	r23, 0x00	; 0
    1566:	42 e0       	ldi	r20, 0x02	; 2
    1568:	50 e0       	ldi	r21, 0x00	; 0
    156a:	a4 0e       	add	r10, r20
    156c:	b5 1e       	adc	r11, r21
    156e:	c6 01       	movw	r24, r12
    1570:	43 d1       	rcall	.+646    	; 0x17f8 <strnlen>
    1572:	8c 01       	movw	r16, r24
    1574:	5f e7       	ldi	r21, 0x7F	; 127
    1576:	f5 22       	and	r15, r21
    1578:	13 c0       	rjmp	.+38     	; 0x15a0 <vfprintf+0x1b0>
    157a:	f5 01       	movw	r30, r10
    157c:	c0 80       	ld	r12, Z
    157e:	d1 80       	ldd	r13, Z+1	; 0x01
    1580:	f6 fc       	sbrc	r15, 6
    1582:	03 c0       	rjmp	.+6      	; 0x158a <vfprintf+0x19a>
    1584:	6f ef       	ldi	r22, 0xFF	; 255
    1586:	7f ef       	ldi	r23, 0xFF	; 255
    1588:	02 c0       	rjmp	.+4      	; 0x158e <vfprintf+0x19e>
    158a:	69 2d       	mov	r22, r9
    158c:	70 e0       	ldi	r23, 0x00	; 0
    158e:	42 e0       	ldi	r20, 0x02	; 2
    1590:	50 e0       	ldi	r21, 0x00	; 0
    1592:	a4 0e       	add	r10, r20
    1594:	b5 1e       	adc	r11, r21
    1596:	c6 01       	movw	r24, r12
    1598:	24 d1       	rcall	.+584    	; 0x17e2 <strnlen_P>
    159a:	8c 01       	movw	r16, r24
    159c:	50 e8       	ldi	r21, 0x80	; 128
    159e:	f5 2a       	or	r15, r21
    15a0:	f3 fe       	sbrs	r15, 3
    15a2:	06 c0       	rjmp	.+12     	; 0x15b0 <vfprintf+0x1c0>
    15a4:	18 c0       	rjmp	.+48     	; 0x15d6 <vfprintf+0x1e6>
    15a6:	80 e2       	ldi	r24, 0x20	; 32
    15a8:	90 e0       	ldi	r25, 0x00	; 0
    15aa:	b3 01       	movw	r22, r6
    15ac:	9e de       	rcall	.-708    	; 0x12ea <fputc>
    15ae:	ea 94       	dec	r14
    15b0:	8e 2d       	mov	r24, r14
    15b2:	90 e0       	ldi	r25, 0x00	; 0
    15b4:	08 17       	cp	r16, r24
    15b6:	19 07       	cpc	r17, r25
    15b8:	b0 f3       	brcs	.-20     	; 0x15a6 <vfprintf+0x1b6>
    15ba:	0d c0       	rjmp	.+26     	; 0x15d6 <vfprintf+0x1e6>
    15bc:	f6 01       	movw	r30, r12
    15be:	f7 fc       	sbrc	r15, 7
    15c0:	85 91       	lpm	r24, Z+
    15c2:	f7 fe       	sbrs	r15, 7
    15c4:	81 91       	ld	r24, Z+
    15c6:	6f 01       	movw	r12, r30
    15c8:	90 e0       	ldi	r25, 0x00	; 0
    15ca:	b3 01       	movw	r22, r6
    15cc:	8e de       	rcall	.-740    	; 0x12ea <fputc>
    15ce:	e1 10       	cpse	r14, r1
    15d0:	ea 94       	dec	r14
    15d2:	01 50       	subi	r16, 0x01	; 1
    15d4:	10 40       	sbci	r17, 0x00	; 0
    15d6:	01 15       	cp	r16, r1
    15d8:	11 05       	cpc	r17, r1
    15da:	81 f7       	brne	.-32     	; 0x15bc <vfprintf+0x1cc>
    15dc:	e2 c0       	rjmp	.+452    	; 0x17a2 <vfprintf+0x3b2>
    15de:	94 36       	cpi	r25, 0x64	; 100
    15e0:	11 f0       	breq	.+4      	; 0x15e6 <vfprintf+0x1f6>
    15e2:	99 36       	cpi	r25, 0x69	; 105
    15e4:	61 f5       	brne	.+88     	; 0x163e <vfprintf+0x24e>
    15e6:	f7 fe       	sbrs	r15, 7
    15e8:	08 c0       	rjmp	.+16     	; 0x15fa <vfprintf+0x20a>
    15ea:	f5 01       	movw	r30, r10
    15ec:	20 81       	ld	r18, Z
    15ee:	31 81       	ldd	r19, Z+1	; 0x01
    15f0:	42 81       	ldd	r20, Z+2	; 0x02
    15f2:	53 81       	ldd	r21, Z+3	; 0x03
    15f4:	84 e0       	ldi	r24, 0x04	; 4
    15f6:	90 e0       	ldi	r25, 0x00	; 0
    15f8:	0a c0       	rjmp	.+20     	; 0x160e <vfprintf+0x21e>
    15fa:	f5 01       	movw	r30, r10
    15fc:	80 81       	ld	r24, Z
    15fe:	91 81       	ldd	r25, Z+1	; 0x01
    1600:	9c 01       	movw	r18, r24
    1602:	44 27       	eor	r20, r20
    1604:	37 fd       	sbrc	r19, 7
    1606:	40 95       	com	r20
    1608:	54 2f       	mov	r21, r20
    160a:	82 e0       	ldi	r24, 0x02	; 2
    160c:	90 e0       	ldi	r25, 0x00	; 0
    160e:	a8 0e       	add	r10, r24
    1610:	b9 1e       	adc	r11, r25
    1612:	9f e6       	ldi	r25, 0x6F	; 111
    1614:	f9 22       	and	r15, r25
    1616:	57 ff       	sbrs	r21, 7
    1618:	09 c0       	rjmp	.+18     	; 0x162c <vfprintf+0x23c>
    161a:	50 95       	com	r21
    161c:	40 95       	com	r20
    161e:	30 95       	com	r19
    1620:	21 95       	neg	r18
    1622:	3f 4f       	sbci	r19, 0xFF	; 255
    1624:	4f 4f       	sbci	r20, 0xFF	; 255
    1626:	5f 4f       	sbci	r21, 0xFF	; 255
    1628:	e0 e8       	ldi	r30, 0x80	; 128
    162a:	fe 2a       	or	r15, r30
    162c:	ca 01       	movw	r24, r20
    162e:	b9 01       	movw	r22, r18
    1630:	a1 01       	movw	r20, r2
    1632:	2a e0       	ldi	r18, 0x0A	; 10
    1634:	30 e0       	ldi	r19, 0x00	; 0
    1636:	eb d0       	rcall	.+470    	; 0x180e <__ultoa_invert>
    1638:	d8 2e       	mov	r13, r24
    163a:	d2 18       	sub	r13, r2
    163c:	3f c0       	rjmp	.+126    	; 0x16bc <vfprintf+0x2cc>
    163e:	95 37       	cpi	r25, 0x75	; 117
    1640:	29 f4       	brne	.+10     	; 0x164c <vfprintf+0x25c>
    1642:	1f 2d       	mov	r17, r15
    1644:	1f 7e       	andi	r17, 0xEF	; 239
    1646:	2a e0       	ldi	r18, 0x0A	; 10
    1648:	30 e0       	ldi	r19, 0x00	; 0
    164a:	1d c0       	rjmp	.+58     	; 0x1686 <vfprintf+0x296>
    164c:	1f 2d       	mov	r17, r15
    164e:	19 7f       	andi	r17, 0xF9	; 249
    1650:	9f 36       	cpi	r25, 0x6F	; 111
    1652:	61 f0       	breq	.+24     	; 0x166c <vfprintf+0x27c>
    1654:	90 37       	cpi	r25, 0x70	; 112
    1656:	20 f4       	brcc	.+8      	; 0x1660 <vfprintf+0x270>
    1658:	98 35       	cpi	r25, 0x58	; 88
    165a:	09 f0       	breq	.+2      	; 0x165e <vfprintf+0x26e>
    165c:	a5 c0       	rjmp	.+330    	; 0x17a8 <vfprintf+0x3b8>
    165e:	0f c0       	rjmp	.+30     	; 0x167e <vfprintf+0x28e>
    1660:	90 37       	cpi	r25, 0x70	; 112
    1662:	39 f0       	breq	.+14     	; 0x1672 <vfprintf+0x282>
    1664:	98 37       	cpi	r25, 0x78	; 120
    1666:	09 f0       	breq	.+2      	; 0x166a <vfprintf+0x27a>
    1668:	9f c0       	rjmp	.+318    	; 0x17a8 <vfprintf+0x3b8>
    166a:	04 c0       	rjmp	.+8      	; 0x1674 <vfprintf+0x284>
    166c:	28 e0       	ldi	r18, 0x08	; 8
    166e:	30 e0       	ldi	r19, 0x00	; 0
    1670:	0a c0       	rjmp	.+20     	; 0x1686 <vfprintf+0x296>
    1672:	10 61       	ori	r17, 0x10	; 16
    1674:	14 fd       	sbrc	r17, 4
    1676:	14 60       	ori	r17, 0x04	; 4
    1678:	20 e1       	ldi	r18, 0x10	; 16
    167a:	30 e0       	ldi	r19, 0x00	; 0
    167c:	04 c0       	rjmp	.+8      	; 0x1686 <vfprintf+0x296>
    167e:	14 fd       	sbrc	r17, 4
    1680:	16 60       	ori	r17, 0x06	; 6
    1682:	20 e1       	ldi	r18, 0x10	; 16
    1684:	32 e0       	ldi	r19, 0x02	; 2
    1686:	17 ff       	sbrs	r17, 7
    1688:	08 c0       	rjmp	.+16     	; 0x169a <vfprintf+0x2aa>
    168a:	f5 01       	movw	r30, r10
    168c:	60 81       	ld	r22, Z
    168e:	71 81       	ldd	r23, Z+1	; 0x01
    1690:	82 81       	ldd	r24, Z+2	; 0x02
    1692:	93 81       	ldd	r25, Z+3	; 0x03
    1694:	44 e0       	ldi	r20, 0x04	; 4
    1696:	50 e0       	ldi	r21, 0x00	; 0
    1698:	08 c0       	rjmp	.+16     	; 0x16aa <vfprintf+0x2ba>
    169a:	f5 01       	movw	r30, r10
    169c:	80 81       	ld	r24, Z
    169e:	91 81       	ldd	r25, Z+1	; 0x01
    16a0:	bc 01       	movw	r22, r24
    16a2:	80 e0       	ldi	r24, 0x00	; 0
    16a4:	90 e0       	ldi	r25, 0x00	; 0
    16a6:	42 e0       	ldi	r20, 0x02	; 2
    16a8:	50 e0       	ldi	r21, 0x00	; 0
    16aa:	a4 0e       	add	r10, r20
    16ac:	b5 1e       	adc	r11, r21
    16ae:	a1 01       	movw	r20, r2
    16b0:	ae d0       	rcall	.+348    	; 0x180e <__ultoa_invert>
    16b2:	d8 2e       	mov	r13, r24
    16b4:	d2 18       	sub	r13, r2
    16b6:	8f e7       	ldi	r24, 0x7F	; 127
    16b8:	f8 2e       	mov	r15, r24
    16ba:	f1 22       	and	r15, r17
    16bc:	f6 fe       	sbrs	r15, 6
    16be:	0b c0       	rjmp	.+22     	; 0x16d6 <vfprintf+0x2e6>
    16c0:	5e ef       	ldi	r21, 0xFE	; 254
    16c2:	f5 22       	and	r15, r21
    16c4:	d9 14       	cp	r13, r9
    16c6:	38 f4       	brcc	.+14     	; 0x16d6 <vfprintf+0x2e6>
    16c8:	f4 fe       	sbrs	r15, 4
    16ca:	07 c0       	rjmp	.+14     	; 0x16da <vfprintf+0x2ea>
    16cc:	f2 fc       	sbrc	r15, 2
    16ce:	05 c0       	rjmp	.+10     	; 0x16da <vfprintf+0x2ea>
    16d0:	8f ee       	ldi	r24, 0xEF	; 239
    16d2:	f8 22       	and	r15, r24
    16d4:	02 c0       	rjmp	.+4      	; 0x16da <vfprintf+0x2ea>
    16d6:	1d 2d       	mov	r17, r13
    16d8:	01 c0       	rjmp	.+2      	; 0x16dc <vfprintf+0x2ec>
    16da:	19 2d       	mov	r17, r9
    16dc:	f4 fe       	sbrs	r15, 4
    16de:	0d c0       	rjmp	.+26     	; 0x16fa <vfprintf+0x30a>
    16e0:	fe 01       	movw	r30, r28
    16e2:	ed 0d       	add	r30, r13
    16e4:	f1 1d       	adc	r31, r1
    16e6:	80 81       	ld	r24, Z
    16e8:	80 33       	cpi	r24, 0x30	; 48
    16ea:	19 f4       	brne	.+6      	; 0x16f2 <vfprintf+0x302>
    16ec:	99 ee       	ldi	r25, 0xE9	; 233
    16ee:	f9 22       	and	r15, r25
    16f0:	08 c0       	rjmp	.+16     	; 0x1702 <vfprintf+0x312>
    16f2:	1f 5f       	subi	r17, 0xFF	; 255
    16f4:	f2 fe       	sbrs	r15, 2
    16f6:	05 c0       	rjmp	.+10     	; 0x1702 <vfprintf+0x312>
    16f8:	03 c0       	rjmp	.+6      	; 0x1700 <vfprintf+0x310>
    16fa:	8f 2d       	mov	r24, r15
    16fc:	86 78       	andi	r24, 0x86	; 134
    16fe:	09 f0       	breq	.+2      	; 0x1702 <vfprintf+0x312>
    1700:	1f 5f       	subi	r17, 0xFF	; 255
    1702:	0f 2d       	mov	r16, r15
    1704:	f3 fc       	sbrc	r15, 3
    1706:	13 c0       	rjmp	.+38     	; 0x172e <vfprintf+0x33e>
    1708:	f0 fe       	sbrs	r15, 0
    170a:	0e c0       	rjmp	.+28     	; 0x1728 <vfprintf+0x338>
    170c:	1e 15       	cp	r17, r14
    170e:	10 f0       	brcs	.+4      	; 0x1714 <vfprintf+0x324>
    1710:	9d 2c       	mov	r9, r13
    1712:	0a c0       	rjmp	.+20     	; 0x1728 <vfprintf+0x338>
    1714:	9d 2c       	mov	r9, r13
    1716:	9e 0c       	add	r9, r14
    1718:	91 1a       	sub	r9, r17
    171a:	1e 2d       	mov	r17, r14
    171c:	05 c0       	rjmp	.+10     	; 0x1728 <vfprintf+0x338>
    171e:	80 e2       	ldi	r24, 0x20	; 32
    1720:	90 e0       	ldi	r25, 0x00	; 0
    1722:	b3 01       	movw	r22, r6
    1724:	e2 dd       	rcall	.-1084   	; 0x12ea <fputc>
    1726:	1f 5f       	subi	r17, 0xFF	; 255
    1728:	1e 15       	cp	r17, r14
    172a:	c8 f3       	brcs	.-14     	; 0x171e <vfprintf+0x32e>
    172c:	04 c0       	rjmp	.+8      	; 0x1736 <vfprintf+0x346>
    172e:	1e 15       	cp	r17, r14
    1730:	10 f4       	brcc	.+4      	; 0x1736 <vfprintf+0x346>
    1732:	e1 1a       	sub	r14, r17
    1734:	01 c0       	rjmp	.+2      	; 0x1738 <vfprintf+0x348>
    1736:	ee 24       	eor	r14, r14
    1738:	04 ff       	sbrs	r16, 4
    173a:	0e c0       	rjmp	.+28     	; 0x1758 <vfprintf+0x368>
    173c:	80 e3       	ldi	r24, 0x30	; 48
    173e:	90 e0       	ldi	r25, 0x00	; 0
    1740:	b3 01       	movw	r22, r6
    1742:	d3 dd       	rcall	.-1114   	; 0x12ea <fputc>
    1744:	02 ff       	sbrs	r16, 2
    1746:	1b c0       	rjmp	.+54     	; 0x177e <vfprintf+0x38e>
    1748:	01 fd       	sbrc	r16, 1
    174a:	03 c0       	rjmp	.+6      	; 0x1752 <vfprintf+0x362>
    174c:	88 e7       	ldi	r24, 0x78	; 120
    174e:	90 e0       	ldi	r25, 0x00	; 0
    1750:	0e c0       	rjmp	.+28     	; 0x176e <vfprintf+0x37e>
    1752:	88 e5       	ldi	r24, 0x58	; 88
    1754:	90 e0       	ldi	r25, 0x00	; 0
    1756:	0b c0       	rjmp	.+22     	; 0x176e <vfprintf+0x37e>
    1758:	80 2f       	mov	r24, r16
    175a:	86 78       	andi	r24, 0x86	; 134
    175c:	81 f0       	breq	.+32     	; 0x177e <vfprintf+0x38e>
    175e:	01 ff       	sbrs	r16, 1
    1760:	02 c0       	rjmp	.+4      	; 0x1766 <vfprintf+0x376>
    1762:	8b e2       	ldi	r24, 0x2B	; 43
    1764:	01 c0       	rjmp	.+2      	; 0x1768 <vfprintf+0x378>
    1766:	80 e2       	ldi	r24, 0x20	; 32
    1768:	f7 fc       	sbrc	r15, 7
    176a:	8d e2       	ldi	r24, 0x2D	; 45
    176c:	90 e0       	ldi	r25, 0x00	; 0
    176e:	b3 01       	movw	r22, r6
    1770:	bc dd       	rcall	.-1160   	; 0x12ea <fputc>
    1772:	05 c0       	rjmp	.+10     	; 0x177e <vfprintf+0x38e>
    1774:	80 e3       	ldi	r24, 0x30	; 48
    1776:	90 e0       	ldi	r25, 0x00	; 0
    1778:	b3 01       	movw	r22, r6
    177a:	b7 dd       	rcall	.-1170   	; 0x12ea <fputc>
    177c:	9a 94       	dec	r9
    177e:	d9 14       	cp	r13, r9
    1780:	c8 f3       	brcs	.-14     	; 0x1774 <vfprintf+0x384>
    1782:	da 94       	dec	r13
    1784:	f1 01       	movw	r30, r2
    1786:	ed 0d       	add	r30, r13
    1788:	f1 1d       	adc	r31, r1
    178a:	80 81       	ld	r24, Z
    178c:	90 e0       	ldi	r25, 0x00	; 0
    178e:	b3 01       	movw	r22, r6
    1790:	ac dd       	rcall	.-1192   	; 0x12ea <fputc>
    1792:	dd 20       	and	r13, r13
    1794:	b1 f7       	brne	.-20     	; 0x1782 <vfprintf+0x392>
    1796:	05 c0       	rjmp	.+10     	; 0x17a2 <vfprintf+0x3b2>
    1798:	80 e2       	ldi	r24, 0x20	; 32
    179a:	90 e0       	ldi	r25, 0x00	; 0
    179c:	b3 01       	movw	r22, r6
    179e:	a5 dd       	rcall	.-1206   	; 0x12ea <fputc>
    17a0:	ea 94       	dec	r14
    17a2:	ee 20       	and	r14, r14
    17a4:	c9 f7       	brne	.-14     	; 0x1798 <vfprintf+0x3a8>
    17a6:	50 ce       	rjmp	.-864    	; 0x1448 <vfprintf+0x58>
    17a8:	f3 01       	movw	r30, r6
    17aa:	66 81       	ldd	r22, Z+6	; 0x06
    17ac:	77 81       	ldd	r23, Z+7	; 0x07
    17ae:	cb 01       	movw	r24, r22
    17b0:	2b 96       	adiw	r28, 0x0b	; 11
    17b2:	0f b6       	in	r0, 0x3f	; 63
    17b4:	f8 94       	cli
    17b6:	de bf       	out	0x3e, r29	; 62
    17b8:	0f be       	out	0x3f, r0	; 63
    17ba:	cd bf       	out	0x3d, r28	; 61
    17bc:	cf 91       	pop	r28
    17be:	df 91       	pop	r29
    17c0:	1f 91       	pop	r17
    17c2:	0f 91       	pop	r16
    17c4:	ff 90       	pop	r15
    17c6:	ef 90       	pop	r14
    17c8:	df 90       	pop	r13
    17ca:	cf 90       	pop	r12
    17cc:	bf 90       	pop	r11
    17ce:	af 90       	pop	r10
    17d0:	9f 90       	pop	r9
    17d2:	8f 90       	pop	r8
    17d4:	7f 90       	pop	r7
    17d6:	6f 90       	pop	r6
    17d8:	5f 90       	pop	r5
    17da:	4f 90       	pop	r4
    17dc:	3f 90       	pop	r3
    17de:	2f 90       	pop	r2
    17e0:	08 95       	ret

000017e2 <strnlen_P>:
    17e2:	fc 01       	movw	r30, r24
    17e4:	05 90       	lpm	r0, Z+
    17e6:	61 50       	subi	r22, 0x01	; 1
    17e8:	70 40       	sbci	r23, 0x00	; 0
    17ea:	01 10       	cpse	r0, r1
    17ec:	d8 f7       	brcc	.-10     	; 0x17e4 <strnlen_P+0x2>
    17ee:	80 95       	com	r24
    17f0:	90 95       	com	r25
    17f2:	8e 0f       	add	r24, r30
    17f4:	9f 1f       	adc	r25, r31
    17f6:	08 95       	ret

000017f8 <strnlen>:
    17f8:	fc 01       	movw	r30, r24
    17fa:	61 50       	subi	r22, 0x01	; 1
    17fc:	70 40       	sbci	r23, 0x00	; 0
    17fe:	01 90       	ld	r0, Z+
    1800:	01 10       	cpse	r0, r1
    1802:	d8 f7       	brcc	.-10     	; 0x17fa <strnlen+0x2>
    1804:	80 95       	com	r24
    1806:	90 95       	com	r25
    1808:	8e 0f       	add	r24, r30
    180a:	9f 1f       	adc	r25, r31
    180c:	08 95       	ret

0000180e <__ultoa_invert>:
    180e:	fa 01       	movw	r30, r20
    1810:	aa 27       	eor	r26, r26
    1812:	28 30       	cpi	r18, 0x08	; 8
    1814:	51 f1       	breq	.+84     	; 0x186a <__ultoa_invert+0x5c>
    1816:	20 31       	cpi	r18, 0x10	; 16
    1818:	81 f1       	breq	.+96     	; 0x187a <__ultoa_invert+0x6c>
    181a:	e8 94       	clt
    181c:	6f 93       	push	r22
    181e:	6e 7f       	andi	r22, 0xFE	; 254
    1820:	6e 5f       	subi	r22, 0xFE	; 254
    1822:	7f 4f       	sbci	r23, 0xFF	; 255
    1824:	8f 4f       	sbci	r24, 0xFF	; 255
    1826:	9f 4f       	sbci	r25, 0xFF	; 255
    1828:	af 4f       	sbci	r26, 0xFF	; 255
    182a:	b1 e0       	ldi	r27, 0x01	; 1
    182c:	3e d0       	rcall	.+124    	; 0x18aa <__ultoa_invert+0x9c>
    182e:	b4 e0       	ldi	r27, 0x04	; 4
    1830:	3c d0       	rcall	.+120    	; 0x18aa <__ultoa_invert+0x9c>
    1832:	67 0f       	add	r22, r23
    1834:	78 1f       	adc	r23, r24
    1836:	89 1f       	adc	r24, r25
    1838:	9a 1f       	adc	r25, r26
    183a:	a1 1d       	adc	r26, r1
    183c:	68 0f       	add	r22, r24
    183e:	79 1f       	adc	r23, r25
    1840:	8a 1f       	adc	r24, r26
    1842:	91 1d       	adc	r25, r1
    1844:	a1 1d       	adc	r26, r1
    1846:	6a 0f       	add	r22, r26
    1848:	71 1d       	adc	r23, r1
    184a:	81 1d       	adc	r24, r1
    184c:	91 1d       	adc	r25, r1
    184e:	a1 1d       	adc	r26, r1
    1850:	20 d0       	rcall	.+64     	; 0x1892 <__ultoa_invert+0x84>
    1852:	09 f4       	brne	.+2      	; 0x1856 <__ultoa_invert+0x48>
    1854:	68 94       	set
    1856:	3f 91       	pop	r19
    1858:	2a e0       	ldi	r18, 0x0A	; 10
    185a:	26 9f       	mul	r18, r22
    185c:	11 24       	eor	r1, r1
    185e:	30 19       	sub	r19, r0
    1860:	30 5d       	subi	r19, 0xD0	; 208
    1862:	31 93       	st	Z+, r19
    1864:	de f6       	brtc	.-74     	; 0x181c <__ultoa_invert+0xe>
    1866:	cf 01       	movw	r24, r30
    1868:	08 95       	ret
    186a:	46 2f       	mov	r20, r22
    186c:	47 70       	andi	r20, 0x07	; 7
    186e:	40 5d       	subi	r20, 0xD0	; 208
    1870:	41 93       	st	Z+, r20
    1872:	b3 e0       	ldi	r27, 0x03	; 3
    1874:	0f d0       	rcall	.+30     	; 0x1894 <__ultoa_invert+0x86>
    1876:	c9 f7       	brne	.-14     	; 0x186a <__ultoa_invert+0x5c>
    1878:	f6 cf       	rjmp	.-20     	; 0x1866 <__ultoa_invert+0x58>
    187a:	46 2f       	mov	r20, r22
    187c:	4f 70       	andi	r20, 0x0F	; 15
    187e:	40 5d       	subi	r20, 0xD0	; 208
    1880:	4a 33       	cpi	r20, 0x3A	; 58
    1882:	18 f0       	brcs	.+6      	; 0x188a <__ultoa_invert+0x7c>
    1884:	49 5d       	subi	r20, 0xD9	; 217
    1886:	31 fd       	sbrc	r19, 1
    1888:	40 52       	subi	r20, 0x20	; 32
    188a:	41 93       	st	Z+, r20
    188c:	02 d0       	rcall	.+4      	; 0x1892 <__ultoa_invert+0x84>
    188e:	a9 f7       	brne	.-22     	; 0x187a <__ultoa_invert+0x6c>
    1890:	ea cf       	rjmp	.-44     	; 0x1866 <__ultoa_invert+0x58>
    1892:	b4 e0       	ldi	r27, 0x04	; 4
    1894:	a6 95       	lsr	r26
    1896:	97 95       	ror	r25
    1898:	87 95       	ror	r24
    189a:	77 95       	ror	r23
    189c:	67 95       	ror	r22
    189e:	ba 95       	dec	r27
    18a0:	c9 f7       	brne	.-14     	; 0x1894 <__ultoa_invert+0x86>
    18a2:	00 97       	sbiw	r24, 0x00	; 0
    18a4:	61 05       	cpc	r22, r1
    18a6:	71 05       	cpc	r23, r1
    18a8:	08 95       	ret
    18aa:	9b 01       	movw	r18, r22
    18ac:	ac 01       	movw	r20, r24
    18ae:	0a 2e       	mov	r0, r26
    18b0:	06 94       	lsr	r0
    18b2:	57 95       	ror	r21
    18b4:	47 95       	ror	r20
    18b6:	37 95       	ror	r19
    18b8:	27 95       	ror	r18
    18ba:	ba 95       	dec	r27
    18bc:	c9 f7       	brne	.-14     	; 0x18b0 <__ultoa_invert+0xa2>
    18be:	62 0f       	add	r22, r18
    18c0:	73 1f       	adc	r23, r19
    18c2:	84 1f       	adc	r24, r20
    18c4:	95 1f       	adc	r25, r21
    18c6:	a0 1d       	adc	r26, r0
    18c8:	08 95       	ret

000018ca <_exit>:
    18ca:	f8 94       	cli

000018cc <__stop_program>:
    18cc:	ff cf       	rjmp	.-2      	; 0x18cc <__stop_program>
