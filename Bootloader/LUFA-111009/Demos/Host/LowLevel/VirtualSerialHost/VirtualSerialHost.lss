
VirtualSerialHost.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  0000191e  000019b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000191e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000022  00800112  00800112  000019c4  2**0
                  ALLOC
  3 .debug_aranges 00000328  00000000  00000000  000019c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000007de  00000000  00000000  00001cec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00004aeb  00000000  00000000  000024ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000015d2  00000000  00000000  00006fb5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00003d9a  00000000  00000000  00008587  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000004b0  00000000  00000000  0000c324  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000022db  00000000  00000000  0000c7d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00002159  00000000  00000000  0000eaaf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000003d8  00000000  00000000  00010c08  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
		Pipe_DisablePipe();
	}
}

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
       0:	25 c1       	rjmp	.+586    	; 0x24c <__ctors_end>
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
       2:	00 00       	nop
{
	USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, AfterType);

	if (*BytesRem)
	  USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, Type);
}
       4:	41 c1       	rjmp	.+642    	; 0x288 <__bad_interrupt>
	return USB_Host_SendControlRequest(NULL);
}

uint8_t USB_Host_SetInterfaceAltSetting(const uint8_t InterfaceIndex,
                                        const uint8_t AltSetting)
{
       6:	00 00       	nop

	return Serial_ReceiveByte();
}

int Serial_getchar_Blocking(FILE *Stream)
{
       8:	3f c1       	rjmp	.+638    	; 0x288 <__bad_interrupt>
       a:	00 00       	nop
       c:	3d c1       	rjmp	.+634    	; 0x288 <__bad_interrupt>
       e:	00 00       	nop
      10:	3b c1       	rjmp	.+630    	; 0x288 <__bad_interrupt>
      12:	00 00       	nop
      14:	39 c1       	rjmp	.+626    	; 0x288 <__bad_interrupt>
      16:	00 00       	nop
      18:	37 c1       	rjmp	.+622    	; 0x288 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	35 c1       	rjmp	.+618    	; 0x288 <__bad_interrupt>
      1e:	00 00       	nop
      20:	33 c1       	rjmp	.+614    	; 0x288 <__bad_interrupt>
      22:	00 00       	nop
      24:	31 c1       	rjmp	.+610    	; 0x288 <__bad_interrupt>
      26:	00 00       	nop
      28:	7a c6       	rjmp	.+3316   	; 0xd1e <__vector_10>
      2a:	00 00       	nop
      2c:	2d c1       	rjmp	.+602    	; 0x288 <__bad_interrupt>
      2e:	00 00       	nop
      30:	2b c1       	rjmp	.+598    	; 0x288 <__bad_interrupt>
      32:	00 00       	nop
      34:	29 c1       	rjmp	.+594    	; 0x288 <__bad_interrupt>
      36:	00 00       	nop
      38:	27 c1       	rjmp	.+590    	; 0x288 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	25 c1       	rjmp	.+586    	; 0x288 <__bad_interrupt>
      3e:	00 00       	nop
      40:	23 c1       	rjmp	.+582    	; 0x288 <__bad_interrupt>
      42:	00 00       	nop
      44:	21 c1       	rjmp	.+578    	; 0x288 <__bad_interrupt>
      46:	00 00       	nop
      48:	1f c1       	rjmp	.+574    	; 0x288 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	1d c1       	rjmp	.+570    	; 0x288 <__bad_interrupt>
      4e:	00 00       	nop
      50:	1b c1       	rjmp	.+566    	; 0x288 <__bad_interrupt>
      52:	00 00       	nop
      54:	19 c1       	rjmp	.+562    	; 0x288 <__bad_interrupt>
      56:	00 00       	nop
      58:	17 c1       	rjmp	.+558    	; 0x288 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	15 c1       	rjmp	.+554    	; 0x288 <__bad_interrupt>
      5e:	00 00       	nop
      60:	13 c1       	rjmp	.+550    	; 0x288 <__bad_interrupt>
      62:	00 00       	nop
      64:	11 c1       	rjmp	.+546    	; 0x288 <__bad_interrupt>
      66:	00 00       	nop
      68:	0f c1       	rjmp	.+542    	; 0x288 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	0d c1       	rjmp	.+538    	; 0x288 <__bad_interrupt>
      6e:	00 00       	nop
      70:	0b c1       	rjmp	.+534    	; 0x288 <__bad_interrupt>
      72:	00 00       	nop
      74:	09 c1       	rjmp	.+530    	; 0x288 <__bad_interrupt>
      76:	00 00       	nop
      78:	07 c1       	rjmp	.+526    	; 0x288 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	05 c1       	rjmp	.+522    	; 0x288 <__bad_interrupt>
      7e:	00 00       	nop
      80:	03 c1       	rjmp	.+518    	; 0x288 <__bad_interrupt>
      82:	00 00       	nop
      84:	01 c1       	rjmp	.+514    	; 0x288 <__bad_interrupt>
      86:	00 00       	nop
      88:	ff c0       	rjmp	.+510    	; 0x288 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	fd c0       	rjmp	.+506    	; 0x288 <__bad_interrupt>
      8e:	00 00       	nop
      90:	fb c0       	rjmp	.+502    	; 0x288 <__bad_interrupt>
      92:	00 00       	nop
      94:	f9 c0       	rjmp	.+498    	; 0x288 <__bad_interrupt>
      96:	00 00       	nop

00000098 <__c.4567>:
      98:	1b 5b 33 31 6d 44 65 76 20 45 6e 75 6d 20 45 72     .[31mDev Enum Er
      a8:	72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     ror.. -- Error C
      b8:	6f 64 65 20 25 64 0d 0a 20 2d 2d 20 53 75 62 20     ode %d.. -- Sub 
      c8:	45 72 72 6f 72 20 43 6f 64 65 20 25 64 0d 0a 20     Error Code %d.. 
      d8:	2d 2d 20 49 6e 20 53 74 61 74 65 20 25 64 0d 0a     -- In State %d..
      e8:	1b 5b 33 37 6d 00                                   .[37m.

000000ee <__c.4559>:
      ee:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
      fe:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 
     10e:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

0000011d <__c.4551>:
     11d:	43 44 43 20 44 65 76 69 63 65 20 45 6e 75 6d 65     CDC Device Enume
     12d:	72 61 74 65 64 2e 0d 0a 00                          rated....

00000136 <__c.4549>:
     136:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
     146:	6f 72 20 28 53 65 74 20 43 6f 6e 66 69 67 75 72     or (Set Configur
     156:	61 74 69 6f 6e 29 2e 0d 0a 20 2d 2d 20 45 72 72     ation)... -- Err
     166:	6f 72 20 43 6f 64 65 3a 20 25 64 0d 0a 1b 5b 33     or Code: %d...[3
     176:	37 6d 00                                            7m.

00000179 <__c.4547>:
     179:	20 2d 2d 20 45 72 72 6f 72 20 43 6f 64 65 3a 20      -- Error Code: 
     189:	25 64 0d 0a 1b 5b 33 37 6d 00                       %d...[37m.

00000193 <__c.4545>:
     193:	1b 5b 33 31 6d 49 6e 76 61 6c 69 64 20 44 65 76     .[31mInvalid Dev
     1a3:	69 63 65 2e 0d 0a 00                                ice....

000001aa <__c.4543>:
     1aa:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
     1ba:	6f 72 20 28 47 65 74 20 43 6f 6e 66 69 67 75 72     or (Get Configur
     1ca:	61 74 69 6f 6e 29 2e 0d 0a 00                       ation)....

000001d4 <__c.4540>:
     1d4:	47 65 74 74 69 6e 67 20 43 6f 6e 66 69 67 20 44     Getting Config D
     1e4:	61 74 61 2e 0d 0a 00                                ata....

000001eb <__c.4535>:
     1eb:	1b 5b 33 32 6d 0d 0a 44 65 76 69 63 65 20 55 6e     .[32m..Device Un
     1fb:	61 74 74 61 63 68 65 64 2e 0d 0a 1b 5b 33 37 6d     attached....[37m
     20b:	00                                                  .

0000020c <__c.4530>:
     20c:	1b 5b 33 32 6d 44 65 76 69 63 65 20 41 74 74 61     .[32mDevice Atta
     21c:	63 68 65 64 2e 0d 0a 1b 5b 33 37 6d 00              ched....[37m.

00000229 <__c.4516>:
     229:	1b 5b 33 36 6d 43 44 43 20 48 6f 73 74 20 44 65     .[36mCDC Host De
     239:	6d 6f 20 72 75 6e 6e 69 6e 67 2e 0d 0a 1b 5b 33     mo running....[3
     249:	37 6d 00                                            7m.

0000024c <__ctors_end>:
     24c:	11 24       	eor	r1, r1
     24e:	1f be       	out	0x3f, r1	; 63
     250:	cf ef       	ldi	r28, 0xFF	; 255
     252:	d0 e2       	ldi	r29, 0x20	; 32
     254:	de bf       	out	0x3e, r29	; 62
     256:	cd bf       	out	0x3d, r28	; 61

00000258 <__do_copy_data>:
     258:	11 e0       	ldi	r17, 0x01	; 1
     25a:	a0 e0       	ldi	r26, 0x00	; 0
     25c:	b1 e0       	ldi	r27, 0x01	; 1
     25e:	ee e1       	ldi	r30, 0x1E	; 30
     260:	f9 e1       	ldi	r31, 0x19	; 25
     262:	00 e0       	ldi	r16, 0x00	; 0
     264:	0b bf       	out	0x3b, r16	; 59
     266:	02 c0       	rjmp	.+4      	; 0x26c <__do_copy_data+0x14>
     268:	07 90       	elpm	r0, Z+
     26a:	0d 92       	st	X+, r0
     26c:	a2 31       	cpi	r26, 0x12	; 18
     26e:	b1 07       	cpc	r27, r17
     270:	d9 f7       	brne	.-10     	; 0x268 <__do_copy_data+0x10>

00000272 <__do_clear_bss>:
     272:	11 e0       	ldi	r17, 0x01	; 1
     274:	a2 e1       	ldi	r26, 0x12	; 18
     276:	b1 e0       	ldi	r27, 0x01	; 1
     278:	01 c0       	rjmp	.+2      	; 0x27c <.do_clear_bss_start>

0000027a <.do_clear_bss_loop>:
     27a:	1d 92       	st	X+, r1

0000027c <.do_clear_bss_start>:
     27c:	a4 33       	cpi	r26, 0x34	; 52
     27e:	b1 07       	cpc	r27, r17
     280:	e1 f7       	brne	.-8      	; 0x27a <.do_clear_bss_loop>
     282:	7a d1       	rcall	.+756    	; 0x578 <main>
     284:	0c 94 8d 0c 	jmp	0x191a	; 0x191a <_exit>

00000288 <__bad_interrupt>:
     288:	bb ce       	rjmp	.-650    	; 0x0 <__vectors>

0000028a <CDCHost_Task>:
}

/** Task to read in data received from the attached CDC device and print it to the serial port.
 */
void CDCHost_Task(void)
{
     28a:	8f 92       	push	r8
     28c:	9f 92       	push	r9
     28e:	af 92       	push	r10
     290:	bf 92       	push	r11
     292:	cf 92       	push	r12
     294:	df 92       	push	r13
     296:	ef 92       	push	r14
     298:	ff 92       	push	r15
     29a:	0f 93       	push	r16
     29c:	1f 93       	push	r17
     29e:	df 93       	push	r29
     2a0:	cf 93       	push	r28
     2a2:	cd b7       	in	r28, 0x3d	; 61
     2a4:	de b7       	in	r29, 0x3e	; 62
		Pipe_ClearIN();
	}

	/* Freeze notification IN pipe after use */
	Pipe_Freeze();
}
     2a6:	8d b6       	in	r8, 0x3d	; 61
     2a8:	9e b6       	in	r9, 0x3e	; 62

/** Task to read in data received from the attached CDC device and print it to the serial port.
 */
void CDCHost_Task(void)
{
	if (USB_HostState != HOST_STATE_Configured)
     2aa:	80 91 1f 01 	lds	r24, 0x011F
     2ae:	8b 30       	cpi	r24, 0x0B	; 11
     2b0:	09 f0       	breq	.+2      	; 0x2b4 <CDCHost_Task+0x2a>
     2b2:	69 c0       	rjmp	.+210    	; 0x386 <CDCHost_Task+0xfc>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     2b4:	81 e0       	ldi	r24, 0x01	; 1
     2b6:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     2ba:	80 91 a9 00 	lds	r24, 0x00A9
     2be:	8f 7b       	andi	r24, 0xBF	; 191
     2c0:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     2c4:	80 91 a6 00 	lds	r24, 0x00A6
	/* Select the data IN pipe */
	Pipe_SelectPipe(CDC_DATA_IN_PIPE);
	Pipe_Unfreeze();

	/* Check to see if a packet has been received */
	if (Pipe_IsINReceived())
     2c8:	80 ff       	sbrs	r24, 0
     2ca:	42 c0       	rjmp	.+132    	; 0x350 <CDCHost_Task+0xc6>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     2cc:	80 91 a9 00 	lds	r24, 0x00A9
     2d0:	80 64       	ori	r24, 0x40	; 64
     2d2:	80 93 a9 00 	sts	0x00A9, r24
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
     2d6:	80 91 a6 00 	lds	r24, 0x00A6
	{
		/* Re-freeze IN pipe after the packet has been received */
		Pipe_Freeze();

		/* Check if data is in the pipe */
		if (Pipe_IsReadWriteAllowed())
     2da:	85 ff       	sbrs	r24, 5
     2dc:	34 c0       	rjmp	.+104    	; 0x346 <CDCHost_Task+0xbc>
     2de:	bd b6       	in	r11, 0x3d	; 61
     2e0:	ae b6       	in	r10, 0x3e	; 62
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
     2e2:	e0 90 f6 00 	lds	r14, 0x00F6
     2e6:	f0 90 f7 00 	lds	r15, 0x00F7
		{
			/* Get the length of the pipe data, and create a new buffer to hold it */
			uint16_t BufferLength = Pipe_BytesInPipe();
			uint8_t  Buffer[BufferLength];
     2ea:	8d b7       	in	r24, 0x3d	; 61
     2ec:	9e b7       	in	r25, 0x3e	; 62
     2ee:	8e 19       	sub	r24, r14
     2f0:	9f 09       	sbc	r25, r15
     2f2:	0f b6       	in	r0, 0x3f	; 63
     2f4:	f8 94       	cli
     2f6:	9e bf       	out	0x3e, r25	; 62
     2f8:	0f be       	out	0x3f, r0	; 63
     2fa:	8d bf       	out	0x3d, r24	; 61
     2fc:	cd b6       	in	r12, 0x3d	; 61
     2fe:	de b6       	in	r13, 0x3e	; 62
     300:	08 94       	sec
     302:	c1 1c       	adc	r12, r1
     304:	d1 1c       	adc	r13, r1

			/* Read in the pipe data to the temporary buffer */
			Pipe_Read_Stream_LE(Buffer, BufferLength, NULL);
     306:	c6 01       	movw	r24, r12
     308:	b7 01       	movw	r22, r14
     30a:	40 e0       	ldi	r20, 0x00	; 0
     30c:	50 e0       	ldi	r21, 0x00	; 0
     30e:	9a d5       	rcall	.+2868   	; 0xe44 <Pipe_Read_Stream_LE>
     310:	00 e0       	ldi	r16, 0x00	; 0
     312:	10 e0       	ldi	r17, 0x00	; 0
     314:	0d c0       	rjmp	.+26     	; 0x330 <CDCHost_Task+0xa6>

			/* Print out the buffer contents to the USART */
			for (uint16_t BufferByte = 0; BufferByte < BufferLength; BufferByte++)
			  putchar(Buffer[BufferByte]);
     316:	f6 01       	movw	r30, r12
     318:	e0 0f       	add	r30, r16
     31a:	f1 1f       	adc	r31, r17
     31c:	60 91 30 01 	lds	r22, 0x0130
     320:	70 91 31 01 	lds	r23, 0x0131
     324:	80 81       	ld	r24, Z
     326:	90 e0       	ldi	r25, 0x00	; 0
     328:	0e 94 9d 09 	call	0x133a	; 0x133a <fputc>

			/* Read in the pipe data to the temporary buffer */
			Pipe_Read_Stream_LE(Buffer, BufferLength, NULL);

			/* Print out the buffer contents to the USART */
			for (uint16_t BufferByte = 0; BufferByte < BufferLength; BufferByte++)
     32c:	0f 5f       	subi	r16, 0xFF	; 255
     32e:	1f 4f       	sbci	r17, 0xFF	; 255
     330:	0e 15       	cp	r16, r14
     332:	1f 05       	cpc	r17, r15
     334:	80 f3       	brcs	.-32     	; 0x316 <CDCHost_Task+0x8c>
     336:	8b 2d       	mov	r24, r11
     338:	9a 2d       	mov	r25, r10
     33a:	9c 01       	movw	r18, r24
     33c:	0f b6       	in	r0, 0x3f	; 63
     33e:	f8 94       	cli
     340:	3e bf       	out	0x3e, r19	; 62
     342:	0f be       	out	0x3f, r0	; 63
     344:	2d bf       	out	0x3d, r18	; 61
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     346:	80 91 a6 00 	lds	r24, 0x00A6
     34a:	8e 77       	andi	r24, 0x7E	; 126
     34c:	80 93 a6 00 	sts	0x00A6, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     350:	80 91 a9 00 	lds	r24, 0x00A9
     354:	80 64       	ori	r24, 0x40	; 64
     356:	80 93 a9 00 	sts	0x00A9, r24
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     35a:	83 e0       	ldi	r24, 0x03	; 3
     35c:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     360:	80 91 a9 00 	lds	r24, 0x00A9
     364:	8f 7b       	andi	r24, 0xBF	; 191
     366:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     36a:	80 91 a6 00 	lds	r24, 0x00A6
	/* Select and unfreeze the notification pipe */
	Pipe_SelectPipe(CDC_NOTIFICATION_PIPE);
	Pipe_Unfreeze();

	/* Check if a packet has been received */
	if (Pipe_IsINReceived())
     36e:	80 ff       	sbrs	r24, 0
     370:	05 c0       	rjmp	.+10     	; 0x37c <CDCHost_Task+0xf2>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     372:	80 91 a6 00 	lds	r24, 0x00A6
     376:	8e 77       	andi	r24, 0x7E	; 126
     378:	80 93 a6 00 	sts	0x00A6, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     37c:	80 91 a9 00 	lds	r24, 0x00A9
     380:	80 64       	ori	r24, 0x40	; 64
     382:	80 93 a9 00 	sts	0x00A9, r24
		Pipe_ClearIN();
	}

	/* Freeze notification IN pipe after use */
	Pipe_Freeze();
}
     386:	0f b6       	in	r0, 0x3f	; 63
     388:	f8 94       	cli
     38a:	9e be       	out	0x3e, r9	; 62
     38c:	0f be       	out	0x3f, r0	; 63
     38e:	8d be       	out	0x3d, r8	; 61
     390:	cf 91       	pop	r28
     392:	df 91       	pop	r29
     394:	1f 91       	pop	r17
     396:	0f 91       	pop	r16
     398:	ff 90       	pop	r15
     39a:	ef 90       	pop	r14
     39c:	df 90       	pop	r13
     39e:	cf 90       	pop	r12
     3a0:	bf 90       	pop	r11
     3a2:	af 90       	pop	r10
     3a4:	9f 90       	pop	r9
     3a6:	8f 90       	pop	r8
     3a8:	08 95       	ret

000003aa <EVENT_USB_Host_DeviceEnumerationFailed>:
 *  enumerating an attached USB device.
 */
void EVENT_USB_Host_DeviceEnumerationFailed(const uint8_t ErrorCode,
                                            const uint8_t SubErrorCode)
{
	printf_P(PSTR(ESC_FG_RED "Dev Enum Error\r\n"
     3aa:	90 91 1f 01 	lds	r25, 0x011F
     3ae:	2d b7       	in	r18, 0x3d	; 61
     3b0:	3e b7       	in	r19, 0x3e	; 62
     3b2:	28 50       	subi	r18, 0x08	; 8
     3b4:	30 40       	sbci	r19, 0x00	; 0
     3b6:	0f b6       	in	r0, 0x3f	; 63
     3b8:	f8 94       	cli
     3ba:	3e bf       	out	0x3e, r19	; 62
     3bc:	0f be       	out	0x3f, r0	; 63
     3be:	2d bf       	out	0x3d, r18	; 61
     3c0:	ed b7       	in	r30, 0x3d	; 61
     3c2:	fe b7       	in	r31, 0x3e	; 62
     3c4:	31 96       	adiw	r30, 0x01	; 1
     3c6:	28 e9       	ldi	r18, 0x98	; 152
     3c8:	30 e0       	ldi	r19, 0x00	; 0
     3ca:	ad b7       	in	r26, 0x3d	; 61
     3cc:	be b7       	in	r27, 0x3e	; 62
     3ce:	12 96       	adiw	r26, 0x02	; 2
     3d0:	3c 93       	st	X, r19
     3d2:	2e 93       	st	-X, r18
     3d4:	11 97       	sbiw	r26, 0x01	; 1
     3d6:	82 83       	std	Z+2, r24	; 0x02
     3d8:	13 82       	std	Z+3, r1	; 0x03
     3da:	64 83       	std	Z+4, r22	; 0x04
     3dc:	15 82       	std	Z+5, r1	; 0x05
     3de:	96 83       	std	Z+6, r25	; 0x06
     3e0:	17 82       	std	Z+7, r1	; 0x07
     3e2:	d7 d7       	rcall	.+4014   	; 0x1392 <printf_P>
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     3e4:	8b b1       	in	r24, 0x0b	; 11
     3e6:	8f 70       	andi	r24, 0x0F	; 15
     3e8:	80 69       	ori	r24, 0x90	; 144
     3ea:	8b b9       	out	0x0b, r24	; 11
     3ec:	2d b7       	in	r18, 0x3d	; 61
     3ee:	3e b7       	in	r19, 0x3e	; 62
     3f0:	28 5f       	subi	r18, 0xF8	; 248
     3f2:	3f 4f       	sbci	r19, 0xFF	; 255
     3f4:	0f b6       	in	r0, 0x3f	; 63
     3f6:	f8 94       	cli
     3f8:	3e bf       	out	0x3e, r19	; 62
     3fa:	0f be       	out	0x3f, r0	; 63
     3fc:	2d bf       	out	0x3d, r18	; 61
	                         " -- Error Code %d\r\n"
	                         " -- Sub Error Code %d\r\n"
	                         " -- In State %d\r\n" ESC_FG_WHITE), ErrorCode, SubErrorCode, USB_HostState);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
}
     3fe:	08 95       	ret

00000400 <EVENT_USB_Host_HostError>:
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
}

/** Event handler for the USB_HostError event. This indicates that a hardware error occurred while in host mode. */
void EVENT_USB_Host_HostError(const uint8_t ErrorCode)
{
     400:	1f 93       	push	r17
     402:	18 2f       	mov	r17, r24
	USB_Disable();
     404:	67 d4       	rcall	.+2254   	; 0xcd4 <USB_Disable>

	printf_P(PSTR(ESC_FG_RED "Host Mode Error\r\n"
     406:	00 d0       	rcall	.+0      	; 0x408 <EVENT_USB_Host_HostError+0x8>
     408:	00 d0       	rcall	.+0      	; 0x40a <EVENT_USB_Host_HostError+0xa>
     40a:	ed b7       	in	r30, 0x3d	; 61
     40c:	fe b7       	in	r31, 0x3e	; 62
     40e:	31 96       	adiw	r30, 0x01	; 1
     410:	8e ee       	ldi	r24, 0xEE	; 238
     412:	90 e0       	ldi	r25, 0x00	; 0
     414:	ad b7       	in	r26, 0x3d	; 61
     416:	be b7       	in	r27, 0x3e	; 62
     418:	12 96       	adiw	r26, 0x02	; 2
     41a:	9c 93       	st	X, r25
     41c:	8e 93       	st	-X, r24
     41e:	11 97       	sbiw	r26, 0x01	; 1
     420:	12 83       	std	Z+2, r17	; 0x02
     422:	13 82       	std	Z+3, r1	; 0x03
     424:	b6 d7       	rcall	.+3948   	; 0x1392 <printf_P>
     426:	8b b1       	in	r24, 0x0b	; 11
     428:	8f 70       	andi	r24, 0x0F	; 15
     42a:	80 69       	ori	r24, 0x90	; 144
     42c:	8b b9       	out	0x0b, r24	; 11
     42e:	0f 90       	pop	r0
     430:	0f 90       	pop	r0
     432:	0f 90       	pop	r0
     434:	0f 90       	pop	r0
     436:	ff cf       	rjmp	.-2      	; 0x436 <EVENT_USB_Host_HostError+0x36>

00000438 <EVENT_USB_Host_DeviceUnattached>:
/** Event handler for the USB_DeviceUnattached event. This indicates that a device has been removed from the host, and
 *  stops the library USB task management process.
 */
void EVENT_USB_Host_DeviceUnattached(void)
{
	puts_P(PSTR(ESC_FG_GREEN "\r\nDevice Unattached.\r\n" ESC_FG_WHITE));
     438:	8b ee       	ldi	r24, 0xEB	; 235
     43a:	91 e0       	ldi	r25, 0x01	; 1
     43c:	cc d7       	rcall	.+3992   	; 0x13d6 <puts_P>
     43e:	8b b1       	in	r24, 0x0b	; 11
     440:	8f 70       	andi	r24, 0x0F	; 15
     442:	80 61       	ori	r24, 0x10	; 16
     444:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
}
     446:	08 95       	ret

00000448 <EVENT_USB_Host_DeviceAttached>:
/** Event handler for the USB_DeviceAttached event. This indicates that a device has been attached to the host, and
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Host_DeviceAttached(void)
{
	puts_P(PSTR(ESC_FG_GREEN "Device Attached.\r\n" ESC_FG_WHITE));
     448:	8c e0       	ldi	r24, 0x0C	; 12
     44a:	92 e0       	ldi	r25, 0x02	; 2
     44c:	c4 d7       	rcall	.+3976   	; 0x13d6 <puts_P>
     44e:	8b b1       	in	r24, 0x0b	; 11
     450:	8f 70       	andi	r24, 0x0F	; 15
     452:	80 6a       	ori	r24, 0xA0	; 160
     454:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
}
     456:	08 95       	ret

00000458 <EVENT_USB_Host_DeviceEnumerationComplete>:

/** Event handler for the USB_DeviceEnumerationComplete event. This indicates that a device has been successfully
 *  enumerated by the host and is now ready to be used by the application.
 */
void EVENT_USB_Host_DeviceEnumerationComplete(void)
{
     458:	1f 93       	push	r17
	puts_P(PSTR("Getting Config Data.\r\n"));
     45a:	84 ed       	ldi	r24, 0xD4	; 212
     45c:	91 e0       	ldi	r25, 0x01	; 1
     45e:	bb d7       	rcall	.+3958   	; 0x13d6 <puts_P>

	uint8_t ErrorCode;

	/* Get and process the configuration descriptor data */
	if ((ErrorCode = ProcessConfigurationDescriptor()) != SuccessfulConfigRead)
     460:	c9 d0       	rcall	.+402    	; 0x5f4 <ProcessConfigurationDescriptor>
     462:	18 2f       	mov	r17, r24
     464:	88 23       	and	r24, r24
     466:	b9 f0       	breq	.+46     	; 0x496 <EVENT_USB_Host_DeviceEnumerationComplete+0x3e>
	{
		if (ErrorCode == ControlError)
     468:	81 30       	cpi	r24, 0x01	; 1
     46a:	19 f4       	brne	.+6      	; 0x472 <EVENT_USB_Host_DeviceEnumerationComplete+0x1a>
		  puts_P(PSTR(ESC_FG_RED "Control Error (Get Configuration).\r\n"));
     46c:	8a ea       	ldi	r24, 0xAA	; 170
     46e:	91 e0       	ldi	r25, 0x01	; 1
     470:	02 c0       	rjmp	.+4      	; 0x476 <EVENT_USB_Host_DeviceEnumerationComplete+0x1e>
		else
		  puts_P(PSTR(ESC_FG_RED "Invalid Device.\r\n"));
     472:	83 e9       	ldi	r24, 0x93	; 147
     474:	91 e0       	ldi	r25, 0x01	; 1
     476:	af d7       	rcall	.+3934   	; 0x13d6 <puts_P>

		printf_P(PSTR(" -- Error Code: %d\r\n" ESC_FG_WHITE), ErrorCode);
     478:	00 d0       	rcall	.+0      	; 0x47a <EVENT_USB_Host_DeviceEnumerationComplete+0x22>
     47a:	00 d0       	rcall	.+0      	; 0x47c <EVENT_USB_Host_DeviceEnumerationComplete+0x24>
     47c:	ed b7       	in	r30, 0x3d	; 61
     47e:	fe b7       	in	r31, 0x3e	; 62
     480:	31 96       	adiw	r30, 0x01	; 1
     482:	89 e7       	ldi	r24, 0x79	; 121
     484:	91 e0       	ldi	r25, 0x01	; 1
     486:	ad b7       	in	r26, 0x3d	; 61
     488:	be b7       	in	r27, 0x3e	; 62
     48a:	12 96       	adiw	r26, 0x02	; 2
     48c:	9c 93       	st	X, r25
     48e:	8e 93       	st	-X, r24
     490:	11 97       	sbiw	r26, 0x01	; 1
     492:	12 83       	std	Z+2, r17	; 0x02
     494:	13 c0       	rjmp	.+38     	; 0x4bc <EVENT_USB_Host_DeviceEnumerationComplete+0x64>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	/* Set the device configuration to the first configuration (rarely do devices use multiple configurations) */
	if ((ErrorCode = USB_Host_SetDeviceConfiguration(1)) != HOST_SENDCONTROL_Successful)
     496:	81 e0       	ldi	r24, 0x01	; 1
     498:	fb d6       	rcall	.+3574   	; 0x1290 <USB_Host_SetDeviceConfiguration>
     49a:	28 2f       	mov	r18, r24
     49c:	88 23       	and	r24, r24
     49e:	c9 f0       	breq	.+50     	; 0x4d2 <EVENT_USB_Host_DeviceEnumerationComplete+0x7a>
	{
		printf_P(PSTR(ESC_FG_RED "Control Error (Set Configuration).\r\n"
     4a0:	00 d0       	rcall	.+0      	; 0x4a2 <EVENT_USB_Host_DeviceEnumerationComplete+0x4a>
     4a2:	00 d0       	rcall	.+0      	; 0x4a4 <EVENT_USB_Host_DeviceEnumerationComplete+0x4c>
     4a4:	ed b7       	in	r30, 0x3d	; 61
     4a6:	fe b7       	in	r31, 0x3e	; 62
     4a8:	31 96       	adiw	r30, 0x01	; 1
     4aa:	86 e3       	ldi	r24, 0x36	; 54
     4ac:	91 e0       	ldi	r25, 0x01	; 1
     4ae:	ad b7       	in	r26, 0x3d	; 61
     4b0:	be b7       	in	r27, 0x3e	; 62
     4b2:	12 96       	adiw	r26, 0x02	; 2
     4b4:	9c 93       	st	X, r25
     4b6:	8e 93       	st	-X, r24
     4b8:	11 97       	sbiw	r26, 0x01	; 1
     4ba:	22 83       	std	Z+2, r18	; 0x02
     4bc:	13 82       	std	Z+3, r1	; 0x03
     4be:	69 d7       	rcall	.+3794   	; 0x1392 <printf_P>
     4c0:	8b b1       	in	r24, 0x0b	; 11
     4c2:	8f 70       	andi	r24, 0x0F	; 15
     4c4:	80 69       	ori	r24, 0x90	; 144
     4c6:	8b b9       	out	0x0b, r24	; 11
     4c8:	0f 90       	pop	r0
     4ca:	0f 90       	pop	r0
     4cc:	0f 90       	pop	r0
     4ce:	0f 90       	pop	r0
     4d0:	07 c0       	rjmp	.+14     	; 0x4e0 <EVENT_USB_Host_DeviceEnumerationComplete+0x88>

		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	puts_P(PSTR("CDC Device Enumerated.\r\n"));
     4d2:	8d e1       	ldi	r24, 0x1D	; 29
     4d4:	91 e0       	ldi	r25, 0x01	; 1
     4d6:	7f d7       	rcall	.+3838   	; 0x13d6 <puts_P>
     4d8:	8b b1       	in	r24, 0x0b	; 11
     4da:	8f 70       	andi	r24, 0x0F	; 15
     4dc:	80 66       	ori	r24, 0x60	; 96
     4de:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
}
     4e0:	1f 91       	pop	r17
     4e2:	08 95       	ret

000004e4 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     4e4:	84 b7       	in	r24, 0x34	; 52
     4e6:	87 7f       	andi	r24, 0xF7	; 247
     4e8:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     4ea:	38 e1       	ldi	r19, 0x18	; 24
     4ec:	0f b6       	in	r0, 0x3f	; 63
     4ee:	f8 94       	cli
     4f0:	30 93 60 00 	sts	0x0060, r19
     4f4:	10 92 60 00 	sts	0x0060, r1
     4f8:	0f be       	out	0x3f, r0	; 63

	/* Disable clock division */
	clock_prescale_set(clock_div_1);
     4fa:	80 e0       	ldi	r24, 0x00	; 0
     4fc:	90 e0       	ldi	r25, 0x00	; 0
     4fe:	20 e8       	ldi	r18, 0x80	; 128
     500:	0f b6       	in	r0, 0x3f	; 63
     502:	f8 94       	cli
     504:	20 93 61 00 	sts	0x0061, r18
     508:	80 93 61 00 	sts	0x0061, r24
     50c:	0f be       	out	0x3f, r0	; 63
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     50e:	83 e3       	ldi	r24, 0x33	; 51
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	90 93 cd 00 	sts	0x00CD, r25
     516:	80 93 cc 00 	sts	0x00CC, r24

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     51a:	86 e0       	ldi	r24, 0x06	; 6
     51c:	80 93 ca 00 	sts	0x00CA, r24
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     520:	10 92 c8 00 	sts	0x00C8, r1
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     524:	30 93 c9 00 	sts	0x00C9, r19

				DDRD  |= (1 << 3);
     528:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     52a:	5a 9a       	sbi	0x0b, 2	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     52c:	8a b1       	in	r24, 0x0a	; 10
     52e:	80 6f       	ori	r24, 0xF0	; 240
     530:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     532:	8b b1       	in	r24, 0x0b	; 11
     534:	8f 70       	andi	r24, 0x0F	; 15
     536:	8b b9       	out	0x0b, r24	; 11

	/* Hardware Initialization */
	Serial_Init(9600, false);
	LEDs_Init();
	USB_Init();
     538:	c4 d3       	rcall	.+1928   	; 0xcc2 <USB_Init>
			static inline void Serial_CreateStream(FILE* Stream)
			{
				if (!(Stream))
				{
					Stream = &USARTSerialStream;
					stdin  = Stream;
     53a:	e0 e2       	ldi	r30, 0x20	; 32
     53c:	f1 e0       	ldi	r31, 0x01	; 1
     53e:	f0 93 2f 01 	sts	0x012F, r31
     542:	e0 93 2e 01 	sts	0x012E, r30
					stdout = Stream;
     546:	f0 93 31 01 	sts	0x0131, r31
     54a:	e0 93 30 01 	sts	0x0130, r30
				}
			
				*Stream = (FILE)FDEV_SETUP_STREAM(Serial_putchar, Serial_getchar, _FDEV_SETUP_RW);
     54e:	8e e0       	ldi	r24, 0x0E	; 14
     550:	df 01       	movw	r26, r30
     552:	1d 92       	st	X+, r1
     554:	8a 95       	dec	r24
     556:	e9 f7       	brne	.-6      	; 0x552 <SetupHardware+0x6e>
     558:	83 e0       	ldi	r24, 0x03	; 3
     55a:	80 93 23 01 	sts	0x0123, r24
     55e:	8f e7       	ldi	r24, 0x7F	; 127
     560:	99 e0       	ldi	r25, 0x09	; 9
     562:	90 93 29 01 	sts	0x0129, r25
     566:	80 93 28 01 	sts	0x0128, r24
     56a:	89 e8       	ldi	r24, 0x89	; 137
     56c:	99 e0       	ldi	r25, 0x09	; 9
     56e:	90 93 2b 01 	sts	0x012B, r25
     572:	80 93 2a 01 	sts	0x012A, r24

	/* Create a stdio stream for the serial port for stdin and stdout */
	Serial_CreateStream(NULL);
}
     576:	08 95       	ret

00000578 <main>:
/** Main program entry point. This routine configures the hardware required by the application, then
 *  enters a loop to run the application tasks in sequence.
 */
int main(void)
{
	SetupHardware();
     578:	b5 df       	rcall	.-150    	; 0x4e4 <SetupHardware>

	puts_P(PSTR(ESC_FG_CYAN "CDC Host Demo running.\r\n" ESC_FG_WHITE));
     57a:	89 e2       	ldi	r24, 0x29	; 41
     57c:	92 e0       	ldi	r25, 0x02	; 2
     57e:	2b d7       	rcall	.+3670   	; 0x13d6 <puts_P>
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     580:	8b b1       	in	r24, 0x0b	; 11
     582:	8f 70       	andi	r24, 0x0F	; 15
     584:	80 61       	ori	r24, 0x10	; 16
     586:	8b b9       	out	0x0b, r24	; 11

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
	sei();
     588:	78 94       	sei

	for (;;)
	{
		CDCHost_Task();
     58a:	7f de       	rcall	.-770    	; 0x28a <CDCHost_Task>

		USB_USBTask();
     58c:	a6 d6       	rcall	.+3404   	; 0x12da <USB_USBTask>
     58e:	fd cf       	rjmp	.-6      	; 0x58a <main+0x12>

00000590 <DComp_NextCDCControlInterface>:
 *  This comparator searches for the next Interface descriptor of the correct CDC control Class, Subclass and Protocol values.
 *
 *  \return A value from the DSEARCH_Return_ErrorCodes_t enum
 */
uint8_t DComp_NextCDCControlInterface(void* CurrentDescriptor)
{
     590:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
     592:	81 81       	ldd	r24, Z+1	; 0x01
     594:	84 30       	cpi	r24, 0x04	; 4
     596:	59 f4       	brne	.+22     	; 0x5ae <DComp_NextCDCControlInterface+0x1e>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		/* Check the CDC descriptor class, subclass and protocol, break out if correct control interface found */
		if ((Interface->Class    == CDC_CSCP_CDCClass)    &&
     598:	85 81       	ldd	r24, Z+5	; 0x05
     59a:	82 30       	cpi	r24, 0x02	; 2
     59c:	41 f4       	brne	.+16     	; 0x5ae <DComp_NextCDCControlInterface+0x1e>
     59e:	86 81       	ldd	r24, Z+6	; 0x06
     5a0:	82 30       	cpi	r24, 0x02	; 2
     5a2:	29 f4       	brne	.+10     	; 0x5ae <DComp_NextCDCControlInterface+0x1e>
     5a4:	87 81       	ldd	r24, Z+7	; 0x07
     5a6:	81 30       	cpi	r24, 0x01	; 1
     5a8:	11 f4       	brne	.+4      	; 0x5ae <DComp_NextCDCControlInterface+0x1e>
     5aa:	80 e0       	ldi	r24, 0x00	; 0
     5ac:	08 95       	ret
     5ae:	82 e0       	ldi	r24, 0x02	; 2
			return DESCRIPTOR_SEARCH_Found;
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
     5b0:	08 95       	ret

000005b2 <DComp_NextCDCDataInterface>:
 *  This comparator searches for the next Interface descriptor of the correct CDC data Class, Subclass and Protocol values.
 *
 *  \return A value from the DSEARCH_Return_ErrorCodes_t enum
 */
uint8_t DComp_NextCDCDataInterface(void* CurrentDescriptor)
{
     5b2:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
     5b4:	81 81       	ldd	r24, Z+1	; 0x01
     5b6:	84 30       	cpi	r24, 0x04	; 4
     5b8:	41 f4       	brne	.+16     	; 0x5ca <DComp_NextCDCDataInterface+0x18>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		/* Check the CDC descriptor class, subclass and protocol, break out if correct data interface found */
		if ((Interface->Class    == CDC_CSCP_CDCDataClass)   &&
     5ba:	85 81       	ldd	r24, Z+5	; 0x05
     5bc:	8a 30       	cpi	r24, 0x0A	; 10
     5be:	29 f4       	brne	.+10     	; 0x5ca <DComp_NextCDCDataInterface+0x18>
     5c0:	86 81       	ldd	r24, Z+6	; 0x06
     5c2:	88 23       	and	r24, r24
     5c4:	11 f4       	brne	.+4      	; 0x5ca <DComp_NextCDCDataInterface+0x18>
     5c6:	87 81       	ldd	r24, Z+7	; 0x07
     5c8:	81 11       	cpse	r24, r1
     5ca:	82 e0       	ldi	r24, 0x02	; 2
			return DESCRIPTOR_SEARCH_Found;
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
     5cc:	08 95       	ret

000005ce <DComp_NextCDCDataInterfaceEndpoint>:
 *  using a different comparator to determine if it is another CDC class interface).
 *
 *  \return A value from the DSEARCH_Return_ErrorCodes_t enum
 */
uint8_t DComp_NextCDCDataInterfaceEndpoint(void* CurrentDescriptor)
{
     5ce:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Endpoint)
     5d0:	81 81       	ldd	r24, Z+1	; 0x01
     5d2:	85 30       	cpi	r24, 0x05	; 5
     5d4:	49 f4       	brne	.+18     	; 0x5e8 <DComp_NextCDCDataInterfaceEndpoint+0x1a>
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		if (((Endpoint->Attributes & EP_TYPE_MASK) == EP_TYPE_BULK) || 
     5d6:	83 81       	ldd	r24, Z+3	; 0x03
     5d8:	90 e0       	ldi	r25, 0x00	; 0
     5da:	83 70       	andi	r24, 0x03	; 3
     5dc:	90 70       	andi	r25, 0x00	; 0
     5de:	02 97       	sbiw	r24, 0x02	; 2
     5e0:	02 97       	sbiw	r24, 0x02	; 2
     5e2:	30 f4       	brcc	.+12     	; 0x5f0 <DComp_NextCDCDataInterfaceEndpoint+0x22>
     5e4:	80 e0       	ldi	r24, 0x00	; 0
     5e6:	08 95       	ret
		    ((Endpoint->Attributes & EP_TYPE_MASK) == EP_TYPE_INTERRUPT))
		{
			return DESCRIPTOR_SEARCH_Found;
		}
	}
	else if (Header->Type == DTYPE_Interface)
     5e8:	84 30       	cpi	r24, 0x04	; 4
     5ea:	11 f4       	brne	.+4      	; 0x5f0 <DComp_NextCDCDataInterfaceEndpoint+0x22>
     5ec:	81 e0       	ldi	r24, 0x01	; 1
     5ee:	08 95       	ret
     5f0:	82 e0       	ldi	r24, 0x02	; 2
	{
		return DESCRIPTOR_SEARCH_Fail;
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
     5f2:	08 95       	ret

000005f4 <ProcessConfigurationDescriptor>:
 *  This routine searches for a CDC interface descriptor containing bulk data IN and OUT endpoints, and an interrupt event endpoint.
 *
 *  \return An error code from the \ref CDCHost_GetConfigDescriptorDataCodes_t enum.
 */
uint8_t ProcessConfigurationDescriptor(void)
{
     5f4:	6f 92       	push	r6
     5f6:	7f 92       	push	r7
     5f8:	8f 92       	push	r8
     5fa:	9f 92       	push	r9
     5fc:	af 92       	push	r10
     5fe:	bf 92       	push	r11
     600:	cf 92       	push	r12
     602:	df 92       	push	r13
     604:	ef 92       	push	r14
     606:	ff 92       	push	r15
     608:	0f 93       	push	r16
     60a:	1f 93       	push	r17
     60c:	df 93       	push	r29
     60e:	cf 93       	push	r28
     610:	cd b7       	in	r28, 0x3d	; 61
     612:	de b7       	in	r29, 0x3e	; 62
     614:	c4 50       	subi	r28, 0x04	; 4
     616:	d2 40       	sbci	r29, 0x02	; 2
     618:	0f b6       	in	r0, 0x3f	; 63
     61a:	f8 94       	cli
     61c:	de bf       	out	0x3e, r29	; 62
     61e:	0f be       	out	0x3f, r0	; 63
     620:	cd bf       	out	0x3d, r28	; 61
	uint8_t  ConfigDescriptorData[512];
	void*    CurrConfigLocation = ConfigDescriptorData;
     622:	ae 01       	movw	r20, r28
     624:	4b 5f       	subi	r20, 0xFB	; 251
     626:	5f 4f       	sbci	r21, 0xFF	; 255
     628:	5a 83       	std	Y+2, r21	; 0x02
     62a:	49 83       	std	Y+1, r20	; 0x01
	USB_Descriptor_Endpoint_t*  DataINEndpoint       = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint      = NULL;
	USB_Descriptor_Endpoint_t*  NotificationEndpoint = NULL;

	/* Retrieve the entire configuration descriptor into the allocated buffer */
	switch (USB_Host_GetDeviceConfigDescriptor(1, &CurrConfigBytesRem, ConfigDescriptorData, sizeof(ConfigDescriptorData)))
     62c:	8e 01       	movw	r16, r28
     62e:	0d 5f       	subi	r16, 0xFD	; 253
     630:	1f 4f       	sbci	r17, 0xFF	; 255
     632:	81 e0       	ldi	r24, 0x01	; 1
     634:	b8 01       	movw	r22, r16
     636:	20 e0       	ldi	r18, 0x00	; 0
     638:	32 e0       	ldi	r19, 0x02	; 2
     63a:	9f d4       	rcall	.+2366   	; 0xf7a <USB_Host_GetDeviceConfigDescriptor>
     63c:	85 30       	cpi	r24, 0x05	; 5
     63e:	29 f0       	breq	.+10     	; 0x64a <ProcessConfigurationDescriptor+0x56>
     640:	86 30       	cpi	r24, 0x06	; 6
     642:	91 f0       	breq	.+36     	; 0x668 <ProcessConfigurationDescriptor+0x74>
     644:	88 23       	and	r24, r24
     646:	19 f0       	breq	.+6      	; 0x64e <ProcessConfigurationDescriptor+0x5a>
     648:	11 c0       	rjmp	.+34     	; 0x66c <ProcessConfigurationDescriptor+0x78>
     64a:	82 e0       	ldi	r24, 0x02	; 2
     64c:	6b c0       	rjmp	.+214    	; 0x724 <ProcessConfigurationDescriptor+0x130>
     64e:	66 24       	eor	r6, r6
     650:	77 24       	eor	r7, r7
     652:	ee 24       	eor	r14, r14
     654:	ff 24       	eor	r15, r15
     656:	cc 24       	eor	r12, r12
     658:	dd 24       	eor	r13, r13
     65a:	aa 24       	eor	r10, r10
     65c:	bb 24       	eor	r11, r11
	}

	while (!(DataINEndpoint) || !(DataOUTEndpoint) || !(NotificationEndpoint))
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(CDCControlInterface) ||
     65e:	48 01       	movw	r8, r16
     660:	8e 01       	movw	r16, r28
     662:	0f 5f       	subi	r16, 0xFF	; 255
     664:	1f 4f       	sbci	r17, 0xFF	; 255
     666:	08 c0       	rjmp	.+16     	; 0x678 <ProcessConfigurationDescriptor+0x84>
	USB_Descriptor_Endpoint_t*  DataINEndpoint       = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint      = NULL;
	USB_Descriptor_Endpoint_t*  NotificationEndpoint = NULL;

	/* Retrieve the entire configuration descriptor into the allocated buffer */
	switch (USB_Host_GetDeviceConfigDescriptor(1, &CurrConfigBytesRem, ConfigDescriptorData, sizeof(ConfigDescriptorData)))
     668:	83 e0       	ldi	r24, 0x03	; 3
     66a:	5c c0       	rjmp	.+184    	; 0x724 <ProcessConfigurationDescriptor+0x130>
     66c:	81 e0       	ldi	r24, 0x01	; 1
     66e:	5a c0       	rjmp	.+180    	; 0x724 <ProcessConfigurationDescriptor+0x130>
		case HOST_GETCONFIG_InvalidData:
			return InvalidConfigDataReturned;
		case HOST_GETCONFIG_BuffOverflow:
			return DescriptorTooLarge;
		default:
			return ControlError;
     670:	cc 24       	eor	r12, r12
     672:	dd 24       	eor	r13, r13
     674:	ee 24       	eor	r14, r14
     676:	ff 24       	eor	r15, r15
	}

	while (!(DataINEndpoint) || !(DataOUTEndpoint) || !(NotificationEndpoint))
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(CDCControlInterface) ||
     678:	61 14       	cp	r6, r1
     67a:	71 04       	cpc	r7, r1
     67c:	39 f0       	breq	.+14     	; 0x68c <ProcessConfigurationDescriptor+0x98>
     67e:	c4 01       	movw	r24, r8
     680:	b8 01       	movw	r22, r16
     682:	47 ee       	ldi	r20, 0xE7	; 231
     684:	52 e0       	ldi	r21, 0x02	; 2
     686:	35 d4       	rcall	.+2154   	; 0xef2 <USB_GetNextDescriptorComp>
     688:	88 23       	and	r24, r24
     68a:	a9 f0       	breq	.+42     	; 0x6b6 <ProcessConfigurationDescriptor+0xc2>
		    USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
		                              DComp_NextCDCDataInterfaceEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			/* Check if we have already found the control interface's notification endpoint or not */
			if (NotificationEndpoint)
     68c:	a1 14       	cp	r10, r1
     68e:	b1 04       	cpc	r11, r1
     690:	41 f0       	breq	.+16     	; 0x6a2 <ProcessConfigurationDescriptor+0xae>
			{
				/* Get the next CDC data interface from the configuration descriptor */
				if (USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     692:	c4 01       	movw	r24, r8
     694:	b8 01       	movw	r22, r16
     696:	49 ed       	ldi	r20, 0xD9	; 217
     698:	52 e0       	ldi	r21, 0x02	; 2
     69a:	2b d4       	rcall	.+2134   	; 0xef2 <USB_GetNextDescriptorComp>
     69c:	88 23       	and	r24, r24
     69e:	41 f3       	breq	.-48     	; 0x670 <ProcessConfigurationDescriptor+0x7c>
     6a0:	40 c0       	rjmp	.+128    	; 0x722 <ProcessConfigurationDescriptor+0x12e>
				DataOUTEndpoint      = NULL;
			}
			else
			{
				/* Get the next CDC control interface from the configuration descriptor */
				if (USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     6a2:	c4 01       	movw	r24, r8
     6a4:	b8 01       	movw	r22, r16
     6a6:	48 ec       	ldi	r20, 0xC8	; 200
     6a8:	52 e0       	ldi	r21, 0x02	; 2
     6aa:	23 d4       	rcall	.+2118   	; 0xef2 <USB_GetNextDescriptorComp>
     6ac:	88 23       	and	r24, r24
     6ae:	c9 f5       	brne	.+114    	; 0x722 <ProcessConfigurationDescriptor+0x12e>
					/* Descriptor not found, error out */
					return NoCompatibleInterfaceFound;
				}

				/* Save the interface in case we need to refer back to it later */
				CDCControlInterface = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Interface_t);
     6b0:	69 80       	ldd	r6, Y+1	; 0x01
     6b2:	7a 80       	ldd	r7, Y+2	; 0x02
     6b4:	0e c0       	rjmp	.+28     	; 0x6d2 <ProcessConfigurationDescriptor+0xde>
			/* Skip the remainder of the loop as we have not found an endpoint yet */
			continue;
		}

		/* Retrieve the endpoint address from the endpoint descriptor */
		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Endpoint_t);
     6b6:	e9 81       	ldd	r30, Y+1	; 0x01
     6b8:	fa 81       	ldd	r31, Y+2	; 0x02

		/* If the endpoint is a IN type endpoint */
		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
     6ba:	82 81       	ldd	r24, Z+2	; 0x02
     6bc:	87 fd       	sbrc	r24, 7
     6be:	02 c0       	rjmp	.+4      	; 0x6c4 <ProcessConfigurationDescriptor+0xd0>
     6c0:	6f 01       	movw	r12, r30
     6c2:	07 c0       	rjmp	.+14     	; 0x6d2 <ProcessConfigurationDescriptor+0xde>
		{
			/* Check if the found endpoint is a interrupt or bulk type descriptor */
			if ((EndpointData->Attributes & EP_TYPE_MASK) == EP_TYPE_INTERRUPT)
     6c4:	83 81       	ldd	r24, Z+3	; 0x03
     6c6:	83 70       	andi	r24, 0x03	; 3
     6c8:	83 30       	cpi	r24, 0x03	; 3
     6ca:	11 f0       	breq	.+4      	; 0x6d0 <ProcessConfigurationDescriptor+0xdc>
     6cc:	7f 01       	movw	r14, r30
     6ce:	01 c0       	rjmp	.+2      	; 0x6d2 <ProcessConfigurationDescriptor+0xde>
     6d0:	5f 01       	movw	r10, r30
			return DescriptorTooLarge;
		default:
			return ControlError;
	}

	while (!(DataINEndpoint) || !(DataOUTEndpoint) || !(NotificationEndpoint))
     6d2:	e1 14       	cp	r14, r1
     6d4:	f1 04       	cpc	r15, r1
     6d6:	81 f2       	breq	.-96     	; 0x678 <ProcessConfigurationDescriptor+0x84>
     6d8:	c1 14       	cp	r12, r1
     6da:	d1 04       	cpc	r13, r1
     6dc:	69 f2       	breq	.-102    	; 0x678 <ProcessConfigurationDescriptor+0x84>
     6de:	a1 14       	cp	r10, r1
     6e0:	b1 04       	cpc	r11, r1
     6e2:	51 f2       	breq	.-108    	; 0x678 <ProcessConfigurationDescriptor+0x84>
			DataOUTEndpoint = EndpointData;
		}
	}

	/* Configure the CDC data IN pipe */
	Pipe_ConfigurePipe(CDC_DATA_IN_PIPE, EP_TYPE_BULK, PIPE_TOKEN_IN,
     6e4:	f7 01       	movw	r30, r14
     6e6:	04 81       	ldd	r16, Z+4	; 0x04
     6e8:	15 81       	ldd	r17, Z+5	; 0x05
     6ea:	81 e0       	ldi	r24, 0x01	; 1
     6ec:	62 e0       	ldi	r22, 0x02	; 2
     6ee:	40 e1       	ldi	r20, 0x10	; 16
     6f0:	22 81       	ldd	r18, Z+2	; 0x02
     6f2:	ee 24       	eor	r14, r14
     6f4:	f5 d1       	rcall	.+1002   	; 0xae0 <Pipe_ConfigurePipe>
	                   DataINEndpoint->EndpointAddress, DataINEndpoint->EndpointSize, PIPE_BANK_SINGLE);

	/* Configure the CDC data OUT pipe */
	Pipe_ConfigurePipe(CDC_DATA_OUT_PIPE, EP_TYPE_BULK, PIPE_TOKEN_OUT,
     6f6:	f6 01       	movw	r30, r12
     6f8:	04 81       	ldd	r16, Z+4	; 0x04
     6fa:	15 81       	ldd	r17, Z+5	; 0x05
     6fc:	82 e0       	ldi	r24, 0x02	; 2
     6fe:	62 e0       	ldi	r22, 0x02	; 2
     700:	40 e2       	ldi	r20, 0x20	; 32
     702:	22 81       	ldd	r18, Z+2	; 0x02
     704:	ed d1       	rcall	.+986    	; 0xae0 <Pipe_ConfigurePipe>
					   DataOUTEndpoint->EndpointAddress, DataOUTEndpoint->EndpointSize, PIPE_BANK_SINGLE);

	/* Configure the CDC notification pipe */
	Pipe_ConfigurePipe(CDC_NOTIFICATION_PIPE, EP_TYPE_INTERRUPT, PIPE_TOKEN_IN,
     706:	f5 01       	movw	r30, r10
     708:	04 81       	ldd	r16, Z+4	; 0x04
     70a:	15 81       	ldd	r17, Z+5	; 0x05
     70c:	83 e0       	ldi	r24, 0x03	; 3
     70e:	63 e0       	ldi	r22, 0x03	; 3
     710:	40 e1       	ldi	r20, 0x10	; 16
     712:	22 81       	ldd	r18, Z+2	; 0x02
     714:	e5 d1       	rcall	.+970    	; 0xae0 <Pipe_ConfigurePipe>
					   NotificationEndpoint->EndpointAddress, NotificationEndpoint->EndpointSize, PIPE_BANK_SINGLE);
	Pipe_SetInterruptPeriod(NotificationEndpoint->PollingIntervalMS);
     716:	f5 01       	movw	r30, r10
     718:	86 81       	ldd	r24, Z+6	; 0x06
			 *  \param[in] Milliseconds  Number of milliseconds between each pipe poll.
			 */
			static inline void Pipe_SetInterruptPeriod(const uint8_t Milliseconds) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInterruptPeriod(const uint8_t Milliseconds)
			{
				UPCFG2X = Milliseconds;
     71a:	80 93 ad 00 	sts	0x00AD, r24
     71e:	80 e0       	ldi	r24, 0x00	; 0
     720:	01 c0       	rjmp	.+2      	; 0x724 <ProcessConfigurationDescriptor+0x130>

	/* Valid data found, return success */
	return SuccessfulConfigRead;
     722:	84 e0       	ldi	r24, 0x04	; 4
}
     724:	cc 5f       	subi	r28, 0xFC	; 252
     726:	dd 4f       	sbci	r29, 0xFD	; 253
     728:	0f b6       	in	r0, 0x3f	; 63
     72a:	f8 94       	cli
     72c:	de bf       	out	0x3e, r29	; 62
     72e:	0f be       	out	0x3f, r0	; 63
     730:	cd bf       	out	0x3d, r28	; 61
     732:	cf 91       	pop	r28
     734:	df 91       	pop	r29
     736:	1f 91       	pop	r17
     738:	0f 91       	pop	r16
     73a:	ff 90       	pop	r15
     73c:	ef 90       	pop	r14
     73e:	df 90       	pop	r13
     740:	cf 90       	pop	r12
     742:	bf 90       	pop	r11
     744:	af 90       	pop	r10
     746:	9f 90       	pop	r9
     748:	8f 90       	pop	r8
     74a:	7f 90       	pop	r7
     74c:	6f 90       	pop	r6
     74e:	08 95       	ret

00000750 <USB_Host_WaitMS>:
		USB_ResetInterface();
	}
}

uint8_t USB_Host_WaitMS(uint8_t MS)
{
     750:	98 2f       	mov	r25, r24
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     752:	20 91 9e 00 	lds	r18, 0x009E
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     756:	30 91 a0 00 	lds	r19, 0x00A0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     75a:	80 91 a0 00 	lds	r24, 0x00A0
     75e:	8f 7d       	andi	r24, 0xDF	; 223
     760:	80 93 a0 00 	sts	0x00A0, r24
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     764:	80 91 9f 00 	lds	r24, 0x009F
     768:	8f 7d       	andi	r24, 0xDF	; 223
     76a:	80 93 9f 00 	sts	0x009F, r24
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     76e:	80 91 9e 00 	lds	r24, 0x009E
     772:	81 60       	ori	r24, 0x01	; 1
     774:	80 93 9e 00 	sts	0x009E, r24
     778:	28 c0       	rjmp	.+80     	; 0x7ca <USB_Host_WaitMS+0x7a>
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     77a:	80 91 9f 00 	lds	r24, 0x009F

	USB_Host_ResumeBus();

	while (MS)
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     77e:	85 ff       	sbrs	r24, 5
     780:	06 c0       	rjmp	.+12     	; 0x78e <USB_Host_WaitMS+0x3e>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     782:	80 91 9f 00 	lds	r24, 0x009F
     786:	8f 7d       	andi	r24, 0xDF	; 223
     788:	80 93 9f 00 	sts	0x009F, r24
		{
			USB_INT_Clear(USB_INT_HSOFI);
			MS--;
     78c:	91 50       	subi	r25, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
     78e:	80 91 1f 01 	lds	r24, 0x011F
     792:	81 30       	cpi	r24, 0x01	; 1
     794:	11 f4       	brne	.+4      	; 0x79a <USB_Host_WaitMS+0x4a>
     796:	91 e0       	ldi	r25, 0x01	; 1
     798:	1a c0       	rjmp	.+52     	; 0x7ce <USB_Host_WaitMS+0x7e>
			 *  \return Boolean \c true if an error has occurred on the selected pipe, \c false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
     79a:	80 91 a6 00 	lds	r24, 0x00A6
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError() == true)
     79e:	84 ff       	sbrs	r24, 4
     7a0:	09 c0       	rjmp	.+18     	; 0x7b4 <USB_Host_WaitMS+0x64>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     7a2:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
     7a6:	80 91 a6 00 	lds	r24, 0x00A6
     7aa:	8f 7e       	andi	r24, 0xEF	; 239
     7ac:	80 93 a6 00 	sts	0x00A6, r24
     7b0:	92 e0       	ldi	r25, 0x02	; 2
     7b2:	0d c0       	rjmp	.+26     	; 0x7ce <USB_Host_WaitMS+0x7e>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     7b4:	80 91 a6 00 	lds	r24, 0x00A6
			ErrorCode = HOST_WAITERROR_PipeError;

			break;
		}

		if (Pipe_IsStalled() == true)
     7b8:	81 ff       	sbrs	r24, 1
     7ba:	07 c0       	rjmp	.+14     	; 0x7ca <USB_Host_WaitMS+0x7a>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
     7bc:	80 91 a6 00 	lds	r24, 0x00A6
     7c0:	8d 7f       	andi	r24, 0xFD	; 253
     7c2:	80 93 a6 00 	sts	0x00A6, r24
     7c6:	93 e0       	ldi	r25, 0x03	; 3
     7c8:	02 c0       	rjmp	.+4      	; 0x7ce <USB_Host_WaitMS+0x7e>
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     7ca:	99 23       	and	r25, r25
     7cc:	b1 f6       	brne	.-84     	; 0x77a <USB_Host_WaitMS+0x2a>

			break;
		}
	}

	if (BusSuspended)
     7ce:	20 fd       	sbrc	r18, 0
     7d0:	05 c0       	rjmp	.+10     	; 0x7dc <USB_Host_WaitMS+0x8c>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     7d2:	80 91 9e 00 	lds	r24, 0x009E
     7d6:	8e 7f       	andi	r24, 0xFE	; 254
     7d8:	80 93 9e 00 	sts	0x009E, r24
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
     7dc:	35 ff       	sbrs	r19, 5
     7de:	05 c0       	rjmp	.+10     	; 0x7ea <USB_Host_WaitMS+0x9a>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     7e0:	80 91 a0 00 	lds	r24, 0x00A0
     7e4:	80 62       	ori	r24, 0x20	; 32
     7e6:	80 93 a0 00 	sts	0x00A0, r24
	  USB_INT_Enable(USB_INT_HSOFI);

	return ErrorCode;
}
     7ea:	89 2f       	mov	r24, r25
     7ec:	08 95       	ret

000007ee <USB_Host_ResetDevice>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     7ee:	60 91 9e 00 	lds	r22, 0x009E
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     7f2:	80 91 a0 00 	lds	r24, 0x00A0
     7f6:	8d 7f       	andi	r24, 0xFD	; 253
     7f8:	80 93 a0 00 	sts	0x00A0, r24
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
     7fc:	80 91 9e 00 	lds	r24, 0x009E
     800:	82 60       	ori	r24, 0x02	; 2
     802:	80 93 9e 00 	sts	0x009E, r24
			 *  \return Boolean \c true if no bus reset is currently being sent, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
     806:	80 91 9e 00 	lds	r24, 0x009E
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
     80a:	81 fd       	sbrc	r24, 1
     80c:	fc cf       	rjmp	.-8      	; 0x806 <USB_Host_ResetDevice+0x18>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     80e:	80 91 9e 00 	lds	r24, 0x009E
     812:	81 60       	ori	r24, 0x01	; 1
     814:	80 93 9e 00 	sts	0x009E, r24
	USB_Host_ResumeBus();
	
	USB_Host_ConfigurationNumber = 0;
     818:	10 92 15 01 	sts	0x0115, r1
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     81c:	30 91 a0 00 	lds	r19, 0x00A0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     820:	80 91 a0 00 	lds	r24, 0x00A0
     824:	8f 7d       	andi	r24, 0xDF	; 223
     826:	80 93 a0 00 	sts	0x00A0, r24
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     82a:	80 91 9f 00 	lds	r24, 0x009F
     82e:	8f 7d       	andi	r24, 0xDF	; 223
     830:	80 93 9f 00 	sts	0x009F, r24
     834:	2a e0       	ldi	r18, 0x0A	; 10
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     836:	40 ed       	ldi	r20, 0xD0	; 208
     838:	57 e0       	ldi	r21, 0x07	; 7
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     83a:	80 91 9f 00 	lds	r24, 0x009F
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     83e:	85 ff       	sbrs	r24, 5
     840:	0b c0       	rjmp	.+22     	; 0x858 <USB_Host_ResetDevice+0x6a>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     842:	80 91 9f 00 	lds	r24, 0x009F
     846:	8f 7d       	andi	r24, 0xDF	; 223
     848:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     84c:	80 91 9f 00 	lds	r24, 0x009F
     850:	8d 7f       	andi	r24, 0xFD	; 253
     852:	80 93 9f 00 	sts	0x009F, r24
     856:	05 c0       	rjmp	.+10     	; 0x862 <USB_Host_ResetDevice+0x74>
     858:	ca 01       	movw	r24, r20
     85a:	01 97       	sbiw	r24, 0x01	; 1
     85c:	f1 f7       	brne	.-4      	; 0x85a <USB_Host_ResetDevice+0x6c>
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
     85e:	21 50       	subi	r18, 0x01	; 1
     860:	61 f7       	brne	.-40     	; 0x83a <USB_Host_ResetDevice+0x4c>
		}

		Delay_MS(1);
	}

	if (HSOFIEnabled)
     862:	35 ff       	sbrs	r19, 5
     864:	05 c0       	rjmp	.+10     	; 0x870 <USB_Host_ResetDevice+0x82>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     866:	80 91 a0 00 	lds	r24, 0x00A0
     86a:	80 62       	ori	r24, 0x20	; 32
     86c:	80 93 a0 00 	sts	0x00A0, r24
	  USB_INT_Enable(USB_INT_HSOFI);

	if (BusSuspended)
     870:	60 fd       	sbrc	r22, 0
     872:	05 c0       	rjmp	.+10     	; 0x87e <USB_Host_ResetDevice+0x90>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     874:	80 91 9e 00 	lds	r24, 0x009E
     878:	8e 7f       	andi	r24, 0xFE	; 254
     87a:	80 93 9e 00 	sts	0x009E, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     87e:	80 91 a0 00 	lds	r24, 0x00A0
     882:	82 60       	ori	r24, 0x02	; 2
     884:	80 93 a0 00 	sts	0x00A0, r24
	  USB_Host_SuspendBus();

	USB_INT_Enable(USB_INT_DDISCI);
}
     888:	08 95       	ret

0000088a <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "../Host.h"

void USB_Host_ProcessNextHostState(void)
{
     88a:	ef 92       	push	r14
     88c:	0f 93       	push	r16
     88e:	1f 93       	push	r17
     890:	df 93       	push	r29
     892:	cf 93       	push	r28
     894:	cd b7       	in	r28, 0x3d	; 61
     896:	de b7       	in	r29, 0x3e	; 62
     898:	28 97       	sbiw	r28, 0x08	; 8
     89a:	0f b6       	in	r0, 0x3f	; 63
     89c:	f8 94       	cli
     89e:	de bf       	out	0x3e, r29	; 62
     8a0:	0f be       	out	0x3f, r0	; 63
     8a2:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
     8a4:	80 91 1f 01 	lds	r24, 0x011F
     8a8:	85 30       	cpi	r24, 0x05	; 5
     8aa:	09 f4       	brne	.+2      	; 0x8ae <USB_Host_ProcessNextHostState+0x24>
     8ac:	94 c0       	rjmp	.+296    	; 0x9d6 <USB_Host_ProcessNextHostState+0x14c>
     8ae:	86 30       	cpi	r24, 0x06	; 6
     8b0:	68 f4       	brcc	.+26     	; 0x8cc <USB_Host_ProcessNextHostState+0x42>
     8b2:	82 30       	cpi	r24, 0x02	; 2
     8b4:	b9 f1       	breq	.+110    	; 0x924 <USB_Host_ProcessNextHostState+0x9a>
     8b6:	83 30       	cpi	r24, 0x03	; 3
     8b8:	18 f4       	brcc	.+6      	; 0x8c0 <USB_Host_ProcessNextHostState+0x36>
     8ba:	88 23       	and	r24, r24
     8bc:	a1 f0       	breq	.+40     	; 0x8e6 <USB_Host_ProcessNextHostState+0x5c>
     8be:	04 c1       	rjmp	.+520    	; 0xac8 <USB_Host_ProcessNextHostState+0x23e>
     8c0:	83 30       	cpi	r24, 0x03	; 3
     8c2:	d1 f1       	breq	.+116    	; 0x938 <USB_Host_ProcessNextHostState+0xae>
     8c4:	84 30       	cpi	r24, 0x04	; 4
     8c6:	09 f0       	breq	.+2      	; 0x8ca <USB_Host_ProcessNextHostState+0x40>
     8c8:	ff c0       	rjmp	.+510    	; 0xac8 <USB_Host_ProcessNextHostState+0x23e>
     8ca:	5d c0       	rjmp	.+186    	; 0x986 <USB_Host_ProcessNextHostState+0xfc>
     8cc:	87 30       	cpi	r24, 0x07	; 7
     8ce:	09 f4       	brne	.+2      	; 0x8d2 <USB_Host_ProcessNextHostState+0x48>
     8d0:	9b c0       	rjmp	.+310    	; 0xa08 <USB_Host_ProcessNextHostState+0x17e>
     8d2:	87 30       	cpi	r24, 0x07	; 7
     8d4:	08 f4       	brcc	.+2      	; 0x8d8 <USB_Host_ProcessNextHostState+0x4e>
     8d6:	8a c0       	rjmp	.+276    	; 0x9ec <USB_Host_ProcessNextHostState+0x162>
     8d8:	88 30       	cpi	r24, 0x08	; 8
     8da:	09 f4       	brne	.+2      	; 0x8de <USB_Host_ProcessNextHostState+0x54>
     8dc:	b3 c0       	rjmp	.+358    	; 0xa44 <USB_Host_ProcessNextHostState+0x1ba>
     8de:	89 30       	cpi	r24, 0x09	; 9
     8e0:	09 f0       	breq	.+2      	; 0x8e4 <USB_Host_ProcessNextHostState+0x5a>
     8e2:	f2 c0       	rjmp	.+484    	; 0xac8 <USB_Host_ProcessNextHostState+0x23e>
     8e4:	d7 c0       	rjmp	.+430    	; 0xa94 <USB_Host_ProcessNextHostState+0x20a>
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
     8e6:	00 91 13 01 	lds	r16, 0x0113
     8ea:	10 91 14 01 	lds	r17, 0x0114
     8ee:	01 15       	cp	r16, r1
     8f0:	11 05       	cpc	r17, r1
     8f2:	09 f4       	brne	.+2      	; 0x8f6 <USB_Host_ProcessNextHostState+0x6c>
     8f4:	e9 c0       	rjmp	.+466    	; 0xac8 <USB_Host_ProcessNextHostState+0x23e>
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     8f6:	81 e0       	ldi	r24, 0x01	; 1
     8f8:	2b df       	rcall	.-426    	; 0x750 <USB_Host_WaitMS>
     8fa:	68 2f       	mov	r22, r24
     8fc:	88 23       	and	r24, r24
     8fe:	31 f0       	breq	.+12     	; 0x90c <USB_Host_ProcessNextHostState+0x82>
				{
					USB_HostState = PostWaitState;
     900:	80 91 12 01 	lds	r24, 0x0112
     904:	80 93 1f 01 	sts	0x011F, r24
     908:	91 e0       	ldi	r25, 0x01	; 1
     90a:	da c0       	rjmp	.+436    	; 0xac0 <USB_Host_ProcessNextHostState+0x236>
					ErrorCode     = HOST_ENUMERROR_WaitStage;
					break;
				}

				if (!(--WaitMSRemaining))
     90c:	c8 01       	movw	r24, r16
     90e:	01 97       	sbiw	r24, 0x01	; 1
     910:	90 93 14 01 	sts	0x0114, r25
     914:	80 93 13 01 	sts	0x0113, r24
     918:	89 2b       	or	r24, r25
     91a:	09 f0       	breq	.+2      	; 0x91e <USB_Host_ProcessNextHostState+0x94>
     91c:	d5 c0       	rjmp	.+426    	; 0xac8 <USB_Host_ProcessNextHostState+0x23e>
				  USB_HostState = PostWaitState;
     91e:	80 91 12 01 	lds	r24, 0x0112
     922:	07 c0       	rjmp	.+14     	; 0x932 <USB_Host_ProcessNextHostState+0xa8>
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
     924:	88 ee       	ldi	r24, 0xE8	; 232
     926:	93 e0       	ldi	r25, 0x03	; 3
     928:	90 93 14 01 	sts	0x0114, r25
     92c:	80 93 13 01 	sts	0x0113, r24

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
     930:	83 e0       	ldi	r24, 0x03	; 3
     932:	80 93 1f 01 	sts	0x011F, r24
     936:	c8 c0       	rjmp	.+400    	; 0xac8 <USB_Host_ProcessNextHostState+0x23e>
			break;
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
     938:	80 91 13 01 	lds	r24, 0x0113
     93c:	90 91 14 01 	lds	r25, 0x0114
     940:	01 97       	sbiw	r24, 0x01	; 1
     942:	90 93 14 01 	sts	0x0114, r25
     946:	80 93 13 01 	sts	0x0113, r24
     94a:	01 96       	adiw	r24, 0x01	; 1
     94c:	29 f0       	breq	.+10     	; 0x958 <USB_Host_ProcessNextHostState+0xce>
     94e:	80 ed       	ldi	r24, 0xD0	; 208
     950:	97 e0       	ldi	r25, 0x07	; 7
     952:	01 97       	sbiw	r24, 0x01	; 1
     954:	f1 f7       	brne	.-4      	; 0x952 <USB_Host_ProcessNextHostState+0xc8>
     956:	b8 c0       	rjmp	.+368    	; 0xac8 <USB_Host_ProcessNextHostState+0x23e>
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
     958:	77 98       	cbi	0x0e, 7	; 14

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     95a:	80 91 d8 00 	lds	r24, 0x00D8
     95e:	80 61       	ori	r24, 0x10	; 16
     960:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
     964:	80 91 dd 00 	lds	r24, 0x00DD
     968:	8b 7f       	andi	r24, 0xFB	; 251
     96a:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON |=  (1 << UVCONE);
     96e:	80 91 d7 00 	lds	r24, 0x00D7
     972:	80 61       	ori	r24, 0x10	; 16
     974:	80 93 d7 00 	sts	0x00D7, r24
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
     978:	80 91 dd 00 	lds	r24, 0x00DD
     97c:	82 60       	ori	r24, 0x02	; 2
     97e:	80 93 dd 00 	sts	0x00DD, r24

				USB_OTGPAD_On();
				USB_Host_VBUS_Auto_Enable();
				USB_Host_VBUS_Auto_On();

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
     982:	84 e0       	ldi	r24, 0x04	; 4
     984:	d6 cf       	rjmp	.-84     	; 0x932 <USB_Host_ProcessNextHostState+0xa8>
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
     986:	80 91 9f 00 	lds	r24, 0x009F
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
     98a:	80 ff       	sbrs	r24, 0
     98c:	9d c0       	rjmp	.+314    	; 0xac8 <USB_Host_ProcessNextHostState+0x23e>
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     98e:	80 91 9f 00 	lds	r24, 0x009F
     992:	8e 7f       	andi	r24, 0xFE	; 254
     994:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     998:	80 91 9f 00 	lds	r24, 0x009F
     99c:	8d 7f       	andi	r24, 0xFD	; 253
     99e:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     9a2:	80 91 df 00 	lds	r24, 0x00DF
     9a6:	8d 7f       	andi	r24, 0xFD	; 253
     9a8:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
     9ac:	80 91 de 00 	lds	r24, 0x00DE
     9b0:	82 60       	ori	r24, 0x02	; 2
     9b2:	80 93 de 00 	sts	0x00DE, r24
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     9b6:	80 91 9e 00 	lds	r24, 0x009E
     9ba:	81 60       	ori	r24, 0x01	; 1
     9bc:	80 93 9e 00 	sts	0x009E, r24

				USB_INT_Clear(USB_INT_VBERRI);
				USB_INT_Enable(USB_INT_VBERRI);

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
     9c0:	ed d0       	rcall	.+474    	; 0xb9c <Pipe_ClearPipes>

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
     9c2:	10 92 1f 01 	sts	0x011F, r1
     9c6:	84 e6       	ldi	r24, 0x64	; 100
     9c8:	90 e0       	ldi	r25, 0x00	; 0
     9ca:	90 93 14 01 	sts	0x0114, r25
     9ce:	80 93 13 01 	sts	0x0113, r24
     9d2:	85 e0       	ldi	r24, 0x05	; 5
     9d4:	5c c0       	rjmp	.+184    	; 0xa8e <USB_Host_ProcessNextHostState+0x204>
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
     9d6:	0b df       	rcall	.-490    	; 0x7ee <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
     9d8:	10 92 1f 01 	sts	0x011F, r1
     9dc:	88 ec       	ldi	r24, 0xC8	; 200
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	90 93 14 01 	sts	0x0114, r25
     9e4:	80 93 13 01 	sts	0x0113, r24
     9e8:	86 e0       	ldi	r24, 0x06	; 6
     9ea:	51 c0       	rjmp	.+162    	; 0xa8e <USB_Host_ProcessNextHostState+0x204>
			break;
		case HOST_STATE_Powered_ConfigPipe:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
     9ec:	80 e0       	ldi	r24, 0x00	; 0
     9ee:	60 e0       	ldi	r22, 0x00	; 0
     9f0:	40 e0       	ldi	r20, 0x00	; 0
     9f2:	20 e0       	ldi	r18, 0x00	; 0
     9f4:	00 e4       	ldi	r16, 0x40	; 64
     9f6:	10 e0       	ldi	r17, 0x00	; 0
     9f8:	ee 24       	eor	r14, r14
     9fa:	72 d0       	rcall	.+228    	; 0xae0 <Pipe_ConfigurePipe>
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     9fc:	80 91 ac 00 	lds	r24, 0x00AC
							   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
							   PIPE_CONTROLPIPE_DEFAULT_SIZE, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
     a00:	87 ff       	sbrs	r24, 7
     a02:	5c c0       	rjmp	.+184    	; 0xabc <USB_Host_ProcessNextHostState+0x232>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
     a04:	87 e0       	ldi	r24, 0x07	; 7
     a06:	95 cf       	rjmp	.-214    	; 0x932 <USB_Host_ProcessNextHostState+0xa8>
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
     a08:	a7 e1       	ldi	r26, 0x17	; 23
     a0a:	b1 e0       	ldi	r27, 0x01	; 1
     a0c:	e8 e0       	ldi	r30, 0x08	; 8
     a0e:	f1 e0       	ldi	r31, 0x01	; 1
     a10:	88 e0       	ldi	r24, 0x08	; 8
     a12:	01 90       	ld	r0, Z+
     a14:	0d 92       	st	X+, r0
     a16:	81 50       	subi	r24, 0x01	; 1
     a18:	e1 f7       	brne	.-8      	; 0xa12 <USB_Host_ProcessNextHostState+0x188>
					.wLength       = 8,
				};

			uint8_t DataBuffer[8];

			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
     a1a:	ce 01       	movw	r24, r28
     a1c:	01 96       	adiw	r24, 0x01	; 1
     a1e:	31 d3       	rcall	.+1634   	; 0x1082 <USB_Host_SendControlRequest>
     a20:	68 2f       	mov	r22, r24
     a22:	88 23       	and	r24, r24
     a24:	09 f0       	breq	.+2      	; 0xa28 <USB_Host_ProcessNextHostState+0x19e>
     a26:	48 c0       	rjmp	.+144    	; 0xab8 <USB_Host_ProcessNextHostState+0x22e>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_Host_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
     a28:	88 85       	ldd	r24, Y+8	; 0x08
     a2a:	80 93 10 01 	sts	0x0110, r24

			USB_Host_ResetDevice();
     a2e:	df de       	rcall	.-578    	; 0x7ee <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
     a30:	10 92 1f 01 	sts	0x011F, r1
     a34:	88 ec       	ldi	r24, 0xC8	; 200
     a36:	90 e0       	ldi	r25, 0x00	; 0
     a38:	90 93 14 01 	sts	0x0114, r25
     a3c:	80 93 13 01 	sts	0x0113, r24
     a40:	88 e0       	ldi	r24, 0x08	; 8
     a42:	25 c0       	rjmp	.+74     	; 0xa8e <USB_Host_ProcessNextHostState+0x204>
			break;
		case HOST_STATE_Default_PostReset:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
     a44:	00 91 10 01 	lds	r16, 0x0110
     a48:	80 e0       	ldi	r24, 0x00	; 0
     a4a:	60 e0       	ldi	r22, 0x00	; 0
     a4c:	40 e0       	ldi	r20, 0x00	; 0
     a4e:	20 e0       	ldi	r18, 0x00	; 0
     a50:	10 e0       	ldi	r17, 0x00	; 0
     a52:	ee 24       	eor	r14, r14
     a54:	45 d0       	rcall	.+138    	; 0xae0 <Pipe_ConfigurePipe>
     a56:	80 91 ac 00 	lds	r24, 0x00AC
			                   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
			                   USB_Host_ControlPipeSize, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
     a5a:	87 ff       	sbrs	r24, 7
     a5c:	2f c0       	rjmp	.+94     	; 0xabc <USB_Host_ProcessNextHostState+0x232>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
     a5e:	a7 e1       	ldi	r26, 0x17	; 23
     a60:	b1 e0       	ldi	r27, 0x01	; 1
     a62:	e0 e0       	ldi	r30, 0x00	; 0
     a64:	f1 e0       	ldi	r31, 0x01	; 1
     a66:	88 e0       	ldi	r24, 0x08	; 8
     a68:	01 90       	ld	r0, Z+
     a6a:	0d 92       	st	X+, r0
     a6c:	81 50       	subi	r24, 0x01	; 1
     a6e:	e1 f7       	brne	.-8      	; 0xa68 <USB_Host_ProcessNextHostState+0x1de>
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
     a70:	80 e0       	ldi	r24, 0x00	; 0
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	06 d3       	rcall	.+1548   	; 0x1082 <USB_Host_SendControlRequest>
     a76:	68 2f       	mov	r22, r24
     a78:	88 23       	and	r24, r24
     a7a:	f1 f4       	brne	.+60     	; 0xab8 <USB_Host_ProcessNextHostState+0x22e>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
     a7c:	10 92 1f 01 	sts	0x011F, r1
     a80:	84 e6       	ldi	r24, 0x64	; 100
     a82:	90 e0       	ldi	r25, 0x00	; 0
     a84:	90 93 14 01 	sts	0x0114, r25
     a88:	80 93 13 01 	sts	0x0113, r24
     a8c:	89 e0       	ldi	r24, 0x09	; 9
     a8e:	80 93 12 01 	sts	0x0112, r24
     a92:	1a c0       	rjmp	.+52     	; 0xac8 <USB_Host_ProcessNextHostState+0x23e>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
     a94:	81 e0       	ldi	r24, 0x01	; 1
     a96:	80 93 a1 00 	sts	0x00A1, r24
			break;
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			USB_HostState = HOST_STATE_Addressed;
     a9a:	8a e0       	ldi	r24, 0x0A	; 10
     a9c:	80 93 1f 01 	sts	0x011F, r24

			EVENT_USB_Host_DeviceEnumerationComplete();
     aa0:	db dc       	rcall	.-1610   	; 0x458 <EVENT_USB_Host_DeviceEnumerationComplete>
     aa2:	12 c0       	rjmp	.+36     	; 0xac8 <USB_Host_ProcessNextHostState+0x23e>
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
     aa4:	89 2f       	mov	r24, r25
     aa6:	81 dc       	rcall	.-1790   	; 0x3aa <EVENT_USB_Host_DeviceEnumerationFailed>
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     aa8:	80 91 dd 00 	lds	r24, 0x00DD
     aac:	81 60       	ori	r24, 0x01	; 1
     aae:	80 93 dd 00 	sts	0x00DD, r24

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
     ab2:	c2 dc       	rcall	.-1660   	; 0x438 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     ab4:	b6 d0       	rcall	.+364    	; 0xc22 <USB_ResetInterface>
     ab6:	08 c0       	rjmp	.+16     	; 0xac8 <USB_Host_ProcessNextHostState+0x23e>
	}
}
     ab8:	93 e0       	ldi	r25, 0x03	; 3
     aba:	02 c0       	rjmp	.+4      	; 0xac0 <USB_Host_ProcessNextHostState+0x236>
     abc:	94 e0       	ldi	r25, 0x04	; 4
     abe:	60 e0       	ldi	r22, 0x00	; 0

			EVENT_USB_Host_DeviceEnumerationComplete();
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
     ac0:	80 91 1f 01 	lds	r24, 0x011F
     ac4:	81 30       	cpi	r24, 0x01	; 1
     ac6:	71 f7       	brne	.-36     	; 0xaa4 <USB_Host_ProcessNextHostState+0x21a>

		EVENT_USB_Host_DeviceUnattached();

		USB_ResetInterface();
	}
}
     ac8:	28 96       	adiw	r28, 0x08	; 8
     aca:	0f b6       	in	r0, 0x3f	; 63
     acc:	f8 94       	cli
     ace:	de bf       	out	0x3e, r29	; 62
     ad0:	0f be       	out	0x3f, r0	; 63
     ad2:	cd bf       	out	0x3d, r28	; 61
     ad4:	cf 91       	pop	r28
     ad6:	df 91       	pop	r29
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ef 90       	pop	r14
     ade:	08 95       	ret

00000ae0 <Pipe_ConfigurePipe>:
                        const uint8_t Type,
                        const uint8_t Token,
                        const uint8_t EndpointNumber,
                        const uint16_t Size,
                        const uint8_t Banks)
{
     ae0:	ef 92       	push	r14
     ae2:	0f 93       	push	r16
     ae4:	1f 93       	push	r17
     ae6:	e8 2f       	mov	r30, r24
     ae8:	7e 2d       	mov	r23, r14

		Pipe_SelectPipe(PNum);
		
		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
     aea:	62 95       	swap	r22
     aec:	66 0f       	add	r22, r22
     aee:	66 0f       	add	r22, r22
     af0:	60 7c       	andi	r22, 0xC0	; 192
     af2:	64 2b       	or	r22, r20
     af4:	2f 70       	andi	r18, 0x0F	; 15
     af6:	62 2b       	or	r22, r18
     af8:	38 2f       	mov	r19, r24
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     afa:	72 60       	ori	r23, 0x02	; 2
     afc:	45 c0       	rjmp	.+138    	; 0xb88 <Pipe_ConfigurePipe+0xa8>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     afe:	30 93 a7 00 	sts	0x00A7, r19
		uint8_t UPCFG2XTemp;
		uint8_t UPIENXTemp;

		Pipe_SelectPipe(PNum);
		
		if (PNum == Number)
     b02:	3e 17       	cp	r19, r30
     b04:	a1 f4       	brne	.+40     	; 0xb2e <Pipe_ConfigurePipe+0x4e>
     b06:	88 e0       	ldi	r24, 0x08	; 8
     b08:	90 e0       	ldi	r25, 0x00	; 0
     b0a:	20 e0       	ldi	r18, 0x00	; 0
     b0c:	03 c0       	rjmp	.+6      	; 0xb14 <Pipe_ConfigurePipe+0x34>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
				{
					MaskVal++;
     b0e:	2f 5f       	subi	r18, 0xFF	; 255
					CheckBytes <<= 1;
     b10:	88 0f       	add	r24, r24
     b12:	99 1f       	adc	r25, r25
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
     b14:	80 17       	cp	r24, r16
     b16:	91 07       	cpc	r25, r17
     b18:	10 f4       	brcc	.+4      	; 0xb1e <Pipe_ConfigurePipe+0x3e>
     b1a:	25 30       	cpi	r18, 0x05	; 5
     b1c:	c1 f7       	brne	.-16     	; 0xb0e <Pipe_ConfigurePipe+0x2e>
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     b1e:	92 2f       	mov	r25, r18
     b20:	92 95       	swap	r25
     b22:	90 7f       	andi	r25, 0xF0	; 240
     b24:	97 2b       	or	r25, r23
     b26:	56 2f       	mov	r21, r22
     b28:	40 e0       	ldi	r20, 0x00	; 0
     b2a:	20 e0       	ldi	r18, 0x00	; 0
     b2c:	08 c0       	rjmp	.+16     	; 0xb3e <Pipe_ConfigurePipe+0x5e>
			UPCFG2XTemp = 0;
			UPIENXTemp  = 0;
		}
		else
		{
			UPCFG0XTemp = UPCFG0X;
     b2e:	50 91 aa 00 	lds	r21, 0x00AA
			UPCFG1XTemp = UPCFG1X;
     b32:	90 91 ab 00 	lds	r25, 0x00AB
			UPCFG2XTemp = UPCFG2X;
     b36:	40 91 ad 00 	lds	r20, 0x00AD
			UPIENXTemp  = UPIENX;
     b3a:	20 91 ae 00 	lds	r18, 0x00AE
		}

		if (!(UPCFG1XTemp & (1 << ALLOC)))
     b3e:	91 ff       	sbrs	r25, 1
     b40:	22 c0       	rjmp	.+68     	; 0xb86 <Pipe_ConfigurePipe+0xa6>
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     b42:	80 91 a9 00 	lds	r24, 0x00A9
     b46:	8e 7f       	andi	r24, 0xFE	; 254
     b48:	80 93 a9 00 	sts	0x00A9, r24
		  continue;
		  
		Pipe_DisablePipe();
		UPCFG1X &= ~(1 << ALLOC);
     b4c:	80 91 ab 00 	lds	r24, 0x00AB
     b50:	8d 7f       	andi	r24, 0xFD	; 253
     b52:	80 93 ab 00 	sts	0x00AB, r24
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
     b56:	80 91 a9 00 	lds	r24, 0x00A9
     b5a:	81 60       	ori	r24, 0x01	; 1
     b5c:	80 93 a9 00 	sts	0x00A9, r24

		Pipe_EnablePipe();
		UPCFG0X = UPCFG0XTemp;
     b60:	50 93 aa 00 	sts	0x00AA, r21
		UPCFG1X = UPCFG1XTemp;
     b64:	90 93 ab 00 	sts	0x00AB, r25
		UPCFG2X = UPCFG2XTemp;
     b68:	40 93 ad 00 	sts	0x00AD, r20
		UPIENX  = UPIENXTemp;
     b6c:	20 93 ae 00 	sts	0x00AE, r18

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
     b70:	80 91 a9 00 	lds	r24, 0x00A9
     b74:	80 62       	ori	r24, 0x20	; 32
     b76:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     b7a:	80 91 ac 00 	lds	r24, 0x00AC

		Pipe_SetInfiniteINRequests();
	
		if (!(Pipe_IsConfigured()))
     b7e:	87 fd       	sbrc	r24, 7
     b80:	02 c0       	rjmp	.+4      	; 0xb86 <Pipe_ConfigurePipe+0xa6>
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	07 c0       	rjmp	.+14     	; 0xb94 <Pipe_ConfigurePipe+0xb4>

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else	
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
     b86:	3f 5f       	subi	r19, 0xFF	; 255
     b88:	37 30       	cpi	r19, 0x07	; 7
     b8a:	08 f4       	brcc	.+2      	; 0xb8e <Pipe_ConfigurePipe+0xae>
     b8c:	b8 cf       	rjmp	.-144    	; 0xafe <Pipe_ConfigurePipe+0x1e>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     b8e:	e0 93 a7 00 	sts	0x00A7, r30
     b92:	81 e0       	ldi	r24, 0x01	; 1
	}
		
	Pipe_SelectPipe(Number);	
	return true;
#endif
}
     b94:	1f 91       	pop	r17
     b96:	0f 91       	pop	r16
     b98:	ef 90       	pop	r14
     b9a:	08 95       	ret

00000b9c <Pipe_ClearPipes>:

void Pipe_ClearPipes(void)
{
	UPINT = 0;
     b9c:	10 92 f8 00 	sts	0x00F8, r1
     ba0:	90 e0       	ldi	r25, 0x00	; 0
     ba2:	90 93 a7 00 	sts	0x00A7, r25

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
     ba6:	10 92 ae 00 	sts	0x00AE, r1
		UPINTX  = 0;
     baa:	10 92 a6 00 	sts	0x00A6, r1
		UPCFG1X = 0;
     bae:	10 92 ab 00 	sts	0x00AB, r1
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     bb2:	80 91 a9 00 	lds	r24, 0x00A9
     bb6:	8e 7f       	andi	r24, 0xFE	; 254
     bb8:	80 93 a9 00 	sts	0x00A9, r24

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     bbc:	9f 5f       	subi	r25, 0xFF	; 255
     bbe:	97 30       	cpi	r25, 0x07	; 7
     bc0:	81 f7       	brne	.-32     	; 0xba2 <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
     bc2:	08 95       	ret

00000bc4 <Pipe_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
     bc4:	40 91 a2 00 	lds	r20, 0x00A2
     bc8:	50 91 a3 00 	lds	r21, 0x00A3
     bcc:	24 e6       	ldi	r18, 0x64	; 100
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
     bce:	80 91 aa 00 	lds	r24, 0x00AA

	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
     bd2:	80 73       	andi	r24, 0x30	; 48
     bd4:	80 31       	cpi	r24, 0x10	; 16
     bd6:	29 f4       	brne	.+10     	; 0xbe2 <Pipe_WaitUntilReady+0x1e>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     bd8:	80 91 a6 00 	lds	r24, 0x00A6
		{
			if (Pipe_IsINReceived())
     bdc:	80 ff       	sbrs	r24, 0
     bde:	05 c0       	rjmp	.+10     	; 0xbea <Pipe_WaitUntilReady+0x26>
     be0:	1e c0       	rjmp	.+60     	; 0xc1e <Pipe_WaitUntilReady+0x5a>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     be2:	80 91 a6 00 	lds	r24, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
     be6:	82 fd       	sbrc	r24, 2
     be8:	1a c0       	rjmp	.+52     	; 0xc1e <Pipe_WaitUntilReady+0x5a>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     bea:	80 91 a6 00 	lds	r24, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
     bee:	81 ff       	sbrs	r24, 1
     bf0:	02 c0       	rjmp	.+4      	; 0xbf6 <Pipe_WaitUntilReady+0x32>
     bf2:	81 e0       	ldi	r24, 0x01	; 1
     bf4:	08 95       	ret
		  return PIPE_READYWAIT_PipeStalled;
		else if (USB_HostState == HOST_STATE_Unattached)
     bf6:	80 91 1f 01 	lds	r24, 0x011F
     bfa:	81 30       	cpi	r24, 0x01	; 1
     bfc:	11 f4       	brne	.+4      	; 0xc02 <Pipe_WaitUntilReady+0x3e>
     bfe:	82 e0       	ldi	r24, 0x02	; 2
     c00:	08 95       	ret
     c02:	80 91 a2 00 	lds	r24, 0x00A2
     c06:	90 91 a3 00 	lds	r25, 0x00A3
		  return PIPE_READYWAIT_DeviceDisconnected;

		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     c0a:	84 17       	cp	r24, r20
     c0c:	95 07       	cpc	r25, r21
     c0e:	f9 f2       	breq	.-66     	; 0xbce <Pipe_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     c10:	22 23       	and	r18, r18
     c12:	11 f4       	brne	.+4      	; 0xc18 <Pipe_WaitUntilReady+0x54>
     c14:	83 e0       	ldi	r24, 0x03	; 3
     c16:	08 95       	ret
     c18:	21 50       	subi	r18, 0x01	; 1
     c1a:	ac 01       	movw	r20, r24
     c1c:	d8 cf       	rjmp	.-80     	; 0xbce <Pipe_WaitUntilReady+0xa>
     c1e:	80 e0       	ldi	r24, 0x00	; 0
			  return PIPE_READYWAIT_Timeout;
		}
	}
}
     c20:	08 95       	ret

00000c22 <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     c22:	70 d0       	rcall	.+224    	; 0xd04 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     c24:	77 d0       	rcall	.+238    	; 0xd14 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     c26:	80 91 d8 00 	lds	r24, 0x00D8
     c2a:	8f 77       	andi	r24, 0x7F	; 127
     c2c:	80 93 d8 00 	sts	0x00D8, r24
				USBCON |=  (1 << USBE);
     c30:	80 91 d8 00 	lds	r24, 0x00D8
     c34:	80 68       	ori	r24, 0x80	; 128
     c36:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
     c3a:	80 91 d8 00 	lds	r24, 0x00D8
     c3e:	8f 7d       	andi	r24, 0xDF	; 223
     c40:	80 93 d8 00 	sts	0x00D8, r24
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
     c44:	80 91 d7 00 	lds	r24, 0x00D7
     c48:	8f 77       	andi	r24, 0x7F	; 127
     c4a:	80 93 d7 00 	sts	0x00D7, r24

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     c4e:	8c e0       	ldi	r24, 0x0C	; 12
     c50:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     c52:	8e e0       	ldi	r24, 0x0E	; 14
     c54:	89 bd       	out	0x29, r24	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_CAN_BE_HOST)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));		
     c56:	09 b4       	in	r0, 0x29	; 41
     c58:	00 fe       	sbrs	r0, 0
     c5a:	fd cf       	rjmp	.-6      	; 0xc56 <USB_ResetInterface+0x34>
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState                = HOST_STATE_Unattached;
     c5c:	81 e0       	ldi	r24, 0x01	; 1
     c5e:	80 93 1f 01 	sts	0x011F, r24
	USB_Host_ConfigurationNumber = 0;
     c62:	10 92 15 01 	sts	0x0115, r1
	USB_Host_ControlPipeSize     = PIPE_CONTROLPIPE_DEFAULT_SIZE;
     c66:	80 e4       	ldi	r24, 0x40	; 64
     c68:	80 93 10 01 	sts	0x0110, r24
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
     c6c:	80 91 d8 00 	lds	r24, 0x00D8
     c70:	80 64       	ori	r24, 0x40	; 64
     c72:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     c76:	80 91 dd 00 	lds	r24, 0x00DD
     c7a:	81 60       	ori	r24, 0x01	; 1
     c7c:	80 93 dd 00 	sts	0x00DD, r24
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
     c80:	80 91 dd 00 	lds	r24, 0x00DD
     c84:	84 60       	ori	r24, 0x04	; 4
     c86:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON &= ~(1 << UVCONE);
     c8a:	80 91 d7 00 	lds	r24, 0x00D7
     c8e:	8f 7e       	andi	r24, 0xEF	; 239
     c90:	80 93 d7 00 	sts	0x00D7, r24

				DDRE   |=  (1 << 7);
     c94:	6f 9a       	sbi	0x0d, 7	; 13
			}

			static inline void USB_Host_VBUS_Manual_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_On(void)
			{
				PORTE  |=  (1 << 7);
     c96:	77 9a       	sbi	0x0e, 7	; 14
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN |= (1 << SRPE);						
     c98:	80 91 de 00 	lds	r24, 0x00DE
     c9c:	81 60       	ori	r24, 0x01	; 1
     c9e:	80 93 de 00 	sts	0x00DE, r24
						break;
					case USB_INT_RSTI:
						UHIEN  |= (1 << RSTE);
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
     ca2:	80 91 de 00 	lds	r24, 0x00DE
     ca6:	84 60       	ori	r24, 0x04	; 4
     ca8:	80 93 de 00 	sts	0x00DE, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     cac:	80 91 e0 00 	lds	r24, 0x00E0
     cb0:	8e 7f       	andi	r24, 0xFE	; 254
     cb2:	80 93 e0 00 	sts	0x00E0, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     cb6:	80 91 d8 00 	lds	r24, 0x00D8
     cba:	80 61       	ori	r24, 0x10	; 16
     cbc:	80 93 d8 00 	sts	0x00D8, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     cc0:	08 95       	ret

00000cc2 <USB_Init>:

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
     cc2:	e7 ed       	ldi	r30, 0xD7	; 215
     cc4:	f0 e0       	ldi	r31, 0x00	; 0
     cc6:	80 81       	ld	r24, Z
     cc8:	81 60       	ori	r24, 0x01	; 1
     cca:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     ccc:	81 e0       	ldi	r24, 0x01	; 1
     cce:	80 93 16 01 	sts	0x0116, r24

	USB_ResetInterface();
}
     cd2:	a7 cf       	rjmp	.-178    	; 0xc22 <USB_ResetInterface>

00000cd4 <USB_Disable>:

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
     cd4:	17 d0       	rcall	.+46     	; 0xd04 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     cd6:	1e d0       	rcall	.+60     	; 0xd14 <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
     cd8:	e0 ee       	ldi	r30, 0xE0	; 224
     cda:	f0 e0       	ldi	r31, 0x00	; 0
     cdc:	80 81       	ld	r24, Z
     cde:	81 60       	ori	r24, 0x01	; 1
     ce0:	80 83       	st	Z, r24
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON  &= ~(1 << USBE);
     ce2:	a8 ed       	ldi	r26, 0xD8	; 216
     ce4:	b0 e0       	ldi	r27, 0x00	; 0
     ce6:	8c 91       	ld	r24, X
     ce8:	8f 77       	andi	r24, 0x7F	; 127
     cea:	8c 93       	st	X, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     cec:	19 bc       	out	0x29, r1	; 41

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  &= ~(1 << UVREGE);
     cee:	e7 ed       	ldi	r30, 0xD7	; 215
     cf0:	f0 e0       	ldi	r31, 0x00	; 0
     cf2:	80 81       	ld	r24, Z
     cf4:	8e 7f       	andi	r24, 0xFE	; 254
     cf6:	80 83       	st	Z, r24
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON  &= ~(1 << OTGPADE);
     cf8:	8c 91       	ld	r24, X
     cfa:	8f 7e       	andi	r24, 0xEF	; 239
     cfc:	8c 93       	st	X, r24

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
     cfe:	10 92 16 01 	sts	0x0116, r1
}
     d02:	08 95       	ret

00000d04 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     d04:	e8 ed       	ldi	r30, 0xD8	; 216
     d06:	f0 e0       	ldi	r31, 0x00	; 0
     d08:	80 81       	ld	r24, Z
     d0a:	8c 7f       	andi	r24, 0xFC	; 252
     d0c:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
     d0e:	10 92 a0 00 	sts	0x00A0, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
	#endif
}
     d12:	08 95       	ret

00000d14 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     d14:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_BOTH)
	OTGINT = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
     d18:	10 92 9f 00 	sts	0x009F, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
	#endif
}
     d1c:	08 95       	ret

00000d1e <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
     d1e:	1f 92       	push	r1
     d20:	0f 92       	push	r0
     d22:	0f b6       	in	r0, 0x3f	; 63
     d24:	0f 92       	push	r0
     d26:	0b b6       	in	r0, 0x3b	; 59
     d28:	0f 92       	push	r0
     d2a:	11 24       	eor	r1, r1
     d2c:	2f 93       	push	r18
     d2e:	3f 93       	push	r19
     d30:	4f 93       	push	r20
     d32:	5f 93       	push	r21
     d34:	6f 93       	push	r22
     d36:	7f 93       	push	r23
     d38:	8f 93       	push	r24
     d3a:	9f 93       	push	r25
     d3c:	af 93       	push	r26
     d3e:	bf 93       	push	r27
     d40:	ef 93       	push	r30
     d42:	ff 93       	push	r31
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     d44:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	#if defined(USB_CAN_BE_HOST)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
     d48:	85 ff       	sbrs	r24, 5
     d4a:	0a c0       	rjmp	.+20     	; 0xd60 <__vector_10+0x42>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     d4c:	80 91 a0 00 	lds	r24, 0x00A0
     d50:	85 ff       	sbrs	r24, 5
     d52:	06 c0       	rjmp	.+12     	; 0xd60 <__vector_10+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     d54:	80 91 9f 00 	lds	r24, 0x009F
     d58:	8f 7d       	andi	r24, 0xDF	; 223
     d5a:	80 93 9f 00 	sts	0x009F, r24
	{
		USB_INT_Clear(USB_INT_HSOFI);

		EVENT_USB_Host_StartOfFrame();
     d5e:	67 d1       	rcall	.+718    	; 0x102e <USB_Event_Stub>
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
     d60:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
     d64:	81 ff       	sbrs	r24, 1
     d66:	15 c0       	rjmp	.+42     	; 0xd92 <__vector_10+0x74>
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
					case USB_INT_DCONNI:
						return (UHIEN  & (1 << DCONNE));
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
     d68:	80 91 a0 00 	lds	r24, 0x00A0
     d6c:	81 ff       	sbrs	r24, 1
     d6e:	11 c0       	rjmp	.+34     	; 0xd92 <__vector_10+0x74>
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     d70:	80 91 9f 00 	lds	r24, 0x009F
     d74:	8d 7f       	andi	r24, 0xFD	; 253
     d76:	80 93 9f 00 	sts	0x009F, r24
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     d7a:	80 91 9f 00 	lds	r24, 0x009F
     d7e:	8e 7f       	andi	r24, 0xFE	; 254
     d80:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     d84:	80 91 a0 00 	lds	r24, 0x00A0
     d88:	8d 7f       	andi	r24, 0xFD	; 253
     d8a:	80 93 a0 00 	sts	0x00A0, r24
	{
		USB_INT_Clear(USB_INT_DDISCI);
		USB_INT_Clear(USB_INT_DCONNI);
		USB_INT_Disable(USB_INT_DDISCI);

		EVENT_USB_Host_DeviceUnattached();
     d8e:	54 db       	rcall	.-2392   	; 0x438 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     d90:	48 df       	rcall	.-368    	; 0xc22 <USB_ResetInterface>
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
     d92:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
     d96:	81 ff       	sbrs	r24, 1
     d98:	15 c0       	rjmp	.+42     	; 0xdc4 <__vector_10+0xa6>
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
     d9a:	80 91 de 00 	lds	r24, 0x00DE
     d9e:	81 ff       	sbrs	r24, 1
     da0:	11 c0       	rjmp	.+34     	; 0xdc4 <__vector_10+0xa6>
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     da2:	80 91 df 00 	lds	r24, 0x00DF
     da6:	8d 7f       	andi	r24, 0xFD	; 253
     da8:	80 93 df 00 	sts	0x00DF, r24
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
     dac:	77 98       	cbi	0x0e, 7	; 14
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     dae:	80 91 dd 00 	lds	r24, 0x00DD
     db2:	81 60       	ori	r24, 0x01	; 1
     db4:	80 93 dd 00 	sts	0x00DD, r24
		USB_INT_Clear(USB_INT_VBERRI);

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
     db8:	80 e0       	ldi	r24, 0x00	; 0
     dba:	22 db       	rcall	.-2492   	; 0x400 <EVENT_USB_Host_HostError>
		EVENT_USB_Host_DeviceUnattached();
     dbc:	3d db       	rcall	.-2438   	; 0x438 <EVENT_USB_Host_DeviceUnattached>

		USB_HostState = HOST_STATE_Unattached;
     dbe:	81 e0       	ldi	r24, 0x01	; 1
     dc0:	80 93 1f 01 	sts	0x011F, r24
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
					case USB_INT_SRPI:
						return (OTGINT & (1 << SRPI));
     dc4:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
     dc8:	80 ff       	sbrs	r24, 0
     dca:	17 c0       	rjmp	.+46     	; 0xdfa <__vector_10+0xdc>
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
					case USB_INT_SRPI:
						return (OTGIEN & (1 << SRPE));
     dcc:	80 91 de 00 	lds	r24, 0x00DE
     dd0:	80 ff       	sbrs	r24, 0
     dd2:	13 c0       	rjmp	.+38     	; 0xdfa <__vector_10+0xdc>
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
						break;
					case USB_INT_SRPI:
						OTGINT &= ~(1 << SRPI);
     dd4:	80 91 df 00 	lds	r24, 0x00DF
     dd8:	8e 7f       	andi	r24, 0xFE	; 254
     dda:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_VBERRI:
						OTGIEN &= ~(1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN &= ~(1 << SRPE);						
     dde:	80 91 de 00 	lds	r24, 0x00DE
     de2:	8e 7f       	andi	r24, 0xFE	; 254
     de4:	80 93 de 00 	sts	0x00DE, r24
	{
		USB_INT_Clear(USB_INT_SRPI);
		USB_INT_Disable(USB_INT_SRPI);

		EVENT_USB_Host_DeviceAttached();
     de8:	2f db       	rcall	.-2466   	; 0x448 <EVENT_USB_Host_DeviceAttached>
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     dea:	80 91 a0 00 	lds	r24, 0x00A0
     dee:	82 60       	ori	r24, 0x02	; 2
     df0:	80 93 a0 00 	sts	0x00A0, r24

		USB_INT_Enable(USB_INT_DDISCI);

		USB_HostState = HOST_STATE_Powered;
     df4:	82 e0       	ldi	r24, 0x02	; 2
     df6:	80 93 1f 01 	sts	0x011F, r24
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
     dfa:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
     dfe:	82 ff       	sbrs	r24, 2
     e00:	0e c0       	rjmp	.+28     	; 0xe1e <__vector_10+0x100>
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
     e02:	80 91 de 00 	lds	r24, 0x00DE
     e06:	82 ff       	sbrs	r24, 2
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__vector_10+0x100>
						break;
					case USB_INT_RSTI:
						UHINT  &= ~(1 << RSTI);
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
     e0a:	80 91 df 00 	lds	r24, 0x00DF
     e0e:	8b 7f       	andi	r24, 0xFB	; 251
     e10:	80 93 df 00 	sts	0x00DF, r24
	{
		USB_INT_Clear(USB_INT_BCERRI);

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
     e14:	82 e0       	ldi	r24, 0x02	; 2
     e16:	60 e0       	ldi	r22, 0x00	; 0
     e18:	c8 da       	rcall	.-2672   	; 0x3aa <EVENT_USB_Host_DeviceEnumerationFailed>
		EVENT_USB_Host_DeviceUnattached();
     e1a:	0e db       	rcall	.-2532   	; 0x438 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     e1c:	02 df       	rcall	.-508    	; 0xc22 <USB_ResetInterface>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     e1e:	ff 91       	pop	r31
     e20:	ef 91       	pop	r30
     e22:	bf 91       	pop	r27
     e24:	af 91       	pop	r26
     e26:	9f 91       	pop	r25
     e28:	8f 91       	pop	r24
     e2a:	7f 91       	pop	r23
     e2c:	6f 91       	pop	r22
     e2e:	5f 91       	pop	r21
     e30:	4f 91       	pop	r20
     e32:	3f 91       	pop	r19
     e34:	2f 91       	pop	r18
     e36:	0f 90       	pop	r0
     e38:	0b be       	out	0x3b, r0	; 59
     e3a:	0f 90       	pop	r0
     e3c:	0f be       	out	0x3f, r0	; 63
     e3e:	0f 90       	pop	r0
     e40:	1f 90       	pop	r1
     e42:	18 95       	reti

00000e44 <Pipe_Read_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     e44:	bf 92       	push	r11
     e46:	cf 92       	push	r12
     e48:	df 92       	push	r13
     e4a:	ef 92       	push	r14
     e4c:	ff 92       	push	r15
     e4e:	0f 93       	push	r16
     e50:	1f 93       	push	r17
     e52:	cf 93       	push	r28
     e54:	df 93       	push	r29
     e56:	18 2f       	mov	r17, r24
     e58:	09 2f       	mov	r16, r25
     e5a:	7b 01       	movw	r14, r22
     e5c:	6a 01       	movw	r12, r20
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     e5e:	80 91 aa 00 	lds	r24, 0x00AA
     e62:	8f 7c       	andi	r24, 0xCF	; 207
     e64:	80 61       	ori	r24, 0x10	; 16
     e66:	80 93 aa 00 	sts	0x00AA, r24
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
     e6a:	ac de       	rcall	.-680    	; 0xbc4 <Pipe_WaitUntilReady>
     e6c:	b8 2e       	mov	r11, r24
     e6e:	88 23       	and	r24, r24
     e70:	a9 f5       	brne	.+106    	; 0xedc <Pipe_Read_Stream_LE+0x98>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     e72:	81 2f       	mov	r24, r17
     e74:	90 2f       	mov	r25, r16
     e76:	9c 01       	movw	r18, r24
     e78:	e9 01       	movw	r28, r18
	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
     e7a:	c1 14       	cp	r12, r1
     e7c:	d1 04       	cpc	r13, r1
     e7e:	39 f0       	breq	.+14     	; 0xe8e <Pipe_Read_Stream_LE+0x4a>
	{
		Length -= *BytesProcessed;
     e80:	f6 01       	movw	r30, r12
     e82:	80 81       	ld	r24, Z
     e84:	91 81       	ldd	r25, Z+1	; 0x01
     e86:	e8 1a       	sub	r14, r24
     e88:	f9 0a       	sbc	r15, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     e8a:	c8 0f       	add	r28, r24
     e8c:	d9 1f       	adc	r29, r25
     e8e:	00 e0       	ldi	r16, 0x00	; 0
     e90:	10 e0       	ldi	r17, 0x00	; 0
     e92:	21 c0       	rjmp	.+66     	; 0xed6 <Pipe_Read_Stream_LE+0x92>
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
     e94:	80 91 a6 00 	lds	r24, 0x00A6
	}
	
	while (Length)
	{
		if (!(Pipe_IsReadWriteAllowed()))
     e98:	85 fd       	sbrc	r24, 5
     e9a:	15 c0       	rjmp	.+42     	; 0xec6 <Pipe_Read_Stream_LE+0x82>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     e9c:	80 91 a6 00 	lds	r24, 0x00A6
     ea0:	8e 77       	andi	r24, 0x7E	; 126
     ea2:	80 93 a6 00 	sts	0x00A6, r24
		{
			TEMPLATE_CLEAR_PIPE();

			if (BytesProcessed != NULL)
     ea6:	c1 14       	cp	r12, r1
     ea8:	d1 04       	cpc	r13, r1
     eaa:	49 f0       	breq	.+18     	; 0xebe <Pipe_Read_Stream_LE+0x7a>
			{
				*BytesProcessed += BytesInTransfer;
     eac:	f6 01       	movw	r30, r12
     eae:	80 81       	ld	r24, Z
     eb0:	91 81       	ldd	r25, Z+1	; 0x01
     eb2:	80 0f       	add	r24, r16
     eb4:	91 1f       	adc	r25, r17
     eb6:	91 83       	std	Z+1, r25	; 0x01
     eb8:	80 83       	st	Z, r24
     eba:	84 e0       	ldi	r24, 0x04	; 4
     ebc:	10 c0       	rjmp	.+32     	; 0xede <Pipe_Read_Stream_LE+0x9a>
				return PIPE_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
     ebe:	82 de       	rcall	.-764    	; 0xbc4 <Pipe_WaitUntilReady>
     ec0:	88 23       	and	r24, r24
     ec2:	49 f0       	breq	.+18     	; 0xed6 <Pipe_Read_Stream_LE+0x92>
     ec4:	0c c0       	rjmp	.+24     	; 0xede <Pipe_Read_Stream_LE+0x9a>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
     ec6:	80 91 af 00 	lds	r24, 0x00AF
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
     eca:	89 93       	st	Y+, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
     ecc:	08 94       	sec
     ece:	e1 08       	sbc	r14, r1
     ed0:	f1 08       	sbc	r15, r1
			BytesInTransfer++;
     ed2:	0f 5f       	subi	r16, 0xFF	; 255
     ed4:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}
	
	while (Length)
     ed6:	e1 14       	cp	r14, r1
     ed8:	f1 04       	cpc	r15, r1
     eda:	e1 f6       	brne	.-72     	; 0xe94 <Pipe_Read_Stream_LE+0x50>
     edc:	8b 2d       	mov	r24, r11
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
     ede:	df 91       	pop	r29
     ee0:	cf 91       	pop	r28
     ee2:	1f 91       	pop	r17
     ee4:	0f 91       	pop	r16
     ee6:	ff 90       	pop	r15
     ee8:	ef 90       	pop	r14
     eea:	df 90       	pop	r13
     eec:	cf 90       	pop	r12
     eee:	bf 90       	pop	r11
     ef0:	08 95       	ret

00000ef2 <USB_GetNextDescriptorComp>:

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
     ef2:	af 92       	push	r10
     ef4:	bf 92       	push	r11
     ef6:	cf 92       	push	r12
     ef8:	df 92       	push	r13
     efa:	ef 92       	push	r14
     efc:	ff 92       	push	r15
     efe:	0f 93       	push	r16
     f00:	1f 93       	push	r17
     f02:	cf 93       	push	r28
     f04:	df 93       	push	r29
     f06:	7c 01       	movw	r14, r24
     f08:	eb 01       	movw	r28, r22
     f0a:	6a 01       	movw	r12, r20
     f0c:	24 c0       	rjmp	.+72     	; 0xf56 <USB_GetNextDescriptorComp+0x64>
	uint8_t ErrorCode;

	while (*BytesRem)
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
     f0e:	e8 81       	ld	r30, Y
     f10:	f9 81       	ldd	r31, Y+1	; 0x01
     f12:	be 2e       	mov	r11, r30
     f14:	af 2e       	mov	r10, r31
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc)
			{
				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;
     f16:	80 81       	ld	r24, Z
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	98 01       	movw	r18, r16
     f1c:	80 17       	cp	r24, r16
     f1e:	91 07       	cpc	r25, r17
     f20:	08 f4       	brcc	.+2      	; 0xf24 <USB_GetNextDescriptorComp+0x32>
     f22:	9c 01       	movw	r18, r24
				
				if (*BytesRem < CurrDescriptorSize)
				  CurrDescriptorSize = *BytesRem;

				*CurrConfigLoc  = (void*)((uintptr_t)*CurrConfigLoc + CurrDescriptorSize);
     f24:	e2 0f       	add	r30, r18
     f26:	f3 1f       	adc	r31, r19
     f28:	f9 83       	std	Y+1, r31	; 0x01
     f2a:	e8 83       	st	Y, r30
				*BytesRem      -= CurrDescriptorSize;
     f2c:	f7 01       	movw	r30, r14
     f2e:	80 81       	ld	r24, Z
     f30:	91 81       	ldd	r25, Z+1	; 0x01
     f32:	82 1b       	sub	r24, r18
     f34:	93 0b       	sbc	r25, r19
     f36:	91 83       	std	Z+1, r25	; 0x01
     f38:	80 83       	st	Z, r24
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
     f3a:	88 81       	ld	r24, Y
     f3c:	99 81       	ldd	r25, Y+1	; 0x01
     f3e:	f6 01       	movw	r30, r12
     f40:	09 95       	icall
     f42:	82 30       	cpi	r24, 0x02	; 2
     f44:	41 f0       	breq	.+16     	; 0xf56 <USB_GetNextDescriptorComp+0x64>
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
     f46:	81 30       	cpi	r24, 0x01	; 1
     f48:	69 f4       	brne	.+26     	; 0xf64 <USB_GetNextDescriptorComp+0x72>
			{
				*CurrConfigLoc = PrevDescLoc;
     f4a:	b8 82       	st	Y, r11
     f4c:	a9 82       	std	Y+1, r10	; 0x01
				*BytesRem      = PrevBytesRem;
     f4e:	f7 01       	movw	r30, r14
     f50:	11 83       	std	Z+1, r17	; 0x01
     f52:	00 83       	st	Z, r16
     f54:	07 c0       	rjmp	.+14     	; 0xf64 <USB_GetNextDescriptorComp+0x72>
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
	uint8_t ErrorCode;

	while (*BytesRem)
     f56:	f7 01       	movw	r30, r14
     f58:	00 81       	ld	r16, Z
     f5a:	11 81       	ldd	r17, Z+1	; 0x01
     f5c:	01 15       	cp	r16, r1
     f5e:	11 05       	cpc	r17, r1
     f60:	b1 f6       	brne	.-84     	; 0xf0e <USB_GetNextDescriptorComp+0x1c>
     f62:	82 e0       	ldi	r24, 0x02	; 2
			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
}
     f64:	df 91       	pop	r29
     f66:	cf 91       	pop	r28
     f68:	1f 91       	pop	r17
     f6a:	0f 91       	pop	r16
     f6c:	ff 90       	pop	r15
     f6e:	ef 90       	pop	r14
     f70:	df 90       	pop	r13
     f72:	cf 90       	pop	r12
     f74:	bf 90       	pop	r11
     f76:	af 90       	pop	r10
     f78:	08 95       	ret

00000f7a <USB_Host_GetDeviceConfigDescriptor>:
#if defined(USB_CAN_BE_HOST)
uint8_t USB_Host_GetDeviceConfigDescriptor(const uint8_t ConfigNumber,
                                           uint16_t* const ConfigSizePtr,
                                           void* const BufferPtr,
                                           const uint16_t BufferSize)
{
     f7a:	cf 92       	push	r12
     f7c:	df 92       	push	r13
     f7e:	ef 92       	push	r14
     f80:	ff 92       	push	r15
     f82:	0f 93       	push	r16
     f84:	1f 93       	push	r17
     f86:	df 93       	push	r29
     f88:	cf 93       	push	r28
     f8a:	cd b7       	in	r28, 0x3d	; 61
     f8c:	de b7       	in	r29, 0x3e	; 62
     f8e:	29 97       	sbiw	r28, 0x09	; 9
     f90:	0f b6       	in	r0, 0x3f	; 63
     f92:	f8 94       	cli
     f94:	de bf       	out	0x3e, r29	; 62
     f96:	0f be       	out	0x3f, r0	; 63
     f98:	cd bf       	out	0x3d, r28	; 61
     f9a:	6b 01       	movw	r12, r22
     f9c:	8a 01       	movw	r16, r20
     f9e:	79 01       	movw	r14, r18
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
     fa0:	90 e8       	ldi	r25, 0x80	; 128
     fa2:	90 93 17 01 	sts	0x0117, r25
     fa6:	96 e0       	ldi	r25, 0x06	; 6
     fa8:	90 93 18 01 	sts	0x0118, r25
     fac:	90 e0       	ldi	r25, 0x00	; 0
     fae:	01 97       	sbiw	r24, 0x01	; 1
     fb0:	92 60       	ori	r25, 0x02	; 2
     fb2:	90 93 1a 01 	sts	0x011A, r25
     fb6:	80 93 19 01 	sts	0x0119, r24
     fba:	10 92 1c 01 	sts	0x011C, r1
     fbe:	10 92 1b 01 	sts	0x011B, r1
     fc2:	89 e0       	ldi	r24, 0x09	; 9
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	90 93 1e 01 	sts	0x011E, r25
     fca:	80 93 1d 01 	sts	0x011D, r24
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     fce:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = sizeof(USB_Descriptor_Configuration_Header_t),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(ConfigHeader)) != HOST_SENDCONTROL_Successful)
     fd2:	ce 01       	movw	r24, r28
     fd4:	01 96       	adiw	r24, 0x01	; 1
     fd6:	55 d0       	rcall	.+170    	; 0x1082 <USB_Host_SendControlRequest>
     fd8:	28 2f       	mov	r18, r24
     fda:	88 23       	and	r24, r24
     fdc:	c1 f4       	brne	.+48     	; 0x100e <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);
     fde:	8b 81       	ldd	r24, Y+3	; 0x03
     fe0:	9c 81       	ldd	r25, Y+4	; 0x04
     fe2:	f6 01       	movw	r30, r12
     fe4:	91 83       	std	Z+1, r25	; 0x01
     fe6:	80 83       	st	Z, r24

	if (*ConfigSizePtr > BufferSize)
     fe8:	e8 16       	cp	r14, r24
     fea:	f9 06       	cpc	r15, r25
     fec:	10 f4       	brcc	.+4      	; 0xff2 <USB_Host_GetDeviceConfigDescriptor+0x78>
     fee:	25 e0       	ldi	r18, 0x05	; 5
     ff0:	0e c0       	rjmp	.+28     	; 0x100e <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return HOST_GETCONFIG_BuffOverflow;

	USB_ControlRequest.wLength = *ConfigSizePtr;
     ff2:	90 93 1e 01 	sts	0x011E, r25
     ff6:	80 93 1d 01 	sts	0x011D, r24

	if ((ErrorCode = USB_Host_SendControlRequest(BufferPtr)) != HOST_SENDCONTROL_Successful)
     ffa:	c8 01       	movw	r24, r16
     ffc:	42 d0       	rcall	.+132    	; 0x1082 <USB_Host_SendControlRequest>
     ffe:	28 2f       	mov	r18, r24
    1000:	88 23       	and	r24, r24
    1002:	29 f4       	brne	.+10     	; 0x100e <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
    1004:	f8 01       	movw	r30, r16
    1006:	81 81       	ldd	r24, Z+1	; 0x01
    1008:	82 30       	cpi	r24, 0x02	; 2
    100a:	09 f0       	breq	.+2      	; 0x100e <USB_Host_GetDeviceConfigDescriptor+0x94>
    100c:	26 e0       	ldi	r18, 0x06	; 6
	  return HOST_GETCONFIG_InvalidData;

	return HOST_GETCONFIG_Successful;
}
    100e:	82 2f       	mov	r24, r18
    1010:	29 96       	adiw	r28, 0x09	; 9
    1012:	0f b6       	in	r0, 0x3f	; 63
    1014:	f8 94       	cli
    1016:	de bf       	out	0x3e, r29	; 62
    1018:	0f be       	out	0x3f, r0	; 63
    101a:	cd bf       	out	0x3d, r28	; 61
    101c:	cf 91       	pop	r28
    101e:	df 91       	pop	r29
    1020:	1f 91       	pop	r17
    1022:	0f 91       	pop	r16
    1024:	ff 90       	pop	r15
    1026:	ef 90       	pop	r14
    1028:	df 90       	pop	r13
    102a:	cf 90       	pop	r12
    102c:	08 95       	ret

0000102e <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
    102e:	08 95       	ret

00001030 <USB_Host_WaitForIOS>:

	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
    1030:	1f 93       	push	r17
    1032:	cf 93       	push	r28
    1034:	df 93       	push	r29
    1036:	18 2f       	mov	r17, r24
    1038:	c8 ee       	ldi	r28, 0xE8	; 232
    103a:	d3 e0       	ldi	r29, 0x03	; 3
    103c:	09 c0       	rjmp	.+18     	; 0x1050 <USB_Host_WaitForIOS+0x20>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    103e:	81 e0       	ldi	r24, 0x01	; 1
    1040:	87 db       	rcall	.-2290   	; 0x750 <USB_Host_WaitMS>
    1042:	88 23       	and	r24, r24
    1044:	d1 f4       	brne	.+52     	; 0x107a <USB_Host_WaitForIOS+0x4a>
		  return ErrorCode;

		if (!(TimeoutCounter--))
    1046:	20 97       	sbiw	r28, 0x00	; 0
    1048:	11 f4       	brne	.+4      	; 0x104e <USB_Host_WaitForIOS+0x1e>
    104a:	84 e0       	ldi	r24, 0x04	; 4
    104c:	16 c0       	rjmp	.+44     	; 0x107a <USB_Host_WaitForIOS+0x4a>
    104e:	21 97       	sbiw	r28, 0x01	; 1
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    1050:	11 23       	and	r17, r17
    1052:	29 f4       	brne	.+10     	; 0x105e <USB_Host_WaitForIOS+0x2e>
			 *  \return Boolean \c true if the current pipe is ready for a SETUP packet, \c false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
    1054:	80 91 a6 00 	lds	r24, 0x00A6
    1058:	83 ff       	sbrs	r24, 3
    105a:	f1 cf       	rjmp	.-30     	; 0x103e <USB_Host_WaitForIOS+0xe>
    105c:	0d c0       	rjmp	.+26     	; 0x1078 <USB_Host_WaitForIOS+0x48>
    105e:	11 30       	cpi	r17, 0x01	; 1
    1060:	29 f4       	brne	.+10     	; 0x106c <USB_Host_WaitForIOS+0x3c>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    1062:	80 91 a6 00 	lds	r24, 0x00A6
    1066:	80 ff       	sbrs	r24, 0
    1068:	ea cf       	rjmp	.-44     	; 0x103e <USB_Host_WaitForIOS+0xe>
    106a:	06 c0       	rjmp	.+12     	; 0x1078 <USB_Host_WaitForIOS+0x48>
    106c:	12 30       	cpi	r17, 0x02	; 2
    106e:	39 f7       	brne	.-50     	; 0x103e <USB_Host_WaitForIOS+0xe>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
    1070:	80 91 a6 00 	lds	r24, 0x00A6
    1074:	82 ff       	sbrs	r24, 2
    1076:	e3 cf       	rjmp	.-58     	; 0x103e <USB_Host_WaitForIOS+0xe>
    1078:	80 e0       	ldi	r24, 0x00	; 0
		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
}
    107a:	df 91       	pop	r29
    107c:	cf 91       	pop	r28
    107e:	1f 91       	pop	r17
    1080:	08 95       	ret

00001082 <USB_Host_SendControlRequest>:
#include "HostStandardReq.h"

uint8_t USB_Host_ConfigurationNumber;

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
    1082:	ff 92       	push	r15
    1084:	0f 93       	push	r16
    1086:	1f 93       	push	r17
    1088:	cf 93       	push	r28
    108a:	df 93       	push	r29
    108c:	18 2f       	mov	r17, r24
    108e:	09 2f       	mov	r16, r25
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
    1090:	f0 90 9e 00 	lds	r15, 0x009E
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
	bool     BusSuspended = USB_Host_IsBusSuspended();
	uint8_t  ReturnStatus = HOST_SENDCONTROL_Successful;
	uint16_t DataLen      = USB_ControlRequest.wLength;
    1094:	c0 91 1d 01 	lds	r28, 0x011D
    1098:	d0 91 1e 01 	lds	r29, 0x011E
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    109c:	80 91 9e 00 	lds	r24, 0x009E
    10a0:	81 60       	ori	r24, 0x01	; 1
    10a2:	80 93 9e 00 	sts	0x009E, r24

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    10a6:	81 e0       	ldi	r24, 0x01	; 1
    10a8:	53 db       	rcall	.-2394   	; 0x750 <USB_Host_WaitMS>
    10aa:	98 2f       	mov	r25, r24
    10ac:	88 23       	and	r24, r24
    10ae:	09 f0       	breq	.+2      	; 0x10b2 <USB_Host_SendControlRequest+0x30>
    10b0:	d7 c0       	rjmp	.+430    	; 0x1260 <USB_Host_SendControlRequest+0x1de>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    10b2:	80 91 aa 00 	lds	r24, 0x00AA
    10b6:	8f 7c       	andi	r24, 0xCF	; 207
    10b8:	80 93 aa 00 	sts	0x00AA, r24

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
    10bc:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
    10c0:	80 91 a6 00 	lds	r24, 0x00A6
    10c4:	8f 7e       	andi	r24, 0xEF	; 239
    10c6:	80 93 a6 00 	sts	0x00A6, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    10ca:	80 91 a9 00 	lds	r24, 0x00A9
    10ce:	8f 7b       	andi	r24, 0xBF	; 191
    10d0:	80 93 a9 00 	sts	0x00A9, r24
    10d4:	e7 e1       	ldi	r30, 0x17	; 23
    10d6:	f1 e0       	ldi	r31, 0x01	; 1
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
	  Pipe_Write_8(*(HeaderStream++));	
    10d8:	81 91       	ld	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    10da:	80 93 af 00 	sts	0x00AF, r24
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
    10de:	81 e0       	ldi	r24, 0x01	; 1
    10e0:	ef 31       	cpi	r30, 0x1F	; 31
    10e2:	f8 07       	cpc	r31, r24
    10e4:	c9 f7       	brne	.-14     	; 0x10d8 <USB_Host_SendControlRequest+0x56>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
    10e6:	80 91 a6 00 	lds	r24, 0x00A6
    10ea:	87 77       	andi	r24, 0x77	; 119
    10ec:	80 93 a6 00 	sts	0x00A6, r24
	  Pipe_Write_8(*(HeaderStream++));	
	#endif
	
	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
    10f0:	80 e0       	ldi	r24, 0x00	; 0
    10f2:	9e df       	rcall	.-196    	; 0x1030 <USB_Host_WaitForIOS>
    10f4:	98 2f       	mov	r25, r24
    10f6:	88 23       	and	r24, r24
    10f8:	09 f0       	breq	.+2      	; 0x10fc <USB_Host_SendControlRequest+0x7a>
    10fa:	b2 c0       	rjmp	.+356    	; 0x1260 <USB_Host_SendControlRequest+0x1de>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    10fc:	80 91 a9 00 	lds	r24, 0x00A9
    1100:	80 64       	ori	r24, 0x40	; 64
    1102:	80 93 a9 00 	sts	0x00A9, r24
	  goto End_Of_Control_Send;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1106:	81 e0       	ldi	r24, 0x01	; 1
    1108:	23 db       	rcall	.-2490   	; 0x750 <USB_Host_WaitMS>
    110a:	98 2f       	mov	r25, r24
    110c:	88 23       	and	r24, r24
    110e:	09 f0       	breq	.+2      	; 0x1112 <USB_Host_SendControlRequest+0x90>
    1110:	a7 c0       	rjmp	.+334    	; 0x1260 <USB_Host_SendControlRequest+0x1de>

uint8_t USB_Host_ConfigurationNumber;

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
    1112:	21 2f       	mov	r18, r17
    1114:	30 2f       	mov	r19, r16
    1116:	c9 01       	movw	r24, r18
    1118:	8c 01       	movw	r16, r24
	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
	  goto End_Of_Control_Send;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
    111a:	80 91 17 01 	lds	r24, 0x0117
    111e:	87 ff       	sbrs	r24, 7
    1120:	52 c0       	rjmp	.+164    	; 0x11c6 <USB_Host_SendControlRequest+0x144>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1122:	80 91 aa 00 	lds	r24, 0x00AA
    1126:	8f 7c       	andi	r24, 0xCF	; 207
    1128:	80 61       	ori	r24, 0x10	; 16
    112a:	80 93 aa 00 	sts	0x00AA, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
    112e:	01 15       	cp	r16, r1
    1130:	11 05       	cpc	r17, r1
    1132:	69 f5       	brne	.+90     	; 0x118e <USB_Host_SendControlRequest+0x10c>
    1134:	2e c0       	rjmp	.+92     	; 0x1192 <USB_Host_SendControlRequest+0x110>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1136:	80 91 a9 00 	lds	r24, 0x00A9
    113a:	8f 7b       	andi	r24, 0xBF	; 191
    113c:	80 93 a9 00 	sts	0x00A9, r24
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    1140:	81 e0       	ldi	r24, 0x01	; 1
    1142:	76 df       	rcall	.-276    	; 0x1030 <USB_Host_WaitForIOS>
    1144:	98 2f       	mov	r25, r24
    1146:	88 23       	and	r24, r24
    1148:	09 f0       	breq	.+2      	; 0x114c <USB_Host_SendControlRequest+0xca>
    114a:	8a c0       	rjmp	.+276    	; 0x1260 <USB_Host_SendControlRequest+0x1de>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    114c:	80 91 f6 00 	lds	r24, 0x00F6
    1150:	90 91 f7 00 	lds	r25, 0x00F7
				  goto End_Of_Control_Send;

				if (!(Pipe_BytesInPipe()))
    1154:	89 2b       	or	r24, r25
    1156:	49 f4       	brne	.+18     	; 0x116a <USB_Host_SendControlRequest+0xe8>
    1158:	c0 e0       	ldi	r28, 0x00	; 0
    115a:	d0 e0       	ldi	r29, 0x00	; 0
    115c:	06 c0       	rjmp	.+12     	; 0x116a <USB_Host_SendControlRequest+0xe8>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    115e:	80 91 af 00 	lds	r24, 0x00AF
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
				{
					*(DataStream++) = Pipe_Read_8();
    1162:	f8 01       	movw	r30, r16
    1164:	81 93       	st	Z+, r24
    1166:	8f 01       	movw	r16, r30
					DataLen--;
    1168:	21 97       	sbiw	r28, 0x01	; 1
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    116a:	80 91 f6 00 	lds	r24, 0x00F6
    116e:	90 91 f7 00 	lds	r25, 0x00F7
				  goto End_Of_Control_Send;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
    1172:	89 2b       	or	r24, r25
    1174:	11 f0       	breq	.+4      	; 0x117a <USB_Host_SendControlRequest+0xf8>
    1176:	20 97       	sbiw	r28, 0x00	; 0
    1178:	91 f7       	brne	.-28     	; 0x115e <USB_Host_SendControlRequest+0xdc>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    117a:	80 91 a9 00 	lds	r24, 0x00A9
    117e:	80 64       	ori	r24, 0x40	; 64
    1180:	80 93 a9 00 	sts	0x00A9, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1184:	80 91 a6 00 	lds	r24, 0x00A6
    1188:	8e 77       	andi	r24, 0x7E	; 126
    118a:	80 93 a6 00 	sts	0x00A6, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
    118e:	20 97       	sbiw	r28, 0x00	; 0
    1190:	91 f6       	brne	.-92     	; 0x1136 <USB_Host_SendControlRequest+0xb4>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1192:	80 91 aa 00 	lds	r24, 0x00AA
    1196:	8f 7c       	andi	r24, 0xCF	; 207
    1198:	80 62       	ori	r24, 0x20	; 32
    119a:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    119e:	80 91 a9 00 	lds	r24, 0x00A9
    11a2:	8f 7b       	andi	r24, 0xBF	; 191
    11a4:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    11a8:	82 e0       	ldi	r24, 0x02	; 2
    11aa:	42 df       	rcall	.-380    	; 0x1030 <USB_Host_WaitForIOS>
    11ac:	98 2f       	mov	r25, r24
    11ae:	88 23       	and	r24, r24
    11b0:	09 f0       	breq	.+2      	; 0x11b4 <USB_Host_SendControlRequest+0x132>
    11b2:	56 c0       	rjmp	.+172    	; 0x1260 <USB_Host_SendControlRequest+0x1de>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    11b4:	80 91 a6 00 	lds	r24, 0x00A6
    11b8:	8b 77       	andi	r24, 0x7B	; 123
    11ba:	80 93 a6 00 	sts	0x00A6, r24
		  goto End_Of_Control_Send;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    11be:	82 e0       	ldi	r24, 0x02	; 2
    11c0:	37 df       	rcall	.-402    	; 0x1030 <USB_Host_WaitForIOS>
    11c2:	98 2f       	mov	r25, r24
    11c4:	4d c0       	rjmp	.+154    	; 0x1260 <USB_Host_SendControlRequest+0x1de>
		  goto End_Of_Control_Send;
	}
	else
	{
		if (DataStream != NULL)
    11c6:	01 15       	cp	r16, r1
    11c8:	11 05       	cpc	r17, r1
    11ca:	a9 f1       	breq	.+106    	; 0x1236 <USB_Host_SendControlRequest+0x1b4>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    11cc:	80 91 aa 00 	lds	r24, 0x00AA
    11d0:	8f 7c       	andi	r24, 0xCF	; 207
    11d2:	80 62       	ori	r24, 0x20	; 32
    11d4:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    11d8:	80 91 a9 00 	lds	r24, 0x00A9
    11dc:	8f 7b       	andi	r24, 0xBF	; 191
    11de:	80 93 a9 00 	sts	0x00A9, r24
    11e2:	1d c0       	rjmp	.+58     	; 0x121e <USB_Host_SendControlRequest+0x19c>
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    11e4:	82 e0       	ldi	r24, 0x02	; 2
    11e6:	24 df       	rcall	.-440    	; 0x1030 <USB_Host_WaitForIOS>
    11e8:	98 2f       	mov	r25, r24
    11ea:	88 23       	and	r24, r24
    11ec:	c9 f5       	brne	.+114    	; 0x1260 <USB_Host_SendControlRequest+0x1de>
				  goto End_Of_Control_Send;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    11ee:	80 91 10 01 	lds	r24, 0x0110
    11f2:	28 2f       	mov	r18, r24
    11f4:	30 e0       	ldi	r19, 0x00	; 0
    11f6:	07 c0       	rjmp	.+14     	; 0x1206 <USB_Host_SendControlRequest+0x184>
				{
					Pipe_Write_8(*(DataStream++));
    11f8:	f8 01       	movw	r30, r16
    11fa:	81 91       	ld	r24, Z+
    11fc:	8f 01       	movw	r16, r30
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    11fe:	80 93 af 00 	sts	0x00AF, r24
					DataLen--;
    1202:	21 97       	sbiw	r28, 0x01	; 1
			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
				  goto End_Of_Control_Send;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    1204:	39 f0       	breq	.+14     	; 0x1214 <USB_Host_SendControlRequest+0x192>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1206:	80 91 f6 00 	lds	r24, 0x00F6
    120a:	90 91 f7 00 	lds	r25, 0x00F7
    120e:	82 17       	cp	r24, r18
    1210:	93 07       	cpc	r25, r19
    1212:	90 f3       	brcs	.-28     	; 0x11f8 <USB_Host_SendControlRequest+0x176>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1214:	80 91 a6 00 	lds	r24, 0x00A6
    1218:	8b 77       	andi	r24, 0x7B	; 123
    121a:	80 93 a6 00 	sts	0x00A6, r24
		if (DataStream != NULL)
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
    121e:	20 97       	sbiw	r28, 0x00	; 0
    1220:	09 f7       	brne	.-62     	; 0x11e4 <USB_Host_SendControlRequest+0x162>
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1222:	82 e0       	ldi	r24, 0x02	; 2
    1224:	05 df       	rcall	.-502    	; 0x1030 <USB_Host_WaitForIOS>
    1226:	98 2f       	mov	r25, r24
    1228:	88 23       	and	r24, r24
    122a:	d1 f4       	brne	.+52     	; 0x1260 <USB_Host_SendControlRequest+0x1de>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    122c:	80 91 a9 00 	lds	r24, 0x00A9
    1230:	80 64       	ori	r24, 0x40	; 64
    1232:	80 93 a9 00 	sts	0x00A9, r24
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1236:	80 91 aa 00 	lds	r24, 0x00AA
    123a:	8f 7c       	andi	r24, 0xCF	; 207
    123c:	80 61       	ori	r24, 0x10	; 16
    123e:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1242:	80 91 a9 00 	lds	r24, 0x00A9
    1246:	8f 7b       	andi	r24, 0xBF	; 191
    1248:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    124c:	81 e0       	ldi	r24, 0x01	; 1
    124e:	f0 de       	rcall	.-544    	; 0x1030 <USB_Host_WaitForIOS>
    1250:	98 2f       	mov	r25, r24
    1252:	88 23       	and	r24, r24
    1254:	29 f4       	brne	.+10     	; 0x1260 <USB_Host_SendControlRequest+0x1de>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1256:	80 91 a6 00 	lds	r24, 0x00A6
    125a:	8e 77       	andi	r24, 0x7E	; 126
    125c:	80 93 a6 00 	sts	0x00A6, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1260:	80 91 a9 00 	lds	r24, 0x00A9
    1264:	80 64       	ori	r24, 0x40	; 64
    1266:	80 93 a9 00 	sts	0x00A9, r24
	}

End_Of_Control_Send:
	Pipe_Freeze();

	if (BusSuspended)
    126a:	f0 fc       	sbrc	r15, 0
    126c:	05 c0       	rjmp	.+10     	; 0x1278 <USB_Host_SendControlRequest+0x1f6>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    126e:	80 91 9e 00 	lds	r24, 0x009E
    1272:	8e 7f       	andi	r24, 0xFE	; 254
    1274:	80 93 9e 00 	sts	0x009E, r24
			 *  \param[in] PipeNumber  Index of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t PipeNumber)
			{
				UPRST = (1 << PipeNumber);
    1278:	81 e0       	ldi	r24, 0x01	; 1
    127a:	80 93 a8 00 	sts	0x00A8, r24
				UPRST = 0;
    127e:	10 92 a8 00 	sts	0x00A8, r1
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
    1282:	89 2f       	mov	r24, r25
    1284:	df 91       	pop	r29
    1286:	cf 91       	pop	r28
    1288:	1f 91       	pop	r17
    128a:	0f 91       	pop	r16
    128c:	ff 90       	pop	r15
    128e:	08 95       	ret

00001290 <USB_Host_SetDeviceConfiguration>:

	return HOST_SENDCONTROL_Successful;
}

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
    1290:	1f 93       	push	r17
    1292:	18 2f       	mov	r17, r24
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
    1294:	10 92 17 01 	sts	0x0117, r1
    1298:	89 e0       	ldi	r24, 0x09	; 9
    129a:	80 93 18 01 	sts	0x0118, r24
    129e:	10 93 19 01 	sts	0x0119, r17
    12a2:	10 92 1a 01 	sts	0x011A, r1
    12a6:	10 92 1c 01 	sts	0x011C, r1
    12aa:	10 92 1b 01 	sts	0x011B, r1
    12ae:	10 92 1e 01 	sts	0x011E, r1
    12b2:	10 92 1d 01 	sts	0x011D, r1
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    12b6:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);
	
	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) == HOST_SENDCONTROL_Successful)
    12ba:	80 e0       	ldi	r24, 0x00	; 0
    12bc:	90 e0       	ldi	r25, 0x00	; 0
    12be:	e1 de       	rcall	.-574    	; 0x1082 <USB_Host_SendControlRequest>
    12c0:	88 23       	and	r24, r24
    12c2:	49 f4       	brne	.+18     	; 0x12d6 <USB_Host_SetDeviceConfiguration+0x46>
	{
		USB_Host_ConfigurationNumber = ConfigNumber;
    12c4:	10 93 15 01 	sts	0x0115, r17
		USB_HostState                = (ConfigNumber) ? HOST_STATE_Configured : HOST_STATE_Addressed;
    12c8:	11 23       	and	r17, r17
    12ca:	11 f4       	brne	.+4      	; 0x12d0 <USB_Host_SetDeviceConfiguration+0x40>
    12cc:	9a e0       	ldi	r25, 0x0A	; 10
    12ce:	01 c0       	rjmp	.+2      	; 0x12d2 <USB_Host_SetDeviceConfiguration+0x42>
    12d0:	9b e0       	ldi	r25, 0x0B	; 11
    12d2:	90 93 1f 01 	sts	0x011F, r25
	}

	return ErrorCode;
}
    12d6:	1f 91       	pop	r17
    12d8:	08 95       	ret

000012da <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    12da:	ff 92       	push	r15
    12dc:	0f 93       	push	r16
    12de:	1f 93       	push	r17
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
    12e0:	07 ea       	ldi	r16, 0xA7	; 167
    12e2:	10 e0       	ldi	r17, 0x00	; 0
    12e4:	f8 01       	movw	r30, r16
    12e6:	f0 80       	ld	r15, Z
    12e8:	f7 e0       	ldi	r31, 0x07	; 7
    12ea:	ff 22       	and	r15, r31
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    12ec:	f8 01       	movw	r30, r16
    12ee:	10 82       	st	Z, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    12f0:	cc da       	rcall	.-2664   	; 0x88a <USB_Host_ProcessNextHostState>
    12f2:	f8 01       	movw	r30, r16
    12f4:	f0 82       	st	Z, r15
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
    12f6:	1f 91       	pop	r17
    12f8:	0f 91       	pop	r16
    12fa:	ff 90       	pop	r15
    12fc:	08 95       	ret

000012fe <Serial_putchar>:

FILE USARTSerialStream;

int Serial_putchar(char DataByte,
                   FILE *Stream)
{
    12fe:	98 2f       	mov	r25, r24
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
    1300:	80 91 c8 00 	lds	r24, 0x00C8
    1304:	85 ff       	sbrs	r24, 5
    1306:	fc cf       	rjmp	.-8      	; 0x1300 <Serial_putchar+0x2>
				UDR1 = DataByte;
    1308:	90 93 ce 00 	sts	0x00CE, r25
	(void)Stream;

	Serial_SendByte(DataByte);
	return 0;
}
    130c:	80 e0       	ldi	r24, 0x00	; 0
    130e:	90 e0       	ldi	r25, 0x00	; 0
    1310:	08 95       	ret

00001312 <Serial_getchar>:
			 *  \return Boolean \c true if a character has been received, \c false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    1312:	80 91 c8 00 	lds	r24, 0x00C8

int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    1316:	87 fd       	sbrc	r24, 7
    1318:	03 c0       	rjmp	.+6      	; 0x1320 <Serial_getchar+0xe>
    131a:	2e ef       	ldi	r18, 0xFE	; 254
    131c:	3f ef       	ldi	r19, 0xFF	; 255
    131e:	0b c0       	rjmp	.+22     	; 0x1336 <Serial_getchar+0x24>
    1320:	80 91 c8 00 	lds	r24, 0x00C8
			 *  \return Next byte received from the USART, or a negative value if no byte has been received.
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
    1324:	87 fd       	sbrc	r24, 7
    1326:	03 c0       	rjmp	.+6      	; 0x132e <Serial_getchar+0x1c>
    1328:	2f ef       	ldi	r18, 0xFF	; 255
    132a:	3f ef       	ldi	r19, 0xFF	; 255
    132c:	04 c0       	rjmp	.+8      	; 0x1336 <Serial_getchar+0x24>
				  return -1;
				
				return UDR1;
    132e:	80 91 ce 00 	lds	r24, 0x00CE
    1332:	28 2f       	mov	r18, r24
    1334:	30 e0       	ldi	r19, 0x00	; 0
	  return _FDEV_EOF;

	return Serial_ReceiveByte();
}
    1336:	c9 01       	movw	r24, r18
    1338:	08 95       	ret

0000133a <fputc>:
    133a:	0f 93       	push	r16
    133c:	1f 93       	push	r17
    133e:	cf 93       	push	r28
    1340:	df 93       	push	r29
    1342:	8c 01       	movw	r16, r24
    1344:	eb 01       	movw	r28, r22
    1346:	8b 81       	ldd	r24, Y+3	; 0x03
    1348:	81 ff       	sbrs	r24, 1
    134a:	1b c0       	rjmp	.+54     	; 0x1382 <fputc+0x48>
    134c:	82 ff       	sbrs	r24, 2
    134e:	0d c0       	rjmp	.+26     	; 0x136a <fputc+0x30>
    1350:	2e 81       	ldd	r18, Y+6	; 0x06
    1352:	3f 81       	ldd	r19, Y+7	; 0x07
    1354:	8c 81       	ldd	r24, Y+4	; 0x04
    1356:	9d 81       	ldd	r25, Y+5	; 0x05
    1358:	28 17       	cp	r18, r24
    135a:	39 07       	cpc	r19, r25
    135c:	64 f4       	brge	.+24     	; 0x1376 <fputc+0x3c>
    135e:	e8 81       	ld	r30, Y
    1360:	f9 81       	ldd	r31, Y+1	; 0x01
    1362:	01 93       	st	Z+, r16
    1364:	f9 83       	std	Y+1, r31	; 0x01
    1366:	e8 83       	st	Y, r30
    1368:	06 c0       	rjmp	.+12     	; 0x1376 <fputc+0x3c>
    136a:	e8 85       	ldd	r30, Y+8	; 0x08
    136c:	f9 85       	ldd	r31, Y+9	; 0x09
    136e:	80 2f       	mov	r24, r16
    1370:	09 95       	icall
    1372:	89 2b       	or	r24, r25
    1374:	31 f4       	brne	.+12     	; 0x1382 <fputc+0x48>
    1376:	8e 81       	ldd	r24, Y+6	; 0x06
    1378:	9f 81       	ldd	r25, Y+7	; 0x07
    137a:	01 96       	adiw	r24, 0x01	; 1
    137c:	9f 83       	std	Y+7, r25	; 0x07
    137e:	8e 83       	std	Y+6, r24	; 0x06
    1380:	02 c0       	rjmp	.+4      	; 0x1386 <fputc+0x4c>
    1382:	0f ef       	ldi	r16, 0xFF	; 255
    1384:	1f ef       	ldi	r17, 0xFF	; 255
    1386:	c8 01       	movw	r24, r16
    1388:	df 91       	pop	r29
    138a:	cf 91       	pop	r28
    138c:	1f 91       	pop	r17
    138e:	0f 91       	pop	r16
    1390:	08 95       	ret

00001392 <printf_P>:
    1392:	df 93       	push	r29
    1394:	cf 93       	push	r28
    1396:	cd b7       	in	r28, 0x3d	; 61
    1398:	de b7       	in	r29, 0x3e	; 62
    139a:	fe 01       	movw	r30, r28
    139c:	35 96       	adiw	r30, 0x05	; 5
    139e:	61 91       	ld	r22, Z+
    13a0:	71 91       	ld	r23, Z+
    13a2:	a0 91 30 01 	lds	r26, 0x0130
    13a6:	b0 91 31 01 	lds	r27, 0x0131
    13aa:	13 96       	adiw	r26, 0x03	; 3
    13ac:	8c 91       	ld	r24, X
    13ae:	13 97       	sbiw	r26, 0x03	; 3
    13b0:	88 60       	ori	r24, 0x08	; 8
    13b2:	13 96       	adiw	r26, 0x03	; 3
    13b4:	8c 93       	st	X, r24
    13b6:	80 91 30 01 	lds	r24, 0x0130
    13ba:	90 91 31 01 	lds	r25, 0x0131
    13be:	af 01       	movw	r20, r30
    13c0:	3f d0       	rcall	.+126    	; 0x1440 <vfprintf>
    13c2:	e0 91 30 01 	lds	r30, 0x0130
    13c6:	f0 91 31 01 	lds	r31, 0x0131
    13ca:	23 81       	ldd	r18, Z+3	; 0x03
    13cc:	27 7f       	andi	r18, 0xF7	; 247
    13ce:	23 83       	std	Z+3, r18	; 0x03
    13d0:	cf 91       	pop	r28
    13d2:	df 91       	pop	r29
    13d4:	08 95       	ret

000013d6 <puts_P>:
    13d6:	0f 93       	push	r16
    13d8:	1f 93       	push	r17
    13da:	cf 93       	push	r28
    13dc:	df 93       	push	r29
    13de:	ec 01       	movw	r28, r24
    13e0:	e0 91 30 01 	lds	r30, 0x0130
    13e4:	f0 91 31 01 	lds	r31, 0x0131
    13e8:	83 81       	ldd	r24, Z+3	; 0x03
    13ea:	81 ff       	sbrs	r24, 1
    13ec:	21 c0       	rjmp	.+66     	; 0x1430 <puts_P+0x5a>
    13ee:	00 e0       	ldi	r16, 0x00	; 0
    13f0:	10 e0       	ldi	r17, 0x00	; 0
    13f2:	0e c0       	rjmp	.+28     	; 0x1410 <puts_P+0x3a>
    13f4:	e0 91 30 01 	lds	r30, 0x0130
    13f8:	f0 91 31 01 	lds	r31, 0x0131
    13fc:	20 85       	ldd	r18, Z+8	; 0x08
    13fe:	31 85       	ldd	r19, Z+9	; 0x09
    1400:	bf 01       	movw	r22, r30
    1402:	f9 01       	movw	r30, r18
    1404:	09 95       	icall
    1406:	89 2b       	or	r24, r25
    1408:	11 f0       	breq	.+4      	; 0x140e <puts_P+0x38>
    140a:	0f ef       	ldi	r16, 0xFF	; 255
    140c:	1f ef       	ldi	r17, 0xFF	; 255
    140e:	21 96       	adiw	r28, 0x01	; 1
    1410:	fe 01       	movw	r30, r28
    1412:	84 91       	lpm	r24, Z+
    1414:	88 23       	and	r24, r24
    1416:	71 f7       	brne	.-36     	; 0x13f4 <puts_P+0x1e>
    1418:	e0 91 30 01 	lds	r30, 0x0130
    141c:	f0 91 31 01 	lds	r31, 0x0131
    1420:	20 85       	ldd	r18, Z+8	; 0x08
    1422:	31 85       	ldd	r19, Z+9	; 0x09
    1424:	8a e0       	ldi	r24, 0x0A	; 10
    1426:	bf 01       	movw	r22, r30
    1428:	f9 01       	movw	r30, r18
    142a:	09 95       	icall
    142c:	89 2b       	or	r24, r25
    142e:	11 f0       	breq	.+4      	; 0x1434 <puts_P+0x5e>
    1430:	0f ef       	ldi	r16, 0xFF	; 255
    1432:	1f ef       	ldi	r17, 0xFF	; 255
    1434:	c8 01       	movw	r24, r16
    1436:	df 91       	pop	r29
    1438:	cf 91       	pop	r28
    143a:	1f 91       	pop	r17
    143c:	0f 91       	pop	r16
    143e:	08 95       	ret

00001440 <vfprintf>:
    1440:	2f 92       	push	r2
    1442:	3f 92       	push	r3
    1444:	4f 92       	push	r4
    1446:	5f 92       	push	r5
    1448:	6f 92       	push	r6
    144a:	7f 92       	push	r7
    144c:	8f 92       	push	r8
    144e:	9f 92       	push	r9
    1450:	af 92       	push	r10
    1452:	bf 92       	push	r11
    1454:	cf 92       	push	r12
    1456:	df 92       	push	r13
    1458:	ef 92       	push	r14
    145a:	ff 92       	push	r15
    145c:	0f 93       	push	r16
    145e:	1f 93       	push	r17
    1460:	df 93       	push	r29
    1462:	cf 93       	push	r28
    1464:	cd b7       	in	r28, 0x3d	; 61
    1466:	de b7       	in	r29, 0x3e	; 62
    1468:	2b 97       	sbiw	r28, 0x0b	; 11
    146a:	0f b6       	in	r0, 0x3f	; 63
    146c:	f8 94       	cli
    146e:	de bf       	out	0x3e, r29	; 62
    1470:	0f be       	out	0x3f, r0	; 63
    1472:	cd bf       	out	0x3d, r28	; 61
    1474:	3c 01       	movw	r6, r24
    1476:	2b 01       	movw	r4, r22
    1478:	5a 01       	movw	r10, r20
    147a:	fc 01       	movw	r30, r24
    147c:	17 82       	std	Z+7, r1	; 0x07
    147e:	16 82       	std	Z+6, r1	; 0x06
    1480:	83 81       	ldd	r24, Z+3	; 0x03
    1482:	81 fd       	sbrc	r24, 1
    1484:	03 c0       	rjmp	.+6      	; 0x148c <vfprintf+0x4c>
    1486:	6f ef       	ldi	r22, 0xFF	; 255
    1488:	7f ef       	ldi	r23, 0xFF	; 255
    148a:	b9 c1       	rjmp	.+882    	; 0x17fe <vfprintf+0x3be>
    148c:	9a e0       	ldi	r25, 0x0A	; 10
    148e:	89 2e       	mov	r8, r25
    1490:	1e 01       	movw	r2, r28
    1492:	08 94       	sec
    1494:	21 1c       	adc	r2, r1
    1496:	31 1c       	adc	r3, r1
    1498:	f3 01       	movw	r30, r6
    149a:	23 81       	ldd	r18, Z+3	; 0x03
    149c:	f2 01       	movw	r30, r4
    149e:	23 fd       	sbrc	r18, 3
    14a0:	85 91       	lpm	r24, Z+
    14a2:	23 ff       	sbrs	r18, 3
    14a4:	81 91       	ld	r24, Z+
    14a6:	2f 01       	movw	r4, r30
    14a8:	88 23       	and	r24, r24
    14aa:	09 f4       	brne	.+2      	; 0x14ae <vfprintf+0x6e>
    14ac:	a5 c1       	rjmp	.+842    	; 0x17f8 <vfprintf+0x3b8>
    14ae:	85 32       	cpi	r24, 0x25	; 37
    14b0:	39 f4       	brne	.+14     	; 0x14c0 <vfprintf+0x80>
    14b2:	23 fd       	sbrc	r18, 3
    14b4:	85 91       	lpm	r24, Z+
    14b6:	23 ff       	sbrs	r18, 3
    14b8:	81 91       	ld	r24, Z+
    14ba:	2f 01       	movw	r4, r30
    14bc:	85 32       	cpi	r24, 0x25	; 37
    14be:	21 f4       	brne	.+8      	; 0x14c8 <vfprintf+0x88>
    14c0:	90 e0       	ldi	r25, 0x00	; 0
    14c2:	b3 01       	movw	r22, r6
    14c4:	3a df       	rcall	.-396    	; 0x133a <fputc>
    14c6:	e8 cf       	rjmp	.-48     	; 0x1498 <vfprintf+0x58>
    14c8:	98 2f       	mov	r25, r24
    14ca:	ff 24       	eor	r15, r15
    14cc:	ee 24       	eor	r14, r14
    14ce:	99 24       	eor	r9, r9
    14d0:	ff e1       	ldi	r31, 0x1F	; 31
    14d2:	ff 15       	cp	r31, r15
    14d4:	d0 f0       	brcs	.+52     	; 0x150a <vfprintf+0xca>
    14d6:	9b 32       	cpi	r25, 0x2B	; 43
    14d8:	69 f0       	breq	.+26     	; 0x14f4 <vfprintf+0xb4>
    14da:	9c 32       	cpi	r25, 0x2C	; 44
    14dc:	28 f4       	brcc	.+10     	; 0x14e8 <vfprintf+0xa8>
    14de:	90 32       	cpi	r25, 0x20	; 32
    14e0:	59 f0       	breq	.+22     	; 0x14f8 <vfprintf+0xb8>
    14e2:	93 32       	cpi	r25, 0x23	; 35
    14e4:	91 f4       	brne	.+36     	; 0x150a <vfprintf+0xca>
    14e6:	0e c0       	rjmp	.+28     	; 0x1504 <vfprintf+0xc4>
    14e8:	9d 32       	cpi	r25, 0x2D	; 45
    14ea:	49 f0       	breq	.+18     	; 0x14fe <vfprintf+0xbe>
    14ec:	90 33       	cpi	r25, 0x30	; 48
    14ee:	69 f4       	brne	.+26     	; 0x150a <vfprintf+0xca>
    14f0:	41 e0       	ldi	r20, 0x01	; 1
    14f2:	24 c0       	rjmp	.+72     	; 0x153c <vfprintf+0xfc>
    14f4:	52 e0       	ldi	r21, 0x02	; 2
    14f6:	f5 2a       	or	r15, r21
    14f8:	84 e0       	ldi	r24, 0x04	; 4
    14fa:	f8 2a       	or	r15, r24
    14fc:	28 c0       	rjmp	.+80     	; 0x154e <vfprintf+0x10e>
    14fe:	98 e0       	ldi	r25, 0x08	; 8
    1500:	f9 2a       	or	r15, r25
    1502:	25 c0       	rjmp	.+74     	; 0x154e <vfprintf+0x10e>
    1504:	e0 e1       	ldi	r30, 0x10	; 16
    1506:	fe 2a       	or	r15, r30
    1508:	22 c0       	rjmp	.+68     	; 0x154e <vfprintf+0x10e>
    150a:	f7 fc       	sbrc	r15, 7
    150c:	29 c0       	rjmp	.+82     	; 0x1560 <vfprintf+0x120>
    150e:	89 2f       	mov	r24, r25
    1510:	80 53       	subi	r24, 0x30	; 48
    1512:	8a 30       	cpi	r24, 0x0A	; 10
    1514:	70 f4       	brcc	.+28     	; 0x1532 <vfprintf+0xf2>
    1516:	f6 fe       	sbrs	r15, 6
    1518:	05 c0       	rjmp	.+10     	; 0x1524 <vfprintf+0xe4>
    151a:	98 9c       	mul	r9, r8
    151c:	90 2c       	mov	r9, r0
    151e:	11 24       	eor	r1, r1
    1520:	98 0e       	add	r9, r24
    1522:	15 c0       	rjmp	.+42     	; 0x154e <vfprintf+0x10e>
    1524:	e8 9c       	mul	r14, r8
    1526:	e0 2c       	mov	r14, r0
    1528:	11 24       	eor	r1, r1
    152a:	e8 0e       	add	r14, r24
    152c:	f0 e2       	ldi	r31, 0x20	; 32
    152e:	ff 2a       	or	r15, r31
    1530:	0e c0       	rjmp	.+28     	; 0x154e <vfprintf+0x10e>
    1532:	9e 32       	cpi	r25, 0x2E	; 46
    1534:	29 f4       	brne	.+10     	; 0x1540 <vfprintf+0x100>
    1536:	f6 fc       	sbrc	r15, 6
    1538:	5f c1       	rjmp	.+702    	; 0x17f8 <vfprintf+0x3b8>
    153a:	40 e4       	ldi	r20, 0x40	; 64
    153c:	f4 2a       	or	r15, r20
    153e:	07 c0       	rjmp	.+14     	; 0x154e <vfprintf+0x10e>
    1540:	9c 36       	cpi	r25, 0x6C	; 108
    1542:	19 f4       	brne	.+6      	; 0x154a <vfprintf+0x10a>
    1544:	50 e8       	ldi	r21, 0x80	; 128
    1546:	f5 2a       	or	r15, r21
    1548:	02 c0       	rjmp	.+4      	; 0x154e <vfprintf+0x10e>
    154a:	98 36       	cpi	r25, 0x68	; 104
    154c:	49 f4       	brne	.+18     	; 0x1560 <vfprintf+0x120>
    154e:	f2 01       	movw	r30, r4
    1550:	23 fd       	sbrc	r18, 3
    1552:	95 91       	lpm	r25, Z+
    1554:	23 ff       	sbrs	r18, 3
    1556:	91 91       	ld	r25, Z+
    1558:	2f 01       	movw	r4, r30
    155a:	99 23       	and	r25, r25
    155c:	09 f0       	breq	.+2      	; 0x1560 <vfprintf+0x120>
    155e:	b8 cf       	rjmp	.-144    	; 0x14d0 <vfprintf+0x90>
    1560:	89 2f       	mov	r24, r25
    1562:	85 54       	subi	r24, 0x45	; 69
    1564:	83 30       	cpi	r24, 0x03	; 3
    1566:	18 f0       	brcs	.+6      	; 0x156e <vfprintf+0x12e>
    1568:	80 52       	subi	r24, 0x20	; 32
    156a:	83 30       	cpi	r24, 0x03	; 3
    156c:	38 f4       	brcc	.+14     	; 0x157c <vfprintf+0x13c>
    156e:	44 e0       	ldi	r20, 0x04	; 4
    1570:	50 e0       	ldi	r21, 0x00	; 0
    1572:	a4 0e       	add	r10, r20
    1574:	b5 1e       	adc	r11, r21
    1576:	5f e3       	ldi	r21, 0x3F	; 63
    1578:	59 83       	std	Y+1, r21	; 0x01
    157a:	0f c0       	rjmp	.+30     	; 0x159a <vfprintf+0x15a>
    157c:	93 36       	cpi	r25, 0x63	; 99
    157e:	31 f0       	breq	.+12     	; 0x158c <vfprintf+0x14c>
    1580:	93 37       	cpi	r25, 0x73	; 115
    1582:	79 f0       	breq	.+30     	; 0x15a2 <vfprintf+0x162>
    1584:	93 35       	cpi	r25, 0x53	; 83
    1586:	09 f0       	breq	.+2      	; 0x158a <vfprintf+0x14a>
    1588:	52 c0       	rjmp	.+164    	; 0x162e <vfprintf+0x1ee>
    158a:	1f c0       	rjmp	.+62     	; 0x15ca <vfprintf+0x18a>
    158c:	f5 01       	movw	r30, r10
    158e:	80 81       	ld	r24, Z
    1590:	89 83       	std	Y+1, r24	; 0x01
    1592:	42 e0       	ldi	r20, 0x02	; 2
    1594:	50 e0       	ldi	r21, 0x00	; 0
    1596:	a4 0e       	add	r10, r20
    1598:	b5 1e       	adc	r11, r21
    159a:	61 01       	movw	r12, r2
    159c:	01 e0       	ldi	r16, 0x01	; 1
    159e:	10 e0       	ldi	r17, 0x00	; 0
    15a0:	11 c0       	rjmp	.+34     	; 0x15c4 <vfprintf+0x184>
    15a2:	f5 01       	movw	r30, r10
    15a4:	c0 80       	ld	r12, Z
    15a6:	d1 80       	ldd	r13, Z+1	; 0x01
    15a8:	f6 fc       	sbrc	r15, 6
    15aa:	03 c0       	rjmp	.+6      	; 0x15b2 <vfprintf+0x172>
    15ac:	6f ef       	ldi	r22, 0xFF	; 255
    15ae:	7f ef       	ldi	r23, 0xFF	; 255
    15b0:	02 c0       	rjmp	.+4      	; 0x15b6 <vfprintf+0x176>
    15b2:	69 2d       	mov	r22, r9
    15b4:	70 e0       	ldi	r23, 0x00	; 0
    15b6:	42 e0       	ldi	r20, 0x02	; 2
    15b8:	50 e0       	ldi	r21, 0x00	; 0
    15ba:	a4 0e       	add	r10, r20
    15bc:	b5 1e       	adc	r11, r21
    15be:	c6 01       	movw	r24, r12
    15c0:	43 d1       	rcall	.+646    	; 0x1848 <strnlen>
    15c2:	8c 01       	movw	r16, r24
    15c4:	5f e7       	ldi	r21, 0x7F	; 127
    15c6:	f5 22       	and	r15, r21
    15c8:	13 c0       	rjmp	.+38     	; 0x15f0 <vfprintf+0x1b0>
    15ca:	f5 01       	movw	r30, r10
    15cc:	c0 80       	ld	r12, Z
    15ce:	d1 80       	ldd	r13, Z+1	; 0x01
    15d0:	f6 fc       	sbrc	r15, 6
    15d2:	03 c0       	rjmp	.+6      	; 0x15da <vfprintf+0x19a>
    15d4:	6f ef       	ldi	r22, 0xFF	; 255
    15d6:	7f ef       	ldi	r23, 0xFF	; 255
    15d8:	02 c0       	rjmp	.+4      	; 0x15de <vfprintf+0x19e>
    15da:	69 2d       	mov	r22, r9
    15dc:	70 e0       	ldi	r23, 0x00	; 0
    15de:	42 e0       	ldi	r20, 0x02	; 2
    15e0:	50 e0       	ldi	r21, 0x00	; 0
    15e2:	a4 0e       	add	r10, r20
    15e4:	b5 1e       	adc	r11, r21
    15e6:	c6 01       	movw	r24, r12
    15e8:	24 d1       	rcall	.+584    	; 0x1832 <strnlen_P>
    15ea:	8c 01       	movw	r16, r24
    15ec:	50 e8       	ldi	r21, 0x80	; 128
    15ee:	f5 2a       	or	r15, r21
    15f0:	f3 fe       	sbrs	r15, 3
    15f2:	06 c0       	rjmp	.+12     	; 0x1600 <vfprintf+0x1c0>
    15f4:	18 c0       	rjmp	.+48     	; 0x1626 <vfprintf+0x1e6>
    15f6:	80 e2       	ldi	r24, 0x20	; 32
    15f8:	90 e0       	ldi	r25, 0x00	; 0
    15fa:	b3 01       	movw	r22, r6
    15fc:	9e de       	rcall	.-708    	; 0x133a <fputc>
    15fe:	ea 94       	dec	r14
    1600:	8e 2d       	mov	r24, r14
    1602:	90 e0       	ldi	r25, 0x00	; 0
    1604:	08 17       	cp	r16, r24
    1606:	19 07       	cpc	r17, r25
    1608:	b0 f3       	brcs	.-20     	; 0x15f6 <vfprintf+0x1b6>
    160a:	0d c0       	rjmp	.+26     	; 0x1626 <vfprintf+0x1e6>
    160c:	f6 01       	movw	r30, r12
    160e:	f7 fc       	sbrc	r15, 7
    1610:	85 91       	lpm	r24, Z+
    1612:	f7 fe       	sbrs	r15, 7
    1614:	81 91       	ld	r24, Z+
    1616:	6f 01       	movw	r12, r30
    1618:	90 e0       	ldi	r25, 0x00	; 0
    161a:	b3 01       	movw	r22, r6
    161c:	8e de       	rcall	.-740    	; 0x133a <fputc>
    161e:	e1 10       	cpse	r14, r1
    1620:	ea 94       	dec	r14
    1622:	01 50       	subi	r16, 0x01	; 1
    1624:	10 40       	sbci	r17, 0x00	; 0
    1626:	01 15       	cp	r16, r1
    1628:	11 05       	cpc	r17, r1
    162a:	81 f7       	brne	.-32     	; 0x160c <vfprintf+0x1cc>
    162c:	e2 c0       	rjmp	.+452    	; 0x17f2 <vfprintf+0x3b2>
    162e:	94 36       	cpi	r25, 0x64	; 100
    1630:	11 f0       	breq	.+4      	; 0x1636 <vfprintf+0x1f6>
    1632:	99 36       	cpi	r25, 0x69	; 105
    1634:	61 f5       	brne	.+88     	; 0x168e <vfprintf+0x24e>
    1636:	f7 fe       	sbrs	r15, 7
    1638:	08 c0       	rjmp	.+16     	; 0x164a <vfprintf+0x20a>
    163a:	f5 01       	movw	r30, r10
    163c:	20 81       	ld	r18, Z
    163e:	31 81       	ldd	r19, Z+1	; 0x01
    1640:	42 81       	ldd	r20, Z+2	; 0x02
    1642:	53 81       	ldd	r21, Z+3	; 0x03
    1644:	84 e0       	ldi	r24, 0x04	; 4
    1646:	90 e0       	ldi	r25, 0x00	; 0
    1648:	0a c0       	rjmp	.+20     	; 0x165e <vfprintf+0x21e>
    164a:	f5 01       	movw	r30, r10
    164c:	80 81       	ld	r24, Z
    164e:	91 81       	ldd	r25, Z+1	; 0x01
    1650:	9c 01       	movw	r18, r24
    1652:	44 27       	eor	r20, r20
    1654:	37 fd       	sbrc	r19, 7
    1656:	40 95       	com	r20
    1658:	54 2f       	mov	r21, r20
    165a:	82 e0       	ldi	r24, 0x02	; 2
    165c:	90 e0       	ldi	r25, 0x00	; 0
    165e:	a8 0e       	add	r10, r24
    1660:	b9 1e       	adc	r11, r25
    1662:	9f e6       	ldi	r25, 0x6F	; 111
    1664:	f9 22       	and	r15, r25
    1666:	57 ff       	sbrs	r21, 7
    1668:	09 c0       	rjmp	.+18     	; 0x167c <vfprintf+0x23c>
    166a:	50 95       	com	r21
    166c:	40 95       	com	r20
    166e:	30 95       	com	r19
    1670:	21 95       	neg	r18
    1672:	3f 4f       	sbci	r19, 0xFF	; 255
    1674:	4f 4f       	sbci	r20, 0xFF	; 255
    1676:	5f 4f       	sbci	r21, 0xFF	; 255
    1678:	e0 e8       	ldi	r30, 0x80	; 128
    167a:	fe 2a       	or	r15, r30
    167c:	ca 01       	movw	r24, r20
    167e:	b9 01       	movw	r22, r18
    1680:	a1 01       	movw	r20, r2
    1682:	2a e0       	ldi	r18, 0x0A	; 10
    1684:	30 e0       	ldi	r19, 0x00	; 0
    1686:	eb d0       	rcall	.+470    	; 0x185e <__ultoa_invert>
    1688:	d8 2e       	mov	r13, r24
    168a:	d2 18       	sub	r13, r2
    168c:	3f c0       	rjmp	.+126    	; 0x170c <vfprintf+0x2cc>
    168e:	95 37       	cpi	r25, 0x75	; 117
    1690:	29 f4       	brne	.+10     	; 0x169c <vfprintf+0x25c>
    1692:	1f 2d       	mov	r17, r15
    1694:	1f 7e       	andi	r17, 0xEF	; 239
    1696:	2a e0       	ldi	r18, 0x0A	; 10
    1698:	30 e0       	ldi	r19, 0x00	; 0
    169a:	1d c0       	rjmp	.+58     	; 0x16d6 <vfprintf+0x296>
    169c:	1f 2d       	mov	r17, r15
    169e:	19 7f       	andi	r17, 0xF9	; 249
    16a0:	9f 36       	cpi	r25, 0x6F	; 111
    16a2:	61 f0       	breq	.+24     	; 0x16bc <vfprintf+0x27c>
    16a4:	90 37       	cpi	r25, 0x70	; 112
    16a6:	20 f4       	brcc	.+8      	; 0x16b0 <vfprintf+0x270>
    16a8:	98 35       	cpi	r25, 0x58	; 88
    16aa:	09 f0       	breq	.+2      	; 0x16ae <vfprintf+0x26e>
    16ac:	a5 c0       	rjmp	.+330    	; 0x17f8 <vfprintf+0x3b8>
    16ae:	0f c0       	rjmp	.+30     	; 0x16ce <vfprintf+0x28e>
    16b0:	90 37       	cpi	r25, 0x70	; 112
    16b2:	39 f0       	breq	.+14     	; 0x16c2 <vfprintf+0x282>
    16b4:	98 37       	cpi	r25, 0x78	; 120
    16b6:	09 f0       	breq	.+2      	; 0x16ba <vfprintf+0x27a>
    16b8:	9f c0       	rjmp	.+318    	; 0x17f8 <vfprintf+0x3b8>
    16ba:	04 c0       	rjmp	.+8      	; 0x16c4 <vfprintf+0x284>
    16bc:	28 e0       	ldi	r18, 0x08	; 8
    16be:	30 e0       	ldi	r19, 0x00	; 0
    16c0:	0a c0       	rjmp	.+20     	; 0x16d6 <vfprintf+0x296>
    16c2:	10 61       	ori	r17, 0x10	; 16
    16c4:	14 fd       	sbrc	r17, 4
    16c6:	14 60       	ori	r17, 0x04	; 4
    16c8:	20 e1       	ldi	r18, 0x10	; 16
    16ca:	30 e0       	ldi	r19, 0x00	; 0
    16cc:	04 c0       	rjmp	.+8      	; 0x16d6 <vfprintf+0x296>
    16ce:	14 fd       	sbrc	r17, 4
    16d0:	16 60       	ori	r17, 0x06	; 6
    16d2:	20 e1       	ldi	r18, 0x10	; 16
    16d4:	32 e0       	ldi	r19, 0x02	; 2
    16d6:	17 ff       	sbrs	r17, 7
    16d8:	08 c0       	rjmp	.+16     	; 0x16ea <vfprintf+0x2aa>
    16da:	f5 01       	movw	r30, r10
    16dc:	60 81       	ld	r22, Z
    16de:	71 81       	ldd	r23, Z+1	; 0x01
    16e0:	82 81       	ldd	r24, Z+2	; 0x02
    16e2:	93 81       	ldd	r25, Z+3	; 0x03
    16e4:	44 e0       	ldi	r20, 0x04	; 4
    16e6:	50 e0       	ldi	r21, 0x00	; 0
    16e8:	08 c0       	rjmp	.+16     	; 0x16fa <vfprintf+0x2ba>
    16ea:	f5 01       	movw	r30, r10
    16ec:	80 81       	ld	r24, Z
    16ee:	91 81       	ldd	r25, Z+1	; 0x01
    16f0:	bc 01       	movw	r22, r24
    16f2:	80 e0       	ldi	r24, 0x00	; 0
    16f4:	90 e0       	ldi	r25, 0x00	; 0
    16f6:	42 e0       	ldi	r20, 0x02	; 2
    16f8:	50 e0       	ldi	r21, 0x00	; 0
    16fa:	a4 0e       	add	r10, r20
    16fc:	b5 1e       	adc	r11, r21
    16fe:	a1 01       	movw	r20, r2
    1700:	ae d0       	rcall	.+348    	; 0x185e <__ultoa_invert>
    1702:	d8 2e       	mov	r13, r24
    1704:	d2 18       	sub	r13, r2
    1706:	8f e7       	ldi	r24, 0x7F	; 127
    1708:	f8 2e       	mov	r15, r24
    170a:	f1 22       	and	r15, r17
    170c:	f6 fe       	sbrs	r15, 6
    170e:	0b c0       	rjmp	.+22     	; 0x1726 <vfprintf+0x2e6>
    1710:	5e ef       	ldi	r21, 0xFE	; 254
    1712:	f5 22       	and	r15, r21
    1714:	d9 14       	cp	r13, r9
    1716:	38 f4       	brcc	.+14     	; 0x1726 <vfprintf+0x2e6>
    1718:	f4 fe       	sbrs	r15, 4
    171a:	07 c0       	rjmp	.+14     	; 0x172a <vfprintf+0x2ea>
    171c:	f2 fc       	sbrc	r15, 2
    171e:	05 c0       	rjmp	.+10     	; 0x172a <vfprintf+0x2ea>
    1720:	8f ee       	ldi	r24, 0xEF	; 239
    1722:	f8 22       	and	r15, r24
    1724:	02 c0       	rjmp	.+4      	; 0x172a <vfprintf+0x2ea>
    1726:	1d 2d       	mov	r17, r13
    1728:	01 c0       	rjmp	.+2      	; 0x172c <vfprintf+0x2ec>
    172a:	19 2d       	mov	r17, r9
    172c:	f4 fe       	sbrs	r15, 4
    172e:	0d c0       	rjmp	.+26     	; 0x174a <vfprintf+0x30a>
    1730:	fe 01       	movw	r30, r28
    1732:	ed 0d       	add	r30, r13
    1734:	f1 1d       	adc	r31, r1
    1736:	80 81       	ld	r24, Z
    1738:	80 33       	cpi	r24, 0x30	; 48
    173a:	19 f4       	brne	.+6      	; 0x1742 <vfprintf+0x302>
    173c:	99 ee       	ldi	r25, 0xE9	; 233
    173e:	f9 22       	and	r15, r25
    1740:	08 c0       	rjmp	.+16     	; 0x1752 <vfprintf+0x312>
    1742:	1f 5f       	subi	r17, 0xFF	; 255
    1744:	f2 fe       	sbrs	r15, 2
    1746:	05 c0       	rjmp	.+10     	; 0x1752 <vfprintf+0x312>
    1748:	03 c0       	rjmp	.+6      	; 0x1750 <vfprintf+0x310>
    174a:	8f 2d       	mov	r24, r15
    174c:	86 78       	andi	r24, 0x86	; 134
    174e:	09 f0       	breq	.+2      	; 0x1752 <vfprintf+0x312>
    1750:	1f 5f       	subi	r17, 0xFF	; 255
    1752:	0f 2d       	mov	r16, r15
    1754:	f3 fc       	sbrc	r15, 3
    1756:	13 c0       	rjmp	.+38     	; 0x177e <vfprintf+0x33e>
    1758:	f0 fe       	sbrs	r15, 0
    175a:	0e c0       	rjmp	.+28     	; 0x1778 <vfprintf+0x338>
    175c:	1e 15       	cp	r17, r14
    175e:	10 f0       	brcs	.+4      	; 0x1764 <vfprintf+0x324>
    1760:	9d 2c       	mov	r9, r13
    1762:	0a c0       	rjmp	.+20     	; 0x1778 <vfprintf+0x338>
    1764:	9d 2c       	mov	r9, r13
    1766:	9e 0c       	add	r9, r14
    1768:	91 1a       	sub	r9, r17
    176a:	1e 2d       	mov	r17, r14
    176c:	05 c0       	rjmp	.+10     	; 0x1778 <vfprintf+0x338>
    176e:	80 e2       	ldi	r24, 0x20	; 32
    1770:	90 e0       	ldi	r25, 0x00	; 0
    1772:	b3 01       	movw	r22, r6
    1774:	e2 dd       	rcall	.-1084   	; 0x133a <fputc>
    1776:	1f 5f       	subi	r17, 0xFF	; 255
    1778:	1e 15       	cp	r17, r14
    177a:	c8 f3       	brcs	.-14     	; 0x176e <vfprintf+0x32e>
    177c:	04 c0       	rjmp	.+8      	; 0x1786 <vfprintf+0x346>
    177e:	1e 15       	cp	r17, r14
    1780:	10 f4       	brcc	.+4      	; 0x1786 <vfprintf+0x346>
    1782:	e1 1a       	sub	r14, r17
    1784:	01 c0       	rjmp	.+2      	; 0x1788 <vfprintf+0x348>
    1786:	ee 24       	eor	r14, r14
    1788:	04 ff       	sbrs	r16, 4
    178a:	0e c0       	rjmp	.+28     	; 0x17a8 <vfprintf+0x368>
    178c:	80 e3       	ldi	r24, 0x30	; 48
    178e:	90 e0       	ldi	r25, 0x00	; 0
    1790:	b3 01       	movw	r22, r6
    1792:	d3 dd       	rcall	.-1114   	; 0x133a <fputc>
    1794:	02 ff       	sbrs	r16, 2
    1796:	1b c0       	rjmp	.+54     	; 0x17ce <vfprintf+0x38e>
    1798:	01 fd       	sbrc	r16, 1
    179a:	03 c0       	rjmp	.+6      	; 0x17a2 <vfprintf+0x362>
    179c:	88 e7       	ldi	r24, 0x78	; 120
    179e:	90 e0       	ldi	r25, 0x00	; 0
    17a0:	0e c0       	rjmp	.+28     	; 0x17be <vfprintf+0x37e>
    17a2:	88 e5       	ldi	r24, 0x58	; 88
    17a4:	90 e0       	ldi	r25, 0x00	; 0
    17a6:	0b c0       	rjmp	.+22     	; 0x17be <vfprintf+0x37e>
    17a8:	80 2f       	mov	r24, r16
    17aa:	86 78       	andi	r24, 0x86	; 134
    17ac:	81 f0       	breq	.+32     	; 0x17ce <vfprintf+0x38e>
    17ae:	01 ff       	sbrs	r16, 1
    17b0:	02 c0       	rjmp	.+4      	; 0x17b6 <vfprintf+0x376>
    17b2:	8b e2       	ldi	r24, 0x2B	; 43
    17b4:	01 c0       	rjmp	.+2      	; 0x17b8 <vfprintf+0x378>
    17b6:	80 e2       	ldi	r24, 0x20	; 32
    17b8:	f7 fc       	sbrc	r15, 7
    17ba:	8d e2       	ldi	r24, 0x2D	; 45
    17bc:	90 e0       	ldi	r25, 0x00	; 0
    17be:	b3 01       	movw	r22, r6
    17c0:	bc dd       	rcall	.-1160   	; 0x133a <fputc>
    17c2:	05 c0       	rjmp	.+10     	; 0x17ce <vfprintf+0x38e>
    17c4:	80 e3       	ldi	r24, 0x30	; 48
    17c6:	90 e0       	ldi	r25, 0x00	; 0
    17c8:	b3 01       	movw	r22, r6
    17ca:	b7 dd       	rcall	.-1170   	; 0x133a <fputc>
    17cc:	9a 94       	dec	r9
    17ce:	d9 14       	cp	r13, r9
    17d0:	c8 f3       	brcs	.-14     	; 0x17c4 <vfprintf+0x384>
    17d2:	da 94       	dec	r13
    17d4:	f1 01       	movw	r30, r2
    17d6:	ed 0d       	add	r30, r13
    17d8:	f1 1d       	adc	r31, r1
    17da:	80 81       	ld	r24, Z
    17dc:	90 e0       	ldi	r25, 0x00	; 0
    17de:	b3 01       	movw	r22, r6
    17e0:	ac dd       	rcall	.-1192   	; 0x133a <fputc>
    17e2:	dd 20       	and	r13, r13
    17e4:	b1 f7       	brne	.-20     	; 0x17d2 <vfprintf+0x392>
    17e6:	05 c0       	rjmp	.+10     	; 0x17f2 <vfprintf+0x3b2>
    17e8:	80 e2       	ldi	r24, 0x20	; 32
    17ea:	90 e0       	ldi	r25, 0x00	; 0
    17ec:	b3 01       	movw	r22, r6
    17ee:	a5 dd       	rcall	.-1206   	; 0x133a <fputc>
    17f0:	ea 94       	dec	r14
    17f2:	ee 20       	and	r14, r14
    17f4:	c9 f7       	brne	.-14     	; 0x17e8 <vfprintf+0x3a8>
    17f6:	50 ce       	rjmp	.-864    	; 0x1498 <vfprintf+0x58>
    17f8:	f3 01       	movw	r30, r6
    17fa:	66 81       	ldd	r22, Z+6	; 0x06
    17fc:	77 81       	ldd	r23, Z+7	; 0x07
    17fe:	cb 01       	movw	r24, r22
    1800:	2b 96       	adiw	r28, 0x0b	; 11
    1802:	0f b6       	in	r0, 0x3f	; 63
    1804:	f8 94       	cli
    1806:	de bf       	out	0x3e, r29	; 62
    1808:	0f be       	out	0x3f, r0	; 63
    180a:	cd bf       	out	0x3d, r28	; 61
    180c:	cf 91       	pop	r28
    180e:	df 91       	pop	r29
    1810:	1f 91       	pop	r17
    1812:	0f 91       	pop	r16
    1814:	ff 90       	pop	r15
    1816:	ef 90       	pop	r14
    1818:	df 90       	pop	r13
    181a:	cf 90       	pop	r12
    181c:	bf 90       	pop	r11
    181e:	af 90       	pop	r10
    1820:	9f 90       	pop	r9
    1822:	8f 90       	pop	r8
    1824:	7f 90       	pop	r7
    1826:	6f 90       	pop	r6
    1828:	5f 90       	pop	r5
    182a:	4f 90       	pop	r4
    182c:	3f 90       	pop	r3
    182e:	2f 90       	pop	r2
    1830:	08 95       	ret

00001832 <strnlen_P>:
    1832:	fc 01       	movw	r30, r24
    1834:	05 90       	lpm	r0, Z+
    1836:	61 50       	subi	r22, 0x01	; 1
    1838:	70 40       	sbci	r23, 0x00	; 0
    183a:	01 10       	cpse	r0, r1
    183c:	d8 f7       	brcc	.-10     	; 0x1834 <strnlen_P+0x2>
    183e:	80 95       	com	r24
    1840:	90 95       	com	r25
    1842:	8e 0f       	add	r24, r30
    1844:	9f 1f       	adc	r25, r31
    1846:	08 95       	ret

00001848 <strnlen>:
    1848:	fc 01       	movw	r30, r24
    184a:	61 50       	subi	r22, 0x01	; 1
    184c:	70 40       	sbci	r23, 0x00	; 0
    184e:	01 90       	ld	r0, Z+
    1850:	01 10       	cpse	r0, r1
    1852:	d8 f7       	brcc	.-10     	; 0x184a <strnlen+0x2>
    1854:	80 95       	com	r24
    1856:	90 95       	com	r25
    1858:	8e 0f       	add	r24, r30
    185a:	9f 1f       	adc	r25, r31
    185c:	08 95       	ret

0000185e <__ultoa_invert>:
    185e:	fa 01       	movw	r30, r20
    1860:	aa 27       	eor	r26, r26
    1862:	28 30       	cpi	r18, 0x08	; 8
    1864:	51 f1       	breq	.+84     	; 0x18ba <__ultoa_invert+0x5c>
    1866:	20 31       	cpi	r18, 0x10	; 16
    1868:	81 f1       	breq	.+96     	; 0x18ca <__ultoa_invert+0x6c>
    186a:	e8 94       	clt
    186c:	6f 93       	push	r22
    186e:	6e 7f       	andi	r22, 0xFE	; 254
    1870:	6e 5f       	subi	r22, 0xFE	; 254
    1872:	7f 4f       	sbci	r23, 0xFF	; 255
    1874:	8f 4f       	sbci	r24, 0xFF	; 255
    1876:	9f 4f       	sbci	r25, 0xFF	; 255
    1878:	af 4f       	sbci	r26, 0xFF	; 255
    187a:	b1 e0       	ldi	r27, 0x01	; 1
    187c:	3e d0       	rcall	.+124    	; 0x18fa <__ultoa_invert+0x9c>
    187e:	b4 e0       	ldi	r27, 0x04	; 4
    1880:	3c d0       	rcall	.+120    	; 0x18fa <__ultoa_invert+0x9c>
    1882:	67 0f       	add	r22, r23
    1884:	78 1f       	adc	r23, r24
    1886:	89 1f       	adc	r24, r25
    1888:	9a 1f       	adc	r25, r26
    188a:	a1 1d       	adc	r26, r1
    188c:	68 0f       	add	r22, r24
    188e:	79 1f       	adc	r23, r25
    1890:	8a 1f       	adc	r24, r26
    1892:	91 1d       	adc	r25, r1
    1894:	a1 1d       	adc	r26, r1
    1896:	6a 0f       	add	r22, r26
    1898:	71 1d       	adc	r23, r1
    189a:	81 1d       	adc	r24, r1
    189c:	91 1d       	adc	r25, r1
    189e:	a1 1d       	adc	r26, r1
    18a0:	20 d0       	rcall	.+64     	; 0x18e2 <__ultoa_invert+0x84>
    18a2:	09 f4       	brne	.+2      	; 0x18a6 <__ultoa_invert+0x48>
    18a4:	68 94       	set
    18a6:	3f 91       	pop	r19
    18a8:	2a e0       	ldi	r18, 0x0A	; 10
    18aa:	26 9f       	mul	r18, r22
    18ac:	11 24       	eor	r1, r1
    18ae:	30 19       	sub	r19, r0
    18b0:	30 5d       	subi	r19, 0xD0	; 208
    18b2:	31 93       	st	Z+, r19
    18b4:	de f6       	brtc	.-74     	; 0x186c <__ultoa_invert+0xe>
    18b6:	cf 01       	movw	r24, r30
    18b8:	08 95       	ret
    18ba:	46 2f       	mov	r20, r22
    18bc:	47 70       	andi	r20, 0x07	; 7
    18be:	40 5d       	subi	r20, 0xD0	; 208
    18c0:	41 93       	st	Z+, r20
    18c2:	b3 e0       	ldi	r27, 0x03	; 3
    18c4:	0f d0       	rcall	.+30     	; 0x18e4 <__ultoa_invert+0x86>
    18c6:	c9 f7       	brne	.-14     	; 0x18ba <__ultoa_invert+0x5c>
    18c8:	f6 cf       	rjmp	.-20     	; 0x18b6 <__ultoa_invert+0x58>
    18ca:	46 2f       	mov	r20, r22
    18cc:	4f 70       	andi	r20, 0x0F	; 15
    18ce:	40 5d       	subi	r20, 0xD0	; 208
    18d0:	4a 33       	cpi	r20, 0x3A	; 58
    18d2:	18 f0       	brcs	.+6      	; 0x18da <__ultoa_invert+0x7c>
    18d4:	49 5d       	subi	r20, 0xD9	; 217
    18d6:	31 fd       	sbrc	r19, 1
    18d8:	40 52       	subi	r20, 0x20	; 32
    18da:	41 93       	st	Z+, r20
    18dc:	02 d0       	rcall	.+4      	; 0x18e2 <__ultoa_invert+0x84>
    18de:	a9 f7       	brne	.-22     	; 0x18ca <__ultoa_invert+0x6c>
    18e0:	ea cf       	rjmp	.-44     	; 0x18b6 <__ultoa_invert+0x58>
    18e2:	b4 e0       	ldi	r27, 0x04	; 4
    18e4:	a6 95       	lsr	r26
    18e6:	97 95       	ror	r25
    18e8:	87 95       	ror	r24
    18ea:	77 95       	ror	r23
    18ec:	67 95       	ror	r22
    18ee:	ba 95       	dec	r27
    18f0:	c9 f7       	brne	.-14     	; 0x18e4 <__ultoa_invert+0x86>
    18f2:	00 97       	sbiw	r24, 0x00	; 0
    18f4:	61 05       	cpc	r22, r1
    18f6:	71 05       	cpc	r23, r1
    18f8:	08 95       	ret
    18fa:	9b 01       	movw	r18, r22
    18fc:	ac 01       	movw	r20, r24
    18fe:	0a 2e       	mov	r0, r26
    1900:	06 94       	lsr	r0
    1902:	57 95       	ror	r21
    1904:	47 95       	ror	r20
    1906:	37 95       	ror	r19
    1908:	27 95       	ror	r18
    190a:	ba 95       	dec	r27
    190c:	c9 f7       	brne	.-14     	; 0x1900 <__ultoa_invert+0xa2>
    190e:	62 0f       	add	r22, r18
    1910:	73 1f       	adc	r23, r19
    1912:	84 1f       	adc	r24, r20
    1914:	95 1f       	adc	r25, r21
    1916:	a0 1d       	adc	r26, r0
    1918:	08 95       	ret

0000191a <_exit>:
    191a:	f8 94       	cli

0000191c <__stop_program>:
    191c:	ff cf       	rjmp	.-2      	; 0x191c <__stop_program>
