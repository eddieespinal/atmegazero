
MassStorageHost.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000026  00800100  00002646  000026da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002646  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000023  00800126  00800126  00002700  2**0
                  ALLOC
  3 .debug_aranges 000003a8  00000000  00000000  00002700  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000908  00000000  00000000  00002aa8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000061d7  00000000  00000000  000033b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000019c3  00000000  00000000  00009587  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00004721  00000000  00000000  0000af4a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000590  00000000  00000000  0000f66c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00002714  00000000  00000000  0000fbfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00002c35  00000000  00000000  00012310  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000004d8  00000000  00000000  00014f45  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
uint8_t MassStore_WriteDeviceBlock(const uint8_t LUNIndex,
                                   const uint32_t BlockAddress,
                                   const uint8_t Blocks,
                                   const uint16_t BlockSize,
                                   void* BufferPtr)
{
       0:	26 c2       	rjmp	.+1100   	; 0x44e <__ctors_end>
		Pipe_DisablePipe();
	}
}

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
       2:	00 00       	nop
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
       4:	42 c2       	rjmp	.+1156   	; 0x48a <__bad_interrupt>
{
	USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, AfterType);

	if (*BytesRem)
	  USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, Type);
}
       6:	00 00       	nop
	return USB_Host_SendControlRequest(NULL);
}

uint8_t USB_Host_SetInterfaceAltSetting(const uint8_t InterfaceIndex,
                                        const uint8_t AltSetting)
{
       8:	40 c2       	rjmp	.+1152   	; 0x48a <__bad_interrupt>

	return Serial_ReceiveByte();
}

int Serial_getchar_Blocking(FILE *Stream)
{
       a:	00 00       	nop
       c:	3e c2       	rjmp	.+1148   	; 0x48a <__bad_interrupt>
       e:	00 00       	nop
      10:	3c c2       	rjmp	.+1144   	; 0x48a <__bad_interrupt>
      12:	00 00       	nop
      14:	3a c2       	rjmp	.+1140   	; 0x48a <__bad_interrupt>
      16:	00 00       	nop
      18:	38 c2       	rjmp	.+1136   	; 0x48a <__bad_interrupt>
      1a:	00 00       	nop
      1c:	36 c2       	rjmp	.+1132   	; 0x48a <__bad_interrupt>
      1e:	00 00       	nop
      20:	34 c2       	rjmp	.+1128   	; 0x48a <__bad_interrupt>
      22:	00 00       	nop
      24:	32 c2       	rjmp	.+1124   	; 0x48a <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 85 0c 	jmp	0x190a	; 0x190a <__vector_10>
      2c:	2e c2       	rjmp	.+1116   	; 0x48a <__bad_interrupt>
      2e:	00 00       	nop
      30:	2c c2       	rjmp	.+1112   	; 0x48a <__bad_interrupt>
      32:	00 00       	nop
      34:	2a c2       	rjmp	.+1108   	; 0x48a <__bad_interrupt>
      36:	00 00       	nop
      38:	28 c2       	rjmp	.+1104   	; 0x48a <__bad_interrupt>
      3a:	00 00       	nop
      3c:	26 c2       	rjmp	.+1100   	; 0x48a <__bad_interrupt>
      3e:	00 00       	nop
      40:	24 c2       	rjmp	.+1096   	; 0x48a <__bad_interrupt>
      42:	00 00       	nop
      44:	22 c2       	rjmp	.+1092   	; 0x48a <__bad_interrupt>
      46:	00 00       	nop
      48:	20 c2       	rjmp	.+1088   	; 0x48a <__bad_interrupt>
      4a:	00 00       	nop
      4c:	1e c2       	rjmp	.+1084   	; 0x48a <__bad_interrupt>
      4e:	00 00       	nop
      50:	1c c2       	rjmp	.+1080   	; 0x48a <__bad_interrupt>
      52:	00 00       	nop
      54:	1a c2       	rjmp	.+1076   	; 0x48a <__bad_interrupt>
      56:	00 00       	nop
      58:	18 c2       	rjmp	.+1072   	; 0x48a <__bad_interrupt>
      5a:	00 00       	nop
      5c:	16 c2       	rjmp	.+1068   	; 0x48a <__bad_interrupt>
      5e:	00 00       	nop
      60:	14 c2       	rjmp	.+1064   	; 0x48a <__bad_interrupt>
      62:	00 00       	nop
      64:	12 c2       	rjmp	.+1060   	; 0x48a <__bad_interrupt>
      66:	00 00       	nop
      68:	10 c2       	rjmp	.+1056   	; 0x48a <__bad_interrupt>
      6a:	00 00       	nop
      6c:	0e c2       	rjmp	.+1052   	; 0x48a <__bad_interrupt>
      6e:	00 00       	nop
      70:	0c c2       	rjmp	.+1048   	; 0x48a <__bad_interrupt>
      72:	00 00       	nop
      74:	0a c2       	rjmp	.+1044   	; 0x48a <__bad_interrupt>
      76:	00 00       	nop
      78:	08 c2       	rjmp	.+1040   	; 0x48a <__bad_interrupt>
      7a:	00 00       	nop
      7c:	06 c2       	rjmp	.+1036   	; 0x48a <__bad_interrupt>
      7e:	00 00       	nop
      80:	04 c2       	rjmp	.+1032   	; 0x48a <__bad_interrupt>
      82:	00 00       	nop
      84:	02 c2       	rjmp	.+1028   	; 0x48a <__bad_interrupt>
      86:	00 00       	nop
      88:	00 c2       	rjmp	.+1024   	; 0x48a <__bad_interrupt>
      8a:	00 00       	nop
      8c:	fe c1       	rjmp	.+1020   	; 0x48a <__bad_interrupt>
      8e:	00 00       	nop
      90:	fc c1       	rjmp	.+1016   	; 0x48a <__bad_interrupt>
      92:	00 00       	nop
      94:	fa c1       	rjmp	.+1012   	; 0x48a <__bad_interrupt>
      96:	00 00       	nop

00000098 <__c.4787>:
      98:	20 20 2d 2d 20 45 72 72 6f 72 20 43 6f 64 65 3a       -- Error Code:
      a8:	20 25 64 1b 5b 33 37 6d 00                           %d.[37m.

000000b1 <__c.4785>:
      b1:	1b 5b 33 31 6d 43 6f 6d 6d 61 6e 64 20 65 72 72     .[31mCommand err
      c1:	6f 72 20 28 25 53 29 2e 0d 0a 00                    or (%S)....

000000cc <__c.4783>:
      cc:	1b 5b 33 31 6d 53 43 53 49 20 63 6f 6d 6d 61 6e     .[31mSCSI comman
      dc:	64 20 65 72 72 6f 72 20 28 25 53 29 2e 0d 0a 00     d error (%S)....

000000ec <__c.4720>:
      ec:	52 65 61 64 20 44 65 76 69 63 65 20 42 6c 6f 63     Read Device Bloc
      fc:	6b 00                                               k.

000000fe <__c.4714>:
      fe:	0d 0a 0d 0a 50 72 65 73 73 20 62 6f 61 72 64 20     ....Press board 
     10e:	62 75 74 74 6f 6e 20 74 6f 20 72 65 61 64 20 65     button to read e
     11e:	6e 74 69 72 65 20 41 53 43 49 49 20 63 6f 6e 74     ntire ASCII cont
     12e:	65 6e 74 73 20 6f 66 20 64 69 73 6b 2e 2e 2e 0d     ents of disk....
     13e:	0a 0d 0a 00                                         ....

00000142 <__c.4709>:
     142:	0d 0a 00                                            ...

00000145 <__c.4702>:
     145:	20 20 20 20 00                                          .

0000014a <__c.4697>:
     14a:	25 2e 32 58 20 00                                   %.2X .

00000150 <__c.4691>:
     150:	0d 0a 43 6f 6e 74 65 6e 74 73 20 6f 66 20 66 69     ..Contents of fi
     160:	72 73 74 20 62 6c 6f 63 6b 3a 0d 0a 00              rst block:...

0000016d <__c.4689>:
     16d:	52 65 61 64 20 44 65 76 69 63 65 20 42 6c 6f 63     Read Device Bloc
     17d:	6b 00                                               k.

0000017f <__c.4686>:
     17f:	25 6c 75 20 62 6c 6f 63 6b 73 20 6f 66 20 25 6c     %lu blocks of %l
     18f:	75 20 62 79 74 65 73 2e 0d 0a 00                    u bytes....

0000019a <__c.4684>:
     19a:	52 65 61 64 20 43 61 70 61 63 69 74 79 00           Read Capacity.

000001a8 <__c.4681>:
     1a8:	0d 0a 52 65 74 72 69 65 76 69 6e 67 20 43 61 70     ..Retrieving Cap
     1b8:	61 63 69 74 79 2e 2e 2e 20 00                       acity... .

000001c2 <__c.4678>:
     1c2:	54 65 73 74 20 55 6e 69 74 20 52 65 61 64 79 00     Test Unit Ready.

000001d2 <__c.4675>:
     1d2:	57 61 69 74 69 6e 67 20 75 6e 74 69 6c 20 72 65     Waiting until re
     1e2:	61 64 79 2e 2e 00                                   ady...

000001e8 <__c.4673>:
     1e8:	56 65 6e 64 6f 72 20 22 25 2e 38 73 22 2c 20 50     Vendor "%.8s", P
     1f8:	72 6f 64 75 63 74 20 22 25 2e 31 36 73 22 0d 0a     roduct "%.16s"..
     208:	00                                                  .

00000209 <__c.4671>:
     209:	49 6e 71 75 69 72 79 00                             Inquiry.

00000211 <__c.4668>:
     211:	50 72 65 76 65 6e 74 2f 41 6c 6c 6f 77 20 4d 65     Prevent/Allow Me
     221:	64 69 75 6d 20 52 65 6d 6f 76 61 6c 00              dium Removal.

0000022e <__c.4666>:
     22e:	52 65 71 75 65 73 74 20 53 65 6e 73 65 00           Request Sense.

0000023c <__c.4663>:
     23c:	4d 61 73 73 20 53 74 6f 72 61 67 65 20 52 65 73     Mass Storage Res
     24c:	65 74 00                                            et.

0000024f <__c.4661>:
     24f:	54 6f 74 61 6c 20 4c 55 4e 73 3a 20 25 64 20 2d     Total LUNs: %d -
     25f:	20 55 73 69 6e 67 20 66 69 72 73 74 20 4c 55 4e      Using first LUN
     26f:	20 69 6e 20 64 65 76 69 63 65 2e 0d 0a 00            in device....

0000027d <__c.4659>:
     27d:	47 65 74 20 4d 61 78 20 4c 55 4e 00                 Get Max LUN.

00000289 <__c.4649>:
     289:	1b 5b 33 31 6d 44 65 76 20 45 6e 75 6d 20 45 72     .[31mDev Enum Er
     299:	72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     ror.. -- Error C
     2a9:	6f 64 65 20 25 64 0d 0a 20 2d 2d 20 53 75 62 20     ode %d.. -- Sub 
     2b9:	45 72 72 6f 72 20 43 6f 64 65 20 25 64 0d 0a 20     Error Code %d.. 
     2c9:	2d 2d 20 49 6e 20 53 74 61 74 65 20 25 64 0d 0a     -- In State %d..
     2d9:	1b 5b 33 37 6d 00                                   .[37m.

000002df <__c.4641>:
     2df:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
     2ef:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 
     2ff:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

0000030e <__c.4633>:
     30e:	4d 61 73 73 20 53 74 6f 72 61 67 65 20 44 69 73     Mass Storage Dis
     31e:	6b 20 45 6e 75 6d 65 72 61 74 65 64 2e 0d 0a 00     k Enumerated....

0000032e <__c.4631>:
     32e:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
     33e:	6f 72 20 28 53 65 74 20 43 6f 6e 66 69 67 75 72     or (Set Configur
     34e:	61 74 69 6f 6e 29 2e 0d 0a 20 2d 2d 20 45 72 72     ation)... -- Err
     35e:	6f 72 20 43 6f 64 65 3a 20 25 64 0d 0a 1b 5b 33     or Code: %d...[3
     36e:	37 6d 00                                            7m.

00000371 <__c.4629>:
     371:	20 2d 2d 20 45 72 72 6f 72 20 43 6f 64 65 3a 20      -- Error Code: 
     381:	25 64 0d 0a 1b 5b 33 37 6d 00                       %d...[37m.

0000038b <__c.4627>:
     38b:	1b 5b 33 31 6d 49 6e 76 61 6c 69 64 20 44 65 76     .[31mInvalid Dev
     39b:	69 63 65 2e 0d 0a 00                                ice....

000003a2 <__c.4625>:
     3a2:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
     3b2:	6f 72 20 28 47 65 74 20 43 6f 6e 66 69 67 75 72     or (Get Configur
     3c2:	61 74 69 6f 6e 29 2e 0d 0a 00                       ation)....

000003cc <__c.4622>:
     3cc:	47 65 74 74 69 6e 67 20 43 6f 6e 66 69 67 20 44     Getting Config D
     3dc:	61 74 61 2e 0d 0a 00                                ata....

000003e3 <__c.4617>:
     3e3:	1b 5b 33 32 6d 0d 0a 44 65 76 69 63 65 20 55 6e     .[32m..Device Un
     3f3:	61 74 74 61 63 68 65 64 2e 0d 0a 1b 5b 33 37 6d     attached....[37m
     403:	00                                                  .

00000404 <__c.4612>:
     404:	1b 5b 33 32 6d 44 65 76 69 63 65 20 41 74 74 61     .[32mDevice Atta
     414:	63 68 65 64 2e 0d 0a 1b 5b 33 37 6d 00              ched....[37m.

00000421 <__c.4598>:
     421:	1b 5b 33 36 6d 4d 61 73 73 20 53 74 6f 72 61 67     .[36mMass Storag
     431:	65 20 48 6f 73 74 20 44 65 6d 6f 20 72 75 6e 6e     e Host Demo runn
     441:	69 6e 67 2e 0d 0a 1b 5b 33 37 6d 00 00              ing....[37m..

0000044e <__ctors_end>:
     44e:	11 24       	eor	r1, r1
     450:	1f be       	out	0x3f, r1	; 63
     452:	cf ef       	ldi	r28, 0xFF	; 255
     454:	d0 e2       	ldi	r29, 0x20	; 32
     456:	de bf       	out	0x3e, r29	; 62
     458:	cd bf       	out	0x3d, r28	; 61

0000045a <__do_copy_data>:
     45a:	11 e0       	ldi	r17, 0x01	; 1
     45c:	a0 e0       	ldi	r26, 0x00	; 0
     45e:	b1 e0       	ldi	r27, 0x01	; 1
     460:	e6 e4       	ldi	r30, 0x46	; 70
     462:	f6 e2       	ldi	r31, 0x26	; 38
     464:	00 e0       	ldi	r16, 0x00	; 0
     466:	0b bf       	out	0x3b, r16	; 59
     468:	02 c0       	rjmp	.+4      	; 0x46e <__do_copy_data+0x14>
     46a:	07 90       	elpm	r0, Z+
     46c:	0d 92       	st	X+, r0
     46e:	a6 32       	cpi	r26, 0x26	; 38
     470:	b1 07       	cpc	r27, r17
     472:	d9 f7       	brne	.-10     	; 0x46a <__do_copy_data+0x10>

00000474 <__do_clear_bss>:
     474:	11 e0       	ldi	r17, 0x01	; 1
     476:	a6 e2       	ldi	r26, 0x26	; 38
     478:	b1 e0       	ldi	r27, 0x01	; 1
     47a:	01 c0       	rjmp	.+2      	; 0x47e <.do_clear_bss_start>

0000047c <.do_clear_bss_loop>:
     47c:	1d 92       	st	X+, r1

0000047e <.do_clear_bss_start>:
     47e:	a9 34       	cpi	r26, 0x49	; 73
     480:	b1 07       	cpc	r27, r17
     482:	e1 f7       	brne	.-8      	; 0x47c <.do_clear_bss_loop>
     484:	38 d3       	rcall	.+1648   	; 0xaf6 <main>
     486:	0c 94 21 13 	jmp	0x2642	; 0x2642 <_exit>

0000048a <__bad_interrupt>:
     48a:	ba cd       	rjmp	.-1164   	; 0x0 <__vectors>

0000048c <ShowDiskReadError>:
 *  \param[in] CommandString  ASCII string located in PROGMEM space indicating what operation failed
 *  \param[in] ErrorCode      Error code of the function which failed to complete successfully
 */
void ShowDiskReadError(const char* CommandString,
                       const uint8_t ErrorCode)
{
     48c:	1f 93       	push	r17
     48e:	9c 01       	movw	r18, r24
     490:	16 2f       	mov	r17, r22
	if (ErrorCode == MASS_STORE_SCSI_COMMAND_FAILED)
     492:	60 3c       	cpi	r22, 0xC0	; 192
     494:	79 f4       	brne	.+30     	; 0x4b4 <ShowDiskReadError+0x28>
	{
		/* Display the error code */
		printf_P(PSTR(ESC_FG_RED "SCSI command error (%S).\r\n"), CommandString);
     496:	00 d0       	rcall	.+0      	; 0x498 <ShowDiskReadError+0xc>
     498:	00 d0       	rcall	.+0      	; 0x49a <ShowDiskReadError+0xe>
     49a:	8c ec       	ldi	r24, 0xCC	; 204
     49c:	90 e0       	ldi	r25, 0x00	; 0
     49e:	ad b7       	in	r26, 0x3d	; 61
     4a0:	be b7       	in	r27, 0x3e	; 62
     4a2:	12 96       	adiw	r26, 0x02	; 2
     4a4:	9c 93       	st	X, r25
     4a6:	8e 93       	st	-X, r24
     4a8:	11 97       	sbiw	r26, 0x01	; 1
     4aa:	14 96       	adiw	r26, 0x04	; 4
     4ac:	3c 93       	st	X, r19
     4ae:	2e 93       	st	-X, r18
     4b0:	13 97       	sbiw	r26, 0x03	; 3
     4b2:	19 c0       	rjmp	.+50     	; 0x4e6 <ShowDiskReadError+0x5a>
	}
	else
	{
		/* Display the error code */
		printf_P(PSTR(ESC_FG_RED "Command error (%S).\r\n"), CommandString);
     4b4:	00 d0       	rcall	.+0      	; 0x4b6 <ShowDiskReadError+0x2a>
     4b6:	00 d0       	rcall	.+0      	; 0x4b8 <ShowDiskReadError+0x2c>
     4b8:	81 eb       	ldi	r24, 0xB1	; 177
     4ba:	90 e0       	ldi	r25, 0x00	; 0
     4bc:	ed b7       	in	r30, 0x3d	; 61
     4be:	fe b7       	in	r31, 0x3e	; 62
     4c0:	92 83       	std	Z+2, r25	; 0x02
     4c2:	81 83       	std	Z+1, r24	; 0x01
     4c4:	34 83       	std	Z+4, r19	; 0x04
     4c6:	23 83       	std	Z+3, r18	; 0x03
     4c8:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <printf_P>
		printf_P(PSTR("  -- Error Code: %d" ESC_FG_WHITE), ErrorCode);
     4cc:	ed b7       	in	r30, 0x3d	; 61
     4ce:	fe b7       	in	r31, 0x3e	; 62
     4d0:	31 96       	adiw	r30, 0x01	; 1
     4d2:	88 e9       	ldi	r24, 0x98	; 152
     4d4:	90 e0       	ldi	r25, 0x00	; 0
     4d6:	ad b7       	in	r26, 0x3d	; 61
     4d8:	be b7       	in	r27, 0x3e	; 62
     4da:	12 96       	adiw	r26, 0x02	; 2
     4dc:	9c 93       	st	X, r25
     4de:	8e 93       	st	-X, r24
     4e0:	11 97       	sbiw	r26, 0x01	; 1
     4e2:	12 83       	std	Z+2, r17	; 0x02
     4e4:	13 82       	std	Z+3, r1	; 0x03
     4e6:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <printf_P>
     4ea:	0f 90       	pop	r0
     4ec:	0f 90       	pop	r0
     4ee:	0f 90       	pop	r0
     4f0:	0f 90       	pop	r0

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     4f2:	80 91 a9 00 	lds	r24, 0x00A9
     4f6:	80 64       	ori	r24, 0x40	; 64
     4f8:	80 93 a9 00 	sts	0x00A9, r24
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     4fc:	8b b1       	in	r24, 0x0b	; 11
     4fe:	8f 70       	andi	r24, 0x0F	; 15
     500:	80 69       	ori	r24, 0x90	; 144
     502:	8b b9       	out	0x0b, r24	; 11

	Pipe_Freeze();

	/* Indicate device error via the status LEDs */
	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
}
     504:	1f 91       	pop	r17
     506:	08 95       	ret

00000508 <EVENT_USB_Host_DeviceEnumerationFailed>:
 *  enumerating an attached USB device.
 */
void EVENT_USB_Host_DeviceEnumerationFailed(const uint8_t ErrorCode,
                                            const uint8_t SubErrorCode)
{
	printf_P(PSTR(ESC_FG_RED "Dev Enum Error\r\n"
     508:	90 91 34 01 	lds	r25, 0x0134
     50c:	2d b7       	in	r18, 0x3d	; 61
     50e:	3e b7       	in	r19, 0x3e	; 62
     510:	28 50       	subi	r18, 0x08	; 8
     512:	30 40       	sbci	r19, 0x00	; 0
     514:	0f b6       	in	r0, 0x3f	; 63
     516:	f8 94       	cli
     518:	3e bf       	out	0x3e, r19	; 62
     51a:	0f be       	out	0x3f, r0	; 63
     51c:	2d bf       	out	0x3d, r18	; 61
     51e:	ed b7       	in	r30, 0x3d	; 61
     520:	fe b7       	in	r31, 0x3e	; 62
     522:	31 96       	adiw	r30, 0x01	; 1
     524:	29 e8       	ldi	r18, 0x89	; 137
     526:	32 e0       	ldi	r19, 0x02	; 2
     528:	ad b7       	in	r26, 0x3d	; 61
     52a:	be b7       	in	r27, 0x3e	; 62
     52c:	12 96       	adiw	r26, 0x02	; 2
     52e:	3c 93       	st	X, r19
     530:	2e 93       	st	-X, r18
     532:	11 97       	sbiw	r26, 0x01	; 1
     534:	82 83       	std	Z+2, r24	; 0x02
     536:	13 82       	std	Z+3, r1	; 0x03
     538:	64 83       	std	Z+4, r22	; 0x04
     53a:	15 82       	std	Z+5, r1	; 0x05
     53c:	96 83       	std	Z+6, r25	; 0x06
     53e:	17 82       	std	Z+7, r1	; 0x07
     540:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <printf_P>
     544:	8b b1       	in	r24, 0x0b	; 11
     546:	8f 70       	andi	r24, 0x0F	; 15
     548:	80 69       	ori	r24, 0x90	; 144
     54a:	8b b9       	out	0x0b, r24	; 11
     54c:	2d b7       	in	r18, 0x3d	; 61
     54e:	3e b7       	in	r19, 0x3e	; 62
     550:	28 5f       	subi	r18, 0xF8	; 248
     552:	3f 4f       	sbci	r19, 0xFF	; 255
     554:	0f b6       	in	r0, 0x3f	; 63
     556:	f8 94       	cli
     558:	3e bf       	out	0x3e, r19	; 62
     55a:	0f be       	out	0x3f, r0	; 63
     55c:	2d bf       	out	0x3d, r18	; 61
	                         " -- Error Code %d\r\n"
	                         " -- Sub Error Code %d\r\n"
	                         " -- In State %d\r\n" ESC_FG_WHITE), ErrorCode, SubErrorCode, USB_HostState);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
}
     55e:	08 95       	ret

00000560 <EVENT_USB_Host_DeviceUnattached>:
/** Event handler for the USB_DeviceUnattached event. This indicates that a device has been removed from the host, and
 *  stops the library USB task management process.
 */
void EVENT_USB_Host_DeviceUnattached(void)
{
	puts_P(PSTR(ESC_FG_GREEN "\r\nDevice Unattached.\r\n" ESC_FG_WHITE));
     560:	83 ee       	ldi	r24, 0xE3	; 227
     562:	93 e0       	ldi	r25, 0x03	; 3
     564:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <puts_P>
     568:	8b b1       	in	r24, 0x0b	; 11
     56a:	8f 70       	andi	r24, 0x0F	; 15
     56c:	80 61       	ori	r24, 0x10	; 16
     56e:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
}
     570:	08 95       	ret

00000572 <EVENT_USB_Host_DeviceAttached>:
/** Event handler for the USB_DeviceAttached event. This indicates that a device has been attached to the host, and
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Host_DeviceAttached(void)
{
	puts_P(PSTR(ESC_FG_GREEN "Device Attached.\r\n" ESC_FG_WHITE));
     572:	84 e0       	ldi	r24, 0x04	; 4
     574:	94 e0       	ldi	r25, 0x04	; 4
     576:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <puts_P>
     57a:	8b b1       	in	r24, 0x0b	; 11
     57c:	8f 70       	andi	r24, 0x0F	; 15
     57e:	80 6a       	ori	r24, 0xA0	; 160
     580:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
}
     582:	08 95       	ret

00000584 <MassStorageHost_Task>:

/** Task to set the configuration of the attached device after it has been enumerated, and to read in blocks from
 *  the device and print them to the serial port.
 */
void MassStorageHost_Task(void)
{
     584:	2f 92       	push	r2
     586:	3f 92       	push	r3
     588:	4f 92       	push	r4
     58a:	5f 92       	push	r5
     58c:	6f 92       	push	r6
     58e:	7f 92       	push	r7
     590:	8f 92       	push	r8
     592:	9f 92       	push	r9
     594:	af 92       	push	r10
     596:	bf 92       	push	r11
     598:	cf 92       	push	r12
     59a:	df 92       	push	r13
     59c:	ef 92       	push	r14
     59e:	ff 92       	push	r15
     5a0:	0f 93       	push	r16
     5a2:	1f 93       	push	r17
     5a4:	df 93       	push	r29
     5a6:	cf 93       	push	r28
     5a8:	cd b7       	in	r28, 0x3d	; 61
     5aa:	de b7       	in	r29, 0x3e	; 62
     5ac:	c0 54       	subi	r28, 0x40	; 64
     5ae:	d0 40       	sbci	r29, 0x00	; 0
     5b0:	0f b6       	in	r0, 0x3f	; 63
     5b2:	f8 94       	cli
     5b4:	de bf       	out	0x3e, r29	; 62
     5b6:	0f be       	out	0x3f, r0	; 63
     5b8:	cd bf       	out	0x3d, r28	; 61
	}

	/* Indicate device no longer busy */
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
	USB_Host_SetDeviceConfiguration(0);
}
     5ba:	2d b6       	in	r2, 0x3d	; 61
     5bc:	3e b6       	in	r3, 0x3e	; 62

/** Task to set the configuration of the attached device after it has been enumerated, and to read in blocks from
 *  the device and print them to the serial port.
 */
void MassStorageHost_Task(void)
{
     5be:	2f ae       	std	Y+63, r2	; 0x3f
     5c0:	9e b7       	in	r25, 0x3e	; 62
     5c2:	21 96       	adiw	r28, 0x01	; 1
     5c4:	9f af       	std	Y+63, r25	; 0x3f
     5c6:	21 97       	sbiw	r28, 0x01	; 1
	if (USB_HostState != HOST_STATE_Configured)
     5c8:	80 91 34 01 	lds	r24, 0x0134
     5cc:	8b 30       	cpi	r24, 0x0B	; 11
     5ce:	09 f0       	breq	.+2      	; 0x5d2 <MassStorageHost_Task+0x4e>
     5d0:	b5 c1       	rjmp	.+874    	; 0x93c <MassStorageHost_Task+0x3b8>
     5d2:	8b b1       	in	r24, 0x0b	; 11
     5d4:	8f 70       	andi	r24, 0x0F	; 15
     5d6:	80 62       	ori	r24, 0x20	; 32
     5d8:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_BUSY);

	uint8_t ErrorCode;

	/* Send the request, display error and wait for device detach if request fails */
	if ((ErrorCode = MassStore_GetMaxLUN(&MassStore_MaxLUNIndex)) != HOST_SENDCONTROL_Successful)
     5da:	89 e2       	ldi	r24, 0x29	; 41
     5dc:	91 e0       	ldi	r25, 0x01	; 1
     5de:	5a d6       	rcall	.+3252   	; 0x1294 <MassStore_GetMaxLUN>
     5e0:	68 2f       	mov	r22, r24
     5e2:	88 23       	and	r24, r24
     5e4:	19 f0       	breq	.+6      	; 0x5ec <MassStorageHost_Task+0x68>
	{
		ShowDiskReadError(PSTR("Get Max LUN"), ErrorCode);
     5e6:	8d e7       	ldi	r24, 0x7D	; 125
     5e8:	92 e0       	ldi	r25, 0x02	; 2
     5ea:	5f c1       	rjmp	.+702    	; 0x8aa <MassStorageHost_Task+0x326>
		USB_Host_SetDeviceConfiguration(0);
		return;
	}

	/* Print number of LUNs detected in the attached device */
	printf_P(PSTR("Total LUNs: %d - Using first LUN in device.\r\n"), (MassStore_MaxLUNIndex + 1));
     5ec:	00 d0       	rcall	.+0      	; 0x5ee <MassStorageHost_Task+0x6a>
     5ee:	00 d0       	rcall	.+0      	; 0x5f0 <MassStorageHost_Task+0x6c>
     5f0:	8f e4       	ldi	r24, 0x4F	; 79
     5f2:	92 e0       	ldi	r25, 0x02	; 2
     5f4:	ad b7       	in	r26, 0x3d	; 61
     5f6:	be b7       	in	r27, 0x3e	; 62
     5f8:	12 96       	adiw	r26, 0x02	; 2
     5fa:	9c 93       	st	X, r25
     5fc:	8e 93       	st	-X, r24
     5fe:	11 97       	sbiw	r26, 0x01	; 1
     600:	80 91 29 01 	lds	r24, 0x0129
     604:	90 e0       	ldi	r25, 0x00	; 0
     606:	01 96       	adiw	r24, 0x01	; 1
     608:	14 96       	adiw	r26, 0x04	; 4
     60a:	9c 93       	st	X, r25
     60c:	8e 93       	st	-X, r24
     60e:	13 97       	sbiw	r26, 0x03	; 3
     610:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <printf_P>

	/* Reset the Mass Storage device interface, ready for use */
	if ((ErrorCode = MassStore_MassStorageReset()) != HOST_SENDCONTROL_Successful)
     614:	0f 90       	pop	r0
     616:	0f 90       	pop	r0
     618:	0f 90       	pop	r0
     61a:	0f 90       	pop	r0
     61c:	57 d6       	rcall	.+3246   	; 0x12cc <MassStore_MassStorageReset>
     61e:	68 2f       	mov	r22, r24
     620:	88 23       	and	r24, r24
     622:	19 f0       	breq	.+6      	; 0x62a <MassStorageHost_Task+0xa6>
	{
		ShowDiskReadError(PSTR("Mass Storage Reset"), ErrorCode);
     624:	8c e3       	ldi	r24, 0x3C	; 60
     626:	92 e0       	ldi	r25, 0x02	; 2
     628:	40 c1       	rjmp	.+640    	; 0x8aa <MassStorageHost_Task+0x326>
	}

	/* Get sense data from the device - many devices will not accept any other commands until the sense data
	 * is read - both on start-up and after a failed command */
	SCSI_Request_Sense_Response_t SenseData;
	if ((ErrorCode = MassStore_RequestSense(0, &SenseData)) != 0)
     62a:	80 e0       	ldi	r24, 0x00	; 0
     62c:	be 01       	movw	r22, r28
     62e:	67 5f       	subi	r22, 0xF7	; 247
     630:	7f 4f       	sbci	r23, 0xFF	; 255
     632:	43 d5       	rcall	.+2694   	; 0x10ba <MassStore_RequestSense>
     634:	68 2f       	mov	r22, r24
     636:	88 23       	and	r24, r24
     638:	19 f0       	breq	.+6      	; 0x640 <MassStorageHost_Task+0xbc>
	{
		ShowDiskReadError(PSTR("Request Sense"), ErrorCode);
     63a:	8e e2       	ldi	r24, 0x2E	; 46
     63c:	92 e0       	ldi	r25, 0x02	; 2
     63e:	35 c1       	rjmp	.+618    	; 0x8aa <MassStorageHost_Task+0x326>
		USB_Host_SetDeviceConfiguration(0);
		return;
	}

	/* Set the prevent removal flag for the device, allowing it to be accessed */
	if ((ErrorCode = MassStore_PreventAllowMediumRemoval(0, true)) != 0)
     640:	80 e0       	ldi	r24, 0x00	; 0
     642:	61 e0       	ldi	r22, 0x01	; 1
     644:	55 d4       	rcall	.+2218   	; 0xef0 <MassStore_PreventAllowMediumRemoval>
     646:	68 2f       	mov	r22, r24
     648:	88 23       	and	r24, r24
     64a:	19 f0       	breq	.+6      	; 0x652 <MassStorageHost_Task+0xce>
	{
		ShowDiskReadError(PSTR("Prevent/Allow Medium Removal"), ErrorCode);
     64c:	81 e1       	ldi	r24, 0x11	; 17
     64e:	92 e0       	ldi	r25, 0x02	; 2
     650:	2c c1       	rjmp	.+600    	; 0x8aa <MassStorageHost_Task+0x326>
		return;
	}

	/* Get inquiry data from the device */
	SCSI_Inquiry_Response_t InquiryData;
	if ((ErrorCode = MassStore_Inquiry(0, &InquiryData)) != 0)
     652:	80 e0       	ldi	r24, 0x00	; 0
     654:	be 01       	movw	r22, r28
     656:	65 5e       	subi	r22, 0xE5	; 229
     658:	7f 4f       	sbci	r23, 0xFF	; 255
     65a:	73 d5       	rcall	.+2790   	; 0x1142 <MassStore_Inquiry>
     65c:	68 2f       	mov	r22, r24
     65e:	88 23       	and	r24, r24
     660:	19 f0       	breq	.+6      	; 0x668 <MassStorageHost_Task+0xe4>
	{
		ShowDiskReadError(PSTR("Inquiry"), ErrorCode);
     662:	89 e0       	ldi	r24, 0x09	; 9
     664:	92 e0       	ldi	r25, 0x02	; 2
     666:	21 c1       	rjmp	.+578    	; 0x8aa <MassStorageHost_Task+0x326>
		USB_Host_SetDeviceConfiguration(0);
		return;
	}

	/* Print vendor and product names of attached device */
	printf_P(PSTR("Vendor \"%.8s\", Product \"%.16s\"\r\n"), InquiryData.VendorID, InquiryData.ProductID);
     668:	00 d0       	rcall	.+0      	; 0x66a <MassStorageHost_Task+0xe6>
     66a:	00 d0       	rcall	.+0      	; 0x66c <MassStorageHost_Task+0xe8>
     66c:	00 d0       	rcall	.+0      	; 0x66e <MassStorageHost_Task+0xea>
     66e:	ed b7       	in	r30, 0x3d	; 61
     670:	fe b7       	in	r31, 0x3e	; 62
     672:	31 96       	adiw	r30, 0x01	; 1
     674:	88 ee       	ldi	r24, 0xE8	; 232
     676:	91 e0       	ldi	r25, 0x01	; 1
     678:	ad b7       	in	r26, 0x3d	; 61
     67a:	be b7       	in	r27, 0x3e	; 62
     67c:	12 96       	adiw	r26, 0x02	; 2
     67e:	9c 93       	st	X, r25
     680:	8e 93       	st	-X, r24
     682:	11 97       	sbiw	r26, 0x01	; 1
     684:	ce 01       	movw	r24, r28
     686:	83 96       	adiw	r24, 0x23	; 35
     688:	93 83       	std	Z+3, r25	; 0x03
     68a:	82 83       	std	Z+2, r24	; 0x02
     68c:	ce 01       	movw	r24, r28
     68e:	8b 96       	adiw	r24, 0x2b	; 43
     690:	95 83       	std	Z+5, r25	; 0x05
     692:	84 83       	std	Z+4, r24	; 0x04
     694:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <printf_P>

	/* Wait until disk ready */
	puts_P(PSTR("Waiting until ready.."));
     698:	ed b7       	in	r30, 0x3d	; 61
     69a:	fe b7       	in	r31, 0x3e	; 62
     69c:	36 96       	adiw	r30, 0x06	; 6
     69e:	0f b6       	in	r0, 0x3f	; 63
     6a0:	f8 94       	cli
     6a2:	fe bf       	out	0x3e, r31	; 62
     6a4:	0f be       	out	0x3f, r0	; 63
     6a6:	ed bf       	out	0x3d, r30	; 61
     6a8:	82 ed       	ldi	r24, 0xD2	; 210
     6aa:	91 e0       	ldi	r25, 0x01	; 1
     6ac:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <puts_P>
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
				UDR1 = DataByte;
     6b0:	1e e2       	ldi	r17, 0x2E	; 46
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
     6b2:	80 91 c8 00 	lds	r24, 0x00C8
     6b6:	85 ff       	sbrs	r24, 5
     6b8:	fc cf       	rjmp	.-8      	; 0x6b2 <MassStorageHost_Task+0x12e>
				UDR1 = DataByte;
     6ba:	10 93 ce 00 	sts	0x00CE, r17
	for (;;)
	{
		Serial_SendByte('.');

		/* Abort if device removed */
		if (USB_HostState == HOST_STATE_Unattached)
     6be:	80 91 34 01 	lds	r24, 0x0134
     6c2:	81 30       	cpi	r24, 0x01	; 1
     6c4:	51 f0       	breq	.+20     	; 0x6da <MassStorageHost_Task+0x156>
		  break;

		/* Check to see if the attached device is ready for new commands */
		ErrorCode = MassStore_TestUnitReady(0);
     6c6:	80 e0       	ldi	r24, 0x00	; 0
     6c8:	4e d4       	rcall	.+2204   	; 0xf66 <MassStore_TestUnitReady>
     6ca:	68 2f       	mov	r22, r24

		/* If attached device is ready, abort the loop */
		if (!(ErrorCode))
     6cc:	88 23       	and	r24, r24
     6ce:	29 f0       	breq	.+10     	; 0x6da <MassStorageHost_Task+0x156>
		  break;

		/* If an error other than a logical command failure (indicating device busy) returned, abort */
		if (ErrorCode != MASS_STORE_SCSI_COMMAND_FAILED)
     6d0:	80 3c       	cpi	r24, 0xC0	; 192
     6d2:	79 f3       	breq	.-34     	; 0x6b2 <MassStorageHost_Task+0x12e>
		{
			ShowDiskReadError(PSTR("Test Unit Ready"), ErrorCode);
     6d4:	82 ec       	ldi	r24, 0xC2	; 194
     6d6:	91 e0       	ldi	r25, 0x01	; 1
     6d8:	e8 c0       	rjmp	.+464    	; 0x8aa <MassStorageHost_Task+0x326>
			USB_Host_SetDeviceConfiguration(0);
			return;
		}
	}

	puts_P(PSTR("\r\nRetrieving Capacity... "));
     6da:	88 ea       	ldi	r24, 0xA8	; 168
     6dc:	91 e0       	ldi	r25, 0x01	; 1
     6de:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <puts_P>

	/* Create new structure for the disk's capacity in blocks and block size */
	SCSI_Capacity_t DiskCapacity;

	/* Retrieve disk capacity */
	if ((ErrorCode = MassStore_ReadCapacity(0, &DiskCapacity)) != 0)
     6e2:	80 e0       	ldi	r24, 0x00	; 0
     6e4:	be 01       	movw	r22, r28
     6e6:	6f 5f       	subi	r22, 0xFF	; 255
     6e8:	7f 4f       	sbci	r23, 0xFF	; 255
     6ea:	75 d5       	rcall	.+2794   	; 0x11d6 <MassStore_ReadCapacity>
     6ec:	68 2f       	mov	r22, r24
     6ee:	88 23       	and	r24, r24
     6f0:	19 f0       	breq	.+6      	; 0x6f8 <MassStorageHost_Task+0x174>
	{
		ShowDiskReadError(PSTR("Read Capacity"), ErrorCode);
     6f2:	8a e9       	ldi	r24, 0x9A	; 154
     6f4:	91 e0       	ldi	r25, 0x01	; 1
     6f6:	d9 c0       	rjmp	.+434    	; 0x8aa <MassStorageHost_Task+0x326>
		USB_Host_SetDeviceConfiguration(0);
		return;
	}

	/* Display the disk capacity in blocks * block size bytes */
	printf_P(PSTR("%lu blocks of %lu bytes.\r\n"), DiskCapacity.Blocks, DiskCapacity.BlockSize);
     6f8:	8d b7       	in	r24, 0x3d	; 61
     6fa:	9e b7       	in	r25, 0x3e	; 62
     6fc:	0a 97       	sbiw	r24, 0x0a	; 10
     6fe:	0f b6       	in	r0, 0x3f	; 63
     700:	f8 94       	cli
     702:	9e bf       	out	0x3e, r25	; 62
     704:	0f be       	out	0x3f, r0	; 63
     706:	8d bf       	out	0x3d, r24	; 61
     708:	ed b7       	in	r30, 0x3d	; 61
     70a:	fe b7       	in	r31, 0x3e	; 62
     70c:	31 96       	adiw	r30, 0x01	; 1
     70e:	8f e7       	ldi	r24, 0x7F	; 127
     710:	91 e0       	ldi	r25, 0x01	; 1
     712:	ad b7       	in	r26, 0x3d	; 61
     714:	be b7       	in	r27, 0x3e	; 62
     716:	12 96       	adiw	r26, 0x02	; 2
     718:	9c 93       	st	X, r25
     71a:	8e 93       	st	-X, r24
     71c:	11 97       	sbiw	r26, 0x01	; 1
     71e:	89 81       	ldd	r24, Y+1	; 0x01
     720:	9a 81       	ldd	r25, Y+2	; 0x02
     722:	ab 81       	ldd	r26, Y+3	; 0x03
     724:	bc 81       	ldd	r27, Y+4	; 0x04
     726:	82 83       	std	Z+2, r24	; 0x02
     728:	93 83       	std	Z+3, r25	; 0x03
     72a:	a4 83       	std	Z+4, r26	; 0x04
     72c:	b5 83       	std	Z+5, r27	; 0x05
     72e:	8d 81       	ldd	r24, Y+5	; 0x05
     730:	9e 81       	ldd	r25, Y+6	; 0x06
     732:	af 81       	ldd	r26, Y+7	; 0x07
     734:	b8 85       	ldd	r27, Y+8	; 0x08
     736:	86 83       	std	Z+6, r24	; 0x06
     738:	97 83       	std	Z+7, r25	; 0x07
     73a:	a0 87       	std	Z+8, r26	; 0x08
     73c:	b1 87       	std	Z+9, r27	; 0x09
     73e:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <printf_P>

	/* Create a new buffer capable of holding a single block from the device */
	uint8_t BlockBuffer[DiskCapacity.BlockSize];
     742:	ed b7       	in	r30, 0x3d	; 61
     744:	fe b7       	in	r31, 0x3e	; 62
     746:	3a 96       	adiw	r30, 0x0a	; 10
     748:	0f b6       	in	r0, 0x3f	; 63
     74a:	f8 94       	cli
     74c:	fe bf       	out	0x3e, r31	; 62
     74e:	0f be       	out	0x3f, r0	; 63
     750:	ed bf       	out	0x3d, r30	; 61
     752:	0d 81       	ldd	r16, Y+5	; 0x05
     754:	1e 81       	ldd	r17, Y+6	; 0x06
     756:	8d b7       	in	r24, 0x3d	; 61
     758:	9e b7       	in	r25, 0x3e	; 62
     75a:	80 1b       	sub	r24, r16
     75c:	91 0b       	sbc	r25, r17
     75e:	0f b6       	in	r0, 0x3f	; 63
     760:	f8 94       	cli
     762:	9e bf       	out	0x3e, r25	; 62
     764:	0f be       	out	0x3f, r0	; 63
     766:	8d bf       	out	0x3d, r24	; 61
     768:	8d b6       	in	r8, 0x3d	; 61
     76a:	9e b6       	in	r9, 0x3e	; 62
     76c:	08 94       	sec
     76e:	81 1c       	adc	r8, r1
     770:	91 1c       	adc	r9, r1

	/* Read in the first 512 byte block from the device */
	if ((ErrorCode = MassStore_ReadDeviceBlock(0, 0x00000000, 1, DiskCapacity.BlockSize, BlockBuffer)) != 0)
     772:	24 01       	movw	r4, r8
     774:	80 e0       	ldi	r24, 0x00	; 0
     776:	40 e0       	ldi	r20, 0x00	; 0
     778:	50 e0       	ldi	r21, 0x00	; 0
     77a:	60 e0       	ldi	r22, 0x00	; 0
     77c:	70 e0       	ldi	r23, 0x00	; 0
     77e:	21 e0       	ldi	r18, 0x01	; 1
     780:	74 01       	movw	r14, r8
     782:	2b d4       	rcall	.+2134   	; 0xfda <MassStore_ReadDeviceBlock>
     784:	68 2f       	mov	r22, r24
     786:	88 23       	and	r24, r24
     788:	19 f0       	breq	.+6      	; 0x790 <MassStorageHost_Task+0x20c>
	{
		ShowDiskReadError(PSTR("Read Device Block"), ErrorCode);
     78a:	8d e6       	ldi	r24, 0x6D	; 109
     78c:	91 e0       	ldi	r25, 0x01	; 1
     78e:	8d c0       	rjmp	.+282    	; 0x8aa <MassStorageHost_Task+0x326>
		USB_Host_SetDeviceConfiguration(0);
		return;
	}

	puts_P(PSTR("\r\nContents of first block:\r\n"));
     790:	80 e5       	ldi	r24, 0x50	; 80
     792:	91 e0       	ldi	r25, 0x01	; 1
     794:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <puts_P>
     798:	aa 24       	eor	r10, r10
     79a:	bb 24       	eor	r11, r11
		/* Print out the 16 bytes of the chunk in HEX format */
		for (uint8_t ByteOffset = 0; ByteOffset < (1 << 4); ByteOffset++)
		{
			char CurrByte = *(ChunkPtr + ByteOffset);

			printf_P(PSTR("%.2X "), CurrByte);
     79c:	ea e4       	ldi	r30, 0x4A	; 74
     79e:	6e 2e       	mov	r6, r30
     7a0:	e1 e0       	ldi	r30, 0x01	; 1
     7a2:	7e 2e       	mov	r7, r30
     7a4:	4e c0       	rjmp	.+156    	; 0x842 <MassStorageHost_Task+0x2be>

	/* Print out the first block in both HEX and ASCII, 16 bytes per line */
	for (uint16_t Chunk = 0; Chunk < (DiskCapacity.BlockSize >> 4); Chunk++)
	{
		/* Pointer to the start of the current 16-byte chunk in the read block of data */
		uint8_t* ChunkPtr = &BlockBuffer[Chunk << 4];
     7a6:	65 01       	movw	r12, r10
     7a8:	74 e0       	ldi	r23, 0x04	; 4
     7aa:	cc 0c       	add	r12, r12
     7ac:	dd 1c       	adc	r13, r13
     7ae:	7a 95       	dec	r23
     7b0:	e1 f7       	brne	.-8      	; 0x7aa <MassStorageHost_Task+0x226>
     7b2:	c8 0c       	add	r12, r8
     7b4:	d9 1c       	adc	r13, r9
     7b6:	00 e0       	ldi	r16, 0x00	; 0
     7b8:	10 e0       	ldi	r17, 0x00	; 0
		/* Print out the 16 bytes of the chunk in HEX format */
		for (uint8_t ByteOffset = 0; ByteOffset < (1 << 4); ByteOffset++)
		{
			char CurrByte = *(ChunkPtr + ByteOffset);

			printf_P(PSTR("%.2X "), CurrByte);
     7ba:	00 d0       	rcall	.+0      	; 0x7bc <MassStorageHost_Task+0x238>
     7bc:	00 d0       	rcall	.+0      	; 0x7be <MassStorageHost_Task+0x23a>
     7be:	ed b7       	in	r30, 0x3d	; 61
     7c0:	fe b7       	in	r31, 0x3e	; 62
     7c2:	31 96       	adiw	r30, 0x01	; 1
     7c4:	ad b7       	in	r26, 0x3d	; 61
     7c6:	be b7       	in	r27, 0x3e	; 62
     7c8:	12 96       	adiw	r26, 0x02	; 2
     7ca:	7c 92       	st	X, r7
     7cc:	6e 92       	st	-X, r6
     7ce:	11 97       	sbiw	r26, 0x01	; 1
     7d0:	d6 01       	movw	r26, r12
     7d2:	a0 0f       	add	r26, r16
     7d4:	b1 1f       	adc	r27, r17
     7d6:	8c 91       	ld	r24, X
     7d8:	82 83       	std	Z+2, r24	; 0x02
     7da:	13 82       	std	Z+3, r1	; 0x03
     7dc:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <printf_P>
     7e0:	0f 5f       	subi	r16, 0xFF	; 255
     7e2:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		/* Pointer to the start of the current 16-byte chunk in the read block of data */
		uint8_t* ChunkPtr = &BlockBuffer[Chunk << 4];

		/* Print out the 16 bytes of the chunk in HEX format */
		for (uint8_t ByteOffset = 0; ByteOffset < (1 << 4); ByteOffset++)
     7e4:	0f 90       	pop	r0
     7e6:	0f 90       	pop	r0
     7e8:	0f 90       	pop	r0
     7ea:	0f 90       	pop	r0
     7ec:	00 31       	cpi	r16, 0x10	; 16
     7ee:	11 05       	cpc	r17, r1
     7f0:	21 f7       	brne	.-56     	; 0x7ba <MassStorageHost_Task+0x236>
			char CurrByte = *(ChunkPtr + ByteOffset);

			printf_P(PSTR("%.2X "), CurrByte);
		}

		puts_P(PSTR("    "));
     7f2:	85 e4       	ldi	r24, 0x45	; 69
     7f4:	91 e0       	ldi	r25, 0x01	; 1
     7f6:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <puts_P>
     7fa:	ee 24       	eor	r14, r14
     7fc:	ff 24       	eor	r15, r15
		/* Print out the 16 bytes of the chunk in ASCII format */
		for (uint8_t ByteOffset = 0; ByteOffset < (1 << 4); ByteOffset++)
		{
			char CurrByte = *(ChunkPtr + ByteOffset);

			putchar(isprint(CurrByte) ? CurrByte : '.');
     7fe:	f6 01       	movw	r30, r12
     800:	ee 0d       	add	r30, r14
     802:	ff 1d       	adc	r31, r15
     804:	80 81       	ld	r24, Z
     806:	08 2f       	mov	r16, r24
     808:	10 e0       	ldi	r17, 0x00	; 0
     80a:	c8 01       	movw	r24, r16
     80c:	0e 94 28 10 	call	0x2050	; 0x2050 <isprint>
     810:	89 2b       	or	r24, r25
     812:	11 f4       	brne	.+4      	; 0x818 <MassStorageHost_Task+0x294>
     814:	0e e2       	ldi	r16, 0x2E	; 46
     816:	10 e0       	ldi	r17, 0x00	; 0
     818:	60 91 45 01 	lds	r22, 0x0145
     81c:	70 91 46 01 	lds	r23, 0x0146
     820:	c8 01       	movw	r24, r16
     822:	0e 94 2e 10 	call	0x205c	; 0x205c <fputc>
     826:	08 94       	sec
     828:	e1 1c       	adc	r14, r1
     82a:	f1 1c       	adc	r15, r1
		}

		puts_P(PSTR("    "));

		/* Print out the 16 bytes of the chunk in ASCII format */
		for (uint8_t ByteOffset = 0; ByteOffset < (1 << 4); ByteOffset++)
     82c:	b0 e1       	ldi	r27, 0x10	; 16
     82e:	eb 16       	cp	r14, r27
     830:	f1 04       	cpc	r15, r1
     832:	29 f7       	brne	.-54     	; 0x7fe <MassStorageHost_Task+0x27a>
			char CurrByte = *(ChunkPtr + ByteOffset);

			putchar(isprint(CurrByte) ? CurrByte : '.');
		}

		puts_P(PSTR("\r\n"));
     834:	82 e4       	ldi	r24, 0x42	; 66
     836:	91 e0       	ldi	r25, 0x01	; 1
     838:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <puts_P>
	}

	puts_P(PSTR("\r\nContents of first block:\r\n"));

	/* Print out the first block in both HEX and ASCII, 16 bytes per line */
	for (uint16_t Chunk = 0; Chunk < (DiskCapacity.BlockSize >> 4); Chunk++)
     83c:	08 94       	sec
     83e:	a1 1c       	adc	r10, r1
     840:	b1 1c       	adc	r11, r1
     842:	95 01       	movw	r18, r10
     844:	40 e0       	ldi	r20, 0x00	; 0
     846:	50 e0       	ldi	r21, 0x00	; 0
     848:	8d 81       	ldd	r24, Y+5	; 0x05
     84a:	9e 81       	ldd	r25, Y+6	; 0x06
     84c:	af 81       	ldd	r26, Y+7	; 0x07
     84e:	b8 85       	ldd	r27, Y+8	; 0x08
     850:	64 e0       	ldi	r22, 0x04	; 4
     852:	b6 95       	lsr	r27
     854:	a7 95       	ror	r26
     856:	97 95       	ror	r25
     858:	87 95       	ror	r24
     85a:	6a 95       	dec	r22
     85c:	d1 f7       	brne	.-12     	; 0x852 <MassStorageHost_Task+0x2ce>
     85e:	28 17       	cp	r18, r24
     860:	39 07       	cpc	r19, r25
     862:	4a 07       	cpc	r20, r26
     864:	5b 07       	cpc	r21, r27
     866:	08 f4       	brcc	.+2      	; 0x86a <MassStorageHost_Task+0x2e6>
     868:	9e cf       	rjmp	.-196    	; 0x7a6 <MassStorageHost_Task+0x222>
		}

		puts_P(PSTR("\r\n"));
	}

	puts_P(PSTR("\r\n\r\nPress board button to read entire ASCII contents of disk...\r\n\r\n"));
     86a:	8e ef       	ldi	r24, 0xFE	; 254
     86c:	90 e0       	ldi	r25, 0x00	; 0
     86e:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <puts_P>
     872:	05 c0       	rjmp	.+10     	; 0x87e <MassStorageHost_Task+0x2fa>

	/* Wait for the board button to be pressed */
	while (!(Buttons_GetStatus() & BUTTONS_BUTTON1))
	{
		/* Abort if device removed */
		if (USB_HostState == HOST_STATE_Unattached)
     874:	80 91 34 01 	lds	r24, 0x0134
     878:	81 30       	cpi	r24, 0x01	; 1
     87a:	09 f4       	brne	.+2      	; 0x87e <MassStorageHost_Task+0x2fa>
     87c:	5f c0       	rjmp	.+190    	; 0x93c <MassStorageHost_Task+0x3b8>
	}

	puts_P(PSTR("\r\n\r\nPress board button to read entire ASCII contents of disk...\r\n\r\n"));

	/* Wait for the board button to be pressed */
	while (!(Buttons_GetStatus() & BUTTONS_BUTTON1))
     87e:	62 99       	sbic	0x0c, 2	; 12
     880:	f9 cf       	rjmp	.-14     	; 0x874 <MassStorageHost_Task+0x2f0>
     882:	aa 24       	eor	r10, r10
     884:	bb 24       	eor	r11, r11
     886:	65 01       	movw	r12, r10
     888:	3d c0       	rjmp	.+122    	; 0x904 <MassStorageHost_Task+0x380>

	/* Print out the entire disk contents in ASCII format */
	for (uint32_t CurrBlockAddress = 0; CurrBlockAddress < DiskCapacity.Blocks; CurrBlockAddress++)
	{
		/* Read in the next block of data from the device */
		if ((ErrorCode = MassStore_ReadDeviceBlock(0, CurrBlockAddress, 1, DiskCapacity.BlockSize, BlockBuffer)) != 0)
     88a:	0d 81       	ldd	r16, Y+5	; 0x05
     88c:	1e 81       	ldd	r17, Y+6	; 0x06
     88e:	80 e0       	ldi	r24, 0x00	; 0
     890:	b6 01       	movw	r22, r12
     892:	a5 01       	movw	r20, r10
     894:	21 e0       	ldi	r18, 0x01	; 1
     896:	72 01       	movw	r14, r4
     898:	a0 d3       	rcall	.+1856   	; 0xfda <MassStore_ReadDeviceBlock>
     89a:	68 2f       	mov	r22, r24
     89c:	88 23       	and	r24, r24
     89e:	19 f4       	brne	.+6      	; 0x8a6 <MassStorageHost_Task+0x322>
     8a0:	ee 24       	eor	r14, r14
     8a2:	ff 24       	eor	r15, r15
     8a4:	1e c0       	rjmp	.+60     	; 0x8e2 <MassStorageHost_Task+0x35e>
		{
			ShowDiskReadError(PSTR("Read Device Block"), ErrorCode);
     8a6:	8c ee       	ldi	r24, 0xEC	; 236
     8a8:	90 e0       	ldi	r25, 0x00	; 0
     8aa:	f0 dd       	rcall	.-1056   	; 0x48c <ShowDiskReadError>
			USB_Host_SetDeviceConfiguration(0);
     8ac:	80 e0       	ldi	r24, 0x00	; 0
     8ae:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <USB_Host_SetDeviceConfiguration>
     8b2:	44 c0       	rjmp	.+136    	; 0x93c <MassStorageHost_Task+0x3b8>
		/* Send the ASCII data in the read in block to the serial port */
		for (uint16_t Byte = 0; Byte < DiskCapacity.BlockSize; Byte++)
		{
			char CurrByte = BlockBuffer[Byte];

			putchar(isprint(CurrByte) ? CurrByte : '.');
     8b4:	f4 01       	movw	r30, r8
     8b6:	ee 0d       	add	r30, r14
     8b8:	ff 1d       	adc	r31, r15
     8ba:	80 81       	ld	r24, Z
     8bc:	08 2f       	mov	r16, r24
     8be:	10 e0       	ldi	r17, 0x00	; 0
     8c0:	c8 01       	movw	r24, r16
     8c2:	0e 94 28 10 	call	0x2050	; 0x2050 <isprint>
     8c6:	89 2b       	or	r24, r25
     8c8:	11 f4       	brne	.+4      	; 0x8ce <MassStorageHost_Task+0x34a>
     8ca:	0e e2       	ldi	r16, 0x2E	; 46
     8cc:	10 e0       	ldi	r17, 0x00	; 0
     8ce:	60 91 45 01 	lds	r22, 0x0145
     8d2:	70 91 46 01 	lds	r23, 0x0146
     8d6:	c8 01       	movw	r24, r16
     8d8:	0e 94 2e 10 	call	0x205c	; 0x205c <fputc>
			USB_Host_SetDeviceConfiguration(0);
			return;
		}

		/* Send the ASCII data in the read in block to the serial port */
		for (uint16_t Byte = 0; Byte < DiskCapacity.BlockSize; Byte++)
     8dc:	08 94       	sec
     8de:	e1 1c       	adc	r14, r1
     8e0:	f1 1c       	adc	r15, r1
     8e2:	97 01       	movw	r18, r14
     8e4:	40 e0       	ldi	r20, 0x00	; 0
     8e6:	50 e0       	ldi	r21, 0x00	; 0
     8e8:	8d 81       	ldd	r24, Y+5	; 0x05
     8ea:	9e 81       	ldd	r25, Y+6	; 0x06
     8ec:	af 81       	ldd	r26, Y+7	; 0x07
     8ee:	b8 85       	ldd	r27, Y+8	; 0x08
     8f0:	28 17       	cp	r18, r24
     8f2:	39 07       	cpc	r19, r25
     8f4:	4a 07       	cpc	r20, r26
     8f6:	5b 07       	cpc	r21, r27
     8f8:	e8 f2       	brcs	.-70     	; 0x8b4 <MassStorageHost_Task+0x330>
		if (USB_HostState == HOST_STATE_Unattached)
		  return;
	}

	/* Print out the entire disk contents in ASCII format */
	for (uint32_t CurrBlockAddress = 0; CurrBlockAddress < DiskCapacity.Blocks; CurrBlockAddress++)
     8fa:	08 94       	sec
     8fc:	a1 1c       	adc	r10, r1
     8fe:	b1 1c       	adc	r11, r1
     900:	c1 1c       	adc	r12, r1
     902:	d1 1c       	adc	r13, r1
     904:	89 81       	ldd	r24, Y+1	; 0x01
     906:	9a 81       	ldd	r25, Y+2	; 0x02
     908:	ab 81       	ldd	r26, Y+3	; 0x03
     90a:	bc 81       	ldd	r27, Y+4	; 0x04
     90c:	a8 16       	cp	r10, r24
     90e:	b9 06       	cpc	r11, r25
     910:	ca 06       	cpc	r12, r26
     912:	db 06       	cpc	r13, r27
     914:	08 f4       	brcc	.+2      	; 0x918 <MassStorageHost_Task+0x394>
     916:	b9 cf       	rjmp	.-142    	; 0x88a <MassStorageHost_Task+0x306>
     918:	8b b1       	in	r24, 0x0b	; 11
     91a:	8f 70       	andi	r24, 0x0F	; 15
     91c:	80 66       	ori	r24, 0x60	; 96
     91e:	8b b9       	out	0x0b, r24	; 11
		}
	}

	/* Indicate device no longer busy */
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
	USB_Host_SetDeviceConfiguration(0);
     920:	80 e0       	ldi	r24, 0x00	; 0
     922:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <USB_Host_SetDeviceConfiguration>
     926:	2f ad       	ldd	r18, Y+63	; 0x3f
     928:	21 96       	adiw	r28, 0x01	; 1
     92a:	3f ad       	ldd	r19, Y+63	; 0x3f
     92c:	21 97       	sbiw	r28, 0x01	; 1
     92e:	c9 01       	movw	r24, r18
     930:	0f b6       	in	r0, 0x3f	; 63
     932:	f8 94       	cli
     934:	9e bf       	out	0x3e, r25	; 62
     936:	0f be       	out	0x3f, r0	; 63
     938:	8d bf       	out	0x3d, r24	; 61
     93a:	0a c0       	rjmp	.+20     	; 0x950 <MassStorageHost_Task+0x3cc>
     93c:	8f ad       	ldd	r24, Y+63	; 0x3f
     93e:	21 96       	adiw	r28, 0x01	; 1
     940:	9f ad       	ldd	r25, Y+63	; 0x3f
     942:	21 97       	sbiw	r28, 0x01	; 1
     944:	9c 01       	movw	r18, r24
     946:	0f b6       	in	r0, 0x3f	; 63
     948:	f8 94       	cli
     94a:	3e bf       	out	0x3e, r19	; 62
     94c:	0f be       	out	0x3f, r0	; 63
     94e:	2d bf       	out	0x3d, r18	; 61
}
     950:	0f b6       	in	r0, 0x3f	; 63
     952:	f8 94       	cli
     954:	3e be       	out	0x3e, r3	; 62
     956:	0f be       	out	0x3f, r0	; 63
     958:	2d be       	out	0x3d, r2	; 61
     95a:	c0 5c       	subi	r28, 0xC0	; 192
     95c:	df 4f       	sbci	r29, 0xFF	; 255
     95e:	0f b6       	in	r0, 0x3f	; 63
     960:	f8 94       	cli
     962:	de bf       	out	0x3e, r29	; 62
     964:	0f be       	out	0x3f, r0	; 63
     966:	cd bf       	out	0x3d, r28	; 61
     968:	cf 91       	pop	r28
     96a:	df 91       	pop	r29
     96c:	1f 91       	pop	r17
     96e:	0f 91       	pop	r16
     970:	ff 90       	pop	r15
     972:	ef 90       	pop	r14
     974:	df 90       	pop	r13
     976:	cf 90       	pop	r12
     978:	bf 90       	pop	r11
     97a:	af 90       	pop	r10
     97c:	9f 90       	pop	r9
     97e:	8f 90       	pop	r8
     980:	7f 90       	pop	r7
     982:	6f 90       	pop	r6
     984:	5f 90       	pop	r5
     986:	4f 90       	pop	r4
     988:	3f 90       	pop	r3
     98a:	2f 90       	pop	r2
     98c:	08 95       	ret

0000098e <EVENT_USB_Host_HostError>:
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
}

/** Event handler for the USB_HostError event. This indicates that a hardware error occurred while in host mode. */
void EVENT_USB_Host_HostError(const uint8_t ErrorCode)
{
     98e:	1f 93       	push	r17
     990:	18 2f       	mov	r17, r24
	USB_Disable();
     992:	96 d7       	rcall	.+3884   	; 0x18c0 <USB_Disable>

	printf_P(PSTR(ESC_FG_RED "Host Mode Error\r\n"
     994:	00 d0       	rcall	.+0      	; 0x996 <EVENT_USB_Host_HostError+0x8>
     996:	00 d0       	rcall	.+0      	; 0x998 <EVENT_USB_Host_HostError+0xa>
     998:	ed b7       	in	r30, 0x3d	; 61
     99a:	fe b7       	in	r31, 0x3e	; 62
     99c:	31 96       	adiw	r30, 0x01	; 1
     99e:	8f ed       	ldi	r24, 0xDF	; 223
     9a0:	92 e0       	ldi	r25, 0x02	; 2
     9a2:	ad b7       	in	r26, 0x3d	; 61
     9a4:	be b7       	in	r27, 0x3e	; 62
     9a6:	12 96       	adiw	r26, 0x02	; 2
     9a8:	9c 93       	st	X, r25
     9aa:	8e 93       	st	-X, r24
     9ac:	11 97       	sbiw	r26, 0x01	; 1
     9ae:	12 83       	std	Z+2, r17	; 0x02
     9b0:	13 82       	std	Z+3, r1	; 0x03
     9b2:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <printf_P>
     9b6:	8b b1       	in	r24, 0x0b	; 11
     9b8:	8f 70       	andi	r24, 0x0F	; 15
     9ba:	80 69       	ori	r24, 0x90	; 144
     9bc:	8b b9       	out	0x0b, r24	; 11
     9be:	0f 90       	pop	r0
     9c0:	0f 90       	pop	r0
     9c2:	0f 90       	pop	r0
     9c4:	0f 90       	pop	r0
     9c6:	ff cf       	rjmp	.-2      	; 0x9c6 <EVENT_USB_Host_HostError+0x38>

000009c8 <EVENT_USB_Host_DeviceEnumerationComplete>:

/** Event handler for the USB_DeviceEnumerationComplete event. This indicates that a device has been successfully
 *  enumerated by the host and is now ready to be used by the application.
 */
void EVENT_USB_Host_DeviceEnumerationComplete(void)
{
     9c8:	1f 93       	push	r17
	puts_P(PSTR("Getting Config Data.\r\n"));
     9ca:	8c ec       	ldi	r24, 0xCC	; 204
     9cc:	93 e0       	ldi	r25, 0x03	; 3
     9ce:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <puts_P>

	uint8_t ErrorCode;

	/* Get and process the configuration descriptor data */
	if ((ErrorCode = ProcessConfigurationDescriptor()) != SuccessfulConfigRead)
     9d2:	c0 d0       	rcall	.+384    	; 0xb54 <ProcessConfigurationDescriptor>
     9d4:	18 2f       	mov	r17, r24
     9d6:	88 23       	and	r24, r24
     9d8:	c1 f0       	breq	.+48     	; 0xa0a <EVENT_USB_Host_DeviceEnumerationComplete+0x42>
	{
		if (ErrorCode == ControlError)
     9da:	81 30       	cpi	r24, 0x01	; 1
     9dc:	19 f4       	brne	.+6      	; 0x9e4 <EVENT_USB_Host_DeviceEnumerationComplete+0x1c>
		  puts_P(PSTR(ESC_FG_RED "Control Error (Get Configuration).\r\n"));
     9de:	82 ea       	ldi	r24, 0xA2	; 162
     9e0:	93 e0       	ldi	r25, 0x03	; 3
     9e2:	02 c0       	rjmp	.+4      	; 0x9e8 <EVENT_USB_Host_DeviceEnumerationComplete+0x20>
		else
		  puts_P(PSTR(ESC_FG_RED "Invalid Device.\r\n"));
     9e4:	8b e8       	ldi	r24, 0x8B	; 139
     9e6:	93 e0       	ldi	r25, 0x03	; 3
     9e8:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <puts_P>

		printf_P(PSTR(" -- Error Code: %d\r\n" ESC_FG_WHITE), ErrorCode);
     9ec:	00 d0       	rcall	.+0      	; 0x9ee <EVENT_USB_Host_DeviceEnumerationComplete+0x26>
     9ee:	00 d0       	rcall	.+0      	; 0x9f0 <EVENT_USB_Host_DeviceEnumerationComplete+0x28>
     9f0:	ed b7       	in	r30, 0x3d	; 61
     9f2:	fe b7       	in	r31, 0x3e	; 62
     9f4:	31 96       	adiw	r30, 0x01	; 1
     9f6:	81 e7       	ldi	r24, 0x71	; 113
     9f8:	93 e0       	ldi	r25, 0x03	; 3
     9fa:	ad b7       	in	r26, 0x3d	; 61
     9fc:	be b7       	in	r27, 0x3e	; 62
     9fe:	12 96       	adiw	r26, 0x02	; 2
     a00:	9c 93       	st	X, r25
     a02:	8e 93       	st	-X, r24
     a04:	11 97       	sbiw	r26, 0x01	; 1
     a06:	12 83       	std	Z+2, r17	; 0x02
     a08:	14 c0       	rjmp	.+40     	; 0xa32 <EVENT_USB_Host_DeviceEnumerationComplete+0x6a>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	/* Set the device configuration to the first configuration (rarely do devices use multiple configurations) */
	if ((ErrorCode = USB_Host_SetDeviceConfiguration(1)) != HOST_SENDCONTROL_Successful)
     a0a:	81 e0       	ldi	r24, 0x01	; 1
     a0c:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <USB_Host_SetDeviceConfiguration>
     a10:	28 2f       	mov	r18, r24
     a12:	88 23       	and	r24, r24
     a14:	d1 f0       	breq	.+52     	; 0xa4a <EVENT_USB_Host_DeviceEnumerationComplete+0x82>
	{
		printf_P(PSTR(ESC_FG_RED "Control Error (Set Configuration).\r\n"
     a16:	00 d0       	rcall	.+0      	; 0xa18 <EVENT_USB_Host_DeviceEnumerationComplete+0x50>
     a18:	00 d0       	rcall	.+0      	; 0xa1a <EVENT_USB_Host_DeviceEnumerationComplete+0x52>
     a1a:	ed b7       	in	r30, 0x3d	; 61
     a1c:	fe b7       	in	r31, 0x3e	; 62
     a1e:	31 96       	adiw	r30, 0x01	; 1
     a20:	8e e2       	ldi	r24, 0x2E	; 46
     a22:	93 e0       	ldi	r25, 0x03	; 3
     a24:	ad b7       	in	r26, 0x3d	; 61
     a26:	be b7       	in	r27, 0x3e	; 62
     a28:	12 96       	adiw	r26, 0x02	; 2
     a2a:	9c 93       	st	X, r25
     a2c:	8e 93       	st	-X, r24
     a2e:	11 97       	sbiw	r26, 0x01	; 1
     a30:	22 83       	std	Z+2, r18	; 0x02
     a32:	13 82       	std	Z+3, r1	; 0x03
     a34:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <printf_P>
     a38:	8b b1       	in	r24, 0x0b	; 11
     a3a:	8f 70       	andi	r24, 0x0F	; 15
     a3c:	80 69       	ori	r24, 0x90	; 144
     a3e:	8b b9       	out	0x0b, r24	; 11
     a40:	0f 90       	pop	r0
     a42:	0f 90       	pop	r0
     a44:	0f 90       	pop	r0
     a46:	0f 90       	pop	r0
     a48:	08 c0       	rjmp	.+16     	; 0xa5a <EVENT_USB_Host_DeviceEnumerationComplete+0x92>

		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	puts_P(PSTR("Mass Storage Disk Enumerated.\r\n"));
     a4a:	8e e0       	ldi	r24, 0x0E	; 14
     a4c:	93 e0       	ldi	r25, 0x03	; 3
     a4e:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <puts_P>
     a52:	8b b1       	in	r24, 0x0b	; 11
     a54:	8f 70       	andi	r24, 0x0F	; 15
     a56:	80 66       	ori	r24, 0x60	; 96
     a58:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
}
     a5a:	1f 91       	pop	r17
     a5c:	08 95       	ret

00000a5e <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     a5e:	84 b7       	in	r24, 0x34	; 52
     a60:	87 7f       	andi	r24, 0xF7	; 247
     a62:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     a64:	38 e1       	ldi	r19, 0x18	; 24
     a66:	0f b6       	in	r0, 0x3f	; 63
     a68:	f8 94       	cli
     a6a:	30 93 60 00 	sts	0x0060, r19
     a6e:	10 92 60 00 	sts	0x0060, r1
     a72:	0f be       	out	0x3f, r0	; 63

	/* Disable clock division */
	clock_prescale_set(clock_div_1);
     a74:	80 e0       	ldi	r24, 0x00	; 0
     a76:	90 e0       	ldi	r25, 0x00	; 0
     a78:	20 e8       	ldi	r18, 0x80	; 128
     a7a:	0f b6       	in	r0, 0x3f	; 63
     a7c:	f8 94       	cli
     a7e:	20 93 61 00 	sts	0x0061, r18
     a82:	80 93 61 00 	sts	0x0061, r24
     a86:	0f be       	out	0x3f, r0	; 63
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     a88:	83 e3       	ldi	r24, 0x33	; 51
     a8a:	90 e0       	ldi	r25, 0x00	; 0
     a8c:	90 93 cd 00 	sts	0x00CD, r25
     a90:	80 93 cc 00 	sts	0x00CC, r24

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     a94:	86 e0       	ldi	r24, 0x06	; 6
     a96:	80 93 ca 00 	sts	0x00CA, r24
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     a9a:	10 92 c8 00 	sts	0x00C8, r1
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     a9e:	30 93 c9 00 	sts	0x00C9, r19

				DDRD  |= (1 << 3);
     aa2:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     aa4:	5a 9a       	sbi	0x0b, 2	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     aa6:	8a b1       	in	r24, 0x0a	; 10
     aa8:	80 6f       	ori	r24, 0xF0	; 240
     aaa:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     aac:	8b b1       	in	r24, 0x0b	; 11
     aae:	8f 70       	andi	r24, 0x0F	; 15
     ab0:	8b b9       	out	0x0b, r24	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Buttons_Init(void)
			{
				DDRE  &= ~BUTTONS_BUTTON1;
     ab2:	6a 98       	cbi	0x0d, 2	; 13
				PORTE |=  BUTTONS_BUTTON1;
     ab4:	72 9a       	sbi	0x0e, 2	; 14

	/* Hardware Initialization */
	Serial_Init(9600, false);
	LEDs_Init();
	Buttons_Init();
	USB_Init();
     ab6:	fb d6       	rcall	.+3574   	; 0x18ae <USB_Init>
			static inline void Serial_CreateStream(FILE* Stream)
			{
				if (!(Stream))
				{
					Stream = &USARTSerialStream;
					stdin  = Stream;
     ab8:	e5 e3       	ldi	r30, 0x35	; 53
     aba:	f1 e0       	ldi	r31, 0x01	; 1
     abc:	f0 93 44 01 	sts	0x0144, r31
     ac0:	e0 93 43 01 	sts	0x0143, r30
					stdout = Stream;
     ac4:	f0 93 46 01 	sts	0x0146, r31
     ac8:	e0 93 45 01 	sts	0x0145, r30
				}
			
				*Stream = (FILE)FDEV_SETUP_STREAM(Serial_putchar, Serial_getchar, _FDEV_SETUP_RW);
     acc:	8e e0       	ldi	r24, 0x0E	; 14
     ace:	df 01       	movw	r26, r30
     ad0:	1d 92       	st	X+, r1
     ad2:	8a 95       	dec	r24
     ad4:	e9 f7       	brne	.-6      	; 0xad0 <SetupHardware+0x72>
     ad6:	83 e0       	ldi	r24, 0x03	; 3
     ad8:	80 93 38 01 	sts	0x0138, r24
     adc:	89 ee       	ldi	r24, 0xE9	; 233
     ade:	9f e0       	ldi	r25, 0x0F	; 15
     ae0:	90 93 3e 01 	sts	0x013E, r25
     ae4:	80 93 3d 01 	sts	0x013D, r24
     ae8:	83 ef       	ldi	r24, 0xF3	; 243
     aea:	9f e0       	ldi	r25, 0x0F	; 15
     aec:	90 93 40 01 	sts	0x0140, r25
     af0:	80 93 3f 01 	sts	0x013F, r24

	/* Create a stdio stream for the serial port for stdin and stdout */
	Serial_CreateStream(NULL);
}
     af4:	08 95       	ret

00000af6 <main>:
/** Main program entry point. This routine configures the hardware required by the application, then
 *  enters a loop to run the application tasks in sequence.
 */
int main(void)
{
	SetupHardware();
     af6:	b3 df       	rcall	.-154    	; 0xa5e <SetupHardware>

	puts_P(PSTR(ESC_FG_CYAN "Mass Storage Host Demo running.\r\n" ESC_FG_WHITE));
     af8:	81 e2       	ldi	r24, 0x21	; 33
     afa:	94 e0       	ldi	r25, 0x04	; 4
     afc:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <puts_P>
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     b00:	8b b1       	in	r24, 0x0b	; 11
     b02:	8f 70       	andi	r24, 0x0F	; 15
     b04:	80 61       	ori	r24, 0x10	; 16
     b06:	8b b9       	out	0x0b, r24	; 11

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
	sei();
     b08:	78 94       	sei

	for (;;)
	{
		MassStorageHost_Task();
     b0a:	3c dd       	rcall	.-1416   	; 0x584 <MassStorageHost_Task>

		USB_USBTask();
     b0c:	0e 94 d7 0f 	call	0x1fae	; 0x1fae <USB_USBTask>
     b10:	fc cf       	rjmp	.-8      	; 0xb0a <main+0x14>

00000b12 <DComp_NextMSInterface>:
 *  This comparator searches for the next Interface descriptor of the correct Mass Storage Class, Subclass and Protocol values.
 *
 *  \return A value from the DSEARCH_Return_ErrorCodes_t enum
 */
uint8_t DComp_NextMSInterface(void* CurrentDescriptor)
{
     b12:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
     b14:	81 81       	ldd	r24, Z+1	; 0x01
     b16:	84 30       	cpi	r24, 0x04	; 4
     b18:	59 f4       	brne	.+22     	; 0xb30 <DComp_NextMSInterface+0x1e>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		/* Check the descriptor class and protocol, break out if correct class/protocol interface found */
		if ((Interface->Class    == MASS_STORE_CLASS)    &&
     b1a:	85 81       	ldd	r24, Z+5	; 0x05
     b1c:	88 30       	cpi	r24, 0x08	; 8
     b1e:	41 f4       	brne	.+16     	; 0xb30 <DComp_NextMSInterface+0x1e>
     b20:	86 81       	ldd	r24, Z+6	; 0x06
     b22:	86 30       	cpi	r24, 0x06	; 6
     b24:	29 f4       	brne	.+10     	; 0xb30 <DComp_NextMSInterface+0x1e>
     b26:	87 81       	ldd	r24, Z+7	; 0x07
     b28:	80 35       	cpi	r24, 0x50	; 80
     b2a:	11 f4       	brne	.+4      	; 0xb30 <DComp_NextMSInterface+0x1e>
     b2c:	80 e0       	ldi	r24, 0x00	; 0
     b2e:	08 95       	ret
     b30:	82 e0       	ldi	r24, 0x02	; 2
			return DESCRIPTOR_SEARCH_Found;
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
     b32:	08 95       	ret

00000b34 <DComp_NextMSInterfaceBulkDataEndpoint>:
 *  another interface descriptor is found before the next endpoint.
 *
 *  \return A value from the DSEARCH_Return_ErrorCodes_t enum
 */
uint8_t DComp_NextMSInterfaceBulkDataEndpoint(void* CurrentDescriptor)
{
     b34:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Endpoint)
     b36:	81 81       	ldd	r24, Z+1	; 0x01
     b38:	85 30       	cpi	r24, 0x05	; 5
     b3a:	31 f4       	brne	.+12     	; 0xb48 <DComp_NextMSInterfaceBulkDataEndpoint+0x14>
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		/* Check the endpoint type, break out if correct BULK type endpoint found */
		if ((Endpoint->Attributes & EP_TYPE_MASK) == EP_TYPE_BULK)
     b3c:	83 81       	ldd	r24, Z+3	; 0x03
     b3e:	83 70       	andi	r24, 0x03	; 3
     b40:	82 30       	cpi	r24, 0x02	; 2
     b42:	31 f4       	brne	.+12     	; 0xb50 <DComp_NextMSInterfaceBulkDataEndpoint+0x1c>
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	08 95       	ret
		  return DESCRIPTOR_SEARCH_Found;
	}
	else if (Header->Type == DTYPE_Interface)
     b48:	84 30       	cpi	r24, 0x04	; 4
     b4a:	11 f4       	brne	.+4      	; 0xb50 <DComp_NextMSInterfaceBulkDataEndpoint+0x1c>
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	08 95       	ret
     b50:	82 e0       	ldi	r24, 0x02	; 2
	{
		return DESCRIPTOR_SEARCH_Fail;
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
     b52:	08 95       	ret

00000b54 <ProcessConfigurationDescriptor>:
 *  This routine searches for a MSD interface descriptor containing bulk IN and OUT data endpoints.
 *
 *  \return An error code from the \ref MassStorageHost_GetConfigDescriptorDataCodes_t enum.
 */
uint8_t ProcessConfigurationDescriptor(void)
{
     b54:	8f 92       	push	r8
     b56:	9f 92       	push	r9
     b58:	af 92       	push	r10
     b5a:	bf 92       	push	r11
     b5c:	cf 92       	push	r12
     b5e:	df 92       	push	r13
     b60:	ef 92       	push	r14
     b62:	ff 92       	push	r15
     b64:	0f 93       	push	r16
     b66:	1f 93       	push	r17
     b68:	df 93       	push	r29
     b6a:	cf 93       	push	r28
     b6c:	cd b7       	in	r28, 0x3d	; 61
     b6e:	de b7       	in	r29, 0x3e	; 62
     b70:	c4 50       	subi	r28, 0x04	; 4
     b72:	d2 40       	sbci	r29, 0x02	; 2
     b74:	0f b6       	in	r0, 0x3f	; 63
     b76:	f8 94       	cli
     b78:	de bf       	out	0x3e, r29	; 62
     b7a:	0f be       	out	0x3f, r0	; 63
     b7c:	cd bf       	out	0x3d, r28	; 61
	uint8_t  ConfigDescriptorData[512];
	void*    CurrConfigLocation = ConfigDescriptorData;
     b7e:	ae 01       	movw	r20, r28
     b80:	4b 5f       	subi	r20, 0xFB	; 251
     b82:	5f 4f       	sbci	r21, 0xFF	; 255
     b84:	5a 83       	std	Y+2, r21	; 0x02
     b86:	49 83       	std	Y+1, r20	; 0x01
	USB_Descriptor_Interface_t* MSInterface     = NULL;
	USB_Descriptor_Endpoint_t*  DataINEndpoint  = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint = NULL;

	/* Retrieve the entire configuration descriptor into the allocated buffer */
	switch (USB_Host_GetDeviceConfigDescriptor(1, &CurrConfigBytesRem, ConfigDescriptorData, sizeof(ConfigDescriptorData)))
     b88:	83 e0       	ldi	r24, 0x03	; 3
     b8a:	a8 2e       	mov	r10, r24
     b8c:	b1 2c       	mov	r11, r1
     b8e:	ac 0e       	add	r10, r28
     b90:	bd 1e       	adc	r11, r29
     b92:	81 e0       	ldi	r24, 0x01	; 1
     b94:	b5 01       	movw	r22, r10
     b96:	20 e0       	ldi	r18, 0x00	; 0
     b98:	32 e0       	ldi	r19, 0x02	; 2
     b9a:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <USB_Host_GetDeviceConfigDescriptor>
     b9e:	85 30       	cpi	r24, 0x05	; 5
     ba0:	29 f0       	breq	.+10     	; 0xbac <ProcessConfigurationDescriptor+0x58>
     ba2:	86 30       	cpi	r24, 0x06	; 6
     ba4:	89 f0       	breq	.+34     	; 0xbc8 <ProcessConfigurationDescriptor+0x74>
     ba6:	88 23       	and	r24, r24
     ba8:	19 f0       	breq	.+6      	; 0xbb0 <ProcessConfigurationDescriptor+0x5c>
     baa:	10 c0       	rjmp	.+32     	; 0xbcc <ProcessConfigurationDescriptor+0x78>
     bac:	82 e0       	ldi	r24, 0x02	; 2
     bae:	4a c0       	rjmp	.+148    	; 0xc44 <ProcessConfigurationDescriptor+0xf0>
     bb0:	00 e0       	ldi	r16, 0x00	; 0
     bb2:	10 e0       	ldi	r17, 0x00	; 0
     bb4:	ee 24       	eor	r14, r14
     bb6:	ff 24       	eor	r15, r15
     bb8:	cc 24       	eor	r12, r12
     bba:	dd 24       	eor	r13, r13
	}

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(MSInterface) ||
     bbc:	45 01       	movw	r8, r10
     bbe:	5e 01       	movw	r10, r28
     bc0:	08 94       	sec
     bc2:	a1 1c       	adc	r10, r1
     bc4:	b1 1c       	adc	r11, r1
     bc6:	04 c0       	rjmp	.+8      	; 0xbd0 <ProcessConfigurationDescriptor+0x7c>
	USB_Descriptor_Interface_t* MSInterface     = NULL;
	USB_Descriptor_Endpoint_t*  DataINEndpoint  = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint = NULL;

	/* Retrieve the entire configuration descriptor into the allocated buffer */
	switch (USB_Host_GetDeviceConfigDescriptor(1, &CurrConfigBytesRem, ConfigDescriptorData, sizeof(ConfigDescriptorData)))
     bc8:	83 e0       	ldi	r24, 0x03	; 3
     bca:	3c c0       	rjmp	.+120    	; 0xc44 <ProcessConfigurationDescriptor+0xf0>
     bcc:	81 e0       	ldi	r24, 0x01	; 1
     bce:	3a c0       	rjmp	.+116    	; 0xc44 <ProcessConfigurationDescriptor+0xf0>
	}

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(MSInterface) ||
     bd0:	01 15       	cp	r16, r1
     bd2:	11 05       	cpc	r17, r1
     bd4:	39 f0       	breq	.+14     	; 0xbe4 <ProcessConfigurationDescriptor+0x90>
     bd6:	c4 01       	movw	r24, r8
     bd8:	b5 01       	movw	r22, r10
     bda:	4a e9       	ldi	r20, 0x9A	; 154
     bdc:	55 e0       	ldi	r21, 0x05	; 5
     bde:	dc d7       	rcall	.+4024   	; 0x1b98 <USB_GetNextDescriptorComp>
     be0:	88 23       	and	r24, r24
     be2:	81 f0       	breq	.+32     	; 0xc04 <ProcessConfigurationDescriptor+0xb0>
		    USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
		                              DComp_NextMSInterfaceBulkDataEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			/* Get the next Mass Storage interface from the configuration descriptor */
			if (USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     be4:	c4 01       	movw	r24, r8
     be6:	b5 01       	movw	r22, r10
     be8:	49 e8       	ldi	r20, 0x89	; 137
     bea:	55 e0       	ldi	r21, 0x05	; 5
     bec:	d5 d7       	rcall	.+4010   	; 0x1b98 <USB_GetNextDescriptorComp>
     bee:	88 23       	and	r24, r24
     bf0:	11 f0       	breq	.+4      	; 0xbf6 <ProcessConfigurationDescriptor+0xa2>
     bf2:	84 e0       	ldi	r24, 0x04	; 4
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <ProcessConfigurationDescriptor+0xf0>
				/* Descriptor not found, error out */
				return NoCompatibleInterfaceFound;
			}

			/* Save the interface in case we need to refer back to it later */
			MSInterface = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Interface_t);
     bf6:	09 81       	ldd	r16, Y+1	; 0x01
     bf8:	1a 81       	ldd	r17, Y+2	; 0x02
     bfa:	cc 24       	eor	r12, r12
     bfc:	dd 24       	eor	r13, r13
     bfe:	ee 24       	eor	r14, r14
     c00:	ff 24       	eor	r15, r15
     c02:	e6 cf       	rjmp	.-52     	; 0xbd0 <ProcessConfigurationDescriptor+0x7c>
			/* Skip the remainder of the loop as we have not found an endpoint yet */
			continue;
		}

		/* Retrieve the endpoint address from the endpoint descriptor */
		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Endpoint_t);
     c04:	e9 81       	ldd	r30, Y+1	; 0x01
     c06:	fa 81       	ldd	r31, Y+2	; 0x02

		/* If the endpoint is a IN type endpoint */
		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
     c08:	82 81       	ldd	r24, Z+2	; 0x02
     c0a:	87 fd       	sbrc	r24, 7
     c0c:	02 c0       	rjmp	.+4      	; 0xc12 <ProcessConfigurationDescriptor+0xbe>
     c0e:	6f 01       	movw	r12, r30
     c10:	01 c0       	rjmp	.+2      	; 0xc14 <ProcessConfigurationDescriptor+0xc0>
     c12:	7f 01       	movw	r14, r30
			return DescriptorTooLarge;
		default:
			return ControlError;
	}

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
     c14:	e1 14       	cp	r14, r1
     c16:	f1 04       	cpc	r15, r1
     c18:	d9 f2       	breq	.-74     	; 0xbd0 <ProcessConfigurationDescriptor+0x7c>
     c1a:	c1 14       	cp	r12, r1
     c1c:	d1 04       	cpc	r13, r1
     c1e:	c1 f2       	breq	.-80     	; 0xbd0 <ProcessConfigurationDescriptor+0x7c>
		else
		  DataOUTEndpoint = EndpointData;
	}

	/* Configure the Mass Storage data IN pipe */
	Pipe_ConfigurePipe(MASS_STORE_DATA_IN_PIPE, EP_TYPE_BULK, PIPE_TOKEN_IN,
     c20:	f7 01       	movw	r30, r14
     c22:	04 81       	ldd	r16, Z+4	; 0x04
     c24:	15 81       	ldd	r17, Z+5	; 0x05
     c26:	81 e0       	ldi	r24, 0x01	; 1
     c28:	62 e0       	ldi	r22, 0x02	; 2
     c2a:	40 e1       	ldi	r20, 0x10	; 16
     c2c:	22 81       	ldd	r18, Z+2	; 0x02
     c2e:	ee 24       	eor	r14, r14
     c30:	4a d5       	rcall	.+2708   	; 0x16c6 <Pipe_ConfigurePipe>
	                   DataINEndpoint->EndpointAddress, DataINEndpoint->EndpointSize, PIPE_BANK_SINGLE);

	/* Configure the Mass Storage data OUT pipe */
	Pipe_ConfigurePipe(MASS_STORE_DATA_OUT_PIPE, EP_TYPE_BULK, PIPE_TOKEN_OUT,
     c32:	f6 01       	movw	r30, r12
     c34:	04 81       	ldd	r16, Z+4	; 0x04
     c36:	15 81       	ldd	r17, Z+5	; 0x05
     c38:	82 e0       	ldi	r24, 0x02	; 2
     c3a:	62 e0       	ldi	r22, 0x02	; 2
     c3c:	40 e2       	ldi	r20, 0x20	; 32
     c3e:	22 81       	ldd	r18, Z+2	; 0x02
     c40:	42 d5       	rcall	.+2692   	; 0x16c6 <Pipe_ConfigurePipe>
     c42:	80 e0       	ldi	r24, 0x00	; 0
					   DataOUTEndpoint->EndpointAddress, DataOUTEndpoint->EndpointSize, PIPE_BANK_SINGLE);

	/* Valid data found, return success */
	return SuccessfulConfigRead;
}
     c44:	cc 5f       	subi	r28, 0xFC	; 252
     c46:	dd 4f       	sbci	r29, 0xFD	; 253
     c48:	0f b6       	in	r0, 0x3f	; 63
     c4a:	f8 94       	cli
     c4c:	de bf       	out	0x3e, r29	; 62
     c4e:	0f be       	out	0x3f, r0	; 63
     c50:	cd bf       	out	0x3d, r28	; 61
     c52:	cf 91       	pop	r28
     c54:	df 91       	pop	r29
     c56:	1f 91       	pop	r17
     c58:	0f 91       	pop	r16
     c5a:	ff 90       	pop	r15
     c5c:	ef 90       	pop	r14
     c5e:	df 90       	pop	r13
     c60:	cf 90       	pop	r12
     c62:	bf 90       	pop	r11
     c64:	af 90       	pop	r10
     c66:	9f 90       	pop	r9
     c68:	8f 90       	pop	r8
     c6a:	08 95       	ret

00000c6c <MassStore_WaitForDataReceived>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
     c6c:	40 91 a2 00 	lds	r20, 0x00A2
     c70:	50 91 a3 00 	lds	r21, 0x00A3
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     c74:	81 e0       	ldi	r24, 0x01	; 1
     c76:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     c7a:	80 91 a9 00 	lds	r24, 0x00A9
     c7e:	8f 7b       	andi	r24, 0xBF	; 191
     c80:	80 93 a9 00 	sts	0x00A9, r24
     c84:	20 e1       	ldi	r18, 0x10	; 16
     c86:	37 e2       	ldi	r19, 0x27	; 39
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     c88:	72 e0       	ldi	r23, 0x02	; 2
     c8a:	61 e0       	ldi	r22, 0x01	; 1
     c8c:	43 c0       	rjmp	.+134    	; 0xd14 <MassStore_WaitForDataReceived+0xa8>
     c8e:	80 91 a2 00 	lds	r24, 0x00A2
     c92:	90 91 a3 00 	lds	r25, 0x00A3
	while (!(Pipe_IsINReceived()))
	{
		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		/* Check to see if a new frame has been issued (1ms elapsed) */
		if (CurrentFrameNumber != PreviousFrameNumber)
     c96:	84 17       	cp	r24, r20
     c98:	95 07       	cpc	r25, r21
     c9a:	31 f0       	breq	.+12     	; 0xca8 <MassStore_WaitForDataReceived+0x3c>
		{
			/* Save the new frame number and decrement the timeout period */
			PreviousFrameNumber = CurrentFrameNumber;
			TimeoutMSRem--;
     c9c:	21 50       	subi	r18, 0x01	; 1
     c9e:	30 40       	sbci	r19, 0x00	; 0

			/* Check to see if the timeout period for the command has elapsed */
			if (!(TimeoutMSRem))
     ca0:	11 f4       	brne	.+4      	; 0xca6 <MassStore_WaitForDataReceived+0x3a>
     ca2:	83 e0       	ldi	r24, 0x03	; 3
     ca4:	08 95       	ret
     ca6:	ac 01       	movw	r20, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     ca8:	80 91 a9 00 	lds	r24, 0x00A9
     cac:	80 64       	ori	r24, 0x40	; 64
     cae:	80 93 a9 00 	sts	0x00A9, r24
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     cb2:	70 93 a7 00 	sts	0x00A7, r23

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     cb6:	80 91 a9 00 	lds	r24, 0x00A9
     cba:	8f 7b       	andi	r24, 0xBF	; 191
     cbc:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     cc0:	80 91 a6 00 	lds	r24, 0x00A6
		Pipe_Freeze();
		Pipe_SelectPipe(MASS_STORE_DATA_OUT_PIPE);
		Pipe_Unfreeze();

		/* Check if pipe stalled (command failed by device) */
		if (Pipe_IsStalled())
     cc4:	81 fd       	sbrc	r24, 1
     cc6:	10 c0       	rjmp	.+32     	; 0xce8 <MassStore_WaitForDataReceived+0x7c>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     cc8:	80 91 a9 00 	lds	r24, 0x00A9
     ccc:	80 64       	ori	r24, 0x40	; 64
     cce:	80 93 a9 00 	sts	0x00A9, r24
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     cd2:	60 93 a7 00 	sts	0x00A7, r22

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     cd6:	80 91 a9 00 	lds	r24, 0x00A9
     cda:	8f 7b       	andi	r24, 0xBF	; 191
     cdc:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     ce0:	80 91 a6 00 	lds	r24, 0x00A6
		Pipe_Freeze();
		Pipe_SelectPipe(MASS_STORE_DATA_IN_PIPE);
		Pipe_Unfreeze();

		/* Check if pipe stalled (command failed by device) */
		if (Pipe_IsStalled())
     ce4:	81 ff       	sbrs	r24, 1
     ce6:	10 c0       	rjmp	.+32     	; 0xd08 <MassStore_WaitForDataReceived+0x9c>
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				return (((UPCFG0X >> PEPNUM0) & PIPE_EPNUM_MASK) |
     ce8:	90 91 aa 00 	lds	r25, 0x00AA
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
     cec:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				return (((UPCFG0X >> PEPNUM0) & PIPE_EPNUM_MASK) |
     cf0:	80 73       	andi	r24, 0x30	; 48
     cf2:	80 31       	cpi	r24, 0x10	; 16
     cf4:	11 f0       	breq	.+4      	; 0xcfa <MassStore_WaitForDataReceived+0x8e>
     cf6:	80 e0       	ldi	r24, 0x00	; 0
     cf8:	01 c0       	rjmp	.+2      	; 0xcfc <MassStore_WaitForDataReceived+0x90>
     cfa:	80 e8       	ldi	r24, 0x80	; 128
		{
			/* Clear the stall condition on the IN pipe */
			USB_Host_ClearEndpointStall(Pipe_GetBoundEndpointAddress());
     cfc:	9f 70       	andi	r25, 0x0F	; 15
     cfe:	89 2b       	or	r24, r25
     d00:	0e 94 9b 0f 	call	0x1f36	; 0x1f36 <USB_Host_ClearEndpointStall>
     d04:	81 e0       	ldi	r24, 0x01	; 1
     d06:	08 95       	ret

			return PIPE_RWSTREAM_PipeStalled;
		}

		/* Check to see if the device was disconnected, if so exit function */
		if (USB_HostState == HOST_STATE_Unattached)
     d08:	80 91 34 01 	lds	r24, 0x0134
     d0c:	81 30       	cpi	r24, 0x01	; 1
     d0e:	11 f4       	brne	.+4      	; 0xd14 <MassStore_WaitForDataReceived+0xa8>
     d10:	82 e0       	ldi	r24, 0x02	; 2
     d12:	08 95       	ret
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     d14:	80 91 a6 00 	lds	r24, 0x00A6
	/* Select the IN data pipe for data reception */
	Pipe_SelectPipe(MASS_STORE_DATA_IN_PIPE);
	Pipe_Unfreeze();

	/* Wait until data received in the IN pipe */
	while (!(Pipe_IsINReceived()))
     d18:	80 ff       	sbrs	r24, 0
     d1a:	b9 cf       	rjmp	.-142    	; 0xc8e <MassStore_WaitForDataReceived+0x22>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     d1c:	81 e0       	ldi	r24, 0x01	; 1
     d1e:	80 93 a7 00 	sts	0x00A7, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     d22:	80 91 a9 00 	lds	r24, 0x00A9
     d26:	80 64       	ori	r24, 0x40	; 64
     d28:	80 93 a9 00 	sts	0x00A9, r24
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     d2c:	82 e0       	ldi	r24, 0x02	; 2
     d2e:	80 93 a7 00 	sts	0x00A7, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     d32:	80 91 a9 00 	lds	r24, 0x00A9
     d36:	80 64       	ori	r24, 0x40	; 64
     d38:	80 93 a9 00 	sts	0x00A9, r24
     d3c:	80 e0       	ldi	r24, 0x00	; 0

	Pipe_SelectPipe(MASS_STORE_DATA_OUT_PIPE);
	Pipe_Freeze();

	return PIPE_RWSTREAM_NoError;
}
     d3e:	08 95       	ret

00000d40 <MassStore_SendCommand>:
 *
 *  \return A value from the Pipe_Stream_RW_ErrorCodes_t enum
 */
static uint8_t MassStore_SendCommand(MS_CommandBlockWrapper_t* const SCSICommandBlock,
                                     void* BufferPtr)
{
     d40:	cf 92       	push	r12
     d42:	df 92       	push	r13
     d44:	ef 92       	push	r14
     d46:	ff 92       	push	r15
     d48:	0f 93       	push	r16
     d4a:	1f 93       	push	r17
     d4c:	cf 93       	push	r28
     d4e:	df 93       	push	r29
     d50:	ec 01       	movw	r28, r24
     d52:	8b 01       	movw	r16, r22
	uint8_t ErrorCode = PIPE_RWSTREAM_NoError;

	/* Wrap Tag value when invalid - MS class defines tag values of 0 and 0xFFFFFFFF to be invalid */
	if (++MassStore_Tag == 0xFFFFFFFF)
     d54:	80 91 00 01 	lds	r24, 0x0100
     d58:	90 91 01 01 	lds	r25, 0x0101
     d5c:	a0 91 02 01 	lds	r26, 0x0102
     d60:	b0 91 03 01 	lds	r27, 0x0103
     d64:	01 96       	adiw	r24, 0x01	; 1
     d66:	a1 1d       	adc	r26, r1
     d68:	b1 1d       	adc	r27, r1
     d6a:	80 93 00 01 	sts	0x0100, r24
     d6e:	90 93 01 01 	sts	0x0101, r25
     d72:	a0 93 02 01 	sts	0x0102, r26
     d76:	b0 93 03 01 	sts	0x0103, r27
     d7a:	8f 5f       	subi	r24, 0xFF	; 255
     d7c:	9f 4f       	sbci	r25, 0xFF	; 255
     d7e:	af 4f       	sbci	r26, 0xFF	; 255
     d80:	bf 4f       	sbci	r27, 0xFF	; 255
     d82:	61 f4       	brne	.+24     	; 0xd9c <MassStore_SendCommand+0x5c>
	  MassStore_Tag = 1;
     d84:	81 e0       	ldi	r24, 0x01	; 1
     d86:	90 e0       	ldi	r25, 0x00	; 0
     d88:	a0 e0       	ldi	r26, 0x00	; 0
     d8a:	b0 e0       	ldi	r27, 0x00	; 0
     d8c:	80 93 00 01 	sts	0x0100, r24
     d90:	90 93 01 01 	sts	0x0101, r25
     d94:	a0 93 02 01 	sts	0x0102, r26
     d98:	b0 93 03 01 	sts	0x0103, r27

	/* Each transmission should have a unique tag value, increment before use */
	SCSICommandBlock->Tag = MassStore_Tag;
     d9c:	80 91 00 01 	lds	r24, 0x0100
     da0:	90 91 01 01 	lds	r25, 0x0101
     da4:	a0 91 02 01 	lds	r26, 0x0102
     da8:	b0 91 03 01 	lds	r27, 0x0103
     dac:	8c 83       	std	Y+4, r24	; 0x04
     dae:	9d 83       	std	Y+5, r25	; 0x05
     db0:	ae 83       	std	Y+6, r26	; 0x06
     db2:	bf 83       	std	Y+7, r27	; 0x07
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     db4:	82 e0       	ldi	r24, 0x02	; 2
     db6:	c8 2e       	mov	r12, r24
     db8:	c0 92 a7 00 	sts	0x00A7, r12

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     dbc:	80 91 a9 00 	lds	r24, 0x00A9
     dc0:	8f 7b       	andi	r24, 0xBF	; 191
     dc2:	80 93 a9 00 	sts	0x00A9, r24
	/* Select the OUT data pipe for CBW transmission */
	Pipe_SelectPipe(MASS_STORE_DATA_OUT_PIPE);
	Pipe_Unfreeze();

	/* Write the CBW command to the OUT pipe */
	if ((ErrorCode = Pipe_Write_Stream_LE(SCSICommandBlock, sizeof(MS_CommandBlockWrapper_t), NULL)) !=
     dc6:	ce 01       	movw	r24, r28
     dc8:	6f e1       	ldi	r22, 0x1F	; 31
     dca:	70 e0       	ldi	r23, 0x00	; 0
     dcc:	40 e0       	ldi	r20, 0x00	; 0
     dce:	50 e0       	ldi	r21, 0x00	; 0
     dd0:	8c d6       	rcall	.+3352   	; 0x1aea <Pipe_Write_Stream_LE>
     dd2:	d8 2e       	mov	r13, r24
     dd4:	88 23       	and	r24, r24
     dd6:	09 f0       	breq	.+2      	; 0xdda <MassStore_SendCommand+0x9a>
     dd8:	58 c0       	rjmp	.+176    	; 0xe8a <MassStore_SendCommand+0x14a>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
     dda:	80 91 a6 00 	lds	r24, 0x00A6
     dde:	8b 77       	andi	r24, 0x7B	; 123
     de0:	80 93 a6 00 	sts	0x00A6, r24

	/* Send the data in the OUT pipe to the attached device */
	Pipe_ClearOUT();

	/* Wait until command has been sent */
	Pipe_WaitUntilReady();
     de4:	e2 d4       	rcall	.+2500   	; 0x17aa <Pipe_WaitUntilReady>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     de6:	80 91 a9 00 	lds	r24, 0x00A9
     dea:	80 64       	ori	r24, 0x40	; 64
     dec:	80 93 a9 00 	sts	0x00A9, r24

	/* Freeze pipe after use */
	Pipe_Freeze();

	/* Send data if any has been given */
	if ((BufferPtr != NULL) &&
     df0:	01 15       	cp	r16, r1
     df2:	11 05       	cpc	r17, r1
     df4:	09 f4       	brne	.+2      	; 0xdf8 <MassStore_SendCommand+0xb8>
     df6:	49 c0       	rjmp	.+146    	; 0xe8a <MassStore_SendCommand+0x14a>
 */
static uint8_t MassStore_SendReceiveData(MS_CommandBlockWrapper_t* const SCSICommandBlock,
                                         void* BufferPtr)
{
	uint8_t  ErrorCode = PIPE_RWSTREAM_NoError;
	uint16_t BytesRem  = SCSICommandBlock->DataTransferLength;
     df8:	e8 84       	ldd	r14, Y+8	; 0x08
     dfa:	f9 84       	ldd	r15, Y+9	; 0x09

	/* Check the direction of the SCSI command data stage */
	if (SCSICommandBlock->Flags & MS_COMMAND_DIR_DATA_IN)
     dfc:	8c 85       	ldd	r24, Y+12	; 0x0c
     dfe:	87 ff       	sbrs	r24, 7
     e00:	1a c0       	rjmp	.+52     	; 0xe36 <MassStore_SendCommand+0xf6>
	{
		/* Wait until the device has replied with some data */
		if ((ErrorCode = MassStore_WaitForDataReceived()) != PIPE_RWSTREAM_NoError)
     e02:	34 df       	rcall	.-408    	; 0xc6c <MassStore_WaitForDataReceived>
     e04:	98 2f       	mov	r25, r24
     e06:	88 23       	and	r24, r24
     e08:	d1 f5       	brne	.+116    	; 0xe7e <MassStore_SendCommand+0x13e>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     e0a:	81 e0       	ldi	r24, 0x01	; 1
     e0c:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     e10:	80 91 a9 00 	lds	r24, 0x00A9
     e14:	8f 7b       	andi	r24, 0xBF	; 191
     e16:	80 93 a9 00 	sts	0x00A9, r24
		/* Select the IN data pipe for data reception */
		Pipe_SelectPipe(MASS_STORE_DATA_IN_PIPE);
		Pipe_Unfreeze();

		/* Read in the block data from the pipe */
		if ((ErrorCode = Pipe_Read_Stream_LE(BufferPtr, BytesRem, NULL)) != PIPE_RWSTREAM_NoError)
     e1a:	c8 01       	movw	r24, r16
     e1c:	b7 01       	movw	r22, r14
     e1e:	40 e0       	ldi	r20, 0x00	; 0
     e20:	50 e0       	ldi	r21, 0x00	; 0
     e22:	0c d6       	rcall	.+3096   	; 0x1a3c <Pipe_Read_Stream_LE>
     e24:	98 2f       	mov	r25, r24
     e26:	88 23       	and	r24, r24
     e28:	51 f5       	brne	.+84     	; 0xe7e <MassStore_SendCommand+0x13e>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     e2a:	80 91 a6 00 	lds	r24, 0x00A6
     e2e:	8e 77       	andi	r24, 0x7E	; 126
     e30:	80 93 a6 00 	sts	0x00A6, r24
     e34:	1d c0       	rjmp	.+58     	; 0xe70 <MassStore_SendCommand+0x130>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     e36:	c0 92 a7 00 	sts	0x00A7, r12

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     e3a:	80 91 a9 00 	lds	r24, 0x00A9
     e3e:	8f 7b       	andi	r24, 0xBF	; 191
     e40:	80 93 a9 00 	sts	0x00A9, r24
		/* Select the OUT data pipe for data transmission */
		Pipe_SelectPipe(MASS_STORE_DATA_OUT_PIPE);
		Pipe_Unfreeze();

		/* Write the block data to the pipe */
		if ((ErrorCode = Pipe_Write_Stream_LE(BufferPtr, BytesRem, NULL)) != PIPE_RWSTREAM_NoError)
     e44:	c8 01       	movw	r24, r16
     e46:	b7 01       	movw	r22, r14
     e48:	40 e0       	ldi	r20, 0x00	; 0
     e4a:	50 e0       	ldi	r21, 0x00	; 0
     e4c:	4e d6       	rcall	.+3228   	; 0x1aea <Pipe_Write_Stream_LE>
     e4e:	98 2f       	mov	r25, r24
     e50:	88 23       	and	r24, r24
     e52:	a9 f4       	brne	.+42     	; 0xe7e <MassStore_SendCommand+0x13e>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
     e54:	80 91 a6 00 	lds	r24, 0x00A6
     e58:	8b 77       	andi	r24, 0x7B	; 123
     e5a:	80 93 a6 00 	sts	0x00A6, r24
     e5e:	04 c0       	rjmp	.+8      	; 0xe68 <MassStore_SendCommand+0x128>
		/* Acknowledge the packet */
		Pipe_ClearOUT();

		while (!(Pipe_IsOUTReady()))
		{
			if (USB_HostState == HOST_STATE_Unattached)
     e60:	80 91 34 01 	lds	r24, 0x0134
     e64:	81 30       	cpi	r24, 0x01	; 1
     e66:	51 f0       	breq	.+20     	; 0xe7c <MassStore_SendCommand+0x13c>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     e68:	80 91 a6 00 	lds	r24, 0x00A6
		  return ErrorCode;

		/* Acknowledge the packet */
		Pipe_ClearOUT();

		while (!(Pipe_IsOUTReady()))
     e6c:	82 ff       	sbrs	r24, 2
     e6e:	f8 cf       	rjmp	.-16     	; 0xe60 <MassStore_SendCommand+0x120>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     e70:	80 91 a9 00 	lds	r24, 0x00A9
     e74:	80 64       	ori	r24, 0x40	; 64
     e76:	80 93 a9 00 	sts	0x00A9, r24
     e7a:	07 c0       	rjmp	.+14     	; 0xe8a <MassStore_SendCommand+0x14a>
     e7c:	92 e0       	ldi	r25, 0x02	; 2
		Pipe_Freeze();
		return ErrorCode;
	}

	return ErrorCode;
}
     e7e:	80 91 a9 00 	lds	r24, 0x00A9
     e82:	80 64       	ori	r24, 0x40	; 64
     e84:	80 93 a9 00 	sts	0x00A9, r24
     e88:	d9 2e       	mov	r13, r25
     e8a:	8d 2d       	mov	r24, r13
     e8c:	df 91       	pop	r29
     e8e:	cf 91       	pop	r28
     e90:	1f 91       	pop	r17
     e92:	0f 91       	pop	r16
     e94:	ff 90       	pop	r15
     e96:	ef 90       	pop	r14
     e98:	df 90       	pop	r13
     e9a:	cf 90       	pop	r12
     e9c:	08 95       	ret

00000e9e <MassStore_GetReturnedStatus>:
 *  \param[out] SCSICommandStatus  Pointer to a destination where the returned status data should be stored
 *
 *  \return A value from the Pipe_Stream_RW_ErrorCodes_t enum, or MASS_STORE_SCSI_COMMAND_FAILED if the SCSI command fails
 */
static uint8_t MassStore_GetReturnedStatus(MS_CommandStatusWrapper_t* const SCSICommandStatus)
{
     e9e:	cf 93       	push	r28
     ea0:	df 93       	push	r29
     ea2:	ec 01       	movw	r28, r24
	uint8_t ErrorCode = PIPE_RWSTREAM_NoError;

	/* If an error in the command occurred, abort */
	if ((ErrorCode = MassStore_WaitForDataReceived()) != PIPE_RWSTREAM_NoError)
     ea4:	e3 de       	rcall	.-570    	; 0xc6c <MassStore_WaitForDataReceived>
     ea6:	98 2f       	mov	r25, r24
     ea8:	88 23       	and	r24, r24
     eaa:	f1 f4       	brne	.+60     	; 0xee8 <MassStore_GetReturnedStatus+0x4a>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     eac:	81 e0       	ldi	r24, 0x01	; 1
     eae:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     eb2:	80 91 a9 00 	lds	r24, 0x00A9
     eb6:	8f 7b       	andi	r24, 0xBF	; 191
     eb8:	80 93 a9 00 	sts	0x00A9, r24
	/* Select the IN data pipe for data reception */
	Pipe_SelectPipe(MASS_STORE_DATA_IN_PIPE);
	Pipe_Unfreeze();

	/* Load in the CSW from the attached device */
	if ((ErrorCode = Pipe_Read_Stream_LE(SCSICommandStatus, sizeof(MS_CommandStatusWrapper_t), NULL)) !=
     ebc:	ce 01       	movw	r24, r28
     ebe:	6d e0       	ldi	r22, 0x0D	; 13
     ec0:	70 e0       	ldi	r23, 0x00	; 0
     ec2:	40 e0       	ldi	r20, 0x00	; 0
     ec4:	50 e0       	ldi	r21, 0x00	; 0
     ec6:	ba d5       	rcall	.+2932   	; 0x1a3c <Pipe_Read_Stream_LE>
     ec8:	98 2f       	mov	r25, r24
     eca:	88 23       	and	r24, r24
     ecc:	69 f4       	brne	.+26     	; 0xee8 <MassStore_GetReturnedStatus+0x4a>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     ece:	80 91 a6 00 	lds	r24, 0x00A6
     ed2:	8e 77       	andi	r24, 0x7E	; 126
     ed4:	80 93 a6 00 	sts	0x00A6, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     ed8:	80 91 a9 00 	lds	r24, 0x00A9
     edc:	80 64       	ori	r24, 0x40	; 64
     ede:	80 93 a9 00 	sts	0x00A9, r24

	/* Freeze the IN pipe after use */
	Pipe_Freeze();

	/* Check to see if command failed */
	if (SCSICommandStatus->Status != MS_SCSI_COMMAND_Pass)
     ee2:	8c 85       	ldd	r24, Y+12	; 0x0c
     ee4:	81 11       	cpse	r24, r1
     ee6:	90 ec       	ldi	r25, 0xC0	; 192
	  ErrorCode = MASS_STORE_SCSI_COMMAND_FAILED;

	return ErrorCode;
}
     ee8:	89 2f       	mov	r24, r25
     eea:	df 91       	pop	r29
     eec:	cf 91       	pop	r28
     eee:	08 95       	ret

00000ef0 <MassStore_PreventAllowMediumRemoval>:
 *
 *  \return A value from the Pipe_Stream_RW_ErrorCodes_t enum, or MASS_STORE_SCSI_COMMAND_FAILED if the SCSI command fails
 */
uint8_t MassStore_PreventAllowMediumRemoval(const uint8_t LUNIndex,
                                            const bool PreventRemoval)
{
     ef0:	df 93       	push	r29
     ef2:	cf 93       	push	r28
     ef4:	cd b7       	in	r28, 0x3d	; 61
     ef6:	de b7       	in	r29, 0x3e	; 62
     ef8:	ac 97       	sbiw	r28, 0x2c	; 44
     efa:	0f b6       	in	r0, 0x3f	; 63
     efc:	f8 94       	cli
     efe:	de bf       	out	0x3e, r29	; 62
     f00:	0f be       	out	0x3f, r0	; 63
     f02:	cd bf       	out	0x3d, r28	; 61
					0x00,                   // Reserved
					PreventRemoval,         // Prevent flag
					0x00,                   // Reserved
					0x00                    // Unused (control)
				}
		};
     f04:	fe 01       	movw	r30, r28
     f06:	3e 96       	adiw	r30, 0x0e	; 14
     f08:	9f e1       	ldi	r25, 0x1F	; 31
     f0a:	df 01       	movw	r26, r30
     f0c:	1d 92       	st	X+, r1
     f0e:	9a 95       	dec	r25
     f10:	e9 f7       	brne	.-6      	; 0xf0c <MassStore_PreventAllowMediumRemoval+0x1c>
     f12:	25 e5       	ldi	r18, 0x55	; 85
     f14:	33 e5       	ldi	r19, 0x53	; 83
     f16:	42 e4       	ldi	r20, 0x42	; 66
     f18:	53 e4       	ldi	r21, 0x43	; 67
     f1a:	2e 87       	std	Y+14, r18	; 0x0e
     f1c:	3f 87       	std	Y+15, r19	; 0x0f
     f1e:	48 8b       	std	Y+16, r20	; 0x10
     f20:	59 8b       	std	Y+17, r21	; 0x11
     f22:	8b 8f       	std	Y+27, r24	; 0x1b
     f24:	86 e0       	ldi	r24, 0x06	; 6
     f26:	8c 8f       	std	Y+28, r24	; 0x1c
     f28:	8e e1       	ldi	r24, 0x1E	; 30
     f2a:	8d 8f       	std	Y+29, r24	; 0x1d
     f2c:	68 a3       	std	Y+32, r22	; 0x20

	MS_CommandStatusWrapper_t SCSICommandStatus;

	/* Send the command and any data to the attached device */
	if ((ErrorCode = MassStore_SendCommand(&SCSICommandBlock, NULL)) != PIPE_RWSTREAM_NoError)
     f2e:	cf 01       	movw	r24, r30
     f30:	60 e0       	ldi	r22, 0x00	; 0
     f32:	70 e0       	ldi	r23, 0x00	; 0
     f34:	05 df       	rcall	.-502    	; 0xd40 <MassStore_SendCommand>
     f36:	98 2f       	mov	r25, r24
     f38:	88 23       	and	r24, r24
     f3a:	31 f4       	brne	.+12     	; 0xf48 <MassStore_PreventAllowMediumRemoval+0x58>
		Pipe_Freeze();
		return ErrorCode;
	}

	/* Retrieve status information from the attached device */
	if ((ErrorCode = MassStore_GetReturnedStatus(&SCSICommandStatus)) != PIPE_RWSTREAM_NoError)
     f3c:	ce 01       	movw	r24, r28
     f3e:	01 96       	adiw	r24, 0x01	; 1
     f40:	ae df       	rcall	.-164    	; 0xe9e <MassStore_GetReturnedStatus>
     f42:	98 2f       	mov	r25, r24
     f44:	88 23       	and	r24, r24
     f46:	29 f0       	breq	.+10     	; 0xf52 <MassStore_PreventAllowMediumRemoval+0x62>
     f48:	80 91 a9 00 	lds	r24, 0x00A9
     f4c:	80 64       	ori	r24, 0x40	; 64
     f4e:	80 93 a9 00 	sts	0x00A9, r24
		Pipe_Freeze();
		return ErrorCode;
	}

	return ErrorCode;
}
     f52:	89 2f       	mov	r24, r25
     f54:	ac 96       	adiw	r28, 0x2c	; 44
     f56:	0f b6       	in	r0, 0x3f	; 63
     f58:	f8 94       	cli
     f5a:	de bf       	out	0x3e, r29	; 62
     f5c:	0f be       	out	0x3f, r0	; 63
     f5e:	cd bf       	out	0x3d, r28	; 61
     f60:	cf 91       	pop	r28
     f62:	df 91       	pop	r29
     f64:	08 95       	ret

00000f66 <MassStore_TestUnitReady>:
 *  \param[in] LUNIndex      Index of the LUN inside the device the command is being addressed to
 *
 *  \return A value from the Pipe_Stream_RW_ErrorCodes_t enum, or MASS_STORE_SCSI_COMMAND_FAILED if the SCSI command fails
 */
uint8_t MassStore_TestUnitReady(const uint8_t LUNIndex)
{
     f66:	df 93       	push	r29
     f68:	cf 93       	push	r28
     f6a:	cd b7       	in	r28, 0x3d	; 61
     f6c:	de b7       	in	r29, 0x3e	; 62
     f6e:	ac 97       	sbiw	r28, 0x2c	; 44
     f70:	0f b6       	in	r0, 0x3f	; 63
     f72:	f8 94       	cli
     f74:	de bf       	out	0x3e, r29	; 62
     f76:	0f be       	out	0x3f, r0	; 63
     f78:	cd bf       	out	0x3d, r28	; 61
					0x00,                   // Reserved
					0x00,                   // Reserved
					0x00,                   // Reserved
					0x00                    // Unused (control)
				}
		};
     f7a:	fe 01       	movw	r30, r28
     f7c:	3e 96       	adiw	r30, 0x0e	; 14
     f7e:	9f e1       	ldi	r25, 0x1F	; 31
     f80:	df 01       	movw	r26, r30
     f82:	1d 92       	st	X+, r1
     f84:	9a 95       	dec	r25
     f86:	e9 f7       	brne	.-6      	; 0xf82 <MassStore_TestUnitReady+0x1c>
     f88:	25 e5       	ldi	r18, 0x55	; 85
     f8a:	33 e5       	ldi	r19, 0x53	; 83
     f8c:	42 e4       	ldi	r20, 0x42	; 66
     f8e:	53 e4       	ldi	r21, 0x43	; 67
     f90:	2e 87       	std	Y+14, r18	; 0x0e
     f92:	3f 87       	std	Y+15, r19	; 0x0f
     f94:	48 8b       	std	Y+16, r20	; 0x10
     f96:	59 8b       	std	Y+17, r21	; 0x11
     f98:	90 e8       	ldi	r25, 0x80	; 128
     f9a:	9a 8f       	std	Y+26, r25	; 0x1a
     f9c:	8b 8f       	std	Y+27, r24	; 0x1b
     f9e:	86 e0       	ldi	r24, 0x06	; 6
     fa0:	8c 8f       	std	Y+28, r24	; 0x1c

	MS_CommandStatusWrapper_t SCSICommandStatus;

	/* Send the command and any data to the attached device */
	if ((ErrorCode = MassStore_SendCommand(&SCSICommandBlock, NULL)) != PIPE_RWSTREAM_NoError)
     fa2:	cf 01       	movw	r24, r30
     fa4:	60 e0       	ldi	r22, 0x00	; 0
     fa6:	70 e0       	ldi	r23, 0x00	; 0
     fa8:	cb de       	rcall	.-618    	; 0xd40 <MassStore_SendCommand>
     faa:	98 2f       	mov	r25, r24
     fac:	88 23       	and	r24, r24
     fae:	31 f4       	brne	.+12     	; 0xfbc <MassStore_TestUnitReady+0x56>
		Pipe_Freeze();
		return ErrorCode;
	}

	/* Retrieve status information from the attached device */
	if ((ErrorCode = MassStore_GetReturnedStatus(&SCSICommandStatus)) != PIPE_RWSTREAM_NoError)
     fb0:	ce 01       	movw	r24, r28
     fb2:	01 96       	adiw	r24, 0x01	; 1
     fb4:	74 df       	rcall	.-280    	; 0xe9e <MassStore_GetReturnedStatus>
     fb6:	98 2f       	mov	r25, r24
     fb8:	88 23       	and	r24, r24
     fba:	29 f0       	breq	.+10     	; 0xfc6 <MassStore_TestUnitReady+0x60>
     fbc:	80 91 a9 00 	lds	r24, 0x00A9
     fc0:	80 64       	ori	r24, 0x40	; 64
     fc2:	80 93 a9 00 	sts	0x00A9, r24
		Pipe_Freeze();
		return ErrorCode;
	}

	return ErrorCode;
}
     fc6:	89 2f       	mov	r24, r25
     fc8:	ac 96       	adiw	r28, 0x2c	; 44
     fca:	0f b6       	in	r0, 0x3f	; 63
     fcc:	f8 94       	cli
     fce:	de bf       	out	0x3e, r29	; 62
     fd0:	0f be       	out	0x3f, r0	; 63
     fd2:	cd bf       	out	0x3d, r28	; 61
     fd4:	cf 91       	pop	r28
     fd6:	df 91       	pop	r29
     fd8:	08 95       	ret

00000fda <MassStore_ReadDeviceBlock>:
uint8_t MassStore_ReadDeviceBlock(const uint8_t LUNIndex,
                                  const uint32_t BlockAddress,
                                  const uint8_t Blocks,
                                  const uint16_t BlockSize,
                                  void* BufferPtr)
{
     fda:	8f 92       	push	r8
     fdc:	9f 92       	push	r9
     fde:	af 92       	push	r10
     fe0:	bf 92       	push	r11
     fe2:	cf 92       	push	r12
     fe4:	df 92       	push	r13
     fe6:	ef 92       	push	r14
     fe8:	ff 92       	push	r15
     fea:	0f 93       	push	r16
     fec:	1f 93       	push	r17
     fee:	df 93       	push	r29
     ff0:	cf 93       	push	r28
     ff2:	cd b7       	in	r28, 0x3d	; 61
     ff4:	de b7       	in	r29, 0x3e	; 62
     ff6:	ac 97       	sbiw	r28, 0x2c	; 44
     ff8:	0f b6       	in	r0, 0x3f	; 63
     ffa:	f8 94       	cli
     ffc:	de bf       	out	0x3e, r29	; 62
     ffe:	0f be       	out	0x3f, r0	; 63
    1000:	cd bf       	out	0x3d, r28	; 61
    1002:	98 2e       	mov	r9, r24
    1004:	5a 01       	movw	r10, r20
    1006:	6b 01       	movw	r12, r22
    1008:	82 2e       	mov	r8, r18
    100a:	b8 01       	movw	r22, r16
					0x00,                   // Reserved
					0x00,                   // MSB of Total Blocks to Read
					Blocks,                 // LSB of Total Blocks to Read
					0x00                    // Unused (control)
				}
		};
    100c:	8e 01       	movw	r16, r28
    100e:	02 5f       	subi	r16, 0xF2	; 242
    1010:	1f 4f       	sbci	r17, 0xFF	; 255
    1012:	2f e1       	ldi	r18, 0x1F	; 31
    1014:	f8 01       	movw	r30, r16
    1016:	11 92       	st	Z+, r1
    1018:	2a 95       	dec	r18
    101a:	e9 f7       	brne	.-6      	; 0x1016 <MassStore_ReadDeviceBlock+0x3c>
    101c:	25 e5       	ldi	r18, 0x55	; 85
    101e:	33 e5       	ldi	r19, 0x53	; 83
    1020:	42 e4       	ldi	r20, 0x42	; 66
    1022:	53 e4       	ldi	r21, 0x43	; 67
    1024:	2e 87       	std	Y+14, r18	; 0x0e
    1026:	3f 87       	std	Y+15, r19	; 0x0f
    1028:	48 8b       	std	Y+16, r20	; 0x10
    102a:	59 8b       	std	Y+17, r21	; 0x11
    102c:	80 e0       	ldi	r24, 0x00	; 0
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	28 2d       	mov	r18, r8
    1032:	30 e0       	ldi	r19, 0x00	; 0
    1034:	40 e0       	ldi	r20, 0x00	; 0
    1036:	50 e0       	ldi	r21, 0x00	; 0
    1038:	ea d7       	rcall	.+4052   	; 0x200e <__mulsi3>
    103a:	6e 8b       	std	Y+22, r22	; 0x16
    103c:	7f 8b       	std	Y+23, r23	; 0x17
    103e:	88 8f       	std	Y+24, r24	; 0x18
    1040:	99 8f       	std	Y+25, r25	; 0x19
    1042:	80 e8       	ldi	r24, 0x80	; 128
    1044:	8a 8f       	std	Y+26, r24	; 0x1a
    1046:	9b 8e       	std	Y+27, r9	; 0x1b
    1048:	8a e0       	ldi	r24, 0x0A	; 10
    104a:	8c 8f       	std	Y+28, r24	; 0x1c
    104c:	88 e2       	ldi	r24, 0x28	; 40
    104e:	8d 8f       	std	Y+29, r24	; 0x1d
    1050:	8d 2d       	mov	r24, r13
    1052:	99 27       	eor	r25, r25
    1054:	aa 27       	eor	r26, r26
    1056:	bb 27       	eor	r27, r27
    1058:	8f 8f       	std	Y+31, r24	; 0x1f
    105a:	c6 01       	movw	r24, r12
    105c:	aa 27       	eor	r26, r26
    105e:	bb 27       	eor	r27, r27
    1060:	88 a3       	std	Y+32, r24	; 0x20
    1062:	bb 27       	eor	r27, r27
    1064:	ad 2d       	mov	r26, r13
    1066:	9c 2d       	mov	r25, r12
    1068:	8b 2d       	mov	r24, r11
    106a:	89 a3       	std	Y+33, r24	; 0x21
    106c:	aa a2       	std	Y+34, r10	; 0x22
    106e:	8d a2       	std	Y+37, r8	; 0x25

	MS_CommandStatusWrapper_t SCSICommandStatus;

	/* Send the command and any data to the attached device */
	if ((ErrorCode = MassStore_SendCommand(&SCSICommandBlock, BufferPtr)) != PIPE_RWSTREAM_NoError)
    1070:	c8 01       	movw	r24, r16
    1072:	b7 01       	movw	r22, r14
    1074:	65 de       	rcall	.-822    	; 0xd40 <MassStore_SendCommand>
    1076:	98 2f       	mov	r25, r24
    1078:	88 23       	and	r24, r24
    107a:	31 f4       	brne	.+12     	; 0x1088 <MassStore_ReadDeviceBlock+0xae>
		Pipe_Freeze();
		return ErrorCode;
	}

	/* Retrieve status information from the attached device */
	if ((ErrorCode = MassStore_GetReturnedStatus(&SCSICommandStatus)) != PIPE_RWSTREAM_NoError)
    107c:	ce 01       	movw	r24, r28
    107e:	01 96       	adiw	r24, 0x01	; 1
    1080:	0e df       	rcall	.-484    	; 0xe9e <MassStore_GetReturnedStatus>
    1082:	98 2f       	mov	r25, r24
    1084:	88 23       	and	r24, r24
    1086:	29 f0       	breq	.+10     	; 0x1092 <MassStore_ReadDeviceBlock+0xb8>
    1088:	80 91 a9 00 	lds	r24, 0x00A9
    108c:	80 64       	ori	r24, 0x40	; 64
    108e:	80 93 a9 00 	sts	0x00A9, r24
		Pipe_Freeze();
		return ErrorCode;
	}

	return ErrorCode;
}
    1092:	89 2f       	mov	r24, r25
    1094:	ac 96       	adiw	r28, 0x2c	; 44
    1096:	0f b6       	in	r0, 0x3f	; 63
    1098:	f8 94       	cli
    109a:	de bf       	out	0x3e, r29	; 62
    109c:	0f be       	out	0x3f, r0	; 63
    109e:	cd bf       	out	0x3d, r28	; 61
    10a0:	cf 91       	pop	r28
    10a2:	df 91       	pop	r29
    10a4:	1f 91       	pop	r17
    10a6:	0f 91       	pop	r16
    10a8:	ff 90       	pop	r15
    10aa:	ef 90       	pop	r14
    10ac:	df 90       	pop	r13
    10ae:	cf 90       	pop	r12
    10b0:	bf 90       	pop	r11
    10b2:	af 90       	pop	r10
    10b4:	9f 90       	pop	r9
    10b6:	8f 90       	pop	r8
    10b8:	08 95       	ret

000010ba <MassStore_RequestSense>:
 *
 *  \return A value from the Pipe_Stream_RW_ErrorCodes_t enum, or MASS_STORE_SCSI_COMMAND_FAILED if the SCSI command fails
 */
uint8_t MassStore_RequestSense(const uint8_t LUNIndex,
                               SCSI_Request_Sense_Response_t* const SensePtr)
{
    10ba:	df 93       	push	r29
    10bc:	cf 93       	push	r28
    10be:	cd b7       	in	r28, 0x3d	; 61
    10c0:	de b7       	in	r29, 0x3e	; 62
    10c2:	ac 97       	sbiw	r28, 0x2c	; 44
    10c4:	0f b6       	in	r0, 0x3f	; 63
    10c6:	f8 94       	cli
    10c8:	de bf       	out	0x3e, r29	; 62
    10ca:	0f be       	out	0x3f, r0	; 63
    10cc:	cd bf       	out	0x3d, r28	; 61
					0x00,                   // Reserved
					0x00,                   // Reserved
					sizeof(SCSI_Request_Sense_Response_t), // Allocation Length
					0x00                    // Unused (control)
				}
		};
    10ce:	fe 01       	movw	r30, r28
    10d0:	3e 96       	adiw	r30, 0x0e	; 14
    10d2:	9f e1       	ldi	r25, 0x1F	; 31
    10d4:	df 01       	movw	r26, r30
    10d6:	1d 92       	st	X+, r1
    10d8:	9a 95       	dec	r25
    10da:	e9 f7       	brne	.-6      	; 0x10d6 <MassStore_RequestSense+0x1c>
    10dc:	25 e5       	ldi	r18, 0x55	; 85
    10de:	33 e5       	ldi	r19, 0x53	; 83
    10e0:	42 e4       	ldi	r20, 0x42	; 66
    10e2:	53 e4       	ldi	r21, 0x43	; 67
    10e4:	2e 87       	std	Y+14, r18	; 0x0e
    10e6:	3f 87       	std	Y+15, r19	; 0x0f
    10e8:	48 8b       	std	Y+16, r20	; 0x10
    10ea:	59 8b       	std	Y+17, r21	; 0x11
    10ec:	22 e1       	ldi	r18, 0x12	; 18
    10ee:	30 e0       	ldi	r19, 0x00	; 0
    10f0:	40 e0       	ldi	r20, 0x00	; 0
    10f2:	50 e0       	ldi	r21, 0x00	; 0
    10f4:	2e 8b       	std	Y+22, r18	; 0x16
    10f6:	3f 8b       	std	Y+23, r19	; 0x17
    10f8:	48 8f       	std	Y+24, r20	; 0x18
    10fa:	59 8f       	std	Y+25, r21	; 0x19
    10fc:	90 e8       	ldi	r25, 0x80	; 128
    10fe:	9a 8f       	std	Y+26, r25	; 0x1a
    1100:	8b 8f       	std	Y+27, r24	; 0x1b
    1102:	86 e0       	ldi	r24, 0x06	; 6
    1104:	8c 8f       	std	Y+28, r24	; 0x1c
    1106:	83 e0       	ldi	r24, 0x03	; 3
    1108:	8d 8f       	std	Y+29, r24	; 0x1d
    110a:	82 e1       	ldi	r24, 0x12	; 18
    110c:	89 a3       	std	Y+33, r24	; 0x21

	MS_CommandStatusWrapper_t SCSICommandStatus;

	/* Send the command and any data to the attached device */
	if ((ErrorCode = MassStore_SendCommand(&SCSICommandBlock, SensePtr)) != PIPE_RWSTREAM_NoError)
    110e:	cf 01       	movw	r24, r30
    1110:	17 de       	rcall	.-978    	; 0xd40 <MassStore_SendCommand>
    1112:	98 2f       	mov	r25, r24
    1114:	88 23       	and	r24, r24
    1116:	31 f4       	brne	.+12     	; 0x1124 <MassStore_RequestSense+0x6a>
		Pipe_Freeze();
		return ErrorCode;
	}

	/* Retrieve status information from the attached device */
	if ((ErrorCode = MassStore_GetReturnedStatus(&SCSICommandStatus)) != PIPE_RWSTREAM_NoError)
    1118:	ce 01       	movw	r24, r28
    111a:	01 96       	adiw	r24, 0x01	; 1
    111c:	c0 de       	rcall	.-640    	; 0xe9e <MassStore_GetReturnedStatus>
    111e:	98 2f       	mov	r25, r24
    1120:	88 23       	and	r24, r24
    1122:	29 f0       	breq	.+10     	; 0x112e <MassStore_RequestSense+0x74>
    1124:	80 91 a9 00 	lds	r24, 0x00A9
    1128:	80 64       	ori	r24, 0x40	; 64
    112a:	80 93 a9 00 	sts	0x00A9, r24
		Pipe_Freeze();
		return ErrorCode;
	}

	return ErrorCode;
}
    112e:	89 2f       	mov	r24, r25
    1130:	ac 96       	adiw	r28, 0x2c	; 44
    1132:	0f b6       	in	r0, 0x3f	; 63
    1134:	f8 94       	cli
    1136:	de bf       	out	0x3e, r29	; 62
    1138:	0f be       	out	0x3f, r0	; 63
    113a:	cd bf       	out	0x3d, r28	; 61
    113c:	cf 91       	pop	r28
    113e:	df 91       	pop	r29
    1140:	08 95       	ret

00001142 <MassStore_Inquiry>:
 *
 *  \return A value from the Pipe_Stream_RW_ErrorCodes_t enum, or MASS_STORE_SCSI_COMMAND_FAILED if the SCSI command fails
 */
uint8_t MassStore_Inquiry(const uint8_t LUNIndex,
                          SCSI_Inquiry_Response_t* const InquiryPtr)
{
    1142:	df 93       	push	r29
    1144:	cf 93       	push	r28
    1146:	cd b7       	in	r28, 0x3d	; 61
    1148:	de b7       	in	r29, 0x3e	; 62
    114a:	ac 97       	sbiw	r28, 0x2c	; 44
    114c:	0f b6       	in	r0, 0x3f	; 63
    114e:	f8 94       	cli
    1150:	de bf       	out	0x3e, r29	; 62
    1152:	0f be       	out	0x3f, r0	; 63
    1154:	cd bf       	out	0x3d, r28	; 61
					0x00,                   // Reserved
					0x00,                   // Reserved
					sizeof(SCSI_Inquiry_Response_t), // Allocation Length
					0x00                    // Unused (control)
				}
		};
    1156:	fe 01       	movw	r30, r28
    1158:	3e 96       	adiw	r30, 0x0e	; 14
    115a:	9f e1       	ldi	r25, 0x1F	; 31
    115c:	df 01       	movw	r26, r30
    115e:	1d 92       	st	X+, r1
    1160:	9a 95       	dec	r25
    1162:	e9 f7       	brne	.-6      	; 0x115e <MassStore_Inquiry+0x1c>
    1164:	25 e5       	ldi	r18, 0x55	; 85
    1166:	33 e5       	ldi	r19, 0x53	; 83
    1168:	42 e4       	ldi	r20, 0x42	; 66
    116a:	53 e4       	ldi	r21, 0x43	; 67
    116c:	2e 87       	std	Y+14, r18	; 0x0e
    116e:	3f 87       	std	Y+15, r19	; 0x0f
    1170:	48 8b       	std	Y+16, r20	; 0x10
    1172:	59 8b       	std	Y+17, r21	; 0x11
    1174:	24 e2       	ldi	r18, 0x24	; 36
    1176:	30 e0       	ldi	r19, 0x00	; 0
    1178:	40 e0       	ldi	r20, 0x00	; 0
    117a:	50 e0       	ldi	r21, 0x00	; 0
    117c:	2e 8b       	std	Y+22, r18	; 0x16
    117e:	3f 8b       	std	Y+23, r19	; 0x17
    1180:	48 8f       	std	Y+24, r20	; 0x18
    1182:	59 8f       	std	Y+25, r21	; 0x19
    1184:	90 e8       	ldi	r25, 0x80	; 128
    1186:	9a 8f       	std	Y+26, r25	; 0x1a
    1188:	8b 8f       	std	Y+27, r24	; 0x1b
    118a:	86 e0       	ldi	r24, 0x06	; 6
    118c:	8c 8f       	std	Y+28, r24	; 0x1c
    118e:	82 e1       	ldi	r24, 0x12	; 18
    1190:	8d 8f       	std	Y+29, r24	; 0x1d
    1192:	84 e2       	ldi	r24, 0x24	; 36
    1194:	89 a3       	std	Y+33, r24	; 0x21

	MS_CommandStatusWrapper_t SCSICommandStatus;

	/* Send the command and any data to the attached device */
	if ((ErrorCode = MassStore_SendCommand(&SCSICommandBlock, InquiryPtr)) != PIPE_RWSTREAM_NoError)
    1196:	cf 01       	movw	r24, r30
    1198:	d3 dd       	rcall	.-1114   	; 0xd40 <MassStore_SendCommand>
    119a:	98 2f       	mov	r25, r24
    119c:	88 23       	and	r24, r24
    119e:	31 f4       	brne	.+12     	; 0x11ac <MassStore_Inquiry+0x6a>
		Pipe_Freeze();
		return ErrorCode;
	}

	/* Retrieve status information from the attached device */
	if ((ErrorCode = MassStore_GetReturnedStatus(&SCSICommandStatus)) != PIPE_RWSTREAM_NoError)
    11a0:	ce 01       	movw	r24, r28
    11a2:	01 96       	adiw	r24, 0x01	; 1
    11a4:	7c de       	rcall	.-776    	; 0xe9e <MassStore_GetReturnedStatus>
    11a6:	98 2f       	mov	r25, r24
    11a8:	88 23       	and	r24, r24
    11aa:	29 f0       	breq	.+10     	; 0x11b6 <MassStore_Inquiry+0x74>
    11ac:	80 91 a9 00 	lds	r24, 0x00A9
    11b0:	80 64       	ori	r24, 0x40	; 64
    11b2:	80 93 a9 00 	sts	0x00A9, r24
		Pipe_Freeze();
		return ErrorCode;
	}

	return ErrorCode;
}
    11b6:	89 2f       	mov	r24, r25
    11b8:	ac 96       	adiw	r28, 0x2c	; 44
    11ba:	0f b6       	in	r0, 0x3f	; 63
    11bc:	f8 94       	cli
    11be:	de bf       	out	0x3e, r29	; 62
    11c0:	0f be       	out	0x3f, r0	; 63
    11c2:	cd bf       	out	0x3d, r28	; 61
    11c4:	cf 91       	pop	r28
    11c6:	df 91       	pop	r29
    11c8:	08 95       	ret

000011ca <SwapEndian_32>:
			 *
			 *  \return Input data with the individual bytes reversed.
			 */
			static inline uint32_t SwapEndian_32(const uint32_t DWord) ATTR_WARN_UNUSED_RESULT ATTR_CONST;
			static inline uint32_t SwapEndian_32(const uint32_t DWord)
			{
    11ca:	36 2f       	mov	r19, r22
    11cc:	27 2f       	mov	r18, r23
				Temp = Data.Bytes[1];
				Data.Bytes[1] = Data.Bytes[2];
				Data.Bytes[2] = Temp;

				return Data.DWord;
			}
    11ce:	69 2f       	mov	r22, r25
    11d0:	78 2f       	mov	r23, r24
    11d2:	c9 01       	movw	r24, r18
    11d4:	08 95       	ret

000011d6 <MassStore_ReadCapacity>:
 *
 *  \return A value from the Pipe_Stream_RW_ErrorCodes_t enum, or MASS_STORE_SCSI_COMMAND_FAILED if the SCSI command fails
 */
uint8_t MassStore_ReadCapacity(const uint8_t LUNIndex,
                               SCSI_Capacity_t* const CapacityPtr)
{
    11d6:	0f 93       	push	r16
    11d8:	1f 93       	push	r17
    11da:	df 93       	push	r29
    11dc:	cf 93       	push	r28
    11de:	cd b7       	in	r28, 0x3d	; 61
    11e0:	de b7       	in	r29, 0x3e	; 62
    11e2:	ac 97       	sbiw	r28, 0x2c	; 44
    11e4:	0f b6       	in	r0, 0x3f	; 63
    11e6:	f8 94       	cli
    11e8:	de bf       	out	0x3e, r29	; 62
    11ea:	0f be       	out	0x3f, r0	; 63
    11ec:	cd bf       	out	0x3d, r28	; 61
    11ee:	8b 01       	movw	r16, r22
					0x00,                   // Reserved
					0x00,                   // Reserved
					0x00,                   // Partial Medium Indicator
					0x00                    // Unused (control)
				}
		};
    11f0:	fe 01       	movw	r30, r28
    11f2:	3e 96       	adiw	r30, 0x0e	; 14
    11f4:	9f e1       	ldi	r25, 0x1F	; 31
    11f6:	df 01       	movw	r26, r30
    11f8:	1d 92       	st	X+, r1
    11fa:	9a 95       	dec	r25
    11fc:	e9 f7       	brne	.-6      	; 0x11f8 <MassStore_ReadCapacity+0x22>
    11fe:	25 e5       	ldi	r18, 0x55	; 85
    1200:	33 e5       	ldi	r19, 0x53	; 83
    1202:	42 e4       	ldi	r20, 0x42	; 66
    1204:	53 e4       	ldi	r21, 0x43	; 67
    1206:	2e 87       	std	Y+14, r18	; 0x0e
    1208:	3f 87       	std	Y+15, r19	; 0x0f
    120a:	48 8b       	std	Y+16, r20	; 0x10
    120c:	59 8b       	std	Y+17, r21	; 0x11
    120e:	28 e0       	ldi	r18, 0x08	; 8
    1210:	30 e0       	ldi	r19, 0x00	; 0
    1212:	40 e0       	ldi	r20, 0x00	; 0
    1214:	50 e0       	ldi	r21, 0x00	; 0
    1216:	2e 8b       	std	Y+22, r18	; 0x16
    1218:	3f 8b       	std	Y+23, r19	; 0x17
    121a:	48 8f       	std	Y+24, r20	; 0x18
    121c:	59 8f       	std	Y+25, r21	; 0x19
    121e:	90 e8       	ldi	r25, 0x80	; 128
    1220:	9a 8f       	std	Y+26, r25	; 0x1a
    1222:	8b 8f       	std	Y+27, r24	; 0x1b
    1224:	8a e0       	ldi	r24, 0x0A	; 10
    1226:	8c 8f       	std	Y+28, r24	; 0x1c
    1228:	85 e2       	ldi	r24, 0x25	; 37
    122a:	8d 8f       	std	Y+29, r24	; 0x1d

	MS_CommandStatusWrapper_t SCSICommandStatus;

	/* Send the command and any data to the attached device */
	if ((ErrorCode = MassStore_SendCommand(&SCSICommandBlock, CapacityPtr)) != PIPE_RWSTREAM_NoError)
    122c:	cf 01       	movw	r24, r30
    122e:	88 dd       	rcall	.-1264   	; 0xd40 <MassStore_SendCommand>
    1230:	98 2f       	mov	r25, r24
    1232:	88 23       	and	r24, r24
    1234:	f1 f4       	brne	.+60     	; 0x1272 <MassStore_ReadCapacity+0x9c>
		Pipe_Freeze();
		return ErrorCode;
	}

	/* Endian-correct the read data */
	CapacityPtr->Blocks    = SwapEndian_32(CapacityPtr->Blocks);
    1236:	f8 01       	movw	r30, r16
    1238:	60 81       	ld	r22, Z
    123a:	71 81       	ldd	r23, Z+1	; 0x01
    123c:	82 81       	ldd	r24, Z+2	; 0x02
    123e:	93 81       	ldd	r25, Z+3	; 0x03
    1240:	c4 df       	rcall	.-120    	; 0x11ca <SwapEndian_32>
    1242:	d8 01       	movw	r26, r16
    1244:	6d 93       	st	X+, r22
    1246:	7d 93       	st	X+, r23
    1248:	8d 93       	st	X+, r24
    124a:	9c 93       	st	X, r25
    124c:	13 97       	sbiw	r26, 0x03	; 3
	CapacityPtr->BlockSize = SwapEndian_32(CapacityPtr->BlockSize);
    124e:	14 96       	adiw	r26, 0x04	; 4
    1250:	6d 91       	ld	r22, X+
    1252:	7d 91       	ld	r23, X+
    1254:	8d 91       	ld	r24, X+
    1256:	9c 91       	ld	r25, X
    1258:	17 97       	sbiw	r26, 0x07	; 7
    125a:	b7 df       	rcall	.-146    	; 0x11ca <SwapEndian_32>
    125c:	f8 01       	movw	r30, r16
    125e:	64 83       	std	Z+4, r22	; 0x04
    1260:	75 83       	std	Z+5, r23	; 0x05
    1262:	86 83       	std	Z+6, r24	; 0x06
    1264:	97 83       	std	Z+7, r25	; 0x07

	/* Retrieve status information from the attached device */
	if ((ErrorCode = MassStore_GetReturnedStatus(&SCSICommandStatus)) != PIPE_RWSTREAM_NoError)
    1266:	ce 01       	movw	r24, r28
    1268:	01 96       	adiw	r24, 0x01	; 1
    126a:	19 de       	rcall	.-974    	; 0xe9e <MassStore_GetReturnedStatus>
    126c:	98 2f       	mov	r25, r24
    126e:	88 23       	and	r24, r24
    1270:	29 f0       	breq	.+10     	; 0x127c <MassStore_ReadCapacity+0xa6>
    1272:	80 91 a9 00 	lds	r24, 0x00A9
    1276:	80 64       	ori	r24, 0x40	; 64
    1278:	80 93 a9 00 	sts	0x00A9, r24
		Pipe_Freeze();
		return ErrorCode;
	}

	return ErrorCode;
}
    127c:	89 2f       	mov	r24, r25
    127e:	ac 96       	adiw	r28, 0x2c	; 44
    1280:	0f b6       	in	r0, 0x3f	; 63
    1282:	f8 94       	cli
    1284:	de bf       	out	0x3e, r29	; 62
    1286:	0f be       	out	0x3f, r0	; 63
    1288:	cd bf       	out	0x3d, r28	; 61
    128a:	cf 91       	pop	r28
    128c:	df 91       	pop	r29
    128e:	1f 91       	pop	r17
    1290:	0f 91       	pop	r16
    1292:	08 95       	ret

00001294 <MassStore_GetMaxLUN>:
 *  \param[out] MaxLUNIndex  Pointer to the location that the maximum LUN index value should be stored
 *
 *  \return A value from the USB_Host_SendControlErrorCodes_t enum, or MASS_STORE_SCSI_COMMAND_FAILED if the SCSI command fails
 */
uint8_t MassStore_GetMaxLUN(uint8_t* const MaxLUNIndex)
{
    1294:	cf 93       	push	r28
    1296:	df 93       	push	r29
    1298:	ec 01       	movw	r28, r24
	uint8_t ErrorCode = HOST_SENDCONTROL_Successful;

	USB_ControlRequest = (USB_Request_Header_t)
    129a:	ac e2       	ldi	r26, 0x2C	; 44
    129c:	b1 e0       	ldi	r27, 0x01	; 1
    129e:	e4 e0       	ldi	r30, 0x04	; 4
    12a0:	f1 e0       	ldi	r31, 0x01	; 1
    12a2:	88 e0       	ldi	r24, 0x08	; 8
    12a4:	01 90       	ld	r0, Z+
    12a6:	0d 92       	st	X+, r0
    12a8:	81 50       	subi	r24, 0x01	; 1
    12aa:	e1 f7       	brne	.-8      	; 0x12a4 <MassStore_GetMaxLUN+0x10>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    12ac:	10 92 a7 00 	sts	0x00A7, r1
		};

	/* Select the control pipe for the request transfer */
	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(MaxLUNIndex)) == HOST_SENDCONTROL_SetupStalled)
    12b0:	ce 01       	movw	r24, r28
    12b2:	3a d5       	rcall	.+2676   	; 0x1d28 <USB_Host_SendControlRequest>
    12b4:	83 30       	cpi	r24, 0x03	; 3
    12b6:	39 f4       	brne	.+14     	; 0x12c6 <MassStore_GetMaxLUN+0x32>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
    12b8:	80 91 a6 00 	lds	r24, 0x00A6
    12bc:	8d 7f       	andi	r24, 0xFD	; 253
    12be:	80 93 a6 00 	sts	0x00A6, r24
	{
		/* Clear the pipe stall */
		Pipe_ClearStall();

		/* Some faulty Mass Storage devices don't implement the GET_MAX_LUN request, so assume a single LUN */
		*MaxLUNIndex = 0;
    12c2:	18 82       	st	Y, r1
    12c4:	80 e0       	ldi	r24, 0x00	; 0
		/* Clear the error, and pretend the request executed correctly if the device STALLed it */
		ErrorCode = HOST_SENDCONTROL_Successful;
	}

	return ErrorCode;
}
    12c6:	df 91       	pop	r29
    12c8:	cf 91       	pop	r28
    12ca:	08 95       	ret

000012cc <MassStore_MassStorageReset>:
 */
uint8_t MassStore_MassStorageReset(void)
{
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
    12cc:	ac e2       	ldi	r26, 0x2C	; 44
    12ce:	b1 e0       	ldi	r27, 0x01	; 1
    12d0:	ec e0       	ldi	r30, 0x0C	; 12
    12d2:	f1 e0       	ldi	r31, 0x01	; 1
    12d4:	88 e0       	ldi	r24, 0x08	; 8
    12d6:	01 90       	ld	r0, Z+
    12d8:	0d 92       	st	X+, r0
    12da:	81 50       	subi	r24, 0x01	; 1
    12dc:	e1 f7       	brne	.-8      	; 0x12d6 <MassStore_MassStorageReset+0xa>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    12de:	10 92 a7 00 	sts	0x00A7, r1
		};

	/* Select the control pipe for the request transfer */
	Pipe_SelectPipe(PIPE_CONTROLPIPE);
	
	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
    12e2:	80 e0       	ldi	r24, 0x00	; 0
    12e4:	90 e0       	ldi	r25, 0x00	; 0
    12e6:	20 d5       	rcall	.+2624   	; 0x1d28 <USB_Host_SendControlRequest>
    12e8:	88 23       	and	r24, r24
    12ea:	11 f5       	brne	.+68     	; 0x1330 <MassStore_MassStorageReset+0x64>
    12ec:	81 e0       	ldi	r24, 0x01	; 1
    12ee:	80 93 a7 00 	sts	0x00A7, r24
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				return (((UPCFG0X >> PEPNUM0) & PIPE_EPNUM_MASK) |
    12f2:	90 91 aa 00 	lds	r25, 0x00AA
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
    12f6:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				return (((UPCFG0X >> PEPNUM0) & PIPE_EPNUM_MASK) |
    12fa:	80 73       	andi	r24, 0x30	; 48
    12fc:	80 31       	cpi	r24, 0x10	; 16
    12fe:	11 f0       	breq	.+4      	; 0x1304 <MassStore_MassStorageReset+0x38>
    1300:	80 e0       	ldi	r24, 0x00	; 0
    1302:	01 c0       	rjmp	.+2      	; 0x1306 <MassStore_MassStorageReset+0x3a>
    1304:	80 e8       	ldi	r24, 0x80	; 128
	  return ErrorCode;
	
	/* Select first data pipe to clear STALL condition if one exists */
	Pipe_SelectPipe(MASS_STORE_DATA_IN_PIPE);
	
	if ((ErrorCode = USB_Host_ClearEndpointStall(Pipe_GetBoundEndpointAddress())) != HOST_SENDCONTROL_Successful)
    1306:	9f 70       	andi	r25, 0x0F	; 15
    1308:	89 2b       	or	r24, r25
    130a:	15 d6       	rcall	.+3114   	; 0x1f36 <USB_Host_ClearEndpointStall>
    130c:	88 23       	and	r24, r24
    130e:	81 f4       	brne	.+32     	; 0x1330 <MassStore_MassStorageReset+0x64>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1310:	82 e0       	ldi	r24, 0x02	; 2
    1312:	80 93 a7 00 	sts	0x00A7, r24
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				return (((UPCFG0X >> PEPNUM0) & PIPE_EPNUM_MASK) |
    1316:	90 91 aa 00 	lds	r25, 0x00AA
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
    131a:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				return (((UPCFG0X >> PEPNUM0) & PIPE_EPNUM_MASK) |
    131e:	80 73       	andi	r24, 0x30	; 48
    1320:	80 31       	cpi	r24, 0x10	; 16
    1322:	11 f0       	breq	.+4      	; 0x1328 <MassStore_MassStorageReset+0x5c>
    1324:	80 e0       	ldi	r24, 0x00	; 0
    1326:	01 c0       	rjmp	.+2      	; 0x132a <MassStore_MassStorageReset+0x5e>
    1328:	80 e8       	ldi	r24, 0x80	; 128
	  return ErrorCode;

	/* Select second data pipe to clear STALL condition if one exists */
	Pipe_SelectPipe(MASS_STORE_DATA_OUT_PIPE);

	if ((ErrorCode = USB_Host_ClearEndpointStall(Pipe_GetBoundEndpointAddress())) != HOST_SENDCONTROL_Successful)
    132a:	9f 70       	andi	r25, 0x0F	; 15
    132c:	89 2b       	or	r24, r25
    132e:	03 c6       	rjmp	.+3078   	; 0x1f36 <USB_Host_ClearEndpointStall>
	  return ErrorCode;
	
	return HOST_SENDCONTROL_Successful;
}
    1330:	08 95       	ret

00001332 <USB_Host_WaitMS>:
		USB_ResetInterface();
	}
}

uint8_t USB_Host_WaitMS(uint8_t MS)
{
    1332:	98 2f       	mov	r25, r24
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
    1334:	20 91 9e 00 	lds	r18, 0x009E
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
    1338:	30 91 a0 00 	lds	r19, 0x00A0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
    133c:	80 91 a0 00 	lds	r24, 0x00A0
    1340:	8f 7d       	andi	r24, 0xDF	; 223
    1342:	80 93 a0 00 	sts	0x00A0, r24
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
    1346:	80 91 9f 00 	lds	r24, 0x009F
    134a:	8f 7d       	andi	r24, 0xDF	; 223
    134c:	80 93 9f 00 	sts	0x009F, r24
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    1350:	80 91 9e 00 	lds	r24, 0x009E
    1354:	81 60       	ori	r24, 0x01	; 1
    1356:	80 93 9e 00 	sts	0x009E, r24
    135a:	28 c0       	rjmp	.+80     	; 0x13ac <USB_Host_WaitMS+0x7a>
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
    135c:	80 91 9f 00 	lds	r24, 0x009F

	USB_Host_ResumeBus();

	while (MS)
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
    1360:	85 ff       	sbrs	r24, 5
    1362:	06 c0       	rjmp	.+12     	; 0x1370 <USB_Host_WaitMS+0x3e>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
    1364:	80 91 9f 00 	lds	r24, 0x009F
    1368:	8f 7d       	andi	r24, 0xDF	; 223
    136a:	80 93 9f 00 	sts	0x009F, r24
		{
			USB_INT_Clear(USB_INT_HSOFI);
			MS--;
    136e:	91 50       	subi	r25, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
    1370:	80 91 34 01 	lds	r24, 0x0134
    1374:	81 30       	cpi	r24, 0x01	; 1
    1376:	11 f4       	brne	.+4      	; 0x137c <USB_Host_WaitMS+0x4a>
    1378:	91 e0       	ldi	r25, 0x01	; 1
    137a:	1a c0       	rjmp	.+52     	; 0x13b0 <USB_Host_WaitMS+0x7e>
			 *  \return Boolean \c true if an error has occurred on the selected pipe, \c false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
    137c:	80 91 a6 00 	lds	r24, 0x00A6
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError() == true)
    1380:	84 ff       	sbrs	r24, 4
    1382:	09 c0       	rjmp	.+18     	; 0x1396 <USB_Host_WaitMS+0x64>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
    1384:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
    1388:	80 91 a6 00 	lds	r24, 0x00A6
    138c:	8f 7e       	andi	r24, 0xEF	; 239
    138e:	80 93 a6 00 	sts	0x00A6, r24
    1392:	92 e0       	ldi	r25, 0x02	; 2
    1394:	0d c0       	rjmp	.+26     	; 0x13b0 <USB_Host_WaitMS+0x7e>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
    1396:	80 91 a6 00 	lds	r24, 0x00A6
			ErrorCode = HOST_WAITERROR_PipeError;

			break;
		}

		if (Pipe_IsStalled() == true)
    139a:	81 ff       	sbrs	r24, 1
    139c:	07 c0       	rjmp	.+14     	; 0x13ac <USB_Host_WaitMS+0x7a>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
    139e:	80 91 a6 00 	lds	r24, 0x00A6
    13a2:	8d 7f       	andi	r24, 0xFD	; 253
    13a4:	80 93 a6 00 	sts	0x00A6, r24
    13a8:	93 e0       	ldi	r25, 0x03	; 3
    13aa:	02 c0       	rjmp	.+4      	; 0x13b0 <USB_Host_WaitMS+0x7e>
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
    13ac:	99 23       	and	r25, r25
    13ae:	b1 f6       	brne	.-84     	; 0x135c <USB_Host_WaitMS+0x2a>

			break;
		}
	}

	if (BusSuspended)
    13b0:	20 fd       	sbrc	r18, 0
    13b2:	05 c0       	rjmp	.+10     	; 0x13be <USB_Host_WaitMS+0x8c>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    13b4:	80 91 9e 00 	lds	r24, 0x009E
    13b8:	8e 7f       	andi	r24, 0xFE	; 254
    13ba:	80 93 9e 00 	sts	0x009E, r24
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
    13be:	35 ff       	sbrs	r19, 5
    13c0:	05 c0       	rjmp	.+10     	; 0x13cc <USB_Host_WaitMS+0x9a>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
    13c2:	80 91 a0 00 	lds	r24, 0x00A0
    13c6:	80 62       	ori	r24, 0x20	; 32
    13c8:	80 93 a0 00 	sts	0x00A0, r24
	  USB_INT_Enable(USB_INT_HSOFI);

	return ErrorCode;
}
    13cc:	89 2f       	mov	r24, r25
    13ce:	08 95       	ret

000013d0 <USB_Host_ResetDevice>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
    13d0:	60 91 9e 00 	lds	r22, 0x009E
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
    13d4:	80 91 a0 00 	lds	r24, 0x00A0
    13d8:	8d 7f       	andi	r24, 0xFD	; 253
    13da:	80 93 a0 00 	sts	0x00A0, r24
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
    13de:	80 91 9e 00 	lds	r24, 0x009E
    13e2:	82 60       	ori	r24, 0x02	; 2
    13e4:	80 93 9e 00 	sts	0x009E, r24
			 *  \return Boolean \c true if no bus reset is currently being sent, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
    13e8:	80 91 9e 00 	lds	r24, 0x009E
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
    13ec:	81 fd       	sbrc	r24, 1
    13ee:	fc cf       	rjmp	.-8      	; 0x13e8 <USB_Host_ResetDevice+0x18>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    13f0:	80 91 9e 00 	lds	r24, 0x009E
    13f4:	81 60       	ori	r24, 0x01	; 1
    13f6:	80 93 9e 00 	sts	0x009E, r24
	USB_Host_ResumeBus();
	
	USB_Host_ConfigurationNumber = 0;
    13fa:	10 92 2a 01 	sts	0x012A, r1
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
    13fe:	30 91 a0 00 	lds	r19, 0x00A0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
    1402:	80 91 a0 00 	lds	r24, 0x00A0
    1406:	8f 7d       	andi	r24, 0xDF	; 223
    1408:	80 93 a0 00 	sts	0x00A0, r24
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
    140c:	80 91 9f 00 	lds	r24, 0x009F
    1410:	8f 7d       	andi	r24, 0xDF	; 223
    1412:	80 93 9f 00 	sts	0x009F, r24
    1416:	2a e0       	ldi	r18, 0x0A	; 10
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1418:	40 ed       	ldi	r20, 0xD0	; 208
    141a:	57 e0       	ldi	r21, 0x07	; 7
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
    141c:	80 91 9f 00 	lds	r24, 0x009F
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
    1420:	85 ff       	sbrs	r24, 5
    1422:	0b c0       	rjmp	.+22     	; 0x143a <USB_Host_ResetDevice+0x6a>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
    1424:	80 91 9f 00 	lds	r24, 0x009F
    1428:	8f 7d       	andi	r24, 0xDF	; 223
    142a:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
    142e:	80 91 9f 00 	lds	r24, 0x009F
    1432:	8d 7f       	andi	r24, 0xFD	; 253
    1434:	80 93 9f 00 	sts	0x009F, r24
    1438:	05 c0       	rjmp	.+10     	; 0x1444 <USB_Host_ResetDevice+0x74>
    143a:	ca 01       	movw	r24, r20
    143c:	01 97       	sbiw	r24, 0x01	; 1
    143e:	f1 f7       	brne	.-4      	; 0x143c <USB_Host_ResetDevice+0x6c>
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
    1440:	21 50       	subi	r18, 0x01	; 1
    1442:	61 f7       	brne	.-40     	; 0x141c <USB_Host_ResetDevice+0x4c>
		}

		Delay_MS(1);
	}

	if (HSOFIEnabled)
    1444:	35 ff       	sbrs	r19, 5
    1446:	05 c0       	rjmp	.+10     	; 0x1452 <USB_Host_ResetDevice+0x82>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
    1448:	80 91 a0 00 	lds	r24, 0x00A0
    144c:	80 62       	ori	r24, 0x20	; 32
    144e:	80 93 a0 00 	sts	0x00A0, r24
	  USB_INT_Enable(USB_INT_HSOFI);

	if (BusSuspended)
    1452:	60 fd       	sbrc	r22, 0
    1454:	05 c0       	rjmp	.+10     	; 0x1460 <USB_Host_ResetDevice+0x90>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    1456:	80 91 9e 00 	lds	r24, 0x009E
    145a:	8e 7f       	andi	r24, 0xFE	; 254
    145c:	80 93 9e 00 	sts	0x009E, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
    1460:	80 91 a0 00 	lds	r24, 0x00A0
    1464:	82 60       	ori	r24, 0x02	; 2
    1466:	80 93 a0 00 	sts	0x00A0, r24
	  USB_Host_SuspendBus();

	USB_INT_Enable(USB_INT_DDISCI);
}
    146a:	08 95       	ret

0000146c <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "../Host.h"

void USB_Host_ProcessNextHostState(void)
{
    146c:	ef 92       	push	r14
    146e:	0f 93       	push	r16
    1470:	1f 93       	push	r17
    1472:	df 93       	push	r29
    1474:	cf 93       	push	r28
    1476:	cd b7       	in	r28, 0x3d	; 61
    1478:	de b7       	in	r29, 0x3e	; 62
    147a:	28 97       	sbiw	r28, 0x08	; 8
    147c:	0f b6       	in	r0, 0x3f	; 63
    147e:	f8 94       	cli
    1480:	de bf       	out	0x3e, r29	; 62
    1482:	0f be       	out	0x3f, r0	; 63
    1484:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
    1486:	80 91 34 01 	lds	r24, 0x0134
    148a:	85 30       	cpi	r24, 0x05	; 5
    148c:	09 f4       	brne	.+2      	; 0x1490 <USB_Host_ProcessNextHostState+0x24>
    148e:	94 c0       	rjmp	.+296    	; 0x15b8 <USB_Host_ProcessNextHostState+0x14c>
    1490:	86 30       	cpi	r24, 0x06	; 6
    1492:	68 f4       	brcc	.+26     	; 0x14ae <USB_Host_ProcessNextHostState+0x42>
    1494:	82 30       	cpi	r24, 0x02	; 2
    1496:	b9 f1       	breq	.+110    	; 0x1506 <USB_Host_ProcessNextHostState+0x9a>
    1498:	83 30       	cpi	r24, 0x03	; 3
    149a:	18 f4       	brcc	.+6      	; 0x14a2 <USB_Host_ProcessNextHostState+0x36>
    149c:	88 23       	and	r24, r24
    149e:	a1 f0       	breq	.+40     	; 0x14c8 <USB_Host_ProcessNextHostState+0x5c>
    14a0:	06 c1       	rjmp	.+524    	; 0x16ae <USB_Host_ProcessNextHostState+0x242>
    14a2:	83 30       	cpi	r24, 0x03	; 3
    14a4:	d1 f1       	breq	.+116    	; 0x151a <USB_Host_ProcessNextHostState+0xae>
    14a6:	84 30       	cpi	r24, 0x04	; 4
    14a8:	09 f0       	breq	.+2      	; 0x14ac <USB_Host_ProcessNextHostState+0x40>
    14aa:	01 c1       	rjmp	.+514    	; 0x16ae <USB_Host_ProcessNextHostState+0x242>
    14ac:	5d c0       	rjmp	.+186    	; 0x1568 <USB_Host_ProcessNextHostState+0xfc>
    14ae:	87 30       	cpi	r24, 0x07	; 7
    14b0:	09 f4       	brne	.+2      	; 0x14b4 <USB_Host_ProcessNextHostState+0x48>
    14b2:	9b c0       	rjmp	.+310    	; 0x15ea <USB_Host_ProcessNextHostState+0x17e>
    14b4:	87 30       	cpi	r24, 0x07	; 7
    14b6:	08 f4       	brcc	.+2      	; 0x14ba <USB_Host_ProcessNextHostState+0x4e>
    14b8:	8a c0       	rjmp	.+276    	; 0x15ce <USB_Host_ProcessNextHostState+0x162>
    14ba:	88 30       	cpi	r24, 0x08	; 8
    14bc:	09 f4       	brne	.+2      	; 0x14c0 <USB_Host_ProcessNextHostState+0x54>
    14be:	b3 c0       	rjmp	.+358    	; 0x1626 <USB_Host_ProcessNextHostState+0x1ba>
    14c0:	89 30       	cpi	r24, 0x09	; 9
    14c2:	09 f0       	breq	.+2      	; 0x14c6 <USB_Host_ProcessNextHostState+0x5a>
    14c4:	f4 c0       	rjmp	.+488    	; 0x16ae <USB_Host_ProcessNextHostState+0x242>
    14c6:	d7 c0       	rjmp	.+430    	; 0x1676 <USB_Host_ProcessNextHostState+0x20a>
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
    14c8:	00 91 27 01 	lds	r16, 0x0127
    14cc:	10 91 28 01 	lds	r17, 0x0128
    14d0:	01 15       	cp	r16, r1
    14d2:	11 05       	cpc	r17, r1
    14d4:	09 f4       	brne	.+2      	; 0x14d8 <USB_Host_ProcessNextHostState+0x6c>
    14d6:	eb c0       	rjmp	.+470    	; 0x16ae <USB_Host_ProcessNextHostState+0x242>
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    14d8:	81 e0       	ldi	r24, 0x01	; 1
    14da:	2b df       	rcall	.-426    	; 0x1332 <USB_Host_WaitMS>
    14dc:	68 2f       	mov	r22, r24
    14de:	88 23       	and	r24, r24
    14e0:	31 f0       	breq	.+12     	; 0x14ee <USB_Host_ProcessNextHostState+0x82>
				{
					USB_HostState = PostWaitState;
    14e2:	80 91 26 01 	lds	r24, 0x0126
    14e6:	80 93 34 01 	sts	0x0134, r24
    14ea:	91 e0       	ldi	r25, 0x01	; 1
    14ec:	dc c0       	rjmp	.+440    	; 0x16a6 <USB_Host_ProcessNextHostState+0x23a>
					ErrorCode     = HOST_ENUMERROR_WaitStage;
					break;
				}

				if (!(--WaitMSRemaining))
    14ee:	c8 01       	movw	r24, r16
    14f0:	01 97       	sbiw	r24, 0x01	; 1
    14f2:	90 93 28 01 	sts	0x0128, r25
    14f6:	80 93 27 01 	sts	0x0127, r24
    14fa:	89 2b       	or	r24, r25
    14fc:	09 f0       	breq	.+2      	; 0x1500 <USB_Host_ProcessNextHostState+0x94>
    14fe:	d7 c0       	rjmp	.+430    	; 0x16ae <USB_Host_ProcessNextHostState+0x242>
				  USB_HostState = PostWaitState;
    1500:	80 91 26 01 	lds	r24, 0x0126
    1504:	07 c0       	rjmp	.+14     	; 0x1514 <USB_Host_ProcessNextHostState+0xa8>
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
    1506:	88 ee       	ldi	r24, 0xE8	; 232
    1508:	93 e0       	ldi	r25, 0x03	; 3
    150a:	90 93 28 01 	sts	0x0128, r25
    150e:	80 93 27 01 	sts	0x0127, r24

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
    1512:	83 e0       	ldi	r24, 0x03	; 3
    1514:	80 93 34 01 	sts	0x0134, r24
    1518:	ca c0       	rjmp	.+404    	; 0x16ae <USB_Host_ProcessNextHostState+0x242>
			break;
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
    151a:	80 91 27 01 	lds	r24, 0x0127
    151e:	90 91 28 01 	lds	r25, 0x0128
    1522:	01 97       	sbiw	r24, 0x01	; 1
    1524:	90 93 28 01 	sts	0x0128, r25
    1528:	80 93 27 01 	sts	0x0127, r24
    152c:	01 96       	adiw	r24, 0x01	; 1
    152e:	29 f0       	breq	.+10     	; 0x153a <USB_Host_ProcessNextHostState+0xce>
    1530:	80 ed       	ldi	r24, 0xD0	; 208
    1532:	97 e0       	ldi	r25, 0x07	; 7
    1534:	01 97       	sbiw	r24, 0x01	; 1
    1536:	f1 f7       	brne	.-4      	; 0x1534 <USB_Host_ProcessNextHostState+0xc8>
    1538:	ba c0       	rjmp	.+372    	; 0x16ae <USB_Host_ProcessNextHostState+0x242>
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
    153a:	77 98       	cbi	0x0e, 7	; 14

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
    153c:	80 91 d8 00 	lds	r24, 0x00D8
    1540:	80 61       	ori	r24, 0x10	; 16
    1542:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
    1546:	80 91 dd 00 	lds	r24, 0x00DD
    154a:	8b 7f       	andi	r24, 0xFB	; 251
    154c:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON |=  (1 << UVCONE);
    1550:	80 91 d7 00 	lds	r24, 0x00D7
    1554:	80 61       	ori	r24, 0x10	; 16
    1556:	80 93 d7 00 	sts	0x00D7, r24
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
    155a:	80 91 dd 00 	lds	r24, 0x00DD
    155e:	82 60       	ori	r24, 0x02	; 2
    1560:	80 93 dd 00 	sts	0x00DD, r24

				USB_OTGPAD_On();
				USB_Host_VBUS_Auto_Enable();
				USB_Host_VBUS_Auto_On();

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
    1564:	84 e0       	ldi	r24, 0x04	; 4
    1566:	d6 cf       	rjmp	.-84     	; 0x1514 <USB_Host_ProcessNextHostState+0xa8>
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
    1568:	80 91 9f 00 	lds	r24, 0x009F
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
    156c:	80 ff       	sbrs	r24, 0
    156e:	9f c0       	rjmp	.+318    	; 0x16ae <USB_Host_ProcessNextHostState+0x242>
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
    1570:	80 91 9f 00 	lds	r24, 0x009F
    1574:	8e 7f       	andi	r24, 0xFE	; 254
    1576:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
    157a:	80 91 9f 00 	lds	r24, 0x009F
    157e:	8d 7f       	andi	r24, 0xFD	; 253
    1580:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
    1584:	80 91 df 00 	lds	r24, 0x00DF
    1588:	8d 7f       	andi	r24, 0xFD	; 253
    158a:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
    158e:	80 91 de 00 	lds	r24, 0x00DE
    1592:	82 60       	ori	r24, 0x02	; 2
    1594:	80 93 de 00 	sts	0x00DE, r24
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    1598:	80 91 9e 00 	lds	r24, 0x009E
    159c:	81 60       	ori	r24, 0x01	; 1
    159e:	80 93 9e 00 	sts	0x009E, r24

				USB_INT_Clear(USB_INT_VBERRI);
				USB_INT_Enable(USB_INT_VBERRI);

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
    15a2:	ef d0       	rcall	.+478    	; 0x1782 <Pipe_ClearPipes>

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
    15a4:	10 92 34 01 	sts	0x0134, r1
    15a8:	84 e6       	ldi	r24, 0x64	; 100
    15aa:	90 e0       	ldi	r25, 0x00	; 0
    15ac:	90 93 28 01 	sts	0x0128, r25
    15b0:	80 93 27 01 	sts	0x0127, r24
    15b4:	85 e0       	ldi	r24, 0x05	; 5
    15b6:	5c c0       	rjmp	.+184    	; 0x1670 <USB_Host_ProcessNextHostState+0x204>
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
    15b8:	0b df       	rcall	.-490    	; 0x13d0 <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
    15ba:	10 92 34 01 	sts	0x0134, r1
    15be:	88 ec       	ldi	r24, 0xC8	; 200
    15c0:	90 e0       	ldi	r25, 0x00	; 0
    15c2:	90 93 28 01 	sts	0x0128, r25
    15c6:	80 93 27 01 	sts	0x0127, r24
    15ca:	86 e0       	ldi	r24, 0x06	; 6
    15cc:	51 c0       	rjmp	.+162    	; 0x1670 <USB_Host_ProcessNextHostState+0x204>
			break;
		case HOST_STATE_Powered_ConfigPipe:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
    15ce:	80 e0       	ldi	r24, 0x00	; 0
    15d0:	60 e0       	ldi	r22, 0x00	; 0
    15d2:	40 e0       	ldi	r20, 0x00	; 0
    15d4:	20 e0       	ldi	r18, 0x00	; 0
    15d6:	00 e4       	ldi	r16, 0x40	; 64
    15d8:	10 e0       	ldi	r17, 0x00	; 0
    15da:	ee 24       	eor	r14, r14
    15dc:	74 d0       	rcall	.+232    	; 0x16c6 <Pipe_ConfigurePipe>
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
    15de:	80 91 ac 00 	lds	r24, 0x00AC
							   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
							   PIPE_CONTROLPIPE_DEFAULT_SIZE, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
    15e2:	87 ff       	sbrs	r24, 7
    15e4:	5e c0       	rjmp	.+188    	; 0x16a2 <USB_Host_ProcessNextHostState+0x236>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
    15e6:	87 e0       	ldi	r24, 0x07	; 7
    15e8:	95 cf       	rjmp	.-214    	; 0x1514 <USB_Host_ProcessNextHostState+0xa8>
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
    15ea:	ac e2       	ldi	r26, 0x2C	; 44
    15ec:	b1 e0       	ldi	r27, 0x01	; 1
    15ee:	ec e1       	ldi	r30, 0x1C	; 28
    15f0:	f1 e0       	ldi	r31, 0x01	; 1
    15f2:	88 e0       	ldi	r24, 0x08	; 8
    15f4:	01 90       	ld	r0, Z+
    15f6:	0d 92       	st	X+, r0
    15f8:	81 50       	subi	r24, 0x01	; 1
    15fa:	e1 f7       	brne	.-8      	; 0x15f4 <USB_Host_ProcessNextHostState+0x188>
					.wLength       = 8,
				};

			uint8_t DataBuffer[8];

			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
    15fc:	ce 01       	movw	r24, r28
    15fe:	01 96       	adiw	r24, 0x01	; 1
    1600:	93 d3       	rcall	.+1830   	; 0x1d28 <USB_Host_SendControlRequest>
    1602:	68 2f       	mov	r22, r24
    1604:	88 23       	and	r24, r24
    1606:	09 f0       	breq	.+2      	; 0x160a <USB_Host_ProcessNextHostState+0x19e>
    1608:	4a c0       	rjmp	.+148    	; 0x169e <USB_Host_ProcessNextHostState+0x232>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_Host_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
    160a:	88 85       	ldd	r24, Y+8	; 0x08
    160c:	80 93 24 01 	sts	0x0124, r24

			USB_Host_ResetDevice();
    1610:	df de       	rcall	.-578    	; 0x13d0 <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
    1612:	10 92 34 01 	sts	0x0134, r1
    1616:	88 ec       	ldi	r24, 0xC8	; 200
    1618:	90 e0       	ldi	r25, 0x00	; 0
    161a:	90 93 28 01 	sts	0x0128, r25
    161e:	80 93 27 01 	sts	0x0127, r24
    1622:	88 e0       	ldi	r24, 0x08	; 8
    1624:	25 c0       	rjmp	.+74     	; 0x1670 <USB_Host_ProcessNextHostState+0x204>
			break;
		case HOST_STATE_Default_PostReset:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
    1626:	00 91 24 01 	lds	r16, 0x0124
    162a:	80 e0       	ldi	r24, 0x00	; 0
    162c:	60 e0       	ldi	r22, 0x00	; 0
    162e:	40 e0       	ldi	r20, 0x00	; 0
    1630:	20 e0       	ldi	r18, 0x00	; 0
    1632:	10 e0       	ldi	r17, 0x00	; 0
    1634:	ee 24       	eor	r14, r14
    1636:	47 d0       	rcall	.+142    	; 0x16c6 <Pipe_ConfigurePipe>
    1638:	80 91 ac 00 	lds	r24, 0x00AC
			                   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
			                   USB_Host_ControlPipeSize, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
    163c:	87 ff       	sbrs	r24, 7
    163e:	31 c0       	rjmp	.+98     	; 0x16a2 <USB_Host_ProcessNextHostState+0x236>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
    1640:	ac e2       	ldi	r26, 0x2C	; 44
    1642:	b1 e0       	ldi	r27, 0x01	; 1
    1644:	e4 e1       	ldi	r30, 0x14	; 20
    1646:	f1 e0       	ldi	r31, 0x01	; 1
    1648:	88 e0       	ldi	r24, 0x08	; 8
    164a:	01 90       	ld	r0, Z+
    164c:	0d 92       	st	X+, r0
    164e:	81 50       	subi	r24, 0x01	; 1
    1650:	e1 f7       	brne	.-8      	; 0x164a <USB_Host_ProcessNextHostState+0x1de>
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
    1652:	80 e0       	ldi	r24, 0x00	; 0
    1654:	90 e0       	ldi	r25, 0x00	; 0
    1656:	68 d3       	rcall	.+1744   	; 0x1d28 <USB_Host_SendControlRequest>
    1658:	68 2f       	mov	r22, r24
    165a:	88 23       	and	r24, r24
    165c:	01 f5       	brne	.+64     	; 0x169e <USB_Host_ProcessNextHostState+0x232>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
    165e:	10 92 34 01 	sts	0x0134, r1
    1662:	84 e6       	ldi	r24, 0x64	; 100
    1664:	90 e0       	ldi	r25, 0x00	; 0
    1666:	90 93 28 01 	sts	0x0128, r25
    166a:	80 93 27 01 	sts	0x0127, r24
    166e:	89 e0       	ldi	r24, 0x09	; 9
    1670:	80 93 26 01 	sts	0x0126, r24
    1674:	1c c0       	rjmp	.+56     	; 0x16ae <USB_Host_ProcessNextHostState+0x242>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
    1676:	81 e0       	ldi	r24, 0x01	; 1
    1678:	80 93 a1 00 	sts	0x00A1, r24
			break;
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			USB_HostState = HOST_STATE_Addressed;
    167c:	8a e0       	ldi	r24, 0x0A	; 10
    167e:	80 93 34 01 	sts	0x0134, r24

			EVENT_USB_Host_DeviceEnumerationComplete();
    1682:	a2 d9       	rcall	.-3260   	; 0x9c8 <EVENT_USB_Host_DeviceEnumerationComplete>
    1684:	14 c0       	rjmp	.+40     	; 0x16ae <USB_Host_ProcessNextHostState+0x242>
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
    1686:	89 2f       	mov	r24, r25
    1688:	0e 94 84 02 	call	0x508	; 0x508 <EVENT_USB_Host_DeviceEnumerationFailed>
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
    168c:	80 91 dd 00 	lds	r24, 0x00DD
    1690:	81 60       	ori	r24, 0x01	; 1
    1692:	80 93 dd 00 	sts	0x00DD, r24

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
    1696:	0e 94 b0 02 	call	0x560	; 0x560 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
    169a:	b9 d0       	rcall	.+370    	; 0x180e <USB_ResetInterface>
    169c:	08 c0       	rjmp	.+16     	; 0x16ae <USB_Host_ProcessNextHostState+0x242>
	}
}
    169e:	93 e0       	ldi	r25, 0x03	; 3
    16a0:	02 c0       	rjmp	.+4      	; 0x16a6 <USB_Host_ProcessNextHostState+0x23a>
    16a2:	94 e0       	ldi	r25, 0x04	; 4
    16a4:	60 e0       	ldi	r22, 0x00	; 0

			EVENT_USB_Host_DeviceEnumerationComplete();
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
    16a6:	80 91 34 01 	lds	r24, 0x0134
    16aa:	81 30       	cpi	r24, 0x01	; 1
    16ac:	61 f7       	brne	.-40     	; 0x1686 <USB_Host_ProcessNextHostState+0x21a>

		EVENT_USB_Host_DeviceUnattached();

		USB_ResetInterface();
	}
}
    16ae:	28 96       	adiw	r28, 0x08	; 8
    16b0:	0f b6       	in	r0, 0x3f	; 63
    16b2:	f8 94       	cli
    16b4:	de bf       	out	0x3e, r29	; 62
    16b6:	0f be       	out	0x3f, r0	; 63
    16b8:	cd bf       	out	0x3d, r28	; 61
    16ba:	cf 91       	pop	r28
    16bc:	df 91       	pop	r29
    16be:	1f 91       	pop	r17
    16c0:	0f 91       	pop	r16
    16c2:	ef 90       	pop	r14
    16c4:	08 95       	ret

000016c6 <Pipe_ConfigurePipe>:
                        const uint8_t Type,
                        const uint8_t Token,
                        const uint8_t EndpointNumber,
                        const uint16_t Size,
                        const uint8_t Banks)
{
    16c6:	ef 92       	push	r14
    16c8:	0f 93       	push	r16
    16ca:	1f 93       	push	r17
    16cc:	e8 2f       	mov	r30, r24
    16ce:	7e 2d       	mov	r23, r14

		Pipe_SelectPipe(PNum);
		
		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
    16d0:	62 95       	swap	r22
    16d2:	66 0f       	add	r22, r22
    16d4:	66 0f       	add	r22, r22
    16d6:	60 7c       	andi	r22, 0xC0	; 192
    16d8:	64 2b       	or	r22, r20
    16da:	2f 70       	andi	r18, 0x0F	; 15
    16dc:	62 2b       	or	r22, r18
    16de:	38 2f       	mov	r19, r24
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
    16e0:	72 60       	ori	r23, 0x02	; 2
    16e2:	45 c0       	rjmp	.+138    	; 0x176e <Pipe_ConfigurePipe+0xa8>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    16e4:	30 93 a7 00 	sts	0x00A7, r19
		uint8_t UPCFG2XTemp;
		uint8_t UPIENXTemp;

		Pipe_SelectPipe(PNum);
		
		if (PNum == Number)
    16e8:	3e 17       	cp	r19, r30
    16ea:	a1 f4       	brne	.+40     	; 0x1714 <Pipe_ConfigurePipe+0x4e>
    16ec:	88 e0       	ldi	r24, 0x08	; 8
    16ee:	90 e0       	ldi	r25, 0x00	; 0
    16f0:	20 e0       	ldi	r18, 0x00	; 0
    16f2:	03 c0       	rjmp	.+6      	; 0x16fa <Pipe_ConfigurePipe+0x34>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
				{
					MaskVal++;
    16f4:	2f 5f       	subi	r18, 0xFF	; 255
					CheckBytes <<= 1;
    16f6:	88 0f       	add	r24, r24
    16f8:	99 1f       	adc	r25, r25
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
    16fa:	80 17       	cp	r24, r16
    16fc:	91 07       	cpc	r25, r17
    16fe:	10 f4       	brcc	.+4      	; 0x1704 <Pipe_ConfigurePipe+0x3e>
    1700:	25 30       	cpi	r18, 0x05	; 5
    1702:	c1 f7       	brne	.-16     	; 0x16f4 <Pipe_ConfigurePipe+0x2e>
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
    1704:	92 2f       	mov	r25, r18
    1706:	92 95       	swap	r25
    1708:	90 7f       	andi	r25, 0xF0	; 240
    170a:	97 2b       	or	r25, r23
    170c:	56 2f       	mov	r21, r22
    170e:	40 e0       	ldi	r20, 0x00	; 0
    1710:	20 e0       	ldi	r18, 0x00	; 0
    1712:	08 c0       	rjmp	.+16     	; 0x1724 <Pipe_ConfigurePipe+0x5e>
			UPCFG2XTemp = 0;
			UPIENXTemp  = 0;
		}
		else
		{
			UPCFG0XTemp = UPCFG0X;
    1714:	50 91 aa 00 	lds	r21, 0x00AA
			UPCFG1XTemp = UPCFG1X;
    1718:	90 91 ab 00 	lds	r25, 0x00AB
			UPCFG2XTemp = UPCFG2X;
    171c:	40 91 ad 00 	lds	r20, 0x00AD
			UPIENXTemp  = UPIENX;
    1720:	20 91 ae 00 	lds	r18, 0x00AE
		}

		if (!(UPCFG1XTemp & (1 << ALLOC)))
    1724:	91 ff       	sbrs	r25, 1
    1726:	22 c0       	rjmp	.+68     	; 0x176c <Pipe_ConfigurePipe+0xa6>
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
    1728:	80 91 a9 00 	lds	r24, 0x00A9
    172c:	8e 7f       	andi	r24, 0xFE	; 254
    172e:	80 93 a9 00 	sts	0x00A9, r24
		  continue;
		  
		Pipe_DisablePipe();
		UPCFG1X &= ~(1 << ALLOC);
    1732:	80 91 ab 00 	lds	r24, 0x00AB
    1736:	8d 7f       	andi	r24, 0xFD	; 253
    1738:	80 93 ab 00 	sts	0x00AB, r24
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
    173c:	80 91 a9 00 	lds	r24, 0x00A9
    1740:	81 60       	ori	r24, 0x01	; 1
    1742:	80 93 a9 00 	sts	0x00A9, r24

		Pipe_EnablePipe();
		UPCFG0X = UPCFG0XTemp;
    1746:	50 93 aa 00 	sts	0x00AA, r21
		UPCFG1X = UPCFG1XTemp;
    174a:	90 93 ab 00 	sts	0x00AB, r25
		UPCFG2X = UPCFG2XTemp;
    174e:	40 93 ad 00 	sts	0x00AD, r20
		UPIENX  = UPIENXTemp;
    1752:	20 93 ae 00 	sts	0x00AE, r18

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
    1756:	80 91 a9 00 	lds	r24, 0x00A9
    175a:	80 62       	ori	r24, 0x20	; 32
    175c:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
    1760:	80 91 ac 00 	lds	r24, 0x00AC

		Pipe_SetInfiniteINRequests();
	
		if (!(Pipe_IsConfigured()))
    1764:	87 fd       	sbrc	r24, 7
    1766:	02 c0       	rjmp	.+4      	; 0x176c <Pipe_ConfigurePipe+0xa6>
    1768:	80 e0       	ldi	r24, 0x00	; 0
    176a:	07 c0       	rjmp	.+14     	; 0x177a <Pipe_ConfigurePipe+0xb4>

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else	
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
    176c:	3f 5f       	subi	r19, 0xFF	; 255
    176e:	37 30       	cpi	r19, 0x07	; 7
    1770:	08 f4       	brcc	.+2      	; 0x1774 <Pipe_ConfigurePipe+0xae>
    1772:	b8 cf       	rjmp	.-144    	; 0x16e4 <Pipe_ConfigurePipe+0x1e>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1774:	e0 93 a7 00 	sts	0x00A7, r30
    1778:	81 e0       	ldi	r24, 0x01	; 1
	}
		
	Pipe_SelectPipe(Number);	
	return true;
#endif
}
    177a:	1f 91       	pop	r17
    177c:	0f 91       	pop	r16
    177e:	ef 90       	pop	r14
    1780:	08 95       	ret

00001782 <Pipe_ClearPipes>:

void Pipe_ClearPipes(void)
{
	UPINT = 0;
    1782:	10 92 f8 00 	sts	0x00F8, r1
    1786:	90 e0       	ldi	r25, 0x00	; 0
    1788:	90 93 a7 00 	sts	0x00A7, r25

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
    178c:	10 92 ae 00 	sts	0x00AE, r1
		UPINTX  = 0;
    1790:	10 92 a6 00 	sts	0x00A6, r1
		UPCFG1X = 0;
    1794:	10 92 ab 00 	sts	0x00AB, r1
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
    1798:	80 91 a9 00 	lds	r24, 0x00A9
    179c:	8e 7f       	andi	r24, 0xFE	; 254
    179e:	80 93 a9 00 	sts	0x00A9, r24

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
    17a2:	9f 5f       	subi	r25, 0xFF	; 255
    17a4:	97 30       	cpi	r25, 0x07	; 7
    17a6:	81 f7       	brne	.-32     	; 0x1788 <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
    17a8:	08 95       	ret

000017aa <Pipe_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
    17aa:	40 91 a2 00 	lds	r20, 0x00A2
    17ae:	50 91 a3 00 	lds	r21, 0x00A3
    17b2:	28 e8       	ldi	r18, 0x88	; 136
    17b4:	33 e1       	ldi	r19, 0x13	; 19
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
    17b6:	80 91 aa 00 	lds	r24, 0x00AA

	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
    17ba:	80 73       	andi	r24, 0x30	; 48
    17bc:	80 31       	cpi	r24, 0x10	; 16
    17be:	29 f4       	brne	.+10     	; 0x17ca <Pipe_WaitUntilReady+0x20>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    17c0:	80 91 a6 00 	lds	r24, 0x00A6
		{
			if (Pipe_IsINReceived())
    17c4:	80 ff       	sbrs	r24, 0
    17c6:	05 c0       	rjmp	.+10     	; 0x17d2 <Pipe_WaitUntilReady+0x28>
    17c8:	20 c0       	rjmp	.+64     	; 0x180a <Pipe_WaitUntilReady+0x60>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
    17ca:	80 91 a6 00 	lds	r24, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
    17ce:	82 fd       	sbrc	r24, 2
    17d0:	1c c0       	rjmp	.+56     	; 0x180a <Pipe_WaitUntilReady+0x60>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
    17d2:	80 91 a6 00 	lds	r24, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
    17d6:	81 ff       	sbrs	r24, 1
    17d8:	02 c0       	rjmp	.+4      	; 0x17de <Pipe_WaitUntilReady+0x34>
    17da:	81 e0       	ldi	r24, 0x01	; 1
    17dc:	08 95       	ret
		  return PIPE_READYWAIT_PipeStalled;
		else if (USB_HostState == HOST_STATE_Unattached)
    17de:	80 91 34 01 	lds	r24, 0x0134
    17e2:	81 30       	cpi	r24, 0x01	; 1
    17e4:	11 f4       	brne	.+4      	; 0x17ea <Pipe_WaitUntilReady+0x40>
    17e6:	82 e0       	ldi	r24, 0x02	; 2
    17e8:	08 95       	ret
    17ea:	80 91 a2 00 	lds	r24, 0x00A2
    17ee:	90 91 a3 00 	lds	r25, 0x00A3
		  return PIPE_READYWAIT_DeviceDisconnected;

		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    17f2:	84 17       	cp	r24, r20
    17f4:	95 07       	cpc	r25, r21
    17f6:	f9 f2       	breq	.-66     	; 0x17b6 <Pipe_WaitUntilReady+0xc>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    17f8:	21 15       	cp	r18, r1
    17fa:	31 05       	cpc	r19, r1
    17fc:	11 f4       	brne	.+4      	; 0x1802 <Pipe_WaitUntilReady+0x58>
    17fe:	83 e0       	ldi	r24, 0x03	; 3
    1800:	08 95       	ret
    1802:	21 50       	subi	r18, 0x01	; 1
    1804:	30 40       	sbci	r19, 0x00	; 0
    1806:	ac 01       	movw	r20, r24
    1808:	d6 cf       	rjmp	.-84     	; 0x17b6 <Pipe_WaitUntilReady+0xc>
    180a:	80 e0       	ldi	r24, 0x00	; 0
			  return PIPE_READYWAIT_Timeout;
		}
	}
}
    180c:	08 95       	ret

0000180e <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    180e:	70 d0       	rcall	.+224    	; 0x18f0 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    1810:	77 d0       	rcall	.+238    	; 0x1900 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    1812:	80 91 d8 00 	lds	r24, 0x00D8
    1816:	8f 77       	andi	r24, 0x7F	; 127
    1818:	80 93 d8 00 	sts	0x00D8, r24
				USBCON |=  (1 << USBE);
    181c:	80 91 d8 00 	lds	r24, 0x00D8
    1820:	80 68       	ori	r24, 0x80	; 128
    1822:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
    1826:	80 91 d8 00 	lds	r24, 0x00D8
    182a:	8f 7d       	andi	r24, 0xDF	; 223
    182c:	80 93 d8 00 	sts	0x00D8, r24
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
    1830:	80 91 d7 00 	lds	r24, 0x00D7
    1834:	8f 77       	andi	r24, 0x7F	; 127
    1836:	80 93 d7 00 	sts	0x00D7, r24

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    183a:	8c e0       	ldi	r24, 0x0C	; 12
    183c:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    183e:	8e e0       	ldi	r24, 0x0E	; 14
    1840:	89 bd       	out	0x29, r24	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_CAN_BE_HOST)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));		
    1842:	09 b4       	in	r0, 0x29	; 41
    1844:	00 fe       	sbrs	r0, 0
    1846:	fd cf       	rjmp	.-6      	; 0x1842 <USB_ResetInterface+0x34>
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState                = HOST_STATE_Unattached;
    1848:	81 e0       	ldi	r24, 0x01	; 1
    184a:	80 93 34 01 	sts	0x0134, r24
	USB_Host_ConfigurationNumber = 0;
    184e:	10 92 2a 01 	sts	0x012A, r1
	USB_Host_ControlPipeSize     = PIPE_CONTROLPIPE_DEFAULT_SIZE;
    1852:	80 e4       	ldi	r24, 0x40	; 64
    1854:	80 93 24 01 	sts	0x0124, r24
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
    1858:	80 91 d8 00 	lds	r24, 0x00D8
    185c:	80 64       	ori	r24, 0x40	; 64
    185e:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
    1862:	80 91 dd 00 	lds	r24, 0x00DD
    1866:	81 60       	ori	r24, 0x01	; 1
    1868:	80 93 dd 00 	sts	0x00DD, r24
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
    186c:	80 91 dd 00 	lds	r24, 0x00DD
    1870:	84 60       	ori	r24, 0x04	; 4
    1872:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON &= ~(1 << UVCONE);
    1876:	80 91 d7 00 	lds	r24, 0x00D7
    187a:	8f 7e       	andi	r24, 0xEF	; 239
    187c:	80 93 d7 00 	sts	0x00D7, r24

				DDRE   |=  (1 << 7);
    1880:	6f 9a       	sbi	0x0d, 7	; 13
			}

			static inline void USB_Host_VBUS_Manual_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_On(void)
			{
				PORTE  |=  (1 << 7);
    1882:	77 9a       	sbi	0x0e, 7	; 14
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN |= (1 << SRPE);						
    1884:	80 91 de 00 	lds	r24, 0x00DE
    1888:	81 60       	ori	r24, 0x01	; 1
    188a:	80 93 de 00 	sts	0x00DE, r24
						break;
					case USB_INT_RSTI:
						UHIEN  |= (1 << RSTE);
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
    188e:	80 91 de 00 	lds	r24, 0x00DE
    1892:	84 60       	ori	r24, 0x04	; 4
    1894:	80 93 de 00 	sts	0x00DE, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    1898:	80 91 e0 00 	lds	r24, 0x00E0
    189c:	8e 7f       	andi	r24, 0xFE	; 254
    189e:	80 93 e0 00 	sts	0x00E0, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
    18a2:	80 91 d8 00 	lds	r24, 0x00D8
    18a6:	80 61       	ori	r24, 0x10	; 16
    18a8:	80 93 d8 00 	sts	0x00D8, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    18ac:	08 95       	ret

000018ae <USB_Init>:

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
    18ae:	e7 ed       	ldi	r30, 0xD7	; 215
    18b0:	f0 e0       	ldi	r31, 0x00	; 0
    18b2:	80 81       	ld	r24, Z
    18b4:	81 60       	ori	r24, 0x01	; 1
    18b6:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    18b8:	81 e0       	ldi	r24, 0x01	; 1
    18ba:	80 93 2b 01 	sts	0x012B, r24

	USB_ResetInterface();
}
    18be:	a7 cf       	rjmp	.-178    	; 0x180e <USB_ResetInterface>

000018c0 <USB_Disable>:

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
    18c0:	17 d0       	rcall	.+46     	; 0x18f0 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    18c2:	1e d0       	rcall	.+60     	; 0x1900 <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
    18c4:	e0 ee       	ldi	r30, 0xE0	; 224
    18c6:	f0 e0       	ldi	r31, 0x00	; 0
    18c8:	80 81       	ld	r24, Z
    18ca:	81 60       	ori	r24, 0x01	; 1
    18cc:	80 83       	st	Z, r24
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON  &= ~(1 << USBE);
    18ce:	a8 ed       	ldi	r26, 0xD8	; 216
    18d0:	b0 e0       	ldi	r27, 0x00	; 0
    18d2:	8c 91       	ld	r24, X
    18d4:	8f 77       	andi	r24, 0x7F	; 127
    18d6:	8c 93       	st	X, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    18d8:	19 bc       	out	0x29, r1	; 41

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  &= ~(1 << UVREGE);
    18da:	e7 ed       	ldi	r30, 0xD7	; 215
    18dc:	f0 e0       	ldi	r31, 0x00	; 0
    18de:	80 81       	ld	r24, Z
    18e0:	8e 7f       	andi	r24, 0xFE	; 254
    18e2:	80 83       	st	Z, r24
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON  &= ~(1 << OTGPADE);
    18e4:	8c 91       	ld	r24, X
    18e6:	8f 7e       	andi	r24, 0xEF	; 239
    18e8:	8c 93       	st	X, r24

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
    18ea:	10 92 2b 01 	sts	0x012B, r1
}
    18ee:	08 95       	ret

000018f0 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
    18f0:	e8 ed       	ldi	r30, 0xD8	; 216
    18f2:	f0 e0       	ldi	r31, 0x00	; 0
    18f4:	80 81       	ld	r24, Z
    18f6:	8c 7f       	andi	r24, 0xFC	; 252
    18f8:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
    18fa:	10 92 a0 00 	sts	0x00A0, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
	#endif
}
    18fe:	08 95       	ret

00001900 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    1900:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_BOTH)
	OTGINT = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
    1904:	10 92 9f 00 	sts	0x009F, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
	#endif
}
    1908:	08 95       	ret

0000190a <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
    190a:	1f 92       	push	r1
    190c:	0f 92       	push	r0
    190e:	0f b6       	in	r0, 0x3f	; 63
    1910:	0f 92       	push	r0
    1912:	0b b6       	in	r0, 0x3b	; 59
    1914:	0f 92       	push	r0
    1916:	11 24       	eor	r1, r1
    1918:	2f 93       	push	r18
    191a:	3f 93       	push	r19
    191c:	4f 93       	push	r20
    191e:	5f 93       	push	r21
    1920:	6f 93       	push	r22
    1922:	7f 93       	push	r23
    1924:	8f 93       	push	r24
    1926:	9f 93       	push	r25
    1928:	af 93       	push	r26
    192a:	bf 93       	push	r27
    192c:	ef 93       	push	r30
    192e:	ff 93       	push	r31
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
    1930:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	#if defined(USB_CAN_BE_HOST)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
    1934:	85 ff       	sbrs	r24, 5
    1936:	0a c0       	rjmp	.+20     	; 0x194c <__vector_10+0x42>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
    1938:	80 91 a0 00 	lds	r24, 0x00A0
    193c:	85 ff       	sbrs	r24, 5
    193e:	06 c0       	rjmp	.+12     	; 0x194c <__vector_10+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
    1940:	80 91 9f 00 	lds	r24, 0x009F
    1944:	8f 7d       	andi	r24, 0xDF	; 223
    1946:	80 93 9f 00 	sts	0x009F, r24
	{
		USB_INT_Clear(USB_INT_HSOFI);

		EVENT_USB_Host_StartOfFrame();
    194a:	c4 d1       	rcall	.+904    	; 0x1cd4 <USB_Event_Stub>
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
    194c:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
    1950:	81 ff       	sbrs	r24, 1
    1952:	16 c0       	rjmp	.+44     	; 0x1980 <__vector_10+0x76>
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
					case USB_INT_DCONNI:
						return (UHIEN  & (1 << DCONNE));
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
    1954:	80 91 a0 00 	lds	r24, 0x00A0
    1958:	81 ff       	sbrs	r24, 1
    195a:	12 c0       	rjmp	.+36     	; 0x1980 <__vector_10+0x76>
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
    195c:	80 91 9f 00 	lds	r24, 0x009F
    1960:	8d 7f       	andi	r24, 0xFD	; 253
    1962:	80 93 9f 00 	sts	0x009F, r24
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
    1966:	80 91 9f 00 	lds	r24, 0x009F
    196a:	8e 7f       	andi	r24, 0xFE	; 254
    196c:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
    1970:	80 91 a0 00 	lds	r24, 0x00A0
    1974:	8d 7f       	andi	r24, 0xFD	; 253
    1976:	80 93 a0 00 	sts	0x00A0, r24
	{
		USB_INT_Clear(USB_INT_DDISCI);
		USB_INT_Clear(USB_INT_DCONNI);
		USB_INT_Disable(USB_INT_DDISCI);

		EVENT_USB_Host_DeviceUnattached();
    197a:	0e 94 b0 02 	call	0x560	; 0x560 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
    197e:	47 df       	rcall	.-370    	; 0x180e <USB_ResetInterface>
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
    1980:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
    1984:	81 ff       	sbrs	r24, 1
    1986:	17 c0       	rjmp	.+46     	; 0x19b6 <__vector_10+0xac>
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
    1988:	80 91 de 00 	lds	r24, 0x00DE
    198c:	81 ff       	sbrs	r24, 1
    198e:	13 c0       	rjmp	.+38     	; 0x19b6 <__vector_10+0xac>
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
    1990:	80 91 df 00 	lds	r24, 0x00DF
    1994:	8d 7f       	andi	r24, 0xFD	; 253
    1996:	80 93 df 00 	sts	0x00DF, r24
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
    199a:	77 98       	cbi	0x0e, 7	; 14
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
    199c:	80 91 dd 00 	lds	r24, 0x00DD
    19a0:	81 60       	ori	r24, 0x01	; 1
    19a2:	80 93 dd 00 	sts	0x00DD, r24
		USB_INT_Clear(USB_INT_VBERRI);

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
    19a6:	80 e0       	ldi	r24, 0x00	; 0
    19a8:	0e 94 c7 04 	call	0x98e	; 0x98e <EVENT_USB_Host_HostError>
		EVENT_USB_Host_DeviceUnattached();
    19ac:	0e 94 b0 02 	call	0x560	; 0x560 <EVENT_USB_Host_DeviceUnattached>

		USB_HostState = HOST_STATE_Unattached;
    19b0:	81 e0       	ldi	r24, 0x01	; 1
    19b2:	80 93 34 01 	sts	0x0134, r24
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
					case USB_INT_SRPI:
						return (OTGINT & (1 << SRPI));
    19b6:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
    19ba:	80 ff       	sbrs	r24, 0
    19bc:	18 c0       	rjmp	.+48     	; 0x19ee <__vector_10+0xe4>
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
					case USB_INT_SRPI:
						return (OTGIEN & (1 << SRPE));
    19be:	80 91 de 00 	lds	r24, 0x00DE
    19c2:	80 ff       	sbrs	r24, 0
    19c4:	14 c0       	rjmp	.+40     	; 0x19ee <__vector_10+0xe4>
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
						break;
					case USB_INT_SRPI:
						OTGINT &= ~(1 << SRPI);
    19c6:	80 91 df 00 	lds	r24, 0x00DF
    19ca:	8e 7f       	andi	r24, 0xFE	; 254
    19cc:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_VBERRI:
						OTGIEN &= ~(1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN &= ~(1 << SRPE);						
    19d0:	80 91 de 00 	lds	r24, 0x00DE
    19d4:	8e 7f       	andi	r24, 0xFE	; 254
    19d6:	80 93 de 00 	sts	0x00DE, r24
	{
		USB_INT_Clear(USB_INT_SRPI);
		USB_INT_Disable(USB_INT_SRPI);

		EVENT_USB_Host_DeviceAttached();
    19da:	0e 94 b9 02 	call	0x572	; 0x572 <EVENT_USB_Host_DeviceAttached>
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
    19de:	80 91 a0 00 	lds	r24, 0x00A0
    19e2:	82 60       	ori	r24, 0x02	; 2
    19e4:	80 93 a0 00 	sts	0x00A0, r24

		USB_INT_Enable(USB_INT_DDISCI);

		USB_HostState = HOST_STATE_Powered;
    19e8:	82 e0       	ldi	r24, 0x02	; 2
    19ea:	80 93 34 01 	sts	0x0134, r24
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
    19ee:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
    19f2:	82 ff       	sbrs	r24, 2
    19f4:	10 c0       	rjmp	.+32     	; 0x1a16 <__vector_10+0x10c>
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
    19f6:	80 91 de 00 	lds	r24, 0x00DE
    19fa:	82 ff       	sbrs	r24, 2
    19fc:	0c c0       	rjmp	.+24     	; 0x1a16 <__vector_10+0x10c>
						break;
					case USB_INT_RSTI:
						UHINT  &= ~(1 << RSTI);
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
    19fe:	80 91 df 00 	lds	r24, 0x00DF
    1a02:	8b 7f       	andi	r24, 0xFB	; 251
    1a04:	80 93 df 00 	sts	0x00DF, r24
	{
		USB_INT_Clear(USB_INT_BCERRI);

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
    1a08:	82 e0       	ldi	r24, 0x02	; 2
    1a0a:	60 e0       	ldi	r22, 0x00	; 0
    1a0c:	0e 94 84 02 	call	0x508	; 0x508 <EVENT_USB_Host_DeviceEnumerationFailed>
		EVENT_USB_Host_DeviceUnattached();
    1a10:	0e 94 b0 02 	call	0x560	; 0x560 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
    1a14:	fc de       	rcall	.-520    	; 0x180e <USB_ResetInterface>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    1a16:	ff 91       	pop	r31
    1a18:	ef 91       	pop	r30
    1a1a:	bf 91       	pop	r27
    1a1c:	af 91       	pop	r26
    1a1e:	9f 91       	pop	r25
    1a20:	8f 91       	pop	r24
    1a22:	7f 91       	pop	r23
    1a24:	6f 91       	pop	r22
    1a26:	5f 91       	pop	r21
    1a28:	4f 91       	pop	r20
    1a2a:	3f 91       	pop	r19
    1a2c:	2f 91       	pop	r18
    1a2e:	0f 90       	pop	r0
    1a30:	0b be       	out	0x3b, r0	; 59
    1a32:	0f 90       	pop	r0
    1a34:	0f be       	out	0x3f, r0	; 63
    1a36:	0f 90       	pop	r0
    1a38:	1f 90       	pop	r1
    1a3a:	18 95       	reti

00001a3c <Pipe_Read_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    1a3c:	bf 92       	push	r11
    1a3e:	cf 92       	push	r12
    1a40:	df 92       	push	r13
    1a42:	ef 92       	push	r14
    1a44:	ff 92       	push	r15
    1a46:	0f 93       	push	r16
    1a48:	1f 93       	push	r17
    1a4a:	cf 93       	push	r28
    1a4c:	df 93       	push	r29
    1a4e:	18 2f       	mov	r17, r24
    1a50:	09 2f       	mov	r16, r25
    1a52:	7b 01       	movw	r14, r22
    1a54:	6a 01       	movw	r12, r20
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1a56:	80 91 aa 00 	lds	r24, 0x00AA
    1a5a:	8f 7c       	andi	r24, 0xCF	; 207
    1a5c:	80 61       	ori	r24, 0x10	; 16
    1a5e:	80 93 aa 00 	sts	0x00AA, r24
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
    1a62:	a3 de       	rcall	.-698    	; 0x17aa <Pipe_WaitUntilReady>
    1a64:	b8 2e       	mov	r11, r24
    1a66:	88 23       	and	r24, r24
    1a68:	a9 f5       	brne	.+106    	; 0x1ad4 <Pipe_Read_Stream_LE+0x98>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    1a6a:	81 2f       	mov	r24, r17
    1a6c:	90 2f       	mov	r25, r16
    1a6e:	9c 01       	movw	r18, r24
    1a70:	e9 01       	movw	r28, r18
	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
    1a72:	c1 14       	cp	r12, r1
    1a74:	d1 04       	cpc	r13, r1
    1a76:	39 f0       	breq	.+14     	; 0x1a86 <Pipe_Read_Stream_LE+0x4a>
	{
		Length -= *BytesProcessed;
    1a78:	f6 01       	movw	r30, r12
    1a7a:	80 81       	ld	r24, Z
    1a7c:	91 81       	ldd	r25, Z+1	; 0x01
    1a7e:	e8 1a       	sub	r14, r24
    1a80:	f9 0a       	sbc	r15, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    1a82:	c8 0f       	add	r28, r24
    1a84:	d9 1f       	adc	r29, r25
    1a86:	00 e0       	ldi	r16, 0x00	; 0
    1a88:	10 e0       	ldi	r17, 0x00	; 0
    1a8a:	21 c0       	rjmp	.+66     	; 0x1ace <Pipe_Read_Stream_LE+0x92>
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
    1a8c:	80 91 a6 00 	lds	r24, 0x00A6
	}
	
	while (Length)
	{
		if (!(Pipe_IsReadWriteAllowed()))
    1a90:	85 fd       	sbrc	r24, 5
    1a92:	15 c0       	rjmp	.+42     	; 0x1abe <Pipe_Read_Stream_LE+0x82>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1a94:	80 91 a6 00 	lds	r24, 0x00A6
    1a98:	8e 77       	andi	r24, 0x7E	; 126
    1a9a:	80 93 a6 00 	sts	0x00A6, r24
		{
			TEMPLATE_CLEAR_PIPE();

			if (BytesProcessed != NULL)
    1a9e:	c1 14       	cp	r12, r1
    1aa0:	d1 04       	cpc	r13, r1
    1aa2:	49 f0       	breq	.+18     	; 0x1ab6 <Pipe_Read_Stream_LE+0x7a>
			{
				*BytesProcessed += BytesInTransfer;
    1aa4:	f6 01       	movw	r30, r12
    1aa6:	80 81       	ld	r24, Z
    1aa8:	91 81       	ldd	r25, Z+1	; 0x01
    1aaa:	80 0f       	add	r24, r16
    1aac:	91 1f       	adc	r25, r17
    1aae:	91 83       	std	Z+1, r25	; 0x01
    1ab0:	80 83       	st	Z, r24
    1ab2:	84 e0       	ldi	r24, 0x04	; 4
    1ab4:	10 c0       	rjmp	.+32     	; 0x1ad6 <Pipe_Read_Stream_LE+0x9a>
				return PIPE_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
    1ab6:	79 de       	rcall	.-782    	; 0x17aa <Pipe_WaitUntilReady>
    1ab8:	88 23       	and	r24, r24
    1aba:	49 f0       	breq	.+18     	; 0x1ace <Pipe_Read_Stream_LE+0x92>
    1abc:	0c c0       	rjmp	.+24     	; 0x1ad6 <Pipe_Read_Stream_LE+0x9a>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    1abe:	80 91 af 00 	lds	r24, 0x00AF
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    1ac2:	89 93       	st	Y+, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    1ac4:	08 94       	sec
    1ac6:	e1 08       	sbc	r14, r1
    1ac8:	f1 08       	sbc	r15, r1
			BytesInTransfer++;
    1aca:	0f 5f       	subi	r16, 0xFF	; 255
    1acc:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}
	
	while (Length)
    1ace:	e1 14       	cp	r14, r1
    1ad0:	f1 04       	cpc	r15, r1
    1ad2:	e1 f6       	brne	.-72     	; 0x1a8c <Pipe_Read_Stream_LE+0x50>
    1ad4:	8b 2d       	mov	r24, r11
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
    1ad6:	df 91       	pop	r29
    1ad8:	cf 91       	pop	r28
    1ada:	1f 91       	pop	r17
    1adc:	0f 91       	pop	r16
    1ade:	ff 90       	pop	r15
    1ae0:	ef 90       	pop	r14
    1ae2:	df 90       	pop	r13
    1ae4:	cf 90       	pop	r12
    1ae6:	bf 90       	pop	r11
    1ae8:	08 95       	ret

00001aea <Pipe_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    1aea:	bf 92       	push	r11
    1aec:	cf 92       	push	r12
    1aee:	df 92       	push	r13
    1af0:	ef 92       	push	r14
    1af2:	ff 92       	push	r15
    1af4:	0f 93       	push	r16
    1af6:	1f 93       	push	r17
    1af8:	cf 93       	push	r28
    1afa:	df 93       	push	r29
    1afc:	18 2f       	mov	r17, r24
    1afe:	09 2f       	mov	r16, r25
    1b00:	7b 01       	movw	r14, r22
    1b02:	6a 01       	movw	r12, r20
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1b04:	80 91 aa 00 	lds	r24, 0x00AA
    1b08:	8f 7c       	andi	r24, 0xCF	; 207
    1b0a:	80 62       	ori	r24, 0x20	; 32
    1b0c:	80 93 aa 00 	sts	0x00AA, r24
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
    1b10:	4c de       	rcall	.-872    	; 0x17aa <Pipe_WaitUntilReady>
    1b12:	b8 2e       	mov	r11, r24
    1b14:	88 23       	and	r24, r24
    1b16:	a9 f5       	brne	.+106    	; 0x1b82 <Pipe_Write_Stream_LE+0x98>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    1b18:	81 2f       	mov	r24, r17
    1b1a:	90 2f       	mov	r25, r16
    1b1c:	9c 01       	movw	r18, r24
    1b1e:	e9 01       	movw	r28, r18
	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
    1b20:	c1 14       	cp	r12, r1
    1b22:	d1 04       	cpc	r13, r1
    1b24:	39 f0       	breq	.+14     	; 0x1b34 <Pipe_Write_Stream_LE+0x4a>
	{
		Length -= *BytesProcessed;
    1b26:	f6 01       	movw	r30, r12
    1b28:	80 81       	ld	r24, Z
    1b2a:	91 81       	ldd	r25, Z+1	; 0x01
    1b2c:	e8 1a       	sub	r14, r24
    1b2e:	f9 0a       	sbc	r15, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    1b30:	c8 0f       	add	r28, r24
    1b32:	d9 1f       	adc	r29, r25
    1b34:	00 e0       	ldi	r16, 0x00	; 0
    1b36:	10 e0       	ldi	r17, 0x00	; 0
    1b38:	21 c0       	rjmp	.+66     	; 0x1b7c <Pipe_Write_Stream_LE+0x92>
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
    1b3a:	80 91 a6 00 	lds	r24, 0x00A6
	}
	
	while (Length)
	{
		if (!(Pipe_IsReadWriteAllowed()))
    1b3e:	85 fd       	sbrc	r24, 5
    1b40:	15 c0       	rjmp	.+42     	; 0x1b6c <Pipe_Write_Stream_LE+0x82>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1b42:	80 91 a6 00 	lds	r24, 0x00A6
    1b46:	8b 77       	andi	r24, 0x7B	; 123
    1b48:	80 93 a6 00 	sts	0x00A6, r24
		{
			TEMPLATE_CLEAR_PIPE();

			if (BytesProcessed != NULL)
    1b4c:	c1 14       	cp	r12, r1
    1b4e:	d1 04       	cpc	r13, r1
    1b50:	49 f0       	breq	.+18     	; 0x1b64 <Pipe_Write_Stream_LE+0x7a>
			{
				*BytesProcessed += BytesInTransfer;
    1b52:	f6 01       	movw	r30, r12
    1b54:	80 81       	ld	r24, Z
    1b56:	91 81       	ldd	r25, Z+1	; 0x01
    1b58:	80 0f       	add	r24, r16
    1b5a:	91 1f       	adc	r25, r17
    1b5c:	91 83       	std	Z+1, r25	; 0x01
    1b5e:	80 83       	st	Z, r24
    1b60:	84 e0       	ldi	r24, 0x04	; 4
    1b62:	10 c0       	rjmp	.+32     	; 0x1b84 <Pipe_Write_Stream_LE+0x9a>
				return PIPE_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
    1b64:	22 de       	rcall	.-956    	; 0x17aa <Pipe_WaitUntilReady>
    1b66:	88 23       	and	r24, r24
    1b68:	49 f0       	breq	.+18     	; 0x1b7c <Pipe_Write_Stream_LE+0x92>
    1b6a:	0c c0       	rjmp	.+24     	; 0x1b84 <Pipe_Write_Stream_LE+0x9a>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    1b6c:	89 91       	ld	r24, Y+
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    1b6e:	80 93 af 00 	sts	0x00AF, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    1b72:	08 94       	sec
    1b74:	e1 08       	sbc	r14, r1
    1b76:	f1 08       	sbc	r15, r1
			BytesInTransfer++;
    1b78:	0f 5f       	subi	r16, 0xFF	; 255
    1b7a:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}
	
	while (Length)
    1b7c:	e1 14       	cp	r14, r1
    1b7e:	f1 04       	cpc	r15, r1
    1b80:	e1 f6       	brne	.-72     	; 0x1b3a <Pipe_Write_Stream_LE+0x50>
    1b82:	8b 2d       	mov	r24, r11
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
    1b84:	df 91       	pop	r29
    1b86:	cf 91       	pop	r28
    1b88:	1f 91       	pop	r17
    1b8a:	0f 91       	pop	r16
    1b8c:	ff 90       	pop	r15
    1b8e:	ef 90       	pop	r14
    1b90:	df 90       	pop	r13
    1b92:	cf 90       	pop	r12
    1b94:	bf 90       	pop	r11
    1b96:	08 95       	ret

00001b98 <USB_GetNextDescriptorComp>:

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
    1b98:	af 92       	push	r10
    1b9a:	bf 92       	push	r11
    1b9c:	cf 92       	push	r12
    1b9e:	df 92       	push	r13
    1ba0:	ef 92       	push	r14
    1ba2:	ff 92       	push	r15
    1ba4:	0f 93       	push	r16
    1ba6:	1f 93       	push	r17
    1ba8:	cf 93       	push	r28
    1baa:	df 93       	push	r29
    1bac:	7c 01       	movw	r14, r24
    1bae:	eb 01       	movw	r28, r22
    1bb0:	6a 01       	movw	r12, r20
    1bb2:	24 c0       	rjmp	.+72     	; 0x1bfc <USB_GetNextDescriptorComp+0x64>
	uint8_t ErrorCode;

	while (*BytesRem)
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
    1bb4:	e8 81       	ld	r30, Y
    1bb6:	f9 81       	ldd	r31, Y+1	; 0x01
    1bb8:	be 2e       	mov	r11, r30
    1bba:	af 2e       	mov	r10, r31
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc)
			{
				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;
    1bbc:	80 81       	ld	r24, Z
    1bbe:	90 e0       	ldi	r25, 0x00	; 0
    1bc0:	98 01       	movw	r18, r16
    1bc2:	80 17       	cp	r24, r16
    1bc4:	91 07       	cpc	r25, r17
    1bc6:	08 f4       	brcc	.+2      	; 0x1bca <USB_GetNextDescriptorComp+0x32>
    1bc8:	9c 01       	movw	r18, r24
				
				if (*BytesRem < CurrDescriptorSize)
				  CurrDescriptorSize = *BytesRem;

				*CurrConfigLoc  = (void*)((uintptr_t)*CurrConfigLoc + CurrDescriptorSize);
    1bca:	e2 0f       	add	r30, r18
    1bcc:	f3 1f       	adc	r31, r19
    1bce:	f9 83       	std	Y+1, r31	; 0x01
    1bd0:	e8 83       	st	Y, r30
				*BytesRem      -= CurrDescriptorSize;
    1bd2:	f7 01       	movw	r30, r14
    1bd4:	80 81       	ld	r24, Z
    1bd6:	91 81       	ldd	r25, Z+1	; 0x01
    1bd8:	82 1b       	sub	r24, r18
    1bda:	93 0b       	sbc	r25, r19
    1bdc:	91 83       	std	Z+1, r25	; 0x01
    1bde:	80 83       	st	Z, r24
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
    1be0:	88 81       	ld	r24, Y
    1be2:	99 81       	ldd	r25, Y+1	; 0x01
    1be4:	f6 01       	movw	r30, r12
    1be6:	09 95       	icall
    1be8:	82 30       	cpi	r24, 0x02	; 2
    1bea:	41 f0       	breq	.+16     	; 0x1bfc <USB_GetNextDescriptorComp+0x64>
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
    1bec:	81 30       	cpi	r24, 0x01	; 1
    1bee:	69 f4       	brne	.+26     	; 0x1c0a <USB_GetNextDescriptorComp+0x72>
			{
				*CurrConfigLoc = PrevDescLoc;
    1bf0:	b8 82       	st	Y, r11
    1bf2:	a9 82       	std	Y+1, r10	; 0x01
				*BytesRem      = PrevBytesRem;
    1bf4:	f7 01       	movw	r30, r14
    1bf6:	11 83       	std	Z+1, r17	; 0x01
    1bf8:	00 83       	st	Z, r16
    1bfa:	07 c0       	rjmp	.+14     	; 0x1c0a <USB_GetNextDescriptorComp+0x72>
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
	uint8_t ErrorCode;

	while (*BytesRem)
    1bfc:	f7 01       	movw	r30, r14
    1bfe:	00 81       	ld	r16, Z
    1c00:	11 81       	ldd	r17, Z+1	; 0x01
    1c02:	01 15       	cp	r16, r1
    1c04:	11 05       	cpc	r17, r1
    1c06:	b1 f6       	brne	.-84     	; 0x1bb4 <USB_GetNextDescriptorComp+0x1c>
    1c08:	82 e0       	ldi	r24, 0x02	; 2
			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
}
    1c0a:	df 91       	pop	r29
    1c0c:	cf 91       	pop	r28
    1c0e:	1f 91       	pop	r17
    1c10:	0f 91       	pop	r16
    1c12:	ff 90       	pop	r15
    1c14:	ef 90       	pop	r14
    1c16:	df 90       	pop	r13
    1c18:	cf 90       	pop	r12
    1c1a:	bf 90       	pop	r11
    1c1c:	af 90       	pop	r10
    1c1e:	08 95       	ret

00001c20 <USB_Host_GetDeviceConfigDescriptor>:
#if defined(USB_CAN_BE_HOST)
uint8_t USB_Host_GetDeviceConfigDescriptor(const uint8_t ConfigNumber,
                                           uint16_t* const ConfigSizePtr,
                                           void* const BufferPtr,
                                           const uint16_t BufferSize)
{
    1c20:	cf 92       	push	r12
    1c22:	df 92       	push	r13
    1c24:	ef 92       	push	r14
    1c26:	ff 92       	push	r15
    1c28:	0f 93       	push	r16
    1c2a:	1f 93       	push	r17
    1c2c:	df 93       	push	r29
    1c2e:	cf 93       	push	r28
    1c30:	cd b7       	in	r28, 0x3d	; 61
    1c32:	de b7       	in	r29, 0x3e	; 62
    1c34:	29 97       	sbiw	r28, 0x09	; 9
    1c36:	0f b6       	in	r0, 0x3f	; 63
    1c38:	f8 94       	cli
    1c3a:	de bf       	out	0x3e, r29	; 62
    1c3c:	0f be       	out	0x3f, r0	; 63
    1c3e:	cd bf       	out	0x3d, r28	; 61
    1c40:	6b 01       	movw	r12, r22
    1c42:	8a 01       	movw	r16, r20
    1c44:	79 01       	movw	r14, r18
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
    1c46:	90 e8       	ldi	r25, 0x80	; 128
    1c48:	90 93 2c 01 	sts	0x012C, r25
    1c4c:	96 e0       	ldi	r25, 0x06	; 6
    1c4e:	90 93 2d 01 	sts	0x012D, r25
    1c52:	90 e0       	ldi	r25, 0x00	; 0
    1c54:	01 97       	sbiw	r24, 0x01	; 1
    1c56:	92 60       	ori	r25, 0x02	; 2
    1c58:	90 93 2f 01 	sts	0x012F, r25
    1c5c:	80 93 2e 01 	sts	0x012E, r24
    1c60:	10 92 31 01 	sts	0x0131, r1
    1c64:	10 92 30 01 	sts	0x0130, r1
    1c68:	89 e0       	ldi	r24, 0x09	; 9
    1c6a:	90 e0       	ldi	r25, 0x00	; 0
    1c6c:	90 93 33 01 	sts	0x0133, r25
    1c70:	80 93 32 01 	sts	0x0132, r24
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1c74:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = sizeof(USB_Descriptor_Configuration_Header_t),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(ConfigHeader)) != HOST_SENDCONTROL_Successful)
    1c78:	ce 01       	movw	r24, r28
    1c7a:	01 96       	adiw	r24, 0x01	; 1
    1c7c:	55 d0       	rcall	.+170    	; 0x1d28 <USB_Host_SendControlRequest>
    1c7e:	28 2f       	mov	r18, r24
    1c80:	88 23       	and	r24, r24
    1c82:	c1 f4       	brne	.+48     	; 0x1cb4 <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);
    1c84:	8b 81       	ldd	r24, Y+3	; 0x03
    1c86:	9c 81       	ldd	r25, Y+4	; 0x04
    1c88:	f6 01       	movw	r30, r12
    1c8a:	91 83       	std	Z+1, r25	; 0x01
    1c8c:	80 83       	st	Z, r24

	if (*ConfigSizePtr > BufferSize)
    1c8e:	e8 16       	cp	r14, r24
    1c90:	f9 06       	cpc	r15, r25
    1c92:	10 f4       	brcc	.+4      	; 0x1c98 <USB_Host_GetDeviceConfigDescriptor+0x78>
    1c94:	25 e0       	ldi	r18, 0x05	; 5
    1c96:	0e c0       	rjmp	.+28     	; 0x1cb4 <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return HOST_GETCONFIG_BuffOverflow;

	USB_ControlRequest.wLength = *ConfigSizePtr;
    1c98:	90 93 33 01 	sts	0x0133, r25
    1c9c:	80 93 32 01 	sts	0x0132, r24

	if ((ErrorCode = USB_Host_SendControlRequest(BufferPtr)) != HOST_SENDCONTROL_Successful)
    1ca0:	c8 01       	movw	r24, r16
    1ca2:	42 d0       	rcall	.+132    	; 0x1d28 <USB_Host_SendControlRequest>
    1ca4:	28 2f       	mov	r18, r24
    1ca6:	88 23       	and	r24, r24
    1ca8:	29 f4       	brne	.+10     	; 0x1cb4 <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
    1caa:	f8 01       	movw	r30, r16
    1cac:	81 81       	ldd	r24, Z+1	; 0x01
    1cae:	82 30       	cpi	r24, 0x02	; 2
    1cb0:	09 f0       	breq	.+2      	; 0x1cb4 <USB_Host_GetDeviceConfigDescriptor+0x94>
    1cb2:	26 e0       	ldi	r18, 0x06	; 6
	  return HOST_GETCONFIG_InvalidData;

	return HOST_GETCONFIG_Successful;
}
    1cb4:	82 2f       	mov	r24, r18
    1cb6:	29 96       	adiw	r28, 0x09	; 9
    1cb8:	0f b6       	in	r0, 0x3f	; 63
    1cba:	f8 94       	cli
    1cbc:	de bf       	out	0x3e, r29	; 62
    1cbe:	0f be       	out	0x3f, r0	; 63
    1cc0:	cd bf       	out	0x3d, r28	; 61
    1cc2:	cf 91       	pop	r28
    1cc4:	df 91       	pop	r29
    1cc6:	1f 91       	pop	r17
    1cc8:	0f 91       	pop	r16
    1cca:	ff 90       	pop	r15
    1ccc:	ef 90       	pop	r14
    1cce:	df 90       	pop	r13
    1cd0:	cf 90       	pop	r12
    1cd2:	08 95       	ret

00001cd4 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
    1cd4:	08 95       	ret

00001cd6 <USB_Host_WaitForIOS>:

	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
    1cd6:	1f 93       	push	r17
    1cd8:	cf 93       	push	r28
    1cda:	df 93       	push	r29
    1cdc:	18 2f       	mov	r17, r24
    1cde:	c8 ee       	ldi	r28, 0xE8	; 232
    1ce0:	d3 e0       	ldi	r29, 0x03	; 3
    1ce2:	09 c0       	rjmp	.+18     	; 0x1cf6 <USB_Host_WaitForIOS+0x20>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1ce4:	81 e0       	ldi	r24, 0x01	; 1
    1ce6:	25 db       	rcall	.-2486   	; 0x1332 <USB_Host_WaitMS>
    1ce8:	88 23       	and	r24, r24
    1cea:	d1 f4       	brne	.+52     	; 0x1d20 <USB_Host_WaitForIOS+0x4a>
		  return ErrorCode;

		if (!(TimeoutCounter--))
    1cec:	20 97       	sbiw	r28, 0x00	; 0
    1cee:	11 f4       	brne	.+4      	; 0x1cf4 <USB_Host_WaitForIOS+0x1e>
    1cf0:	84 e0       	ldi	r24, 0x04	; 4
    1cf2:	16 c0       	rjmp	.+44     	; 0x1d20 <USB_Host_WaitForIOS+0x4a>
    1cf4:	21 97       	sbiw	r28, 0x01	; 1
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    1cf6:	11 23       	and	r17, r17
    1cf8:	29 f4       	brne	.+10     	; 0x1d04 <USB_Host_WaitForIOS+0x2e>
			 *  \return Boolean \c true if the current pipe is ready for a SETUP packet, \c false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
    1cfa:	80 91 a6 00 	lds	r24, 0x00A6
    1cfe:	83 ff       	sbrs	r24, 3
    1d00:	f1 cf       	rjmp	.-30     	; 0x1ce4 <USB_Host_WaitForIOS+0xe>
    1d02:	0d c0       	rjmp	.+26     	; 0x1d1e <USB_Host_WaitForIOS+0x48>
    1d04:	11 30       	cpi	r17, 0x01	; 1
    1d06:	29 f4       	brne	.+10     	; 0x1d12 <USB_Host_WaitForIOS+0x3c>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    1d08:	80 91 a6 00 	lds	r24, 0x00A6
    1d0c:	80 ff       	sbrs	r24, 0
    1d0e:	ea cf       	rjmp	.-44     	; 0x1ce4 <USB_Host_WaitForIOS+0xe>
    1d10:	06 c0       	rjmp	.+12     	; 0x1d1e <USB_Host_WaitForIOS+0x48>
    1d12:	12 30       	cpi	r17, 0x02	; 2
    1d14:	39 f7       	brne	.-50     	; 0x1ce4 <USB_Host_WaitForIOS+0xe>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
    1d16:	80 91 a6 00 	lds	r24, 0x00A6
    1d1a:	82 ff       	sbrs	r24, 2
    1d1c:	e3 cf       	rjmp	.-58     	; 0x1ce4 <USB_Host_WaitForIOS+0xe>
    1d1e:	80 e0       	ldi	r24, 0x00	; 0
		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
}
    1d20:	df 91       	pop	r29
    1d22:	cf 91       	pop	r28
    1d24:	1f 91       	pop	r17
    1d26:	08 95       	ret

00001d28 <USB_Host_SendControlRequest>:
#include "HostStandardReq.h"

uint8_t USB_Host_ConfigurationNumber;

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
    1d28:	ff 92       	push	r15
    1d2a:	0f 93       	push	r16
    1d2c:	1f 93       	push	r17
    1d2e:	cf 93       	push	r28
    1d30:	df 93       	push	r29
    1d32:	18 2f       	mov	r17, r24
    1d34:	09 2f       	mov	r16, r25
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
    1d36:	f0 90 9e 00 	lds	r15, 0x009E
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
	bool     BusSuspended = USB_Host_IsBusSuspended();
	uint8_t  ReturnStatus = HOST_SENDCONTROL_Successful;
	uint16_t DataLen      = USB_ControlRequest.wLength;
    1d3a:	c0 91 32 01 	lds	r28, 0x0132
    1d3e:	d0 91 33 01 	lds	r29, 0x0133
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    1d42:	80 91 9e 00 	lds	r24, 0x009E
    1d46:	81 60       	ori	r24, 0x01	; 1
    1d48:	80 93 9e 00 	sts	0x009E, r24

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1d4c:	81 e0       	ldi	r24, 0x01	; 1
    1d4e:	f1 da       	rcall	.-2590   	; 0x1332 <USB_Host_WaitMS>
    1d50:	98 2f       	mov	r25, r24
    1d52:	88 23       	and	r24, r24
    1d54:	09 f0       	breq	.+2      	; 0x1d58 <USB_Host_SendControlRequest+0x30>
    1d56:	d7 c0       	rjmp	.+430    	; 0x1f06 <USB_Host_SendControlRequest+0x1de>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1d58:	80 91 aa 00 	lds	r24, 0x00AA
    1d5c:	8f 7c       	andi	r24, 0xCF	; 207
    1d5e:	80 93 aa 00 	sts	0x00AA, r24

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
    1d62:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
    1d66:	80 91 a6 00 	lds	r24, 0x00A6
    1d6a:	8f 7e       	andi	r24, 0xEF	; 239
    1d6c:	80 93 a6 00 	sts	0x00A6, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1d70:	80 91 a9 00 	lds	r24, 0x00A9
    1d74:	8f 7b       	andi	r24, 0xBF	; 191
    1d76:	80 93 a9 00 	sts	0x00A9, r24
    1d7a:	ec e2       	ldi	r30, 0x2C	; 44
    1d7c:	f1 e0       	ldi	r31, 0x01	; 1
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
	  Pipe_Write_8(*(HeaderStream++));	
    1d7e:	81 91       	ld	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    1d80:	80 93 af 00 	sts	0x00AF, r24
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
    1d84:	81 e0       	ldi	r24, 0x01	; 1
    1d86:	e4 33       	cpi	r30, 0x34	; 52
    1d88:	f8 07       	cpc	r31, r24
    1d8a:	c9 f7       	brne	.-14     	; 0x1d7e <USB_Host_SendControlRequest+0x56>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
    1d8c:	80 91 a6 00 	lds	r24, 0x00A6
    1d90:	87 77       	andi	r24, 0x77	; 119
    1d92:	80 93 a6 00 	sts	0x00A6, r24
	  Pipe_Write_8(*(HeaderStream++));	
	#endif
	
	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
    1d96:	80 e0       	ldi	r24, 0x00	; 0
    1d98:	9e df       	rcall	.-196    	; 0x1cd6 <USB_Host_WaitForIOS>
    1d9a:	98 2f       	mov	r25, r24
    1d9c:	88 23       	and	r24, r24
    1d9e:	09 f0       	breq	.+2      	; 0x1da2 <USB_Host_SendControlRequest+0x7a>
    1da0:	b2 c0       	rjmp	.+356    	; 0x1f06 <USB_Host_SendControlRequest+0x1de>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1da2:	80 91 a9 00 	lds	r24, 0x00A9
    1da6:	80 64       	ori	r24, 0x40	; 64
    1da8:	80 93 a9 00 	sts	0x00A9, r24
	  goto End_Of_Control_Send;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1dac:	81 e0       	ldi	r24, 0x01	; 1
    1dae:	c1 da       	rcall	.-2686   	; 0x1332 <USB_Host_WaitMS>
    1db0:	98 2f       	mov	r25, r24
    1db2:	88 23       	and	r24, r24
    1db4:	09 f0       	breq	.+2      	; 0x1db8 <USB_Host_SendControlRequest+0x90>
    1db6:	a7 c0       	rjmp	.+334    	; 0x1f06 <USB_Host_SendControlRequest+0x1de>

uint8_t USB_Host_ConfigurationNumber;

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
    1db8:	21 2f       	mov	r18, r17
    1dba:	30 2f       	mov	r19, r16
    1dbc:	c9 01       	movw	r24, r18
    1dbe:	8c 01       	movw	r16, r24
	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
	  goto End_Of_Control_Send;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
    1dc0:	80 91 2c 01 	lds	r24, 0x012C
    1dc4:	87 ff       	sbrs	r24, 7
    1dc6:	52 c0       	rjmp	.+164    	; 0x1e6c <USB_Host_SendControlRequest+0x144>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1dc8:	80 91 aa 00 	lds	r24, 0x00AA
    1dcc:	8f 7c       	andi	r24, 0xCF	; 207
    1dce:	80 61       	ori	r24, 0x10	; 16
    1dd0:	80 93 aa 00 	sts	0x00AA, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
    1dd4:	01 15       	cp	r16, r1
    1dd6:	11 05       	cpc	r17, r1
    1dd8:	69 f5       	brne	.+90     	; 0x1e34 <USB_Host_SendControlRequest+0x10c>
    1dda:	2e c0       	rjmp	.+92     	; 0x1e38 <USB_Host_SendControlRequest+0x110>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1ddc:	80 91 a9 00 	lds	r24, 0x00A9
    1de0:	8f 7b       	andi	r24, 0xBF	; 191
    1de2:	80 93 a9 00 	sts	0x00A9, r24
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    1de6:	81 e0       	ldi	r24, 0x01	; 1
    1de8:	76 df       	rcall	.-276    	; 0x1cd6 <USB_Host_WaitForIOS>
    1dea:	98 2f       	mov	r25, r24
    1dec:	88 23       	and	r24, r24
    1dee:	09 f0       	breq	.+2      	; 0x1df2 <USB_Host_SendControlRequest+0xca>
    1df0:	8a c0       	rjmp	.+276    	; 0x1f06 <USB_Host_SendControlRequest+0x1de>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1df2:	80 91 f6 00 	lds	r24, 0x00F6
    1df6:	90 91 f7 00 	lds	r25, 0x00F7
				  goto End_Of_Control_Send;

				if (!(Pipe_BytesInPipe()))
    1dfa:	89 2b       	or	r24, r25
    1dfc:	49 f4       	brne	.+18     	; 0x1e10 <USB_Host_SendControlRequest+0xe8>
    1dfe:	c0 e0       	ldi	r28, 0x00	; 0
    1e00:	d0 e0       	ldi	r29, 0x00	; 0
    1e02:	06 c0       	rjmp	.+12     	; 0x1e10 <USB_Host_SendControlRequest+0xe8>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    1e04:	80 91 af 00 	lds	r24, 0x00AF
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
				{
					*(DataStream++) = Pipe_Read_8();
    1e08:	f8 01       	movw	r30, r16
    1e0a:	81 93       	st	Z+, r24
    1e0c:	8f 01       	movw	r16, r30
					DataLen--;
    1e0e:	21 97       	sbiw	r28, 0x01	; 1
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1e10:	80 91 f6 00 	lds	r24, 0x00F6
    1e14:	90 91 f7 00 	lds	r25, 0x00F7
				  goto End_Of_Control_Send;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
    1e18:	89 2b       	or	r24, r25
    1e1a:	11 f0       	breq	.+4      	; 0x1e20 <USB_Host_SendControlRequest+0xf8>
    1e1c:	20 97       	sbiw	r28, 0x00	; 0
    1e1e:	91 f7       	brne	.-28     	; 0x1e04 <USB_Host_SendControlRequest+0xdc>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1e20:	80 91 a9 00 	lds	r24, 0x00A9
    1e24:	80 64       	ori	r24, 0x40	; 64
    1e26:	80 93 a9 00 	sts	0x00A9, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1e2a:	80 91 a6 00 	lds	r24, 0x00A6
    1e2e:	8e 77       	andi	r24, 0x7E	; 126
    1e30:	80 93 a6 00 	sts	0x00A6, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
    1e34:	20 97       	sbiw	r28, 0x00	; 0
    1e36:	91 f6       	brne	.-92     	; 0x1ddc <USB_Host_SendControlRequest+0xb4>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1e38:	80 91 aa 00 	lds	r24, 0x00AA
    1e3c:	8f 7c       	andi	r24, 0xCF	; 207
    1e3e:	80 62       	ori	r24, 0x20	; 32
    1e40:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1e44:	80 91 a9 00 	lds	r24, 0x00A9
    1e48:	8f 7b       	andi	r24, 0xBF	; 191
    1e4a:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1e4e:	82 e0       	ldi	r24, 0x02	; 2
    1e50:	42 df       	rcall	.-380    	; 0x1cd6 <USB_Host_WaitForIOS>
    1e52:	98 2f       	mov	r25, r24
    1e54:	88 23       	and	r24, r24
    1e56:	09 f0       	breq	.+2      	; 0x1e5a <USB_Host_SendControlRequest+0x132>
    1e58:	56 c0       	rjmp	.+172    	; 0x1f06 <USB_Host_SendControlRequest+0x1de>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1e5a:	80 91 a6 00 	lds	r24, 0x00A6
    1e5e:	8b 77       	andi	r24, 0x7B	; 123
    1e60:	80 93 a6 00 	sts	0x00A6, r24
		  goto End_Of_Control_Send;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1e64:	82 e0       	ldi	r24, 0x02	; 2
    1e66:	37 df       	rcall	.-402    	; 0x1cd6 <USB_Host_WaitForIOS>
    1e68:	98 2f       	mov	r25, r24
    1e6a:	4d c0       	rjmp	.+154    	; 0x1f06 <USB_Host_SendControlRequest+0x1de>
		  goto End_Of_Control_Send;
	}
	else
	{
		if (DataStream != NULL)
    1e6c:	01 15       	cp	r16, r1
    1e6e:	11 05       	cpc	r17, r1
    1e70:	a9 f1       	breq	.+106    	; 0x1edc <USB_Host_SendControlRequest+0x1b4>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1e72:	80 91 aa 00 	lds	r24, 0x00AA
    1e76:	8f 7c       	andi	r24, 0xCF	; 207
    1e78:	80 62       	ori	r24, 0x20	; 32
    1e7a:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1e7e:	80 91 a9 00 	lds	r24, 0x00A9
    1e82:	8f 7b       	andi	r24, 0xBF	; 191
    1e84:	80 93 a9 00 	sts	0x00A9, r24
    1e88:	1d c0       	rjmp	.+58     	; 0x1ec4 <USB_Host_SendControlRequest+0x19c>
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1e8a:	82 e0       	ldi	r24, 0x02	; 2
    1e8c:	24 df       	rcall	.-440    	; 0x1cd6 <USB_Host_WaitForIOS>
    1e8e:	98 2f       	mov	r25, r24
    1e90:	88 23       	and	r24, r24
    1e92:	c9 f5       	brne	.+114    	; 0x1f06 <USB_Host_SendControlRequest+0x1de>
				  goto End_Of_Control_Send;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    1e94:	80 91 24 01 	lds	r24, 0x0124
    1e98:	28 2f       	mov	r18, r24
    1e9a:	30 e0       	ldi	r19, 0x00	; 0
    1e9c:	07 c0       	rjmp	.+14     	; 0x1eac <USB_Host_SendControlRequest+0x184>
				{
					Pipe_Write_8(*(DataStream++));
    1e9e:	f8 01       	movw	r30, r16
    1ea0:	81 91       	ld	r24, Z+
    1ea2:	8f 01       	movw	r16, r30
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    1ea4:	80 93 af 00 	sts	0x00AF, r24
					DataLen--;
    1ea8:	21 97       	sbiw	r28, 0x01	; 1
			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
				  goto End_Of_Control_Send;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    1eaa:	39 f0       	breq	.+14     	; 0x1eba <USB_Host_SendControlRequest+0x192>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1eac:	80 91 f6 00 	lds	r24, 0x00F6
    1eb0:	90 91 f7 00 	lds	r25, 0x00F7
    1eb4:	82 17       	cp	r24, r18
    1eb6:	93 07       	cpc	r25, r19
    1eb8:	90 f3       	brcs	.-28     	; 0x1e9e <USB_Host_SendControlRequest+0x176>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1eba:	80 91 a6 00 	lds	r24, 0x00A6
    1ebe:	8b 77       	andi	r24, 0x7B	; 123
    1ec0:	80 93 a6 00 	sts	0x00A6, r24
		if (DataStream != NULL)
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
    1ec4:	20 97       	sbiw	r28, 0x00	; 0
    1ec6:	09 f7       	brne	.-62     	; 0x1e8a <USB_Host_SendControlRequest+0x162>
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1ec8:	82 e0       	ldi	r24, 0x02	; 2
    1eca:	05 df       	rcall	.-502    	; 0x1cd6 <USB_Host_WaitForIOS>
    1ecc:	98 2f       	mov	r25, r24
    1ece:	88 23       	and	r24, r24
    1ed0:	d1 f4       	brne	.+52     	; 0x1f06 <USB_Host_SendControlRequest+0x1de>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1ed2:	80 91 a9 00 	lds	r24, 0x00A9
    1ed6:	80 64       	ori	r24, 0x40	; 64
    1ed8:	80 93 a9 00 	sts	0x00A9, r24
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1edc:	80 91 aa 00 	lds	r24, 0x00AA
    1ee0:	8f 7c       	andi	r24, 0xCF	; 207
    1ee2:	80 61       	ori	r24, 0x10	; 16
    1ee4:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1ee8:	80 91 a9 00 	lds	r24, 0x00A9
    1eec:	8f 7b       	andi	r24, 0xBF	; 191
    1eee:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    1ef2:	81 e0       	ldi	r24, 0x01	; 1
    1ef4:	f0 de       	rcall	.-544    	; 0x1cd6 <USB_Host_WaitForIOS>
    1ef6:	98 2f       	mov	r25, r24
    1ef8:	88 23       	and	r24, r24
    1efa:	29 f4       	brne	.+10     	; 0x1f06 <USB_Host_SendControlRequest+0x1de>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1efc:	80 91 a6 00 	lds	r24, 0x00A6
    1f00:	8e 77       	andi	r24, 0x7E	; 126
    1f02:	80 93 a6 00 	sts	0x00A6, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1f06:	80 91 a9 00 	lds	r24, 0x00A9
    1f0a:	80 64       	ori	r24, 0x40	; 64
    1f0c:	80 93 a9 00 	sts	0x00A9, r24
	}

End_Of_Control_Send:
	Pipe_Freeze();

	if (BusSuspended)
    1f10:	f0 fc       	sbrc	r15, 0
    1f12:	05 c0       	rjmp	.+10     	; 0x1f1e <USB_Host_SendControlRequest+0x1f6>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    1f14:	80 91 9e 00 	lds	r24, 0x009E
    1f18:	8e 7f       	andi	r24, 0xFE	; 254
    1f1a:	80 93 9e 00 	sts	0x009E, r24
			 *  \param[in] PipeNumber  Index of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t PipeNumber)
			{
				UPRST = (1 << PipeNumber);
    1f1e:	81 e0       	ldi	r24, 0x01	; 1
    1f20:	80 93 a8 00 	sts	0x00A8, r24
				UPRST = 0;
    1f24:	10 92 a8 00 	sts	0x00A8, r1
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
    1f28:	89 2f       	mov	r24, r25
    1f2a:	df 91       	pop	r29
    1f2c:	cf 91       	pop	r28
    1f2e:	1f 91       	pop	r17
    1f30:	0f 91       	pop	r16
    1f32:	ff 90       	pop	r15
    1f34:	08 95       	ret

00001f36 <USB_Host_ClearEndpointStall>:
	return USB_Host_SendControlRequest(FeatureStatus);
}

uint8_t USB_Host_ClearEndpointStall(const uint8_t EndpointAddress)
{
	USB_ControlRequest = (USB_Request_Header_t)
    1f36:	92 e0       	ldi	r25, 0x02	; 2
    1f38:	90 93 2c 01 	sts	0x012C, r25
    1f3c:	91 e0       	ldi	r25, 0x01	; 1
    1f3e:	90 93 2d 01 	sts	0x012D, r25
    1f42:	10 92 2f 01 	sts	0x012F, r1
    1f46:	10 92 2e 01 	sts	0x012E, r1
    1f4a:	80 93 30 01 	sts	0x0130, r24
    1f4e:	10 92 31 01 	sts	0x0131, r1
    1f52:	10 92 33 01 	sts	0x0133, r1
    1f56:	10 92 32 01 	sts	0x0132, r1
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1f5a:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	return USB_Host_SendControlRequest(NULL);
    1f5e:	80 e0       	ldi	r24, 0x00	; 0
    1f60:	90 e0       	ldi	r25, 0x00	; 0
}
    1f62:	e2 ce       	rjmp	.-572    	; 0x1d28 <USB_Host_SendControlRequest>

00001f64 <USB_Host_SetDeviceConfiguration>:

	return HOST_SENDCONTROL_Successful;
}

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
    1f64:	1f 93       	push	r17
    1f66:	18 2f       	mov	r17, r24
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
    1f68:	10 92 2c 01 	sts	0x012C, r1
    1f6c:	89 e0       	ldi	r24, 0x09	; 9
    1f6e:	80 93 2d 01 	sts	0x012D, r24
    1f72:	10 93 2e 01 	sts	0x012E, r17
    1f76:	10 92 2f 01 	sts	0x012F, r1
    1f7a:	10 92 31 01 	sts	0x0131, r1
    1f7e:	10 92 30 01 	sts	0x0130, r1
    1f82:	10 92 33 01 	sts	0x0133, r1
    1f86:	10 92 32 01 	sts	0x0132, r1
    1f8a:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);
	
	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) == HOST_SENDCONTROL_Successful)
    1f8e:	80 e0       	ldi	r24, 0x00	; 0
    1f90:	90 e0       	ldi	r25, 0x00	; 0
    1f92:	ca de       	rcall	.-620    	; 0x1d28 <USB_Host_SendControlRequest>
    1f94:	88 23       	and	r24, r24
    1f96:	49 f4       	brne	.+18     	; 0x1faa <USB_Host_SetDeviceConfiguration+0x46>
	{
		USB_Host_ConfigurationNumber = ConfigNumber;
    1f98:	10 93 2a 01 	sts	0x012A, r17
		USB_HostState                = (ConfigNumber) ? HOST_STATE_Configured : HOST_STATE_Addressed;
    1f9c:	11 23       	and	r17, r17
    1f9e:	11 f4       	brne	.+4      	; 0x1fa4 <USB_Host_SetDeviceConfiguration+0x40>
    1fa0:	9a e0       	ldi	r25, 0x0A	; 10
    1fa2:	01 c0       	rjmp	.+2      	; 0x1fa6 <USB_Host_SetDeviceConfiguration+0x42>
    1fa4:	9b e0       	ldi	r25, 0x0B	; 11
    1fa6:	90 93 34 01 	sts	0x0134, r25
	}

	return ErrorCode;
}
    1faa:	1f 91       	pop	r17
    1fac:	08 95       	ret

00001fae <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    1fae:	ff 92       	push	r15
    1fb0:	0f 93       	push	r16
    1fb2:	1f 93       	push	r17
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
    1fb4:	07 ea       	ldi	r16, 0xA7	; 167
    1fb6:	10 e0       	ldi	r17, 0x00	; 0
    1fb8:	f8 01       	movw	r30, r16
    1fba:	f0 80       	ld	r15, Z
    1fbc:	f7 e0       	ldi	r31, 0x07	; 7
    1fbe:	ff 22       	and	r15, r31
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1fc0:	f8 01       	movw	r30, r16
    1fc2:	10 82       	st	Z, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    1fc4:	53 da       	rcall	.-2906   	; 0x146c <USB_Host_ProcessNextHostState>
    1fc6:	f8 01       	movw	r30, r16
    1fc8:	f0 82       	st	Z, r15
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
    1fca:	1f 91       	pop	r17
    1fcc:	0f 91       	pop	r16
    1fce:	ff 90       	pop	r15
    1fd0:	08 95       	ret

00001fd2 <Serial_putchar>:

FILE USARTSerialStream;

int Serial_putchar(char DataByte,
                   FILE *Stream)
{
    1fd2:	98 2f       	mov	r25, r24
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
    1fd4:	80 91 c8 00 	lds	r24, 0x00C8
    1fd8:	85 ff       	sbrs	r24, 5
    1fda:	fc cf       	rjmp	.-8      	; 0x1fd4 <Serial_putchar+0x2>
				UDR1 = DataByte;
    1fdc:	90 93 ce 00 	sts	0x00CE, r25
	(void)Stream;

	Serial_SendByte(DataByte);
	return 0;
}
    1fe0:	80 e0       	ldi	r24, 0x00	; 0
    1fe2:	90 e0       	ldi	r25, 0x00	; 0
    1fe4:	08 95       	ret

00001fe6 <Serial_getchar>:
			 *  \return Boolean \c true if a character has been received, \c false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    1fe6:	80 91 c8 00 	lds	r24, 0x00C8

int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    1fea:	87 fd       	sbrc	r24, 7
    1fec:	03 c0       	rjmp	.+6      	; 0x1ff4 <Serial_getchar+0xe>
    1fee:	2e ef       	ldi	r18, 0xFE	; 254
    1ff0:	3f ef       	ldi	r19, 0xFF	; 255
    1ff2:	0b c0       	rjmp	.+22     	; 0x200a <Serial_getchar+0x24>
    1ff4:	80 91 c8 00 	lds	r24, 0x00C8
			 *  \return Next byte received from the USART, or a negative value if no byte has been received.
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
    1ff8:	87 fd       	sbrc	r24, 7
    1ffa:	03 c0       	rjmp	.+6      	; 0x2002 <Serial_getchar+0x1c>
    1ffc:	2f ef       	ldi	r18, 0xFF	; 255
    1ffe:	3f ef       	ldi	r19, 0xFF	; 255
    2000:	04 c0       	rjmp	.+8      	; 0x200a <Serial_getchar+0x24>
				  return -1;
				
				return UDR1;
    2002:	80 91 ce 00 	lds	r24, 0x00CE
    2006:	28 2f       	mov	r18, r24
    2008:	30 e0       	ldi	r19, 0x00	; 0
	  return _FDEV_EOF;

	return Serial_ReceiveByte();
}
    200a:	c9 01       	movw	r24, r18
    200c:	08 95       	ret

0000200e <__mulsi3>:
    200e:	62 9f       	mul	r22, r18
    2010:	d0 01       	movw	r26, r0
    2012:	73 9f       	mul	r23, r19
    2014:	f0 01       	movw	r30, r0
    2016:	82 9f       	mul	r24, r18
    2018:	e0 0d       	add	r30, r0
    201a:	f1 1d       	adc	r31, r1
    201c:	64 9f       	mul	r22, r20
    201e:	e0 0d       	add	r30, r0
    2020:	f1 1d       	adc	r31, r1
    2022:	92 9f       	mul	r25, r18
    2024:	f0 0d       	add	r31, r0
    2026:	83 9f       	mul	r24, r19
    2028:	f0 0d       	add	r31, r0
    202a:	74 9f       	mul	r23, r20
    202c:	f0 0d       	add	r31, r0
    202e:	65 9f       	mul	r22, r21
    2030:	f0 0d       	add	r31, r0
    2032:	99 27       	eor	r25, r25
    2034:	72 9f       	mul	r23, r18
    2036:	b0 0d       	add	r27, r0
    2038:	e1 1d       	adc	r30, r1
    203a:	f9 1f       	adc	r31, r25
    203c:	63 9f       	mul	r22, r19
    203e:	b0 0d       	add	r27, r0
    2040:	e1 1d       	adc	r30, r1
    2042:	f9 1f       	adc	r31, r25
    2044:	bd 01       	movw	r22, r26
    2046:	cf 01       	movw	r24, r30
    2048:	11 24       	eor	r1, r1
    204a:	08 95       	ret

0000204c <isgraph>:
    204c:	80 32       	cpi	r24, 0x20	; 32
    204e:	09 f0       	breq	.+2      	; 0x2052 <isprint+0x2>

00002050 <isprint>:
    2050:	91 11       	cpse	r25, r1
    2052:	80 c2       	rjmp	.+1280   	; 0x2554 <__ctype_isfalse>
    2054:	80 52       	subi	r24, 0x20	; 32
    2056:	8f 55       	subi	r24, 0x5F	; 95
    2058:	e0 f7       	brcc	.-8      	; 0x2052 <isprint+0x2>
    205a:	08 95       	ret

0000205c <fputc>:
    205c:	0f 93       	push	r16
    205e:	1f 93       	push	r17
    2060:	cf 93       	push	r28
    2062:	df 93       	push	r29
    2064:	8c 01       	movw	r16, r24
    2066:	eb 01       	movw	r28, r22
    2068:	8b 81       	ldd	r24, Y+3	; 0x03
    206a:	81 ff       	sbrs	r24, 1
    206c:	1b c0       	rjmp	.+54     	; 0x20a4 <fputc+0x48>
    206e:	82 ff       	sbrs	r24, 2
    2070:	0d c0       	rjmp	.+26     	; 0x208c <fputc+0x30>
    2072:	2e 81       	ldd	r18, Y+6	; 0x06
    2074:	3f 81       	ldd	r19, Y+7	; 0x07
    2076:	8c 81       	ldd	r24, Y+4	; 0x04
    2078:	9d 81       	ldd	r25, Y+5	; 0x05
    207a:	28 17       	cp	r18, r24
    207c:	39 07       	cpc	r19, r25
    207e:	64 f4       	brge	.+24     	; 0x2098 <fputc+0x3c>
    2080:	e8 81       	ld	r30, Y
    2082:	f9 81       	ldd	r31, Y+1	; 0x01
    2084:	01 93       	st	Z+, r16
    2086:	f9 83       	std	Y+1, r31	; 0x01
    2088:	e8 83       	st	Y, r30
    208a:	06 c0       	rjmp	.+12     	; 0x2098 <fputc+0x3c>
    208c:	e8 85       	ldd	r30, Y+8	; 0x08
    208e:	f9 85       	ldd	r31, Y+9	; 0x09
    2090:	80 2f       	mov	r24, r16
    2092:	09 95       	icall
    2094:	89 2b       	or	r24, r25
    2096:	31 f4       	brne	.+12     	; 0x20a4 <fputc+0x48>
    2098:	8e 81       	ldd	r24, Y+6	; 0x06
    209a:	9f 81       	ldd	r25, Y+7	; 0x07
    209c:	01 96       	adiw	r24, 0x01	; 1
    209e:	9f 83       	std	Y+7, r25	; 0x07
    20a0:	8e 83       	std	Y+6, r24	; 0x06
    20a2:	02 c0       	rjmp	.+4      	; 0x20a8 <fputc+0x4c>
    20a4:	0f ef       	ldi	r16, 0xFF	; 255
    20a6:	1f ef       	ldi	r17, 0xFF	; 255
    20a8:	c8 01       	movw	r24, r16
    20aa:	df 91       	pop	r29
    20ac:	cf 91       	pop	r28
    20ae:	1f 91       	pop	r17
    20b0:	0f 91       	pop	r16
    20b2:	08 95       	ret

000020b4 <printf_P>:
    20b4:	df 93       	push	r29
    20b6:	cf 93       	push	r28
    20b8:	cd b7       	in	r28, 0x3d	; 61
    20ba:	de b7       	in	r29, 0x3e	; 62
    20bc:	fe 01       	movw	r30, r28
    20be:	35 96       	adiw	r30, 0x05	; 5
    20c0:	61 91       	ld	r22, Z+
    20c2:	71 91       	ld	r23, Z+
    20c4:	a0 91 45 01 	lds	r26, 0x0145
    20c8:	b0 91 46 01 	lds	r27, 0x0146
    20cc:	13 96       	adiw	r26, 0x03	; 3
    20ce:	8c 91       	ld	r24, X
    20d0:	13 97       	sbiw	r26, 0x03	; 3
    20d2:	88 60       	ori	r24, 0x08	; 8
    20d4:	13 96       	adiw	r26, 0x03	; 3
    20d6:	8c 93       	st	X, r24
    20d8:	80 91 45 01 	lds	r24, 0x0145
    20dc:	90 91 46 01 	lds	r25, 0x0146
    20e0:	af 01       	movw	r20, r30
    20e2:	3f d0       	rcall	.+126    	; 0x2162 <vfprintf>
    20e4:	e0 91 45 01 	lds	r30, 0x0145
    20e8:	f0 91 46 01 	lds	r31, 0x0146
    20ec:	23 81       	ldd	r18, Z+3	; 0x03
    20ee:	27 7f       	andi	r18, 0xF7	; 247
    20f0:	23 83       	std	Z+3, r18	; 0x03
    20f2:	cf 91       	pop	r28
    20f4:	df 91       	pop	r29
    20f6:	08 95       	ret

000020f8 <puts_P>:
    20f8:	0f 93       	push	r16
    20fa:	1f 93       	push	r17
    20fc:	cf 93       	push	r28
    20fe:	df 93       	push	r29
    2100:	ec 01       	movw	r28, r24
    2102:	e0 91 45 01 	lds	r30, 0x0145
    2106:	f0 91 46 01 	lds	r31, 0x0146
    210a:	83 81       	ldd	r24, Z+3	; 0x03
    210c:	81 ff       	sbrs	r24, 1
    210e:	21 c0       	rjmp	.+66     	; 0x2152 <__stack+0x53>
    2110:	00 e0       	ldi	r16, 0x00	; 0
    2112:	10 e0       	ldi	r17, 0x00	; 0
    2114:	0e c0       	rjmp	.+28     	; 0x2132 <__stack+0x33>
    2116:	e0 91 45 01 	lds	r30, 0x0145
    211a:	f0 91 46 01 	lds	r31, 0x0146
    211e:	20 85       	ldd	r18, Z+8	; 0x08
    2120:	31 85       	ldd	r19, Z+9	; 0x09
    2122:	bf 01       	movw	r22, r30
    2124:	f9 01       	movw	r30, r18
    2126:	09 95       	icall
    2128:	89 2b       	or	r24, r25
    212a:	11 f0       	breq	.+4      	; 0x2130 <__stack+0x31>
    212c:	0f ef       	ldi	r16, 0xFF	; 255
    212e:	1f ef       	ldi	r17, 0xFF	; 255
    2130:	21 96       	adiw	r28, 0x01	; 1
    2132:	fe 01       	movw	r30, r28
    2134:	84 91       	lpm	r24, Z+
    2136:	88 23       	and	r24, r24
    2138:	71 f7       	brne	.-36     	; 0x2116 <__stack+0x17>
    213a:	e0 91 45 01 	lds	r30, 0x0145
    213e:	f0 91 46 01 	lds	r31, 0x0146
    2142:	20 85       	ldd	r18, Z+8	; 0x08
    2144:	31 85       	ldd	r19, Z+9	; 0x09
    2146:	8a e0       	ldi	r24, 0x0A	; 10
    2148:	bf 01       	movw	r22, r30
    214a:	f9 01       	movw	r30, r18
    214c:	09 95       	icall
    214e:	89 2b       	or	r24, r25
    2150:	11 f0       	breq	.+4      	; 0x2156 <__stack+0x57>
    2152:	0f ef       	ldi	r16, 0xFF	; 255
    2154:	1f ef       	ldi	r17, 0xFF	; 255
    2156:	c8 01       	movw	r24, r16
    2158:	df 91       	pop	r29
    215a:	cf 91       	pop	r28
    215c:	1f 91       	pop	r17
    215e:	0f 91       	pop	r16
    2160:	08 95       	ret

00002162 <vfprintf>:
    2162:	2f 92       	push	r2
    2164:	3f 92       	push	r3
    2166:	4f 92       	push	r4
    2168:	5f 92       	push	r5
    216a:	6f 92       	push	r6
    216c:	7f 92       	push	r7
    216e:	8f 92       	push	r8
    2170:	9f 92       	push	r9
    2172:	af 92       	push	r10
    2174:	bf 92       	push	r11
    2176:	cf 92       	push	r12
    2178:	df 92       	push	r13
    217a:	ef 92       	push	r14
    217c:	ff 92       	push	r15
    217e:	0f 93       	push	r16
    2180:	1f 93       	push	r17
    2182:	df 93       	push	r29
    2184:	cf 93       	push	r28
    2186:	cd b7       	in	r28, 0x3d	; 61
    2188:	de b7       	in	r29, 0x3e	; 62
    218a:	2b 97       	sbiw	r28, 0x0b	; 11
    218c:	0f b6       	in	r0, 0x3f	; 63
    218e:	f8 94       	cli
    2190:	de bf       	out	0x3e, r29	; 62
    2192:	0f be       	out	0x3f, r0	; 63
    2194:	cd bf       	out	0x3d, r28	; 61
    2196:	3c 01       	movw	r6, r24
    2198:	2b 01       	movw	r4, r22
    219a:	5a 01       	movw	r10, r20
    219c:	fc 01       	movw	r30, r24
    219e:	17 82       	std	Z+7, r1	; 0x07
    21a0:	16 82       	std	Z+6, r1	; 0x06
    21a2:	83 81       	ldd	r24, Z+3	; 0x03
    21a4:	81 fd       	sbrc	r24, 1
    21a6:	03 c0       	rjmp	.+6      	; 0x21ae <vfprintf+0x4c>
    21a8:	6f ef       	ldi	r22, 0xFF	; 255
    21aa:	7f ef       	ldi	r23, 0xFF	; 255
    21ac:	b9 c1       	rjmp	.+882    	; 0x2520 <vfprintf+0x3be>
    21ae:	9a e0       	ldi	r25, 0x0A	; 10
    21b0:	89 2e       	mov	r8, r25
    21b2:	1e 01       	movw	r2, r28
    21b4:	08 94       	sec
    21b6:	21 1c       	adc	r2, r1
    21b8:	31 1c       	adc	r3, r1
    21ba:	f3 01       	movw	r30, r6
    21bc:	23 81       	ldd	r18, Z+3	; 0x03
    21be:	f2 01       	movw	r30, r4
    21c0:	23 fd       	sbrc	r18, 3
    21c2:	85 91       	lpm	r24, Z+
    21c4:	23 ff       	sbrs	r18, 3
    21c6:	81 91       	ld	r24, Z+
    21c8:	2f 01       	movw	r4, r30
    21ca:	88 23       	and	r24, r24
    21cc:	09 f4       	brne	.+2      	; 0x21d0 <vfprintf+0x6e>
    21ce:	a5 c1       	rjmp	.+842    	; 0x251a <vfprintf+0x3b8>
    21d0:	85 32       	cpi	r24, 0x25	; 37
    21d2:	39 f4       	brne	.+14     	; 0x21e2 <vfprintf+0x80>
    21d4:	23 fd       	sbrc	r18, 3
    21d6:	85 91       	lpm	r24, Z+
    21d8:	23 ff       	sbrs	r18, 3
    21da:	81 91       	ld	r24, Z+
    21dc:	2f 01       	movw	r4, r30
    21de:	85 32       	cpi	r24, 0x25	; 37
    21e0:	21 f4       	brne	.+8      	; 0x21ea <vfprintf+0x88>
    21e2:	90 e0       	ldi	r25, 0x00	; 0
    21e4:	b3 01       	movw	r22, r6
    21e6:	3a df       	rcall	.-396    	; 0x205c <fputc>
    21e8:	e8 cf       	rjmp	.-48     	; 0x21ba <vfprintf+0x58>
    21ea:	98 2f       	mov	r25, r24
    21ec:	ff 24       	eor	r15, r15
    21ee:	ee 24       	eor	r14, r14
    21f0:	99 24       	eor	r9, r9
    21f2:	ff e1       	ldi	r31, 0x1F	; 31
    21f4:	ff 15       	cp	r31, r15
    21f6:	d0 f0       	brcs	.+52     	; 0x222c <vfprintf+0xca>
    21f8:	9b 32       	cpi	r25, 0x2B	; 43
    21fa:	69 f0       	breq	.+26     	; 0x2216 <vfprintf+0xb4>
    21fc:	9c 32       	cpi	r25, 0x2C	; 44
    21fe:	28 f4       	brcc	.+10     	; 0x220a <vfprintf+0xa8>
    2200:	90 32       	cpi	r25, 0x20	; 32
    2202:	59 f0       	breq	.+22     	; 0x221a <vfprintf+0xb8>
    2204:	93 32       	cpi	r25, 0x23	; 35
    2206:	91 f4       	brne	.+36     	; 0x222c <vfprintf+0xca>
    2208:	0e c0       	rjmp	.+28     	; 0x2226 <vfprintf+0xc4>
    220a:	9d 32       	cpi	r25, 0x2D	; 45
    220c:	49 f0       	breq	.+18     	; 0x2220 <vfprintf+0xbe>
    220e:	90 33       	cpi	r25, 0x30	; 48
    2210:	69 f4       	brne	.+26     	; 0x222c <vfprintf+0xca>
    2212:	41 e0       	ldi	r20, 0x01	; 1
    2214:	24 c0       	rjmp	.+72     	; 0x225e <vfprintf+0xfc>
    2216:	52 e0       	ldi	r21, 0x02	; 2
    2218:	f5 2a       	or	r15, r21
    221a:	84 e0       	ldi	r24, 0x04	; 4
    221c:	f8 2a       	or	r15, r24
    221e:	28 c0       	rjmp	.+80     	; 0x2270 <vfprintf+0x10e>
    2220:	98 e0       	ldi	r25, 0x08	; 8
    2222:	f9 2a       	or	r15, r25
    2224:	25 c0       	rjmp	.+74     	; 0x2270 <vfprintf+0x10e>
    2226:	e0 e1       	ldi	r30, 0x10	; 16
    2228:	fe 2a       	or	r15, r30
    222a:	22 c0       	rjmp	.+68     	; 0x2270 <vfprintf+0x10e>
    222c:	f7 fc       	sbrc	r15, 7
    222e:	29 c0       	rjmp	.+82     	; 0x2282 <vfprintf+0x120>
    2230:	89 2f       	mov	r24, r25
    2232:	80 53       	subi	r24, 0x30	; 48
    2234:	8a 30       	cpi	r24, 0x0A	; 10
    2236:	70 f4       	brcc	.+28     	; 0x2254 <vfprintf+0xf2>
    2238:	f6 fe       	sbrs	r15, 6
    223a:	05 c0       	rjmp	.+10     	; 0x2246 <vfprintf+0xe4>
    223c:	98 9c       	mul	r9, r8
    223e:	90 2c       	mov	r9, r0
    2240:	11 24       	eor	r1, r1
    2242:	98 0e       	add	r9, r24
    2244:	15 c0       	rjmp	.+42     	; 0x2270 <vfprintf+0x10e>
    2246:	e8 9c       	mul	r14, r8
    2248:	e0 2c       	mov	r14, r0
    224a:	11 24       	eor	r1, r1
    224c:	e8 0e       	add	r14, r24
    224e:	f0 e2       	ldi	r31, 0x20	; 32
    2250:	ff 2a       	or	r15, r31
    2252:	0e c0       	rjmp	.+28     	; 0x2270 <vfprintf+0x10e>
    2254:	9e 32       	cpi	r25, 0x2E	; 46
    2256:	29 f4       	brne	.+10     	; 0x2262 <vfprintf+0x100>
    2258:	f6 fc       	sbrc	r15, 6
    225a:	5f c1       	rjmp	.+702    	; 0x251a <vfprintf+0x3b8>
    225c:	40 e4       	ldi	r20, 0x40	; 64
    225e:	f4 2a       	or	r15, r20
    2260:	07 c0       	rjmp	.+14     	; 0x2270 <vfprintf+0x10e>
    2262:	9c 36       	cpi	r25, 0x6C	; 108
    2264:	19 f4       	brne	.+6      	; 0x226c <vfprintf+0x10a>
    2266:	50 e8       	ldi	r21, 0x80	; 128
    2268:	f5 2a       	or	r15, r21
    226a:	02 c0       	rjmp	.+4      	; 0x2270 <vfprintf+0x10e>
    226c:	98 36       	cpi	r25, 0x68	; 104
    226e:	49 f4       	brne	.+18     	; 0x2282 <vfprintf+0x120>
    2270:	f2 01       	movw	r30, r4
    2272:	23 fd       	sbrc	r18, 3
    2274:	95 91       	lpm	r25, Z+
    2276:	23 ff       	sbrs	r18, 3
    2278:	91 91       	ld	r25, Z+
    227a:	2f 01       	movw	r4, r30
    227c:	99 23       	and	r25, r25
    227e:	09 f0       	breq	.+2      	; 0x2282 <vfprintf+0x120>
    2280:	b8 cf       	rjmp	.-144    	; 0x21f2 <vfprintf+0x90>
    2282:	89 2f       	mov	r24, r25
    2284:	85 54       	subi	r24, 0x45	; 69
    2286:	83 30       	cpi	r24, 0x03	; 3
    2288:	18 f0       	brcs	.+6      	; 0x2290 <vfprintf+0x12e>
    228a:	80 52       	subi	r24, 0x20	; 32
    228c:	83 30       	cpi	r24, 0x03	; 3
    228e:	38 f4       	brcc	.+14     	; 0x229e <vfprintf+0x13c>
    2290:	44 e0       	ldi	r20, 0x04	; 4
    2292:	50 e0       	ldi	r21, 0x00	; 0
    2294:	a4 0e       	add	r10, r20
    2296:	b5 1e       	adc	r11, r21
    2298:	5f e3       	ldi	r21, 0x3F	; 63
    229a:	59 83       	std	Y+1, r21	; 0x01
    229c:	0f c0       	rjmp	.+30     	; 0x22bc <vfprintf+0x15a>
    229e:	93 36       	cpi	r25, 0x63	; 99
    22a0:	31 f0       	breq	.+12     	; 0x22ae <vfprintf+0x14c>
    22a2:	93 37       	cpi	r25, 0x73	; 115
    22a4:	79 f0       	breq	.+30     	; 0x22c4 <vfprintf+0x162>
    22a6:	93 35       	cpi	r25, 0x53	; 83
    22a8:	09 f0       	breq	.+2      	; 0x22ac <vfprintf+0x14a>
    22aa:	52 c0       	rjmp	.+164    	; 0x2350 <vfprintf+0x1ee>
    22ac:	1f c0       	rjmp	.+62     	; 0x22ec <vfprintf+0x18a>
    22ae:	f5 01       	movw	r30, r10
    22b0:	80 81       	ld	r24, Z
    22b2:	89 83       	std	Y+1, r24	; 0x01
    22b4:	42 e0       	ldi	r20, 0x02	; 2
    22b6:	50 e0       	ldi	r21, 0x00	; 0
    22b8:	a4 0e       	add	r10, r20
    22ba:	b5 1e       	adc	r11, r21
    22bc:	61 01       	movw	r12, r2
    22be:	01 e0       	ldi	r16, 0x01	; 1
    22c0:	10 e0       	ldi	r17, 0x00	; 0
    22c2:	11 c0       	rjmp	.+34     	; 0x22e6 <vfprintf+0x184>
    22c4:	f5 01       	movw	r30, r10
    22c6:	c0 80       	ld	r12, Z
    22c8:	d1 80       	ldd	r13, Z+1	; 0x01
    22ca:	f6 fc       	sbrc	r15, 6
    22cc:	03 c0       	rjmp	.+6      	; 0x22d4 <vfprintf+0x172>
    22ce:	6f ef       	ldi	r22, 0xFF	; 255
    22d0:	7f ef       	ldi	r23, 0xFF	; 255
    22d2:	02 c0       	rjmp	.+4      	; 0x22d8 <vfprintf+0x176>
    22d4:	69 2d       	mov	r22, r9
    22d6:	70 e0       	ldi	r23, 0x00	; 0
    22d8:	42 e0       	ldi	r20, 0x02	; 2
    22da:	50 e0       	ldi	r21, 0x00	; 0
    22dc:	a4 0e       	add	r10, r20
    22de:	b5 1e       	adc	r11, r21
    22e0:	c6 01       	movw	r24, r12
    22e2:	46 d1       	rcall	.+652    	; 0x2570 <strnlen>
    22e4:	8c 01       	movw	r16, r24
    22e6:	5f e7       	ldi	r21, 0x7F	; 127
    22e8:	f5 22       	and	r15, r21
    22ea:	13 c0       	rjmp	.+38     	; 0x2312 <vfprintf+0x1b0>
    22ec:	f5 01       	movw	r30, r10
    22ee:	c0 80       	ld	r12, Z
    22f0:	d1 80       	ldd	r13, Z+1	; 0x01
    22f2:	f6 fc       	sbrc	r15, 6
    22f4:	03 c0       	rjmp	.+6      	; 0x22fc <vfprintf+0x19a>
    22f6:	6f ef       	ldi	r22, 0xFF	; 255
    22f8:	7f ef       	ldi	r23, 0xFF	; 255
    22fa:	02 c0       	rjmp	.+4      	; 0x2300 <vfprintf+0x19e>
    22fc:	69 2d       	mov	r22, r9
    22fe:	70 e0       	ldi	r23, 0x00	; 0
    2300:	42 e0       	ldi	r20, 0x02	; 2
    2302:	50 e0       	ldi	r21, 0x00	; 0
    2304:	a4 0e       	add	r10, r20
    2306:	b5 1e       	adc	r11, r21
    2308:	c6 01       	movw	r24, r12
    230a:	27 d1       	rcall	.+590    	; 0x255a <strnlen_P>
    230c:	8c 01       	movw	r16, r24
    230e:	50 e8       	ldi	r21, 0x80	; 128
    2310:	f5 2a       	or	r15, r21
    2312:	f3 fe       	sbrs	r15, 3
    2314:	06 c0       	rjmp	.+12     	; 0x2322 <vfprintf+0x1c0>
    2316:	18 c0       	rjmp	.+48     	; 0x2348 <vfprintf+0x1e6>
    2318:	80 e2       	ldi	r24, 0x20	; 32
    231a:	90 e0       	ldi	r25, 0x00	; 0
    231c:	b3 01       	movw	r22, r6
    231e:	9e de       	rcall	.-708    	; 0x205c <fputc>
    2320:	ea 94       	dec	r14
    2322:	8e 2d       	mov	r24, r14
    2324:	90 e0       	ldi	r25, 0x00	; 0
    2326:	08 17       	cp	r16, r24
    2328:	19 07       	cpc	r17, r25
    232a:	b0 f3       	brcs	.-20     	; 0x2318 <vfprintf+0x1b6>
    232c:	0d c0       	rjmp	.+26     	; 0x2348 <vfprintf+0x1e6>
    232e:	f6 01       	movw	r30, r12
    2330:	f7 fc       	sbrc	r15, 7
    2332:	85 91       	lpm	r24, Z+
    2334:	f7 fe       	sbrs	r15, 7
    2336:	81 91       	ld	r24, Z+
    2338:	6f 01       	movw	r12, r30
    233a:	90 e0       	ldi	r25, 0x00	; 0
    233c:	b3 01       	movw	r22, r6
    233e:	8e de       	rcall	.-740    	; 0x205c <fputc>
    2340:	e1 10       	cpse	r14, r1
    2342:	ea 94       	dec	r14
    2344:	01 50       	subi	r16, 0x01	; 1
    2346:	10 40       	sbci	r17, 0x00	; 0
    2348:	01 15       	cp	r16, r1
    234a:	11 05       	cpc	r17, r1
    234c:	81 f7       	brne	.-32     	; 0x232e <vfprintf+0x1cc>
    234e:	e2 c0       	rjmp	.+452    	; 0x2514 <vfprintf+0x3b2>
    2350:	94 36       	cpi	r25, 0x64	; 100
    2352:	11 f0       	breq	.+4      	; 0x2358 <vfprintf+0x1f6>
    2354:	99 36       	cpi	r25, 0x69	; 105
    2356:	61 f5       	brne	.+88     	; 0x23b0 <vfprintf+0x24e>
    2358:	f7 fe       	sbrs	r15, 7
    235a:	08 c0       	rjmp	.+16     	; 0x236c <vfprintf+0x20a>
    235c:	f5 01       	movw	r30, r10
    235e:	20 81       	ld	r18, Z
    2360:	31 81       	ldd	r19, Z+1	; 0x01
    2362:	42 81       	ldd	r20, Z+2	; 0x02
    2364:	53 81       	ldd	r21, Z+3	; 0x03
    2366:	84 e0       	ldi	r24, 0x04	; 4
    2368:	90 e0       	ldi	r25, 0x00	; 0
    236a:	0a c0       	rjmp	.+20     	; 0x2380 <vfprintf+0x21e>
    236c:	f5 01       	movw	r30, r10
    236e:	80 81       	ld	r24, Z
    2370:	91 81       	ldd	r25, Z+1	; 0x01
    2372:	9c 01       	movw	r18, r24
    2374:	44 27       	eor	r20, r20
    2376:	37 fd       	sbrc	r19, 7
    2378:	40 95       	com	r20
    237a:	54 2f       	mov	r21, r20
    237c:	82 e0       	ldi	r24, 0x02	; 2
    237e:	90 e0       	ldi	r25, 0x00	; 0
    2380:	a8 0e       	add	r10, r24
    2382:	b9 1e       	adc	r11, r25
    2384:	9f e6       	ldi	r25, 0x6F	; 111
    2386:	f9 22       	and	r15, r25
    2388:	57 ff       	sbrs	r21, 7
    238a:	09 c0       	rjmp	.+18     	; 0x239e <vfprintf+0x23c>
    238c:	50 95       	com	r21
    238e:	40 95       	com	r20
    2390:	30 95       	com	r19
    2392:	21 95       	neg	r18
    2394:	3f 4f       	sbci	r19, 0xFF	; 255
    2396:	4f 4f       	sbci	r20, 0xFF	; 255
    2398:	5f 4f       	sbci	r21, 0xFF	; 255
    239a:	e0 e8       	ldi	r30, 0x80	; 128
    239c:	fe 2a       	or	r15, r30
    239e:	ca 01       	movw	r24, r20
    23a0:	b9 01       	movw	r22, r18
    23a2:	a1 01       	movw	r20, r2
    23a4:	2a e0       	ldi	r18, 0x0A	; 10
    23a6:	30 e0       	ldi	r19, 0x00	; 0
    23a8:	ee d0       	rcall	.+476    	; 0x2586 <__ultoa_invert>
    23aa:	d8 2e       	mov	r13, r24
    23ac:	d2 18       	sub	r13, r2
    23ae:	3f c0       	rjmp	.+126    	; 0x242e <vfprintf+0x2cc>
    23b0:	95 37       	cpi	r25, 0x75	; 117
    23b2:	29 f4       	brne	.+10     	; 0x23be <vfprintf+0x25c>
    23b4:	1f 2d       	mov	r17, r15
    23b6:	1f 7e       	andi	r17, 0xEF	; 239
    23b8:	2a e0       	ldi	r18, 0x0A	; 10
    23ba:	30 e0       	ldi	r19, 0x00	; 0
    23bc:	1d c0       	rjmp	.+58     	; 0x23f8 <vfprintf+0x296>
    23be:	1f 2d       	mov	r17, r15
    23c0:	19 7f       	andi	r17, 0xF9	; 249
    23c2:	9f 36       	cpi	r25, 0x6F	; 111
    23c4:	61 f0       	breq	.+24     	; 0x23de <vfprintf+0x27c>
    23c6:	90 37       	cpi	r25, 0x70	; 112
    23c8:	20 f4       	brcc	.+8      	; 0x23d2 <vfprintf+0x270>
    23ca:	98 35       	cpi	r25, 0x58	; 88
    23cc:	09 f0       	breq	.+2      	; 0x23d0 <vfprintf+0x26e>
    23ce:	a5 c0       	rjmp	.+330    	; 0x251a <vfprintf+0x3b8>
    23d0:	0f c0       	rjmp	.+30     	; 0x23f0 <vfprintf+0x28e>
    23d2:	90 37       	cpi	r25, 0x70	; 112
    23d4:	39 f0       	breq	.+14     	; 0x23e4 <vfprintf+0x282>
    23d6:	98 37       	cpi	r25, 0x78	; 120
    23d8:	09 f0       	breq	.+2      	; 0x23dc <vfprintf+0x27a>
    23da:	9f c0       	rjmp	.+318    	; 0x251a <vfprintf+0x3b8>
    23dc:	04 c0       	rjmp	.+8      	; 0x23e6 <vfprintf+0x284>
    23de:	28 e0       	ldi	r18, 0x08	; 8
    23e0:	30 e0       	ldi	r19, 0x00	; 0
    23e2:	0a c0       	rjmp	.+20     	; 0x23f8 <vfprintf+0x296>
    23e4:	10 61       	ori	r17, 0x10	; 16
    23e6:	14 fd       	sbrc	r17, 4
    23e8:	14 60       	ori	r17, 0x04	; 4
    23ea:	20 e1       	ldi	r18, 0x10	; 16
    23ec:	30 e0       	ldi	r19, 0x00	; 0
    23ee:	04 c0       	rjmp	.+8      	; 0x23f8 <vfprintf+0x296>
    23f0:	14 fd       	sbrc	r17, 4
    23f2:	16 60       	ori	r17, 0x06	; 6
    23f4:	20 e1       	ldi	r18, 0x10	; 16
    23f6:	32 e0       	ldi	r19, 0x02	; 2
    23f8:	17 ff       	sbrs	r17, 7
    23fa:	08 c0       	rjmp	.+16     	; 0x240c <vfprintf+0x2aa>
    23fc:	f5 01       	movw	r30, r10
    23fe:	60 81       	ld	r22, Z
    2400:	71 81       	ldd	r23, Z+1	; 0x01
    2402:	82 81       	ldd	r24, Z+2	; 0x02
    2404:	93 81       	ldd	r25, Z+3	; 0x03
    2406:	44 e0       	ldi	r20, 0x04	; 4
    2408:	50 e0       	ldi	r21, 0x00	; 0
    240a:	08 c0       	rjmp	.+16     	; 0x241c <vfprintf+0x2ba>
    240c:	f5 01       	movw	r30, r10
    240e:	80 81       	ld	r24, Z
    2410:	91 81       	ldd	r25, Z+1	; 0x01
    2412:	bc 01       	movw	r22, r24
    2414:	80 e0       	ldi	r24, 0x00	; 0
    2416:	90 e0       	ldi	r25, 0x00	; 0
    2418:	42 e0       	ldi	r20, 0x02	; 2
    241a:	50 e0       	ldi	r21, 0x00	; 0
    241c:	a4 0e       	add	r10, r20
    241e:	b5 1e       	adc	r11, r21
    2420:	a1 01       	movw	r20, r2
    2422:	b1 d0       	rcall	.+354    	; 0x2586 <__ultoa_invert>
    2424:	d8 2e       	mov	r13, r24
    2426:	d2 18       	sub	r13, r2
    2428:	8f e7       	ldi	r24, 0x7F	; 127
    242a:	f8 2e       	mov	r15, r24
    242c:	f1 22       	and	r15, r17
    242e:	f6 fe       	sbrs	r15, 6
    2430:	0b c0       	rjmp	.+22     	; 0x2448 <vfprintf+0x2e6>
    2432:	5e ef       	ldi	r21, 0xFE	; 254
    2434:	f5 22       	and	r15, r21
    2436:	d9 14       	cp	r13, r9
    2438:	38 f4       	brcc	.+14     	; 0x2448 <vfprintf+0x2e6>
    243a:	f4 fe       	sbrs	r15, 4
    243c:	07 c0       	rjmp	.+14     	; 0x244c <vfprintf+0x2ea>
    243e:	f2 fc       	sbrc	r15, 2
    2440:	05 c0       	rjmp	.+10     	; 0x244c <vfprintf+0x2ea>
    2442:	8f ee       	ldi	r24, 0xEF	; 239
    2444:	f8 22       	and	r15, r24
    2446:	02 c0       	rjmp	.+4      	; 0x244c <vfprintf+0x2ea>
    2448:	1d 2d       	mov	r17, r13
    244a:	01 c0       	rjmp	.+2      	; 0x244e <vfprintf+0x2ec>
    244c:	19 2d       	mov	r17, r9
    244e:	f4 fe       	sbrs	r15, 4
    2450:	0d c0       	rjmp	.+26     	; 0x246c <vfprintf+0x30a>
    2452:	fe 01       	movw	r30, r28
    2454:	ed 0d       	add	r30, r13
    2456:	f1 1d       	adc	r31, r1
    2458:	80 81       	ld	r24, Z
    245a:	80 33       	cpi	r24, 0x30	; 48
    245c:	19 f4       	brne	.+6      	; 0x2464 <vfprintf+0x302>
    245e:	99 ee       	ldi	r25, 0xE9	; 233
    2460:	f9 22       	and	r15, r25
    2462:	08 c0       	rjmp	.+16     	; 0x2474 <vfprintf+0x312>
    2464:	1f 5f       	subi	r17, 0xFF	; 255
    2466:	f2 fe       	sbrs	r15, 2
    2468:	05 c0       	rjmp	.+10     	; 0x2474 <vfprintf+0x312>
    246a:	03 c0       	rjmp	.+6      	; 0x2472 <vfprintf+0x310>
    246c:	8f 2d       	mov	r24, r15
    246e:	86 78       	andi	r24, 0x86	; 134
    2470:	09 f0       	breq	.+2      	; 0x2474 <vfprintf+0x312>
    2472:	1f 5f       	subi	r17, 0xFF	; 255
    2474:	0f 2d       	mov	r16, r15
    2476:	f3 fc       	sbrc	r15, 3
    2478:	13 c0       	rjmp	.+38     	; 0x24a0 <vfprintf+0x33e>
    247a:	f0 fe       	sbrs	r15, 0
    247c:	0e c0       	rjmp	.+28     	; 0x249a <vfprintf+0x338>
    247e:	1e 15       	cp	r17, r14
    2480:	10 f0       	brcs	.+4      	; 0x2486 <vfprintf+0x324>
    2482:	9d 2c       	mov	r9, r13
    2484:	0a c0       	rjmp	.+20     	; 0x249a <vfprintf+0x338>
    2486:	9d 2c       	mov	r9, r13
    2488:	9e 0c       	add	r9, r14
    248a:	91 1a       	sub	r9, r17
    248c:	1e 2d       	mov	r17, r14
    248e:	05 c0       	rjmp	.+10     	; 0x249a <vfprintf+0x338>
    2490:	80 e2       	ldi	r24, 0x20	; 32
    2492:	90 e0       	ldi	r25, 0x00	; 0
    2494:	b3 01       	movw	r22, r6
    2496:	e2 dd       	rcall	.-1084   	; 0x205c <fputc>
    2498:	1f 5f       	subi	r17, 0xFF	; 255
    249a:	1e 15       	cp	r17, r14
    249c:	c8 f3       	brcs	.-14     	; 0x2490 <vfprintf+0x32e>
    249e:	04 c0       	rjmp	.+8      	; 0x24a8 <vfprintf+0x346>
    24a0:	1e 15       	cp	r17, r14
    24a2:	10 f4       	brcc	.+4      	; 0x24a8 <vfprintf+0x346>
    24a4:	e1 1a       	sub	r14, r17
    24a6:	01 c0       	rjmp	.+2      	; 0x24aa <vfprintf+0x348>
    24a8:	ee 24       	eor	r14, r14
    24aa:	04 ff       	sbrs	r16, 4
    24ac:	0e c0       	rjmp	.+28     	; 0x24ca <vfprintf+0x368>
    24ae:	80 e3       	ldi	r24, 0x30	; 48
    24b0:	90 e0       	ldi	r25, 0x00	; 0
    24b2:	b3 01       	movw	r22, r6
    24b4:	d3 dd       	rcall	.-1114   	; 0x205c <fputc>
    24b6:	02 ff       	sbrs	r16, 2
    24b8:	1b c0       	rjmp	.+54     	; 0x24f0 <vfprintf+0x38e>
    24ba:	01 fd       	sbrc	r16, 1
    24bc:	03 c0       	rjmp	.+6      	; 0x24c4 <vfprintf+0x362>
    24be:	88 e7       	ldi	r24, 0x78	; 120
    24c0:	90 e0       	ldi	r25, 0x00	; 0
    24c2:	0e c0       	rjmp	.+28     	; 0x24e0 <vfprintf+0x37e>
    24c4:	88 e5       	ldi	r24, 0x58	; 88
    24c6:	90 e0       	ldi	r25, 0x00	; 0
    24c8:	0b c0       	rjmp	.+22     	; 0x24e0 <vfprintf+0x37e>
    24ca:	80 2f       	mov	r24, r16
    24cc:	86 78       	andi	r24, 0x86	; 134
    24ce:	81 f0       	breq	.+32     	; 0x24f0 <vfprintf+0x38e>
    24d0:	01 ff       	sbrs	r16, 1
    24d2:	02 c0       	rjmp	.+4      	; 0x24d8 <vfprintf+0x376>
    24d4:	8b e2       	ldi	r24, 0x2B	; 43
    24d6:	01 c0       	rjmp	.+2      	; 0x24da <vfprintf+0x378>
    24d8:	80 e2       	ldi	r24, 0x20	; 32
    24da:	f7 fc       	sbrc	r15, 7
    24dc:	8d e2       	ldi	r24, 0x2D	; 45
    24de:	90 e0       	ldi	r25, 0x00	; 0
    24e0:	b3 01       	movw	r22, r6
    24e2:	bc dd       	rcall	.-1160   	; 0x205c <fputc>
    24e4:	05 c0       	rjmp	.+10     	; 0x24f0 <vfprintf+0x38e>
    24e6:	80 e3       	ldi	r24, 0x30	; 48
    24e8:	90 e0       	ldi	r25, 0x00	; 0
    24ea:	b3 01       	movw	r22, r6
    24ec:	b7 dd       	rcall	.-1170   	; 0x205c <fputc>
    24ee:	9a 94       	dec	r9
    24f0:	d9 14       	cp	r13, r9
    24f2:	c8 f3       	brcs	.-14     	; 0x24e6 <vfprintf+0x384>
    24f4:	da 94       	dec	r13
    24f6:	f1 01       	movw	r30, r2
    24f8:	ed 0d       	add	r30, r13
    24fa:	f1 1d       	adc	r31, r1
    24fc:	80 81       	ld	r24, Z
    24fe:	90 e0       	ldi	r25, 0x00	; 0
    2500:	b3 01       	movw	r22, r6
    2502:	ac dd       	rcall	.-1192   	; 0x205c <fputc>
    2504:	dd 20       	and	r13, r13
    2506:	b1 f7       	brne	.-20     	; 0x24f4 <vfprintf+0x392>
    2508:	05 c0       	rjmp	.+10     	; 0x2514 <vfprintf+0x3b2>
    250a:	80 e2       	ldi	r24, 0x20	; 32
    250c:	90 e0       	ldi	r25, 0x00	; 0
    250e:	b3 01       	movw	r22, r6
    2510:	a5 dd       	rcall	.-1206   	; 0x205c <fputc>
    2512:	ea 94       	dec	r14
    2514:	ee 20       	and	r14, r14
    2516:	c9 f7       	brne	.-14     	; 0x250a <vfprintf+0x3a8>
    2518:	50 ce       	rjmp	.-864    	; 0x21ba <vfprintf+0x58>
    251a:	f3 01       	movw	r30, r6
    251c:	66 81       	ldd	r22, Z+6	; 0x06
    251e:	77 81       	ldd	r23, Z+7	; 0x07
    2520:	cb 01       	movw	r24, r22
    2522:	2b 96       	adiw	r28, 0x0b	; 11
    2524:	0f b6       	in	r0, 0x3f	; 63
    2526:	f8 94       	cli
    2528:	de bf       	out	0x3e, r29	; 62
    252a:	0f be       	out	0x3f, r0	; 63
    252c:	cd bf       	out	0x3d, r28	; 61
    252e:	cf 91       	pop	r28
    2530:	df 91       	pop	r29
    2532:	1f 91       	pop	r17
    2534:	0f 91       	pop	r16
    2536:	ff 90       	pop	r15
    2538:	ef 90       	pop	r14
    253a:	df 90       	pop	r13
    253c:	cf 90       	pop	r12
    253e:	bf 90       	pop	r11
    2540:	af 90       	pop	r10
    2542:	9f 90       	pop	r9
    2544:	8f 90       	pop	r8
    2546:	7f 90       	pop	r7
    2548:	6f 90       	pop	r6
    254a:	5f 90       	pop	r5
    254c:	4f 90       	pop	r4
    254e:	3f 90       	pop	r3
    2550:	2f 90       	pop	r2
    2552:	08 95       	ret

00002554 <__ctype_isfalse>:
    2554:	99 27       	eor	r25, r25
    2556:	88 27       	eor	r24, r24

00002558 <__ctype_istrue>:
    2558:	08 95       	ret

0000255a <strnlen_P>:
    255a:	fc 01       	movw	r30, r24
    255c:	05 90       	lpm	r0, Z+
    255e:	61 50       	subi	r22, 0x01	; 1
    2560:	70 40       	sbci	r23, 0x00	; 0
    2562:	01 10       	cpse	r0, r1
    2564:	d8 f7       	brcc	.-10     	; 0x255c <strnlen_P+0x2>
    2566:	80 95       	com	r24
    2568:	90 95       	com	r25
    256a:	8e 0f       	add	r24, r30
    256c:	9f 1f       	adc	r25, r31
    256e:	08 95       	ret

00002570 <strnlen>:
    2570:	fc 01       	movw	r30, r24
    2572:	61 50       	subi	r22, 0x01	; 1
    2574:	70 40       	sbci	r23, 0x00	; 0
    2576:	01 90       	ld	r0, Z+
    2578:	01 10       	cpse	r0, r1
    257a:	d8 f7       	brcc	.-10     	; 0x2572 <strnlen+0x2>
    257c:	80 95       	com	r24
    257e:	90 95       	com	r25
    2580:	8e 0f       	add	r24, r30
    2582:	9f 1f       	adc	r25, r31
    2584:	08 95       	ret

00002586 <__ultoa_invert>:
    2586:	fa 01       	movw	r30, r20
    2588:	aa 27       	eor	r26, r26
    258a:	28 30       	cpi	r18, 0x08	; 8
    258c:	51 f1       	breq	.+84     	; 0x25e2 <__ultoa_invert+0x5c>
    258e:	20 31       	cpi	r18, 0x10	; 16
    2590:	81 f1       	breq	.+96     	; 0x25f2 <__ultoa_invert+0x6c>
    2592:	e8 94       	clt
    2594:	6f 93       	push	r22
    2596:	6e 7f       	andi	r22, 0xFE	; 254
    2598:	6e 5f       	subi	r22, 0xFE	; 254
    259a:	7f 4f       	sbci	r23, 0xFF	; 255
    259c:	8f 4f       	sbci	r24, 0xFF	; 255
    259e:	9f 4f       	sbci	r25, 0xFF	; 255
    25a0:	af 4f       	sbci	r26, 0xFF	; 255
    25a2:	b1 e0       	ldi	r27, 0x01	; 1
    25a4:	3e d0       	rcall	.+124    	; 0x2622 <__ultoa_invert+0x9c>
    25a6:	b4 e0       	ldi	r27, 0x04	; 4
    25a8:	3c d0       	rcall	.+120    	; 0x2622 <__ultoa_invert+0x9c>
    25aa:	67 0f       	add	r22, r23
    25ac:	78 1f       	adc	r23, r24
    25ae:	89 1f       	adc	r24, r25
    25b0:	9a 1f       	adc	r25, r26
    25b2:	a1 1d       	adc	r26, r1
    25b4:	68 0f       	add	r22, r24
    25b6:	79 1f       	adc	r23, r25
    25b8:	8a 1f       	adc	r24, r26
    25ba:	91 1d       	adc	r25, r1
    25bc:	a1 1d       	adc	r26, r1
    25be:	6a 0f       	add	r22, r26
    25c0:	71 1d       	adc	r23, r1
    25c2:	81 1d       	adc	r24, r1
    25c4:	91 1d       	adc	r25, r1
    25c6:	a1 1d       	adc	r26, r1
    25c8:	20 d0       	rcall	.+64     	; 0x260a <__ultoa_invert+0x84>
    25ca:	09 f4       	brne	.+2      	; 0x25ce <__ultoa_invert+0x48>
    25cc:	68 94       	set
    25ce:	3f 91       	pop	r19
    25d0:	2a e0       	ldi	r18, 0x0A	; 10
    25d2:	26 9f       	mul	r18, r22
    25d4:	11 24       	eor	r1, r1
    25d6:	30 19       	sub	r19, r0
    25d8:	30 5d       	subi	r19, 0xD0	; 208
    25da:	31 93       	st	Z+, r19
    25dc:	de f6       	brtc	.-74     	; 0x2594 <__ultoa_invert+0xe>
    25de:	cf 01       	movw	r24, r30
    25e0:	08 95       	ret
    25e2:	46 2f       	mov	r20, r22
    25e4:	47 70       	andi	r20, 0x07	; 7
    25e6:	40 5d       	subi	r20, 0xD0	; 208
    25e8:	41 93       	st	Z+, r20
    25ea:	b3 e0       	ldi	r27, 0x03	; 3
    25ec:	0f d0       	rcall	.+30     	; 0x260c <__ultoa_invert+0x86>
    25ee:	c9 f7       	brne	.-14     	; 0x25e2 <__ultoa_invert+0x5c>
    25f0:	f6 cf       	rjmp	.-20     	; 0x25de <__ultoa_invert+0x58>
    25f2:	46 2f       	mov	r20, r22
    25f4:	4f 70       	andi	r20, 0x0F	; 15
    25f6:	40 5d       	subi	r20, 0xD0	; 208
    25f8:	4a 33       	cpi	r20, 0x3A	; 58
    25fa:	18 f0       	brcs	.+6      	; 0x2602 <__ultoa_invert+0x7c>
    25fc:	49 5d       	subi	r20, 0xD9	; 217
    25fe:	31 fd       	sbrc	r19, 1
    2600:	40 52       	subi	r20, 0x20	; 32
    2602:	41 93       	st	Z+, r20
    2604:	02 d0       	rcall	.+4      	; 0x260a <__ultoa_invert+0x84>
    2606:	a9 f7       	brne	.-22     	; 0x25f2 <__ultoa_invert+0x6c>
    2608:	ea cf       	rjmp	.-44     	; 0x25de <__ultoa_invert+0x58>
    260a:	b4 e0       	ldi	r27, 0x04	; 4
    260c:	a6 95       	lsr	r26
    260e:	97 95       	ror	r25
    2610:	87 95       	ror	r24
    2612:	77 95       	ror	r23
    2614:	67 95       	ror	r22
    2616:	ba 95       	dec	r27
    2618:	c9 f7       	brne	.-14     	; 0x260c <__ultoa_invert+0x86>
    261a:	00 97       	sbiw	r24, 0x00	; 0
    261c:	61 05       	cpc	r22, r1
    261e:	71 05       	cpc	r23, r1
    2620:	08 95       	ret
    2622:	9b 01       	movw	r18, r22
    2624:	ac 01       	movw	r20, r24
    2626:	0a 2e       	mov	r0, r26
    2628:	06 94       	lsr	r0
    262a:	57 95       	ror	r21
    262c:	47 95       	ror	r20
    262e:	37 95       	ror	r19
    2630:	27 95       	ror	r18
    2632:	ba 95       	dec	r27
    2634:	c9 f7       	brne	.-14     	; 0x2628 <__ultoa_invert+0xa2>
    2636:	62 0f       	add	r22, r18
    2638:	73 1f       	adc	r23, r19
    263a:	84 1f       	adc	r24, r20
    263c:	95 1f       	adc	r25, r21
    263e:	a0 1d       	adc	r26, r0
    2640:	08 95       	ret

00002642 <_exit>:
    2642:	f8 94       	cli

00002644 <__stop_program>:
    2644:	ff cf       	rjmp	.-2      	; 0x2644 <__stop_program>
