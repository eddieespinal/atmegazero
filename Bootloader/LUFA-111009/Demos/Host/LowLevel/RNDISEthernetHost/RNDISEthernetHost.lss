
RNDISEthernetHost.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001e  00800100  000021e6  0000227a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000021e6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000026  0080011e  0080011e  00002298  2**0
                  ALLOC
  3 .debug_aranges 00000378  00000000  00000000  00002298  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000008c9  00000000  00000000  00002610  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000564b  00000000  00000000  00002ed9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001859  00000000  00000000  00008524  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000429b  00000000  00000000  00009d7d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000530  00000000  00000000  0000e018  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00002743  00000000  00000000  0000e548  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00002593  00000000  00000000  00010c8b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000420  00000000  00000000  0001321e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
 *
 *  \return A value from the USB_Host_SendControlErrorCodes_t enum or RNDIS_COMMAND_FAILED if the device returned a
 *          logical command failure
 */
uint8_t RNDIS_SendKeepAlive(void)
{
       0:	dc c1       	rjmp	.+952    	; 0x3ba <__ctors_end>
		Pipe_DisablePipe();
	}
}

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
       2:	00 00       	nop
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
       4:	f8 c1       	rjmp	.+1008   	; 0x3f6 <__bad_interrupt>
{
	USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, AfterType);

	if (*BytesRem)
	  USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, Type);
}
       6:	00 00       	nop
	return USB_Host_SendControlRequest(NULL);
}

uint8_t USB_Host_SetInterfaceAltSetting(const uint8_t InterfaceIndex,
                                        const uint8_t AltSetting)
{
       8:	f6 c1       	rjmp	.+1004   	; 0x3f6 <__bad_interrupt>

	return Serial_ReceiveByte();
}

int Serial_getchar_Blocking(FILE *Stream)
{
       a:	00 00       	nop
       c:	f4 c1       	rjmp	.+1000   	; 0x3f6 <__bad_interrupt>
       e:	00 00       	nop
      10:	f2 c1       	rjmp	.+996    	; 0x3f6 <__bad_interrupt>
      12:	00 00       	nop
      14:	f0 c1       	rjmp	.+992    	; 0x3f6 <__bad_interrupt>
      16:	00 00       	nop
      18:	ee c1       	rjmp	.+988    	; 0x3f6 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	ec c1       	rjmp	.+984    	; 0x3f6 <__bad_interrupt>
      1e:	00 00       	nop
      20:	ea c1       	rjmp	.+980    	; 0x3f6 <__bad_interrupt>
      22:	00 00       	nop
      24:	e8 c1       	rjmp	.+976    	; 0x3f6 <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 57 0a 	jmp	0x14ae	; 0x14ae <__vector_10>
      2c:	e4 c1       	rjmp	.+968    	; 0x3f6 <__bad_interrupt>
      2e:	00 00       	nop
      30:	e2 c1       	rjmp	.+964    	; 0x3f6 <__bad_interrupt>
      32:	00 00       	nop
      34:	e0 c1       	rjmp	.+960    	; 0x3f6 <__bad_interrupt>
      36:	00 00       	nop
      38:	de c1       	rjmp	.+956    	; 0x3f6 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	dc c1       	rjmp	.+952    	; 0x3f6 <__bad_interrupt>
      3e:	00 00       	nop
      40:	da c1       	rjmp	.+948    	; 0x3f6 <__bad_interrupt>
      42:	00 00       	nop
      44:	d8 c1       	rjmp	.+944    	; 0x3f6 <__bad_interrupt>
      46:	00 00       	nop
      48:	d6 c1       	rjmp	.+940    	; 0x3f6 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	d4 c1       	rjmp	.+936    	; 0x3f6 <__bad_interrupt>
      4e:	00 00       	nop
      50:	d2 c1       	rjmp	.+932    	; 0x3f6 <__bad_interrupt>
      52:	00 00       	nop
      54:	d0 c1       	rjmp	.+928    	; 0x3f6 <__bad_interrupt>
      56:	00 00       	nop
      58:	ce c1       	rjmp	.+924    	; 0x3f6 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	cc c1       	rjmp	.+920    	; 0x3f6 <__bad_interrupt>
      5e:	00 00       	nop
      60:	ca c1       	rjmp	.+916    	; 0x3f6 <__bad_interrupt>
      62:	00 00       	nop
      64:	c8 c1       	rjmp	.+912    	; 0x3f6 <__bad_interrupt>
      66:	00 00       	nop
      68:	c6 c1       	rjmp	.+908    	; 0x3f6 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	c4 c1       	rjmp	.+904    	; 0x3f6 <__bad_interrupt>
      6e:	00 00       	nop
      70:	c2 c1       	rjmp	.+900    	; 0x3f6 <__bad_interrupt>
      72:	00 00       	nop
      74:	c0 c1       	rjmp	.+896    	; 0x3f6 <__bad_interrupt>
      76:	00 00       	nop
      78:	be c1       	rjmp	.+892    	; 0x3f6 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	bc c1       	rjmp	.+888    	; 0x3f6 <__bad_interrupt>
      7e:	00 00       	nop
      80:	ba c1       	rjmp	.+884    	; 0x3f6 <__bad_interrupt>
      82:	00 00       	nop
      84:	b8 c1       	rjmp	.+880    	; 0x3f6 <__bad_interrupt>
      86:	00 00       	nop
      88:	b6 c1       	rjmp	.+876    	; 0x3f6 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	b4 c1       	rjmp	.+872    	; 0x3f6 <__bad_interrupt>
      8e:	00 00       	nop
      90:	b2 c1       	rjmp	.+868    	; 0x3f6 <__bad_interrupt>
      92:	00 00       	nop
      94:	b0 c1       	rjmp	.+864    	; 0x3f6 <__bad_interrupt>
      96:	00 00       	nop

00000098 <__c.4621>:
      98:	1b 5b 33 31 6d 50 61 63 6b 65 74 20 74 6f 6f 20     .[31mPacket too 
      a8:	6c 61 72 67 65 2e 0d 0a 1b 5b 33 37 6d 00           large....[37m.

000000b6 <__c.4619>:
      b6:	2a 2a 2a 50 41 43 4b 45 54 20 28 53 69 7a 65 20     ***PACKET (Size 
      c6:	25 64 29 2a 2a 2a 0d 0a 00                          %d)***...

000000cf <__c.4617>:
      cf:	1b 5b 33 31 6d 50 61 63 6b 65 74 20 52 65 63 65     .[31mPacket Rece
      df:	70 74 69 6f 6e 20 45 72 72 6f 72 2e 0d 0a 20 2d     ption Error... -
      ef:	2d 20 45 72 72 6f 72 20 43 6f 64 65 3a 20 25 64     - Error Code: %d
      ff:	0d 0a 1b 5b 33 37 6d 00                             ...[37m.

00000107 <__c.4606>:
     107:	1b 5b 33 31 6d 44 65 76 20 45 6e 75 6d 20 45 72     .[31mDev Enum Er
     117:	72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     ror.. -- Error C
     127:	6f 64 65 20 25 64 0d 0a 20 2d 2d 20 53 75 62 20     ode %d.. -- Sub 
     137:	45 72 72 6f 72 20 43 6f 64 65 20 25 64 0d 0a 20     Error Code %d.. 
     147:	2d 2d 20 49 6e 20 53 74 61 74 65 20 25 64 0d 0a     -- In State %d..
     157:	1b 5b 33 37 6d 00                                   .[37m.

0000015d <__c.4598>:
     15d:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
     16d:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 
     17d:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

0000018c <__c.4585>:
     18c:	52 4e 44 49 53 20 44 65 76 69 63 65 20 45 6e 75     RNDIS Device Enu
     19c:	6d 65 72 61 74 65 64 2e 0d 0a 00                    merated....

000001a7 <__c.4583>:
     1a7:	44 65 76 69 63 65 20 56 65 6e 64 6f 72 20 49 44     Device Vendor ID
     1b7:	3a 20 30 78 25 30 38 6c 58 0d 0a 00                 : 0x%08lX...

000001c3 <__c.4581>:
     1c3:	1b 5b 33 31 6d 45 72 72 6f 72 20 47 65 74 74 69     .[31mError Getti
     1d3:	6e 67 20 56 65 6e 64 6f 72 20 49 44 2e 0d 0a 20     ng Vendor ID... 
     1e3:	2d 2d 20 45 72 72 6f 72 20 43 6f 64 65 3a 20 25     -- Error Code: %
     1f3:	64 0d 0a 1b 5b 33 37 6d 00                          d...[37m.

000001fc <__c.4578>:
     1fc:	1b 5b 33 31 6d 45 72 72 6f 72 20 53 65 74 74 69     .[31mError Setti
     20c:	6e 67 20 44 65 76 69 63 65 20 50 61 63 6b 65 74     ng Device Packet
     21c:	20 46 69 6c 74 65 72 2e 0d 0a 20 2d 2d 20 45 72      Filter... -- Er
     22c:	72 6f 72 20 43 6f 64 65 3a 20 25 64 0d 0a 1b 5b     ror Code: %d...[
     23c:	33 37 6d 00                                         37m.

00000240 <__c.4575>:
     240:	44 65 76 69 63 65 20 4d 61 78 20 54 72 61 6e 73     Device Max Trans
     250:	66 65 72 20 53 69 7a 65 3a 20 25 6c 75 20 62 79     fer Size: %lu by
     260:	74 65 73 2e 0d 0a 00                                tes....

00000267 <__c.4573>:
     267:	1b 5b 33 31 6d 45 72 72 6f 72 20 49 6e 69 74 69     .[31mError Initi
     277:	61 6c 69 7a 69 6e 67 20 44 65 76 69 63 65 2e 0d     alizing Device..
     287:	0a 20 2d 2d 20 45 72 72 6f 72 20 43 6f 64 65 3a     . -- Error Code:
     297:	20 25 64 0d 0a 1b 5b 33 37 6d 00                     %d...[37m.

000002a2 <__c.4570>:
     2a2:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
     2b2:	6f 72 20 28 53 65 74 20 43 6f 6e 66 69 67 75 72     or (Set Configur
     2c2:	61 74 69 6f 6e 29 2e 0d 0a 20 2d 2d 20 45 72 72     ation)... -- Err
     2d2:	6f 72 20 43 6f 64 65 3a 20 25 64 0d 0a 1b 5b 33     or Code: %d...[3
     2e2:	37 6d 00                                            7m.

000002e5 <__c.4568>:
     2e5:	20 2d 2d 20 45 72 72 6f 72 20 43 6f 64 65 3a 20      -- Error Code: 
     2f5:	25 64 0d 0a 1b 5b 33 37 6d 00                       %d...[37m.

000002ff <__c.4566>:
     2ff:	1b 5b 33 31 6d 49 6e 76 61 6c 69 64 20 44 65 76     .[31mInvalid Dev
     30f:	69 63 65 2e 0d 0a 00                                ice....

00000316 <__c.4564>:
     316:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
     326:	6f 72 20 28 47 65 74 20 43 6f 6e 66 69 67 75 72     or (Get Configur
     336:	61 74 69 6f 6e 29 2e 0d 0a 00                       ation)....

00000340 <__c.4561>:
     340:	47 65 74 74 69 6e 67 20 43 6f 6e 66 69 67 20 44     Getting Config D
     350:	61 74 61 2e 0d 0a 00                                ata....

00000357 <__c.4556>:
     357:	1b 5b 33 32 6d 0d 0a 44 65 76 69 63 65 20 55 6e     .[32m..Device Un
     367:	61 74 74 61 63 68 65 64 2e 0d 0a 1b 5b 33 37 6d     attached....[37m
     377:	00                                                  .

00000378 <__c.4551>:
     378:	1b 5b 33 32 6d 44 65 76 69 63 65 20 41 74 74 61     .[32mDevice Atta
     388:	63 68 65 64 2e 0d 0a 1b 5b 33 37 6d 00              ched....[37m.

00000395 <__c.4537>:
     395:	1b 5b 33 36 6d 52 4e 44 49 53 20 48 6f 73 74 20     .[36mRNDIS Host 
     3a5:	44 65 6d 6f 20 72 75 6e 6e 69 6e 67 2e 0d 0a 1b     Demo running....
     3b5:	5b 33 37 6d 00                                      [37m.

000003ba <__ctors_end>:
     3ba:	11 24       	eor	r1, r1
     3bc:	1f be       	out	0x3f, r1	; 63
     3be:	cf ef       	ldi	r28, 0xFF	; 255
     3c0:	d0 e2       	ldi	r29, 0x20	; 32
     3c2:	de bf       	out	0x3e, r29	; 62
     3c4:	cd bf       	out	0x3d, r28	; 61

000003c6 <__do_copy_data>:
     3c6:	11 e0       	ldi	r17, 0x01	; 1
     3c8:	a0 e0       	ldi	r26, 0x00	; 0
     3ca:	b1 e0       	ldi	r27, 0x01	; 1
     3cc:	e6 ee       	ldi	r30, 0xE6	; 230
     3ce:	f1 e2       	ldi	r31, 0x21	; 33
     3d0:	00 e0       	ldi	r16, 0x00	; 0
     3d2:	0b bf       	out	0x3b, r16	; 59
     3d4:	02 c0       	rjmp	.+4      	; 0x3da <__do_copy_data+0x14>
     3d6:	07 90       	elpm	r0, Z+
     3d8:	0d 92       	st	X+, r0
     3da:	ae 31       	cpi	r26, 0x1E	; 30
     3dc:	b1 07       	cpc	r27, r17
     3de:	d9 f7       	brne	.-10     	; 0x3d6 <__do_copy_data+0x10>

000003e0 <__do_clear_bss>:
     3e0:	11 e0       	ldi	r17, 0x01	; 1
     3e2:	ae e1       	ldi	r26, 0x1E	; 30
     3e4:	b1 e0       	ldi	r27, 0x01	; 1
     3e6:	01 c0       	rjmp	.+2      	; 0x3ea <.do_clear_bss_start>

000003e8 <.do_clear_bss_loop>:
     3e8:	1d 92       	st	X+, r1

000003ea <.do_clear_bss_start>:
     3ea:	a4 34       	cpi	r26, 0x44	; 68
     3ec:	b1 07       	cpc	r27, r17
     3ee:	e1 f7       	brne	.-8      	; 0x3e8 <.do_clear_bss_loop>
     3f0:	54 d2       	rcall	.+1192   	; 0x89a <main>
     3f2:	0c 94 f1 10 	jmp	0x21e2	; 0x21e2 <_exit>

000003f6 <__bad_interrupt>:
     3f6:	04 ce       	rjmp	.-1016   	; 0x0 <__vectors>

000003f8 <EVENT_USB_Host_DeviceEnumerationFailed>:
 *  enumerating an attached USB device.
 */
void EVENT_USB_Host_DeviceEnumerationFailed(const uint8_t ErrorCode,
                                            const uint8_t SubErrorCode)
{
	printf_P(PSTR(ESC_FG_RED "Dev Enum Error\r\n"
     3f8:	90 91 2f 01 	lds	r25, 0x012F
     3fc:	2d b7       	in	r18, 0x3d	; 61
     3fe:	3e b7       	in	r19, 0x3e	; 62
     400:	28 50       	subi	r18, 0x08	; 8
     402:	30 40       	sbci	r19, 0x00	; 0
     404:	0f b6       	in	r0, 0x3f	; 63
     406:	f8 94       	cli
     408:	3e bf       	out	0x3e, r19	; 62
     40a:	0f be       	out	0x3f, r0	; 63
     40c:	2d bf       	out	0x3d, r18	; 61
     40e:	ed b7       	in	r30, 0x3d	; 61
     410:	fe b7       	in	r31, 0x3e	; 62
     412:	31 96       	adiw	r30, 0x01	; 1
     414:	27 e0       	ldi	r18, 0x07	; 7
     416:	31 e0       	ldi	r19, 0x01	; 1
     418:	ad b7       	in	r26, 0x3d	; 61
     41a:	be b7       	in	r27, 0x3e	; 62
     41c:	12 96       	adiw	r26, 0x02	; 2
     41e:	3c 93       	st	X, r19
     420:	2e 93       	st	-X, r18
     422:	11 97       	sbiw	r26, 0x01	; 1
     424:	82 83       	std	Z+2, r24	; 0x02
     426:	13 82       	std	Z+3, r1	; 0x03
     428:	64 83       	std	Z+4, r22	; 0x04
     42a:	15 82       	std	Z+5, r1	; 0x05
     42c:	96 83       	std	Z+6, r25	; 0x06
     42e:	17 82       	std	Z+7, r1	; 0x07
     430:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <printf_P>
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     434:	8b b1       	in	r24, 0x0b	; 11
     436:	8f 70       	andi	r24, 0x0F	; 15
     438:	80 69       	ori	r24, 0x90	; 144
     43a:	8b b9       	out	0x0b, r24	; 11
     43c:	2d b7       	in	r18, 0x3d	; 61
     43e:	3e b7       	in	r19, 0x3e	; 62
     440:	28 5f       	subi	r18, 0xF8	; 248
     442:	3f 4f       	sbci	r19, 0xFF	; 255
     444:	0f b6       	in	r0, 0x3f	; 63
     446:	f8 94       	cli
     448:	3e bf       	out	0x3e, r19	; 62
     44a:	0f be       	out	0x3f, r0	; 63
     44c:	2d bf       	out	0x3d, r18	; 61
	                         " -- Error Code %d\r\n"
	                         " -- Sub Error Code %d\r\n"
	                         " -- In State %d\r\n" ESC_FG_WHITE), ErrorCode, SubErrorCode, USB_HostState);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
}
     44e:	08 95       	ret

00000450 <EVENT_USB_Host_DeviceUnattached>:
/** Event handler for the USB_DeviceUnattached event. This indicates that a device has been removed from the host, and
 *  stops the library USB task management process.
 */
void EVENT_USB_Host_DeviceUnattached(void)
{
	puts_P(PSTR(ESC_FG_GREEN "\r\nDevice Unattached.\r\n" ESC_FG_WHITE));
     450:	87 e5       	ldi	r24, 0x57	; 87
     452:	93 e0       	ldi	r25, 0x03	; 3
     454:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <puts_P>
     458:	8b b1       	in	r24, 0x0b	; 11
     45a:	8f 70       	andi	r24, 0x0F	; 15
     45c:	80 61       	ori	r24, 0x10	; 16
     45e:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
}
     460:	08 95       	ret

00000462 <EVENT_USB_Host_DeviceAttached>:
/** Event handler for the USB_DeviceAttached event. This indicates that a device has been attached to the host, and
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Host_DeviceAttached(void)
{
	puts_P(PSTR(ESC_FG_GREEN "Device Attached.\r\n" ESC_FG_WHITE));
     462:	88 e7       	ldi	r24, 0x78	; 120
     464:	93 e0       	ldi	r25, 0x03	; 3
     466:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <puts_P>
     46a:	8b b1       	in	r24, 0x0b	; 11
     46c:	8f 70       	andi	r24, 0x0F	; 15
     46e:	80 6a       	ori	r24, 0xA0	; 160
     470:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
}
     472:	08 95       	ret

00000474 <RNDISHost_Task>:
}

/** Task to read in data received from the attached RNDIS device and print it to the serial port.
 */
void RNDISHost_Task(void)
{
     474:	8f 92       	push	r8
     476:	9f 92       	push	r9
     478:	af 92       	push	r10
     47a:	bf 92       	push	r11
     47c:	cf 92       	push	r12
     47e:	df 92       	push	r13
     480:	ef 92       	push	r14
     482:	ff 92       	push	r15
     484:	0f 93       	push	r16
     486:	1f 93       	push	r17
     488:	df 93       	push	r29
     48a:	cf 93       	push	r28
     48c:	00 d0       	rcall	.+0      	; 0x48e <RNDISHost_Task+0x1a>
     48e:	cd b7       	in	r28, 0x3d	; 61
     490:	de b7       	in	r29, 0x3e	; 62
	Pipe_Freeze();

	printf("\r\n\r\n");

	LEDs_SetAllLEDs(LEDMASK_USB_READY);
}
     492:	8d b6       	in	r8, 0x3d	; 61
     494:	9e b6       	in	r9, 0x3e	; 62

/** Task to read in data received from the attached RNDIS device and print it to the serial port.
 */
void RNDISHost_Task(void)
{
	if (USB_HostState != HOST_STATE_Configured)
     496:	80 91 2f 01 	lds	r24, 0x012F
     49a:	8b 30       	cpi	r24, 0x0B	; 11
     49c:	09 f0       	breq	.+2      	; 0x4a0 <RNDISHost_Task+0x2c>
     49e:	a0 c0       	rjmp	.+320    	; 0x5e0 <RNDISHost_Task+0x16c>
     4a0:	8b b1       	in	r24, 0x0b	; 11
     4a2:	8f 70       	andi	r24, 0x0F	; 15
     4a4:	80 62       	ori	r24, 0x20	; 32
     4a6:	8b b9       	out	0x0b, r24	; 11
	uint8_t ErrorCode;

	LEDs_SetAllLEDs(LEDMASK_USB_BUSY);

	uint16_t PacketLength;
	if ((ErrorCode = RNDIS_GetPacketLength(&PacketLength)) != HOST_SENDCONTROL_Successful)
     4a8:	ce 01       	movw	r24, r28
     4aa:	01 96       	adiw	r24, 0x01	; 1
     4ac:	e4 d2       	rcall	.+1480   	; 0xa76 <RNDIS_GetPacketLength>
     4ae:	28 2f       	mov	r18, r24
     4b0:	88 23       	and	r24, r24
     4b2:	b1 f0       	breq	.+44     	; 0x4e0 <RNDISHost_Task+0x6c>
	{
		printf_P(PSTR(ESC_FG_RED "Packet Reception Error.\r\n"
     4b4:	00 d0       	rcall	.+0      	; 0x4b6 <RNDISHost_Task+0x42>
     4b6:	00 d0       	rcall	.+0      	; 0x4b8 <RNDISHost_Task+0x44>
     4b8:	ed b7       	in	r30, 0x3d	; 61
     4ba:	fe b7       	in	r31, 0x3e	; 62
     4bc:	31 96       	adiw	r30, 0x01	; 1
     4be:	8f ec       	ldi	r24, 0xCF	; 207
     4c0:	90 e0       	ldi	r25, 0x00	; 0
     4c2:	ad b7       	in	r26, 0x3d	; 61
     4c4:	be b7       	in	r27, 0x3e	; 62
     4c6:	12 96       	adiw	r26, 0x02	; 2
     4c8:	9c 93       	st	X, r25
     4ca:	8e 93       	st	-X, r24
     4cc:	11 97       	sbiw	r26, 0x01	; 1
     4ce:	22 83       	std	Z+2, r18	; 0x02
     4d0:	13 82       	std	Z+3, r1	; 0x03
     4d2:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <printf_P>
     4d6:	0f 90       	pop	r0
     4d8:	0f 90       	pop	r0
     4da:	0f 90       	pop	r0
     4dc:	0f 90       	pop	r0
     4de:	80 c0       	rjmp	.+256    	; 0x5e0 <RNDISHost_Task+0x16c>
		                         " -- Error Code: %d\r\n" ESC_FG_WHITE), ErrorCode);
		return;
	}

	if (!(PacketLength))
     4e0:	29 81       	ldd	r18, Y+1	; 0x01
     4e2:	3a 81       	ldd	r19, Y+2	; 0x02
     4e4:	21 15       	cp	r18, r1
     4e6:	31 05       	cpc	r19, r1
     4e8:	09 f4       	brne	.+2      	; 0x4ec <RNDISHost_Task+0x78>
     4ea:	7a c0       	rjmp	.+244    	; 0x5e0 <RNDISHost_Task+0x16c>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     4ec:	80 91 a9 00 	lds	r24, 0x00A9
     4f0:	8f 7b       	andi	r24, 0xBF	; 191
     4f2:	80 93 a9 00 	sts	0x00A9, r24
	  return;

	Pipe_Unfreeze();

	printf_P(PSTR("***PACKET (Size %d)***\r\n"), PacketLength);
     4f6:	00 d0       	rcall	.+0      	; 0x4f8 <RNDISHost_Task+0x84>
     4f8:	00 d0       	rcall	.+0      	; 0x4fa <RNDISHost_Task+0x86>
     4fa:	86 eb       	ldi	r24, 0xB6	; 182
     4fc:	90 e0       	ldi	r25, 0x00	; 0
     4fe:	ed b7       	in	r30, 0x3d	; 61
     500:	fe b7       	in	r31, 0x3e	; 62
     502:	92 83       	std	Z+2, r25	; 0x02
     504:	81 83       	std	Z+1, r24	; 0x01
     506:	34 83       	std	Z+4, r19	; 0x04
     508:	23 83       	std	Z+3, r18	; 0x03
     50a:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <printf_P>

	if (PacketLength > 1024)
     50e:	0f 90       	pop	r0
     510:	0f 90       	pop	r0
     512:	0f 90       	pop	r0
     514:	0f 90       	pop	r0
     516:	69 81       	ldd	r22, Y+1	; 0x01
     518:	7a 81       	ldd	r23, Y+2	; 0x02
     51a:	f4 e0       	ldi	r31, 0x04	; 4
     51c:	61 30       	cpi	r22, 0x01	; 1
     51e:	7f 07       	cpc	r23, r31
     520:	58 f0       	brcs	.+22     	; 0x538 <RNDISHost_Task+0xc4>
	{
		puts_P(PSTR(ESC_FG_RED "Packet too large.\r\n" ESC_FG_WHITE));
     522:	88 e9       	ldi	r24, 0x98	; 152
     524:	90 e0       	ldi	r25, 0x00	; 0
     526:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <puts_P>
		Pipe_Discard_Stream(PacketLength, NULL);
     52a:	89 81       	ldd	r24, Y+1	; 0x01
     52c:	9a 81       	ldd	r25, Y+2	; 0x02
     52e:	60 e0       	ldi	r22, 0x00	; 0
     530:	70 e0       	ldi	r23, 0x00	; 0
     532:	0e 94 46 0b 	call	0x168c	; 0x168c <Pipe_Discard_Stream>
     536:	42 c0       	rjmp	.+132    	; 0x5bc <RNDISHost_Task+0x148>
     538:	bd b6       	in	r11, 0x3d	; 61
     53a:	ae b6       	in	r10, 0x3e	; 62
	}
	else
	{
		uint8_t PacketBuffer[PacketLength];
     53c:	8d b7       	in	r24, 0x3d	; 61
     53e:	9e b7       	in	r25, 0x3e	; 62
     540:	86 1b       	sub	r24, r22
     542:	97 0b       	sbc	r25, r23
     544:	0f b6       	in	r0, 0x3f	; 63
     546:	f8 94       	cli
     548:	9e bf       	out	0x3e, r25	; 62
     54a:	0f be       	out	0x3f, r0	; 63
     54c:	8d bf       	out	0x3d, r24	; 61
     54e:	ed b6       	in	r14, 0x3d	; 61
     550:	fe b6       	in	r15, 0x3e	; 62
     552:	08 94       	sec
     554:	e1 1c       	adc	r14, r1
     556:	f1 1c       	adc	r15, r1

		Pipe_Read_Stream_LE(&PacketBuffer, PacketLength, NULL);
     558:	c7 01       	movw	r24, r14
     55a:	40 e0       	ldi	r20, 0x00	; 0
     55c:	50 e0       	ldi	r21, 0x00	; 0
     55e:	0e 94 ef 0a 	call	0x15de	; 0x15de <Pipe_Read_Stream_LE>
     562:	00 e0       	ldi	r16, 0x00	; 0
     564:	10 e0       	ldi	r17, 0x00	; 0

		for (uint16_t i = 0; i < PacketLength; i++)
		  printf("0x%02x ", PacketBuffer[i]);
     566:	80 e0       	ldi	r24, 0x00	; 0
     568:	c8 2e       	mov	r12, r24
     56a:	81 e0       	ldi	r24, 0x01	; 1
     56c:	d8 2e       	mov	r13, r24
     56e:	19 c0       	rjmp	.+50     	; 0x5a2 <RNDISHost_Task+0x12e>
     570:	00 d0       	rcall	.+0      	; 0x572 <RNDISHost_Task+0xfe>
     572:	00 d0       	rcall	.+0      	; 0x574 <RNDISHost_Task+0x100>
     574:	ed b7       	in	r30, 0x3d	; 61
     576:	fe b7       	in	r31, 0x3e	; 62
     578:	31 96       	adiw	r30, 0x01	; 1
     57a:	ad b7       	in	r26, 0x3d	; 61
     57c:	be b7       	in	r27, 0x3e	; 62
     57e:	12 96       	adiw	r26, 0x02	; 2
     580:	dc 92       	st	X, r13
     582:	ce 92       	st	-X, r12
     584:	11 97       	sbiw	r26, 0x01	; 1
     586:	d7 01       	movw	r26, r14
     588:	a0 0f       	add	r26, r16
     58a:	b1 1f       	adc	r27, r17
     58c:	8c 91       	ld	r24, X
     58e:	82 83       	std	Z+2, r24	; 0x02
     590:	13 82       	std	Z+3, r1	; 0x03
     592:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <printf>
	{
		uint8_t PacketBuffer[PacketLength];

		Pipe_Read_Stream_LE(&PacketBuffer, PacketLength, NULL);

		for (uint16_t i = 0; i < PacketLength; i++)
     596:	0f 5f       	subi	r16, 0xFF	; 255
     598:	1f 4f       	sbci	r17, 0xFF	; 255
     59a:	0f 90       	pop	r0
     59c:	0f 90       	pop	r0
     59e:	0f 90       	pop	r0
     5a0:	0f 90       	pop	r0
     5a2:	89 81       	ldd	r24, Y+1	; 0x01
     5a4:	9a 81       	ldd	r25, Y+2	; 0x02
     5a6:	08 17       	cp	r16, r24
     5a8:	19 07       	cpc	r17, r25
     5aa:	10 f3       	brcs	.-60     	; 0x570 <RNDISHost_Task+0xfc>
     5ac:	8b 2d       	mov	r24, r11
     5ae:	9a 2d       	mov	r25, r10
     5b0:	9c 01       	movw	r18, r24
     5b2:	0f b6       	in	r0, 0x3f	; 63
     5b4:	f8 94       	cli
     5b6:	3e bf       	out	0x3e, r19	; 62
     5b8:	0f be       	out	0x3f, r0	; 63
     5ba:	2d bf       	out	0x3d, r18	; 61
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     5bc:	80 91 a6 00 	lds	r24, 0x00A6
     5c0:	8e 77       	andi	r24, 0x7E	; 126
     5c2:	80 93 a6 00 	sts	0x00A6, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     5c6:	80 91 a9 00 	lds	r24, 0x00A9
     5ca:	80 64       	ori	r24, 0x40	; 64
     5cc:	80 93 a9 00 	sts	0x00A9, r24
	}

	Pipe_ClearIN();
	Pipe_Freeze();

	printf("\r\n\r\n");
     5d0:	88 e0       	ldi	r24, 0x08	; 8
     5d2:	91 e0       	ldi	r25, 0x01	; 1
     5d4:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <puts>
     5d8:	8b b1       	in	r24, 0x0b	; 11
     5da:	8f 70       	andi	r24, 0x0F	; 15
     5dc:	80 66       	ori	r24, 0x60	; 96
     5de:	8b b9       	out	0x0b, r24	; 11

	LEDs_SetAllLEDs(LEDMASK_USB_READY);
}
     5e0:	0f b6       	in	r0, 0x3f	; 63
     5e2:	f8 94       	cli
     5e4:	9e be       	out	0x3e, r9	; 62
     5e6:	0f be       	out	0x3f, r0	; 63
     5e8:	8d be       	out	0x3d, r8	; 61
     5ea:	0f 90       	pop	r0
     5ec:	0f 90       	pop	r0
     5ee:	cf 91       	pop	r28
     5f0:	df 91       	pop	r29
     5f2:	1f 91       	pop	r17
     5f4:	0f 91       	pop	r16
     5f6:	ff 90       	pop	r15
     5f8:	ef 90       	pop	r14
     5fa:	df 90       	pop	r13
     5fc:	cf 90       	pop	r12
     5fe:	bf 90       	pop	r11
     600:	af 90       	pop	r10
     602:	9f 90       	pop	r9
     604:	8f 90       	pop	r8
     606:	08 95       	ret

00000608 <EVENT_USB_Host_HostError>:
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
}

/** Event handler for the USB_HostError event. This indicates that a hardware error occurred while in host mode. */
void EVENT_USB_Host_HostError(const uint8_t ErrorCode)
{
     608:	1f 93       	push	r17
     60a:	18 2f       	mov	r17, r24
	USB_Disable();
     60c:	2b d7       	rcall	.+3670   	; 0x1464 <USB_Disable>

	printf_P(PSTR(ESC_FG_RED "Host Mode Error\r\n"
     60e:	00 d0       	rcall	.+0      	; 0x610 <EVENT_USB_Host_HostError+0x8>
     610:	00 d0       	rcall	.+0      	; 0x612 <EVENT_USB_Host_HostError+0xa>
     612:	ed b7       	in	r30, 0x3d	; 61
     614:	fe b7       	in	r31, 0x3e	; 62
     616:	31 96       	adiw	r30, 0x01	; 1
     618:	8d e5       	ldi	r24, 0x5D	; 93
     61a:	91 e0       	ldi	r25, 0x01	; 1
     61c:	ad b7       	in	r26, 0x3d	; 61
     61e:	be b7       	in	r27, 0x3e	; 62
     620:	12 96       	adiw	r26, 0x02	; 2
     622:	9c 93       	st	X, r25
     624:	8e 93       	st	-X, r24
     626:	11 97       	sbiw	r26, 0x01	; 1
     628:	12 83       	std	Z+2, r17	; 0x02
     62a:	13 82       	std	Z+3, r1	; 0x03
     62c:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <printf_P>
     630:	8b b1       	in	r24, 0x0b	; 11
     632:	8f 70       	andi	r24, 0x0F	; 15
     634:	80 69       	ori	r24, 0x90	; 144
     636:	8b b9       	out	0x0b, r24	; 11
     638:	0f 90       	pop	r0
     63a:	0f 90       	pop	r0
     63c:	0f 90       	pop	r0
     63e:	0f 90       	pop	r0
     640:	ff cf       	rjmp	.-2      	; 0x640 <EVENT_USB_Host_HostError+0x38>

00000642 <EVENT_USB_Host_DeviceEnumerationComplete>:

/** Event handler for the USB_DeviceEnumerationComplete event. This indicates that a device has been successfully
 *  enumerated by the host and is now ready to be used by the application.
 */
void EVENT_USB_Host_DeviceEnumerationComplete(void)
{
     642:	1f 93       	push	r17
     644:	df 93       	push	r29
     646:	cf 93       	push	r28
     648:	cd b7       	in	r28, 0x3d	; 61
     64a:	de b7       	in	r29, 0x3e	; 62
     64c:	2a 97       	sbiw	r28, 0x0a	; 10
     64e:	0f b6       	in	r0, 0x3f	; 63
     650:	f8 94       	cli
     652:	de bf       	out	0x3e, r29	; 62
     654:	0f be       	out	0x3f, r0	; 63
     656:	cd bf       	out	0x3d, r28	; 61
	puts_P(PSTR("Getting Config Data.\r\n"));
     658:	80 e4       	ldi	r24, 0x40	; 64
     65a:	93 e0       	ldi	r25, 0x03	; 3
     65c:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <puts_P>

	uint8_t ErrorCode;

	/* Get and process the configuration descriptor data */
	if ((ErrorCode = ProcessConfigurationDescriptor()) != SuccessfulConfigRead)
     660:	5c d1       	rcall	.+696    	; 0x91a <ProcessConfigurationDescriptor>
     662:	18 2f       	mov	r17, r24
     664:	88 23       	and	r24, r24
     666:	c1 f0       	breq	.+48     	; 0x698 <EVENT_USB_Host_DeviceEnumerationComplete+0x56>
	{
		if (ErrorCode == ControlError)
     668:	81 30       	cpi	r24, 0x01	; 1
     66a:	19 f4       	brne	.+6      	; 0x672 <EVENT_USB_Host_DeviceEnumerationComplete+0x30>
		  puts_P(PSTR(ESC_FG_RED "Control Error (Get Configuration).\r\n"));
     66c:	86 e1       	ldi	r24, 0x16	; 22
     66e:	93 e0       	ldi	r25, 0x03	; 3
     670:	02 c0       	rjmp	.+4      	; 0x676 <EVENT_USB_Host_DeviceEnumerationComplete+0x34>
		else
		  puts_P(PSTR(ESC_FG_RED "Invalid Device.\r\n"));
     672:	8f ef       	ldi	r24, 0xFF	; 255
     674:	92 e0       	ldi	r25, 0x02	; 2
     676:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <puts_P>

		printf_P(PSTR(" -- Error Code: %d\r\n" ESC_FG_WHITE), ErrorCode);
     67a:	00 d0       	rcall	.+0      	; 0x67c <EVENT_USB_Host_DeviceEnumerationComplete+0x3a>
     67c:	00 d0       	rcall	.+0      	; 0x67e <EVENT_USB_Host_DeviceEnumerationComplete+0x3c>
     67e:	ed b7       	in	r30, 0x3d	; 61
     680:	fe b7       	in	r31, 0x3e	; 62
     682:	31 96       	adiw	r30, 0x01	; 1
     684:	85 ee       	ldi	r24, 0xE5	; 229
     686:	92 e0       	ldi	r25, 0x02	; 2
     688:	ad b7       	in	r26, 0x3d	; 61
     68a:	be b7       	in	r27, 0x3e	; 62
     68c:	12 96       	adiw	r26, 0x02	; 2
     68e:	9c 93       	st	X, r25
     690:	8e 93       	st	-X, r24
     692:	11 97       	sbiw	r26, 0x01	; 1
     694:	12 83       	std	Z+2, r17	; 0x02
     696:	14 c0       	rjmp	.+40     	; 0x6c0 <EVENT_USB_Host_DeviceEnumerationComplete+0x7e>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	/* Set the device configuration to the first configuration (rarely do devices use multiple configurations) */
	if ((ErrorCode = USB_Host_SetDeviceConfiguration(1)) != HOST_SENDCONTROL_Successful)
     698:	81 e0       	ldi	r24, 0x01	; 1
     69a:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <USB_Host_SetDeviceConfiguration>
     69e:	28 2f       	mov	r18, r24
     6a0:	88 23       	and	r24, r24
     6a2:	d1 f0       	breq	.+52     	; 0x6d8 <EVENT_USB_Host_DeviceEnumerationComplete+0x96>
	{
		printf_P(PSTR(ESC_FG_RED "Control Error (Set Configuration).\r\n"
     6a4:	00 d0       	rcall	.+0      	; 0x6a6 <EVENT_USB_Host_DeviceEnumerationComplete+0x64>
     6a6:	00 d0       	rcall	.+0      	; 0x6a8 <EVENT_USB_Host_DeviceEnumerationComplete+0x66>
     6a8:	ed b7       	in	r30, 0x3d	; 61
     6aa:	fe b7       	in	r31, 0x3e	; 62
     6ac:	31 96       	adiw	r30, 0x01	; 1
     6ae:	82 ea       	ldi	r24, 0xA2	; 162
     6b0:	92 e0       	ldi	r25, 0x02	; 2
     6b2:	ad b7       	in	r26, 0x3d	; 61
     6b4:	be b7       	in	r27, 0x3e	; 62
     6b6:	12 96       	adiw	r26, 0x02	; 2
     6b8:	9c 93       	st	X, r25
     6ba:	8e 93       	st	-X, r24
     6bc:	11 97       	sbiw	r26, 0x01	; 1
     6be:	22 83       	std	Z+2, r18	; 0x02
     6c0:	13 82       	std	Z+3, r1	; 0x03
     6c2:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <printf_P>
     6c6:	8b b1       	in	r24, 0x0b	; 11
     6c8:	8f 70       	andi	r24, 0x0F	; 15
     6ca:	80 69       	ori	r24, 0x90	; 144
     6cc:	8b b9       	out	0x0b, r24	; 11
     6ce:	0f 90       	pop	r0
     6d0:	0f 90       	pop	r0
     6d2:	0f 90       	pop	r0
     6d4:	0f 90       	pop	r0
     6d6:	8d c0       	rjmp	.+282    	; 0x7f2 <EVENT_USB_Host_DeviceEnumerationComplete+0x1b0>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	uint16_t DeviceMaxPacketSize;
	if ((ErrorCode = RNDIS_InitializeDevice(1024, &DeviceMaxPacketSize)) != HOST_SENDCONTROL_Successful)
     6d8:	80 e0       	ldi	r24, 0x00	; 0
     6da:	94 e0       	ldi	r25, 0x04	; 4
     6dc:	be 01       	movw	r22, r28
     6de:	6f 5f       	subi	r22, 0xFF	; 255
     6e0:	7f 4f       	sbci	r23, 0xFF	; 255
     6e2:	8a d3       	rcall	.+1812   	; 0xdf8 <RNDIS_InitializeDevice>
     6e4:	28 2f       	mov	r18, r24
     6e6:	88 23       	and	r24, r24
     6e8:	41 f0       	breq	.+16     	; 0x6fa <EVENT_USB_Host_DeviceEnumerationComplete+0xb8>
	{
		printf_P(PSTR(ESC_FG_RED "Error Initializing Device.\r\n"
     6ea:	00 d0       	rcall	.+0      	; 0x6ec <EVENT_USB_Host_DeviceEnumerationComplete+0xaa>
     6ec:	00 d0       	rcall	.+0      	; 0x6ee <EVENT_USB_Host_DeviceEnumerationComplete+0xac>
     6ee:	ed b7       	in	r30, 0x3d	; 61
     6f0:	fe b7       	in	r31, 0x3e	; 62
     6f2:	31 96       	adiw	r30, 0x01	; 1
     6f4:	87 e6       	ldi	r24, 0x67	; 103
     6f6:	92 e0       	ldi	r25, 0x02	; 2
     6f8:	43 c0       	rjmp	.+134    	; 0x780 <EVENT_USB_Host_DeviceEnumerationComplete+0x13e>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		USB_Host_SetDeviceConfiguration(0);
		return;
	}

	printf_P(PSTR("Device Max Transfer Size: %lu bytes.\r\n"), DeviceMaxPacketSize);
     6fa:	00 d0       	rcall	.+0      	; 0x6fc <EVENT_USB_Host_DeviceEnumerationComplete+0xba>
     6fc:	00 d0       	rcall	.+0      	; 0x6fe <EVENT_USB_Host_DeviceEnumerationComplete+0xbc>
     6fe:	80 e4       	ldi	r24, 0x40	; 64
     700:	92 e0       	ldi	r25, 0x02	; 2
     702:	ed b7       	in	r30, 0x3d	; 61
     704:	fe b7       	in	r31, 0x3e	; 62
     706:	92 83       	std	Z+2, r25	; 0x02
     708:	81 83       	std	Z+1, r24	; 0x01
     70a:	89 81       	ldd	r24, Y+1	; 0x01
     70c:	9a 81       	ldd	r25, Y+2	; 0x02
     70e:	94 83       	std	Z+4, r25	; 0x04
     710:	83 83       	std	Z+3, r24	; 0x03
     712:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <printf_P>

	/* We set the default filter to only receive packets we would be interested in */
	uint32_t PacketFilter = (REMOTE_NDIS_PACKET_DIRECTED | REMOTE_NDIS_PACKET_BROADCAST | REMOTE_NDIS_PACKET_ALL_MULTICAST);
     716:	8d e0       	ldi	r24, 0x0D	; 13
     718:	90 e0       	ldi	r25, 0x00	; 0
     71a:	a0 e0       	ldi	r26, 0x00	; 0
     71c:	b0 e0       	ldi	r27, 0x00	; 0
     71e:	8b 83       	std	Y+3, r24	; 0x03
     720:	9c 83       	std	Y+4, r25	; 0x04
     722:	ad 83       	std	Y+5, r26	; 0x05
     724:	be 83       	std	Y+6, r27	; 0x06
	if ((ErrorCode = RNDIS_SetRNDISProperty(OID_GEN_CURRENT_PACKET_FILTER,
     726:	0f 90       	pop	r0
     728:	0f 90       	pop	r0
     72a:	0f 90       	pop	r0
     72c:	0f 90       	pop	r0
     72e:	6e e0       	ldi	r22, 0x0E	; 14
     730:	71 e0       	ldi	r23, 0x01	; 1
     732:	81 e0       	ldi	r24, 0x01	; 1
     734:	90 e0       	ldi	r25, 0x00	; 0
     736:	ae 01       	movw	r20, r28
     738:	4d 5f       	subi	r20, 0xFD	; 253
     73a:	5f 4f       	sbci	r21, 0xFF	; 255
     73c:	24 e0       	ldi	r18, 0x04	; 4
     73e:	30 e0       	ldi	r19, 0x00	; 0
     740:	b4 d2       	rcall	.+1384   	; 0xcaa <RNDIS_SetRNDISProperty>
     742:	28 2f       	mov	r18, r24
     744:	88 23       	and	r24, r24
     746:	41 f0       	breq	.+16     	; 0x758 <EVENT_USB_Host_DeviceEnumerationComplete+0x116>
	                                        &PacketFilter, sizeof(PacketFilter))) != HOST_SENDCONTROL_Successful)
	{
		printf_P(PSTR(ESC_FG_RED "Error Setting Device Packet Filter.\r\n"
     748:	00 d0       	rcall	.+0      	; 0x74a <EVENT_USB_Host_DeviceEnumerationComplete+0x108>
     74a:	00 d0       	rcall	.+0      	; 0x74c <EVENT_USB_Host_DeviceEnumerationComplete+0x10a>
     74c:	ed b7       	in	r30, 0x3d	; 61
     74e:	fe b7       	in	r31, 0x3e	; 62
     750:	31 96       	adiw	r30, 0x01	; 1
     752:	8c ef       	ldi	r24, 0xFC	; 252
     754:	91 e0       	ldi	r25, 0x01	; 1
     756:	14 c0       	rjmp	.+40     	; 0x780 <EVENT_USB_Host_DeviceEnumerationComplete+0x13e>
		USB_Host_SetDeviceConfiguration(0);
		return;
	}

	uint32_t VendorID;
	if ((ErrorCode = RNDIS_QueryRNDISProperty(OID_GEN_VENDOR_ID,
     758:	6c e0       	ldi	r22, 0x0C	; 12
     75a:	71 e0       	ldi	r23, 0x01	; 1
     75c:	81 e0       	ldi	r24, 0x01	; 1
     75e:	90 e0       	ldi	r25, 0x00	; 0
     760:	ae 01       	movw	r20, r28
     762:	49 5f       	subi	r20, 0xF9	; 249
     764:	5f 4f       	sbci	r21, 0xFF	; 255
     766:	24 e0       	ldi	r18, 0x04	; 4
     768:	30 e0       	ldi	r19, 0x00	; 0
     76a:	ff d1       	rcall	.+1022   	; 0xb6a <RNDIS_QueryRNDISProperty>
     76c:	28 2f       	mov	r18, r24
     76e:	88 23       	and	r24, r24
     770:	e9 f0       	breq	.+58     	; 0x7ac <EVENT_USB_Host_DeviceEnumerationComplete+0x16a>
	                                          &VendorID, sizeof(VendorID))) != HOST_SENDCONTROL_Successful)
	{
		printf_P(PSTR(ESC_FG_RED "Error Getting Vendor ID.\r\n"
     772:	00 d0       	rcall	.+0      	; 0x774 <EVENT_USB_Host_DeviceEnumerationComplete+0x132>
     774:	00 d0       	rcall	.+0      	; 0x776 <EVENT_USB_Host_DeviceEnumerationComplete+0x134>
     776:	ed b7       	in	r30, 0x3d	; 61
     778:	fe b7       	in	r31, 0x3e	; 62
     77a:	31 96       	adiw	r30, 0x01	; 1
     77c:	83 ec       	ldi	r24, 0xC3	; 195
     77e:	91 e0       	ldi	r25, 0x01	; 1
     780:	ad b7       	in	r26, 0x3d	; 61
     782:	be b7       	in	r27, 0x3e	; 62
     784:	12 96       	adiw	r26, 0x02	; 2
     786:	9c 93       	st	X, r25
     788:	8e 93       	st	-X, r24
     78a:	11 97       	sbiw	r26, 0x01	; 1
     78c:	22 83       	std	Z+2, r18	; 0x02
     78e:	13 82       	std	Z+3, r1	; 0x03
     790:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <printf_P>
     794:	8b b1       	in	r24, 0x0b	; 11
     796:	8f 70       	andi	r24, 0x0F	; 15
     798:	80 69       	ori	r24, 0x90	; 144
     79a:	8b b9       	out	0x0b, r24	; 11
		                         " -- Error Code: %d\r\n" ESC_FG_WHITE), ErrorCode);

		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		USB_Host_SetDeviceConfiguration(0);
     79c:	0f 90       	pop	r0
     79e:	0f 90       	pop	r0
     7a0:	0f 90       	pop	r0
     7a2:	0f 90       	pop	r0
     7a4:	80 e0       	ldi	r24, 0x00	; 0
     7a6:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <USB_Host_SetDeviceConfiguration>
     7aa:	23 c0       	rjmp	.+70     	; 0x7f2 <EVENT_USB_Host_DeviceEnumerationComplete+0x1b0>
		return;
	}

	printf_P(PSTR("Device Vendor ID: 0x%08lX\r\n"), VendorID);
     7ac:	00 d0       	rcall	.+0      	; 0x7ae <EVENT_USB_Host_DeviceEnumerationComplete+0x16c>
     7ae:	00 d0       	rcall	.+0      	; 0x7b0 <EVENT_USB_Host_DeviceEnumerationComplete+0x16e>
     7b0:	00 d0       	rcall	.+0      	; 0x7b2 <EVENT_USB_Host_DeviceEnumerationComplete+0x170>
     7b2:	87 ea       	ldi	r24, 0xA7	; 167
     7b4:	91 e0       	ldi	r25, 0x01	; 1
     7b6:	ed b7       	in	r30, 0x3d	; 61
     7b8:	fe b7       	in	r31, 0x3e	; 62
     7ba:	92 83       	std	Z+2, r25	; 0x02
     7bc:	81 83       	std	Z+1, r24	; 0x01
     7be:	8f 81       	ldd	r24, Y+7	; 0x07
     7c0:	98 85       	ldd	r25, Y+8	; 0x08
     7c2:	a9 85       	ldd	r26, Y+9	; 0x09
     7c4:	ba 85       	ldd	r27, Y+10	; 0x0a
     7c6:	83 83       	std	Z+3, r24	; 0x03
     7c8:	94 83       	std	Z+4, r25	; 0x04
     7ca:	a5 83       	std	Z+5, r26	; 0x05
     7cc:	b6 83       	std	Z+6, r27	; 0x06
     7ce:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <printf_P>

	puts_P(PSTR("RNDIS Device Enumerated.\r\n"));
     7d2:	8d b7       	in	r24, 0x3d	; 61
     7d4:	9e b7       	in	r25, 0x3e	; 62
     7d6:	06 96       	adiw	r24, 0x06	; 6
     7d8:	0f b6       	in	r0, 0x3f	; 63
     7da:	f8 94       	cli
     7dc:	9e bf       	out	0x3e, r25	; 62
     7de:	0f be       	out	0x3f, r0	; 63
     7e0:	8d bf       	out	0x3d, r24	; 61
     7e2:	8c e8       	ldi	r24, 0x8C	; 140
     7e4:	91 e0       	ldi	r25, 0x01	; 1
     7e6:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <puts_P>
     7ea:	8b b1       	in	r24, 0x0b	; 11
     7ec:	8f 70       	andi	r24, 0x0F	; 15
     7ee:	80 66       	ori	r24, 0x60	; 96
     7f0:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
}
     7f2:	2a 96       	adiw	r28, 0x0a	; 10
     7f4:	0f b6       	in	r0, 0x3f	; 63
     7f6:	f8 94       	cli
     7f8:	de bf       	out	0x3e, r29	; 62
     7fa:	0f be       	out	0x3f, r0	; 63
     7fc:	cd bf       	out	0x3d, r28	; 61
     7fe:	cf 91       	pop	r28
     800:	df 91       	pop	r29
     802:	1f 91       	pop	r17
     804:	08 95       	ret

00000806 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     806:	84 b7       	in	r24, 0x34	; 52
     808:	87 7f       	andi	r24, 0xF7	; 247
     80a:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     80c:	38 e1       	ldi	r19, 0x18	; 24
     80e:	0f b6       	in	r0, 0x3f	; 63
     810:	f8 94       	cli
     812:	30 93 60 00 	sts	0x0060, r19
     816:	10 92 60 00 	sts	0x0060, r1
     81a:	0f be       	out	0x3f, r0	; 63

	/* Disable clock division */
	clock_prescale_set(clock_div_1);
     81c:	80 e0       	ldi	r24, 0x00	; 0
     81e:	90 e0       	ldi	r25, 0x00	; 0
     820:	20 e8       	ldi	r18, 0x80	; 128
     822:	0f b6       	in	r0, 0x3f	; 63
     824:	f8 94       	cli
     826:	20 93 61 00 	sts	0x0061, r18
     82a:	80 93 61 00 	sts	0x0061, r24
     82e:	0f be       	out	0x3f, r0	; 63
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     830:	83 e3       	ldi	r24, 0x33	; 51
     832:	90 e0       	ldi	r25, 0x00	; 0
     834:	90 93 cd 00 	sts	0x00CD, r25
     838:	80 93 cc 00 	sts	0x00CC, r24

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     83c:	86 e0       	ldi	r24, 0x06	; 6
     83e:	80 93 ca 00 	sts	0x00CA, r24
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     842:	10 92 c8 00 	sts	0x00C8, r1
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     846:	30 93 c9 00 	sts	0x00C9, r19

				DDRD  |= (1 << 3);
     84a:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     84c:	5a 9a       	sbi	0x0b, 2	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     84e:	8a b1       	in	r24, 0x0a	; 10
     850:	80 6f       	ori	r24, 0xF0	; 240
     852:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     854:	8b b1       	in	r24, 0x0b	; 11
     856:	8f 70       	andi	r24, 0x0F	; 15
     858:	8b b9       	out	0x0b, r24	; 11

	/* Hardware Initialization */
	Serial_Init(9600, false);
	LEDs_Init();
	USB_Init();
     85a:	fb d5       	rcall	.+3062   	; 0x1452 <USB_Init>
			static inline void Serial_CreateStream(FILE* Stream)
			{
				if (!(Stream))
				{
					Stream = &USARTSerialStream;
					stdin  = Stream;
     85c:	e0 e3       	ldi	r30, 0x30	; 48
     85e:	f1 e0       	ldi	r31, 0x01	; 1
     860:	f0 93 3f 01 	sts	0x013F, r31
     864:	e0 93 3e 01 	sts	0x013E, r30
					stdout = Stream;
     868:	f0 93 41 01 	sts	0x0141, r31
     86c:	e0 93 40 01 	sts	0x0140, r30
				}
			
				*Stream = (FILE)FDEV_SETUP_STREAM(Serial_putchar, Serial_getchar, _FDEV_SETUP_RW);
     870:	8e e0       	ldi	r24, 0x0E	; 14
     872:	df 01       	movw	r26, r30
     874:	1d 92       	st	X+, r1
     876:	8a 95       	dec	r24
     878:	e9 f7       	brne	.-6      	; 0x874 <SetupHardware+0x6e>
     87a:	83 e0       	ldi	r24, 0x03	; 3
     87c:	80 93 33 01 	sts	0x0133, r24
     880:	84 e9       	ldi	r24, 0x94	; 148
     882:	9d e0       	ldi	r25, 0x0D	; 13
     884:	90 93 39 01 	sts	0x0139, r25
     888:	80 93 38 01 	sts	0x0138, r24
     88c:	8e e9       	ldi	r24, 0x9E	; 158
     88e:	9d e0       	ldi	r25, 0x0D	; 13
     890:	90 93 3b 01 	sts	0x013B, r25
     894:	80 93 3a 01 	sts	0x013A, r24

	/* Create a stdio stream for the serial port for stdin and stdout */
	Serial_CreateStream(NULL);
}
     898:	08 95       	ret

0000089a <main>:
/** Main program entry point. This routine configures the hardware required by the application, then
 *  enters a loop to run the application tasks in sequence.
 */
int main(void)
{
	SetupHardware();
     89a:	b5 df       	rcall	.-150    	; 0x806 <SetupHardware>

	puts_P(PSTR(ESC_FG_CYAN "RNDIS Host Demo running.\r\n" ESC_FG_WHITE));
     89c:	85 e9       	ldi	r24, 0x95	; 149
     89e:	93 e0       	ldi	r25, 0x03	; 3
     8a0:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <puts_P>
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     8a4:	8b b1       	in	r24, 0x0b	; 11
     8a6:	8f 70       	andi	r24, 0x0F	; 15
     8a8:	80 61       	ori	r24, 0x10	; 16
     8aa:	8b b9       	out	0x0b, r24	; 11

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
	sei();
     8ac:	78 94       	sei

	for (;;)
	{
		RNDISHost_Task();
     8ae:	e2 dd       	rcall	.-1084   	; 0x474 <RNDISHost_Task>

		USB_USBTask();
     8b0:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <USB_USBTask>
     8b4:	fc cf       	rjmp	.-8      	; 0x8ae <main+0x14>

000008b6 <DComp_NextCDCControlInterface>:
 *  This comparator searches for the next Interface descriptor of the correct CDC control Class, Subclass and Protocol values.
 *
 *  \return A value from the DSEARCH_Return_ErrorCodes_t enum
 */
uint8_t DComp_NextCDCControlInterface(void* CurrentDescriptor)
{
     8b6:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
     8b8:	81 81       	ldd	r24, Z+1	; 0x01
     8ba:	84 30       	cpi	r24, 0x04	; 4
     8bc:	59 f4       	brne	.+22     	; 0x8d4 <DComp_NextCDCControlInterface+0x1e>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		/* Check the CDC descriptor class, subclass and protocol, break out if correct control interface found */
		if ((Interface->Class    == CDC_CSCP_CDCClass)    &&
     8be:	85 81       	ldd	r24, Z+5	; 0x05
     8c0:	82 30       	cpi	r24, 0x02	; 2
     8c2:	41 f4       	brne	.+16     	; 0x8d4 <DComp_NextCDCControlInterface+0x1e>
     8c4:	86 81       	ldd	r24, Z+6	; 0x06
     8c6:	82 30       	cpi	r24, 0x02	; 2
     8c8:	29 f4       	brne	.+10     	; 0x8d4 <DComp_NextCDCControlInterface+0x1e>
     8ca:	87 81       	ldd	r24, Z+7	; 0x07
     8cc:	8f 3f       	cpi	r24, 0xFF	; 255
     8ce:	11 f4       	brne	.+4      	; 0x8d4 <DComp_NextCDCControlInterface+0x1e>
     8d0:	80 e0       	ldi	r24, 0x00	; 0
     8d2:	08 95       	ret
     8d4:	82 e0       	ldi	r24, 0x02	; 2
			return DESCRIPTOR_SEARCH_Found;
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
     8d6:	08 95       	ret

000008d8 <DComp_NextCDCDataInterface>:
 *  This comparator searches for the next Interface descriptor of the correct CDC data Class, Subclass and Protocol values.
 *
 *  \return A value from the DSEARCH_Return_ErrorCodes_t enum
 */
uint8_t DComp_NextCDCDataInterface(void* CurrentDescriptor)
{
     8d8:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
     8da:	81 81       	ldd	r24, Z+1	; 0x01
     8dc:	84 30       	cpi	r24, 0x04	; 4
     8de:	41 f4       	brne	.+16     	; 0x8f0 <DComp_NextCDCDataInterface+0x18>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		/* Check the CDC descriptor class, subclass and protocol, break out if correct data interface found */
		if ((Interface->Class    == CDC_CSCP_CDCDataClass)   &&
     8e0:	85 81       	ldd	r24, Z+5	; 0x05
     8e2:	8a 30       	cpi	r24, 0x0A	; 10
     8e4:	29 f4       	brne	.+10     	; 0x8f0 <DComp_NextCDCDataInterface+0x18>
     8e6:	86 81       	ldd	r24, Z+6	; 0x06
     8e8:	88 23       	and	r24, r24
     8ea:	11 f4       	brne	.+4      	; 0x8f0 <DComp_NextCDCDataInterface+0x18>
     8ec:	87 81       	ldd	r24, Z+7	; 0x07
     8ee:	81 11       	cpse	r24, r1
     8f0:	82 e0       	ldi	r24, 0x02	; 2
			return DESCRIPTOR_SEARCH_Found;
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
     8f2:	08 95       	ret

000008f4 <DComp_NextCDCDataInterfaceEndpoint>:
 *  using a different comparator to determine if it is another CDC class interface).
 *
 *  \return A value from the DSEARCH_Return_ErrorCodes_t enum
 */
uint8_t DComp_NextCDCDataInterfaceEndpoint(void* CurrentDescriptor)
{
     8f4:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Endpoint)
     8f6:	81 81       	ldd	r24, Z+1	; 0x01
     8f8:	85 30       	cpi	r24, 0x05	; 5
     8fa:	49 f4       	brne	.+18     	; 0x90e <DComp_NextCDCDataInterfaceEndpoint+0x1a>
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		/* Check the endpoint type, break out if correct BULK or INTERRUPT type endpoint found */
		if (((Endpoint->Attributes & EP_TYPE_MASK) == EP_TYPE_BULK) || 
     8fc:	83 81       	ldd	r24, Z+3	; 0x03
     8fe:	90 e0       	ldi	r25, 0x00	; 0
     900:	83 70       	andi	r24, 0x03	; 3
     902:	90 70       	andi	r25, 0x00	; 0
     904:	02 97       	sbiw	r24, 0x02	; 2
     906:	02 97       	sbiw	r24, 0x02	; 2
     908:	30 f4       	brcc	.+12     	; 0x916 <DComp_NextCDCDataInterfaceEndpoint+0x22>
     90a:	80 e0       	ldi	r24, 0x00	; 0
     90c:	08 95       	ret
		    ((Endpoint->Attributes & EP_TYPE_MASK) == EP_TYPE_INTERRUPT))
		{
			return DESCRIPTOR_SEARCH_Found;
		}
	}
	else if (Header->Type == DTYPE_Interface)
     90e:	84 30       	cpi	r24, 0x04	; 4
     910:	11 f4       	brne	.+4      	; 0x916 <DComp_NextCDCDataInterfaceEndpoint+0x22>
     912:	81 e0       	ldi	r24, 0x01	; 1
     914:	08 95       	ret
     916:	82 e0       	ldi	r24, 0x02	; 2
	{
		return DESCRIPTOR_SEARCH_Fail;
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
     918:	08 95       	ret

0000091a <ProcessConfigurationDescriptor>:
 *  This routine searches for a RNDIS interface descriptor containing bulk data IN and OUT endpoints, and an interrupt event endpoint.
 *
 *  \return An error code from the \ref RNDISHost_GetConfigDescriptorDataCodes_t enum.
 */
uint8_t ProcessConfigurationDescriptor(void)
{
     91a:	6f 92       	push	r6
     91c:	7f 92       	push	r7
     91e:	8f 92       	push	r8
     920:	9f 92       	push	r9
     922:	af 92       	push	r10
     924:	bf 92       	push	r11
     926:	cf 92       	push	r12
     928:	df 92       	push	r13
     92a:	ef 92       	push	r14
     92c:	ff 92       	push	r15
     92e:	0f 93       	push	r16
     930:	1f 93       	push	r17
     932:	df 93       	push	r29
     934:	cf 93       	push	r28
     936:	cd b7       	in	r28, 0x3d	; 61
     938:	de b7       	in	r29, 0x3e	; 62
     93a:	c4 50       	subi	r28, 0x04	; 4
     93c:	d2 40       	sbci	r29, 0x02	; 2
     93e:	0f b6       	in	r0, 0x3f	; 63
     940:	f8 94       	cli
     942:	de bf       	out	0x3e, r29	; 62
     944:	0f be       	out	0x3f, r0	; 63
     946:	cd bf       	out	0x3d, r28	; 61
	uint8_t  ConfigDescriptorData[512];
	void*    CurrConfigLocation = ConfigDescriptorData;
     948:	ae 01       	movw	r20, r28
     94a:	4b 5f       	subi	r20, 0xFB	; 251
     94c:	5f 4f       	sbci	r21, 0xFF	; 255
     94e:	5a 83       	std	Y+2, r21	; 0x02
     950:	49 83       	std	Y+1, r20	; 0x01
	USB_Descriptor_Endpoint_t*  DataINEndpoint         = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint        = NULL;
	USB_Descriptor_Endpoint_t*  NotificationEndpoint   = NULL;

	/* Retrieve the entire configuration descriptor into the allocated buffer */
	switch (USB_Host_GetDeviceConfigDescriptor(1, &CurrConfigBytesRem, ConfigDescriptorData, sizeof(ConfigDescriptorData)))
     952:	8e 01       	movw	r16, r28
     954:	0d 5f       	subi	r16, 0xFD	; 253
     956:	1f 4f       	sbci	r17, 0xFF	; 255
     958:	81 e0       	ldi	r24, 0x01	; 1
     95a:	b8 01       	movw	r22, r16
     95c:	20 e0       	ldi	r18, 0x00	; 0
     95e:	32 e0       	ldi	r19, 0x02	; 2
     960:	21 d7       	rcall	.+3650   	; 0x17a4 <USB_Host_GetDeviceConfigDescriptor>
     962:	85 30       	cpi	r24, 0x05	; 5
     964:	29 f0       	breq	.+10     	; 0x970 <ProcessConfigurationDescriptor+0x56>
     966:	86 30       	cpi	r24, 0x06	; 6
     968:	91 f0       	breq	.+36     	; 0x98e <ProcessConfigurationDescriptor+0x74>
     96a:	88 23       	and	r24, r24
     96c:	19 f0       	breq	.+6      	; 0x974 <ProcessConfigurationDescriptor+0x5a>
     96e:	11 c0       	rjmp	.+34     	; 0x992 <ProcessConfigurationDescriptor+0x78>
     970:	82 e0       	ldi	r24, 0x02	; 2
     972:	6b c0       	rjmp	.+214    	; 0xa4a <ProcessConfigurationDescriptor+0x130>
     974:	66 24       	eor	r6, r6
     976:	77 24       	eor	r7, r7
     978:	ee 24       	eor	r14, r14
     97a:	ff 24       	eor	r15, r15
     97c:	cc 24       	eor	r12, r12
     97e:	dd 24       	eor	r13, r13
     980:	aa 24       	eor	r10, r10
     982:	bb 24       	eor	r11, r11
	}

	while (!(DataINEndpoint) || !(DataOUTEndpoint) || !(NotificationEndpoint))
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(RNDISControlInterface) ||
     984:	48 01       	movw	r8, r16
     986:	8e 01       	movw	r16, r28
     988:	0f 5f       	subi	r16, 0xFF	; 255
     98a:	1f 4f       	sbci	r17, 0xFF	; 255
     98c:	08 c0       	rjmp	.+16     	; 0x99e <ProcessConfigurationDescriptor+0x84>
	USB_Descriptor_Endpoint_t*  DataINEndpoint         = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint        = NULL;
	USB_Descriptor_Endpoint_t*  NotificationEndpoint   = NULL;

	/* Retrieve the entire configuration descriptor into the allocated buffer */
	switch (USB_Host_GetDeviceConfigDescriptor(1, &CurrConfigBytesRem, ConfigDescriptorData, sizeof(ConfigDescriptorData)))
     98e:	83 e0       	ldi	r24, 0x03	; 3
     990:	5c c0       	rjmp	.+184    	; 0xa4a <ProcessConfigurationDescriptor+0x130>
     992:	81 e0       	ldi	r24, 0x01	; 1
     994:	5a c0       	rjmp	.+180    	; 0xa4a <ProcessConfigurationDescriptor+0x130>
		case HOST_GETCONFIG_InvalidData:
			return InvalidConfigDataReturned;
		case HOST_GETCONFIG_BuffOverflow:
			return DescriptorTooLarge;
		default:
			return ControlError;
     996:	cc 24       	eor	r12, r12
     998:	dd 24       	eor	r13, r13
     99a:	ee 24       	eor	r14, r14
     99c:	ff 24       	eor	r15, r15
	}

	while (!(DataINEndpoint) || !(DataOUTEndpoint) || !(NotificationEndpoint))
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(RNDISControlInterface) ||
     99e:	61 14       	cp	r6, r1
     9a0:	71 04       	cpc	r7, r1
     9a2:	39 f0       	breq	.+14     	; 0x9b2 <ProcessConfigurationDescriptor+0x98>
     9a4:	c4 01       	movw	r24, r8
     9a6:	b8 01       	movw	r22, r16
     9a8:	4a e7       	ldi	r20, 0x7A	; 122
     9aa:	54 e0       	ldi	r21, 0x04	; 4
     9ac:	b7 d6       	rcall	.+3438   	; 0x171c <USB_GetNextDescriptorComp>
     9ae:	88 23       	and	r24, r24
     9b0:	a9 f0       	breq	.+42     	; 0x9dc <ProcessConfigurationDescriptor+0xc2>
		    USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
		                              DComp_NextCDCDataInterfaceEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			/* Check if we have already found the control interface's notification endpoint or not */
			if (NotificationEndpoint)
     9b2:	a1 14       	cp	r10, r1
     9b4:	b1 04       	cpc	r11, r1
     9b6:	41 f0       	breq	.+16     	; 0x9c8 <ProcessConfigurationDescriptor+0xae>
			{
				/* Get the next RNDIS data interface from the configuration descriptor */
				if (USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     9b8:	c4 01       	movw	r24, r8
     9ba:	b8 01       	movw	r22, r16
     9bc:	4c e6       	ldi	r20, 0x6C	; 108
     9be:	54 e0       	ldi	r21, 0x04	; 4
     9c0:	ad d6       	rcall	.+3418   	; 0x171c <USB_GetNextDescriptorComp>
     9c2:	88 23       	and	r24, r24
     9c4:	41 f3       	breq	.-48     	; 0x996 <ProcessConfigurationDescriptor+0x7c>
     9c6:	40 c0       	rjmp	.+128    	; 0xa48 <ProcessConfigurationDescriptor+0x12e>
				DataOUTEndpoint      = NULL;
			}
			else
			{
				/* Get the next RNDIS control interface from the configuration descriptor */
				if (USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     9c8:	c4 01       	movw	r24, r8
     9ca:	b8 01       	movw	r22, r16
     9cc:	4b e5       	ldi	r20, 0x5B	; 91
     9ce:	54 e0       	ldi	r21, 0x04	; 4
     9d0:	a5 d6       	rcall	.+3402   	; 0x171c <USB_GetNextDescriptorComp>
     9d2:	88 23       	and	r24, r24
     9d4:	c9 f5       	brne	.+114    	; 0xa48 <ProcessConfigurationDescriptor+0x12e>
					/* Descriptor not found, error out */
					return NoCompatibleInterfaceFound;
				}

				/* Save the interface in case we need to refer back to it later */
				RNDISControlInterface = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Interface_t);
     9d6:	69 80       	ldd	r6, Y+1	; 0x01
     9d8:	7a 80       	ldd	r7, Y+2	; 0x02
     9da:	0e c0       	rjmp	.+28     	; 0x9f8 <ProcessConfigurationDescriptor+0xde>
			/* Skip the remainder of the loop as we have not found an endpoint yet */
			continue;
		}

		/* Retrieve the endpoint address from the endpoint descriptor */
		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Endpoint_t);
     9dc:	e9 81       	ldd	r30, Y+1	; 0x01
     9de:	fa 81       	ldd	r31, Y+2	; 0x02

		/* If the endpoint is a IN type endpoint */
		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
     9e0:	82 81       	ldd	r24, Z+2	; 0x02
     9e2:	87 fd       	sbrc	r24, 7
     9e4:	02 c0       	rjmp	.+4      	; 0x9ea <ProcessConfigurationDescriptor+0xd0>
     9e6:	6f 01       	movw	r12, r30
     9e8:	07 c0       	rjmp	.+14     	; 0x9f8 <ProcessConfigurationDescriptor+0xde>
		{
			/* Check if the found endpoint is a interrupt or bulk type descriptor */
			if ((EndpointData->Attributes & EP_TYPE_MASK) == EP_TYPE_INTERRUPT)
     9ea:	83 81       	ldd	r24, Z+3	; 0x03
     9ec:	83 70       	andi	r24, 0x03	; 3
     9ee:	83 30       	cpi	r24, 0x03	; 3
     9f0:	11 f0       	breq	.+4      	; 0x9f6 <ProcessConfigurationDescriptor+0xdc>
     9f2:	7f 01       	movw	r14, r30
     9f4:	01 c0       	rjmp	.+2      	; 0x9f8 <ProcessConfigurationDescriptor+0xde>
     9f6:	5f 01       	movw	r10, r30
			return DescriptorTooLarge;
		default:
			return ControlError;
	}

	while (!(DataINEndpoint) || !(DataOUTEndpoint) || !(NotificationEndpoint))
     9f8:	e1 14       	cp	r14, r1
     9fa:	f1 04       	cpc	r15, r1
     9fc:	81 f2       	breq	.-96     	; 0x99e <ProcessConfigurationDescriptor+0x84>
     9fe:	c1 14       	cp	r12, r1
     a00:	d1 04       	cpc	r13, r1
     a02:	69 f2       	breq	.-102    	; 0x99e <ProcessConfigurationDescriptor+0x84>
     a04:	a1 14       	cp	r10, r1
     a06:	b1 04       	cpc	r11, r1
     a08:	51 f2       	breq	.-108    	; 0x99e <ProcessConfigurationDescriptor+0x84>
			DataOUTEndpoint = EndpointData;
		}
	}

	/* Configure the RNDIS data IN pipe */
	Pipe_ConfigurePipe(RNDIS_DATA_IN_PIPE, EP_TYPE_BULK, PIPE_TOKEN_IN,
     a0a:	f7 01       	movw	r30, r14
     a0c:	04 81       	ldd	r16, Z+4	; 0x04
     a0e:	15 81       	ldd	r17, Z+5	; 0x05
     a10:	81 e0       	ldi	r24, 0x01	; 1
     a12:	62 e0       	ldi	r22, 0x02	; 2
     a14:	40 e1       	ldi	r20, 0x10	; 16
     a16:	22 81       	ldd	r18, Z+2	; 0x02
     a18:	ee 24       	eor	r14, r14
     a1a:	2a d4       	rcall	.+2132   	; 0x1270 <Pipe_ConfigurePipe>
	                   DataINEndpoint->EndpointAddress, DataINEndpoint->EndpointSize, PIPE_BANK_SINGLE);

	/* Configure the RNDIS data OUT pipe */
	Pipe_ConfigurePipe(RNDIS_DATA_OUT_PIPE, EP_TYPE_BULK, PIPE_TOKEN_OUT,
     a1c:	f6 01       	movw	r30, r12
     a1e:	04 81       	ldd	r16, Z+4	; 0x04
     a20:	15 81       	ldd	r17, Z+5	; 0x05
     a22:	82 e0       	ldi	r24, 0x02	; 2
     a24:	62 e0       	ldi	r22, 0x02	; 2
     a26:	40 e2       	ldi	r20, 0x20	; 32
     a28:	22 81       	ldd	r18, Z+2	; 0x02
     a2a:	22 d4       	rcall	.+2116   	; 0x1270 <Pipe_ConfigurePipe>
					   DataOUTEndpoint->EndpointAddress, DataOUTEndpoint->EndpointSize, PIPE_BANK_SINGLE);

	/* Configure the RNDIS notification pipe */
	Pipe_ConfigurePipe(RNDIS_NOTIFICATION_PIPE, EP_TYPE_INTERRUPT, PIPE_TOKEN_IN,
     a2c:	f5 01       	movw	r30, r10
     a2e:	04 81       	ldd	r16, Z+4	; 0x04
     a30:	15 81       	ldd	r17, Z+5	; 0x05
     a32:	83 e0       	ldi	r24, 0x03	; 3
     a34:	63 e0       	ldi	r22, 0x03	; 3
     a36:	40 e1       	ldi	r20, 0x10	; 16
     a38:	22 81       	ldd	r18, Z+2	; 0x02
     a3a:	1a d4       	rcall	.+2100   	; 0x1270 <Pipe_ConfigurePipe>
					   NotificationEndpoint->EndpointAddress, NotificationEndpoint->EndpointSize, PIPE_BANK_SINGLE);
	Pipe_SetInterruptPeriod(NotificationEndpoint->PollingIntervalMS);
     a3c:	f5 01       	movw	r30, r10
     a3e:	86 81       	ldd	r24, Z+6	; 0x06
			 *  \param[in] Milliseconds  Number of milliseconds between each pipe poll.
			 */
			static inline void Pipe_SetInterruptPeriod(const uint8_t Milliseconds) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInterruptPeriod(const uint8_t Milliseconds)
			{
				UPCFG2X = Milliseconds;
     a40:	80 93 ad 00 	sts	0x00AD, r24
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	01 c0       	rjmp	.+2      	; 0xa4a <ProcessConfigurationDescriptor+0x130>

	/* Valid data found, return success */
	return SuccessfulConfigRead;
     a48:	84 e0       	ldi	r24, 0x04	; 4
}
     a4a:	cc 5f       	subi	r28, 0xFC	; 252
     a4c:	dd 4f       	sbci	r29, 0xFD	; 253
     a4e:	0f b6       	in	r0, 0x3f	; 63
     a50:	f8 94       	cli
     a52:	de bf       	out	0x3e, r29	; 62
     a54:	0f be       	out	0x3f, r0	; 63
     a56:	cd bf       	out	0x3d, r28	; 61
     a58:	cf 91       	pop	r28
     a5a:	df 91       	pop	r29
     a5c:	1f 91       	pop	r17
     a5e:	0f 91       	pop	r16
     a60:	ff 90       	pop	r15
     a62:	ef 90       	pop	r14
     a64:	df 90       	pop	r13
     a66:	cf 90       	pop	r12
     a68:	bf 90       	pop	r11
     a6a:	af 90       	pop	r10
     a6c:	9f 90       	pop	r9
     a6e:	8f 90       	pop	r8
     a70:	7f 90       	pop	r7
     a72:	6f 90       	pop	r6
     a74:	08 95       	ret

00000a76 <RNDIS_GetPacketLength>:
 *  \param[out] PacketLength  Size of the packet currently in the pipe
 *
 *  \return A value from the Pipe_Stream_RW_ErrorCodes_t enum
 */
uint8_t RNDIS_GetPacketLength(uint16_t* const PacketLength)
{
     a76:	ef 92       	push	r14
     a78:	ff 92       	push	r15
     a7a:	1f 93       	push	r17
     a7c:	df 93       	push	r29
     a7e:	cf 93       	push	r28
     a80:	cd b7       	in	r28, 0x3d	; 61
     a82:	de b7       	in	r29, 0x3e	; 62
     a84:	ac 97       	sbiw	r28, 0x2c	; 44
     a86:	0f b6       	in	r0, 0x3f	; 63
     a88:	f8 94       	cli
     a8a:	de bf       	out	0x3e, r29	; 62
     a8c:	0f be       	out	0x3f, r0	; 63
     a8e:	cd bf       	out	0x3d, r28	; 61
     a90:	7c 01       	movw	r14, r24
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     a92:	81 e0       	ldi	r24, 0x01	; 1
     a94:	80 93 a7 00 	sts	0x00A7, r24
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     a98:	80 91 aa 00 	lds	r24, 0x00AA
     a9c:	8f 7c       	andi	r24, 0xCF	; 207
     a9e:	80 61       	ori	r24, 0x10	; 16
     aa0:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     aa4:	80 91 a9 00 	lds	r24, 0x00A9
     aa8:	8f 7b       	andi	r24, 0xBF	; 191
     aaa:	80 93 a9 00 	sts	0x00A9, r24
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
     aae:	80 91 a6 00 	lds	r24, 0x00A6

	Pipe_SelectPipe(RNDIS_DATA_IN_PIPE);
	Pipe_SetPipeToken(PIPE_TOKEN_IN);
	Pipe_Unfreeze();

	if (!(Pipe_IsReadWriteAllowed()))
     ab2:	85 fd       	sbrc	r24, 5
     ab4:	0a c0       	rjmp	.+20     	; 0xaca <RNDIS_GetPacketLength+0x54>
	{
		*PacketLength = 0;
     ab6:	f7 01       	movw	r30, r14
     ab8:	11 82       	std	Z+1, r1	; 0x01
     aba:	10 82       	st	Z, r1

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     abc:	80 91 a9 00 	lds	r24, 0x00A9
     ac0:	80 64       	ori	r24, 0x40	; 64
     ac2:	80 93 a9 00 	sts	0x00A9, r24
     ac6:	10 e0       	ldi	r17, 0x00	; 0
     ac8:	1a c0       	rjmp	.+52     	; 0xafe <RNDIS_GetPacketLength+0x88>
		return PIPE_RWSTREAM_NoError;
	}

	RNDIS_Packet_Message_t DeviceMessage;

	if ((ErrorCode = Pipe_Read_Stream_LE(&DeviceMessage, sizeof(RNDIS_Packet_Message_t), NULL)) != PIPE_RWSTREAM_NoError)
     aca:	ce 01       	movw	r24, r28
     acc:	01 96       	adiw	r24, 0x01	; 1
     ace:	6c e2       	ldi	r22, 0x2C	; 44
     ad0:	70 e0       	ldi	r23, 0x00	; 0
     ad2:	40 e0       	ldi	r20, 0x00	; 0
     ad4:	50 e0       	ldi	r21, 0x00	; 0
     ad6:	83 d5       	rcall	.+2822   	; 0x15de <Pipe_Read_Stream_LE>
     ad8:	18 2f       	mov	r17, r24
     ada:	88 23       	and	r24, r24
     adc:	81 f4       	brne	.+32     	; 0xafe <RNDIS_GetPacketLength+0x88>
	{
		return ErrorCode;
	}

	*PacketLength = (uint16_t)DeviceMessage.DataLength;
     ade:	8d 85       	ldd	r24, Y+13	; 0x0d
     ae0:	9e 85       	ldd	r25, Y+14	; 0x0e
     ae2:	f7 01       	movw	r30, r14
     ae4:	91 83       	std	Z+1, r25	; 0x01
     ae6:	80 83       	st	Z, r24

	Pipe_Discard_Stream(DeviceMessage.DataOffset - (sizeof(RNDIS_Packet_Message_t) - sizeof(RNDIS_Message_Header_t)),
     ae8:	89 85       	ldd	r24, Y+9	; 0x09
     aea:	9a 85       	ldd	r25, Y+10	; 0x0a
     aec:	84 97       	sbiw	r24, 0x24	; 36
     aee:	60 e0       	ldi	r22, 0x00	; 0
     af0:	70 e0       	ldi	r23, 0x00	; 0
     af2:	cc d5       	rcall	.+2968   	; 0x168c <Pipe_Discard_Stream>
     af4:	80 91 a9 00 	lds	r24, 0x00A9
     af8:	80 64       	ori	r24, 0x40	; 64
     afa:	80 93 a9 00 	sts	0x00A9, r24
	                    NULL);

	Pipe_Freeze();

	return PIPE_RWSTREAM_NoError;
}
     afe:	81 2f       	mov	r24, r17
     b00:	ac 96       	adiw	r28, 0x2c	; 44
     b02:	0f b6       	in	r0, 0x3f	; 63
     b04:	f8 94       	cli
     b06:	de bf       	out	0x3e, r29	; 62
     b08:	0f be       	out	0x3f, r0	; 63
     b0a:	cd bf       	out	0x3d, r28	; 61
     b0c:	cf 91       	pop	r28
     b0e:	df 91       	pop	r29
     b10:	1f 91       	pop	r17
     b12:	ff 90       	pop	r15
     b14:	ef 90       	pop	r14
     b16:	08 95       	ret

00000b18 <RNDIS_GetEncapsulatedResponse>:
 *  \return A value from the USB_Host_SendControlErrorCodes_t enum
 */
uint8_t RNDIS_GetEncapsulatedResponse(void* const Buffer,
                                      const uint16_t Length)
{
	USB_ControlRequest = (USB_Request_Header_t)
     b18:	21 ea       	ldi	r18, 0xA1	; 161
     b1a:	20 93 27 01 	sts	0x0127, r18
     b1e:	21 e0       	ldi	r18, 0x01	; 1
     b20:	20 93 28 01 	sts	0x0128, r18
     b24:	10 92 2a 01 	sts	0x012A, r1
     b28:	10 92 29 01 	sts	0x0129, r1
     b2c:	10 92 2c 01 	sts	0x012C, r1
     b30:	10 92 2b 01 	sts	0x012B, r1
     b34:	70 93 2e 01 	sts	0x012E, r23
     b38:	60 93 2d 01 	sts	0x012D, r22
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     b3c:	10 92 a7 00 	sts	0x00A7, r1

	/* Select the control pipe for the request transfer */
	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	return USB_Host_SendControlRequest(Buffer);
}
     b40:	b5 c6       	rjmp	.+3434   	; 0x18ac <USB_Host_SendControlRequest>

00000b42 <RNDIS_SendEncapsulatedCommand>:
 *  \return A value from the USB_Host_SendControlErrorCodes_t enum
 */
uint8_t RNDIS_SendEncapsulatedCommand(void* const Buffer,
                                      const uint16_t Length)
{
	USB_ControlRequest = (USB_Request_Header_t)
     b42:	21 e2       	ldi	r18, 0x21	; 33
     b44:	20 93 27 01 	sts	0x0127, r18
     b48:	10 92 28 01 	sts	0x0128, r1
     b4c:	10 92 2a 01 	sts	0x012A, r1
     b50:	10 92 29 01 	sts	0x0129, r1
     b54:	10 92 2c 01 	sts	0x012C, r1
     b58:	10 92 2b 01 	sts	0x012B, r1
     b5c:	70 93 2e 01 	sts	0x012E, r23
     b60:	60 93 2d 01 	sts	0x012D, r22
     b64:	10 92 a7 00 	sts	0x00A7, r1

	/* Select the control pipe for the request transfer */
	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	return USB_Host_SendControlRequest(Buffer);
}
     b68:	a1 c6       	rjmp	.+3394   	; 0x18ac <USB_Host_SendControlRequest>

00000b6a <RNDIS_QueryRNDISProperty>:
 *          logical command failure
 */
uint8_t RNDIS_QueryRNDISProperty(const uint32_t Oid,
                                 void* Buffer,
                                 const uint16_t MaxLength)
{
     b6a:	7f 92       	push	r7
     b6c:	8f 92       	push	r8
     b6e:	9f 92       	push	r9
     b70:	af 92       	push	r10
     b72:	bf 92       	push	r11
     b74:	cf 92       	push	r12
     b76:	df 92       	push	r13
     b78:	ef 92       	push	r14
     b7a:	ff 92       	push	r15
     b7c:	0f 93       	push	r16
     b7e:	1f 93       	push	r17
     b80:	df 93       	push	r29
     b82:	cf 93       	push	r28
     b84:	cd b7       	in	r28, 0x3d	; 61
     b86:	de b7       	in	r29, 0x3e	; 62
     b88:	6c 97       	sbiw	r28, 0x1c	; 28
     b8a:	0f b6       	in	r0, 0x3f	; 63
     b8c:	f8 94       	cli
     b8e:	de bf       	out	0x3e, r29	; 62
     b90:	0f be       	out	0x3f, r0	; 63
     b92:	cd bf       	out	0x3d, r28	; 61
     b94:	04 2f       	mov	r16, r20
     b96:	75 2e       	mov	r7, r21
     b98:	69 01       	movw	r12, r18
	  return RNDIS_COMMAND_FAILED;

	memcpy(Buffer, &QueryMessageResponseData.ContiguousBuffer, MaxLength);

	return HOST_SENDCONTROL_Successful;
}
     b9a:	8d b6       	in	r8, 0x3d	; 61
     b9c:	9e b6       	in	r9, 0x3e	; 62

	struct
	{
		RNDIS_Query_Complete_t QueryMessageResponse;
		uint8_t                ContiguousBuffer[MaxLength];
	} QueryMessageResponseData;
     b9e:	28 e1       	ldi	r18, 0x18	; 24
     ba0:	a2 2e       	mov	r10, r18
     ba2:	b1 2c       	mov	r11, r1
     ba4:	ac 0c       	add	r10, r12
     ba6:	bd 1c       	adc	r11, r13
     ba8:	2d b7       	in	r18, 0x3d	; 61
     baa:	3e b7       	in	r19, 0x3e	; 62
     bac:	2a 19       	sub	r18, r10
     bae:	3b 09       	sbc	r19, r11
     bb0:	0f b6       	in	r0, 0x3f	; 63
     bb2:	f8 94       	cli
     bb4:	3e bf       	out	0x3e, r19	; 62
     bb6:	0f be       	out	0x3f, r0	; 63
     bb8:	2d bf       	out	0x3d, r18	; 61
     bba:	ed b6       	in	r14, 0x3d	; 61
     bbc:	fe b6       	in	r15, 0x3e	; 62
     bbe:	08 94       	sec
     bc0:	e1 1c       	adc	r14, r1
     bc2:	f1 1c       	adc	r15, r1

	QueryMessage.MessageType    = REMOTE_NDIS_QUERY_MSG;
     bc4:	24 e0       	ldi	r18, 0x04	; 4
     bc6:	30 e0       	ldi	r19, 0x00	; 0
     bc8:	40 e0       	ldi	r20, 0x00	; 0
     bca:	50 e0       	ldi	r21, 0x00	; 0
     bcc:	29 83       	std	Y+1, r18	; 0x01
     bce:	3a 83       	std	Y+2, r19	; 0x02
     bd0:	4b 83       	std	Y+3, r20	; 0x03
     bd2:	5c 83       	std	Y+4, r21	; 0x04
	QueryMessage.MessageLength  = sizeof(RNDIS_Query_Message_t);
     bd4:	2c e1       	ldi	r18, 0x1C	; 28
     bd6:	30 e0       	ldi	r19, 0x00	; 0
     bd8:	40 e0       	ldi	r20, 0x00	; 0
     bda:	50 e0       	ldi	r21, 0x00	; 0
     bdc:	2d 83       	std	Y+5, r18	; 0x05
     bde:	3e 83       	std	Y+6, r19	; 0x06
     be0:	4f 83       	std	Y+7, r20	; 0x07
     be2:	58 87       	std	Y+8, r21	; 0x08
	QueryMessage.RequestId      = RequestID++;
     be4:	20 91 1e 01 	lds	r18, 0x011E
     be8:	30 91 1f 01 	lds	r19, 0x011F
     bec:	40 91 20 01 	lds	r20, 0x0120
     bf0:	50 91 21 01 	lds	r21, 0x0121
     bf4:	29 87       	std	Y+9, r18	; 0x09
     bf6:	3a 87       	std	Y+10, r19	; 0x0a
     bf8:	4b 87       	std	Y+11, r20	; 0x0b
     bfa:	5c 87       	std	Y+12, r21	; 0x0c
     bfc:	2f 5f       	subi	r18, 0xFF	; 255
     bfe:	3f 4f       	sbci	r19, 0xFF	; 255
     c00:	4f 4f       	sbci	r20, 0xFF	; 255
     c02:	5f 4f       	sbci	r21, 0xFF	; 255
     c04:	20 93 1e 01 	sts	0x011E, r18
     c08:	30 93 1f 01 	sts	0x011F, r19
     c0c:	40 93 20 01 	sts	0x0120, r20
     c10:	50 93 21 01 	sts	0x0121, r21

	QueryMessage.Oid            = Oid;
     c14:	6d 87       	std	Y+13, r22	; 0x0d
     c16:	7e 87       	std	Y+14, r23	; 0x0e
     c18:	8f 87       	std	Y+15, r24	; 0x0f
     c1a:	98 8b       	std	Y+16, r25	; 0x10
	QueryMessage.InformationBufferLength = 0;
     c1c:	19 8a       	std	Y+17, r1	; 0x11
     c1e:	1a 8a       	std	Y+18, r1	; 0x12
     c20:	1b 8a       	std	Y+19, r1	; 0x13
     c22:	1c 8a       	std	Y+20, r1	; 0x14
	QueryMessage.InformationBufferOffset = 0;
     c24:	1d 8a       	std	Y+21, r1	; 0x15
     c26:	1e 8a       	std	Y+22, r1	; 0x16
     c28:	1f 8a       	std	Y+23, r1	; 0x17
     c2a:	18 8e       	std	Y+24, r1	; 0x18
	QueryMessage.DeviceVcHandle = 0;
     c2c:	19 8e       	std	Y+25, r1	; 0x19
     c2e:	1a 8e       	std	Y+26, r1	; 0x1a
     c30:	1b 8e       	std	Y+27, r1	; 0x1b
     c32:	1c 8e       	std	Y+28, r1	; 0x1c

	if ((ErrorCode = RNDIS_SendEncapsulatedCommand(&QueryMessage,
     c34:	ce 01       	movw	r24, r28
     c36:	01 96       	adiw	r24, 0x01	; 1
     c38:	6c e1       	ldi	r22, 0x1C	; 28
     c3a:	70 e0       	ldi	r23, 0x00	; 0
     c3c:	82 df       	rcall	.-252    	; 0xb42 <RNDIS_SendEncapsulatedCommand>
     c3e:	18 2f       	mov	r17, r24
     c40:	88 23       	and	r24, r24
     c42:	c9 f4       	brne	.+50     	; 0xc76 <RNDIS_QueryRNDISProperty+0x10c>
	                                               sizeof(RNDIS_Query_Message_t))) != HOST_SENDCONTROL_Successful)
	{
		return ErrorCode;
	}

	if ((ErrorCode = RNDIS_GetEncapsulatedResponse(&QueryMessageResponseData,
     c44:	c7 01       	movw	r24, r14
     c46:	b5 01       	movw	r22, r10
     c48:	67 df       	rcall	.-306    	; 0xb18 <RNDIS_GetEncapsulatedResponse>
     c4a:	18 2f       	mov	r17, r24
     c4c:	88 23       	and	r24, r24
     c4e:	99 f4       	brne	.+38     	; 0xc76 <RNDIS_QueryRNDISProperty+0x10c>
	                                               sizeof(QueryMessageResponseData))) != HOST_SENDCONTROL_Successful)
	{
		return ErrorCode;
	}

	if (QueryMessageResponseData.QueryMessageResponse.Status != REMOTE_NDIS_STATUS_SUCCESS)
     c50:	f7 01       	movw	r30, r14
     c52:	84 85       	ldd	r24, Z+12	; 0x0c
     c54:	95 85       	ldd	r25, Z+13	; 0x0d
     c56:	a6 85       	ldd	r26, Z+14	; 0x0e
     c58:	b7 85       	ldd	r27, Z+15	; 0x0f
     c5a:	00 97       	sbiw	r24, 0x00	; 0
     c5c:	a1 05       	cpc	r26, r1
     c5e:	b1 05       	cpc	r27, r1
     c60:	11 f0       	breq	.+4      	; 0xc66 <RNDIS_QueryRNDISProperty+0xfc>
     c62:	10 ec       	ldi	r17, 0xC0	; 192
     c64:	08 c0       	rjmp	.+16     	; 0xc76 <RNDIS_QueryRNDISProperty+0x10c>
	  return RNDIS_COMMAND_FAILED;

	memcpy(Buffer, &QueryMessageResponseData.ContiguousBuffer, MaxLength);
     c66:	97 01       	movw	r18, r14
     c68:	28 5e       	subi	r18, 0xE8	; 232
     c6a:	3f 4f       	sbci	r19, 0xFF	; 255
     c6c:	80 2f       	mov	r24, r16
     c6e:	97 2d       	mov	r25, r7
     c70:	b9 01       	movw	r22, r18
     c72:	a6 01       	movw	r20, r12
     c74:	77 d7       	rcall	.+3822   	; 0x1b64 <memcpy>

	return HOST_SENDCONTROL_Successful;
}
     c76:	81 2f       	mov	r24, r17
     c78:	0f b6       	in	r0, 0x3f	; 63
     c7a:	f8 94       	cli
     c7c:	9e be       	out	0x3e, r9	; 62
     c7e:	0f be       	out	0x3f, r0	; 63
     c80:	8d be       	out	0x3d, r8	; 61
     c82:	6c 96       	adiw	r28, 0x1c	; 28
     c84:	0f b6       	in	r0, 0x3f	; 63
     c86:	f8 94       	cli
     c88:	de bf       	out	0x3e, r29	; 62
     c8a:	0f be       	out	0x3f, r0	; 63
     c8c:	cd bf       	out	0x3d, r28	; 61
     c8e:	cf 91       	pop	r28
     c90:	df 91       	pop	r29
     c92:	1f 91       	pop	r17
     c94:	0f 91       	pop	r16
     c96:	ff 90       	pop	r15
     c98:	ef 90       	pop	r14
     c9a:	df 90       	pop	r13
     c9c:	cf 90       	pop	r12
     c9e:	bf 90       	pop	r11
     ca0:	af 90       	pop	r10
     ca2:	9f 90       	pop	r9
     ca4:	8f 90       	pop	r8
     ca6:	7f 90       	pop	r7
     ca8:	08 95       	ret

00000caa <RNDIS_SetRNDISProperty>:
 *          logical command failure
 */
uint8_t RNDIS_SetRNDISProperty(const uint32_t Oid,
                               void* Buffer,
                               const uint16_t Length)
{
     caa:	6f 92       	push	r6
     cac:	7f 92       	push	r7
     cae:	8f 92       	push	r8
     cb0:	9f 92       	push	r9
     cb2:	af 92       	push	r10
     cb4:	bf 92       	push	r11
     cb6:	cf 92       	push	r12
     cb8:	df 92       	push	r13
     cba:	ef 92       	push	r14
     cbc:	ff 92       	push	r15
     cbe:	0f 93       	push	r16
     cc0:	1f 93       	push	r17
     cc2:	df 93       	push	r29
     cc4:	cf 93       	push	r28
     cc6:	cd b7       	in	r28, 0x3d	; 61
     cc8:	de b7       	in	r29, 0x3e	; 62
     cca:	60 97       	sbiw	r28, 0x10	; 16
     ccc:	0f b6       	in	r0, 0x3f	; 63
     cce:	f8 94       	cli
     cd0:	de bf       	out	0x3e, r29	; 62
     cd2:	0f be       	out	0x3f, r0	; 63
     cd4:	cd bf       	out	0x3d, r28	; 61

	if (SetMessageResponse.Status != REMOTE_NDIS_STATUS_SUCCESS)
	  return RNDIS_COMMAND_FAILED;

	return HOST_SENDCONTROL_Successful;
}
     cd6:	6d b6       	in	r6, 0x3d	; 61
     cd8:	7e b6       	in	r7, 0x3e	; 62

	struct
	{
		RNDIS_Set_Message_t SetMessage;
		uint8_t             ContiguousBuffer[Length];
	} SetMessageData;
     cda:	bc e1       	ldi	r27, 0x1C	; 28
     cdc:	ab 2e       	mov	r10, r27
     cde:	b1 2c       	mov	r11, r1
     ce0:	a2 0e       	add	r10, r18
     ce2:	b3 1e       	adc	r11, r19
     ce4:	ed b7       	in	r30, 0x3d	; 61
     ce6:	fe b7       	in	r31, 0x3e	; 62
     ce8:	ea 19       	sub	r30, r10
     cea:	fb 09       	sbc	r31, r11
     cec:	0f b6       	in	r0, 0x3f	; 63
     cee:	f8 94       	cli
     cf0:	fe bf       	out	0x3e, r31	; 62
     cf2:	0f be       	out	0x3f, r0	; 63
     cf4:	ed bf       	out	0x3d, r30	; 61
     cf6:	8d b6       	in	r8, 0x3d	; 61
     cf8:	9e b6       	in	r9, 0x3e	; 62
     cfa:	08 94       	sec
     cfc:	81 1c       	adc	r8, r1
     cfe:	91 1c       	adc	r9, r1

	RNDIS_Set_Complete_t SetMessageResponse;

	SetMessageData.SetMessage.MessageType    = REMOTE_NDIS_SET_MSG;
     d00:	a5 e0       	ldi	r26, 0x05	; 5
     d02:	ea 2e       	mov	r14, r26
     d04:	f1 2c       	mov	r15, r1
     d06:	01 2d       	mov	r16, r1
     d08:	11 2d       	mov	r17, r1
     d0a:	e1 82       	std	Z+1, r14	; 0x01
     d0c:	f2 82       	std	Z+2, r15	; 0x02
     d0e:	03 83       	std	Z+3, r16	; 0x03
     d10:	14 83       	std	Z+4, r17	; 0x04
	SetMessageData.SetMessage.MessageLength  = sizeof(RNDIS_Set_Message_t) + Length;
     d12:	cc 24       	eor	r12, r12
     d14:	dd 24       	eor	r13, r13
     d16:	f4 01       	movw	r30, r8
     d18:	a4 82       	std	Z+4, r10	; 0x04
     d1a:	b5 82       	std	Z+5, r11	; 0x05
     d1c:	c6 82       	std	Z+6, r12	; 0x06
     d1e:	d7 82       	std	Z+7, r13	; 0x07
	SetMessageData.SetMessage.RequestId      = RequestID++;
     d20:	e0 90 1e 01 	lds	r14, 0x011E
     d24:	f0 90 1f 01 	lds	r15, 0x011F
     d28:	00 91 20 01 	lds	r16, 0x0120
     d2c:	10 91 21 01 	lds	r17, 0x0121
     d30:	e0 86       	std	Z+8, r14	; 0x08
     d32:	f1 86       	std	Z+9, r15	; 0x09
     d34:	02 87       	std	Z+10, r16	; 0x0a
     d36:	13 87       	std	Z+11, r17	; 0x0b
     d38:	08 94       	sec
     d3a:	e1 1c       	adc	r14, r1
     d3c:	f1 1c       	adc	r15, r1
     d3e:	01 1d       	adc	r16, r1
     d40:	11 1d       	adc	r17, r1
     d42:	e0 92 1e 01 	sts	0x011E, r14
     d46:	f0 92 1f 01 	sts	0x011F, r15
     d4a:	00 93 20 01 	sts	0x0120, r16
     d4e:	10 93 21 01 	sts	0x0121, r17

	SetMessageData.SetMessage.Oid            = Oid;
     d52:	64 87       	std	Z+12, r22	; 0x0c
     d54:	75 87       	std	Z+13, r23	; 0x0d
     d56:	86 87       	std	Z+14, r24	; 0x0e
     d58:	97 87       	std	Z+15, r25	; 0x0f
	SetMessageData.SetMessage.InformationBufferLength = Length;
     d5a:	c9 01       	movw	r24, r18
     d5c:	a0 e0       	ldi	r26, 0x00	; 0
     d5e:	b0 e0       	ldi	r27, 0x00	; 0
     d60:	80 8b       	std	Z+16, r24	; 0x10
     d62:	91 8b       	std	Z+17, r25	; 0x11
     d64:	a2 8b       	std	Z+18, r26	; 0x12
     d66:	b3 8b       	std	Z+19, r27	; 0x13
	SetMessageData.SetMessage.InformationBufferOffset = (sizeof(RNDIS_Set_Message_t) - sizeof(RNDIS_Message_Header_t));
     d68:	84 e1       	ldi	r24, 0x14	; 20
     d6a:	90 e0       	ldi	r25, 0x00	; 0
     d6c:	a0 e0       	ldi	r26, 0x00	; 0
     d6e:	b0 e0       	ldi	r27, 0x00	; 0
     d70:	84 8b       	std	Z+20, r24	; 0x14
     d72:	95 8b       	std	Z+21, r25	; 0x15
     d74:	a6 8b       	std	Z+22, r26	; 0x16
     d76:	b7 8b       	std	Z+23, r27	; 0x17
	SetMessageData.SetMessage.DeviceVcHandle = 0;
     d78:	10 8e       	std	Z+24, r1	; 0x18
     d7a:	11 8e       	std	Z+25, r1	; 0x19
     d7c:	12 8e       	std	Z+26, r1	; 0x1a
     d7e:	13 8e       	std	Z+27, r1	; 0x1b

	memcpy(&SetMessageData.ContiguousBuffer, Buffer, Length);
     d80:	6d b7       	in	r22, 0x3d	; 61
     d82:	7e b7       	in	r23, 0x3e	; 62
     d84:	63 5e       	subi	r22, 0xE3	; 227
     d86:	7f 4f       	sbci	r23, 0xFF	; 255
     d88:	cb 01       	movw	r24, r22
     d8a:	ba 01       	movw	r22, r20
     d8c:	a9 01       	movw	r20, r18
     d8e:	ea d6       	rcall	.+3540   	; 0x1b64 <memcpy>

	if ((ErrorCode = RNDIS_SendEncapsulatedCommand(&SetMessageData,
     d90:	f4 01       	movw	r30, r8
     d92:	64 81       	ldd	r22, Z+4	; 0x04
     d94:	75 81       	ldd	r23, Z+5	; 0x05
     d96:	c4 01       	movw	r24, r8
     d98:	d4 de       	rcall	.-600    	; 0xb42 <RNDIS_SendEncapsulatedCommand>
     d9a:	28 2f       	mov	r18, r24
     d9c:	88 23       	and	r24, r24
     d9e:	89 f4       	brne	.+34     	; 0xdc2 <RNDIS_SetRNDISProperty+0x118>
	                                               SetMessageData.SetMessage.MessageLength)) != HOST_SENDCONTROL_Successful)
	{
		return ErrorCode;
	}

	if ((ErrorCode = RNDIS_GetEncapsulatedResponse(&SetMessageResponse,
     da0:	ce 01       	movw	r24, r28
     da2:	01 96       	adiw	r24, 0x01	; 1
     da4:	60 e1       	ldi	r22, 0x10	; 16
     da6:	70 e0       	ldi	r23, 0x00	; 0
     da8:	b7 de       	rcall	.-658    	; 0xb18 <RNDIS_GetEncapsulatedResponse>
     daa:	28 2f       	mov	r18, r24
     dac:	88 23       	and	r24, r24
     dae:	49 f4       	brne	.+18     	; 0xdc2 <RNDIS_SetRNDISProperty+0x118>
	                                               sizeof(RNDIS_Set_Complete_t))) != HOST_SENDCONTROL_Successful)
	{
		return ErrorCode;
	}

	if (SetMessageResponse.Status != REMOTE_NDIS_STATUS_SUCCESS)
     db0:	8d 85       	ldd	r24, Y+13	; 0x0d
     db2:	9e 85       	ldd	r25, Y+14	; 0x0e
     db4:	af 85       	ldd	r26, Y+15	; 0x0f
     db6:	b8 89       	ldd	r27, Y+16	; 0x10
     db8:	00 97       	sbiw	r24, 0x00	; 0
     dba:	a1 05       	cpc	r26, r1
     dbc:	b1 05       	cpc	r27, r1
     dbe:	09 f0       	breq	.+2      	; 0xdc2 <RNDIS_SetRNDISProperty+0x118>
     dc0:	20 ec       	ldi	r18, 0xC0	; 192
	  return RNDIS_COMMAND_FAILED;

	return HOST_SENDCONTROL_Successful;
}
     dc2:	82 2f       	mov	r24, r18
     dc4:	0f b6       	in	r0, 0x3f	; 63
     dc6:	f8 94       	cli
     dc8:	7e be       	out	0x3e, r7	; 62
     dca:	0f be       	out	0x3f, r0	; 63
     dcc:	6d be       	out	0x3d, r6	; 61
     dce:	60 96       	adiw	r28, 0x10	; 16
     dd0:	0f b6       	in	r0, 0x3f	; 63
     dd2:	f8 94       	cli
     dd4:	de bf       	out	0x3e, r29	; 62
     dd6:	0f be       	out	0x3f, r0	; 63
     dd8:	cd bf       	out	0x3d, r28	; 61
     dda:	cf 91       	pop	r28
     ddc:	df 91       	pop	r29
     dde:	1f 91       	pop	r17
     de0:	0f 91       	pop	r16
     de2:	ff 90       	pop	r15
     de4:	ef 90       	pop	r14
     de6:	df 90       	pop	r13
     de8:	cf 90       	pop	r12
     dea:	bf 90       	pop	r11
     dec:	af 90       	pop	r10
     dee:	9f 90       	pop	r9
     df0:	8f 90       	pop	r8
     df2:	7f 90       	pop	r7
     df4:	6f 90       	pop	r6
     df6:	08 95       	ret

00000df8 <RNDIS_InitializeDevice>:
 *  \return A value from the USB_Host_SendControlErrorCodes_t enum or RNDIS_COMMAND_FAILED if the device returned a
 *          logical command failure
 */
uint8_t RNDIS_InitializeDevice(const uint16_t HostMaxPacketSize,
                               uint16_t* const DeviceMaxPacketSize)
{
     df8:	0f 93       	push	r16
     dfa:	1f 93       	push	r17
     dfc:	df 93       	push	r29
     dfe:	cf 93       	push	r28
     e00:	cd b7       	in	r28, 0x3d	; 61
     e02:	de b7       	in	r29, 0x3e	; 62
     e04:	cc 54       	subi	r28, 0x4C	; 76
     e06:	d0 40       	sbci	r29, 0x00	; 0
     e08:	0f b6       	in	r0, 0x3f	; 63
     e0a:	f8 94       	cli
     e0c:	de bf       	out	0x3e, r29	; 62
     e0e:	0f be       	out	0x3f, r0	; 63
     e10:	cd bf       	out	0x3d, r28	; 61
     e12:	8b 01       	movw	r16, r22
	uint8_t ErrorCode;

	RNDIS_Initialize_Message_t  InitMessage;
	RNDIS_Initialize_Complete_t InitMessageResponse;

	InitMessage.MessageType     = REMOTE_NDIS_INITIALIZE_MSG;
     e14:	22 e0       	ldi	r18, 0x02	; 2
     e16:	30 e0       	ldi	r19, 0x00	; 0
     e18:	40 e0       	ldi	r20, 0x00	; 0
     e1a:	50 e0       	ldi	r21, 0x00	; 0
     e1c:	29 83       	std	Y+1, r18	; 0x01
     e1e:	3a 83       	std	Y+2, r19	; 0x02
     e20:	4b 83       	std	Y+3, r20	; 0x03
     e22:	5c 83       	std	Y+4, r21	; 0x04
	InitMessage.MessageLength   = sizeof(RNDIS_Initialize_Message_t);
     e24:	28 e1       	ldi	r18, 0x18	; 24
     e26:	30 e0       	ldi	r19, 0x00	; 0
     e28:	40 e0       	ldi	r20, 0x00	; 0
     e2a:	50 e0       	ldi	r21, 0x00	; 0
     e2c:	2d 83       	std	Y+5, r18	; 0x05
     e2e:	3e 83       	std	Y+6, r19	; 0x06
     e30:	4f 83       	std	Y+7, r20	; 0x07
     e32:	58 87       	std	Y+8, r21	; 0x08
	InitMessage.RequestId       = RequestID++;
     e34:	20 91 1e 01 	lds	r18, 0x011E
     e38:	30 91 1f 01 	lds	r19, 0x011F
     e3c:	40 91 20 01 	lds	r20, 0x0120
     e40:	50 91 21 01 	lds	r21, 0x0121
     e44:	29 87       	std	Y+9, r18	; 0x09
     e46:	3a 87       	std	Y+10, r19	; 0x0a
     e48:	4b 87       	std	Y+11, r20	; 0x0b
     e4a:	5c 87       	std	Y+12, r21	; 0x0c
     e4c:	2f 5f       	subi	r18, 0xFF	; 255
     e4e:	3f 4f       	sbci	r19, 0xFF	; 255
     e50:	4f 4f       	sbci	r20, 0xFF	; 255
     e52:	5f 4f       	sbci	r21, 0xFF	; 255
     e54:	20 93 1e 01 	sts	0x011E, r18
     e58:	30 93 1f 01 	sts	0x011F, r19
     e5c:	40 93 20 01 	sts	0x0120, r20
     e60:	50 93 21 01 	sts	0x0121, r21

	InitMessage.MajorVersion    = REMOTE_NDIS_VERSION_MAJOR;
     e64:	21 e0       	ldi	r18, 0x01	; 1
     e66:	30 e0       	ldi	r19, 0x00	; 0
     e68:	40 e0       	ldi	r20, 0x00	; 0
     e6a:	50 e0       	ldi	r21, 0x00	; 0
     e6c:	2d 87       	std	Y+13, r18	; 0x0d
     e6e:	3e 87       	std	Y+14, r19	; 0x0e
     e70:	4f 87       	std	Y+15, r20	; 0x0f
     e72:	58 8b       	std	Y+16, r21	; 0x10
	InitMessage.MinorVersion    = REMOTE_NDIS_VERSION_MINOR;
     e74:	19 8a       	std	Y+17, r1	; 0x11
     e76:	1a 8a       	std	Y+18, r1	; 0x12
     e78:	1b 8a       	std	Y+19, r1	; 0x13
     e7a:	1c 8a       	std	Y+20, r1	; 0x14
	InitMessage.MaxTransferSize = HostMaxPacketSize;
     e7c:	a0 e0       	ldi	r26, 0x00	; 0
     e7e:	b0 e0       	ldi	r27, 0x00	; 0
     e80:	8d 8b       	std	Y+21, r24	; 0x15
     e82:	9e 8b       	std	Y+22, r25	; 0x16
     e84:	af 8b       	std	Y+23, r26	; 0x17
     e86:	b8 8f       	std	Y+24, r27	; 0x18

	if ((ErrorCode = RNDIS_SendEncapsulatedCommand(&InitMessage,
     e88:	ce 01       	movw	r24, r28
     e8a:	01 96       	adiw	r24, 0x01	; 1
     e8c:	68 e1       	ldi	r22, 0x18	; 24
     e8e:	70 e0       	ldi	r23, 0x00	; 0
     e90:	58 de       	rcall	.-848    	; 0xb42 <RNDIS_SendEncapsulatedCommand>
     e92:	28 2f       	mov	r18, r24
     e94:	88 23       	and	r24, r24
     e96:	b9 f4       	brne	.+46     	; 0xec6 <RNDIS_InitializeDevice+0xce>
	                                               sizeof(RNDIS_Initialize_Message_t))) != HOST_SENDCONTROL_Successful)
	{
		return ErrorCode;
	}

	if ((ErrorCode = RNDIS_GetEncapsulatedResponse(&InitMessageResponse,
     e98:	ce 01       	movw	r24, r28
     e9a:	49 96       	adiw	r24, 0x19	; 25
     e9c:	64 e3       	ldi	r22, 0x34	; 52
     e9e:	70 e0       	ldi	r23, 0x00	; 0
     ea0:	3b de       	rcall	.-906    	; 0xb18 <RNDIS_GetEncapsulatedResponse>
     ea2:	28 2f       	mov	r18, r24
     ea4:	88 23       	and	r24, r24
     ea6:	79 f4       	brne	.+30     	; 0xec6 <RNDIS_InitializeDevice+0xce>
	                                               sizeof(RNDIS_Initialize_Complete_t))) != HOST_SENDCONTROL_Successful)
	{
		return ErrorCode;
	}

	if (InitMessageResponse.Status != REMOTE_NDIS_STATUS_SUCCESS)
     ea8:	8d a1       	ldd	r24, Y+37	; 0x25
     eaa:	9e a1       	ldd	r25, Y+38	; 0x26
     eac:	af a1       	ldd	r26, Y+39	; 0x27
     eae:	b8 a5       	ldd	r27, Y+40	; 0x28
     eb0:	00 97       	sbiw	r24, 0x00	; 0
     eb2:	a1 05       	cpc	r26, r1
     eb4:	b1 05       	cpc	r27, r1
     eb6:	11 f0       	breq	.+4      	; 0xebc <RNDIS_InitializeDevice+0xc4>
     eb8:	20 ec       	ldi	r18, 0xC0	; 192
     eba:	05 c0       	rjmp	.+10     	; 0xec6 <RNDIS_InitializeDevice+0xce>
	  return RNDIS_COMMAND_FAILED;

	*DeviceMaxPacketSize = InitMessageResponse.MaxTransferSize;
     ebc:	8d ad       	ldd	r24, Y+61	; 0x3d
     ebe:	9e ad       	ldd	r25, Y+62	; 0x3e
     ec0:	f8 01       	movw	r30, r16
     ec2:	91 83       	std	Z+1, r25	; 0x01
     ec4:	80 83       	st	Z, r24

	return HOST_SENDCONTROL_Successful;
}
     ec6:	82 2f       	mov	r24, r18
     ec8:	c4 5b       	subi	r28, 0xB4	; 180
     eca:	df 4f       	sbci	r29, 0xFF	; 255
     ecc:	0f b6       	in	r0, 0x3f	; 63
     ece:	f8 94       	cli
     ed0:	de bf       	out	0x3e, r29	; 62
     ed2:	0f be       	out	0x3f, r0	; 63
     ed4:	cd bf       	out	0x3d, r28	; 61
     ed6:	cf 91       	pop	r28
     ed8:	df 91       	pop	r29
     eda:	1f 91       	pop	r17
     edc:	0f 91       	pop	r16
     ede:	08 95       	ret

00000ee0 <USB_Host_WaitMS>:
		USB_ResetInterface();
	}
}

uint8_t USB_Host_WaitMS(uint8_t MS)
{
     ee0:	98 2f       	mov	r25, r24
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     ee2:	20 91 9e 00 	lds	r18, 0x009E
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     ee6:	30 91 a0 00 	lds	r19, 0x00A0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     eea:	80 91 a0 00 	lds	r24, 0x00A0
     eee:	8f 7d       	andi	r24, 0xDF	; 223
     ef0:	80 93 a0 00 	sts	0x00A0, r24
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     ef4:	80 91 9f 00 	lds	r24, 0x009F
     ef8:	8f 7d       	andi	r24, 0xDF	; 223
     efa:	80 93 9f 00 	sts	0x009F, r24
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     efe:	80 91 9e 00 	lds	r24, 0x009E
     f02:	81 60       	ori	r24, 0x01	; 1
     f04:	80 93 9e 00 	sts	0x009E, r24
     f08:	28 c0       	rjmp	.+80     	; 0xf5a <USB_Host_WaitMS+0x7a>
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     f0a:	80 91 9f 00 	lds	r24, 0x009F

	USB_Host_ResumeBus();

	while (MS)
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     f0e:	85 ff       	sbrs	r24, 5
     f10:	06 c0       	rjmp	.+12     	; 0xf1e <USB_Host_WaitMS+0x3e>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     f12:	80 91 9f 00 	lds	r24, 0x009F
     f16:	8f 7d       	andi	r24, 0xDF	; 223
     f18:	80 93 9f 00 	sts	0x009F, r24
		{
			USB_INT_Clear(USB_INT_HSOFI);
			MS--;
     f1c:	91 50       	subi	r25, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
     f1e:	80 91 2f 01 	lds	r24, 0x012F
     f22:	81 30       	cpi	r24, 0x01	; 1
     f24:	11 f4       	brne	.+4      	; 0xf2a <USB_Host_WaitMS+0x4a>
     f26:	91 e0       	ldi	r25, 0x01	; 1
     f28:	1a c0       	rjmp	.+52     	; 0xf5e <USB_Host_WaitMS+0x7e>
			 *  \return Boolean \c true if an error has occurred on the selected pipe, \c false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
     f2a:	80 91 a6 00 	lds	r24, 0x00A6
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError() == true)
     f2e:	84 ff       	sbrs	r24, 4
     f30:	09 c0       	rjmp	.+18     	; 0xf44 <USB_Host_WaitMS+0x64>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     f32:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
     f36:	80 91 a6 00 	lds	r24, 0x00A6
     f3a:	8f 7e       	andi	r24, 0xEF	; 239
     f3c:	80 93 a6 00 	sts	0x00A6, r24
     f40:	92 e0       	ldi	r25, 0x02	; 2
     f42:	0d c0       	rjmp	.+26     	; 0xf5e <USB_Host_WaitMS+0x7e>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     f44:	80 91 a6 00 	lds	r24, 0x00A6
			ErrorCode = HOST_WAITERROR_PipeError;

			break;
		}

		if (Pipe_IsStalled() == true)
     f48:	81 ff       	sbrs	r24, 1
     f4a:	07 c0       	rjmp	.+14     	; 0xf5a <USB_Host_WaitMS+0x7a>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
     f4c:	80 91 a6 00 	lds	r24, 0x00A6
     f50:	8d 7f       	andi	r24, 0xFD	; 253
     f52:	80 93 a6 00 	sts	0x00A6, r24
     f56:	93 e0       	ldi	r25, 0x03	; 3
     f58:	02 c0       	rjmp	.+4      	; 0xf5e <USB_Host_WaitMS+0x7e>
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     f5a:	99 23       	and	r25, r25
     f5c:	b1 f6       	brne	.-84     	; 0xf0a <USB_Host_WaitMS+0x2a>

			break;
		}
	}

	if (BusSuspended)
     f5e:	20 fd       	sbrc	r18, 0
     f60:	05 c0       	rjmp	.+10     	; 0xf6c <USB_Host_WaitMS+0x8c>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     f62:	80 91 9e 00 	lds	r24, 0x009E
     f66:	8e 7f       	andi	r24, 0xFE	; 254
     f68:	80 93 9e 00 	sts	0x009E, r24
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
     f6c:	35 ff       	sbrs	r19, 5
     f6e:	05 c0       	rjmp	.+10     	; 0xf7a <USB_Host_WaitMS+0x9a>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     f70:	80 91 a0 00 	lds	r24, 0x00A0
     f74:	80 62       	ori	r24, 0x20	; 32
     f76:	80 93 a0 00 	sts	0x00A0, r24
	  USB_INT_Enable(USB_INT_HSOFI);

	return ErrorCode;
}
     f7a:	89 2f       	mov	r24, r25
     f7c:	08 95       	ret

00000f7e <USB_Host_ResetDevice>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     f7e:	60 91 9e 00 	lds	r22, 0x009E
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     f82:	80 91 a0 00 	lds	r24, 0x00A0
     f86:	8d 7f       	andi	r24, 0xFD	; 253
     f88:	80 93 a0 00 	sts	0x00A0, r24
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
     f8c:	80 91 9e 00 	lds	r24, 0x009E
     f90:	82 60       	ori	r24, 0x02	; 2
     f92:	80 93 9e 00 	sts	0x009E, r24
			 *  \return Boolean \c true if no bus reset is currently being sent, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
     f96:	80 91 9e 00 	lds	r24, 0x009E
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
     f9a:	81 fd       	sbrc	r24, 1
     f9c:	fc cf       	rjmp	.-8      	; 0xf96 <USB_Host_ResetDevice+0x18>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     f9e:	80 91 9e 00 	lds	r24, 0x009E
     fa2:	81 60       	ori	r24, 0x01	; 1
     fa4:	80 93 9e 00 	sts	0x009E, r24
	USB_Host_ResumeBus();
	
	USB_Host_ConfigurationNumber = 0;
     fa8:	10 92 25 01 	sts	0x0125, r1
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     fac:	30 91 a0 00 	lds	r19, 0x00A0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     fb0:	80 91 a0 00 	lds	r24, 0x00A0
     fb4:	8f 7d       	andi	r24, 0xDF	; 223
     fb6:	80 93 a0 00 	sts	0x00A0, r24
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     fba:	80 91 9f 00 	lds	r24, 0x009F
     fbe:	8f 7d       	andi	r24, 0xDF	; 223
     fc0:	80 93 9f 00 	sts	0x009F, r24
     fc4:	2a e0       	ldi	r18, 0x0A	; 10
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     fc6:	40 ed       	ldi	r20, 0xD0	; 208
     fc8:	57 e0       	ldi	r21, 0x07	; 7
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     fca:	80 91 9f 00 	lds	r24, 0x009F
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     fce:	85 ff       	sbrs	r24, 5
     fd0:	0b c0       	rjmp	.+22     	; 0xfe8 <USB_Host_ResetDevice+0x6a>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     fd2:	80 91 9f 00 	lds	r24, 0x009F
     fd6:	8f 7d       	andi	r24, 0xDF	; 223
     fd8:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     fdc:	80 91 9f 00 	lds	r24, 0x009F
     fe0:	8d 7f       	andi	r24, 0xFD	; 253
     fe2:	80 93 9f 00 	sts	0x009F, r24
     fe6:	05 c0       	rjmp	.+10     	; 0xff2 <USB_Host_ResetDevice+0x74>
     fe8:	ca 01       	movw	r24, r20
     fea:	01 97       	sbiw	r24, 0x01	; 1
     fec:	f1 f7       	brne	.-4      	; 0xfea <USB_Host_ResetDevice+0x6c>
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
     fee:	21 50       	subi	r18, 0x01	; 1
     ff0:	61 f7       	brne	.-40     	; 0xfca <USB_Host_ResetDevice+0x4c>
		}

		Delay_MS(1);
	}

	if (HSOFIEnabled)
     ff2:	35 ff       	sbrs	r19, 5
     ff4:	05 c0       	rjmp	.+10     	; 0x1000 <USB_Host_ResetDevice+0x82>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     ff6:	80 91 a0 00 	lds	r24, 0x00A0
     ffa:	80 62       	ori	r24, 0x20	; 32
     ffc:	80 93 a0 00 	sts	0x00A0, r24
	  USB_INT_Enable(USB_INT_HSOFI);

	if (BusSuspended)
    1000:	60 fd       	sbrc	r22, 0
    1002:	05 c0       	rjmp	.+10     	; 0x100e <USB_Host_ResetDevice+0x90>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    1004:	80 91 9e 00 	lds	r24, 0x009E
    1008:	8e 7f       	andi	r24, 0xFE	; 254
    100a:	80 93 9e 00 	sts	0x009E, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
    100e:	80 91 a0 00 	lds	r24, 0x00A0
    1012:	82 60       	ori	r24, 0x02	; 2
    1014:	80 93 a0 00 	sts	0x00A0, r24
	  USB_Host_SuspendBus();

	USB_INT_Enable(USB_INT_DDISCI);
}
    1018:	08 95       	ret

0000101a <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "../Host.h"

void USB_Host_ProcessNextHostState(void)
{
    101a:	ef 92       	push	r14
    101c:	0f 93       	push	r16
    101e:	1f 93       	push	r17
    1020:	df 93       	push	r29
    1022:	cf 93       	push	r28
    1024:	cd b7       	in	r28, 0x3d	; 61
    1026:	de b7       	in	r29, 0x3e	; 62
    1028:	28 97       	sbiw	r28, 0x08	; 8
    102a:	0f b6       	in	r0, 0x3f	; 63
    102c:	f8 94       	cli
    102e:	de bf       	out	0x3e, r29	; 62
    1030:	0f be       	out	0x3f, r0	; 63
    1032:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
    1034:	80 91 2f 01 	lds	r24, 0x012F
    1038:	85 30       	cpi	r24, 0x05	; 5
    103a:	09 f4       	brne	.+2      	; 0x103e <USB_Host_ProcessNextHostState+0x24>
    103c:	94 c0       	rjmp	.+296    	; 0x1166 <USB_Host_ProcessNextHostState+0x14c>
    103e:	86 30       	cpi	r24, 0x06	; 6
    1040:	68 f4       	brcc	.+26     	; 0x105c <USB_Host_ProcessNextHostState+0x42>
    1042:	82 30       	cpi	r24, 0x02	; 2
    1044:	b9 f1       	breq	.+110    	; 0x10b4 <USB_Host_ProcessNextHostState+0x9a>
    1046:	83 30       	cpi	r24, 0x03	; 3
    1048:	18 f4       	brcc	.+6      	; 0x1050 <USB_Host_ProcessNextHostState+0x36>
    104a:	88 23       	and	r24, r24
    104c:	a1 f0       	breq	.+40     	; 0x1076 <USB_Host_ProcessNextHostState+0x5c>
    104e:	04 c1       	rjmp	.+520    	; 0x1258 <USB_Host_ProcessNextHostState+0x23e>
    1050:	83 30       	cpi	r24, 0x03	; 3
    1052:	d1 f1       	breq	.+116    	; 0x10c8 <USB_Host_ProcessNextHostState+0xae>
    1054:	84 30       	cpi	r24, 0x04	; 4
    1056:	09 f0       	breq	.+2      	; 0x105a <USB_Host_ProcessNextHostState+0x40>
    1058:	ff c0       	rjmp	.+510    	; 0x1258 <USB_Host_ProcessNextHostState+0x23e>
    105a:	5d c0       	rjmp	.+186    	; 0x1116 <USB_Host_ProcessNextHostState+0xfc>
    105c:	87 30       	cpi	r24, 0x07	; 7
    105e:	09 f4       	brne	.+2      	; 0x1062 <USB_Host_ProcessNextHostState+0x48>
    1060:	9b c0       	rjmp	.+310    	; 0x1198 <USB_Host_ProcessNextHostState+0x17e>
    1062:	87 30       	cpi	r24, 0x07	; 7
    1064:	08 f4       	brcc	.+2      	; 0x1068 <USB_Host_ProcessNextHostState+0x4e>
    1066:	8a c0       	rjmp	.+276    	; 0x117c <USB_Host_ProcessNextHostState+0x162>
    1068:	88 30       	cpi	r24, 0x08	; 8
    106a:	09 f4       	brne	.+2      	; 0x106e <USB_Host_ProcessNextHostState+0x54>
    106c:	b3 c0       	rjmp	.+358    	; 0x11d4 <USB_Host_ProcessNextHostState+0x1ba>
    106e:	89 30       	cpi	r24, 0x09	; 9
    1070:	09 f0       	breq	.+2      	; 0x1074 <USB_Host_ProcessNextHostState+0x5a>
    1072:	f2 c0       	rjmp	.+484    	; 0x1258 <USB_Host_ProcessNextHostState+0x23e>
    1074:	d7 c0       	rjmp	.+430    	; 0x1224 <USB_Host_ProcessNextHostState+0x20a>
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
    1076:	00 91 23 01 	lds	r16, 0x0123
    107a:	10 91 24 01 	lds	r17, 0x0124
    107e:	01 15       	cp	r16, r1
    1080:	11 05       	cpc	r17, r1
    1082:	09 f4       	brne	.+2      	; 0x1086 <USB_Host_ProcessNextHostState+0x6c>
    1084:	e9 c0       	rjmp	.+466    	; 0x1258 <USB_Host_ProcessNextHostState+0x23e>
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1086:	81 e0       	ldi	r24, 0x01	; 1
    1088:	2b df       	rcall	.-426    	; 0xee0 <USB_Host_WaitMS>
    108a:	68 2f       	mov	r22, r24
    108c:	88 23       	and	r24, r24
    108e:	31 f0       	breq	.+12     	; 0x109c <USB_Host_ProcessNextHostState+0x82>
				{
					USB_HostState = PostWaitState;
    1090:	80 91 22 01 	lds	r24, 0x0122
    1094:	80 93 2f 01 	sts	0x012F, r24
    1098:	91 e0       	ldi	r25, 0x01	; 1
    109a:	da c0       	rjmp	.+436    	; 0x1250 <USB_Host_ProcessNextHostState+0x236>
					ErrorCode     = HOST_ENUMERROR_WaitStage;
					break;
				}

				if (!(--WaitMSRemaining))
    109c:	c8 01       	movw	r24, r16
    109e:	01 97       	sbiw	r24, 0x01	; 1
    10a0:	90 93 24 01 	sts	0x0124, r25
    10a4:	80 93 23 01 	sts	0x0123, r24
    10a8:	89 2b       	or	r24, r25
    10aa:	09 f0       	breq	.+2      	; 0x10ae <USB_Host_ProcessNextHostState+0x94>
    10ac:	d5 c0       	rjmp	.+426    	; 0x1258 <USB_Host_ProcessNextHostState+0x23e>
				  USB_HostState = PostWaitState;
    10ae:	80 91 22 01 	lds	r24, 0x0122
    10b2:	07 c0       	rjmp	.+14     	; 0x10c2 <USB_Host_ProcessNextHostState+0xa8>
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
    10b4:	88 ee       	ldi	r24, 0xE8	; 232
    10b6:	93 e0       	ldi	r25, 0x03	; 3
    10b8:	90 93 24 01 	sts	0x0124, r25
    10bc:	80 93 23 01 	sts	0x0123, r24

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
    10c0:	83 e0       	ldi	r24, 0x03	; 3
    10c2:	80 93 2f 01 	sts	0x012F, r24
    10c6:	c8 c0       	rjmp	.+400    	; 0x1258 <USB_Host_ProcessNextHostState+0x23e>
			break;
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
    10c8:	80 91 23 01 	lds	r24, 0x0123
    10cc:	90 91 24 01 	lds	r25, 0x0124
    10d0:	01 97       	sbiw	r24, 0x01	; 1
    10d2:	90 93 24 01 	sts	0x0124, r25
    10d6:	80 93 23 01 	sts	0x0123, r24
    10da:	01 96       	adiw	r24, 0x01	; 1
    10dc:	29 f0       	breq	.+10     	; 0x10e8 <USB_Host_ProcessNextHostState+0xce>
    10de:	80 ed       	ldi	r24, 0xD0	; 208
    10e0:	97 e0       	ldi	r25, 0x07	; 7
    10e2:	01 97       	sbiw	r24, 0x01	; 1
    10e4:	f1 f7       	brne	.-4      	; 0x10e2 <USB_Host_ProcessNextHostState+0xc8>
    10e6:	b8 c0       	rjmp	.+368    	; 0x1258 <USB_Host_ProcessNextHostState+0x23e>
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
    10e8:	77 98       	cbi	0x0e, 7	; 14

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
    10ea:	80 91 d8 00 	lds	r24, 0x00D8
    10ee:	80 61       	ori	r24, 0x10	; 16
    10f0:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
    10f4:	80 91 dd 00 	lds	r24, 0x00DD
    10f8:	8b 7f       	andi	r24, 0xFB	; 251
    10fa:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON |=  (1 << UVCONE);
    10fe:	80 91 d7 00 	lds	r24, 0x00D7
    1102:	80 61       	ori	r24, 0x10	; 16
    1104:	80 93 d7 00 	sts	0x00D7, r24
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
    1108:	80 91 dd 00 	lds	r24, 0x00DD
    110c:	82 60       	ori	r24, 0x02	; 2
    110e:	80 93 dd 00 	sts	0x00DD, r24

				USB_OTGPAD_On();
				USB_Host_VBUS_Auto_Enable();
				USB_Host_VBUS_Auto_On();

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
    1112:	84 e0       	ldi	r24, 0x04	; 4
    1114:	d6 cf       	rjmp	.-84     	; 0x10c2 <USB_Host_ProcessNextHostState+0xa8>
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
    1116:	80 91 9f 00 	lds	r24, 0x009F
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
    111a:	80 ff       	sbrs	r24, 0
    111c:	9d c0       	rjmp	.+314    	; 0x1258 <USB_Host_ProcessNextHostState+0x23e>
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
    111e:	80 91 9f 00 	lds	r24, 0x009F
    1122:	8e 7f       	andi	r24, 0xFE	; 254
    1124:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
    1128:	80 91 9f 00 	lds	r24, 0x009F
    112c:	8d 7f       	andi	r24, 0xFD	; 253
    112e:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
    1132:	80 91 df 00 	lds	r24, 0x00DF
    1136:	8d 7f       	andi	r24, 0xFD	; 253
    1138:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
    113c:	80 91 de 00 	lds	r24, 0x00DE
    1140:	82 60       	ori	r24, 0x02	; 2
    1142:	80 93 de 00 	sts	0x00DE, r24
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    1146:	80 91 9e 00 	lds	r24, 0x009E
    114a:	81 60       	ori	r24, 0x01	; 1
    114c:	80 93 9e 00 	sts	0x009E, r24

				USB_INT_Clear(USB_INT_VBERRI);
				USB_INT_Enable(USB_INT_VBERRI);

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
    1150:	ed d0       	rcall	.+474    	; 0x132c <Pipe_ClearPipes>

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
    1152:	10 92 2f 01 	sts	0x012F, r1
    1156:	84 e6       	ldi	r24, 0x64	; 100
    1158:	90 e0       	ldi	r25, 0x00	; 0
    115a:	90 93 24 01 	sts	0x0124, r25
    115e:	80 93 23 01 	sts	0x0123, r24
    1162:	85 e0       	ldi	r24, 0x05	; 5
    1164:	5c c0       	rjmp	.+184    	; 0x121e <USB_Host_ProcessNextHostState+0x204>
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
    1166:	0b df       	rcall	.-490    	; 0xf7e <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
    1168:	10 92 2f 01 	sts	0x012F, r1
    116c:	88 ec       	ldi	r24, 0xC8	; 200
    116e:	90 e0       	ldi	r25, 0x00	; 0
    1170:	90 93 24 01 	sts	0x0124, r25
    1174:	80 93 23 01 	sts	0x0123, r24
    1178:	86 e0       	ldi	r24, 0x06	; 6
    117a:	51 c0       	rjmp	.+162    	; 0x121e <USB_Host_ProcessNextHostState+0x204>
			break;
		case HOST_STATE_Powered_ConfigPipe:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
    117c:	80 e0       	ldi	r24, 0x00	; 0
    117e:	60 e0       	ldi	r22, 0x00	; 0
    1180:	40 e0       	ldi	r20, 0x00	; 0
    1182:	20 e0       	ldi	r18, 0x00	; 0
    1184:	00 e4       	ldi	r16, 0x40	; 64
    1186:	10 e0       	ldi	r17, 0x00	; 0
    1188:	ee 24       	eor	r14, r14
    118a:	72 d0       	rcall	.+228    	; 0x1270 <Pipe_ConfigurePipe>
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
    118c:	80 91 ac 00 	lds	r24, 0x00AC
							   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
							   PIPE_CONTROLPIPE_DEFAULT_SIZE, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
    1190:	87 ff       	sbrs	r24, 7
    1192:	5c c0       	rjmp	.+184    	; 0x124c <USB_Host_ProcessNextHostState+0x232>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
    1194:	87 e0       	ldi	r24, 0x07	; 7
    1196:	95 cf       	rjmp	.-214    	; 0x10c2 <USB_Host_ProcessNextHostState+0xa8>
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
    1198:	a7 e2       	ldi	r26, 0x27	; 39
    119a:	b1 e0       	ldi	r27, 0x01	; 1
    119c:	e4 e1       	ldi	r30, 0x14	; 20
    119e:	f1 e0       	ldi	r31, 0x01	; 1
    11a0:	88 e0       	ldi	r24, 0x08	; 8
    11a2:	01 90       	ld	r0, Z+
    11a4:	0d 92       	st	X+, r0
    11a6:	81 50       	subi	r24, 0x01	; 1
    11a8:	e1 f7       	brne	.-8      	; 0x11a2 <USB_Host_ProcessNextHostState+0x188>
					.wLength       = 8,
				};

			uint8_t DataBuffer[8];

			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
    11aa:	ce 01       	movw	r24, r28
    11ac:	01 96       	adiw	r24, 0x01	; 1
    11ae:	7e d3       	rcall	.+1788   	; 0x18ac <USB_Host_SendControlRequest>
    11b0:	68 2f       	mov	r22, r24
    11b2:	88 23       	and	r24, r24
    11b4:	09 f0       	breq	.+2      	; 0x11b8 <USB_Host_ProcessNextHostState+0x19e>
    11b6:	48 c0       	rjmp	.+144    	; 0x1248 <USB_Host_ProcessNextHostState+0x22e>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_Host_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
    11b8:	88 85       	ldd	r24, Y+8	; 0x08
    11ba:	80 93 1c 01 	sts	0x011C, r24

			USB_Host_ResetDevice();
    11be:	df de       	rcall	.-578    	; 0xf7e <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
    11c0:	10 92 2f 01 	sts	0x012F, r1
    11c4:	88 ec       	ldi	r24, 0xC8	; 200
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	90 93 24 01 	sts	0x0124, r25
    11cc:	80 93 23 01 	sts	0x0123, r24
    11d0:	88 e0       	ldi	r24, 0x08	; 8
    11d2:	25 c0       	rjmp	.+74     	; 0x121e <USB_Host_ProcessNextHostState+0x204>
			break;
		case HOST_STATE_Default_PostReset:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
    11d4:	00 91 1c 01 	lds	r16, 0x011C
    11d8:	80 e0       	ldi	r24, 0x00	; 0
    11da:	60 e0       	ldi	r22, 0x00	; 0
    11dc:	40 e0       	ldi	r20, 0x00	; 0
    11de:	20 e0       	ldi	r18, 0x00	; 0
    11e0:	10 e0       	ldi	r17, 0x00	; 0
    11e2:	ee 24       	eor	r14, r14
    11e4:	45 d0       	rcall	.+138    	; 0x1270 <Pipe_ConfigurePipe>
    11e6:	80 91 ac 00 	lds	r24, 0x00AC
			                   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
			                   USB_Host_ControlPipeSize, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
    11ea:	87 ff       	sbrs	r24, 7
    11ec:	2f c0       	rjmp	.+94     	; 0x124c <USB_Host_ProcessNextHostState+0x232>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
    11ee:	a7 e2       	ldi	r26, 0x27	; 39
    11f0:	b1 e0       	ldi	r27, 0x01	; 1
    11f2:	ec e0       	ldi	r30, 0x0C	; 12
    11f4:	f1 e0       	ldi	r31, 0x01	; 1
    11f6:	88 e0       	ldi	r24, 0x08	; 8
    11f8:	01 90       	ld	r0, Z+
    11fa:	0d 92       	st	X+, r0
    11fc:	81 50       	subi	r24, 0x01	; 1
    11fe:	e1 f7       	brne	.-8      	; 0x11f8 <USB_Host_ProcessNextHostState+0x1de>
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
    1200:	80 e0       	ldi	r24, 0x00	; 0
    1202:	90 e0       	ldi	r25, 0x00	; 0
    1204:	53 d3       	rcall	.+1702   	; 0x18ac <USB_Host_SendControlRequest>
    1206:	68 2f       	mov	r22, r24
    1208:	88 23       	and	r24, r24
    120a:	f1 f4       	brne	.+60     	; 0x1248 <USB_Host_ProcessNextHostState+0x22e>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
    120c:	10 92 2f 01 	sts	0x012F, r1
    1210:	84 e6       	ldi	r24, 0x64	; 100
    1212:	90 e0       	ldi	r25, 0x00	; 0
    1214:	90 93 24 01 	sts	0x0124, r25
    1218:	80 93 23 01 	sts	0x0123, r24
    121c:	89 e0       	ldi	r24, 0x09	; 9
    121e:	80 93 22 01 	sts	0x0122, r24
    1222:	1a c0       	rjmp	.+52     	; 0x1258 <USB_Host_ProcessNextHostState+0x23e>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
    1224:	81 e0       	ldi	r24, 0x01	; 1
    1226:	80 93 a1 00 	sts	0x00A1, r24
			break;
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			USB_HostState = HOST_STATE_Addressed;
    122a:	8a e0       	ldi	r24, 0x0A	; 10
    122c:	80 93 2f 01 	sts	0x012F, r24

			EVENT_USB_Host_DeviceEnumerationComplete();
    1230:	08 da       	rcall	.-3056   	; 0x642 <EVENT_USB_Host_DeviceEnumerationComplete>
    1232:	12 c0       	rjmp	.+36     	; 0x1258 <USB_Host_ProcessNextHostState+0x23e>
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
    1234:	89 2f       	mov	r24, r25
    1236:	e0 d8       	rcall	.-3648   	; 0x3f8 <EVENT_USB_Host_DeviceEnumerationFailed>
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
    1238:	80 91 dd 00 	lds	r24, 0x00DD
    123c:	81 60       	ori	r24, 0x01	; 1
    123e:	80 93 dd 00 	sts	0x00DD, r24

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
    1242:	06 d9       	rcall	.-3572   	; 0x450 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
    1244:	b6 d0       	rcall	.+364    	; 0x13b2 <USB_ResetInterface>
    1246:	08 c0       	rjmp	.+16     	; 0x1258 <USB_Host_ProcessNextHostState+0x23e>
	}
}
    1248:	93 e0       	ldi	r25, 0x03	; 3
    124a:	02 c0       	rjmp	.+4      	; 0x1250 <USB_Host_ProcessNextHostState+0x236>
    124c:	94 e0       	ldi	r25, 0x04	; 4
    124e:	60 e0       	ldi	r22, 0x00	; 0

			EVENT_USB_Host_DeviceEnumerationComplete();
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
    1250:	80 91 2f 01 	lds	r24, 0x012F
    1254:	81 30       	cpi	r24, 0x01	; 1
    1256:	71 f7       	brne	.-36     	; 0x1234 <USB_Host_ProcessNextHostState+0x21a>

		EVENT_USB_Host_DeviceUnattached();

		USB_ResetInterface();
	}
}
    1258:	28 96       	adiw	r28, 0x08	; 8
    125a:	0f b6       	in	r0, 0x3f	; 63
    125c:	f8 94       	cli
    125e:	de bf       	out	0x3e, r29	; 62
    1260:	0f be       	out	0x3f, r0	; 63
    1262:	cd bf       	out	0x3d, r28	; 61
    1264:	cf 91       	pop	r28
    1266:	df 91       	pop	r29
    1268:	1f 91       	pop	r17
    126a:	0f 91       	pop	r16
    126c:	ef 90       	pop	r14
    126e:	08 95       	ret

00001270 <Pipe_ConfigurePipe>:
                        const uint8_t Type,
                        const uint8_t Token,
                        const uint8_t EndpointNumber,
                        const uint16_t Size,
                        const uint8_t Banks)
{
    1270:	ef 92       	push	r14
    1272:	0f 93       	push	r16
    1274:	1f 93       	push	r17
    1276:	e8 2f       	mov	r30, r24
    1278:	7e 2d       	mov	r23, r14

		Pipe_SelectPipe(PNum);
		
		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
    127a:	62 95       	swap	r22
    127c:	66 0f       	add	r22, r22
    127e:	66 0f       	add	r22, r22
    1280:	60 7c       	andi	r22, 0xC0	; 192
    1282:	64 2b       	or	r22, r20
    1284:	2f 70       	andi	r18, 0x0F	; 15
    1286:	62 2b       	or	r22, r18
    1288:	38 2f       	mov	r19, r24
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
    128a:	72 60       	ori	r23, 0x02	; 2
    128c:	45 c0       	rjmp	.+138    	; 0x1318 <Pipe_ConfigurePipe+0xa8>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    128e:	30 93 a7 00 	sts	0x00A7, r19
		uint8_t UPCFG2XTemp;
		uint8_t UPIENXTemp;

		Pipe_SelectPipe(PNum);
		
		if (PNum == Number)
    1292:	3e 17       	cp	r19, r30
    1294:	a1 f4       	brne	.+40     	; 0x12be <Pipe_ConfigurePipe+0x4e>
    1296:	88 e0       	ldi	r24, 0x08	; 8
    1298:	90 e0       	ldi	r25, 0x00	; 0
    129a:	20 e0       	ldi	r18, 0x00	; 0
    129c:	03 c0       	rjmp	.+6      	; 0x12a4 <Pipe_ConfigurePipe+0x34>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
				{
					MaskVal++;
    129e:	2f 5f       	subi	r18, 0xFF	; 255
					CheckBytes <<= 1;
    12a0:	88 0f       	add	r24, r24
    12a2:	99 1f       	adc	r25, r25
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
    12a4:	80 17       	cp	r24, r16
    12a6:	91 07       	cpc	r25, r17
    12a8:	10 f4       	brcc	.+4      	; 0x12ae <Pipe_ConfigurePipe+0x3e>
    12aa:	25 30       	cpi	r18, 0x05	; 5
    12ac:	c1 f7       	brne	.-16     	; 0x129e <Pipe_ConfigurePipe+0x2e>
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
    12ae:	92 2f       	mov	r25, r18
    12b0:	92 95       	swap	r25
    12b2:	90 7f       	andi	r25, 0xF0	; 240
    12b4:	97 2b       	or	r25, r23
    12b6:	56 2f       	mov	r21, r22
    12b8:	40 e0       	ldi	r20, 0x00	; 0
    12ba:	20 e0       	ldi	r18, 0x00	; 0
    12bc:	08 c0       	rjmp	.+16     	; 0x12ce <Pipe_ConfigurePipe+0x5e>
			UPCFG2XTemp = 0;
			UPIENXTemp  = 0;
		}
		else
		{
			UPCFG0XTemp = UPCFG0X;
    12be:	50 91 aa 00 	lds	r21, 0x00AA
			UPCFG1XTemp = UPCFG1X;
    12c2:	90 91 ab 00 	lds	r25, 0x00AB
			UPCFG2XTemp = UPCFG2X;
    12c6:	40 91 ad 00 	lds	r20, 0x00AD
			UPIENXTemp  = UPIENX;
    12ca:	20 91 ae 00 	lds	r18, 0x00AE
		}

		if (!(UPCFG1XTemp & (1 << ALLOC)))
    12ce:	91 ff       	sbrs	r25, 1
    12d0:	22 c0       	rjmp	.+68     	; 0x1316 <Pipe_ConfigurePipe+0xa6>
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
    12d2:	80 91 a9 00 	lds	r24, 0x00A9
    12d6:	8e 7f       	andi	r24, 0xFE	; 254
    12d8:	80 93 a9 00 	sts	0x00A9, r24
		  continue;
		  
		Pipe_DisablePipe();
		UPCFG1X &= ~(1 << ALLOC);
    12dc:	80 91 ab 00 	lds	r24, 0x00AB
    12e0:	8d 7f       	andi	r24, 0xFD	; 253
    12e2:	80 93 ab 00 	sts	0x00AB, r24
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
    12e6:	80 91 a9 00 	lds	r24, 0x00A9
    12ea:	81 60       	ori	r24, 0x01	; 1
    12ec:	80 93 a9 00 	sts	0x00A9, r24

		Pipe_EnablePipe();
		UPCFG0X = UPCFG0XTemp;
    12f0:	50 93 aa 00 	sts	0x00AA, r21
		UPCFG1X = UPCFG1XTemp;
    12f4:	90 93 ab 00 	sts	0x00AB, r25
		UPCFG2X = UPCFG2XTemp;
    12f8:	40 93 ad 00 	sts	0x00AD, r20
		UPIENX  = UPIENXTemp;
    12fc:	20 93 ae 00 	sts	0x00AE, r18

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
    1300:	80 91 a9 00 	lds	r24, 0x00A9
    1304:	80 62       	ori	r24, 0x20	; 32
    1306:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
    130a:	80 91 ac 00 	lds	r24, 0x00AC

		Pipe_SetInfiniteINRequests();
	
		if (!(Pipe_IsConfigured()))
    130e:	87 fd       	sbrc	r24, 7
    1310:	02 c0       	rjmp	.+4      	; 0x1316 <Pipe_ConfigurePipe+0xa6>
    1312:	80 e0       	ldi	r24, 0x00	; 0
    1314:	07 c0       	rjmp	.+14     	; 0x1324 <Pipe_ConfigurePipe+0xb4>

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else	
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
    1316:	3f 5f       	subi	r19, 0xFF	; 255
    1318:	37 30       	cpi	r19, 0x07	; 7
    131a:	08 f4       	brcc	.+2      	; 0x131e <Pipe_ConfigurePipe+0xae>
    131c:	b8 cf       	rjmp	.-144    	; 0x128e <Pipe_ConfigurePipe+0x1e>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    131e:	e0 93 a7 00 	sts	0x00A7, r30
    1322:	81 e0       	ldi	r24, 0x01	; 1
	}
		
	Pipe_SelectPipe(Number);	
	return true;
#endif
}
    1324:	1f 91       	pop	r17
    1326:	0f 91       	pop	r16
    1328:	ef 90       	pop	r14
    132a:	08 95       	ret

0000132c <Pipe_ClearPipes>:

void Pipe_ClearPipes(void)
{
	UPINT = 0;
    132c:	10 92 f8 00 	sts	0x00F8, r1
    1330:	90 e0       	ldi	r25, 0x00	; 0
    1332:	90 93 a7 00 	sts	0x00A7, r25

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
    1336:	10 92 ae 00 	sts	0x00AE, r1
		UPINTX  = 0;
    133a:	10 92 a6 00 	sts	0x00A6, r1
		UPCFG1X = 0;
    133e:	10 92 ab 00 	sts	0x00AB, r1
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
    1342:	80 91 a9 00 	lds	r24, 0x00A9
    1346:	8e 7f       	andi	r24, 0xFE	; 254
    1348:	80 93 a9 00 	sts	0x00A9, r24

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
    134c:	9f 5f       	subi	r25, 0xFF	; 255
    134e:	97 30       	cpi	r25, 0x07	; 7
    1350:	81 f7       	brne	.-32     	; 0x1332 <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
    1352:	08 95       	ret

00001354 <Pipe_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
    1354:	40 91 a2 00 	lds	r20, 0x00A2
    1358:	50 91 a3 00 	lds	r21, 0x00A3
    135c:	24 e6       	ldi	r18, 0x64	; 100
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
    135e:	80 91 aa 00 	lds	r24, 0x00AA

	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
    1362:	80 73       	andi	r24, 0x30	; 48
    1364:	80 31       	cpi	r24, 0x10	; 16
    1366:	29 f4       	brne	.+10     	; 0x1372 <Pipe_WaitUntilReady+0x1e>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    1368:	80 91 a6 00 	lds	r24, 0x00A6
		{
			if (Pipe_IsINReceived())
    136c:	80 ff       	sbrs	r24, 0
    136e:	05 c0       	rjmp	.+10     	; 0x137a <Pipe_WaitUntilReady+0x26>
    1370:	1e c0       	rjmp	.+60     	; 0x13ae <Pipe_WaitUntilReady+0x5a>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
    1372:	80 91 a6 00 	lds	r24, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
    1376:	82 fd       	sbrc	r24, 2
    1378:	1a c0       	rjmp	.+52     	; 0x13ae <Pipe_WaitUntilReady+0x5a>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
    137a:	80 91 a6 00 	lds	r24, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
    137e:	81 ff       	sbrs	r24, 1
    1380:	02 c0       	rjmp	.+4      	; 0x1386 <Pipe_WaitUntilReady+0x32>
    1382:	81 e0       	ldi	r24, 0x01	; 1
    1384:	08 95       	ret
		  return PIPE_READYWAIT_PipeStalled;
		else if (USB_HostState == HOST_STATE_Unattached)
    1386:	80 91 2f 01 	lds	r24, 0x012F
    138a:	81 30       	cpi	r24, 0x01	; 1
    138c:	11 f4       	brne	.+4      	; 0x1392 <Pipe_WaitUntilReady+0x3e>
    138e:	82 e0       	ldi	r24, 0x02	; 2
    1390:	08 95       	ret
    1392:	80 91 a2 00 	lds	r24, 0x00A2
    1396:	90 91 a3 00 	lds	r25, 0x00A3
		  return PIPE_READYWAIT_DeviceDisconnected;

		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    139a:	84 17       	cp	r24, r20
    139c:	95 07       	cpc	r25, r21
    139e:	f9 f2       	breq	.-66     	; 0x135e <Pipe_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    13a0:	22 23       	and	r18, r18
    13a2:	11 f4       	brne	.+4      	; 0x13a8 <Pipe_WaitUntilReady+0x54>
    13a4:	83 e0       	ldi	r24, 0x03	; 3
    13a6:	08 95       	ret
    13a8:	21 50       	subi	r18, 0x01	; 1
    13aa:	ac 01       	movw	r20, r24
    13ac:	d8 cf       	rjmp	.-80     	; 0x135e <Pipe_WaitUntilReady+0xa>
    13ae:	80 e0       	ldi	r24, 0x00	; 0
			  return PIPE_READYWAIT_Timeout;
		}
	}
}
    13b0:	08 95       	ret

000013b2 <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    13b2:	70 d0       	rcall	.+224    	; 0x1494 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    13b4:	77 d0       	rcall	.+238    	; 0x14a4 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    13b6:	80 91 d8 00 	lds	r24, 0x00D8
    13ba:	8f 77       	andi	r24, 0x7F	; 127
    13bc:	80 93 d8 00 	sts	0x00D8, r24
				USBCON |=  (1 << USBE);
    13c0:	80 91 d8 00 	lds	r24, 0x00D8
    13c4:	80 68       	ori	r24, 0x80	; 128
    13c6:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
    13ca:	80 91 d8 00 	lds	r24, 0x00D8
    13ce:	8f 7d       	andi	r24, 0xDF	; 223
    13d0:	80 93 d8 00 	sts	0x00D8, r24
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
    13d4:	80 91 d7 00 	lds	r24, 0x00D7
    13d8:	8f 77       	andi	r24, 0x7F	; 127
    13da:	80 93 d7 00 	sts	0x00D7, r24

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    13de:	8c e0       	ldi	r24, 0x0C	; 12
    13e0:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    13e2:	8e e0       	ldi	r24, 0x0E	; 14
    13e4:	89 bd       	out	0x29, r24	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_CAN_BE_HOST)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));		
    13e6:	09 b4       	in	r0, 0x29	; 41
    13e8:	00 fe       	sbrs	r0, 0
    13ea:	fd cf       	rjmp	.-6      	; 0x13e6 <USB_ResetInterface+0x34>
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState                = HOST_STATE_Unattached;
    13ec:	81 e0       	ldi	r24, 0x01	; 1
    13ee:	80 93 2f 01 	sts	0x012F, r24
	USB_Host_ConfigurationNumber = 0;
    13f2:	10 92 25 01 	sts	0x0125, r1
	USB_Host_ControlPipeSize     = PIPE_CONTROLPIPE_DEFAULT_SIZE;
    13f6:	80 e4       	ldi	r24, 0x40	; 64
    13f8:	80 93 1c 01 	sts	0x011C, r24
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
    13fc:	80 91 d8 00 	lds	r24, 0x00D8
    1400:	80 64       	ori	r24, 0x40	; 64
    1402:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
    1406:	80 91 dd 00 	lds	r24, 0x00DD
    140a:	81 60       	ori	r24, 0x01	; 1
    140c:	80 93 dd 00 	sts	0x00DD, r24
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
    1410:	80 91 dd 00 	lds	r24, 0x00DD
    1414:	84 60       	ori	r24, 0x04	; 4
    1416:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON &= ~(1 << UVCONE);
    141a:	80 91 d7 00 	lds	r24, 0x00D7
    141e:	8f 7e       	andi	r24, 0xEF	; 239
    1420:	80 93 d7 00 	sts	0x00D7, r24

				DDRE   |=  (1 << 7);
    1424:	6f 9a       	sbi	0x0d, 7	; 13
			}

			static inline void USB_Host_VBUS_Manual_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_On(void)
			{
				PORTE  |=  (1 << 7);
    1426:	77 9a       	sbi	0x0e, 7	; 14
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN |= (1 << SRPE);						
    1428:	80 91 de 00 	lds	r24, 0x00DE
    142c:	81 60       	ori	r24, 0x01	; 1
    142e:	80 93 de 00 	sts	0x00DE, r24
						break;
					case USB_INT_RSTI:
						UHIEN  |= (1 << RSTE);
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
    1432:	80 91 de 00 	lds	r24, 0x00DE
    1436:	84 60       	ori	r24, 0x04	; 4
    1438:	80 93 de 00 	sts	0x00DE, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    143c:	80 91 e0 00 	lds	r24, 0x00E0
    1440:	8e 7f       	andi	r24, 0xFE	; 254
    1442:	80 93 e0 00 	sts	0x00E0, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
    1446:	80 91 d8 00 	lds	r24, 0x00D8
    144a:	80 61       	ori	r24, 0x10	; 16
    144c:	80 93 d8 00 	sts	0x00D8, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    1450:	08 95       	ret

00001452 <USB_Init>:

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
    1452:	e7 ed       	ldi	r30, 0xD7	; 215
    1454:	f0 e0       	ldi	r31, 0x00	; 0
    1456:	80 81       	ld	r24, Z
    1458:	81 60       	ori	r24, 0x01	; 1
    145a:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    145c:	81 e0       	ldi	r24, 0x01	; 1
    145e:	80 93 26 01 	sts	0x0126, r24

	USB_ResetInterface();
}
    1462:	a7 cf       	rjmp	.-178    	; 0x13b2 <USB_ResetInterface>

00001464 <USB_Disable>:

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
    1464:	17 d0       	rcall	.+46     	; 0x1494 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    1466:	1e d0       	rcall	.+60     	; 0x14a4 <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
    1468:	e0 ee       	ldi	r30, 0xE0	; 224
    146a:	f0 e0       	ldi	r31, 0x00	; 0
    146c:	80 81       	ld	r24, Z
    146e:	81 60       	ori	r24, 0x01	; 1
    1470:	80 83       	st	Z, r24
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON  &= ~(1 << USBE);
    1472:	a8 ed       	ldi	r26, 0xD8	; 216
    1474:	b0 e0       	ldi	r27, 0x00	; 0
    1476:	8c 91       	ld	r24, X
    1478:	8f 77       	andi	r24, 0x7F	; 127
    147a:	8c 93       	st	X, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    147c:	19 bc       	out	0x29, r1	; 41

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  &= ~(1 << UVREGE);
    147e:	e7 ed       	ldi	r30, 0xD7	; 215
    1480:	f0 e0       	ldi	r31, 0x00	; 0
    1482:	80 81       	ld	r24, Z
    1484:	8e 7f       	andi	r24, 0xFE	; 254
    1486:	80 83       	st	Z, r24
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON  &= ~(1 << OTGPADE);
    1488:	8c 91       	ld	r24, X
    148a:	8f 7e       	andi	r24, 0xEF	; 239
    148c:	8c 93       	st	X, r24

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
    148e:	10 92 26 01 	sts	0x0126, r1
}
    1492:	08 95       	ret

00001494 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
    1494:	e8 ed       	ldi	r30, 0xD8	; 216
    1496:	f0 e0       	ldi	r31, 0x00	; 0
    1498:	80 81       	ld	r24, Z
    149a:	8c 7f       	andi	r24, 0xFC	; 252
    149c:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
    149e:	10 92 a0 00 	sts	0x00A0, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
	#endif
}
    14a2:	08 95       	ret

000014a4 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    14a4:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_BOTH)
	OTGINT = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
    14a8:	10 92 9f 00 	sts	0x009F, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
	#endif
}
    14ac:	08 95       	ret

000014ae <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
    14ae:	1f 92       	push	r1
    14b0:	0f 92       	push	r0
    14b2:	0f b6       	in	r0, 0x3f	; 63
    14b4:	0f 92       	push	r0
    14b6:	0b b6       	in	r0, 0x3b	; 59
    14b8:	0f 92       	push	r0
    14ba:	11 24       	eor	r1, r1
    14bc:	2f 93       	push	r18
    14be:	3f 93       	push	r19
    14c0:	4f 93       	push	r20
    14c2:	5f 93       	push	r21
    14c4:	6f 93       	push	r22
    14c6:	7f 93       	push	r23
    14c8:	8f 93       	push	r24
    14ca:	9f 93       	push	r25
    14cc:	af 93       	push	r26
    14ce:	bf 93       	push	r27
    14d0:	ef 93       	push	r30
    14d2:	ff 93       	push	r31
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
    14d4:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	#if defined(USB_CAN_BE_HOST)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
    14d8:	85 ff       	sbrs	r24, 5
    14da:	0a c0       	rjmp	.+20     	; 0x14f0 <__vector_10+0x42>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
    14dc:	80 91 a0 00 	lds	r24, 0x00A0
    14e0:	85 ff       	sbrs	r24, 5
    14e2:	06 c0       	rjmp	.+12     	; 0x14f0 <__vector_10+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
    14e4:	80 91 9f 00 	lds	r24, 0x009F
    14e8:	8f 7d       	andi	r24, 0xDF	; 223
    14ea:	80 93 9f 00 	sts	0x009F, r24
	{
		USB_INT_Clear(USB_INT_HSOFI);

		EVENT_USB_Host_StartOfFrame();
    14ee:	b4 d1       	rcall	.+872    	; 0x1858 <USB_Event_Stub>
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
    14f0:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
    14f4:	81 ff       	sbrs	r24, 1
    14f6:	16 c0       	rjmp	.+44     	; 0x1524 <__vector_10+0x76>
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
					case USB_INT_DCONNI:
						return (UHIEN  & (1 << DCONNE));
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
    14f8:	80 91 a0 00 	lds	r24, 0x00A0
    14fc:	81 ff       	sbrs	r24, 1
    14fe:	12 c0       	rjmp	.+36     	; 0x1524 <__vector_10+0x76>
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
    1500:	80 91 9f 00 	lds	r24, 0x009F
    1504:	8d 7f       	andi	r24, 0xFD	; 253
    1506:	80 93 9f 00 	sts	0x009F, r24
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
    150a:	80 91 9f 00 	lds	r24, 0x009F
    150e:	8e 7f       	andi	r24, 0xFE	; 254
    1510:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
    1514:	80 91 a0 00 	lds	r24, 0x00A0
    1518:	8d 7f       	andi	r24, 0xFD	; 253
    151a:	80 93 a0 00 	sts	0x00A0, r24
	{
		USB_INT_Clear(USB_INT_DDISCI);
		USB_INT_Clear(USB_INT_DCONNI);
		USB_INT_Disable(USB_INT_DDISCI);

		EVENT_USB_Host_DeviceUnattached();
    151e:	0e 94 28 02 	call	0x450	; 0x450 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
    1522:	47 df       	rcall	.-370    	; 0x13b2 <USB_ResetInterface>
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
    1524:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
    1528:	81 ff       	sbrs	r24, 1
    152a:	16 c0       	rjmp	.+44     	; 0x1558 <__vector_10+0xaa>
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
    152c:	80 91 de 00 	lds	r24, 0x00DE
    1530:	81 ff       	sbrs	r24, 1
    1532:	12 c0       	rjmp	.+36     	; 0x1558 <__vector_10+0xaa>
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
    1534:	80 91 df 00 	lds	r24, 0x00DF
    1538:	8d 7f       	andi	r24, 0xFD	; 253
    153a:	80 93 df 00 	sts	0x00DF, r24
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
    153e:	77 98       	cbi	0x0e, 7	; 14
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
    1540:	80 91 dd 00 	lds	r24, 0x00DD
    1544:	81 60       	ori	r24, 0x01	; 1
    1546:	80 93 dd 00 	sts	0x00DD, r24
		USB_INT_Clear(USB_INT_VBERRI);

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
    154a:	80 e0       	ldi	r24, 0x00	; 0
    154c:	5d d8       	rcall	.-3910   	; 0x608 <EVENT_USB_Host_HostError>
		EVENT_USB_Host_DeviceUnattached();
    154e:	0e 94 28 02 	call	0x450	; 0x450 <EVENT_USB_Host_DeviceUnattached>

		USB_HostState = HOST_STATE_Unattached;
    1552:	81 e0       	ldi	r24, 0x01	; 1
    1554:	80 93 2f 01 	sts	0x012F, r24
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
					case USB_INT_SRPI:
						return (OTGINT & (1 << SRPI));
    1558:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
    155c:	80 ff       	sbrs	r24, 0
    155e:	18 c0       	rjmp	.+48     	; 0x1590 <__vector_10+0xe2>
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
					case USB_INT_SRPI:
						return (OTGIEN & (1 << SRPE));
    1560:	80 91 de 00 	lds	r24, 0x00DE
    1564:	80 ff       	sbrs	r24, 0
    1566:	14 c0       	rjmp	.+40     	; 0x1590 <__vector_10+0xe2>
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
						break;
					case USB_INT_SRPI:
						OTGINT &= ~(1 << SRPI);
    1568:	80 91 df 00 	lds	r24, 0x00DF
    156c:	8e 7f       	andi	r24, 0xFE	; 254
    156e:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_VBERRI:
						OTGIEN &= ~(1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN &= ~(1 << SRPE);						
    1572:	80 91 de 00 	lds	r24, 0x00DE
    1576:	8e 7f       	andi	r24, 0xFE	; 254
    1578:	80 93 de 00 	sts	0x00DE, r24
	{
		USB_INT_Clear(USB_INT_SRPI);
		USB_INT_Disable(USB_INT_SRPI);

		EVENT_USB_Host_DeviceAttached();
    157c:	0e 94 31 02 	call	0x462	; 0x462 <EVENT_USB_Host_DeviceAttached>
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
    1580:	80 91 a0 00 	lds	r24, 0x00A0
    1584:	82 60       	ori	r24, 0x02	; 2
    1586:	80 93 a0 00 	sts	0x00A0, r24

		USB_INT_Enable(USB_INT_DDISCI);

		USB_HostState = HOST_STATE_Powered;
    158a:	82 e0       	ldi	r24, 0x02	; 2
    158c:	80 93 2f 01 	sts	0x012F, r24
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
    1590:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
    1594:	82 ff       	sbrs	r24, 2
    1596:	10 c0       	rjmp	.+32     	; 0x15b8 <__vector_10+0x10a>
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
    1598:	80 91 de 00 	lds	r24, 0x00DE
    159c:	82 ff       	sbrs	r24, 2
    159e:	0c c0       	rjmp	.+24     	; 0x15b8 <__vector_10+0x10a>
						break;
					case USB_INT_RSTI:
						UHINT  &= ~(1 << RSTI);
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
    15a0:	80 91 df 00 	lds	r24, 0x00DF
    15a4:	8b 7f       	andi	r24, 0xFB	; 251
    15a6:	80 93 df 00 	sts	0x00DF, r24
	{
		USB_INT_Clear(USB_INT_BCERRI);

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
    15aa:	82 e0       	ldi	r24, 0x02	; 2
    15ac:	60 e0       	ldi	r22, 0x00	; 0
    15ae:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <EVENT_USB_Host_DeviceEnumerationFailed>
		EVENT_USB_Host_DeviceUnattached();
    15b2:	0e 94 28 02 	call	0x450	; 0x450 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
    15b6:	fd de       	rcall	.-518    	; 0x13b2 <USB_ResetInterface>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    15b8:	ff 91       	pop	r31
    15ba:	ef 91       	pop	r30
    15bc:	bf 91       	pop	r27
    15be:	af 91       	pop	r26
    15c0:	9f 91       	pop	r25
    15c2:	8f 91       	pop	r24
    15c4:	7f 91       	pop	r23
    15c6:	6f 91       	pop	r22
    15c8:	5f 91       	pop	r21
    15ca:	4f 91       	pop	r20
    15cc:	3f 91       	pop	r19
    15ce:	2f 91       	pop	r18
    15d0:	0f 90       	pop	r0
    15d2:	0b be       	out	0x3b, r0	; 59
    15d4:	0f 90       	pop	r0
    15d6:	0f be       	out	0x3f, r0	; 63
    15d8:	0f 90       	pop	r0
    15da:	1f 90       	pop	r1
    15dc:	18 95       	reti

000015de <Pipe_Read_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    15de:	bf 92       	push	r11
    15e0:	cf 92       	push	r12
    15e2:	df 92       	push	r13
    15e4:	ef 92       	push	r14
    15e6:	ff 92       	push	r15
    15e8:	0f 93       	push	r16
    15ea:	1f 93       	push	r17
    15ec:	cf 93       	push	r28
    15ee:	df 93       	push	r29
    15f0:	18 2f       	mov	r17, r24
    15f2:	09 2f       	mov	r16, r25
    15f4:	7b 01       	movw	r14, r22
    15f6:	6a 01       	movw	r12, r20
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    15f8:	80 91 aa 00 	lds	r24, 0x00AA
    15fc:	8f 7c       	andi	r24, 0xCF	; 207
    15fe:	80 61       	ori	r24, 0x10	; 16
    1600:	80 93 aa 00 	sts	0x00AA, r24
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
    1604:	a7 de       	rcall	.-690    	; 0x1354 <Pipe_WaitUntilReady>
    1606:	b8 2e       	mov	r11, r24
    1608:	88 23       	and	r24, r24
    160a:	a9 f5       	brne	.+106    	; 0x1676 <Pipe_Read_Stream_LE+0x98>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    160c:	81 2f       	mov	r24, r17
    160e:	90 2f       	mov	r25, r16
    1610:	9c 01       	movw	r18, r24
    1612:	e9 01       	movw	r28, r18
	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
    1614:	c1 14       	cp	r12, r1
    1616:	d1 04       	cpc	r13, r1
    1618:	39 f0       	breq	.+14     	; 0x1628 <Pipe_Read_Stream_LE+0x4a>
	{
		Length -= *BytesProcessed;
    161a:	f6 01       	movw	r30, r12
    161c:	80 81       	ld	r24, Z
    161e:	91 81       	ldd	r25, Z+1	; 0x01
    1620:	e8 1a       	sub	r14, r24
    1622:	f9 0a       	sbc	r15, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    1624:	c8 0f       	add	r28, r24
    1626:	d9 1f       	adc	r29, r25
    1628:	00 e0       	ldi	r16, 0x00	; 0
    162a:	10 e0       	ldi	r17, 0x00	; 0
    162c:	21 c0       	rjmp	.+66     	; 0x1670 <Pipe_Read_Stream_LE+0x92>
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
    162e:	80 91 a6 00 	lds	r24, 0x00A6
	}
	
	while (Length)
	{
		if (!(Pipe_IsReadWriteAllowed()))
    1632:	85 fd       	sbrc	r24, 5
    1634:	15 c0       	rjmp	.+42     	; 0x1660 <Pipe_Read_Stream_LE+0x82>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1636:	80 91 a6 00 	lds	r24, 0x00A6
    163a:	8e 77       	andi	r24, 0x7E	; 126
    163c:	80 93 a6 00 	sts	0x00A6, r24
		{
			TEMPLATE_CLEAR_PIPE();

			if (BytesProcessed != NULL)
    1640:	c1 14       	cp	r12, r1
    1642:	d1 04       	cpc	r13, r1
    1644:	49 f0       	breq	.+18     	; 0x1658 <Pipe_Read_Stream_LE+0x7a>
			{
				*BytesProcessed += BytesInTransfer;
    1646:	f6 01       	movw	r30, r12
    1648:	80 81       	ld	r24, Z
    164a:	91 81       	ldd	r25, Z+1	; 0x01
    164c:	80 0f       	add	r24, r16
    164e:	91 1f       	adc	r25, r17
    1650:	91 83       	std	Z+1, r25	; 0x01
    1652:	80 83       	st	Z, r24
    1654:	84 e0       	ldi	r24, 0x04	; 4
    1656:	10 c0       	rjmp	.+32     	; 0x1678 <Pipe_Read_Stream_LE+0x9a>
				return PIPE_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
    1658:	7d de       	rcall	.-774    	; 0x1354 <Pipe_WaitUntilReady>
    165a:	88 23       	and	r24, r24
    165c:	49 f0       	breq	.+18     	; 0x1670 <Pipe_Read_Stream_LE+0x92>
    165e:	0c c0       	rjmp	.+24     	; 0x1678 <Pipe_Read_Stream_LE+0x9a>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    1660:	80 91 af 00 	lds	r24, 0x00AF
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    1664:	89 93       	st	Y+, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    1666:	08 94       	sec
    1668:	e1 08       	sbc	r14, r1
    166a:	f1 08       	sbc	r15, r1
			BytesInTransfer++;
    166c:	0f 5f       	subi	r16, 0xFF	; 255
    166e:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}
	
	while (Length)
    1670:	e1 14       	cp	r14, r1
    1672:	f1 04       	cpc	r15, r1
    1674:	e1 f6       	brne	.-72     	; 0x162e <Pipe_Read_Stream_LE+0x50>
    1676:	8b 2d       	mov	r24, r11
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
    1678:	df 91       	pop	r29
    167a:	cf 91       	pop	r28
    167c:	1f 91       	pop	r17
    167e:	0f 91       	pop	r16
    1680:	ff 90       	pop	r15
    1682:	ef 90       	pop	r14
    1684:	df 90       	pop	r13
    1686:	cf 90       	pop	r12
    1688:	bf 90       	pop	r11
    168a:	08 95       	ret

0000168c <Pipe_Discard_Stream>:

#include "PipeStream_AVR8.h"

uint8_t Pipe_Discard_Stream(uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    168c:	df 92       	push	r13
    168e:	ef 92       	push	r14
    1690:	ff 92       	push	r15
    1692:	0f 93       	push	r16
    1694:	1f 93       	push	r17
    1696:	cf 93       	push	r28
    1698:	df 93       	push	r29
    169a:	8c 01       	movw	r16, r24
    169c:	7b 01       	movw	r14, r22
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    169e:	80 91 aa 00 	lds	r24, 0x00AA
    16a2:	8f 7c       	andi	r24, 0xCF	; 207
    16a4:	80 61       	ori	r24, 0x10	; 16
    16a6:	80 93 aa 00 	sts	0x00AA, r24
	uint8_t  ErrorCode;
	uint16_t BytesInTransfer = 0;
	
	Pipe_SetPipeToken(PIPE_TOKEN_IN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
    16aa:	54 de       	rcall	.-856    	; 0x1354 <Pipe_WaitUntilReady>
    16ac:	d8 2e       	mov	r13, r24
    16ae:	88 23       	and	r24, r24
    16b0:	61 f5       	brne	.+88     	; 0x170a <Pipe_Discard_Stream+0x7e>
	  return ErrorCode;

	if (BytesProcessed != NULL)
    16b2:	e1 14       	cp	r14, r1
    16b4:	f1 04       	cpc	r15, r1
    16b6:	29 f0       	breq	.+10     	; 0x16c2 <Pipe_Discard_Stream+0x36>
	  Length -= *BytesProcessed;
    16b8:	f7 01       	movw	r30, r14
    16ba:	80 81       	ld	r24, Z
    16bc:	91 81       	ldd	r25, Z+1	; 0x01
    16be:	08 1b       	sub	r16, r24
    16c0:	19 0b       	sbc	r17, r25
    16c2:	c0 e0       	ldi	r28, 0x00	; 0
    16c4:	d0 e0       	ldi	r29, 0x00	; 0
    16c6:	1e c0       	rjmp	.+60     	; 0x1704 <Pipe_Discard_Stream+0x78>
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
    16c8:	80 91 a6 00 	lds	r24, 0x00A6

	while (Length)
	{
		if (!(Pipe_IsReadWriteAllowed()))
    16cc:	85 fd       	sbrc	r24, 5
    16ce:	15 c0       	rjmp	.+42     	; 0x16fa <Pipe_Discard_Stream+0x6e>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    16d0:	80 91 a6 00 	lds	r24, 0x00A6
    16d4:	8e 77       	andi	r24, 0x7E	; 126
    16d6:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearIN();
				
			if (BytesProcessed != NULL)
    16da:	e1 14       	cp	r14, r1
    16dc:	f1 04       	cpc	r15, r1
    16de:	49 f0       	breq	.+18     	; 0x16f2 <Pipe_Discard_Stream+0x66>
			{
				*BytesProcessed += BytesInTransfer;
    16e0:	f7 01       	movw	r30, r14
    16e2:	80 81       	ld	r24, Z
    16e4:	91 81       	ldd	r25, Z+1	; 0x01
    16e6:	8c 0f       	add	r24, r28
    16e8:	9d 1f       	adc	r25, r29
    16ea:	91 83       	std	Z+1, r25	; 0x01
    16ec:	80 83       	st	Z, r24
    16ee:	84 e0       	ldi	r24, 0x04	; 4
    16f0:	0d c0       	rjmp	.+26     	; 0x170c <Pipe_Discard_Stream+0x80>
				return PIPE_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
    16f2:	30 de       	rcall	.-928    	; 0x1354 <Pipe_WaitUntilReady>
    16f4:	88 23       	and	r24, r24
    16f6:	31 f0       	breq	.+12     	; 0x1704 <Pipe_Discard_Stream+0x78>
    16f8:	09 c0       	rjmp	.+18     	; 0x170c <Pipe_Discard_Stream+0x80>
			static inline void Pipe_Discard_8(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Discard_8(void)
			{
				uint8_t Dummy;

				Dummy = UPDATX;
    16fa:	80 91 af 00 	lds	r24, 0x00AF
		}
		else
		{
			Pipe_Discard_8();
			
			Length--;
    16fe:	01 50       	subi	r16, 0x01	; 1
    1700:	10 40       	sbci	r17, 0x00	; 0
			BytesInTransfer++;
    1702:	21 96       	adiw	r28, 0x01	; 1
	  return ErrorCode;

	if (BytesProcessed != NULL)
	  Length -= *BytesProcessed;

	while (Length)
    1704:	01 15       	cp	r16, r1
    1706:	11 05       	cpc	r17, r1
    1708:	f9 f6       	brne	.-66     	; 0x16c8 <Pipe_Discard_Stream+0x3c>
    170a:	8d 2d       	mov	r24, r13
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
    170c:	df 91       	pop	r29
    170e:	cf 91       	pop	r28
    1710:	1f 91       	pop	r17
    1712:	0f 91       	pop	r16
    1714:	ff 90       	pop	r15
    1716:	ef 90       	pop	r14
    1718:	df 90       	pop	r13
    171a:	08 95       	ret

0000171c <USB_GetNextDescriptorComp>:

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
    171c:	af 92       	push	r10
    171e:	bf 92       	push	r11
    1720:	cf 92       	push	r12
    1722:	df 92       	push	r13
    1724:	ef 92       	push	r14
    1726:	ff 92       	push	r15
    1728:	0f 93       	push	r16
    172a:	1f 93       	push	r17
    172c:	cf 93       	push	r28
    172e:	df 93       	push	r29
    1730:	7c 01       	movw	r14, r24
    1732:	eb 01       	movw	r28, r22
    1734:	6a 01       	movw	r12, r20
    1736:	24 c0       	rjmp	.+72     	; 0x1780 <USB_GetNextDescriptorComp+0x64>
	uint8_t ErrorCode;

	while (*BytesRem)
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
    1738:	e8 81       	ld	r30, Y
    173a:	f9 81       	ldd	r31, Y+1	; 0x01
    173c:	be 2e       	mov	r11, r30
    173e:	af 2e       	mov	r10, r31
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc)
			{
				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;
    1740:	80 81       	ld	r24, Z
    1742:	90 e0       	ldi	r25, 0x00	; 0
    1744:	98 01       	movw	r18, r16
    1746:	80 17       	cp	r24, r16
    1748:	91 07       	cpc	r25, r17
    174a:	08 f4       	brcc	.+2      	; 0x174e <USB_GetNextDescriptorComp+0x32>
    174c:	9c 01       	movw	r18, r24
				
				if (*BytesRem < CurrDescriptorSize)
				  CurrDescriptorSize = *BytesRem;

				*CurrConfigLoc  = (void*)((uintptr_t)*CurrConfigLoc + CurrDescriptorSize);
    174e:	e2 0f       	add	r30, r18
    1750:	f3 1f       	adc	r31, r19
    1752:	f9 83       	std	Y+1, r31	; 0x01
    1754:	e8 83       	st	Y, r30
				*BytesRem      -= CurrDescriptorSize;
    1756:	f7 01       	movw	r30, r14
    1758:	80 81       	ld	r24, Z
    175a:	91 81       	ldd	r25, Z+1	; 0x01
    175c:	82 1b       	sub	r24, r18
    175e:	93 0b       	sbc	r25, r19
    1760:	91 83       	std	Z+1, r25	; 0x01
    1762:	80 83       	st	Z, r24
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
    1764:	88 81       	ld	r24, Y
    1766:	99 81       	ldd	r25, Y+1	; 0x01
    1768:	f6 01       	movw	r30, r12
    176a:	09 95       	icall
    176c:	82 30       	cpi	r24, 0x02	; 2
    176e:	41 f0       	breq	.+16     	; 0x1780 <USB_GetNextDescriptorComp+0x64>
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
    1770:	81 30       	cpi	r24, 0x01	; 1
    1772:	69 f4       	brne	.+26     	; 0x178e <USB_GetNextDescriptorComp+0x72>
			{
				*CurrConfigLoc = PrevDescLoc;
    1774:	b8 82       	st	Y, r11
    1776:	a9 82       	std	Y+1, r10	; 0x01
				*BytesRem      = PrevBytesRem;
    1778:	f7 01       	movw	r30, r14
    177a:	11 83       	std	Z+1, r17	; 0x01
    177c:	00 83       	st	Z, r16
    177e:	07 c0       	rjmp	.+14     	; 0x178e <USB_GetNextDescriptorComp+0x72>
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
	uint8_t ErrorCode;

	while (*BytesRem)
    1780:	f7 01       	movw	r30, r14
    1782:	00 81       	ld	r16, Z
    1784:	11 81       	ldd	r17, Z+1	; 0x01
    1786:	01 15       	cp	r16, r1
    1788:	11 05       	cpc	r17, r1
    178a:	b1 f6       	brne	.-84     	; 0x1738 <USB_GetNextDescriptorComp+0x1c>
    178c:	82 e0       	ldi	r24, 0x02	; 2
			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
}
    178e:	df 91       	pop	r29
    1790:	cf 91       	pop	r28
    1792:	1f 91       	pop	r17
    1794:	0f 91       	pop	r16
    1796:	ff 90       	pop	r15
    1798:	ef 90       	pop	r14
    179a:	df 90       	pop	r13
    179c:	cf 90       	pop	r12
    179e:	bf 90       	pop	r11
    17a0:	af 90       	pop	r10
    17a2:	08 95       	ret

000017a4 <USB_Host_GetDeviceConfigDescriptor>:
#if defined(USB_CAN_BE_HOST)
uint8_t USB_Host_GetDeviceConfigDescriptor(const uint8_t ConfigNumber,
                                           uint16_t* const ConfigSizePtr,
                                           void* const BufferPtr,
                                           const uint16_t BufferSize)
{
    17a4:	cf 92       	push	r12
    17a6:	df 92       	push	r13
    17a8:	ef 92       	push	r14
    17aa:	ff 92       	push	r15
    17ac:	0f 93       	push	r16
    17ae:	1f 93       	push	r17
    17b0:	df 93       	push	r29
    17b2:	cf 93       	push	r28
    17b4:	cd b7       	in	r28, 0x3d	; 61
    17b6:	de b7       	in	r29, 0x3e	; 62
    17b8:	29 97       	sbiw	r28, 0x09	; 9
    17ba:	0f b6       	in	r0, 0x3f	; 63
    17bc:	f8 94       	cli
    17be:	de bf       	out	0x3e, r29	; 62
    17c0:	0f be       	out	0x3f, r0	; 63
    17c2:	cd bf       	out	0x3d, r28	; 61
    17c4:	6b 01       	movw	r12, r22
    17c6:	8a 01       	movw	r16, r20
    17c8:	79 01       	movw	r14, r18
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
    17ca:	90 e8       	ldi	r25, 0x80	; 128
    17cc:	90 93 27 01 	sts	0x0127, r25
    17d0:	96 e0       	ldi	r25, 0x06	; 6
    17d2:	90 93 28 01 	sts	0x0128, r25
    17d6:	90 e0       	ldi	r25, 0x00	; 0
    17d8:	01 97       	sbiw	r24, 0x01	; 1
    17da:	92 60       	ori	r25, 0x02	; 2
    17dc:	90 93 2a 01 	sts	0x012A, r25
    17e0:	80 93 29 01 	sts	0x0129, r24
    17e4:	10 92 2c 01 	sts	0x012C, r1
    17e8:	10 92 2b 01 	sts	0x012B, r1
    17ec:	89 e0       	ldi	r24, 0x09	; 9
    17ee:	90 e0       	ldi	r25, 0x00	; 0
    17f0:	90 93 2e 01 	sts	0x012E, r25
    17f4:	80 93 2d 01 	sts	0x012D, r24
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    17f8:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = sizeof(USB_Descriptor_Configuration_Header_t),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(ConfigHeader)) != HOST_SENDCONTROL_Successful)
    17fc:	ce 01       	movw	r24, r28
    17fe:	01 96       	adiw	r24, 0x01	; 1
    1800:	55 d0       	rcall	.+170    	; 0x18ac <USB_Host_SendControlRequest>
    1802:	28 2f       	mov	r18, r24
    1804:	88 23       	and	r24, r24
    1806:	c1 f4       	brne	.+48     	; 0x1838 <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);
    1808:	8b 81       	ldd	r24, Y+3	; 0x03
    180a:	9c 81       	ldd	r25, Y+4	; 0x04
    180c:	f6 01       	movw	r30, r12
    180e:	91 83       	std	Z+1, r25	; 0x01
    1810:	80 83       	st	Z, r24

	if (*ConfigSizePtr > BufferSize)
    1812:	e8 16       	cp	r14, r24
    1814:	f9 06       	cpc	r15, r25
    1816:	10 f4       	brcc	.+4      	; 0x181c <USB_Host_GetDeviceConfigDescriptor+0x78>
    1818:	25 e0       	ldi	r18, 0x05	; 5
    181a:	0e c0       	rjmp	.+28     	; 0x1838 <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return HOST_GETCONFIG_BuffOverflow;

	USB_ControlRequest.wLength = *ConfigSizePtr;
    181c:	90 93 2e 01 	sts	0x012E, r25
    1820:	80 93 2d 01 	sts	0x012D, r24

	if ((ErrorCode = USB_Host_SendControlRequest(BufferPtr)) != HOST_SENDCONTROL_Successful)
    1824:	c8 01       	movw	r24, r16
    1826:	42 d0       	rcall	.+132    	; 0x18ac <USB_Host_SendControlRequest>
    1828:	28 2f       	mov	r18, r24
    182a:	88 23       	and	r24, r24
    182c:	29 f4       	brne	.+10     	; 0x1838 <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
    182e:	f8 01       	movw	r30, r16
    1830:	81 81       	ldd	r24, Z+1	; 0x01
    1832:	82 30       	cpi	r24, 0x02	; 2
    1834:	09 f0       	breq	.+2      	; 0x1838 <USB_Host_GetDeviceConfigDescriptor+0x94>
    1836:	26 e0       	ldi	r18, 0x06	; 6
	  return HOST_GETCONFIG_InvalidData;

	return HOST_GETCONFIG_Successful;
}
    1838:	82 2f       	mov	r24, r18
    183a:	29 96       	adiw	r28, 0x09	; 9
    183c:	0f b6       	in	r0, 0x3f	; 63
    183e:	f8 94       	cli
    1840:	de bf       	out	0x3e, r29	; 62
    1842:	0f be       	out	0x3f, r0	; 63
    1844:	cd bf       	out	0x3d, r28	; 61
    1846:	cf 91       	pop	r28
    1848:	df 91       	pop	r29
    184a:	1f 91       	pop	r17
    184c:	0f 91       	pop	r16
    184e:	ff 90       	pop	r15
    1850:	ef 90       	pop	r14
    1852:	df 90       	pop	r13
    1854:	cf 90       	pop	r12
    1856:	08 95       	ret

00001858 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
    1858:	08 95       	ret

0000185a <USB_Host_WaitForIOS>:

	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
    185a:	1f 93       	push	r17
    185c:	cf 93       	push	r28
    185e:	df 93       	push	r29
    1860:	18 2f       	mov	r17, r24
    1862:	c8 ee       	ldi	r28, 0xE8	; 232
    1864:	d3 e0       	ldi	r29, 0x03	; 3
    1866:	09 c0       	rjmp	.+18     	; 0x187a <USB_Host_WaitForIOS+0x20>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1868:	81 e0       	ldi	r24, 0x01	; 1
    186a:	3a db       	rcall	.-2444   	; 0xee0 <USB_Host_WaitMS>
    186c:	88 23       	and	r24, r24
    186e:	d1 f4       	brne	.+52     	; 0x18a4 <USB_Host_WaitForIOS+0x4a>
		  return ErrorCode;

		if (!(TimeoutCounter--))
    1870:	20 97       	sbiw	r28, 0x00	; 0
    1872:	11 f4       	brne	.+4      	; 0x1878 <USB_Host_WaitForIOS+0x1e>
    1874:	84 e0       	ldi	r24, 0x04	; 4
    1876:	16 c0       	rjmp	.+44     	; 0x18a4 <USB_Host_WaitForIOS+0x4a>
    1878:	21 97       	sbiw	r28, 0x01	; 1
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    187a:	11 23       	and	r17, r17
    187c:	29 f4       	brne	.+10     	; 0x1888 <USB_Host_WaitForIOS+0x2e>
			 *  \return Boolean \c true if the current pipe is ready for a SETUP packet, \c false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
    187e:	80 91 a6 00 	lds	r24, 0x00A6
    1882:	83 ff       	sbrs	r24, 3
    1884:	f1 cf       	rjmp	.-30     	; 0x1868 <USB_Host_WaitForIOS+0xe>
    1886:	0d c0       	rjmp	.+26     	; 0x18a2 <USB_Host_WaitForIOS+0x48>
    1888:	11 30       	cpi	r17, 0x01	; 1
    188a:	29 f4       	brne	.+10     	; 0x1896 <USB_Host_WaitForIOS+0x3c>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    188c:	80 91 a6 00 	lds	r24, 0x00A6
    1890:	80 ff       	sbrs	r24, 0
    1892:	ea cf       	rjmp	.-44     	; 0x1868 <USB_Host_WaitForIOS+0xe>
    1894:	06 c0       	rjmp	.+12     	; 0x18a2 <USB_Host_WaitForIOS+0x48>
    1896:	12 30       	cpi	r17, 0x02	; 2
    1898:	39 f7       	brne	.-50     	; 0x1868 <USB_Host_WaitForIOS+0xe>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
    189a:	80 91 a6 00 	lds	r24, 0x00A6
    189e:	82 ff       	sbrs	r24, 2
    18a0:	e3 cf       	rjmp	.-58     	; 0x1868 <USB_Host_WaitForIOS+0xe>
    18a2:	80 e0       	ldi	r24, 0x00	; 0
		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
}
    18a4:	df 91       	pop	r29
    18a6:	cf 91       	pop	r28
    18a8:	1f 91       	pop	r17
    18aa:	08 95       	ret

000018ac <USB_Host_SendControlRequest>:
#include "HostStandardReq.h"

uint8_t USB_Host_ConfigurationNumber;

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
    18ac:	ff 92       	push	r15
    18ae:	0f 93       	push	r16
    18b0:	1f 93       	push	r17
    18b2:	cf 93       	push	r28
    18b4:	df 93       	push	r29
    18b6:	18 2f       	mov	r17, r24
    18b8:	09 2f       	mov	r16, r25
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
    18ba:	f0 90 9e 00 	lds	r15, 0x009E
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
	bool     BusSuspended = USB_Host_IsBusSuspended();
	uint8_t  ReturnStatus = HOST_SENDCONTROL_Successful;
	uint16_t DataLen      = USB_ControlRequest.wLength;
    18be:	c0 91 2d 01 	lds	r28, 0x012D
    18c2:	d0 91 2e 01 	lds	r29, 0x012E
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    18c6:	80 91 9e 00 	lds	r24, 0x009E
    18ca:	81 60       	ori	r24, 0x01	; 1
    18cc:	80 93 9e 00 	sts	0x009E, r24

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    18d0:	81 e0       	ldi	r24, 0x01	; 1
    18d2:	06 db       	rcall	.-2548   	; 0xee0 <USB_Host_WaitMS>
    18d4:	98 2f       	mov	r25, r24
    18d6:	88 23       	and	r24, r24
    18d8:	09 f0       	breq	.+2      	; 0x18dc <USB_Host_SendControlRequest+0x30>
    18da:	d7 c0       	rjmp	.+430    	; 0x1a8a <USB_Host_SendControlRequest+0x1de>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    18dc:	80 91 aa 00 	lds	r24, 0x00AA
    18e0:	8f 7c       	andi	r24, 0xCF	; 207
    18e2:	80 93 aa 00 	sts	0x00AA, r24

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
    18e6:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
    18ea:	80 91 a6 00 	lds	r24, 0x00A6
    18ee:	8f 7e       	andi	r24, 0xEF	; 239
    18f0:	80 93 a6 00 	sts	0x00A6, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    18f4:	80 91 a9 00 	lds	r24, 0x00A9
    18f8:	8f 7b       	andi	r24, 0xBF	; 191
    18fa:	80 93 a9 00 	sts	0x00A9, r24
    18fe:	e7 e2       	ldi	r30, 0x27	; 39
    1900:	f1 e0       	ldi	r31, 0x01	; 1
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
	  Pipe_Write_8(*(HeaderStream++));	
    1902:	81 91       	ld	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    1904:	80 93 af 00 	sts	0x00AF, r24
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
    1908:	81 e0       	ldi	r24, 0x01	; 1
    190a:	ef 32       	cpi	r30, 0x2F	; 47
    190c:	f8 07       	cpc	r31, r24
    190e:	c9 f7       	brne	.-14     	; 0x1902 <USB_Host_SendControlRequest+0x56>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
    1910:	80 91 a6 00 	lds	r24, 0x00A6
    1914:	87 77       	andi	r24, 0x77	; 119
    1916:	80 93 a6 00 	sts	0x00A6, r24
	  Pipe_Write_8(*(HeaderStream++));	
	#endif
	
	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
    191a:	80 e0       	ldi	r24, 0x00	; 0
    191c:	9e df       	rcall	.-196    	; 0x185a <USB_Host_WaitForIOS>
    191e:	98 2f       	mov	r25, r24
    1920:	88 23       	and	r24, r24
    1922:	09 f0       	breq	.+2      	; 0x1926 <USB_Host_SendControlRequest+0x7a>
    1924:	b2 c0       	rjmp	.+356    	; 0x1a8a <USB_Host_SendControlRequest+0x1de>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1926:	80 91 a9 00 	lds	r24, 0x00A9
    192a:	80 64       	ori	r24, 0x40	; 64
    192c:	80 93 a9 00 	sts	0x00A9, r24
	  goto End_Of_Control_Send;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1930:	81 e0       	ldi	r24, 0x01	; 1
    1932:	d6 da       	rcall	.-2644   	; 0xee0 <USB_Host_WaitMS>
    1934:	98 2f       	mov	r25, r24
    1936:	88 23       	and	r24, r24
    1938:	09 f0       	breq	.+2      	; 0x193c <USB_Host_SendControlRequest+0x90>
    193a:	a7 c0       	rjmp	.+334    	; 0x1a8a <USB_Host_SendControlRequest+0x1de>

uint8_t USB_Host_ConfigurationNumber;

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
    193c:	21 2f       	mov	r18, r17
    193e:	30 2f       	mov	r19, r16
    1940:	c9 01       	movw	r24, r18
    1942:	8c 01       	movw	r16, r24
	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
	  goto End_Of_Control_Send;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
    1944:	80 91 27 01 	lds	r24, 0x0127
    1948:	87 ff       	sbrs	r24, 7
    194a:	52 c0       	rjmp	.+164    	; 0x19f0 <USB_Host_SendControlRequest+0x144>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    194c:	80 91 aa 00 	lds	r24, 0x00AA
    1950:	8f 7c       	andi	r24, 0xCF	; 207
    1952:	80 61       	ori	r24, 0x10	; 16
    1954:	80 93 aa 00 	sts	0x00AA, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
    1958:	01 15       	cp	r16, r1
    195a:	11 05       	cpc	r17, r1
    195c:	69 f5       	brne	.+90     	; 0x19b8 <USB_Host_SendControlRequest+0x10c>
    195e:	2e c0       	rjmp	.+92     	; 0x19bc <USB_Host_SendControlRequest+0x110>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1960:	80 91 a9 00 	lds	r24, 0x00A9
    1964:	8f 7b       	andi	r24, 0xBF	; 191
    1966:	80 93 a9 00 	sts	0x00A9, r24
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    196a:	81 e0       	ldi	r24, 0x01	; 1
    196c:	76 df       	rcall	.-276    	; 0x185a <USB_Host_WaitForIOS>
    196e:	98 2f       	mov	r25, r24
    1970:	88 23       	and	r24, r24
    1972:	09 f0       	breq	.+2      	; 0x1976 <USB_Host_SendControlRequest+0xca>
    1974:	8a c0       	rjmp	.+276    	; 0x1a8a <USB_Host_SendControlRequest+0x1de>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1976:	80 91 f6 00 	lds	r24, 0x00F6
    197a:	90 91 f7 00 	lds	r25, 0x00F7
				  goto End_Of_Control_Send;

				if (!(Pipe_BytesInPipe()))
    197e:	89 2b       	or	r24, r25
    1980:	49 f4       	brne	.+18     	; 0x1994 <USB_Host_SendControlRequest+0xe8>
    1982:	c0 e0       	ldi	r28, 0x00	; 0
    1984:	d0 e0       	ldi	r29, 0x00	; 0
    1986:	06 c0       	rjmp	.+12     	; 0x1994 <USB_Host_SendControlRequest+0xe8>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    1988:	80 91 af 00 	lds	r24, 0x00AF
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
				{
					*(DataStream++) = Pipe_Read_8();
    198c:	f8 01       	movw	r30, r16
    198e:	81 93       	st	Z+, r24
    1990:	8f 01       	movw	r16, r30
					DataLen--;
    1992:	21 97       	sbiw	r28, 0x01	; 1
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1994:	80 91 f6 00 	lds	r24, 0x00F6
    1998:	90 91 f7 00 	lds	r25, 0x00F7
				  goto End_Of_Control_Send;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
    199c:	89 2b       	or	r24, r25
    199e:	11 f0       	breq	.+4      	; 0x19a4 <USB_Host_SendControlRequest+0xf8>
    19a0:	20 97       	sbiw	r28, 0x00	; 0
    19a2:	91 f7       	brne	.-28     	; 0x1988 <USB_Host_SendControlRequest+0xdc>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    19a4:	80 91 a9 00 	lds	r24, 0x00A9
    19a8:	80 64       	ori	r24, 0x40	; 64
    19aa:	80 93 a9 00 	sts	0x00A9, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    19ae:	80 91 a6 00 	lds	r24, 0x00A6
    19b2:	8e 77       	andi	r24, 0x7E	; 126
    19b4:	80 93 a6 00 	sts	0x00A6, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
    19b8:	20 97       	sbiw	r28, 0x00	; 0
    19ba:	91 f6       	brne	.-92     	; 0x1960 <USB_Host_SendControlRequest+0xb4>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    19bc:	80 91 aa 00 	lds	r24, 0x00AA
    19c0:	8f 7c       	andi	r24, 0xCF	; 207
    19c2:	80 62       	ori	r24, 0x20	; 32
    19c4:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    19c8:	80 91 a9 00 	lds	r24, 0x00A9
    19cc:	8f 7b       	andi	r24, 0xBF	; 191
    19ce:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    19d2:	82 e0       	ldi	r24, 0x02	; 2
    19d4:	42 df       	rcall	.-380    	; 0x185a <USB_Host_WaitForIOS>
    19d6:	98 2f       	mov	r25, r24
    19d8:	88 23       	and	r24, r24
    19da:	09 f0       	breq	.+2      	; 0x19de <USB_Host_SendControlRequest+0x132>
    19dc:	56 c0       	rjmp	.+172    	; 0x1a8a <USB_Host_SendControlRequest+0x1de>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    19de:	80 91 a6 00 	lds	r24, 0x00A6
    19e2:	8b 77       	andi	r24, 0x7B	; 123
    19e4:	80 93 a6 00 	sts	0x00A6, r24
		  goto End_Of_Control_Send;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    19e8:	82 e0       	ldi	r24, 0x02	; 2
    19ea:	37 df       	rcall	.-402    	; 0x185a <USB_Host_WaitForIOS>
    19ec:	98 2f       	mov	r25, r24
    19ee:	4d c0       	rjmp	.+154    	; 0x1a8a <USB_Host_SendControlRequest+0x1de>
		  goto End_Of_Control_Send;
	}
	else
	{
		if (DataStream != NULL)
    19f0:	01 15       	cp	r16, r1
    19f2:	11 05       	cpc	r17, r1
    19f4:	a9 f1       	breq	.+106    	; 0x1a60 <USB_Host_SendControlRequest+0x1b4>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    19f6:	80 91 aa 00 	lds	r24, 0x00AA
    19fa:	8f 7c       	andi	r24, 0xCF	; 207
    19fc:	80 62       	ori	r24, 0x20	; 32
    19fe:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1a02:	80 91 a9 00 	lds	r24, 0x00A9
    1a06:	8f 7b       	andi	r24, 0xBF	; 191
    1a08:	80 93 a9 00 	sts	0x00A9, r24
    1a0c:	1d c0       	rjmp	.+58     	; 0x1a48 <USB_Host_SendControlRequest+0x19c>
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1a0e:	82 e0       	ldi	r24, 0x02	; 2
    1a10:	24 df       	rcall	.-440    	; 0x185a <USB_Host_WaitForIOS>
    1a12:	98 2f       	mov	r25, r24
    1a14:	88 23       	and	r24, r24
    1a16:	c9 f5       	brne	.+114    	; 0x1a8a <USB_Host_SendControlRequest+0x1de>
				  goto End_Of_Control_Send;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    1a18:	80 91 1c 01 	lds	r24, 0x011C
    1a1c:	28 2f       	mov	r18, r24
    1a1e:	30 e0       	ldi	r19, 0x00	; 0
    1a20:	07 c0       	rjmp	.+14     	; 0x1a30 <USB_Host_SendControlRequest+0x184>
				{
					Pipe_Write_8(*(DataStream++));
    1a22:	f8 01       	movw	r30, r16
    1a24:	81 91       	ld	r24, Z+
    1a26:	8f 01       	movw	r16, r30
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    1a28:	80 93 af 00 	sts	0x00AF, r24
					DataLen--;
    1a2c:	21 97       	sbiw	r28, 0x01	; 1
			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
				  goto End_Of_Control_Send;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    1a2e:	39 f0       	breq	.+14     	; 0x1a3e <USB_Host_SendControlRequest+0x192>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1a30:	80 91 f6 00 	lds	r24, 0x00F6
    1a34:	90 91 f7 00 	lds	r25, 0x00F7
    1a38:	82 17       	cp	r24, r18
    1a3a:	93 07       	cpc	r25, r19
    1a3c:	90 f3       	brcs	.-28     	; 0x1a22 <USB_Host_SendControlRequest+0x176>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1a3e:	80 91 a6 00 	lds	r24, 0x00A6
    1a42:	8b 77       	andi	r24, 0x7B	; 123
    1a44:	80 93 a6 00 	sts	0x00A6, r24
		if (DataStream != NULL)
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
    1a48:	20 97       	sbiw	r28, 0x00	; 0
    1a4a:	09 f7       	brne	.-62     	; 0x1a0e <USB_Host_SendControlRequest+0x162>
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1a4c:	82 e0       	ldi	r24, 0x02	; 2
    1a4e:	05 df       	rcall	.-502    	; 0x185a <USB_Host_WaitForIOS>
    1a50:	98 2f       	mov	r25, r24
    1a52:	88 23       	and	r24, r24
    1a54:	d1 f4       	brne	.+52     	; 0x1a8a <USB_Host_SendControlRequest+0x1de>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1a56:	80 91 a9 00 	lds	r24, 0x00A9
    1a5a:	80 64       	ori	r24, 0x40	; 64
    1a5c:	80 93 a9 00 	sts	0x00A9, r24
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1a60:	80 91 aa 00 	lds	r24, 0x00AA
    1a64:	8f 7c       	andi	r24, 0xCF	; 207
    1a66:	80 61       	ori	r24, 0x10	; 16
    1a68:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1a6c:	80 91 a9 00 	lds	r24, 0x00A9
    1a70:	8f 7b       	andi	r24, 0xBF	; 191
    1a72:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    1a76:	81 e0       	ldi	r24, 0x01	; 1
    1a78:	f0 de       	rcall	.-544    	; 0x185a <USB_Host_WaitForIOS>
    1a7a:	98 2f       	mov	r25, r24
    1a7c:	88 23       	and	r24, r24
    1a7e:	29 f4       	brne	.+10     	; 0x1a8a <USB_Host_SendControlRequest+0x1de>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1a80:	80 91 a6 00 	lds	r24, 0x00A6
    1a84:	8e 77       	andi	r24, 0x7E	; 126
    1a86:	80 93 a6 00 	sts	0x00A6, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1a8a:	80 91 a9 00 	lds	r24, 0x00A9
    1a8e:	80 64       	ori	r24, 0x40	; 64
    1a90:	80 93 a9 00 	sts	0x00A9, r24
	}

End_Of_Control_Send:
	Pipe_Freeze();

	if (BusSuspended)
    1a94:	f0 fc       	sbrc	r15, 0
    1a96:	05 c0       	rjmp	.+10     	; 0x1aa2 <USB_Host_SendControlRequest+0x1f6>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    1a98:	80 91 9e 00 	lds	r24, 0x009E
    1a9c:	8e 7f       	andi	r24, 0xFE	; 254
    1a9e:	80 93 9e 00 	sts	0x009E, r24
			 *  \param[in] PipeNumber  Index of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t PipeNumber)
			{
				UPRST = (1 << PipeNumber);
    1aa2:	81 e0       	ldi	r24, 0x01	; 1
    1aa4:	80 93 a8 00 	sts	0x00A8, r24
				UPRST = 0;
    1aa8:	10 92 a8 00 	sts	0x00A8, r1
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
    1aac:	89 2f       	mov	r24, r25
    1aae:	df 91       	pop	r29
    1ab0:	cf 91       	pop	r28
    1ab2:	1f 91       	pop	r17
    1ab4:	0f 91       	pop	r16
    1ab6:	ff 90       	pop	r15
    1ab8:	08 95       	ret

00001aba <USB_Host_SetDeviceConfiguration>:

	return HOST_SENDCONTROL_Successful;
}

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
    1aba:	1f 93       	push	r17
    1abc:	18 2f       	mov	r17, r24
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
    1abe:	10 92 27 01 	sts	0x0127, r1
    1ac2:	89 e0       	ldi	r24, 0x09	; 9
    1ac4:	80 93 28 01 	sts	0x0128, r24
    1ac8:	10 93 29 01 	sts	0x0129, r17
    1acc:	10 92 2a 01 	sts	0x012A, r1
    1ad0:	10 92 2c 01 	sts	0x012C, r1
    1ad4:	10 92 2b 01 	sts	0x012B, r1
    1ad8:	10 92 2e 01 	sts	0x012E, r1
    1adc:	10 92 2d 01 	sts	0x012D, r1
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1ae0:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);
	
	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) == HOST_SENDCONTROL_Successful)
    1ae4:	80 e0       	ldi	r24, 0x00	; 0
    1ae6:	90 e0       	ldi	r25, 0x00	; 0
    1ae8:	e1 de       	rcall	.-574    	; 0x18ac <USB_Host_SendControlRequest>
    1aea:	88 23       	and	r24, r24
    1aec:	49 f4       	brne	.+18     	; 0x1b00 <USB_Host_SetDeviceConfiguration+0x46>
	{
		USB_Host_ConfigurationNumber = ConfigNumber;
    1aee:	10 93 25 01 	sts	0x0125, r17
		USB_HostState                = (ConfigNumber) ? HOST_STATE_Configured : HOST_STATE_Addressed;
    1af2:	11 23       	and	r17, r17
    1af4:	11 f4       	brne	.+4      	; 0x1afa <USB_Host_SetDeviceConfiguration+0x40>
    1af6:	9a e0       	ldi	r25, 0x0A	; 10
    1af8:	01 c0       	rjmp	.+2      	; 0x1afc <USB_Host_SetDeviceConfiguration+0x42>
    1afa:	9b e0       	ldi	r25, 0x0B	; 11
    1afc:	90 93 2f 01 	sts	0x012F, r25
	}

	return ErrorCode;
}
    1b00:	1f 91       	pop	r17
    1b02:	08 95       	ret

00001b04 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    1b04:	ff 92       	push	r15
    1b06:	0f 93       	push	r16
    1b08:	1f 93       	push	r17
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
    1b0a:	07 ea       	ldi	r16, 0xA7	; 167
    1b0c:	10 e0       	ldi	r17, 0x00	; 0
    1b0e:	f8 01       	movw	r30, r16
    1b10:	f0 80       	ld	r15, Z
    1b12:	f7 e0       	ldi	r31, 0x07	; 7
    1b14:	ff 22       	and	r15, r31
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1b16:	f8 01       	movw	r30, r16
    1b18:	10 82       	st	Z, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    1b1a:	7f da       	rcall	.-2818   	; 0x101a <USB_Host_ProcessNextHostState>
    1b1c:	f8 01       	movw	r30, r16
    1b1e:	f0 82       	st	Z, r15
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
    1b20:	1f 91       	pop	r17
    1b22:	0f 91       	pop	r16
    1b24:	ff 90       	pop	r15
    1b26:	08 95       	ret

00001b28 <Serial_putchar>:

FILE USARTSerialStream;

int Serial_putchar(char DataByte,
                   FILE *Stream)
{
    1b28:	98 2f       	mov	r25, r24
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
    1b2a:	80 91 c8 00 	lds	r24, 0x00C8
    1b2e:	85 ff       	sbrs	r24, 5
    1b30:	fc cf       	rjmp	.-8      	; 0x1b2a <Serial_putchar+0x2>
				UDR1 = DataByte;
    1b32:	90 93 ce 00 	sts	0x00CE, r25
	(void)Stream;

	Serial_SendByte(DataByte);
	return 0;
}
    1b36:	80 e0       	ldi	r24, 0x00	; 0
    1b38:	90 e0       	ldi	r25, 0x00	; 0
    1b3a:	08 95       	ret

00001b3c <Serial_getchar>:
			 *  \return Boolean \c true if a character has been received, \c false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    1b3c:	80 91 c8 00 	lds	r24, 0x00C8

int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    1b40:	87 fd       	sbrc	r24, 7
    1b42:	03 c0       	rjmp	.+6      	; 0x1b4a <Serial_getchar+0xe>
    1b44:	2e ef       	ldi	r18, 0xFE	; 254
    1b46:	3f ef       	ldi	r19, 0xFF	; 255
    1b48:	0b c0       	rjmp	.+22     	; 0x1b60 <Serial_getchar+0x24>
    1b4a:	80 91 c8 00 	lds	r24, 0x00C8
			 *  \return Next byte received from the USART, or a negative value if no byte has been received.
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
    1b4e:	87 fd       	sbrc	r24, 7
    1b50:	03 c0       	rjmp	.+6      	; 0x1b58 <Serial_getchar+0x1c>
    1b52:	2f ef       	ldi	r18, 0xFF	; 255
    1b54:	3f ef       	ldi	r19, 0xFF	; 255
    1b56:	04 c0       	rjmp	.+8      	; 0x1b60 <Serial_getchar+0x24>
				  return -1;
				
				return UDR1;
    1b58:	80 91 ce 00 	lds	r24, 0x00CE
    1b5c:	28 2f       	mov	r18, r24
    1b5e:	30 e0       	ldi	r19, 0x00	; 0
	  return _FDEV_EOF;

	return Serial_ReceiveByte();
}
    1b60:	c9 01       	movw	r24, r18
    1b62:	08 95       	ret

00001b64 <memcpy>:
    1b64:	fb 01       	movw	r30, r22
    1b66:	dc 01       	movw	r26, r24
    1b68:	02 c0       	rjmp	.+4      	; 0x1b6e <memcpy+0xa>
    1b6a:	01 90       	ld	r0, Z+
    1b6c:	0d 92       	st	X+, r0
    1b6e:	41 50       	subi	r20, 0x01	; 1
    1b70:	50 40       	sbci	r21, 0x00	; 0
    1b72:	d8 f7       	brcc	.-10     	; 0x1b6a <memcpy+0x6>
    1b74:	08 95       	ret

00001b76 <printf>:
    1b76:	df 93       	push	r29
    1b78:	cf 93       	push	r28
    1b7a:	cd b7       	in	r28, 0x3d	; 61
    1b7c:	de b7       	in	r29, 0x3e	; 62
    1b7e:	fe 01       	movw	r30, r28
    1b80:	35 96       	adiw	r30, 0x05	; 5
    1b82:	61 91       	ld	r22, Z+
    1b84:	71 91       	ld	r23, Z+
    1b86:	80 91 40 01 	lds	r24, 0x0140
    1b8a:	90 91 41 01 	lds	r25, 0x0141
    1b8e:	af 01       	movw	r20, r30
    1b90:	8f d0       	rcall	.+286    	; 0x1cb0 <vfprintf>
    1b92:	cf 91       	pop	r28
    1b94:	df 91       	pop	r29
    1b96:	08 95       	ret

00001b98 <printf_P>:
    1b98:	df 93       	push	r29
    1b9a:	cf 93       	push	r28
    1b9c:	cd b7       	in	r28, 0x3d	; 61
    1b9e:	de b7       	in	r29, 0x3e	; 62
    1ba0:	fe 01       	movw	r30, r28
    1ba2:	35 96       	adiw	r30, 0x05	; 5
    1ba4:	61 91       	ld	r22, Z+
    1ba6:	71 91       	ld	r23, Z+
    1ba8:	a0 91 40 01 	lds	r26, 0x0140
    1bac:	b0 91 41 01 	lds	r27, 0x0141
    1bb0:	13 96       	adiw	r26, 0x03	; 3
    1bb2:	8c 91       	ld	r24, X
    1bb4:	13 97       	sbiw	r26, 0x03	; 3
    1bb6:	88 60       	ori	r24, 0x08	; 8
    1bb8:	13 96       	adiw	r26, 0x03	; 3
    1bba:	8c 93       	st	X, r24
    1bbc:	80 91 40 01 	lds	r24, 0x0140
    1bc0:	90 91 41 01 	lds	r25, 0x0141
    1bc4:	af 01       	movw	r20, r30
    1bc6:	74 d0       	rcall	.+232    	; 0x1cb0 <vfprintf>
    1bc8:	e0 91 40 01 	lds	r30, 0x0140
    1bcc:	f0 91 41 01 	lds	r31, 0x0141
    1bd0:	23 81       	ldd	r18, Z+3	; 0x03
    1bd2:	27 7f       	andi	r18, 0xF7	; 247
    1bd4:	23 83       	std	Z+3, r18	; 0x03
    1bd6:	cf 91       	pop	r28
    1bd8:	df 91       	pop	r29
    1bda:	08 95       	ret

00001bdc <puts>:
    1bdc:	0f 93       	push	r16
    1bde:	1f 93       	push	r17
    1be0:	cf 93       	push	r28
    1be2:	df 93       	push	r29
    1be4:	8c 01       	movw	r16, r24
    1be6:	e0 91 40 01 	lds	r30, 0x0140
    1bea:	f0 91 41 01 	lds	r31, 0x0141
    1bee:	83 81       	ldd	r24, Z+3	; 0x03
    1bf0:	81 ff       	sbrs	r24, 1
    1bf2:	21 c0       	rjmp	.+66     	; 0x1c36 <puts+0x5a>
    1bf4:	c0 e0       	ldi	r28, 0x00	; 0
    1bf6:	d0 e0       	ldi	r29, 0x00	; 0
    1bf8:	0d c0       	rjmp	.+26     	; 0x1c14 <puts+0x38>
    1bfa:	e0 91 40 01 	lds	r30, 0x0140
    1bfe:	f0 91 41 01 	lds	r31, 0x0141
    1c02:	20 85       	ldd	r18, Z+8	; 0x08
    1c04:	31 85       	ldd	r19, Z+9	; 0x09
    1c06:	bf 01       	movw	r22, r30
    1c08:	f9 01       	movw	r30, r18
    1c0a:	09 95       	icall
    1c0c:	89 2b       	or	r24, r25
    1c0e:	11 f0       	breq	.+4      	; 0x1c14 <puts+0x38>
    1c10:	cf ef       	ldi	r28, 0xFF	; 255
    1c12:	df ef       	ldi	r29, 0xFF	; 255
    1c14:	f8 01       	movw	r30, r16
    1c16:	81 91       	ld	r24, Z+
    1c18:	8f 01       	movw	r16, r30
    1c1a:	88 23       	and	r24, r24
    1c1c:	71 f7       	brne	.-36     	; 0x1bfa <puts+0x1e>
    1c1e:	e0 91 40 01 	lds	r30, 0x0140
    1c22:	f0 91 41 01 	lds	r31, 0x0141
    1c26:	20 85       	ldd	r18, Z+8	; 0x08
    1c28:	31 85       	ldd	r19, Z+9	; 0x09
    1c2a:	8a e0       	ldi	r24, 0x0A	; 10
    1c2c:	bf 01       	movw	r22, r30
    1c2e:	f9 01       	movw	r30, r18
    1c30:	09 95       	icall
    1c32:	89 2b       	or	r24, r25
    1c34:	11 f0       	breq	.+4      	; 0x1c3a <puts+0x5e>
    1c36:	cf ef       	ldi	r28, 0xFF	; 255
    1c38:	df ef       	ldi	r29, 0xFF	; 255
    1c3a:	ce 01       	movw	r24, r28
    1c3c:	df 91       	pop	r29
    1c3e:	cf 91       	pop	r28
    1c40:	1f 91       	pop	r17
    1c42:	0f 91       	pop	r16
    1c44:	08 95       	ret

00001c46 <puts_P>:
    1c46:	0f 93       	push	r16
    1c48:	1f 93       	push	r17
    1c4a:	cf 93       	push	r28
    1c4c:	df 93       	push	r29
    1c4e:	ec 01       	movw	r28, r24
    1c50:	e0 91 40 01 	lds	r30, 0x0140
    1c54:	f0 91 41 01 	lds	r31, 0x0141
    1c58:	83 81       	ldd	r24, Z+3	; 0x03
    1c5a:	81 ff       	sbrs	r24, 1
    1c5c:	21 c0       	rjmp	.+66     	; 0x1ca0 <puts_P+0x5a>
    1c5e:	00 e0       	ldi	r16, 0x00	; 0
    1c60:	10 e0       	ldi	r17, 0x00	; 0
    1c62:	0e c0       	rjmp	.+28     	; 0x1c80 <puts_P+0x3a>
    1c64:	e0 91 40 01 	lds	r30, 0x0140
    1c68:	f0 91 41 01 	lds	r31, 0x0141
    1c6c:	20 85       	ldd	r18, Z+8	; 0x08
    1c6e:	31 85       	ldd	r19, Z+9	; 0x09
    1c70:	bf 01       	movw	r22, r30
    1c72:	f9 01       	movw	r30, r18
    1c74:	09 95       	icall
    1c76:	89 2b       	or	r24, r25
    1c78:	11 f0       	breq	.+4      	; 0x1c7e <puts_P+0x38>
    1c7a:	0f ef       	ldi	r16, 0xFF	; 255
    1c7c:	1f ef       	ldi	r17, 0xFF	; 255
    1c7e:	21 96       	adiw	r28, 0x01	; 1
    1c80:	fe 01       	movw	r30, r28
    1c82:	84 91       	lpm	r24, Z+
    1c84:	88 23       	and	r24, r24
    1c86:	71 f7       	brne	.-36     	; 0x1c64 <puts_P+0x1e>
    1c88:	e0 91 40 01 	lds	r30, 0x0140
    1c8c:	f0 91 41 01 	lds	r31, 0x0141
    1c90:	20 85       	ldd	r18, Z+8	; 0x08
    1c92:	31 85       	ldd	r19, Z+9	; 0x09
    1c94:	8a e0       	ldi	r24, 0x0A	; 10
    1c96:	bf 01       	movw	r22, r30
    1c98:	f9 01       	movw	r30, r18
    1c9a:	09 95       	icall
    1c9c:	89 2b       	or	r24, r25
    1c9e:	11 f0       	breq	.+4      	; 0x1ca4 <puts_P+0x5e>
    1ca0:	0f ef       	ldi	r16, 0xFF	; 255
    1ca2:	1f ef       	ldi	r17, 0xFF	; 255
    1ca4:	c8 01       	movw	r24, r16
    1ca6:	df 91       	pop	r29
    1ca8:	cf 91       	pop	r28
    1caa:	1f 91       	pop	r17
    1cac:	0f 91       	pop	r16
    1cae:	08 95       	ret

00001cb0 <vfprintf>:
    1cb0:	2f 92       	push	r2
    1cb2:	3f 92       	push	r3
    1cb4:	4f 92       	push	r4
    1cb6:	5f 92       	push	r5
    1cb8:	6f 92       	push	r6
    1cba:	7f 92       	push	r7
    1cbc:	8f 92       	push	r8
    1cbe:	9f 92       	push	r9
    1cc0:	af 92       	push	r10
    1cc2:	bf 92       	push	r11
    1cc4:	cf 92       	push	r12
    1cc6:	df 92       	push	r13
    1cc8:	ef 92       	push	r14
    1cca:	ff 92       	push	r15
    1ccc:	0f 93       	push	r16
    1cce:	1f 93       	push	r17
    1cd0:	df 93       	push	r29
    1cd2:	cf 93       	push	r28
    1cd4:	cd b7       	in	r28, 0x3d	; 61
    1cd6:	de b7       	in	r29, 0x3e	; 62
    1cd8:	2b 97       	sbiw	r28, 0x0b	; 11
    1cda:	0f b6       	in	r0, 0x3f	; 63
    1cdc:	f8 94       	cli
    1cde:	de bf       	out	0x3e, r29	; 62
    1ce0:	0f be       	out	0x3f, r0	; 63
    1ce2:	cd bf       	out	0x3d, r28	; 61
    1ce4:	3c 01       	movw	r6, r24
    1ce6:	2b 01       	movw	r4, r22
    1ce8:	5a 01       	movw	r10, r20
    1cea:	fc 01       	movw	r30, r24
    1cec:	17 82       	std	Z+7, r1	; 0x07
    1cee:	16 82       	std	Z+6, r1	; 0x06
    1cf0:	83 81       	ldd	r24, Z+3	; 0x03
    1cf2:	81 fd       	sbrc	r24, 1
    1cf4:	03 c0       	rjmp	.+6      	; 0x1cfc <vfprintf+0x4c>
    1cf6:	6f ef       	ldi	r22, 0xFF	; 255
    1cf8:	7f ef       	ldi	r23, 0xFF	; 255
    1cfa:	b9 c1       	rjmp	.+882    	; 0x206e <vfprintf+0x3be>
    1cfc:	9a e0       	ldi	r25, 0x0A	; 10
    1cfe:	89 2e       	mov	r8, r25
    1d00:	1e 01       	movw	r2, r28
    1d02:	08 94       	sec
    1d04:	21 1c       	adc	r2, r1
    1d06:	31 1c       	adc	r3, r1
    1d08:	f3 01       	movw	r30, r6
    1d0a:	23 81       	ldd	r18, Z+3	; 0x03
    1d0c:	f2 01       	movw	r30, r4
    1d0e:	23 fd       	sbrc	r18, 3
    1d10:	85 91       	lpm	r24, Z+
    1d12:	23 ff       	sbrs	r18, 3
    1d14:	81 91       	ld	r24, Z+
    1d16:	2f 01       	movw	r4, r30
    1d18:	88 23       	and	r24, r24
    1d1a:	09 f4       	brne	.+2      	; 0x1d1e <vfprintf+0x6e>
    1d1c:	a5 c1       	rjmp	.+842    	; 0x2068 <vfprintf+0x3b8>
    1d1e:	85 32       	cpi	r24, 0x25	; 37
    1d20:	39 f4       	brne	.+14     	; 0x1d30 <vfprintf+0x80>
    1d22:	23 fd       	sbrc	r18, 3
    1d24:	85 91       	lpm	r24, Z+
    1d26:	23 ff       	sbrs	r18, 3
    1d28:	81 91       	ld	r24, Z+
    1d2a:	2f 01       	movw	r4, r30
    1d2c:	85 32       	cpi	r24, 0x25	; 37
    1d2e:	21 f4       	brne	.+8      	; 0x1d38 <vfprintf+0x88>
    1d30:	90 e0       	ldi	r25, 0x00	; 0
    1d32:	b3 01       	movw	r22, r6
    1d34:	cc d1       	rcall	.+920    	; 0x20ce <fputc>
    1d36:	e8 cf       	rjmp	.-48     	; 0x1d08 <vfprintf+0x58>
    1d38:	98 2f       	mov	r25, r24
    1d3a:	ff 24       	eor	r15, r15
    1d3c:	ee 24       	eor	r14, r14
    1d3e:	99 24       	eor	r9, r9
    1d40:	ff e1       	ldi	r31, 0x1F	; 31
    1d42:	ff 15       	cp	r31, r15
    1d44:	d0 f0       	brcs	.+52     	; 0x1d7a <vfprintf+0xca>
    1d46:	9b 32       	cpi	r25, 0x2B	; 43
    1d48:	69 f0       	breq	.+26     	; 0x1d64 <vfprintf+0xb4>
    1d4a:	9c 32       	cpi	r25, 0x2C	; 44
    1d4c:	28 f4       	brcc	.+10     	; 0x1d58 <vfprintf+0xa8>
    1d4e:	90 32       	cpi	r25, 0x20	; 32
    1d50:	59 f0       	breq	.+22     	; 0x1d68 <vfprintf+0xb8>
    1d52:	93 32       	cpi	r25, 0x23	; 35
    1d54:	91 f4       	brne	.+36     	; 0x1d7a <vfprintf+0xca>
    1d56:	0e c0       	rjmp	.+28     	; 0x1d74 <vfprintf+0xc4>
    1d58:	9d 32       	cpi	r25, 0x2D	; 45
    1d5a:	49 f0       	breq	.+18     	; 0x1d6e <vfprintf+0xbe>
    1d5c:	90 33       	cpi	r25, 0x30	; 48
    1d5e:	69 f4       	brne	.+26     	; 0x1d7a <vfprintf+0xca>
    1d60:	41 e0       	ldi	r20, 0x01	; 1
    1d62:	24 c0       	rjmp	.+72     	; 0x1dac <vfprintf+0xfc>
    1d64:	52 e0       	ldi	r21, 0x02	; 2
    1d66:	f5 2a       	or	r15, r21
    1d68:	84 e0       	ldi	r24, 0x04	; 4
    1d6a:	f8 2a       	or	r15, r24
    1d6c:	28 c0       	rjmp	.+80     	; 0x1dbe <vfprintf+0x10e>
    1d6e:	98 e0       	ldi	r25, 0x08	; 8
    1d70:	f9 2a       	or	r15, r25
    1d72:	25 c0       	rjmp	.+74     	; 0x1dbe <vfprintf+0x10e>
    1d74:	e0 e1       	ldi	r30, 0x10	; 16
    1d76:	fe 2a       	or	r15, r30
    1d78:	22 c0       	rjmp	.+68     	; 0x1dbe <vfprintf+0x10e>
    1d7a:	f7 fc       	sbrc	r15, 7
    1d7c:	29 c0       	rjmp	.+82     	; 0x1dd0 <vfprintf+0x120>
    1d7e:	89 2f       	mov	r24, r25
    1d80:	80 53       	subi	r24, 0x30	; 48
    1d82:	8a 30       	cpi	r24, 0x0A	; 10
    1d84:	70 f4       	brcc	.+28     	; 0x1da2 <vfprintf+0xf2>
    1d86:	f6 fe       	sbrs	r15, 6
    1d88:	05 c0       	rjmp	.+10     	; 0x1d94 <vfprintf+0xe4>
    1d8a:	98 9c       	mul	r9, r8
    1d8c:	90 2c       	mov	r9, r0
    1d8e:	11 24       	eor	r1, r1
    1d90:	98 0e       	add	r9, r24
    1d92:	15 c0       	rjmp	.+42     	; 0x1dbe <vfprintf+0x10e>
    1d94:	e8 9c       	mul	r14, r8
    1d96:	e0 2c       	mov	r14, r0
    1d98:	11 24       	eor	r1, r1
    1d9a:	e8 0e       	add	r14, r24
    1d9c:	f0 e2       	ldi	r31, 0x20	; 32
    1d9e:	ff 2a       	or	r15, r31
    1da0:	0e c0       	rjmp	.+28     	; 0x1dbe <vfprintf+0x10e>
    1da2:	9e 32       	cpi	r25, 0x2E	; 46
    1da4:	29 f4       	brne	.+10     	; 0x1db0 <vfprintf+0x100>
    1da6:	f6 fc       	sbrc	r15, 6
    1da8:	5f c1       	rjmp	.+702    	; 0x2068 <vfprintf+0x3b8>
    1daa:	40 e4       	ldi	r20, 0x40	; 64
    1dac:	f4 2a       	or	r15, r20
    1dae:	07 c0       	rjmp	.+14     	; 0x1dbe <vfprintf+0x10e>
    1db0:	9c 36       	cpi	r25, 0x6C	; 108
    1db2:	19 f4       	brne	.+6      	; 0x1dba <vfprintf+0x10a>
    1db4:	50 e8       	ldi	r21, 0x80	; 128
    1db6:	f5 2a       	or	r15, r21
    1db8:	02 c0       	rjmp	.+4      	; 0x1dbe <vfprintf+0x10e>
    1dba:	98 36       	cpi	r25, 0x68	; 104
    1dbc:	49 f4       	brne	.+18     	; 0x1dd0 <vfprintf+0x120>
    1dbe:	f2 01       	movw	r30, r4
    1dc0:	23 fd       	sbrc	r18, 3
    1dc2:	95 91       	lpm	r25, Z+
    1dc4:	23 ff       	sbrs	r18, 3
    1dc6:	91 91       	ld	r25, Z+
    1dc8:	2f 01       	movw	r4, r30
    1dca:	99 23       	and	r25, r25
    1dcc:	09 f0       	breq	.+2      	; 0x1dd0 <vfprintf+0x120>
    1dce:	b8 cf       	rjmp	.-144    	; 0x1d40 <vfprintf+0x90>
    1dd0:	89 2f       	mov	r24, r25
    1dd2:	85 54       	subi	r24, 0x45	; 69
    1dd4:	83 30       	cpi	r24, 0x03	; 3
    1dd6:	18 f0       	brcs	.+6      	; 0x1dde <vfprintf+0x12e>
    1dd8:	80 52       	subi	r24, 0x20	; 32
    1dda:	83 30       	cpi	r24, 0x03	; 3
    1ddc:	38 f4       	brcc	.+14     	; 0x1dec <vfprintf+0x13c>
    1dde:	44 e0       	ldi	r20, 0x04	; 4
    1de0:	50 e0       	ldi	r21, 0x00	; 0
    1de2:	a4 0e       	add	r10, r20
    1de4:	b5 1e       	adc	r11, r21
    1de6:	5f e3       	ldi	r21, 0x3F	; 63
    1de8:	59 83       	std	Y+1, r21	; 0x01
    1dea:	0f c0       	rjmp	.+30     	; 0x1e0a <vfprintf+0x15a>
    1dec:	93 36       	cpi	r25, 0x63	; 99
    1dee:	31 f0       	breq	.+12     	; 0x1dfc <vfprintf+0x14c>
    1df0:	93 37       	cpi	r25, 0x73	; 115
    1df2:	79 f0       	breq	.+30     	; 0x1e12 <vfprintf+0x162>
    1df4:	93 35       	cpi	r25, 0x53	; 83
    1df6:	09 f0       	breq	.+2      	; 0x1dfa <vfprintf+0x14a>
    1df8:	52 c0       	rjmp	.+164    	; 0x1e9e <vfprintf+0x1ee>
    1dfa:	1f c0       	rjmp	.+62     	; 0x1e3a <vfprintf+0x18a>
    1dfc:	f5 01       	movw	r30, r10
    1dfe:	80 81       	ld	r24, Z
    1e00:	89 83       	std	Y+1, r24	; 0x01
    1e02:	42 e0       	ldi	r20, 0x02	; 2
    1e04:	50 e0       	ldi	r21, 0x00	; 0
    1e06:	a4 0e       	add	r10, r20
    1e08:	b5 1e       	adc	r11, r21
    1e0a:	61 01       	movw	r12, r2
    1e0c:	01 e0       	ldi	r16, 0x01	; 1
    1e0e:	10 e0       	ldi	r17, 0x00	; 0
    1e10:	11 c0       	rjmp	.+34     	; 0x1e34 <vfprintf+0x184>
    1e12:	f5 01       	movw	r30, r10
    1e14:	c0 80       	ld	r12, Z
    1e16:	d1 80       	ldd	r13, Z+1	; 0x01
    1e18:	f6 fc       	sbrc	r15, 6
    1e1a:	03 c0       	rjmp	.+6      	; 0x1e22 <vfprintf+0x172>
    1e1c:	6f ef       	ldi	r22, 0xFF	; 255
    1e1e:	7f ef       	ldi	r23, 0xFF	; 255
    1e20:	02 c0       	rjmp	.+4      	; 0x1e26 <vfprintf+0x176>
    1e22:	69 2d       	mov	r22, r9
    1e24:	70 e0       	ldi	r23, 0x00	; 0
    1e26:	42 e0       	ldi	r20, 0x02	; 2
    1e28:	50 e0       	ldi	r21, 0x00	; 0
    1e2a:	a4 0e       	add	r10, r20
    1e2c:	b5 1e       	adc	r11, r21
    1e2e:	c6 01       	movw	r24, r12
    1e30:	43 d1       	rcall	.+646    	; 0x20b8 <strnlen>
    1e32:	8c 01       	movw	r16, r24
    1e34:	5f e7       	ldi	r21, 0x7F	; 127
    1e36:	f5 22       	and	r15, r21
    1e38:	13 c0       	rjmp	.+38     	; 0x1e60 <vfprintf+0x1b0>
    1e3a:	f5 01       	movw	r30, r10
    1e3c:	c0 80       	ld	r12, Z
    1e3e:	d1 80       	ldd	r13, Z+1	; 0x01
    1e40:	f6 fc       	sbrc	r15, 6
    1e42:	03 c0       	rjmp	.+6      	; 0x1e4a <vfprintf+0x19a>
    1e44:	6f ef       	ldi	r22, 0xFF	; 255
    1e46:	7f ef       	ldi	r23, 0xFF	; 255
    1e48:	02 c0       	rjmp	.+4      	; 0x1e4e <vfprintf+0x19e>
    1e4a:	69 2d       	mov	r22, r9
    1e4c:	70 e0       	ldi	r23, 0x00	; 0
    1e4e:	42 e0       	ldi	r20, 0x02	; 2
    1e50:	50 e0       	ldi	r21, 0x00	; 0
    1e52:	a4 0e       	add	r10, r20
    1e54:	b5 1e       	adc	r11, r21
    1e56:	c6 01       	movw	r24, r12
    1e58:	24 d1       	rcall	.+584    	; 0x20a2 <strnlen_P>
    1e5a:	8c 01       	movw	r16, r24
    1e5c:	50 e8       	ldi	r21, 0x80	; 128
    1e5e:	f5 2a       	or	r15, r21
    1e60:	f3 fe       	sbrs	r15, 3
    1e62:	06 c0       	rjmp	.+12     	; 0x1e70 <vfprintf+0x1c0>
    1e64:	18 c0       	rjmp	.+48     	; 0x1e96 <vfprintf+0x1e6>
    1e66:	80 e2       	ldi	r24, 0x20	; 32
    1e68:	90 e0       	ldi	r25, 0x00	; 0
    1e6a:	b3 01       	movw	r22, r6
    1e6c:	30 d1       	rcall	.+608    	; 0x20ce <fputc>
    1e6e:	ea 94       	dec	r14
    1e70:	8e 2d       	mov	r24, r14
    1e72:	90 e0       	ldi	r25, 0x00	; 0
    1e74:	08 17       	cp	r16, r24
    1e76:	19 07       	cpc	r17, r25
    1e78:	b0 f3       	brcs	.-20     	; 0x1e66 <vfprintf+0x1b6>
    1e7a:	0d c0       	rjmp	.+26     	; 0x1e96 <vfprintf+0x1e6>
    1e7c:	f6 01       	movw	r30, r12
    1e7e:	f7 fc       	sbrc	r15, 7
    1e80:	85 91       	lpm	r24, Z+
    1e82:	f7 fe       	sbrs	r15, 7
    1e84:	81 91       	ld	r24, Z+
    1e86:	6f 01       	movw	r12, r30
    1e88:	90 e0       	ldi	r25, 0x00	; 0
    1e8a:	b3 01       	movw	r22, r6
    1e8c:	20 d1       	rcall	.+576    	; 0x20ce <fputc>
    1e8e:	e1 10       	cpse	r14, r1
    1e90:	ea 94       	dec	r14
    1e92:	01 50       	subi	r16, 0x01	; 1
    1e94:	10 40       	sbci	r17, 0x00	; 0
    1e96:	01 15       	cp	r16, r1
    1e98:	11 05       	cpc	r17, r1
    1e9a:	81 f7       	brne	.-32     	; 0x1e7c <vfprintf+0x1cc>
    1e9c:	e2 c0       	rjmp	.+452    	; 0x2062 <vfprintf+0x3b2>
    1e9e:	94 36       	cpi	r25, 0x64	; 100
    1ea0:	11 f0       	breq	.+4      	; 0x1ea6 <vfprintf+0x1f6>
    1ea2:	99 36       	cpi	r25, 0x69	; 105
    1ea4:	61 f5       	brne	.+88     	; 0x1efe <vfprintf+0x24e>
    1ea6:	f7 fe       	sbrs	r15, 7
    1ea8:	08 c0       	rjmp	.+16     	; 0x1eba <vfprintf+0x20a>
    1eaa:	f5 01       	movw	r30, r10
    1eac:	20 81       	ld	r18, Z
    1eae:	31 81       	ldd	r19, Z+1	; 0x01
    1eb0:	42 81       	ldd	r20, Z+2	; 0x02
    1eb2:	53 81       	ldd	r21, Z+3	; 0x03
    1eb4:	84 e0       	ldi	r24, 0x04	; 4
    1eb6:	90 e0       	ldi	r25, 0x00	; 0
    1eb8:	0a c0       	rjmp	.+20     	; 0x1ece <vfprintf+0x21e>
    1eba:	f5 01       	movw	r30, r10
    1ebc:	80 81       	ld	r24, Z
    1ebe:	91 81       	ldd	r25, Z+1	; 0x01
    1ec0:	9c 01       	movw	r18, r24
    1ec2:	44 27       	eor	r20, r20
    1ec4:	37 fd       	sbrc	r19, 7
    1ec6:	40 95       	com	r20
    1ec8:	54 2f       	mov	r21, r20
    1eca:	82 e0       	ldi	r24, 0x02	; 2
    1ecc:	90 e0       	ldi	r25, 0x00	; 0
    1ece:	a8 0e       	add	r10, r24
    1ed0:	b9 1e       	adc	r11, r25
    1ed2:	9f e6       	ldi	r25, 0x6F	; 111
    1ed4:	f9 22       	and	r15, r25
    1ed6:	57 ff       	sbrs	r21, 7
    1ed8:	09 c0       	rjmp	.+18     	; 0x1eec <vfprintf+0x23c>
    1eda:	50 95       	com	r21
    1edc:	40 95       	com	r20
    1ede:	30 95       	com	r19
    1ee0:	21 95       	neg	r18
    1ee2:	3f 4f       	sbci	r19, 0xFF	; 255
    1ee4:	4f 4f       	sbci	r20, 0xFF	; 255
    1ee6:	5f 4f       	sbci	r21, 0xFF	; 255
    1ee8:	e0 e8       	ldi	r30, 0x80	; 128
    1eea:	fe 2a       	or	r15, r30
    1eec:	ca 01       	movw	r24, r20
    1eee:	b9 01       	movw	r22, r18
    1ef0:	a1 01       	movw	r20, r2
    1ef2:	2a e0       	ldi	r18, 0x0A	; 10
    1ef4:	30 e0       	ldi	r19, 0x00	; 0
    1ef6:	17 d1       	rcall	.+558    	; 0x2126 <__ultoa_invert>
    1ef8:	d8 2e       	mov	r13, r24
    1efa:	d2 18       	sub	r13, r2
    1efc:	3f c0       	rjmp	.+126    	; 0x1f7c <vfprintf+0x2cc>
    1efe:	95 37       	cpi	r25, 0x75	; 117
    1f00:	29 f4       	brne	.+10     	; 0x1f0c <vfprintf+0x25c>
    1f02:	1f 2d       	mov	r17, r15
    1f04:	1f 7e       	andi	r17, 0xEF	; 239
    1f06:	2a e0       	ldi	r18, 0x0A	; 10
    1f08:	30 e0       	ldi	r19, 0x00	; 0
    1f0a:	1d c0       	rjmp	.+58     	; 0x1f46 <vfprintf+0x296>
    1f0c:	1f 2d       	mov	r17, r15
    1f0e:	19 7f       	andi	r17, 0xF9	; 249
    1f10:	9f 36       	cpi	r25, 0x6F	; 111
    1f12:	61 f0       	breq	.+24     	; 0x1f2c <vfprintf+0x27c>
    1f14:	90 37       	cpi	r25, 0x70	; 112
    1f16:	20 f4       	brcc	.+8      	; 0x1f20 <vfprintf+0x270>
    1f18:	98 35       	cpi	r25, 0x58	; 88
    1f1a:	09 f0       	breq	.+2      	; 0x1f1e <vfprintf+0x26e>
    1f1c:	a5 c0       	rjmp	.+330    	; 0x2068 <vfprintf+0x3b8>
    1f1e:	0f c0       	rjmp	.+30     	; 0x1f3e <vfprintf+0x28e>
    1f20:	90 37       	cpi	r25, 0x70	; 112
    1f22:	39 f0       	breq	.+14     	; 0x1f32 <vfprintf+0x282>
    1f24:	98 37       	cpi	r25, 0x78	; 120
    1f26:	09 f0       	breq	.+2      	; 0x1f2a <vfprintf+0x27a>
    1f28:	9f c0       	rjmp	.+318    	; 0x2068 <vfprintf+0x3b8>
    1f2a:	04 c0       	rjmp	.+8      	; 0x1f34 <vfprintf+0x284>
    1f2c:	28 e0       	ldi	r18, 0x08	; 8
    1f2e:	30 e0       	ldi	r19, 0x00	; 0
    1f30:	0a c0       	rjmp	.+20     	; 0x1f46 <vfprintf+0x296>
    1f32:	10 61       	ori	r17, 0x10	; 16
    1f34:	14 fd       	sbrc	r17, 4
    1f36:	14 60       	ori	r17, 0x04	; 4
    1f38:	20 e1       	ldi	r18, 0x10	; 16
    1f3a:	30 e0       	ldi	r19, 0x00	; 0
    1f3c:	04 c0       	rjmp	.+8      	; 0x1f46 <vfprintf+0x296>
    1f3e:	14 fd       	sbrc	r17, 4
    1f40:	16 60       	ori	r17, 0x06	; 6
    1f42:	20 e1       	ldi	r18, 0x10	; 16
    1f44:	32 e0       	ldi	r19, 0x02	; 2
    1f46:	17 ff       	sbrs	r17, 7
    1f48:	08 c0       	rjmp	.+16     	; 0x1f5a <vfprintf+0x2aa>
    1f4a:	f5 01       	movw	r30, r10
    1f4c:	60 81       	ld	r22, Z
    1f4e:	71 81       	ldd	r23, Z+1	; 0x01
    1f50:	82 81       	ldd	r24, Z+2	; 0x02
    1f52:	93 81       	ldd	r25, Z+3	; 0x03
    1f54:	44 e0       	ldi	r20, 0x04	; 4
    1f56:	50 e0       	ldi	r21, 0x00	; 0
    1f58:	08 c0       	rjmp	.+16     	; 0x1f6a <vfprintf+0x2ba>
    1f5a:	f5 01       	movw	r30, r10
    1f5c:	80 81       	ld	r24, Z
    1f5e:	91 81       	ldd	r25, Z+1	; 0x01
    1f60:	bc 01       	movw	r22, r24
    1f62:	80 e0       	ldi	r24, 0x00	; 0
    1f64:	90 e0       	ldi	r25, 0x00	; 0
    1f66:	42 e0       	ldi	r20, 0x02	; 2
    1f68:	50 e0       	ldi	r21, 0x00	; 0
    1f6a:	a4 0e       	add	r10, r20
    1f6c:	b5 1e       	adc	r11, r21
    1f6e:	a1 01       	movw	r20, r2
    1f70:	da d0       	rcall	.+436    	; 0x2126 <__ultoa_invert>
    1f72:	d8 2e       	mov	r13, r24
    1f74:	d2 18       	sub	r13, r2
    1f76:	8f e7       	ldi	r24, 0x7F	; 127
    1f78:	f8 2e       	mov	r15, r24
    1f7a:	f1 22       	and	r15, r17
    1f7c:	f6 fe       	sbrs	r15, 6
    1f7e:	0b c0       	rjmp	.+22     	; 0x1f96 <vfprintf+0x2e6>
    1f80:	5e ef       	ldi	r21, 0xFE	; 254
    1f82:	f5 22       	and	r15, r21
    1f84:	d9 14       	cp	r13, r9
    1f86:	38 f4       	brcc	.+14     	; 0x1f96 <vfprintf+0x2e6>
    1f88:	f4 fe       	sbrs	r15, 4
    1f8a:	07 c0       	rjmp	.+14     	; 0x1f9a <vfprintf+0x2ea>
    1f8c:	f2 fc       	sbrc	r15, 2
    1f8e:	05 c0       	rjmp	.+10     	; 0x1f9a <vfprintf+0x2ea>
    1f90:	8f ee       	ldi	r24, 0xEF	; 239
    1f92:	f8 22       	and	r15, r24
    1f94:	02 c0       	rjmp	.+4      	; 0x1f9a <vfprintf+0x2ea>
    1f96:	1d 2d       	mov	r17, r13
    1f98:	01 c0       	rjmp	.+2      	; 0x1f9c <vfprintf+0x2ec>
    1f9a:	19 2d       	mov	r17, r9
    1f9c:	f4 fe       	sbrs	r15, 4
    1f9e:	0d c0       	rjmp	.+26     	; 0x1fba <vfprintf+0x30a>
    1fa0:	fe 01       	movw	r30, r28
    1fa2:	ed 0d       	add	r30, r13
    1fa4:	f1 1d       	adc	r31, r1
    1fa6:	80 81       	ld	r24, Z
    1fa8:	80 33       	cpi	r24, 0x30	; 48
    1faa:	19 f4       	brne	.+6      	; 0x1fb2 <vfprintf+0x302>
    1fac:	99 ee       	ldi	r25, 0xE9	; 233
    1fae:	f9 22       	and	r15, r25
    1fb0:	08 c0       	rjmp	.+16     	; 0x1fc2 <vfprintf+0x312>
    1fb2:	1f 5f       	subi	r17, 0xFF	; 255
    1fb4:	f2 fe       	sbrs	r15, 2
    1fb6:	05 c0       	rjmp	.+10     	; 0x1fc2 <vfprintf+0x312>
    1fb8:	03 c0       	rjmp	.+6      	; 0x1fc0 <vfprintf+0x310>
    1fba:	8f 2d       	mov	r24, r15
    1fbc:	86 78       	andi	r24, 0x86	; 134
    1fbe:	09 f0       	breq	.+2      	; 0x1fc2 <vfprintf+0x312>
    1fc0:	1f 5f       	subi	r17, 0xFF	; 255
    1fc2:	0f 2d       	mov	r16, r15
    1fc4:	f3 fc       	sbrc	r15, 3
    1fc6:	13 c0       	rjmp	.+38     	; 0x1fee <vfprintf+0x33e>
    1fc8:	f0 fe       	sbrs	r15, 0
    1fca:	0e c0       	rjmp	.+28     	; 0x1fe8 <vfprintf+0x338>
    1fcc:	1e 15       	cp	r17, r14
    1fce:	10 f0       	brcs	.+4      	; 0x1fd4 <vfprintf+0x324>
    1fd0:	9d 2c       	mov	r9, r13
    1fd2:	0a c0       	rjmp	.+20     	; 0x1fe8 <vfprintf+0x338>
    1fd4:	9d 2c       	mov	r9, r13
    1fd6:	9e 0c       	add	r9, r14
    1fd8:	91 1a       	sub	r9, r17
    1fda:	1e 2d       	mov	r17, r14
    1fdc:	05 c0       	rjmp	.+10     	; 0x1fe8 <vfprintf+0x338>
    1fde:	80 e2       	ldi	r24, 0x20	; 32
    1fe0:	90 e0       	ldi	r25, 0x00	; 0
    1fe2:	b3 01       	movw	r22, r6
    1fe4:	74 d0       	rcall	.+232    	; 0x20ce <fputc>
    1fe6:	1f 5f       	subi	r17, 0xFF	; 255
    1fe8:	1e 15       	cp	r17, r14
    1fea:	c8 f3       	brcs	.-14     	; 0x1fde <vfprintf+0x32e>
    1fec:	04 c0       	rjmp	.+8      	; 0x1ff6 <vfprintf+0x346>
    1fee:	1e 15       	cp	r17, r14
    1ff0:	10 f4       	brcc	.+4      	; 0x1ff6 <vfprintf+0x346>
    1ff2:	e1 1a       	sub	r14, r17
    1ff4:	01 c0       	rjmp	.+2      	; 0x1ff8 <vfprintf+0x348>
    1ff6:	ee 24       	eor	r14, r14
    1ff8:	04 ff       	sbrs	r16, 4
    1ffa:	0e c0       	rjmp	.+28     	; 0x2018 <vfprintf+0x368>
    1ffc:	80 e3       	ldi	r24, 0x30	; 48
    1ffe:	90 e0       	ldi	r25, 0x00	; 0
    2000:	b3 01       	movw	r22, r6
    2002:	65 d0       	rcall	.+202    	; 0x20ce <fputc>
    2004:	02 ff       	sbrs	r16, 2
    2006:	1b c0       	rjmp	.+54     	; 0x203e <vfprintf+0x38e>
    2008:	01 fd       	sbrc	r16, 1
    200a:	03 c0       	rjmp	.+6      	; 0x2012 <vfprintf+0x362>
    200c:	88 e7       	ldi	r24, 0x78	; 120
    200e:	90 e0       	ldi	r25, 0x00	; 0
    2010:	0e c0       	rjmp	.+28     	; 0x202e <vfprintf+0x37e>
    2012:	88 e5       	ldi	r24, 0x58	; 88
    2014:	90 e0       	ldi	r25, 0x00	; 0
    2016:	0b c0       	rjmp	.+22     	; 0x202e <vfprintf+0x37e>
    2018:	80 2f       	mov	r24, r16
    201a:	86 78       	andi	r24, 0x86	; 134
    201c:	81 f0       	breq	.+32     	; 0x203e <vfprintf+0x38e>
    201e:	01 ff       	sbrs	r16, 1
    2020:	02 c0       	rjmp	.+4      	; 0x2026 <vfprintf+0x376>
    2022:	8b e2       	ldi	r24, 0x2B	; 43
    2024:	01 c0       	rjmp	.+2      	; 0x2028 <vfprintf+0x378>
    2026:	80 e2       	ldi	r24, 0x20	; 32
    2028:	f7 fc       	sbrc	r15, 7
    202a:	8d e2       	ldi	r24, 0x2D	; 45
    202c:	90 e0       	ldi	r25, 0x00	; 0
    202e:	b3 01       	movw	r22, r6
    2030:	4e d0       	rcall	.+156    	; 0x20ce <fputc>
    2032:	05 c0       	rjmp	.+10     	; 0x203e <vfprintf+0x38e>
    2034:	80 e3       	ldi	r24, 0x30	; 48
    2036:	90 e0       	ldi	r25, 0x00	; 0
    2038:	b3 01       	movw	r22, r6
    203a:	49 d0       	rcall	.+146    	; 0x20ce <fputc>
    203c:	9a 94       	dec	r9
    203e:	d9 14       	cp	r13, r9
    2040:	c8 f3       	brcs	.-14     	; 0x2034 <vfprintf+0x384>
    2042:	da 94       	dec	r13
    2044:	f1 01       	movw	r30, r2
    2046:	ed 0d       	add	r30, r13
    2048:	f1 1d       	adc	r31, r1
    204a:	80 81       	ld	r24, Z
    204c:	90 e0       	ldi	r25, 0x00	; 0
    204e:	b3 01       	movw	r22, r6
    2050:	3e d0       	rcall	.+124    	; 0x20ce <fputc>
    2052:	dd 20       	and	r13, r13
    2054:	b1 f7       	brne	.-20     	; 0x2042 <vfprintf+0x392>
    2056:	05 c0       	rjmp	.+10     	; 0x2062 <vfprintf+0x3b2>
    2058:	80 e2       	ldi	r24, 0x20	; 32
    205a:	90 e0       	ldi	r25, 0x00	; 0
    205c:	b3 01       	movw	r22, r6
    205e:	37 d0       	rcall	.+110    	; 0x20ce <fputc>
    2060:	ea 94       	dec	r14
    2062:	ee 20       	and	r14, r14
    2064:	c9 f7       	brne	.-14     	; 0x2058 <vfprintf+0x3a8>
    2066:	50 ce       	rjmp	.-864    	; 0x1d08 <vfprintf+0x58>
    2068:	f3 01       	movw	r30, r6
    206a:	66 81       	ldd	r22, Z+6	; 0x06
    206c:	77 81       	ldd	r23, Z+7	; 0x07
    206e:	cb 01       	movw	r24, r22
    2070:	2b 96       	adiw	r28, 0x0b	; 11
    2072:	0f b6       	in	r0, 0x3f	; 63
    2074:	f8 94       	cli
    2076:	de bf       	out	0x3e, r29	; 62
    2078:	0f be       	out	0x3f, r0	; 63
    207a:	cd bf       	out	0x3d, r28	; 61
    207c:	cf 91       	pop	r28
    207e:	df 91       	pop	r29
    2080:	1f 91       	pop	r17
    2082:	0f 91       	pop	r16
    2084:	ff 90       	pop	r15
    2086:	ef 90       	pop	r14
    2088:	df 90       	pop	r13
    208a:	cf 90       	pop	r12
    208c:	bf 90       	pop	r11
    208e:	af 90       	pop	r10
    2090:	9f 90       	pop	r9
    2092:	8f 90       	pop	r8
    2094:	7f 90       	pop	r7
    2096:	6f 90       	pop	r6
    2098:	5f 90       	pop	r5
    209a:	4f 90       	pop	r4
    209c:	3f 90       	pop	r3
    209e:	2f 90       	pop	r2
    20a0:	08 95       	ret

000020a2 <strnlen_P>:
    20a2:	fc 01       	movw	r30, r24
    20a4:	05 90       	lpm	r0, Z+
    20a6:	61 50       	subi	r22, 0x01	; 1
    20a8:	70 40       	sbci	r23, 0x00	; 0
    20aa:	01 10       	cpse	r0, r1
    20ac:	d8 f7       	brcc	.-10     	; 0x20a4 <strnlen_P+0x2>
    20ae:	80 95       	com	r24
    20b0:	90 95       	com	r25
    20b2:	8e 0f       	add	r24, r30
    20b4:	9f 1f       	adc	r25, r31
    20b6:	08 95       	ret

000020b8 <strnlen>:
    20b8:	fc 01       	movw	r30, r24
    20ba:	61 50       	subi	r22, 0x01	; 1
    20bc:	70 40       	sbci	r23, 0x00	; 0
    20be:	01 90       	ld	r0, Z+
    20c0:	01 10       	cpse	r0, r1
    20c2:	d8 f7       	brcc	.-10     	; 0x20ba <strnlen+0x2>
    20c4:	80 95       	com	r24
    20c6:	90 95       	com	r25
    20c8:	8e 0f       	add	r24, r30
    20ca:	9f 1f       	adc	r25, r31
    20cc:	08 95       	ret

000020ce <fputc>:
    20ce:	0f 93       	push	r16
    20d0:	1f 93       	push	r17
    20d2:	cf 93       	push	r28
    20d4:	df 93       	push	r29
    20d6:	8c 01       	movw	r16, r24
    20d8:	eb 01       	movw	r28, r22
    20da:	8b 81       	ldd	r24, Y+3	; 0x03
    20dc:	81 ff       	sbrs	r24, 1
    20de:	1b c0       	rjmp	.+54     	; 0x2116 <__stack+0x17>
    20e0:	82 ff       	sbrs	r24, 2
    20e2:	0d c0       	rjmp	.+26     	; 0x20fe <fputc+0x30>
    20e4:	2e 81       	ldd	r18, Y+6	; 0x06
    20e6:	3f 81       	ldd	r19, Y+7	; 0x07
    20e8:	8c 81       	ldd	r24, Y+4	; 0x04
    20ea:	9d 81       	ldd	r25, Y+5	; 0x05
    20ec:	28 17       	cp	r18, r24
    20ee:	39 07       	cpc	r19, r25
    20f0:	64 f4       	brge	.+24     	; 0x210a <__stack+0xb>
    20f2:	e8 81       	ld	r30, Y
    20f4:	f9 81       	ldd	r31, Y+1	; 0x01
    20f6:	01 93       	st	Z+, r16
    20f8:	f9 83       	std	Y+1, r31	; 0x01
    20fa:	e8 83       	st	Y, r30
    20fc:	06 c0       	rjmp	.+12     	; 0x210a <__stack+0xb>
    20fe:	e8 85       	ldd	r30, Y+8	; 0x08
    2100:	f9 85       	ldd	r31, Y+9	; 0x09
    2102:	80 2f       	mov	r24, r16
    2104:	09 95       	icall
    2106:	89 2b       	or	r24, r25
    2108:	31 f4       	brne	.+12     	; 0x2116 <__stack+0x17>
    210a:	8e 81       	ldd	r24, Y+6	; 0x06
    210c:	9f 81       	ldd	r25, Y+7	; 0x07
    210e:	01 96       	adiw	r24, 0x01	; 1
    2110:	9f 83       	std	Y+7, r25	; 0x07
    2112:	8e 83       	std	Y+6, r24	; 0x06
    2114:	02 c0       	rjmp	.+4      	; 0x211a <__stack+0x1b>
    2116:	0f ef       	ldi	r16, 0xFF	; 255
    2118:	1f ef       	ldi	r17, 0xFF	; 255
    211a:	c8 01       	movw	r24, r16
    211c:	df 91       	pop	r29
    211e:	cf 91       	pop	r28
    2120:	1f 91       	pop	r17
    2122:	0f 91       	pop	r16
    2124:	08 95       	ret

00002126 <__ultoa_invert>:
    2126:	fa 01       	movw	r30, r20
    2128:	aa 27       	eor	r26, r26
    212a:	28 30       	cpi	r18, 0x08	; 8
    212c:	51 f1       	breq	.+84     	; 0x2182 <__ultoa_invert+0x5c>
    212e:	20 31       	cpi	r18, 0x10	; 16
    2130:	81 f1       	breq	.+96     	; 0x2192 <__ultoa_invert+0x6c>
    2132:	e8 94       	clt
    2134:	6f 93       	push	r22
    2136:	6e 7f       	andi	r22, 0xFE	; 254
    2138:	6e 5f       	subi	r22, 0xFE	; 254
    213a:	7f 4f       	sbci	r23, 0xFF	; 255
    213c:	8f 4f       	sbci	r24, 0xFF	; 255
    213e:	9f 4f       	sbci	r25, 0xFF	; 255
    2140:	af 4f       	sbci	r26, 0xFF	; 255
    2142:	b1 e0       	ldi	r27, 0x01	; 1
    2144:	3e d0       	rcall	.+124    	; 0x21c2 <__ultoa_invert+0x9c>
    2146:	b4 e0       	ldi	r27, 0x04	; 4
    2148:	3c d0       	rcall	.+120    	; 0x21c2 <__ultoa_invert+0x9c>
    214a:	67 0f       	add	r22, r23
    214c:	78 1f       	adc	r23, r24
    214e:	89 1f       	adc	r24, r25
    2150:	9a 1f       	adc	r25, r26
    2152:	a1 1d       	adc	r26, r1
    2154:	68 0f       	add	r22, r24
    2156:	79 1f       	adc	r23, r25
    2158:	8a 1f       	adc	r24, r26
    215a:	91 1d       	adc	r25, r1
    215c:	a1 1d       	adc	r26, r1
    215e:	6a 0f       	add	r22, r26
    2160:	71 1d       	adc	r23, r1
    2162:	81 1d       	adc	r24, r1
    2164:	91 1d       	adc	r25, r1
    2166:	a1 1d       	adc	r26, r1
    2168:	20 d0       	rcall	.+64     	; 0x21aa <__ultoa_invert+0x84>
    216a:	09 f4       	brne	.+2      	; 0x216e <__ultoa_invert+0x48>
    216c:	68 94       	set
    216e:	3f 91       	pop	r19
    2170:	2a e0       	ldi	r18, 0x0A	; 10
    2172:	26 9f       	mul	r18, r22
    2174:	11 24       	eor	r1, r1
    2176:	30 19       	sub	r19, r0
    2178:	30 5d       	subi	r19, 0xD0	; 208
    217a:	31 93       	st	Z+, r19
    217c:	de f6       	brtc	.-74     	; 0x2134 <__ultoa_invert+0xe>
    217e:	cf 01       	movw	r24, r30
    2180:	08 95       	ret
    2182:	46 2f       	mov	r20, r22
    2184:	47 70       	andi	r20, 0x07	; 7
    2186:	40 5d       	subi	r20, 0xD0	; 208
    2188:	41 93       	st	Z+, r20
    218a:	b3 e0       	ldi	r27, 0x03	; 3
    218c:	0f d0       	rcall	.+30     	; 0x21ac <__ultoa_invert+0x86>
    218e:	c9 f7       	brne	.-14     	; 0x2182 <__ultoa_invert+0x5c>
    2190:	f6 cf       	rjmp	.-20     	; 0x217e <__ultoa_invert+0x58>
    2192:	46 2f       	mov	r20, r22
    2194:	4f 70       	andi	r20, 0x0F	; 15
    2196:	40 5d       	subi	r20, 0xD0	; 208
    2198:	4a 33       	cpi	r20, 0x3A	; 58
    219a:	18 f0       	brcs	.+6      	; 0x21a2 <__ultoa_invert+0x7c>
    219c:	49 5d       	subi	r20, 0xD9	; 217
    219e:	31 fd       	sbrc	r19, 1
    21a0:	40 52       	subi	r20, 0x20	; 32
    21a2:	41 93       	st	Z+, r20
    21a4:	02 d0       	rcall	.+4      	; 0x21aa <__ultoa_invert+0x84>
    21a6:	a9 f7       	brne	.-22     	; 0x2192 <__ultoa_invert+0x6c>
    21a8:	ea cf       	rjmp	.-44     	; 0x217e <__ultoa_invert+0x58>
    21aa:	b4 e0       	ldi	r27, 0x04	; 4
    21ac:	a6 95       	lsr	r26
    21ae:	97 95       	ror	r25
    21b0:	87 95       	ror	r24
    21b2:	77 95       	ror	r23
    21b4:	67 95       	ror	r22
    21b6:	ba 95       	dec	r27
    21b8:	c9 f7       	brne	.-14     	; 0x21ac <__ultoa_invert+0x86>
    21ba:	00 97       	sbiw	r24, 0x00	; 0
    21bc:	61 05       	cpc	r22, r1
    21be:	71 05       	cpc	r23, r1
    21c0:	08 95       	ret
    21c2:	9b 01       	movw	r18, r22
    21c4:	ac 01       	movw	r20, r24
    21c6:	0a 2e       	mov	r0, r26
    21c8:	06 94       	lsr	r0
    21ca:	57 95       	ror	r21
    21cc:	47 95       	ror	r20
    21ce:	37 95       	ror	r19
    21d0:	27 95       	ror	r18
    21d2:	ba 95       	dec	r27
    21d4:	c9 f7       	brne	.-14     	; 0x21c8 <__ultoa_invert+0xa2>
    21d6:	62 0f       	add	r22, r18
    21d8:	73 1f       	adc	r23, r19
    21da:	84 1f       	adc	r24, r20
    21dc:	95 1f       	adc	r25, r21
    21de:	a0 1d       	adc	r26, r0
    21e0:	08 95       	ret

000021e2 <_exit>:
    21e2:	f8 94       	cli

000021e4 <__stop_program>:
    21e4:	ff cf       	rjmp	.-2      	; 0x21e4 <__stop_program>
