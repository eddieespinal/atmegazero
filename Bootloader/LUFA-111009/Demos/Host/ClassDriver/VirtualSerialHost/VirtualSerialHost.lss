
VirtualSerialHost.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000028  00800100  00001a9e  00001b32  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001a9e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000022  00800128  00800128  00001b5a  2**0
                  ALLOC
  3 .debug_aranges 000006c8  00000000  00000000  00001b5a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000f92  00000000  00000000  00002222  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000b652  00000000  00000000  000031b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000280c  00000000  00000000  0000e806  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00007cfd  00000000  00000000  00011012  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000b10  00000000  00000000  00018d10  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000455b  00000000  00000000  00019820  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000577b  00000000  00000000  0001dd7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000798  00000000  00000000  000234f6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
       0:	02 c1       	rjmp	.+516    	; 0x206 <__ctors_end>
{
	USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, AfterType);

	if (*BytesRem)
	  USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, Type);
}
       2:	00 00       	nop
	return USB_Host_SendControlRequest(NULL);
}

uint8_t USB_Host_SetInterfaceAltSetting(const uint8_t InterfaceIndex,
                                        const uint8_t AltSetting)
{
       4:	1e c1       	rjmp	.+572    	; 0x242 <__bad_interrupt>
}

#if defined(FDEV_SETUP_STREAM)
void CDC_Host_CreateStream(USB_ClassInfo_CDC_Host_t* const CDCInterfaceInfo,
                           FILE* const Stream)
{
       6:	00 00       	nop

	return Serial_ReceiveByte();
}

int Serial_getchar_Blocking(FILE *Stream)
{
       8:	1c c1       	rjmp	.+568    	; 0x242 <__bad_interrupt>
       a:	00 00       	nop
       c:	1a c1       	rjmp	.+564    	; 0x242 <__bad_interrupt>
       e:	00 00       	nop
      10:	18 c1       	rjmp	.+560    	; 0x242 <__bad_interrupt>
      12:	00 00       	nop
      14:	16 c1       	rjmp	.+556    	; 0x242 <__bad_interrupt>
      16:	00 00       	nop
      18:	14 c1       	rjmp	.+552    	; 0x242 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	12 c1       	rjmp	.+548    	; 0x242 <__bad_interrupt>
      1e:	00 00       	nop
      20:	10 c1       	rjmp	.+544    	; 0x242 <__bad_interrupt>
      22:	00 00       	nop
      24:	0e c1       	rjmp	.+540    	; 0x242 <__bad_interrupt>
      26:	00 00       	nop
      28:	2c c5       	rjmp	.+2648   	; 0xa82 <__vector_10>
      2a:	00 00       	nop
      2c:	0a c1       	rjmp	.+532    	; 0x242 <__bad_interrupt>
      2e:	00 00       	nop
      30:	08 c1       	rjmp	.+528    	; 0x242 <__bad_interrupt>
      32:	00 00       	nop
      34:	06 c1       	rjmp	.+524    	; 0x242 <__bad_interrupt>
      36:	00 00       	nop
      38:	04 c1       	rjmp	.+520    	; 0x242 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	02 c1       	rjmp	.+516    	; 0x242 <__bad_interrupt>
      3e:	00 00       	nop
      40:	00 c1       	rjmp	.+512    	; 0x242 <__bad_interrupt>
      42:	00 00       	nop
      44:	fe c0       	rjmp	.+508    	; 0x242 <__bad_interrupt>
      46:	00 00       	nop
      48:	fc c0       	rjmp	.+504    	; 0x242 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	fa c0       	rjmp	.+500    	; 0x242 <__bad_interrupt>
      4e:	00 00       	nop
      50:	f8 c0       	rjmp	.+496    	; 0x242 <__bad_interrupt>
      52:	00 00       	nop
      54:	f6 c0       	rjmp	.+492    	; 0x242 <__bad_interrupt>
      56:	00 00       	nop
      58:	f4 c0       	rjmp	.+488    	; 0x242 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	f2 c0       	rjmp	.+484    	; 0x242 <__bad_interrupt>
      5e:	00 00       	nop
      60:	f0 c0       	rjmp	.+480    	; 0x242 <__bad_interrupt>
      62:	00 00       	nop
      64:	ee c0       	rjmp	.+476    	; 0x242 <__bad_interrupt>
      66:	00 00       	nop
      68:	ec c0       	rjmp	.+472    	; 0x242 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	ea c0       	rjmp	.+468    	; 0x242 <__bad_interrupt>
      6e:	00 00       	nop
      70:	e8 c0       	rjmp	.+464    	; 0x242 <__bad_interrupt>
      72:	00 00       	nop
      74:	e6 c0       	rjmp	.+460    	; 0x242 <__bad_interrupt>
      76:	00 00       	nop
      78:	e4 c0       	rjmp	.+456    	; 0x242 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	e2 c0       	rjmp	.+452    	; 0x242 <__bad_interrupt>
      7e:	00 00       	nop
      80:	e0 c0       	rjmp	.+448    	; 0x242 <__bad_interrupt>
      82:	00 00       	nop
      84:	de c0       	rjmp	.+444    	; 0x242 <__bad_interrupt>
      86:	00 00       	nop
      88:	dc c0       	rjmp	.+440    	; 0x242 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	da c0       	rjmp	.+436    	; 0x242 <__bad_interrupt>
      8e:	00 00       	nop
      90:	d8 c0       	rjmp	.+432    	; 0x242 <__bad_interrupt>
      92:	00 00       	nop
      94:	d6 c0       	rjmp	.+428    	; 0x242 <__bad_interrupt>
      96:	00 00       	nop

00000098 <__c.4560>:
      98:	1b 5b 33 31 6d 44 65 76 20 45 6e 75 6d 20 45 72     .[31mDev Enum Er
      a8:	72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     ror.. -- Error C
      b8:	6f 64 65 20 25 64 0d 0a 20 2d 2d 20 53 75 62 20     ode %d.. -- Sub 
      c8:	45 72 72 6f 72 20 43 6f 64 65 20 25 64 0d 0a 20     Error Code %d.. 
      d8:	2d 2d 20 49 6e 20 53 74 61 74 65 20 25 64 0d 0a     -- In State %d..
      e8:	1b 5b 33 37 6d 00                                   .[37m.

000000ee <__c.4552>:
      ee:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
      fe:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 
     10e:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

0000011d <__c.4543>:
     11d:	43 44 43 20 44 65 76 69 63 65 20 45 6e 75 6d 65     CDC Device Enume
     12d:	72 61 74 65 64 2e 0d 0a 00                          rated....

00000136 <__c.4541>:
     136:	45 72 72 6f 72 20 53 65 74 74 69 6e 67 20 44 65     Error Setting De
     146:	76 69 63 65 20 43 6f 6e 66 69 67 75 72 61 74 69     vice Configurati
     156:	6f 6e 2e 0d 0a 00                                   on....

0000015c <__c.4539>:
     15c:	41 74 74 61 63 68 65 64 20 44 65 76 69 63 65 20     Attached Device 
     16c:	4e 6f 74 20 61 20 56 61 6c 69 64 20 43 44 43 20     Not a Valid CDC 
     17c:	43 6c 61 73 73 20 44 65 76 69 63 65 2e 0d 0a 00     Class Device....

0000018c <__c.4537>:
     18c:	45 72 72 6f 72 20 52 65 74 72 69 65 76 69 6e 67     Error Retrieving
     19c:	20 43 6f 6e 66 69 67 75 72 61 74 69 6f 6e 20 44      Configuration D
     1ac:	65 73 63 72 69 70 74 6f 72 2e 0d 0a 00              escriptor....

000001b9 <__c.4530>:
     1b9:	0d 0a 44 65 76 69 63 65 20 55 6e 61 74 74 61 63     ..Device Unattac
     1c9:	68 65 64 2e 0d 0a 00                                hed....

000001d0 <__c.4525>:
     1d0:	44 65 76 69 63 65 20 41 74 74 61 63 68 65 64 2e     Device Attached.
     1e0:	0d 0a 00                                            ...

000001e3 <__c.4503>:
     1e3:	1b 5b 33 36 6d 43 44 43 20 48 6f 73 74 20 44 65     .[36mCDC Host De
     1f3:	6d 6f 20 72 75 6e 6e 69 6e 67 2e 0d 0a 1b 5b 33     mo running....[3
     203:	37 6d 00                                            7m.

00000206 <__ctors_end>:
     206:	11 24       	eor	r1, r1
     208:	1f be       	out	0x3f, r1	; 63
     20a:	cf ef       	ldi	r28, 0xFF	; 255
     20c:	d0 e2       	ldi	r29, 0x20	; 32
     20e:	de bf       	out	0x3e, r29	; 62
     210:	cd bf       	out	0x3d, r28	; 61

00000212 <__do_copy_data>:
     212:	11 e0       	ldi	r17, 0x01	; 1
     214:	a0 e0       	ldi	r26, 0x00	; 0
     216:	b1 e0       	ldi	r27, 0x01	; 1
     218:	ee e9       	ldi	r30, 0x9E	; 158
     21a:	fa e1       	ldi	r31, 0x1A	; 26
     21c:	00 e0       	ldi	r16, 0x00	; 0
     21e:	0b bf       	out	0x3b, r16	; 59
     220:	02 c0       	rjmp	.+4      	; 0x226 <__do_copy_data+0x14>
     222:	07 90       	elpm	r0, Z+
     224:	0d 92       	st	X+, r0
     226:	a8 32       	cpi	r26, 0x28	; 40
     228:	b1 07       	cpc	r27, r17
     22a:	d9 f7       	brne	.-10     	; 0x222 <__do_copy_data+0x10>

0000022c <__do_clear_bss>:
     22c:	11 e0       	ldi	r17, 0x01	; 1
     22e:	a8 e2       	ldi	r26, 0x28	; 40
     230:	b1 e0       	ldi	r27, 0x01	; 1
     232:	01 c0       	rjmp	.+2      	; 0x236 <.do_clear_bss_start>

00000234 <.do_clear_bss_loop>:
     234:	1d 92       	st	X+, r1

00000236 <.do_clear_bss_start>:
     236:	aa 34       	cpi	r26, 0x4A	; 74
     238:	b1 07       	cpc	r27, r17
     23a:	e1 f7       	brne	.-8      	; 0x234 <.do_clear_bss_loop>
     23c:	09 d1       	rcall	.+530    	; 0x450 <main>
     23e:	0c 94 4d 0d 	jmp	0x1a9a	; 0x1a9a <_exit>

00000242 <__bad_interrupt>:
     242:	de ce       	rjmp	.-580    	; 0x0 <__vectors>

00000244 <EVENT_USB_Host_DeviceEnumerationFailed>:
 *  enumerating an attached USB device.
 */
void EVENT_USB_Host_DeviceEnumerationFailed(const uint8_t ErrorCode,
                                            const uint8_t SubErrorCode)
{
	printf_P(PSTR(ESC_FG_RED "Dev Enum Error\r\n"
     244:	90 91 35 01 	lds	r25, 0x0135
     248:	2d b7       	in	r18, 0x3d	; 61
     24a:	3e b7       	in	r19, 0x3e	; 62
     24c:	28 50       	subi	r18, 0x08	; 8
     24e:	30 40       	sbci	r19, 0x00	; 0
     250:	0f b6       	in	r0, 0x3f	; 63
     252:	f8 94       	cli
     254:	3e bf       	out	0x3e, r19	; 62
     256:	0f be       	out	0x3f, r0	; 63
     258:	2d bf       	out	0x3d, r18	; 61
     25a:	ed b7       	in	r30, 0x3d	; 61
     25c:	fe b7       	in	r31, 0x3e	; 62
     25e:	31 96       	adiw	r30, 0x01	; 1
     260:	28 e9       	ldi	r18, 0x98	; 152
     262:	30 e0       	ldi	r19, 0x00	; 0
     264:	ad b7       	in	r26, 0x3d	; 61
     266:	be b7       	in	r27, 0x3e	; 62
     268:	12 96       	adiw	r26, 0x02	; 2
     26a:	3c 93       	st	X, r19
     26c:	2e 93       	st	-X, r18
     26e:	11 97       	sbiw	r26, 0x01	; 1
     270:	82 83       	std	Z+2, r24	; 0x02
     272:	13 82       	std	Z+3, r1	; 0x03
     274:	64 83       	std	Z+4, r22	; 0x04
     276:	15 82       	std	Z+5, r1	; 0x05
     278:	96 83       	std	Z+6, r25	; 0x06
     27a:	17 82       	std	Z+7, r1	; 0x07
     27c:	0e 94 89 0a 	call	0x1512	; 0x1512 <printf_P>
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     280:	8b b1       	in	r24, 0x0b	; 11
     282:	8f 70       	andi	r24, 0x0F	; 15
     284:	80 69       	ori	r24, 0x90	; 144
     286:	8b b9       	out	0x0b, r24	; 11
     288:	2d b7       	in	r18, 0x3d	; 61
     28a:	3e b7       	in	r19, 0x3e	; 62
     28c:	28 5f       	subi	r18, 0xF8	; 248
     28e:	3f 4f       	sbci	r19, 0xFF	; 255
     290:	0f b6       	in	r0, 0x3f	; 63
     292:	f8 94       	cli
     294:	3e bf       	out	0x3e, r19	; 62
     296:	0f be       	out	0x3f, r0	; 63
     298:	2d bf       	out	0x3d, r18	; 61
	                         " -- Error Code %d\r\n"
	                         " -- Sub Error Code %d\r\n"
	                         " -- In State %d\r\n" ESC_FG_WHITE), ErrorCode, SubErrorCode, USB_HostState);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
}
     29a:	08 95       	ret

0000029c <EVENT_USB_Host_HostError>:
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
}

/** Event handler for the USB_HostError event. This indicates that a hardware error occurred while in host mode. */
void EVENT_USB_Host_HostError(const uint8_t ErrorCode)
{
     29c:	1f 93       	push	r17
     29e:	18 2f       	mov	r17, r24
	USB_Disable();
     2a0:	cb d3       	rcall	.+1942   	; 0xa38 <USB_Disable>

	printf_P(PSTR(ESC_FG_RED "Host Mode Error\r\n"
     2a2:	00 d0       	rcall	.+0      	; 0x2a4 <EVENT_USB_Host_HostError+0x8>
     2a4:	00 d0       	rcall	.+0      	; 0x2a6 <EVENT_USB_Host_HostError+0xa>
     2a6:	ed b7       	in	r30, 0x3d	; 61
     2a8:	fe b7       	in	r31, 0x3e	; 62
     2aa:	31 96       	adiw	r30, 0x01	; 1
     2ac:	8e ee       	ldi	r24, 0xEE	; 238
     2ae:	90 e0       	ldi	r25, 0x00	; 0
     2b0:	ad b7       	in	r26, 0x3d	; 61
     2b2:	be b7       	in	r27, 0x3e	; 62
     2b4:	12 96       	adiw	r26, 0x02	; 2
     2b6:	9c 93       	st	X, r25
     2b8:	8e 93       	st	-X, r24
     2ba:	11 97       	sbiw	r26, 0x01	; 1
     2bc:	12 83       	std	Z+2, r17	; 0x02
     2be:	13 82       	std	Z+3, r1	; 0x03
     2c0:	0e 94 89 0a 	call	0x1512	; 0x1512 <printf_P>
     2c4:	8b b1       	in	r24, 0x0b	; 11
     2c6:	8f 70       	andi	r24, 0x0F	; 15
     2c8:	80 69       	ori	r24, 0x90	; 144
     2ca:	8b b9       	out	0x0b, r24	; 11
     2cc:	0f 90       	pop	r0
     2ce:	0f 90       	pop	r0
     2d0:	0f 90       	pop	r0
     2d2:	0f 90       	pop	r0
     2d4:	ff cf       	rjmp	.-2      	; 0x2d4 <EVENT_USB_Host_HostError+0x38>

000002d6 <EVENT_USB_Host_DeviceUnattached>:
/** Event handler for the USB_DeviceUnattached event. This indicates that a device has been removed from the host, and
 *  stops the library USB task management process.
 */
void EVENT_USB_Host_DeviceUnattached(void)
{
	puts_P(PSTR("\r\nDevice Unattached.\r\n"));
     2d6:	89 eb       	ldi	r24, 0xB9	; 185
     2d8:	91 e0       	ldi	r25, 0x01	; 1
     2da:	0e 94 ab 0a 	call	0x1556	; 0x1556 <puts_P>
     2de:	8b b1       	in	r24, 0x0b	; 11
     2e0:	8f 70       	andi	r24, 0x0F	; 15
     2e2:	80 61       	ori	r24, 0x10	; 16
     2e4:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
}
     2e6:	08 95       	ret

000002e8 <EVENT_USB_Host_DeviceAttached>:
/** Event handler for the USB_DeviceAttached event. This indicates that a device has been attached to the host, and
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Host_DeviceAttached(void)
{
	puts_P(PSTR("Device Attached.\r\n"));
     2e8:	80 ed       	ldi	r24, 0xD0	; 208
     2ea:	91 e0       	ldi	r25, 0x01	; 1
     2ec:	0e 94 ab 0a 	call	0x1556	; 0x1556 <puts_P>
     2f0:	8b b1       	in	r24, 0x0b	; 11
     2f2:	8f 70       	andi	r24, 0x0F	; 15
     2f4:	80 6a       	ori	r24, 0xA0	; 160
     2f6:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
}
     2f8:	08 95       	ret

000002fa <EVENT_USB_Host_DeviceEnumerationComplete>:

/** Event handler for the USB_DeviceEnumerationComplete event. This indicates that a device has been successfully
 *  enumerated by the host and is now ready to be used by the application.
 */
void EVENT_USB_Host_DeviceEnumerationComplete(void)
{
     2fa:	0f 93       	push	r16
     2fc:	1f 93       	push	r17
     2fe:	df 93       	push	r29
     300:	cf 93       	push	r28
     302:	cd b7       	in	r28, 0x3d	; 61
     304:	de b7       	in	r29, 0x3e	; 62
     306:	c2 50       	subi	r28, 0x02	; 2
     308:	d2 40       	sbci	r29, 0x02	; 2
     30a:	0f b6       	in	r0, 0x3f	; 63
     30c:	f8 94       	cli
     30e:	de bf       	out	0x3e, r29	; 62
     310:	0f be       	out	0x3f, r0	; 63
     312:	cd bf       	out	0x3d, r28	; 61
     314:	8b b1       	in	r24, 0x0b	; 11
     316:	8f 70       	andi	r24, 0x0F	; 15
     318:	80 6a       	ori	r24, 0xA0	; 160
     31a:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);

	uint16_t ConfigDescriptorSize;
	uint8_t  ConfigDescriptorData[512];

	if (USB_Host_GetDeviceConfigDescriptor(1, &ConfigDescriptorSize, ConfigDescriptorData,
     31c:	8e 01       	movw	r16, r28
     31e:	0d 5f       	subi	r16, 0xFD	; 253
     320:	1f 4f       	sbci	r17, 0xFF	; 255
     322:	81 e0       	ldi	r24, 0x01	; 1
     324:	be 01       	movw	r22, r28
     326:	6f 5f       	subi	r22, 0xFF	; 255
     328:	7f 4f       	sbci	r23, 0xFF	; 255
     32a:	a8 01       	movw	r20, r16
     32c:	20 e0       	ldi	r18, 0x00	; 0
     32e:	32 e0       	ldi	r19, 0x02	; 2
     330:	d6 d4       	rcall	.+2476   	; 0xcde <USB_Host_GetDeviceConfigDescriptor>
     332:	88 23       	and	r24, r24
     334:	19 f0       	breq	.+6      	; 0x33c <EVENT_USB_Host_DeviceEnumerationComplete+0x42>
	                                       sizeof(ConfigDescriptorData)) != HOST_GETCONFIG_Successful)
	{
		puts_P(PSTR("Error Retrieving Configuration Descriptor.\r\n"));
     336:	8c e8       	ldi	r24, 0x8C	; 140
     338:	91 e0       	ldi	r25, 0x01	; 1
     33a:	11 c0       	rjmp	.+34     	; 0x35e <EVENT_USB_Host_DeviceEnumerationComplete+0x64>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (CDC_Host_ConfigurePipes(&VirtualSerial_CDC_Interface,
     33c:	69 81       	ldd	r22, Y+1	; 0x01
     33e:	7a 81       	ldd	r23, Y+2	; 0x02
     340:	80 e0       	ldi	r24, 0x00	; 0
     342:	91 e0       	ldi	r25, 0x01	; 1
     344:	a8 01       	movw	r20, r16
     346:	9d d7       	rcall	.+3898   	; 0x1282 <CDC_Host_ConfigurePipes>
     348:	88 23       	and	r24, r24
     34a:	19 f0       	breq	.+6      	; 0x352 <EVENT_USB_Host_DeviceEnumerationComplete+0x58>
	                            ConfigDescriptorSize, ConfigDescriptorData) != CDC_ENUMERROR_NoError)
	{
		puts_P(PSTR("Attached Device Not a Valid CDC Class Device.\r\n"));
     34c:	8c e5       	ldi	r24, 0x5C	; 92
     34e:	91 e0       	ldi	r25, 0x01	; 1
     350:	06 c0       	rjmp	.+12     	; 0x35e <EVENT_USB_Host_DeviceEnumerationComplete+0x64>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (USB_Host_SetDeviceConfiguration(1) != HOST_SENDCONTROL_Successful)
     352:	81 e0       	ldi	r24, 0x01	; 1
     354:	4f d6       	rcall	.+3230   	; 0xff4 <USB_Host_SetDeviceConfiguration>
     356:	88 23       	and	r24, r24
     358:	41 f0       	breq	.+16     	; 0x36a <EVENT_USB_Host_DeviceEnumerationComplete+0x70>
	{
		puts_P(PSTR("Error Setting Device Configuration.\r\n"));
     35a:	86 e3       	ldi	r24, 0x36	; 54
     35c:	91 e0       	ldi	r25, 0x01	; 1
     35e:	0e 94 ab 0a 	call	0x1556	; 0x1556 <puts_P>
     362:	8b b1       	in	r24, 0x0b	; 11
     364:	8f 70       	andi	r24, 0x0F	; 15
     366:	80 69       	ori	r24, 0x90	; 144
     368:	07 c0       	rjmp	.+14     	; 0x378 <EVENT_USB_Host_DeviceEnumerationComplete+0x7e>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	puts_P(PSTR("CDC Device Enumerated.\r\n"));
     36a:	8d e1       	ldi	r24, 0x1D	; 29
     36c:	91 e0       	ldi	r25, 0x01	; 1
     36e:	0e 94 ab 0a 	call	0x1556	; 0x1556 <puts_P>
     372:	8b b1       	in	r24, 0x0b	; 11
     374:	8f 70       	andi	r24, 0x0F	; 15
     376:	80 66       	ori	r24, 0x60	; 96
     378:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
}
     37a:	ce 5f       	subi	r28, 0xFE	; 254
     37c:	dd 4f       	sbci	r29, 0xFD	; 253
     37e:	0f b6       	in	r0, 0x3f	; 63
     380:	f8 94       	cli
     382:	de bf       	out	0x3e, r29	; 62
     384:	0f be       	out	0x3f, r0	; 63
     386:	cd bf       	out	0x3d, r28	; 61
     388:	cf 91       	pop	r28
     38a:	df 91       	pop	r29
     38c:	1f 91       	pop	r17
     38e:	0f 91       	pop	r16
     390:	08 95       	ret

00000392 <CDCHost_Task>:
/** Task to manage an enumerated USB CDC device once connected, to print received data
 *  from the device to the serial port.
 */
void CDCHost_Task(void)
{
	if (USB_HostState != HOST_STATE_Configured)
     392:	80 91 35 01 	lds	r24, 0x0135
     396:	8b 30       	cpi	r24, 0x0B	; 11
     398:	81 f4       	brne	.+32     	; 0x3ba <CDCHost_Task+0x28>
	  return;

	if (CDC_Host_BytesReceived(&VirtualSerial_CDC_Interface))
     39a:	80 e0       	ldi	r24, 0x00	; 0
     39c:	91 e0       	ldi	r25, 0x01	; 1
     39e:	80 d6       	rcall	.+3328   	; 0x10a0 <CDC_Host_BytesReceived>
     3a0:	89 2b       	or	r24, r25
     3a2:	59 f0       	breq	.+22     	; 0x3ba <CDCHost_Task+0x28>
	{
		/* Echo received bytes from the attached device through the USART */
		int16_t ReceivedByte = CDC_Host_ReceiveByte(&VirtualSerial_CDC_Interface);
     3a4:	80 e0       	ldi	r24, 0x00	; 0
     3a6:	91 e0       	ldi	r25, 0x01	; 1
     3a8:	ae d6       	rcall	.+3420   	; 0x1106 <CDC_Host_ReceiveByte>
		if (!(ReceivedByte < 0))
     3aa:	97 fd       	sbrc	r25, 7
     3ac:	06 c0       	rjmp	.+12     	; 0x3ba <CDCHost_Task+0x28>
		  putchar(ReceivedByte);
     3ae:	60 91 46 01 	lds	r22, 0x0146
     3b2:	70 91 47 01 	lds	r23, 0x0147
     3b6:	0c 94 5d 0a 	jmp	0x14ba	; 0x14ba <fputc>
     3ba:	08 95       	ret

000003bc <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     3bc:	84 b7       	in	r24, 0x34	; 52
     3be:	87 7f       	andi	r24, 0xF7	; 247
     3c0:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     3c2:	38 e1       	ldi	r19, 0x18	; 24
     3c4:	0f b6       	in	r0, 0x3f	; 63
     3c6:	f8 94       	cli
     3c8:	30 93 60 00 	sts	0x0060, r19
     3cc:	10 92 60 00 	sts	0x0060, r1
     3d0:	0f be       	out	0x3f, r0	; 63

	/* Disable clock division */
	clock_prescale_set(clock_div_1);
     3d2:	80 e0       	ldi	r24, 0x00	; 0
     3d4:	90 e0       	ldi	r25, 0x00	; 0
     3d6:	20 e8       	ldi	r18, 0x80	; 128
     3d8:	0f b6       	in	r0, 0x3f	; 63
     3da:	f8 94       	cli
     3dc:	20 93 61 00 	sts	0x0061, r18
     3e0:	80 93 61 00 	sts	0x0061, r24
     3e4:	0f be       	out	0x3f, r0	; 63
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     3e6:	83 e3       	ldi	r24, 0x33	; 51
     3e8:	90 e0       	ldi	r25, 0x00	; 0
     3ea:	90 93 cd 00 	sts	0x00CD, r25
     3ee:	80 93 cc 00 	sts	0x00CC, r24

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     3f2:	86 e0       	ldi	r24, 0x06	; 6
     3f4:	80 93 ca 00 	sts	0x00CA, r24
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     3f8:	10 92 c8 00 	sts	0x00C8, r1
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     3fc:	30 93 c9 00 	sts	0x00C9, r19

				DDRD  |= (1 << 3);
     400:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     402:	5a 9a       	sbi	0x0b, 2	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     404:	8a b1       	in	r24, 0x0a	; 10
     406:	80 6f       	ori	r24, 0xF0	; 240
     408:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     40a:	8b b1       	in	r24, 0x0b	; 11
     40c:	8f 70       	andi	r24, 0x0F	; 15
     40e:	8b b9       	out	0x0b, r24	; 11

	/* Hardware Initialization */
	Serial_Init(9600, false);
	LEDs_Init();
	USB_Init();
     410:	0a d3       	rcall	.+1556   	; 0xa26 <USB_Init>
			static inline void Serial_CreateStream(FILE* Stream)
			{
				if (!(Stream))
				{
					Stream = &USARTSerialStream;
					stdin  = Stream;
     412:	e6 e3       	ldi	r30, 0x36	; 54
     414:	f1 e0       	ldi	r31, 0x01	; 1
     416:	f0 93 45 01 	sts	0x0145, r31
     41a:	e0 93 44 01 	sts	0x0144, r30
					stdout = Stream;
     41e:	f0 93 47 01 	sts	0x0147, r31
     422:	e0 93 46 01 	sts	0x0146, r30
				}
			
				*Stream = (FILE)FDEV_SETUP_STREAM(Serial_putchar, Serial_getchar, _FDEV_SETUP_RW);
     426:	8e e0       	ldi	r24, 0x0E	; 14
     428:	df 01       	movw	r26, r30
     42a:	1d 92       	st	X+, r1
     42c:	8a 95       	dec	r24
     42e:	e9 f7       	brne	.-6      	; 0x42a <SetupHardware+0x6e>
     430:	83 e0       	ldi	r24, 0x03	; 3
     432:	80 93 39 01 	sts	0x0139, r24
     436:	8f e3       	ldi	r24, 0x3F	; 63
     438:	9a e0       	ldi	r25, 0x0A	; 10
     43a:	90 93 3f 01 	sts	0x013F, r25
     43e:	80 93 3e 01 	sts	0x013E, r24
     442:	89 e4       	ldi	r24, 0x49	; 73
     444:	9a e0       	ldi	r25, 0x0A	; 10
     446:	90 93 41 01 	sts	0x0141, r25
     44a:	80 93 40 01 	sts	0x0140, r24

	/* Create a stdio stream for the serial port for stdin and stdout */
	Serial_CreateStream(NULL);
}
     44e:	08 95       	ret

00000450 <main>:
/** Main program entry point. This routine configures the hardware required by the application, then
 *  enters a loop to run the application tasks in sequence.
 */
int main(void)
{
	SetupHardware();
     450:	b5 df       	rcall	.-150    	; 0x3bc <SetupHardware>
	
	puts_P(PSTR(ESC_FG_CYAN "CDC Host Demo running.\r\n" ESC_FG_WHITE));
     452:	83 ee       	ldi	r24, 0xE3	; 227
     454:	91 e0       	ldi	r25, 0x01	; 1
     456:	0e 94 ab 0a 	call	0x1556	; 0x1556 <puts_P>
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     45a:	8b b1       	in	r24, 0x0b	; 11
     45c:	8f 70       	andi	r24, 0x0F	; 15
     45e:	80 61       	ori	r24, 0x10	; 16
     460:	8b b9       	out	0x0b, r24	; 11

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
	sei();
     462:	78 94       	sei

	for (;;)
	{
		CDCHost_Task();
     464:	96 df       	rcall	.-212    	; 0x392 <CDCHost_Task>

		CDC_Host_USBTask(&VirtualSerial_CDC_Interface);
     466:	80 e0       	ldi	r24, 0x00	; 0
     468:	91 e0       	ldi	r25, 0x01	; 1
     46a:	b7 d6       	rcall	.+3438   	; 0x11da <CDC_Host_USBTask>
		USB_USBTask();
     46c:	e8 d5       	rcall	.+3024   	; 0x103e <USB_USBTask>
     46e:	fa cf       	rjmp	.-12     	; 0x464 <main+0x14>

00000470 <USB_Host_WaitMS>:
		USB_ResetInterface();
	}
}

uint8_t USB_Host_WaitMS(uint8_t MS)
{
     470:	98 2f       	mov	r25, r24
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     472:	20 91 9e 00 	lds	r18, 0x009E
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     476:	30 91 a0 00 	lds	r19, 0x00A0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     47a:	80 91 a0 00 	lds	r24, 0x00A0
     47e:	8f 7d       	andi	r24, 0xDF	; 223
     480:	80 93 a0 00 	sts	0x00A0, r24
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     484:	80 91 9f 00 	lds	r24, 0x009F
     488:	8f 7d       	andi	r24, 0xDF	; 223
     48a:	80 93 9f 00 	sts	0x009F, r24
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     48e:	80 91 9e 00 	lds	r24, 0x009E
     492:	81 60       	ori	r24, 0x01	; 1
     494:	80 93 9e 00 	sts	0x009E, r24
     498:	28 c0       	rjmp	.+80     	; 0x4ea <USB_Host_WaitMS+0x7a>
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     49a:	80 91 9f 00 	lds	r24, 0x009F

	USB_Host_ResumeBus();

	while (MS)
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     49e:	85 ff       	sbrs	r24, 5
     4a0:	06 c0       	rjmp	.+12     	; 0x4ae <USB_Host_WaitMS+0x3e>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     4a2:	80 91 9f 00 	lds	r24, 0x009F
     4a6:	8f 7d       	andi	r24, 0xDF	; 223
     4a8:	80 93 9f 00 	sts	0x009F, r24
		{
			USB_INT_Clear(USB_INT_HSOFI);
			MS--;
     4ac:	91 50       	subi	r25, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
     4ae:	80 91 35 01 	lds	r24, 0x0135
     4b2:	81 30       	cpi	r24, 0x01	; 1
     4b4:	11 f4       	brne	.+4      	; 0x4ba <USB_Host_WaitMS+0x4a>
     4b6:	91 e0       	ldi	r25, 0x01	; 1
     4b8:	1a c0       	rjmp	.+52     	; 0x4ee <USB_Host_WaitMS+0x7e>
			 *  \return Boolean \c true if an error has occurred on the selected pipe, \c false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
     4ba:	80 91 a6 00 	lds	r24, 0x00A6
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError() == true)
     4be:	84 ff       	sbrs	r24, 4
     4c0:	09 c0       	rjmp	.+18     	; 0x4d4 <USB_Host_WaitMS+0x64>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     4c2:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
     4c6:	80 91 a6 00 	lds	r24, 0x00A6
     4ca:	8f 7e       	andi	r24, 0xEF	; 239
     4cc:	80 93 a6 00 	sts	0x00A6, r24
     4d0:	92 e0       	ldi	r25, 0x02	; 2
     4d2:	0d c0       	rjmp	.+26     	; 0x4ee <USB_Host_WaitMS+0x7e>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     4d4:	80 91 a6 00 	lds	r24, 0x00A6
			ErrorCode = HOST_WAITERROR_PipeError;

			break;
		}

		if (Pipe_IsStalled() == true)
     4d8:	81 ff       	sbrs	r24, 1
     4da:	07 c0       	rjmp	.+14     	; 0x4ea <USB_Host_WaitMS+0x7a>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
     4dc:	80 91 a6 00 	lds	r24, 0x00A6
     4e0:	8d 7f       	andi	r24, 0xFD	; 253
     4e2:	80 93 a6 00 	sts	0x00A6, r24
     4e6:	93 e0       	ldi	r25, 0x03	; 3
     4e8:	02 c0       	rjmp	.+4      	; 0x4ee <USB_Host_WaitMS+0x7e>
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     4ea:	99 23       	and	r25, r25
     4ec:	b1 f6       	brne	.-84     	; 0x49a <USB_Host_WaitMS+0x2a>

			break;
		}
	}

	if (BusSuspended)
     4ee:	20 fd       	sbrc	r18, 0
     4f0:	05 c0       	rjmp	.+10     	; 0x4fc <USB_Host_WaitMS+0x8c>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     4f2:	80 91 9e 00 	lds	r24, 0x009E
     4f6:	8e 7f       	andi	r24, 0xFE	; 254
     4f8:	80 93 9e 00 	sts	0x009E, r24
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
     4fc:	35 ff       	sbrs	r19, 5
     4fe:	05 c0       	rjmp	.+10     	; 0x50a <USB_Host_WaitMS+0x9a>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     500:	80 91 a0 00 	lds	r24, 0x00A0
     504:	80 62       	ori	r24, 0x20	; 32
     506:	80 93 a0 00 	sts	0x00A0, r24
	  USB_INT_Enable(USB_INT_HSOFI);

	return ErrorCode;
}
     50a:	89 2f       	mov	r24, r25
     50c:	08 95       	ret

0000050e <USB_Host_ResetDevice>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     50e:	60 91 9e 00 	lds	r22, 0x009E
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     512:	80 91 a0 00 	lds	r24, 0x00A0
     516:	8d 7f       	andi	r24, 0xFD	; 253
     518:	80 93 a0 00 	sts	0x00A0, r24
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
     51c:	80 91 9e 00 	lds	r24, 0x009E
     520:	82 60       	ori	r24, 0x02	; 2
     522:	80 93 9e 00 	sts	0x009E, r24
			 *  \return Boolean \c true if no bus reset is currently being sent, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
     526:	80 91 9e 00 	lds	r24, 0x009E
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
     52a:	81 fd       	sbrc	r24, 1
     52c:	fc cf       	rjmp	.-8      	; 0x526 <USB_Host_ResetDevice+0x18>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     52e:	80 91 9e 00 	lds	r24, 0x009E
     532:	81 60       	ori	r24, 0x01	; 1
     534:	80 93 9e 00 	sts	0x009E, r24
	USB_Host_ResumeBus();
	
	USB_Host_ConfigurationNumber = 0;
     538:	10 92 2b 01 	sts	0x012B, r1
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     53c:	30 91 a0 00 	lds	r19, 0x00A0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     540:	80 91 a0 00 	lds	r24, 0x00A0
     544:	8f 7d       	andi	r24, 0xDF	; 223
     546:	80 93 a0 00 	sts	0x00A0, r24
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     54a:	80 91 9f 00 	lds	r24, 0x009F
     54e:	8f 7d       	andi	r24, 0xDF	; 223
     550:	80 93 9f 00 	sts	0x009F, r24
     554:	2a e0       	ldi	r18, 0x0A	; 10
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     556:	40 ed       	ldi	r20, 0xD0	; 208
     558:	57 e0       	ldi	r21, 0x07	; 7
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     55a:	80 91 9f 00 	lds	r24, 0x009F
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     55e:	85 ff       	sbrs	r24, 5
     560:	0b c0       	rjmp	.+22     	; 0x578 <USB_Host_ResetDevice+0x6a>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     562:	80 91 9f 00 	lds	r24, 0x009F
     566:	8f 7d       	andi	r24, 0xDF	; 223
     568:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     56c:	80 91 9f 00 	lds	r24, 0x009F
     570:	8d 7f       	andi	r24, 0xFD	; 253
     572:	80 93 9f 00 	sts	0x009F, r24
     576:	05 c0       	rjmp	.+10     	; 0x582 <USB_Host_ResetDevice+0x74>
     578:	ca 01       	movw	r24, r20
     57a:	01 97       	sbiw	r24, 0x01	; 1
     57c:	f1 f7       	brne	.-4      	; 0x57a <USB_Host_ResetDevice+0x6c>
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
     57e:	21 50       	subi	r18, 0x01	; 1
     580:	61 f7       	brne	.-40     	; 0x55a <USB_Host_ResetDevice+0x4c>
		}

		Delay_MS(1);
	}

	if (HSOFIEnabled)
     582:	35 ff       	sbrs	r19, 5
     584:	05 c0       	rjmp	.+10     	; 0x590 <USB_Host_ResetDevice+0x82>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     586:	80 91 a0 00 	lds	r24, 0x00A0
     58a:	80 62       	ori	r24, 0x20	; 32
     58c:	80 93 a0 00 	sts	0x00A0, r24
	  USB_INT_Enable(USB_INT_HSOFI);

	if (BusSuspended)
     590:	60 fd       	sbrc	r22, 0
     592:	05 c0       	rjmp	.+10     	; 0x59e <USB_Host_ResetDevice+0x90>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     594:	80 91 9e 00 	lds	r24, 0x009E
     598:	8e 7f       	andi	r24, 0xFE	; 254
     59a:	80 93 9e 00 	sts	0x009E, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     59e:	80 91 a0 00 	lds	r24, 0x00A0
     5a2:	82 60       	ori	r24, 0x02	; 2
     5a4:	80 93 a0 00 	sts	0x00A0, r24
	  USB_Host_SuspendBus();

	USB_INT_Enable(USB_INT_DDISCI);
}
     5a8:	08 95       	ret

000005aa <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "../Host.h"

void USB_Host_ProcessNextHostState(void)
{
     5aa:	ef 92       	push	r14
     5ac:	0f 93       	push	r16
     5ae:	1f 93       	push	r17
     5b0:	df 93       	push	r29
     5b2:	cf 93       	push	r28
     5b4:	cd b7       	in	r28, 0x3d	; 61
     5b6:	de b7       	in	r29, 0x3e	; 62
     5b8:	28 97       	sbiw	r28, 0x08	; 8
     5ba:	0f b6       	in	r0, 0x3f	; 63
     5bc:	f8 94       	cli
     5be:	de bf       	out	0x3e, r29	; 62
     5c0:	0f be       	out	0x3f, r0	; 63
     5c2:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
     5c4:	80 91 35 01 	lds	r24, 0x0135
     5c8:	85 30       	cpi	r24, 0x05	; 5
     5ca:	09 f4       	brne	.+2      	; 0x5ce <USB_Host_ProcessNextHostState+0x24>
     5cc:	94 c0       	rjmp	.+296    	; 0x6f6 <USB_Host_ProcessNextHostState+0x14c>
     5ce:	86 30       	cpi	r24, 0x06	; 6
     5d0:	68 f4       	brcc	.+26     	; 0x5ec <USB_Host_ProcessNextHostState+0x42>
     5d2:	82 30       	cpi	r24, 0x02	; 2
     5d4:	b9 f1       	breq	.+110    	; 0x644 <USB_Host_ProcessNextHostState+0x9a>
     5d6:	83 30       	cpi	r24, 0x03	; 3
     5d8:	18 f4       	brcc	.+6      	; 0x5e0 <USB_Host_ProcessNextHostState+0x36>
     5da:	88 23       	and	r24, r24
     5dc:	a1 f0       	breq	.+40     	; 0x606 <USB_Host_ProcessNextHostState+0x5c>
     5de:	04 c1       	rjmp	.+520    	; 0x7e8 <USB_Host_ProcessNextHostState+0x23e>
     5e0:	83 30       	cpi	r24, 0x03	; 3
     5e2:	d1 f1       	breq	.+116    	; 0x658 <USB_Host_ProcessNextHostState+0xae>
     5e4:	84 30       	cpi	r24, 0x04	; 4
     5e6:	09 f0       	breq	.+2      	; 0x5ea <USB_Host_ProcessNextHostState+0x40>
     5e8:	ff c0       	rjmp	.+510    	; 0x7e8 <USB_Host_ProcessNextHostState+0x23e>
     5ea:	5d c0       	rjmp	.+186    	; 0x6a6 <USB_Host_ProcessNextHostState+0xfc>
     5ec:	87 30       	cpi	r24, 0x07	; 7
     5ee:	09 f4       	brne	.+2      	; 0x5f2 <USB_Host_ProcessNextHostState+0x48>
     5f0:	9b c0       	rjmp	.+310    	; 0x728 <USB_Host_ProcessNextHostState+0x17e>
     5f2:	87 30       	cpi	r24, 0x07	; 7
     5f4:	08 f4       	brcc	.+2      	; 0x5f8 <USB_Host_ProcessNextHostState+0x4e>
     5f6:	8a c0       	rjmp	.+276    	; 0x70c <USB_Host_ProcessNextHostState+0x162>
     5f8:	88 30       	cpi	r24, 0x08	; 8
     5fa:	09 f4       	brne	.+2      	; 0x5fe <USB_Host_ProcessNextHostState+0x54>
     5fc:	b3 c0       	rjmp	.+358    	; 0x764 <USB_Host_ProcessNextHostState+0x1ba>
     5fe:	89 30       	cpi	r24, 0x09	; 9
     600:	09 f0       	breq	.+2      	; 0x604 <USB_Host_ProcessNextHostState+0x5a>
     602:	f2 c0       	rjmp	.+484    	; 0x7e8 <USB_Host_ProcessNextHostState+0x23e>
     604:	d7 c0       	rjmp	.+430    	; 0x7b4 <USB_Host_ProcessNextHostState+0x20a>
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
     606:	00 91 29 01 	lds	r16, 0x0129
     60a:	10 91 2a 01 	lds	r17, 0x012A
     60e:	01 15       	cp	r16, r1
     610:	11 05       	cpc	r17, r1
     612:	09 f4       	brne	.+2      	; 0x616 <USB_Host_ProcessNextHostState+0x6c>
     614:	e9 c0       	rjmp	.+466    	; 0x7e8 <USB_Host_ProcessNextHostState+0x23e>
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     616:	81 e0       	ldi	r24, 0x01	; 1
     618:	2b df       	rcall	.-426    	; 0x470 <USB_Host_WaitMS>
     61a:	68 2f       	mov	r22, r24
     61c:	88 23       	and	r24, r24
     61e:	31 f0       	breq	.+12     	; 0x62c <USB_Host_ProcessNextHostState+0x82>
				{
					USB_HostState = PostWaitState;
     620:	80 91 28 01 	lds	r24, 0x0128
     624:	80 93 35 01 	sts	0x0135, r24
     628:	91 e0       	ldi	r25, 0x01	; 1
     62a:	da c0       	rjmp	.+436    	; 0x7e0 <USB_Host_ProcessNextHostState+0x236>
					ErrorCode     = HOST_ENUMERROR_WaitStage;
					break;
				}

				if (!(--WaitMSRemaining))
     62c:	c8 01       	movw	r24, r16
     62e:	01 97       	sbiw	r24, 0x01	; 1
     630:	90 93 2a 01 	sts	0x012A, r25
     634:	80 93 29 01 	sts	0x0129, r24
     638:	89 2b       	or	r24, r25
     63a:	09 f0       	breq	.+2      	; 0x63e <USB_Host_ProcessNextHostState+0x94>
     63c:	d5 c0       	rjmp	.+426    	; 0x7e8 <USB_Host_ProcessNextHostState+0x23e>
				  USB_HostState = PostWaitState;
     63e:	80 91 28 01 	lds	r24, 0x0128
     642:	07 c0       	rjmp	.+14     	; 0x652 <USB_Host_ProcessNextHostState+0xa8>
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
     644:	88 ee       	ldi	r24, 0xE8	; 232
     646:	93 e0       	ldi	r25, 0x03	; 3
     648:	90 93 2a 01 	sts	0x012A, r25
     64c:	80 93 29 01 	sts	0x0129, r24

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
     650:	83 e0       	ldi	r24, 0x03	; 3
     652:	80 93 35 01 	sts	0x0135, r24
     656:	c8 c0       	rjmp	.+400    	; 0x7e8 <USB_Host_ProcessNextHostState+0x23e>
			break;
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
     658:	80 91 29 01 	lds	r24, 0x0129
     65c:	90 91 2a 01 	lds	r25, 0x012A
     660:	01 97       	sbiw	r24, 0x01	; 1
     662:	90 93 2a 01 	sts	0x012A, r25
     666:	80 93 29 01 	sts	0x0129, r24
     66a:	01 96       	adiw	r24, 0x01	; 1
     66c:	29 f0       	breq	.+10     	; 0x678 <USB_Host_ProcessNextHostState+0xce>
     66e:	80 ed       	ldi	r24, 0xD0	; 208
     670:	97 e0       	ldi	r25, 0x07	; 7
     672:	01 97       	sbiw	r24, 0x01	; 1
     674:	f1 f7       	brne	.-4      	; 0x672 <USB_Host_ProcessNextHostState+0xc8>
     676:	b8 c0       	rjmp	.+368    	; 0x7e8 <USB_Host_ProcessNextHostState+0x23e>
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
     678:	77 98       	cbi	0x0e, 7	; 14

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     67a:	80 91 d8 00 	lds	r24, 0x00D8
     67e:	80 61       	ori	r24, 0x10	; 16
     680:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
     684:	80 91 dd 00 	lds	r24, 0x00DD
     688:	8b 7f       	andi	r24, 0xFB	; 251
     68a:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON |=  (1 << UVCONE);
     68e:	80 91 d7 00 	lds	r24, 0x00D7
     692:	80 61       	ori	r24, 0x10	; 16
     694:	80 93 d7 00 	sts	0x00D7, r24
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
     698:	80 91 dd 00 	lds	r24, 0x00DD
     69c:	82 60       	ori	r24, 0x02	; 2
     69e:	80 93 dd 00 	sts	0x00DD, r24

				USB_OTGPAD_On();
				USB_Host_VBUS_Auto_Enable();
				USB_Host_VBUS_Auto_On();

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
     6a2:	84 e0       	ldi	r24, 0x04	; 4
     6a4:	d6 cf       	rjmp	.-84     	; 0x652 <USB_Host_ProcessNextHostState+0xa8>
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
     6a6:	80 91 9f 00 	lds	r24, 0x009F
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
     6aa:	80 ff       	sbrs	r24, 0
     6ac:	9d c0       	rjmp	.+314    	; 0x7e8 <USB_Host_ProcessNextHostState+0x23e>
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     6ae:	80 91 9f 00 	lds	r24, 0x009F
     6b2:	8e 7f       	andi	r24, 0xFE	; 254
     6b4:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     6b8:	80 91 9f 00 	lds	r24, 0x009F
     6bc:	8d 7f       	andi	r24, 0xFD	; 253
     6be:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     6c2:	80 91 df 00 	lds	r24, 0x00DF
     6c6:	8d 7f       	andi	r24, 0xFD	; 253
     6c8:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
     6cc:	80 91 de 00 	lds	r24, 0x00DE
     6d0:	82 60       	ori	r24, 0x02	; 2
     6d2:	80 93 de 00 	sts	0x00DE, r24
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     6d6:	80 91 9e 00 	lds	r24, 0x009E
     6da:	81 60       	ori	r24, 0x01	; 1
     6dc:	80 93 9e 00 	sts	0x009E, r24

				USB_INT_Clear(USB_INT_VBERRI);
				USB_INT_Enable(USB_INT_VBERRI);

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
     6e0:	ed d0       	rcall	.+474    	; 0x8bc <Pipe_ClearPipes>

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
     6e2:	10 92 35 01 	sts	0x0135, r1
     6e6:	84 e6       	ldi	r24, 0x64	; 100
     6e8:	90 e0       	ldi	r25, 0x00	; 0
     6ea:	90 93 2a 01 	sts	0x012A, r25
     6ee:	80 93 29 01 	sts	0x0129, r24
     6f2:	85 e0       	ldi	r24, 0x05	; 5
     6f4:	5c c0       	rjmp	.+184    	; 0x7ae <USB_Host_ProcessNextHostState+0x204>
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
     6f6:	0b df       	rcall	.-490    	; 0x50e <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
     6f8:	10 92 35 01 	sts	0x0135, r1
     6fc:	88 ec       	ldi	r24, 0xC8	; 200
     6fe:	90 e0       	ldi	r25, 0x00	; 0
     700:	90 93 2a 01 	sts	0x012A, r25
     704:	80 93 29 01 	sts	0x0129, r24
     708:	86 e0       	ldi	r24, 0x06	; 6
     70a:	51 c0       	rjmp	.+162    	; 0x7ae <USB_Host_ProcessNextHostState+0x204>
			break;
		case HOST_STATE_Powered_ConfigPipe:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
     70c:	80 e0       	ldi	r24, 0x00	; 0
     70e:	60 e0       	ldi	r22, 0x00	; 0
     710:	40 e0       	ldi	r20, 0x00	; 0
     712:	20 e0       	ldi	r18, 0x00	; 0
     714:	00 e4       	ldi	r16, 0x40	; 64
     716:	10 e0       	ldi	r17, 0x00	; 0
     718:	ee 24       	eor	r14, r14
     71a:	72 d0       	rcall	.+228    	; 0x800 <Pipe_ConfigurePipe>
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     71c:	80 91 ac 00 	lds	r24, 0x00AC
							   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
							   PIPE_CONTROLPIPE_DEFAULT_SIZE, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
     720:	87 ff       	sbrs	r24, 7
     722:	5c c0       	rjmp	.+184    	; 0x7dc <USB_Host_ProcessNextHostState+0x232>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
     724:	87 e0       	ldi	r24, 0x07	; 7
     726:	95 cf       	rjmp	.-214    	; 0x652 <USB_Host_ProcessNextHostState+0xa8>
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
     728:	ad e2       	ldi	r26, 0x2D	; 45
     72a:	b1 e0       	ldi	r27, 0x01	; 1
     72c:	ef e1       	ldi	r30, 0x1F	; 31
     72e:	f1 e0       	ldi	r31, 0x01	; 1
     730:	88 e0       	ldi	r24, 0x08	; 8
     732:	01 90       	ld	r0, Z+
     734:	0d 92       	st	X+, r0
     736:	81 50       	subi	r24, 0x01	; 1
     738:	e1 f7       	brne	.-8      	; 0x732 <USB_Host_ProcessNextHostState+0x188>
					.wLength       = 8,
				};

			uint8_t DataBuffer[8];

			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
     73a:	ce 01       	movw	r24, r28
     73c:	01 96       	adiw	r24, 0x01	; 1
     73e:	53 d3       	rcall	.+1702   	; 0xde6 <USB_Host_SendControlRequest>
     740:	68 2f       	mov	r22, r24
     742:	88 23       	and	r24, r24
     744:	09 f0       	breq	.+2      	; 0x748 <USB_Host_ProcessNextHostState+0x19e>
     746:	48 c0       	rjmp	.+144    	; 0x7d8 <USB_Host_ProcessNextHostState+0x22e>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_Host_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
     748:	88 85       	ldd	r24, Y+8	; 0x08
     74a:	80 93 27 01 	sts	0x0127, r24

			USB_Host_ResetDevice();
     74e:	df de       	rcall	.-578    	; 0x50e <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
     750:	10 92 35 01 	sts	0x0135, r1
     754:	88 ec       	ldi	r24, 0xC8	; 200
     756:	90 e0       	ldi	r25, 0x00	; 0
     758:	90 93 2a 01 	sts	0x012A, r25
     75c:	80 93 29 01 	sts	0x0129, r24
     760:	88 e0       	ldi	r24, 0x08	; 8
     762:	25 c0       	rjmp	.+74     	; 0x7ae <USB_Host_ProcessNextHostState+0x204>
			break;
		case HOST_STATE_Default_PostReset:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
     764:	00 91 27 01 	lds	r16, 0x0127
     768:	80 e0       	ldi	r24, 0x00	; 0
     76a:	60 e0       	ldi	r22, 0x00	; 0
     76c:	40 e0       	ldi	r20, 0x00	; 0
     76e:	20 e0       	ldi	r18, 0x00	; 0
     770:	10 e0       	ldi	r17, 0x00	; 0
     772:	ee 24       	eor	r14, r14
     774:	45 d0       	rcall	.+138    	; 0x800 <Pipe_ConfigurePipe>
     776:	80 91 ac 00 	lds	r24, 0x00AC
			                   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
			                   USB_Host_ControlPipeSize, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
     77a:	87 ff       	sbrs	r24, 7
     77c:	2f c0       	rjmp	.+94     	; 0x7dc <USB_Host_ProcessNextHostState+0x232>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
     77e:	ad e2       	ldi	r26, 0x2D	; 45
     780:	b1 e0       	ldi	r27, 0x01	; 1
     782:	e7 e1       	ldi	r30, 0x17	; 23
     784:	f1 e0       	ldi	r31, 0x01	; 1
     786:	88 e0       	ldi	r24, 0x08	; 8
     788:	01 90       	ld	r0, Z+
     78a:	0d 92       	st	X+, r0
     78c:	81 50       	subi	r24, 0x01	; 1
     78e:	e1 f7       	brne	.-8      	; 0x788 <USB_Host_ProcessNextHostState+0x1de>
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
     790:	80 e0       	ldi	r24, 0x00	; 0
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	28 d3       	rcall	.+1616   	; 0xde6 <USB_Host_SendControlRequest>
     796:	68 2f       	mov	r22, r24
     798:	88 23       	and	r24, r24
     79a:	f1 f4       	brne	.+60     	; 0x7d8 <USB_Host_ProcessNextHostState+0x22e>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
     79c:	10 92 35 01 	sts	0x0135, r1
     7a0:	84 e6       	ldi	r24, 0x64	; 100
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	90 93 2a 01 	sts	0x012A, r25
     7a8:	80 93 29 01 	sts	0x0129, r24
     7ac:	89 e0       	ldi	r24, 0x09	; 9
     7ae:	80 93 28 01 	sts	0x0128, r24
     7b2:	1a c0       	rjmp	.+52     	; 0x7e8 <USB_Host_ProcessNextHostState+0x23e>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
     7b4:	81 e0       	ldi	r24, 0x01	; 1
     7b6:	80 93 a1 00 	sts	0x00A1, r24
			break;
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			USB_HostState = HOST_STATE_Addressed;
     7ba:	8a e0       	ldi	r24, 0x0A	; 10
     7bc:	80 93 35 01 	sts	0x0135, r24

			EVENT_USB_Host_DeviceEnumerationComplete();
     7c0:	9c dd       	rcall	.-1224   	; 0x2fa <EVENT_USB_Host_DeviceEnumerationComplete>
     7c2:	12 c0       	rjmp	.+36     	; 0x7e8 <USB_Host_ProcessNextHostState+0x23e>
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
     7c4:	89 2f       	mov	r24, r25
     7c6:	3e dd       	rcall	.-1412   	; 0x244 <EVENT_USB_Host_DeviceEnumerationFailed>
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     7c8:	80 91 dd 00 	lds	r24, 0x00DD
     7cc:	81 60       	ori	r24, 0x01	; 1
     7ce:	80 93 dd 00 	sts	0x00DD, r24

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
     7d2:	81 dd       	rcall	.-1278   	; 0x2d6 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     7d4:	d8 d0       	rcall	.+432    	; 0x986 <USB_ResetInterface>
     7d6:	08 c0       	rjmp	.+16     	; 0x7e8 <USB_Host_ProcessNextHostState+0x23e>
	}
}
     7d8:	93 e0       	ldi	r25, 0x03	; 3
     7da:	02 c0       	rjmp	.+4      	; 0x7e0 <USB_Host_ProcessNextHostState+0x236>
     7dc:	94 e0       	ldi	r25, 0x04	; 4
     7de:	60 e0       	ldi	r22, 0x00	; 0

			EVENT_USB_Host_DeviceEnumerationComplete();
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
     7e0:	80 91 35 01 	lds	r24, 0x0135
     7e4:	81 30       	cpi	r24, 0x01	; 1
     7e6:	71 f7       	brne	.-36     	; 0x7c4 <USB_Host_ProcessNextHostState+0x21a>

		EVENT_USB_Host_DeviceUnattached();

		USB_ResetInterface();
	}
}
     7e8:	28 96       	adiw	r28, 0x08	; 8
     7ea:	0f b6       	in	r0, 0x3f	; 63
     7ec:	f8 94       	cli
     7ee:	de bf       	out	0x3e, r29	; 62
     7f0:	0f be       	out	0x3f, r0	; 63
     7f2:	cd bf       	out	0x3d, r28	; 61
     7f4:	cf 91       	pop	r28
     7f6:	df 91       	pop	r29
     7f8:	1f 91       	pop	r17
     7fa:	0f 91       	pop	r16
     7fc:	ef 90       	pop	r14
     7fe:	08 95       	ret

00000800 <Pipe_ConfigurePipe>:
                        const uint8_t Type,
                        const uint8_t Token,
                        const uint8_t EndpointNumber,
                        const uint16_t Size,
                        const uint8_t Banks)
{
     800:	ef 92       	push	r14
     802:	0f 93       	push	r16
     804:	1f 93       	push	r17
     806:	e8 2f       	mov	r30, r24
     808:	7e 2d       	mov	r23, r14

		Pipe_SelectPipe(PNum);
		
		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
     80a:	62 95       	swap	r22
     80c:	66 0f       	add	r22, r22
     80e:	66 0f       	add	r22, r22
     810:	60 7c       	andi	r22, 0xC0	; 192
     812:	64 2b       	or	r22, r20
     814:	2f 70       	andi	r18, 0x0F	; 15
     816:	62 2b       	or	r22, r18
     818:	38 2f       	mov	r19, r24
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     81a:	72 60       	ori	r23, 0x02	; 2
     81c:	45 c0       	rjmp	.+138    	; 0x8a8 <Pipe_ConfigurePipe+0xa8>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     81e:	30 93 a7 00 	sts	0x00A7, r19
		uint8_t UPCFG2XTemp;
		uint8_t UPIENXTemp;

		Pipe_SelectPipe(PNum);
		
		if (PNum == Number)
     822:	3e 17       	cp	r19, r30
     824:	a1 f4       	brne	.+40     	; 0x84e <Pipe_ConfigurePipe+0x4e>
     826:	88 e0       	ldi	r24, 0x08	; 8
     828:	90 e0       	ldi	r25, 0x00	; 0
     82a:	20 e0       	ldi	r18, 0x00	; 0
     82c:	03 c0       	rjmp	.+6      	; 0x834 <Pipe_ConfigurePipe+0x34>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
				{
					MaskVal++;
     82e:	2f 5f       	subi	r18, 0xFF	; 255
					CheckBytes <<= 1;
     830:	88 0f       	add	r24, r24
     832:	99 1f       	adc	r25, r25
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
     834:	80 17       	cp	r24, r16
     836:	91 07       	cpc	r25, r17
     838:	10 f4       	brcc	.+4      	; 0x83e <Pipe_ConfigurePipe+0x3e>
     83a:	25 30       	cpi	r18, 0x05	; 5
     83c:	c1 f7       	brne	.-16     	; 0x82e <Pipe_ConfigurePipe+0x2e>
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     83e:	92 2f       	mov	r25, r18
     840:	92 95       	swap	r25
     842:	90 7f       	andi	r25, 0xF0	; 240
     844:	97 2b       	or	r25, r23
     846:	56 2f       	mov	r21, r22
     848:	40 e0       	ldi	r20, 0x00	; 0
     84a:	20 e0       	ldi	r18, 0x00	; 0
     84c:	08 c0       	rjmp	.+16     	; 0x85e <Pipe_ConfigurePipe+0x5e>
			UPCFG2XTemp = 0;
			UPIENXTemp  = 0;
		}
		else
		{
			UPCFG0XTemp = UPCFG0X;
     84e:	50 91 aa 00 	lds	r21, 0x00AA
			UPCFG1XTemp = UPCFG1X;
     852:	90 91 ab 00 	lds	r25, 0x00AB
			UPCFG2XTemp = UPCFG2X;
     856:	40 91 ad 00 	lds	r20, 0x00AD
			UPIENXTemp  = UPIENX;
     85a:	20 91 ae 00 	lds	r18, 0x00AE
		}

		if (!(UPCFG1XTemp & (1 << ALLOC)))
     85e:	91 ff       	sbrs	r25, 1
     860:	22 c0       	rjmp	.+68     	; 0x8a6 <Pipe_ConfigurePipe+0xa6>
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     862:	80 91 a9 00 	lds	r24, 0x00A9
     866:	8e 7f       	andi	r24, 0xFE	; 254
     868:	80 93 a9 00 	sts	0x00A9, r24
		  continue;
		  
		Pipe_DisablePipe();
		UPCFG1X &= ~(1 << ALLOC);
     86c:	80 91 ab 00 	lds	r24, 0x00AB
     870:	8d 7f       	andi	r24, 0xFD	; 253
     872:	80 93 ab 00 	sts	0x00AB, r24
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
     876:	80 91 a9 00 	lds	r24, 0x00A9
     87a:	81 60       	ori	r24, 0x01	; 1
     87c:	80 93 a9 00 	sts	0x00A9, r24

		Pipe_EnablePipe();
		UPCFG0X = UPCFG0XTemp;
     880:	50 93 aa 00 	sts	0x00AA, r21
		UPCFG1X = UPCFG1XTemp;
     884:	90 93 ab 00 	sts	0x00AB, r25
		UPCFG2X = UPCFG2XTemp;
     888:	40 93 ad 00 	sts	0x00AD, r20
		UPIENX  = UPIENXTemp;
     88c:	20 93 ae 00 	sts	0x00AE, r18

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
     890:	80 91 a9 00 	lds	r24, 0x00A9
     894:	80 62       	ori	r24, 0x20	; 32
     896:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     89a:	80 91 ac 00 	lds	r24, 0x00AC

		Pipe_SetInfiniteINRequests();
	
		if (!(Pipe_IsConfigured()))
     89e:	87 fd       	sbrc	r24, 7
     8a0:	02 c0       	rjmp	.+4      	; 0x8a6 <Pipe_ConfigurePipe+0xa6>
     8a2:	80 e0       	ldi	r24, 0x00	; 0
     8a4:	07 c0       	rjmp	.+14     	; 0x8b4 <Pipe_ConfigurePipe+0xb4>

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else	
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
     8a6:	3f 5f       	subi	r19, 0xFF	; 255
     8a8:	37 30       	cpi	r19, 0x07	; 7
     8aa:	08 f4       	brcc	.+2      	; 0x8ae <Pipe_ConfigurePipe+0xae>
     8ac:	b8 cf       	rjmp	.-144    	; 0x81e <Pipe_ConfigurePipe+0x1e>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     8ae:	e0 93 a7 00 	sts	0x00A7, r30
     8b2:	81 e0       	ldi	r24, 0x01	; 1
	}
		
	Pipe_SelectPipe(Number);	
	return true;
#endif
}
     8b4:	1f 91       	pop	r17
     8b6:	0f 91       	pop	r16
     8b8:	ef 90       	pop	r14
     8ba:	08 95       	ret

000008bc <Pipe_ClearPipes>:

void Pipe_ClearPipes(void)
{
	UPINT = 0;
     8bc:	10 92 f8 00 	sts	0x00F8, r1
     8c0:	90 e0       	ldi	r25, 0x00	; 0
     8c2:	90 93 a7 00 	sts	0x00A7, r25

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
     8c6:	10 92 ae 00 	sts	0x00AE, r1
		UPINTX  = 0;
     8ca:	10 92 a6 00 	sts	0x00A6, r1
		UPCFG1X = 0;
     8ce:	10 92 ab 00 	sts	0x00AB, r1
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     8d2:	80 91 a9 00 	lds	r24, 0x00A9
     8d6:	8e 7f       	andi	r24, 0xFE	; 254
     8d8:	80 93 a9 00 	sts	0x00A9, r24

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     8dc:	9f 5f       	subi	r25, 0xFF	; 255
     8de:	97 30       	cpi	r25, 0x07	; 7
     8e0:	81 f7       	brne	.-32     	; 0x8c2 <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
     8e2:	08 95       	ret

000008e4 <Pipe_IsEndpointBound>:

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
     8e4:	48 2f       	mov	r20, r24
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
     8e6:	30 91 a7 00 	lds	r19, 0x00A7
     8ea:	20 e0       	ldi	r18, 0x00	; 0
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     8ec:	20 93 a7 00 	sts	0x00A7, r18
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     8f0:	80 91 ac 00 	lds	r24, 0x00AC

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
	{
		Pipe_SelectPipe(PNum);

		if (!(Pipe_IsConfigured()))
     8f4:	87 ff       	sbrs	r24, 7
     8f6:	10 c0       	rjmp	.+32     	; 0x918 <Pipe_IsEndpointBound+0x34>
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				return (((UPCFG0X >> PEPNUM0) & PIPE_EPNUM_MASK) |
     8f8:	90 91 aa 00 	lds	r25, 0x00AA
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
     8fc:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				return (((UPCFG0X >> PEPNUM0) & PIPE_EPNUM_MASK) |
     900:	80 73       	andi	r24, 0x30	; 48
     902:	80 31       	cpi	r24, 0x10	; 16
     904:	11 f0       	breq	.+4      	; 0x90a <Pipe_IsEndpointBound+0x26>
     906:	80 e0       	ldi	r24, 0x00	; 0
     908:	01 c0       	rjmp	.+2      	; 0x90c <Pipe_IsEndpointBound+0x28>
     90a:	80 e8       	ldi	r24, 0x80	; 128
		  continue;

		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
     90c:	9f 70       	andi	r25, 0x0F	; 15
     90e:	89 2b       	or	r24, r25
     910:	84 17       	cp	r24, r20
     912:	11 f4       	brne	.+4      	; 0x918 <Pipe_IsEndpointBound+0x34>
     914:	81 e0       	ldi	r24, 0x01	; 1
     916:	08 95       	ret

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
	uint8_t PrevPipeNumber = Pipe_GetCurrentPipe();

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     918:	2f 5f       	subi	r18, 0xFF	; 255
     91a:	27 30       	cpi	r18, 0x07	; 7
     91c:	39 f7       	brne	.-50     	; 0x8ec <Pipe_IsEndpointBound+0x8>
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
     91e:	37 70       	andi	r19, 0x07	; 7
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     920:	30 93 a7 00 	sts	0x00A7, r19
     924:	80 e0       	ldi	r24, 0x00	; 0
		  return true;
	}

	Pipe_SelectPipe(PrevPipeNumber);
	return false;
}
     926:	08 95       	ret

00000928 <Pipe_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
     928:	40 91 a2 00 	lds	r20, 0x00A2
     92c:	50 91 a3 00 	lds	r21, 0x00A3
     930:	24 e6       	ldi	r18, 0x64	; 100
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
     932:	80 91 aa 00 	lds	r24, 0x00AA

	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
     936:	80 73       	andi	r24, 0x30	; 48
     938:	80 31       	cpi	r24, 0x10	; 16
     93a:	29 f4       	brne	.+10     	; 0x946 <Pipe_WaitUntilReady+0x1e>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     93c:	80 91 a6 00 	lds	r24, 0x00A6
		{
			if (Pipe_IsINReceived())
     940:	80 ff       	sbrs	r24, 0
     942:	05 c0       	rjmp	.+10     	; 0x94e <Pipe_WaitUntilReady+0x26>
     944:	1e c0       	rjmp	.+60     	; 0x982 <Pipe_WaitUntilReady+0x5a>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     946:	80 91 a6 00 	lds	r24, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
     94a:	82 fd       	sbrc	r24, 2
     94c:	1a c0       	rjmp	.+52     	; 0x982 <Pipe_WaitUntilReady+0x5a>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     94e:	80 91 a6 00 	lds	r24, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
     952:	81 ff       	sbrs	r24, 1
     954:	02 c0       	rjmp	.+4      	; 0x95a <Pipe_WaitUntilReady+0x32>
     956:	81 e0       	ldi	r24, 0x01	; 1
     958:	08 95       	ret
		  return PIPE_READYWAIT_PipeStalled;
		else if (USB_HostState == HOST_STATE_Unattached)
     95a:	80 91 35 01 	lds	r24, 0x0135
     95e:	81 30       	cpi	r24, 0x01	; 1
     960:	11 f4       	brne	.+4      	; 0x966 <Pipe_WaitUntilReady+0x3e>
     962:	82 e0       	ldi	r24, 0x02	; 2
     964:	08 95       	ret
     966:	80 91 a2 00 	lds	r24, 0x00A2
     96a:	90 91 a3 00 	lds	r25, 0x00A3
		  return PIPE_READYWAIT_DeviceDisconnected;

		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     96e:	84 17       	cp	r24, r20
     970:	95 07       	cpc	r25, r21
     972:	f9 f2       	breq	.-66     	; 0x932 <Pipe_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     974:	22 23       	and	r18, r18
     976:	11 f4       	brne	.+4      	; 0x97c <Pipe_WaitUntilReady+0x54>
     978:	83 e0       	ldi	r24, 0x03	; 3
     97a:	08 95       	ret
     97c:	21 50       	subi	r18, 0x01	; 1
     97e:	ac 01       	movw	r20, r24
     980:	d8 cf       	rjmp	.-80     	; 0x932 <Pipe_WaitUntilReady+0xa>
     982:	80 e0       	ldi	r24, 0x00	; 0
			  return PIPE_READYWAIT_Timeout;
		}
	}
}
     984:	08 95       	ret

00000986 <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     986:	70 d0       	rcall	.+224    	; 0xa68 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     988:	77 d0       	rcall	.+238    	; 0xa78 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     98a:	80 91 d8 00 	lds	r24, 0x00D8
     98e:	8f 77       	andi	r24, 0x7F	; 127
     990:	80 93 d8 00 	sts	0x00D8, r24
				USBCON |=  (1 << USBE);
     994:	80 91 d8 00 	lds	r24, 0x00D8
     998:	80 68       	ori	r24, 0x80	; 128
     99a:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
     99e:	80 91 d8 00 	lds	r24, 0x00D8
     9a2:	8f 7d       	andi	r24, 0xDF	; 223
     9a4:	80 93 d8 00 	sts	0x00D8, r24
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
     9a8:	80 91 d7 00 	lds	r24, 0x00D7
     9ac:	8f 77       	andi	r24, 0x7F	; 127
     9ae:	80 93 d7 00 	sts	0x00D7, r24

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     9b2:	8c e0       	ldi	r24, 0x0C	; 12
     9b4:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     9b6:	8e e0       	ldi	r24, 0x0E	; 14
     9b8:	89 bd       	out	0x29, r24	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_CAN_BE_HOST)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));		
     9ba:	09 b4       	in	r0, 0x29	; 41
     9bc:	00 fe       	sbrs	r0, 0
     9be:	fd cf       	rjmp	.-6      	; 0x9ba <USB_ResetInterface+0x34>
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState                = HOST_STATE_Unattached;
     9c0:	81 e0       	ldi	r24, 0x01	; 1
     9c2:	80 93 35 01 	sts	0x0135, r24
	USB_Host_ConfigurationNumber = 0;
     9c6:	10 92 2b 01 	sts	0x012B, r1
	USB_Host_ControlPipeSize     = PIPE_CONTROLPIPE_DEFAULT_SIZE;
     9ca:	80 e4       	ldi	r24, 0x40	; 64
     9cc:	80 93 27 01 	sts	0x0127, r24
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
     9d0:	80 91 d8 00 	lds	r24, 0x00D8
     9d4:	80 64       	ori	r24, 0x40	; 64
     9d6:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     9da:	80 91 dd 00 	lds	r24, 0x00DD
     9de:	81 60       	ori	r24, 0x01	; 1
     9e0:	80 93 dd 00 	sts	0x00DD, r24
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
     9e4:	80 91 dd 00 	lds	r24, 0x00DD
     9e8:	84 60       	ori	r24, 0x04	; 4
     9ea:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON &= ~(1 << UVCONE);
     9ee:	80 91 d7 00 	lds	r24, 0x00D7
     9f2:	8f 7e       	andi	r24, 0xEF	; 239
     9f4:	80 93 d7 00 	sts	0x00D7, r24

				DDRE   |=  (1 << 7);
     9f8:	6f 9a       	sbi	0x0d, 7	; 13
			}

			static inline void USB_Host_VBUS_Manual_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_On(void)
			{
				PORTE  |=  (1 << 7);
     9fa:	77 9a       	sbi	0x0e, 7	; 14
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN |= (1 << SRPE);						
     9fc:	80 91 de 00 	lds	r24, 0x00DE
     a00:	81 60       	ori	r24, 0x01	; 1
     a02:	80 93 de 00 	sts	0x00DE, r24
						break;
					case USB_INT_RSTI:
						UHIEN  |= (1 << RSTE);
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
     a06:	80 91 de 00 	lds	r24, 0x00DE
     a0a:	84 60       	ori	r24, 0x04	; 4
     a0c:	80 93 de 00 	sts	0x00DE, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     a10:	80 91 e0 00 	lds	r24, 0x00E0
     a14:	8e 7f       	andi	r24, 0xFE	; 254
     a16:	80 93 e0 00 	sts	0x00E0, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     a1a:	80 91 d8 00 	lds	r24, 0x00D8
     a1e:	80 61       	ori	r24, 0x10	; 16
     a20:	80 93 d8 00 	sts	0x00D8, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     a24:	08 95       	ret

00000a26 <USB_Init>:

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
     a26:	e7 ed       	ldi	r30, 0xD7	; 215
     a28:	f0 e0       	ldi	r31, 0x00	; 0
     a2a:	80 81       	ld	r24, Z
     a2c:	81 60       	ori	r24, 0x01	; 1
     a2e:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     a30:	81 e0       	ldi	r24, 0x01	; 1
     a32:	80 93 2c 01 	sts	0x012C, r24

	USB_ResetInterface();
}
     a36:	a7 cf       	rjmp	.-178    	; 0x986 <USB_ResetInterface>

00000a38 <USB_Disable>:

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
     a38:	17 d0       	rcall	.+46     	; 0xa68 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     a3a:	1e d0       	rcall	.+60     	; 0xa78 <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
     a3c:	e0 ee       	ldi	r30, 0xE0	; 224
     a3e:	f0 e0       	ldi	r31, 0x00	; 0
     a40:	80 81       	ld	r24, Z
     a42:	81 60       	ori	r24, 0x01	; 1
     a44:	80 83       	st	Z, r24
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON  &= ~(1 << USBE);
     a46:	a8 ed       	ldi	r26, 0xD8	; 216
     a48:	b0 e0       	ldi	r27, 0x00	; 0
     a4a:	8c 91       	ld	r24, X
     a4c:	8f 77       	andi	r24, 0x7F	; 127
     a4e:	8c 93       	st	X, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     a50:	19 bc       	out	0x29, r1	; 41

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  &= ~(1 << UVREGE);
     a52:	e7 ed       	ldi	r30, 0xD7	; 215
     a54:	f0 e0       	ldi	r31, 0x00	; 0
     a56:	80 81       	ld	r24, Z
     a58:	8e 7f       	andi	r24, 0xFE	; 254
     a5a:	80 83       	st	Z, r24
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON  &= ~(1 << OTGPADE);
     a5c:	8c 91       	ld	r24, X
     a5e:	8f 7e       	andi	r24, 0xEF	; 239
     a60:	8c 93       	st	X, r24

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
     a62:	10 92 2c 01 	sts	0x012C, r1
}
     a66:	08 95       	ret

00000a68 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     a68:	e8 ed       	ldi	r30, 0xD8	; 216
     a6a:	f0 e0       	ldi	r31, 0x00	; 0
     a6c:	80 81       	ld	r24, Z
     a6e:	8c 7f       	andi	r24, 0xFC	; 252
     a70:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
     a72:	10 92 a0 00 	sts	0x00A0, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
	#endif
}
     a76:	08 95       	ret

00000a78 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     a78:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_BOTH)
	OTGINT = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
     a7c:	10 92 9f 00 	sts	0x009F, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
	#endif
}
     a80:	08 95       	ret

00000a82 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
     a82:	1f 92       	push	r1
     a84:	0f 92       	push	r0
     a86:	0f b6       	in	r0, 0x3f	; 63
     a88:	0f 92       	push	r0
     a8a:	0b b6       	in	r0, 0x3b	; 59
     a8c:	0f 92       	push	r0
     a8e:	11 24       	eor	r1, r1
     a90:	2f 93       	push	r18
     a92:	3f 93       	push	r19
     a94:	4f 93       	push	r20
     a96:	5f 93       	push	r21
     a98:	6f 93       	push	r22
     a9a:	7f 93       	push	r23
     a9c:	8f 93       	push	r24
     a9e:	9f 93       	push	r25
     aa0:	af 93       	push	r26
     aa2:	bf 93       	push	r27
     aa4:	ef 93       	push	r30
     aa6:	ff 93       	push	r31
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     aa8:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	#if defined(USB_CAN_BE_HOST)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
     aac:	85 ff       	sbrs	r24, 5
     aae:	0a c0       	rjmp	.+20     	; 0xac4 <__vector_10+0x42>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     ab0:	80 91 a0 00 	lds	r24, 0x00A0
     ab4:	85 ff       	sbrs	r24, 5
     ab6:	06 c0       	rjmp	.+12     	; 0xac4 <__vector_10+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     ab8:	80 91 9f 00 	lds	r24, 0x009F
     abc:	8f 7d       	andi	r24, 0xDF	; 223
     abe:	80 93 9f 00 	sts	0x009F, r24
	{
		USB_INT_Clear(USB_INT_HSOFI);

		EVENT_USB_Host_StartOfFrame();
     ac2:	67 d1       	rcall	.+718    	; 0xd92 <USB_Event_Stub>
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
     ac4:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
     ac8:	81 ff       	sbrs	r24, 1
     aca:	15 c0       	rjmp	.+42     	; 0xaf6 <__vector_10+0x74>
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
					case USB_INT_DCONNI:
						return (UHIEN  & (1 << DCONNE));
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
     acc:	80 91 a0 00 	lds	r24, 0x00A0
     ad0:	81 ff       	sbrs	r24, 1
     ad2:	11 c0       	rjmp	.+34     	; 0xaf6 <__vector_10+0x74>
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     ad4:	80 91 9f 00 	lds	r24, 0x009F
     ad8:	8d 7f       	andi	r24, 0xFD	; 253
     ada:	80 93 9f 00 	sts	0x009F, r24
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     ade:	80 91 9f 00 	lds	r24, 0x009F
     ae2:	8e 7f       	andi	r24, 0xFE	; 254
     ae4:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     ae8:	80 91 a0 00 	lds	r24, 0x00A0
     aec:	8d 7f       	andi	r24, 0xFD	; 253
     aee:	80 93 a0 00 	sts	0x00A0, r24
	{
		USB_INT_Clear(USB_INT_DDISCI);
		USB_INT_Clear(USB_INT_DCONNI);
		USB_INT_Disable(USB_INT_DDISCI);

		EVENT_USB_Host_DeviceUnattached();
     af2:	f1 db       	rcall	.-2078   	; 0x2d6 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     af4:	48 df       	rcall	.-368    	; 0x986 <USB_ResetInterface>
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
     af6:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
     afa:	81 ff       	sbrs	r24, 1
     afc:	15 c0       	rjmp	.+42     	; 0xb28 <__vector_10+0xa6>
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
     afe:	80 91 de 00 	lds	r24, 0x00DE
     b02:	81 ff       	sbrs	r24, 1
     b04:	11 c0       	rjmp	.+34     	; 0xb28 <__vector_10+0xa6>
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     b06:	80 91 df 00 	lds	r24, 0x00DF
     b0a:	8d 7f       	andi	r24, 0xFD	; 253
     b0c:	80 93 df 00 	sts	0x00DF, r24
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
     b10:	77 98       	cbi	0x0e, 7	; 14
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     b12:	80 91 dd 00 	lds	r24, 0x00DD
     b16:	81 60       	ori	r24, 0x01	; 1
     b18:	80 93 dd 00 	sts	0x00DD, r24
		USB_INT_Clear(USB_INT_VBERRI);

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
     b1c:	80 e0       	ldi	r24, 0x00	; 0
     b1e:	be db       	rcall	.-2180   	; 0x29c <EVENT_USB_Host_HostError>
		EVENT_USB_Host_DeviceUnattached();
     b20:	da db       	rcall	.-2124   	; 0x2d6 <EVENT_USB_Host_DeviceUnattached>

		USB_HostState = HOST_STATE_Unattached;
     b22:	81 e0       	ldi	r24, 0x01	; 1
     b24:	80 93 35 01 	sts	0x0135, r24
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
					case USB_INT_SRPI:
						return (OTGINT & (1 << SRPI));
     b28:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
     b2c:	80 ff       	sbrs	r24, 0
     b2e:	17 c0       	rjmp	.+46     	; 0xb5e <__vector_10+0xdc>
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
					case USB_INT_SRPI:
						return (OTGIEN & (1 << SRPE));
     b30:	80 91 de 00 	lds	r24, 0x00DE
     b34:	80 ff       	sbrs	r24, 0
     b36:	13 c0       	rjmp	.+38     	; 0xb5e <__vector_10+0xdc>
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
						break;
					case USB_INT_SRPI:
						OTGINT &= ~(1 << SRPI);
     b38:	80 91 df 00 	lds	r24, 0x00DF
     b3c:	8e 7f       	andi	r24, 0xFE	; 254
     b3e:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_VBERRI:
						OTGIEN &= ~(1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN &= ~(1 << SRPE);						
     b42:	80 91 de 00 	lds	r24, 0x00DE
     b46:	8e 7f       	andi	r24, 0xFE	; 254
     b48:	80 93 de 00 	sts	0x00DE, r24
	{
		USB_INT_Clear(USB_INT_SRPI);
		USB_INT_Disable(USB_INT_SRPI);

		EVENT_USB_Host_DeviceAttached();
     b4c:	cd db       	rcall	.-2150   	; 0x2e8 <EVENT_USB_Host_DeviceAttached>
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     b4e:	80 91 a0 00 	lds	r24, 0x00A0
     b52:	82 60       	ori	r24, 0x02	; 2
     b54:	80 93 a0 00 	sts	0x00A0, r24

		USB_INT_Enable(USB_INT_DDISCI);

		USB_HostState = HOST_STATE_Powered;
     b58:	82 e0       	ldi	r24, 0x02	; 2
     b5a:	80 93 35 01 	sts	0x0135, r24
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
     b5e:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
     b62:	82 ff       	sbrs	r24, 2
     b64:	0e c0       	rjmp	.+28     	; 0xb82 <__vector_10+0x100>
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
     b66:	80 91 de 00 	lds	r24, 0x00DE
     b6a:	82 ff       	sbrs	r24, 2
     b6c:	0a c0       	rjmp	.+20     	; 0xb82 <__vector_10+0x100>
						break;
					case USB_INT_RSTI:
						UHINT  &= ~(1 << RSTI);
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
     b6e:	80 91 df 00 	lds	r24, 0x00DF
     b72:	8b 7f       	andi	r24, 0xFB	; 251
     b74:	80 93 df 00 	sts	0x00DF, r24
	{
		USB_INT_Clear(USB_INT_BCERRI);

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
     b78:	82 e0       	ldi	r24, 0x02	; 2
     b7a:	60 e0       	ldi	r22, 0x00	; 0
     b7c:	63 db       	rcall	.-2362   	; 0x244 <EVENT_USB_Host_DeviceEnumerationFailed>
		EVENT_USB_Host_DeviceUnattached();
     b7e:	ab db       	rcall	.-2218   	; 0x2d6 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     b80:	02 df       	rcall	.-508    	; 0x986 <USB_ResetInterface>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     b82:	ff 91       	pop	r31
     b84:	ef 91       	pop	r30
     b86:	bf 91       	pop	r27
     b88:	af 91       	pop	r26
     b8a:	9f 91       	pop	r25
     b8c:	8f 91       	pop	r24
     b8e:	7f 91       	pop	r23
     b90:	6f 91       	pop	r22
     b92:	5f 91       	pop	r21
     b94:	4f 91       	pop	r20
     b96:	3f 91       	pop	r19
     b98:	2f 91       	pop	r18
     b9a:	0f 90       	pop	r0
     b9c:	0b be       	out	0x3b, r0	; 59
     b9e:	0f 90       	pop	r0
     ba0:	0f be       	out	0x3f, r0	; 63
     ba2:	0f 90       	pop	r0
     ba4:	1f 90       	pop	r1
     ba6:	18 95       	reti

00000ba8 <Pipe_Read_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     ba8:	bf 92       	push	r11
     baa:	cf 92       	push	r12
     bac:	df 92       	push	r13
     bae:	ef 92       	push	r14
     bb0:	ff 92       	push	r15
     bb2:	0f 93       	push	r16
     bb4:	1f 93       	push	r17
     bb6:	cf 93       	push	r28
     bb8:	df 93       	push	r29
     bba:	18 2f       	mov	r17, r24
     bbc:	09 2f       	mov	r16, r25
     bbe:	7b 01       	movw	r14, r22
     bc0:	6a 01       	movw	r12, r20
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     bc2:	80 91 aa 00 	lds	r24, 0x00AA
     bc6:	8f 7c       	andi	r24, 0xCF	; 207
     bc8:	80 61       	ori	r24, 0x10	; 16
     bca:	80 93 aa 00 	sts	0x00AA, r24
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
     bce:	ac de       	rcall	.-680    	; 0x928 <Pipe_WaitUntilReady>
     bd0:	b8 2e       	mov	r11, r24
     bd2:	88 23       	and	r24, r24
     bd4:	a9 f5       	brne	.+106    	; 0xc40 <Pipe_Read_Stream_LE+0x98>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     bd6:	81 2f       	mov	r24, r17
     bd8:	90 2f       	mov	r25, r16
     bda:	9c 01       	movw	r18, r24
     bdc:	e9 01       	movw	r28, r18
	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
     bde:	c1 14       	cp	r12, r1
     be0:	d1 04       	cpc	r13, r1
     be2:	39 f0       	breq	.+14     	; 0xbf2 <Pipe_Read_Stream_LE+0x4a>
	{
		Length -= *BytesProcessed;
     be4:	f6 01       	movw	r30, r12
     be6:	80 81       	ld	r24, Z
     be8:	91 81       	ldd	r25, Z+1	; 0x01
     bea:	e8 1a       	sub	r14, r24
     bec:	f9 0a       	sbc	r15, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     bee:	c8 0f       	add	r28, r24
     bf0:	d9 1f       	adc	r29, r25
     bf2:	00 e0       	ldi	r16, 0x00	; 0
     bf4:	10 e0       	ldi	r17, 0x00	; 0
     bf6:	21 c0       	rjmp	.+66     	; 0xc3a <Pipe_Read_Stream_LE+0x92>
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
     bf8:	80 91 a6 00 	lds	r24, 0x00A6
	}
	
	while (Length)
	{
		if (!(Pipe_IsReadWriteAllowed()))
     bfc:	85 fd       	sbrc	r24, 5
     bfe:	15 c0       	rjmp	.+42     	; 0xc2a <Pipe_Read_Stream_LE+0x82>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     c00:	80 91 a6 00 	lds	r24, 0x00A6
     c04:	8e 77       	andi	r24, 0x7E	; 126
     c06:	80 93 a6 00 	sts	0x00A6, r24
		{
			TEMPLATE_CLEAR_PIPE();

			if (BytesProcessed != NULL)
     c0a:	c1 14       	cp	r12, r1
     c0c:	d1 04       	cpc	r13, r1
     c0e:	49 f0       	breq	.+18     	; 0xc22 <Pipe_Read_Stream_LE+0x7a>
			{
				*BytesProcessed += BytesInTransfer;
     c10:	f6 01       	movw	r30, r12
     c12:	80 81       	ld	r24, Z
     c14:	91 81       	ldd	r25, Z+1	; 0x01
     c16:	80 0f       	add	r24, r16
     c18:	91 1f       	adc	r25, r17
     c1a:	91 83       	std	Z+1, r25	; 0x01
     c1c:	80 83       	st	Z, r24
     c1e:	84 e0       	ldi	r24, 0x04	; 4
     c20:	10 c0       	rjmp	.+32     	; 0xc42 <Pipe_Read_Stream_LE+0x9a>
				return PIPE_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
     c22:	82 de       	rcall	.-764    	; 0x928 <Pipe_WaitUntilReady>
     c24:	88 23       	and	r24, r24
     c26:	49 f0       	breq	.+18     	; 0xc3a <Pipe_Read_Stream_LE+0x92>
     c28:	0c c0       	rjmp	.+24     	; 0xc42 <Pipe_Read_Stream_LE+0x9a>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
     c2a:	80 91 af 00 	lds	r24, 0x00AF
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
     c2e:	89 93       	st	Y+, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
     c30:	08 94       	sec
     c32:	e1 08       	sbc	r14, r1
     c34:	f1 08       	sbc	r15, r1
			BytesInTransfer++;
     c36:	0f 5f       	subi	r16, 0xFF	; 255
     c38:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}
	
	while (Length)
     c3a:	e1 14       	cp	r14, r1
     c3c:	f1 04       	cpc	r15, r1
     c3e:	e1 f6       	brne	.-72     	; 0xbf8 <Pipe_Read_Stream_LE+0x50>
     c40:	8b 2d       	mov	r24, r11
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
     c42:	df 91       	pop	r29
     c44:	cf 91       	pop	r28
     c46:	1f 91       	pop	r17
     c48:	0f 91       	pop	r16
     c4a:	ff 90       	pop	r15
     c4c:	ef 90       	pop	r14
     c4e:	df 90       	pop	r13
     c50:	cf 90       	pop	r12
     c52:	bf 90       	pop	r11
     c54:	08 95       	ret

00000c56 <USB_GetNextDescriptorComp>:

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
     c56:	af 92       	push	r10
     c58:	bf 92       	push	r11
     c5a:	cf 92       	push	r12
     c5c:	df 92       	push	r13
     c5e:	ef 92       	push	r14
     c60:	ff 92       	push	r15
     c62:	0f 93       	push	r16
     c64:	1f 93       	push	r17
     c66:	cf 93       	push	r28
     c68:	df 93       	push	r29
     c6a:	7c 01       	movw	r14, r24
     c6c:	eb 01       	movw	r28, r22
     c6e:	6a 01       	movw	r12, r20
     c70:	24 c0       	rjmp	.+72     	; 0xcba <USB_GetNextDescriptorComp+0x64>
	uint8_t ErrorCode;

	while (*BytesRem)
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
     c72:	e8 81       	ld	r30, Y
     c74:	f9 81       	ldd	r31, Y+1	; 0x01
     c76:	be 2e       	mov	r11, r30
     c78:	af 2e       	mov	r10, r31
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc)
			{
				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;
     c7a:	80 81       	ld	r24, Z
     c7c:	90 e0       	ldi	r25, 0x00	; 0
     c7e:	98 01       	movw	r18, r16
     c80:	80 17       	cp	r24, r16
     c82:	91 07       	cpc	r25, r17
     c84:	08 f4       	brcc	.+2      	; 0xc88 <USB_GetNextDescriptorComp+0x32>
     c86:	9c 01       	movw	r18, r24
				
				if (*BytesRem < CurrDescriptorSize)
				  CurrDescriptorSize = *BytesRem;

				*CurrConfigLoc  = (void*)((uintptr_t)*CurrConfigLoc + CurrDescriptorSize);
     c88:	e2 0f       	add	r30, r18
     c8a:	f3 1f       	adc	r31, r19
     c8c:	f9 83       	std	Y+1, r31	; 0x01
     c8e:	e8 83       	st	Y, r30
				*BytesRem      -= CurrDescriptorSize;
     c90:	f7 01       	movw	r30, r14
     c92:	80 81       	ld	r24, Z
     c94:	91 81       	ldd	r25, Z+1	; 0x01
     c96:	82 1b       	sub	r24, r18
     c98:	93 0b       	sbc	r25, r19
     c9a:	91 83       	std	Z+1, r25	; 0x01
     c9c:	80 83       	st	Z, r24
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
     c9e:	88 81       	ld	r24, Y
     ca0:	99 81       	ldd	r25, Y+1	; 0x01
     ca2:	f6 01       	movw	r30, r12
     ca4:	09 95       	icall
     ca6:	82 30       	cpi	r24, 0x02	; 2
     ca8:	41 f0       	breq	.+16     	; 0xcba <USB_GetNextDescriptorComp+0x64>
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
     caa:	81 30       	cpi	r24, 0x01	; 1
     cac:	69 f4       	brne	.+26     	; 0xcc8 <USB_GetNextDescriptorComp+0x72>
			{
				*CurrConfigLoc = PrevDescLoc;
     cae:	b8 82       	st	Y, r11
     cb0:	a9 82       	std	Y+1, r10	; 0x01
				*BytesRem      = PrevBytesRem;
     cb2:	f7 01       	movw	r30, r14
     cb4:	11 83       	std	Z+1, r17	; 0x01
     cb6:	00 83       	st	Z, r16
     cb8:	07 c0       	rjmp	.+14     	; 0xcc8 <USB_GetNextDescriptorComp+0x72>
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
	uint8_t ErrorCode;

	while (*BytesRem)
     cba:	f7 01       	movw	r30, r14
     cbc:	00 81       	ld	r16, Z
     cbe:	11 81       	ldd	r17, Z+1	; 0x01
     cc0:	01 15       	cp	r16, r1
     cc2:	11 05       	cpc	r17, r1
     cc4:	b1 f6       	brne	.-84     	; 0xc72 <USB_GetNextDescriptorComp+0x1c>
     cc6:	82 e0       	ldi	r24, 0x02	; 2
			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
}
     cc8:	df 91       	pop	r29
     cca:	cf 91       	pop	r28
     ccc:	1f 91       	pop	r17
     cce:	0f 91       	pop	r16
     cd0:	ff 90       	pop	r15
     cd2:	ef 90       	pop	r14
     cd4:	df 90       	pop	r13
     cd6:	cf 90       	pop	r12
     cd8:	bf 90       	pop	r11
     cda:	af 90       	pop	r10
     cdc:	08 95       	ret

00000cde <USB_Host_GetDeviceConfigDescriptor>:
#if defined(USB_CAN_BE_HOST)
uint8_t USB_Host_GetDeviceConfigDescriptor(const uint8_t ConfigNumber,
                                           uint16_t* const ConfigSizePtr,
                                           void* const BufferPtr,
                                           const uint16_t BufferSize)
{
     cde:	cf 92       	push	r12
     ce0:	df 92       	push	r13
     ce2:	ef 92       	push	r14
     ce4:	ff 92       	push	r15
     ce6:	0f 93       	push	r16
     ce8:	1f 93       	push	r17
     cea:	df 93       	push	r29
     cec:	cf 93       	push	r28
     cee:	cd b7       	in	r28, 0x3d	; 61
     cf0:	de b7       	in	r29, 0x3e	; 62
     cf2:	29 97       	sbiw	r28, 0x09	; 9
     cf4:	0f b6       	in	r0, 0x3f	; 63
     cf6:	f8 94       	cli
     cf8:	de bf       	out	0x3e, r29	; 62
     cfa:	0f be       	out	0x3f, r0	; 63
     cfc:	cd bf       	out	0x3d, r28	; 61
     cfe:	6b 01       	movw	r12, r22
     d00:	8a 01       	movw	r16, r20
     d02:	79 01       	movw	r14, r18
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
     d04:	90 e8       	ldi	r25, 0x80	; 128
     d06:	90 93 2d 01 	sts	0x012D, r25
     d0a:	96 e0       	ldi	r25, 0x06	; 6
     d0c:	90 93 2e 01 	sts	0x012E, r25
     d10:	90 e0       	ldi	r25, 0x00	; 0
     d12:	01 97       	sbiw	r24, 0x01	; 1
     d14:	92 60       	ori	r25, 0x02	; 2
     d16:	90 93 30 01 	sts	0x0130, r25
     d1a:	80 93 2f 01 	sts	0x012F, r24
     d1e:	10 92 32 01 	sts	0x0132, r1
     d22:	10 92 31 01 	sts	0x0131, r1
     d26:	89 e0       	ldi	r24, 0x09	; 9
     d28:	90 e0       	ldi	r25, 0x00	; 0
     d2a:	90 93 34 01 	sts	0x0134, r25
     d2e:	80 93 33 01 	sts	0x0133, r24
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     d32:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = sizeof(USB_Descriptor_Configuration_Header_t),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(ConfigHeader)) != HOST_SENDCONTROL_Successful)
     d36:	ce 01       	movw	r24, r28
     d38:	01 96       	adiw	r24, 0x01	; 1
     d3a:	55 d0       	rcall	.+170    	; 0xde6 <USB_Host_SendControlRequest>
     d3c:	28 2f       	mov	r18, r24
     d3e:	88 23       	and	r24, r24
     d40:	c1 f4       	brne	.+48     	; 0xd72 <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);
     d42:	8b 81       	ldd	r24, Y+3	; 0x03
     d44:	9c 81       	ldd	r25, Y+4	; 0x04
     d46:	f6 01       	movw	r30, r12
     d48:	91 83       	std	Z+1, r25	; 0x01
     d4a:	80 83       	st	Z, r24

	if (*ConfigSizePtr > BufferSize)
     d4c:	e8 16       	cp	r14, r24
     d4e:	f9 06       	cpc	r15, r25
     d50:	10 f4       	brcc	.+4      	; 0xd56 <USB_Host_GetDeviceConfigDescriptor+0x78>
     d52:	25 e0       	ldi	r18, 0x05	; 5
     d54:	0e c0       	rjmp	.+28     	; 0xd72 <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return HOST_GETCONFIG_BuffOverflow;

	USB_ControlRequest.wLength = *ConfigSizePtr;
     d56:	90 93 34 01 	sts	0x0134, r25
     d5a:	80 93 33 01 	sts	0x0133, r24

	if ((ErrorCode = USB_Host_SendControlRequest(BufferPtr)) != HOST_SENDCONTROL_Successful)
     d5e:	c8 01       	movw	r24, r16
     d60:	42 d0       	rcall	.+132    	; 0xde6 <USB_Host_SendControlRequest>
     d62:	28 2f       	mov	r18, r24
     d64:	88 23       	and	r24, r24
     d66:	29 f4       	brne	.+10     	; 0xd72 <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
     d68:	f8 01       	movw	r30, r16
     d6a:	81 81       	ldd	r24, Z+1	; 0x01
     d6c:	82 30       	cpi	r24, 0x02	; 2
     d6e:	09 f0       	breq	.+2      	; 0xd72 <USB_Host_GetDeviceConfigDescriptor+0x94>
     d70:	26 e0       	ldi	r18, 0x06	; 6
	  return HOST_GETCONFIG_InvalidData;

	return HOST_GETCONFIG_Successful;
}
     d72:	82 2f       	mov	r24, r18
     d74:	29 96       	adiw	r28, 0x09	; 9
     d76:	0f b6       	in	r0, 0x3f	; 63
     d78:	f8 94       	cli
     d7a:	de bf       	out	0x3e, r29	; 62
     d7c:	0f be       	out	0x3f, r0	; 63
     d7e:	cd bf       	out	0x3d, r28	; 61
     d80:	cf 91       	pop	r28
     d82:	df 91       	pop	r29
     d84:	1f 91       	pop	r17
     d86:	0f 91       	pop	r16
     d88:	ff 90       	pop	r15
     d8a:	ef 90       	pop	r14
     d8c:	df 90       	pop	r13
     d8e:	cf 90       	pop	r12
     d90:	08 95       	ret

00000d92 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
     d92:	08 95       	ret

00000d94 <USB_Host_WaitForIOS>:

	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
     d94:	1f 93       	push	r17
     d96:	cf 93       	push	r28
     d98:	df 93       	push	r29
     d9a:	18 2f       	mov	r17, r24
     d9c:	c8 ee       	ldi	r28, 0xE8	; 232
     d9e:	d3 e0       	ldi	r29, 0x03	; 3
     da0:	09 c0       	rjmp	.+18     	; 0xdb4 <USB_Host_WaitForIOS+0x20>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     da2:	81 e0       	ldi	r24, 0x01	; 1
     da4:	65 db       	rcall	.-2358   	; 0x470 <USB_Host_WaitMS>
     da6:	88 23       	and	r24, r24
     da8:	d1 f4       	brne	.+52     	; 0xdde <USB_Host_WaitForIOS+0x4a>
		  return ErrorCode;

		if (!(TimeoutCounter--))
     daa:	20 97       	sbiw	r28, 0x00	; 0
     dac:	11 f4       	brne	.+4      	; 0xdb2 <USB_Host_WaitForIOS+0x1e>
     dae:	84 e0       	ldi	r24, 0x04	; 4
     db0:	16 c0       	rjmp	.+44     	; 0xdde <USB_Host_WaitForIOS+0x4a>
     db2:	21 97       	sbiw	r28, 0x01	; 1
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
     db4:	11 23       	and	r17, r17
     db6:	29 f4       	brne	.+10     	; 0xdc2 <USB_Host_WaitForIOS+0x2e>
			 *  \return Boolean \c true if the current pipe is ready for a SETUP packet, \c false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
     db8:	80 91 a6 00 	lds	r24, 0x00A6
     dbc:	83 ff       	sbrs	r24, 3
     dbe:	f1 cf       	rjmp	.-30     	; 0xda2 <USB_Host_WaitForIOS+0xe>
     dc0:	0d c0       	rjmp	.+26     	; 0xddc <USB_Host_WaitForIOS+0x48>
     dc2:	11 30       	cpi	r17, 0x01	; 1
     dc4:	29 f4       	brne	.+10     	; 0xdd0 <USB_Host_WaitForIOS+0x3c>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     dc6:	80 91 a6 00 	lds	r24, 0x00A6
     dca:	80 ff       	sbrs	r24, 0
     dcc:	ea cf       	rjmp	.-44     	; 0xda2 <USB_Host_WaitForIOS+0xe>
     dce:	06 c0       	rjmp	.+12     	; 0xddc <USB_Host_WaitForIOS+0x48>
     dd0:	12 30       	cpi	r17, 0x02	; 2
     dd2:	39 f7       	brne	.-50     	; 0xda2 <USB_Host_WaitForIOS+0xe>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     dd4:	80 91 a6 00 	lds	r24, 0x00A6
     dd8:	82 ff       	sbrs	r24, 2
     dda:	e3 cf       	rjmp	.-58     	; 0xda2 <USB_Host_WaitForIOS+0xe>
     ddc:	80 e0       	ldi	r24, 0x00	; 0
		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
}
     dde:	df 91       	pop	r29
     de0:	cf 91       	pop	r28
     de2:	1f 91       	pop	r17
     de4:	08 95       	ret

00000de6 <USB_Host_SendControlRequest>:
#include "HostStandardReq.h"

uint8_t USB_Host_ConfigurationNumber;

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
     de6:	ff 92       	push	r15
     de8:	0f 93       	push	r16
     dea:	1f 93       	push	r17
     dec:	cf 93       	push	r28
     dee:	df 93       	push	r29
     df0:	18 2f       	mov	r17, r24
     df2:	09 2f       	mov	r16, r25
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     df4:	f0 90 9e 00 	lds	r15, 0x009E
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
	bool     BusSuspended = USB_Host_IsBusSuspended();
	uint8_t  ReturnStatus = HOST_SENDCONTROL_Successful;
	uint16_t DataLen      = USB_ControlRequest.wLength;
     df8:	c0 91 33 01 	lds	r28, 0x0133
     dfc:	d0 91 34 01 	lds	r29, 0x0134
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     e00:	80 91 9e 00 	lds	r24, 0x009E
     e04:	81 60       	ori	r24, 0x01	; 1
     e06:	80 93 9e 00 	sts	0x009E, r24

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     e0a:	81 e0       	ldi	r24, 0x01	; 1
     e0c:	31 db       	rcall	.-2462   	; 0x470 <USB_Host_WaitMS>
     e0e:	98 2f       	mov	r25, r24
     e10:	88 23       	and	r24, r24
     e12:	09 f0       	breq	.+2      	; 0xe16 <USB_Host_SendControlRequest+0x30>
     e14:	d7 c0       	rjmp	.+430    	; 0xfc4 <USB_Host_SendControlRequest+0x1de>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     e16:	80 91 aa 00 	lds	r24, 0x00AA
     e1a:	8f 7c       	andi	r24, 0xCF	; 207
     e1c:	80 93 aa 00 	sts	0x00AA, r24

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     e20:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
     e24:	80 91 a6 00 	lds	r24, 0x00A6
     e28:	8f 7e       	andi	r24, 0xEF	; 239
     e2a:	80 93 a6 00 	sts	0x00A6, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     e2e:	80 91 a9 00 	lds	r24, 0x00A9
     e32:	8f 7b       	andi	r24, 0xBF	; 191
     e34:	80 93 a9 00 	sts	0x00A9, r24
     e38:	ed e2       	ldi	r30, 0x2D	; 45
     e3a:	f1 e0       	ldi	r31, 0x01	; 1
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
	  Pipe_Write_8(*(HeaderStream++));	
     e3c:	81 91       	ld	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
     e3e:	80 93 af 00 	sts	0x00AF, r24
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
     e42:	81 e0       	ldi	r24, 0x01	; 1
     e44:	e5 33       	cpi	r30, 0x35	; 53
     e46:	f8 07       	cpc	r31, r24
     e48:	c9 f7       	brne	.-14     	; 0xe3c <USB_Host_SendControlRequest+0x56>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
     e4a:	80 91 a6 00 	lds	r24, 0x00A6
     e4e:	87 77       	andi	r24, 0x77	; 119
     e50:	80 93 a6 00 	sts	0x00A6, r24
	  Pipe_Write_8(*(HeaderStream++));	
	#endif
	
	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
     e54:	80 e0       	ldi	r24, 0x00	; 0
     e56:	9e df       	rcall	.-196    	; 0xd94 <USB_Host_WaitForIOS>
     e58:	98 2f       	mov	r25, r24
     e5a:	88 23       	and	r24, r24
     e5c:	09 f0       	breq	.+2      	; 0xe60 <USB_Host_SendControlRequest+0x7a>
     e5e:	b2 c0       	rjmp	.+356    	; 0xfc4 <USB_Host_SendControlRequest+0x1de>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     e60:	80 91 a9 00 	lds	r24, 0x00A9
     e64:	80 64       	ori	r24, 0x40	; 64
     e66:	80 93 a9 00 	sts	0x00A9, r24
	  goto End_Of_Control_Send;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     e6a:	81 e0       	ldi	r24, 0x01	; 1
     e6c:	01 db       	rcall	.-2558   	; 0x470 <USB_Host_WaitMS>
     e6e:	98 2f       	mov	r25, r24
     e70:	88 23       	and	r24, r24
     e72:	09 f0       	breq	.+2      	; 0xe76 <USB_Host_SendControlRequest+0x90>
     e74:	a7 c0       	rjmp	.+334    	; 0xfc4 <USB_Host_SendControlRequest+0x1de>

uint8_t USB_Host_ConfigurationNumber;

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
     e76:	21 2f       	mov	r18, r17
     e78:	30 2f       	mov	r19, r16
     e7a:	c9 01       	movw	r24, r18
     e7c:	8c 01       	movw	r16, r24
	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
	  goto End_Of_Control_Send;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
     e7e:	80 91 2d 01 	lds	r24, 0x012D
     e82:	87 ff       	sbrs	r24, 7
     e84:	52 c0       	rjmp	.+164    	; 0xf2a <USB_Host_SendControlRequest+0x144>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     e86:	80 91 aa 00 	lds	r24, 0x00AA
     e8a:	8f 7c       	andi	r24, 0xCF	; 207
     e8c:	80 61       	ori	r24, 0x10	; 16
     e8e:	80 93 aa 00 	sts	0x00AA, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
     e92:	01 15       	cp	r16, r1
     e94:	11 05       	cpc	r17, r1
     e96:	69 f5       	brne	.+90     	; 0xef2 <USB_Host_SendControlRequest+0x10c>
     e98:	2e c0       	rjmp	.+92     	; 0xef6 <USB_Host_SendControlRequest+0x110>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     e9a:	80 91 a9 00 	lds	r24, 0x00A9
     e9e:	8f 7b       	andi	r24, 0xBF	; 191
     ea0:	80 93 a9 00 	sts	0x00A9, r24
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
     ea4:	81 e0       	ldi	r24, 0x01	; 1
     ea6:	76 df       	rcall	.-276    	; 0xd94 <USB_Host_WaitForIOS>
     ea8:	98 2f       	mov	r25, r24
     eaa:	88 23       	and	r24, r24
     eac:	09 f0       	breq	.+2      	; 0xeb0 <USB_Host_SendControlRequest+0xca>
     eae:	8a c0       	rjmp	.+276    	; 0xfc4 <USB_Host_SendControlRequest+0x1de>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
     eb0:	80 91 f6 00 	lds	r24, 0x00F6
     eb4:	90 91 f7 00 	lds	r25, 0x00F7
				  goto End_Of_Control_Send;

				if (!(Pipe_BytesInPipe()))
     eb8:	89 2b       	or	r24, r25
     eba:	49 f4       	brne	.+18     	; 0xece <USB_Host_SendControlRequest+0xe8>
     ebc:	c0 e0       	ldi	r28, 0x00	; 0
     ebe:	d0 e0       	ldi	r29, 0x00	; 0
     ec0:	06 c0       	rjmp	.+12     	; 0xece <USB_Host_SendControlRequest+0xe8>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
     ec2:	80 91 af 00 	lds	r24, 0x00AF
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
				{
					*(DataStream++) = Pipe_Read_8();
     ec6:	f8 01       	movw	r30, r16
     ec8:	81 93       	st	Z+, r24
     eca:	8f 01       	movw	r16, r30
					DataLen--;
     ecc:	21 97       	sbiw	r28, 0x01	; 1
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
     ece:	80 91 f6 00 	lds	r24, 0x00F6
     ed2:	90 91 f7 00 	lds	r25, 0x00F7
				  goto End_Of_Control_Send;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
     ed6:	89 2b       	or	r24, r25
     ed8:	11 f0       	breq	.+4      	; 0xede <USB_Host_SendControlRequest+0xf8>
     eda:	20 97       	sbiw	r28, 0x00	; 0
     edc:	91 f7       	brne	.-28     	; 0xec2 <USB_Host_SendControlRequest+0xdc>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     ede:	80 91 a9 00 	lds	r24, 0x00A9
     ee2:	80 64       	ori	r24, 0x40	; 64
     ee4:	80 93 a9 00 	sts	0x00A9, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     ee8:	80 91 a6 00 	lds	r24, 0x00A6
     eec:	8e 77       	andi	r24, 0x7E	; 126
     eee:	80 93 a6 00 	sts	0x00A6, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
     ef2:	20 97       	sbiw	r28, 0x00	; 0
     ef4:	91 f6       	brne	.-92     	; 0xe9a <USB_Host_SendControlRequest+0xb4>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     ef6:	80 91 aa 00 	lds	r24, 0x00AA
     efa:	8f 7c       	andi	r24, 0xCF	; 207
     efc:	80 62       	ori	r24, 0x20	; 32
     efe:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     f02:	80 91 a9 00 	lds	r24, 0x00A9
     f06:	8f 7b       	andi	r24, 0xBF	; 191
     f08:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
     f0c:	82 e0       	ldi	r24, 0x02	; 2
     f0e:	42 df       	rcall	.-380    	; 0xd94 <USB_Host_WaitForIOS>
     f10:	98 2f       	mov	r25, r24
     f12:	88 23       	and	r24, r24
     f14:	09 f0       	breq	.+2      	; 0xf18 <USB_Host_SendControlRequest+0x132>
     f16:	56 c0       	rjmp	.+172    	; 0xfc4 <USB_Host_SendControlRequest+0x1de>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
     f18:	80 91 a6 00 	lds	r24, 0x00A6
     f1c:	8b 77       	andi	r24, 0x7B	; 123
     f1e:	80 93 a6 00 	sts	0x00A6, r24
		  goto End_Of_Control_Send;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
     f22:	82 e0       	ldi	r24, 0x02	; 2
     f24:	37 df       	rcall	.-402    	; 0xd94 <USB_Host_WaitForIOS>
     f26:	98 2f       	mov	r25, r24
     f28:	4d c0       	rjmp	.+154    	; 0xfc4 <USB_Host_SendControlRequest+0x1de>
		  goto End_Of_Control_Send;
	}
	else
	{
		if (DataStream != NULL)
     f2a:	01 15       	cp	r16, r1
     f2c:	11 05       	cpc	r17, r1
     f2e:	a9 f1       	breq	.+106    	; 0xf9a <USB_Host_SendControlRequest+0x1b4>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     f30:	80 91 aa 00 	lds	r24, 0x00AA
     f34:	8f 7c       	andi	r24, 0xCF	; 207
     f36:	80 62       	ori	r24, 0x20	; 32
     f38:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     f3c:	80 91 a9 00 	lds	r24, 0x00A9
     f40:	8f 7b       	andi	r24, 0xBF	; 191
     f42:	80 93 a9 00 	sts	0x00A9, r24
     f46:	1d c0       	rjmp	.+58     	; 0xf82 <USB_Host_SendControlRequest+0x19c>
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
     f48:	82 e0       	ldi	r24, 0x02	; 2
     f4a:	24 df       	rcall	.-440    	; 0xd94 <USB_Host_WaitForIOS>
     f4c:	98 2f       	mov	r25, r24
     f4e:	88 23       	and	r24, r24
     f50:	c9 f5       	brne	.+114    	; 0xfc4 <USB_Host_SendControlRequest+0x1de>
				  goto End_Of_Control_Send;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
     f52:	80 91 27 01 	lds	r24, 0x0127
     f56:	28 2f       	mov	r18, r24
     f58:	30 e0       	ldi	r19, 0x00	; 0
     f5a:	07 c0       	rjmp	.+14     	; 0xf6a <USB_Host_SendControlRequest+0x184>
				{
					Pipe_Write_8(*(DataStream++));
     f5c:	f8 01       	movw	r30, r16
     f5e:	81 91       	ld	r24, Z+
     f60:	8f 01       	movw	r16, r30
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
     f62:	80 93 af 00 	sts	0x00AF, r24
					DataLen--;
     f66:	21 97       	sbiw	r28, 0x01	; 1
			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
				  goto End_Of_Control_Send;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
     f68:	39 f0       	breq	.+14     	; 0xf78 <USB_Host_SendControlRequest+0x192>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
     f6a:	80 91 f6 00 	lds	r24, 0x00F6
     f6e:	90 91 f7 00 	lds	r25, 0x00F7
     f72:	82 17       	cp	r24, r18
     f74:	93 07       	cpc	r25, r19
     f76:	90 f3       	brcs	.-28     	; 0xf5c <USB_Host_SendControlRequest+0x176>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
     f78:	80 91 a6 00 	lds	r24, 0x00A6
     f7c:	8b 77       	andi	r24, 0x7B	; 123
     f7e:	80 93 a6 00 	sts	0x00A6, r24
		if (DataStream != NULL)
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
     f82:	20 97       	sbiw	r28, 0x00	; 0
     f84:	09 f7       	brne	.-62     	; 0xf48 <USB_Host_SendControlRequest+0x162>
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
     f86:	82 e0       	ldi	r24, 0x02	; 2
     f88:	05 df       	rcall	.-502    	; 0xd94 <USB_Host_WaitForIOS>
     f8a:	98 2f       	mov	r25, r24
     f8c:	88 23       	and	r24, r24
     f8e:	d1 f4       	brne	.+52     	; 0xfc4 <USB_Host_SendControlRequest+0x1de>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     f90:	80 91 a9 00 	lds	r24, 0x00A9
     f94:	80 64       	ori	r24, 0x40	; 64
     f96:	80 93 a9 00 	sts	0x00A9, r24
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     f9a:	80 91 aa 00 	lds	r24, 0x00AA
     f9e:	8f 7c       	andi	r24, 0xCF	; 207
     fa0:	80 61       	ori	r24, 0x10	; 16
     fa2:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     fa6:	80 91 a9 00 	lds	r24, 0x00A9
     faa:	8f 7b       	andi	r24, 0xBF	; 191
     fac:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
     fb0:	81 e0       	ldi	r24, 0x01	; 1
     fb2:	f0 de       	rcall	.-544    	; 0xd94 <USB_Host_WaitForIOS>
     fb4:	98 2f       	mov	r25, r24
     fb6:	88 23       	and	r24, r24
     fb8:	29 f4       	brne	.+10     	; 0xfc4 <USB_Host_SendControlRequest+0x1de>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     fba:	80 91 a6 00 	lds	r24, 0x00A6
     fbe:	8e 77       	andi	r24, 0x7E	; 126
     fc0:	80 93 a6 00 	sts	0x00A6, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     fc4:	80 91 a9 00 	lds	r24, 0x00A9
     fc8:	80 64       	ori	r24, 0x40	; 64
     fca:	80 93 a9 00 	sts	0x00A9, r24
	}

End_Of_Control_Send:
	Pipe_Freeze();

	if (BusSuspended)
     fce:	f0 fc       	sbrc	r15, 0
     fd0:	05 c0       	rjmp	.+10     	; 0xfdc <USB_Host_SendControlRequest+0x1f6>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     fd2:	80 91 9e 00 	lds	r24, 0x009E
     fd6:	8e 7f       	andi	r24, 0xFE	; 254
     fd8:	80 93 9e 00 	sts	0x009E, r24
			 *  \param[in] PipeNumber  Index of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t PipeNumber)
			{
				UPRST = (1 << PipeNumber);
     fdc:	81 e0       	ldi	r24, 0x01	; 1
     fde:	80 93 a8 00 	sts	0x00A8, r24
				UPRST = 0;
     fe2:	10 92 a8 00 	sts	0x00A8, r1
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
     fe6:	89 2f       	mov	r24, r25
     fe8:	df 91       	pop	r29
     fea:	cf 91       	pop	r28
     fec:	1f 91       	pop	r17
     fee:	0f 91       	pop	r16
     ff0:	ff 90       	pop	r15
     ff2:	08 95       	ret

00000ff4 <USB_Host_SetDeviceConfiguration>:

	return HOST_SENDCONTROL_Successful;
}

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
     ff4:	1f 93       	push	r17
     ff6:	18 2f       	mov	r17, r24
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
     ff8:	10 92 2d 01 	sts	0x012D, r1
     ffc:	89 e0       	ldi	r24, 0x09	; 9
     ffe:	80 93 2e 01 	sts	0x012E, r24
    1002:	10 93 2f 01 	sts	0x012F, r17
    1006:	10 92 30 01 	sts	0x0130, r1
    100a:	10 92 32 01 	sts	0x0132, r1
    100e:	10 92 31 01 	sts	0x0131, r1
    1012:	10 92 34 01 	sts	0x0134, r1
    1016:	10 92 33 01 	sts	0x0133, r1
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    101a:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);
	
	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) == HOST_SENDCONTROL_Successful)
    101e:	80 e0       	ldi	r24, 0x00	; 0
    1020:	90 e0       	ldi	r25, 0x00	; 0
    1022:	e1 de       	rcall	.-574    	; 0xde6 <USB_Host_SendControlRequest>
    1024:	88 23       	and	r24, r24
    1026:	49 f4       	brne	.+18     	; 0x103a <USB_Host_SetDeviceConfiguration+0x46>
	{
		USB_Host_ConfigurationNumber = ConfigNumber;
    1028:	10 93 2b 01 	sts	0x012B, r17
		USB_HostState                = (ConfigNumber) ? HOST_STATE_Configured : HOST_STATE_Addressed;
    102c:	11 23       	and	r17, r17
    102e:	11 f4       	brne	.+4      	; 0x1034 <USB_Host_SetDeviceConfiguration+0x40>
    1030:	9a e0       	ldi	r25, 0x0A	; 10
    1032:	01 c0       	rjmp	.+2      	; 0x1036 <USB_Host_SetDeviceConfiguration+0x42>
    1034:	9b e0       	ldi	r25, 0x0B	; 11
    1036:	90 93 35 01 	sts	0x0135, r25
	}

	return ErrorCode;
}
    103a:	1f 91       	pop	r17
    103c:	08 95       	ret

0000103e <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    103e:	ff 92       	push	r15
    1040:	0f 93       	push	r16
    1042:	1f 93       	push	r17
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
    1044:	07 ea       	ldi	r16, 0xA7	; 167
    1046:	10 e0       	ldi	r17, 0x00	; 0
    1048:	f8 01       	movw	r30, r16
    104a:	f0 80       	ld	r15, Z
    104c:	f7 e0       	ldi	r31, 0x07	; 7
    104e:	ff 22       	and	r15, r31
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1050:	f8 01       	movw	r30, r16
    1052:	10 82       	st	Z, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    1054:	aa da       	rcall	.-2732   	; 0x5aa <USB_Host_ProcessNextHostState>
    1056:	f8 01       	movw	r30, r16
    1058:	f0 82       	st	Z, r15
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
    105a:	1f 91       	pop	r17
    105c:	0f 91       	pop	r16
    105e:	ff 90       	pop	r15
    1060:	08 95       	ret

00001062 <DCOMP_CDC_Host_NextCDCControlInterface>:

	return CDC_ENUMERROR_NoError;
}

static uint8_t DCOMP_CDC_Host_NextCDCControlInterface(void* const CurrentDescriptor)
{
    1062:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
    1064:	81 81       	ldd	r24, Z+1	; 0x01
    1066:	84 30       	cpi	r24, 0x04	; 4
    1068:	59 f4       	brne	.+22     	; 0x1080 <DCOMP_CDC_Host_NextCDCControlInterface+0x1e>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		if ((Interface->Class    == CDC_CSCP_CDCClass)    &&
    106a:	85 81       	ldd	r24, Z+5	; 0x05
    106c:	82 30       	cpi	r24, 0x02	; 2
    106e:	41 f4       	brne	.+16     	; 0x1080 <DCOMP_CDC_Host_NextCDCControlInterface+0x1e>
    1070:	86 81       	ldd	r24, Z+6	; 0x06
    1072:	82 30       	cpi	r24, 0x02	; 2
    1074:	29 f4       	brne	.+10     	; 0x1080 <DCOMP_CDC_Host_NextCDCControlInterface+0x1e>
    1076:	87 81       	ldd	r24, Z+7	; 0x07
    1078:	81 30       	cpi	r24, 0x01	; 1
    107a:	11 f4       	brne	.+4      	; 0x1080 <DCOMP_CDC_Host_NextCDCControlInterface+0x1e>
    107c:	80 e0       	ldi	r24, 0x00	; 0
    107e:	08 95       	ret
    1080:	82 e0       	ldi	r24, 0x02	; 2
			return DESCRIPTOR_SEARCH_Found;
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    1082:	08 95       	ret

00001084 <DCOMP_CDC_Host_NextCDCDataInterface>:

static uint8_t DCOMP_CDC_Host_NextCDCDataInterface(void* const CurrentDescriptor)
{
    1084:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
    1086:	81 81       	ldd	r24, Z+1	; 0x01
    1088:	84 30       	cpi	r24, 0x04	; 4
    108a:	41 f4       	brne	.+16     	; 0x109c <DCOMP_CDC_Host_NextCDCDataInterface+0x18>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		if ((Interface->Class    == CDC_CSCP_CDCDataClass)   &&
    108c:	85 81       	ldd	r24, Z+5	; 0x05
    108e:	8a 30       	cpi	r24, 0x0A	; 10
    1090:	29 f4       	brne	.+10     	; 0x109c <DCOMP_CDC_Host_NextCDCDataInterface+0x18>
    1092:	86 81       	ldd	r24, Z+6	; 0x06
    1094:	88 23       	and	r24, r24
    1096:	11 f4       	brne	.+4      	; 0x109c <DCOMP_CDC_Host_NextCDCDataInterface+0x18>
    1098:	87 81       	ldd	r24, Z+7	; 0x07
    109a:	81 11       	cpse	r24, r1
    109c:	82 e0       	ldi	r24, 0x02	; 2
			return DESCRIPTOR_SEARCH_Found;
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    109e:	08 95       	ret

000010a0 <CDC_Host_BytesReceived>:

	return PIPE_READYWAIT_NoError;
}

uint16_t CDC_Host_BytesReceived(USB_ClassInfo_CDC_Host_t* const CDCInterfaceInfo)
{
    10a0:	fc 01       	movw	r30, r24
	if ((USB_HostState != HOST_STATE_Configured) || !(CDCInterfaceInfo->State.IsActive))
    10a2:	80 91 35 01 	lds	r24, 0x0135
    10a6:	8b 30       	cpi	r24, 0x0B	; 11
    10a8:	51 f5       	brne	.+84     	; 0x10fe <CDC_Host_BytesReceived+0x5e>
    10aa:	86 81       	ldd	r24, Z+6	; 0x06
    10ac:	88 23       	and	r24, r24
    10ae:	39 f1       	breq	.+78     	; 0x10fe <CDC_Host_BytesReceived+0x5e>
	  return 0;

	Pipe_SelectPipe(CDCInterfaceInfo->Config.DataINPipeNumber);
    10b0:	80 81       	ld	r24, Z
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    10b2:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    10b6:	80 91 a9 00 	lds	r24, 0x00A9
    10ba:	8f 7b       	andi	r24, 0xBF	; 191
    10bc:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    10c0:	80 91 a6 00 	lds	r24, 0x00A6
	Pipe_Unfreeze();

	if (Pipe_IsINReceived())
    10c4:	80 ff       	sbrs	r24, 0
    10c6:	16 c0       	rjmp	.+44     	; 0x10f4 <CDC_Host_BytesReceived+0x54>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    10c8:	80 91 f6 00 	lds	r24, 0x00F6
    10cc:	90 91 f7 00 	lds	r25, 0x00F7
	{
		if (!(Pipe_BytesInPipe()))
    10d0:	89 2b       	or	r24, r25
    10d2:	31 f4       	brne	.+12     	; 0x10e0 <CDC_Host_BytesReceived+0x40>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    10d4:	80 91 a6 00 	lds	r24, 0x00A6
    10d8:	8e 77       	andi	r24, 0x7E	; 126
    10da:	80 93 a6 00 	sts	0x00A6, r24
    10de:	0a c0       	rjmp	.+20     	; 0x10f4 <CDC_Host_BytesReceived+0x54>
		{
			Pipe_ClearIN();
			Pipe_Freeze();
			return 0;
    10e0:	80 91 a9 00 	lds	r24, 0x00A9

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    10e4:	80 64       	ori	r24, 0x40	; 64
    10e6:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    10ea:	20 91 f6 00 	lds	r18, 0x00F6
    10ee:	30 91 f7 00 	lds	r19, 0x00F7
    10f2:	07 c0       	rjmp	.+14     	; 0x1102 <CDC_Host_BytesReceived+0x62>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    10f4:	80 91 a9 00 	lds	r24, 0x00A9
    10f8:	80 64       	ori	r24, 0x40	; 64
    10fa:	80 93 a9 00 	sts	0x00A9, r24
	}
	else
	{
		Pipe_Freeze();

		return 0;
    10fe:	20 e0       	ldi	r18, 0x00	; 0
    1100:	30 e0       	ldi	r19, 0x00	; 0
	}
}
    1102:	c9 01       	movw	r24, r18
    1104:	08 95       	ret

00001106 <CDC_Host_ReceiveByte>:

int16_t CDC_Host_ReceiveByte(USB_ClassInfo_CDC_Host_t* const CDCInterfaceInfo)
{
    1106:	fc 01       	movw	r30, r24
	if ((USB_HostState != HOST_STATE_Configured) || !(CDCInterfaceInfo->State.IsActive))
    1108:	80 91 35 01 	lds	r24, 0x0135
    110c:	8b 30       	cpi	r24, 0x0B	; 11
    110e:	81 f5       	brne	.+96     	; 0x1170 <CDC_Host_ReceiveByte+0x6a>
    1110:	86 81       	ldd	r24, Z+6	; 0x06
    1112:	88 23       	and	r24, r24
    1114:	69 f1       	breq	.+90     	; 0x1170 <CDC_Host_ReceiveByte+0x6a>
	  return -1;

	int16_t ReceivedByte = -1;

	Pipe_SelectPipe(CDCInterfaceInfo->Config.DataINPipeNumber);
    1116:	80 81       	ld	r24, Z
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1118:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    111c:	80 91 a9 00 	lds	r24, 0x00A9
    1120:	8f 7b       	andi	r24, 0xBF	; 191
    1122:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    1126:	80 91 a6 00 	lds	r24, 0x00A6
	Pipe_Unfreeze();

	if (Pipe_IsINReceived())
    112a:	80 fd       	sbrc	r24, 0
    112c:	03 c0       	rjmp	.+6      	; 0x1134 <CDC_Host_ReceiveByte+0x2e>
    112e:	2f ef       	ldi	r18, 0xFF	; 255
    1130:	3f ef       	ldi	r19, 0xFF	; 255
    1132:	18 c0       	rjmp	.+48     	; 0x1164 <CDC_Host_ReceiveByte+0x5e>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1134:	80 91 f6 00 	lds	r24, 0x00F6
    1138:	90 91 f7 00 	lds	r25, 0x00F7
	{
		if (Pipe_BytesInPipe())
    113c:	89 2b       	or	r24, r25
    113e:	19 f4       	brne	.+6      	; 0x1146 <CDC_Host_ReceiveByte+0x40>
    1140:	2f ef       	ldi	r18, 0xFF	; 255
    1142:	3f ef       	ldi	r19, 0xFF	; 255
    1144:	04 c0       	rjmp	.+8      	; 0x114e <CDC_Host_ReceiveByte+0x48>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    1146:	80 91 af 00 	lds	r24, 0x00AF
		  ReceivedByte = Pipe_Read_8();
    114a:	28 2f       	mov	r18, r24
    114c:	30 e0       	ldi	r19, 0x00	; 0
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    114e:	80 91 f6 00 	lds	r24, 0x00F6
    1152:	90 91 f7 00 	lds	r25, 0x00F7

		if (!(Pipe_BytesInPipe()))
    1156:	89 2b       	or	r24, r25
    1158:	29 f4       	brne	.+10     	; 0x1164 <CDC_Host_ReceiveByte+0x5e>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    115a:	80 91 a6 00 	lds	r24, 0x00A6
    115e:	8e 77       	andi	r24, 0x7E	; 126
    1160:	80 93 a6 00 	sts	0x00A6, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1164:	80 91 a9 00 	lds	r24, 0x00A9
    1168:	80 64       	ori	r24, 0x40	; 64
    116a:	80 93 a9 00 	sts	0x00A9, r24
    116e:	02 c0       	rjmp	.+4      	; 0x1174 <CDC_Host_ReceiveByte+0x6e>
		  Pipe_ClearIN();
	}

	Pipe_Freeze();

	return ReceivedByte;
    1170:	2f ef       	ldi	r18, 0xFF	; 255
    1172:	3f ef       	ldi	r19, 0xFF	; 255
}
    1174:	c9 01       	movw	r24, r18
    1176:	08 95       	ret

00001178 <CDC_Host_Event_Stub>:
#endif

void CDC_Host_Event_Stub(void)
{

}
    1178:	08 95       	ret

0000117a <CDC_Host_Flush>:

	return ReceivedByte;
}

uint8_t CDC_Host_Flush(USB_ClassInfo_CDC_Host_t* const CDCInterfaceInfo)
{
    117a:	fc 01       	movw	r30, r24
	if ((USB_HostState != HOST_STATE_Configured) || !(CDCInterfaceInfo->State.IsActive))
    117c:	80 91 35 01 	lds	r24, 0x0135
    1180:	8b 30       	cpi	r24, 0x0B	; 11
    1182:	49 f5       	brne	.+82     	; 0x11d6 <CDC_Host_Flush+0x5c>
    1184:	86 81       	ldd	r24, Z+6	; 0x06
    1186:	88 23       	and	r24, r24
    1188:	31 f1       	breq	.+76     	; 0x11d6 <CDC_Host_Flush+0x5c>
	  return PIPE_READYWAIT_DeviceDisconnected;

	uint8_t ErrorCode;

	Pipe_SelectPipe(CDCInterfaceInfo->Config.DataOUTPipeNumber);
    118a:	82 81       	ldd	r24, Z+2	; 0x02
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    118c:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1190:	80 91 a9 00 	lds	r24, 0x00A9
    1194:	8f 7b       	andi	r24, 0xBF	; 191
    1196:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    119a:	80 91 f6 00 	lds	r24, 0x00F6
    119e:	90 91 f7 00 	lds	r25, 0x00F7
	Pipe_Unfreeze();

	if (!(Pipe_BytesInPipe()))
    11a2:	89 2b       	or	r24, r25
    11a4:	b1 f0       	breq	.+44     	; 0x11d2 <CDC_Host_Flush+0x58>
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
    11a6:	90 91 a6 00 	lds	r25, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    11aa:	80 91 a6 00 	lds	r24, 0x00A6
    11ae:	8b 77       	andi	r24, 0x7B	; 123
    11b0:	80 93 a6 00 	sts	0x00A6, r24

	bool BankFull = !(Pipe_IsReadWriteAllowed());

	Pipe_ClearOUT();

	if (BankFull)
    11b4:	95 fd       	sbrc	r25, 5
    11b6:	08 c0       	rjmp	.+16     	; 0x11c8 <CDC_Host_Flush+0x4e>
	{
		if ((ErrorCode = Pipe_WaitUntilReady()) != PIPE_READYWAIT_NoError)
    11b8:	b7 db       	rcall	.-2194   	; 0x928 <Pipe_WaitUntilReady>
    11ba:	88 23       	and	r24, r24
    11bc:	69 f4       	brne	.+26     	; 0x11d8 <CDC_Host_Flush+0x5e>
    11be:	80 91 a6 00 	lds	r24, 0x00A6
    11c2:	8b 77       	andi	r24, 0x7B	; 123
    11c4:	80 93 a6 00 	sts	0x00A6, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    11c8:	80 91 a9 00 	lds	r24, 0x00A9
    11cc:	80 64       	ori	r24, 0x40	; 64
    11ce:	80 93 a9 00 	sts	0x00A9, r24
    11d2:	80 e0       	ldi	r24, 0x00	; 0
    11d4:	08 95       	ret
		Pipe_ClearOUT();
	}

	Pipe_Freeze();

	return PIPE_READYWAIT_NoError;
    11d6:	82 e0       	ldi	r24, 0x02	; 2
}
    11d8:	08 95       	ret

000011da <CDC_Host_USBTask>:

	return DESCRIPTOR_SEARCH_NotFound;
}

void CDC_Host_USBTask(USB_ClassInfo_CDC_Host_t* const CDCInterfaceInfo)
{
    11da:	0f 93       	push	r16
    11dc:	1f 93       	push	r17
    11de:	df 93       	push	r29
    11e0:	cf 93       	push	r28
    11e2:	cd b7       	in	r28, 0x3d	; 61
    11e4:	de b7       	in	r29, 0x3e	; 62
    11e6:	28 97       	sbiw	r28, 0x08	; 8
    11e8:	0f b6       	in	r0, 0x3f	; 63
    11ea:	f8 94       	cli
    11ec:	de bf       	out	0x3e, r29	; 62
    11ee:	0f be       	out	0x3f, r0	; 63
    11f0:	cd bf       	out	0x3d, r28	; 61
    11f2:	8c 01       	movw	r16, r24
	if ((USB_HostState != HOST_STATE_Configured) || !(CDCInterfaceInfo->State.IsActive))
    11f4:	80 91 35 01 	lds	r24, 0x0135
    11f8:	8b 30       	cpi	r24, 0x0B	; 11
    11fa:	c1 f5       	brne	.+112    	; 0x126c <CDC_Host_USBTask+0x92>
    11fc:	f8 01       	movw	r30, r16
    11fe:	86 81       	ldd	r24, Z+6	; 0x06
    1200:	88 23       	and	r24, r24
    1202:	a1 f1       	breq	.+104    	; 0x126c <CDC_Host_USBTask+0x92>
	  return;

	Pipe_SelectPipe(CDCInterfaceInfo->Config.NotificationPipeNumber);
    1204:	84 81       	ldd	r24, Z+4	; 0x04
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1206:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    120a:	80 91 a9 00 	lds	r24, 0x00A9
    120e:	8f 7b       	andi	r24, 0xBF	; 191
    1210:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    1214:	80 91 a6 00 	lds	r24, 0x00A6
	Pipe_Unfreeze();

	if (Pipe_IsINReceived())
    1218:	80 ff       	sbrs	r24, 0
    121a:	21 c0       	rjmp	.+66     	; 0x125e <CDC_Host_USBTask+0x84>
	{
		USB_Request_Header_t Notification;
		Pipe_Read_Stream_LE(&Notification, sizeof(USB_Request_Header_t), NULL);
    121c:	ce 01       	movw	r24, r28
    121e:	01 96       	adiw	r24, 0x01	; 1
    1220:	68 e0       	ldi	r22, 0x08	; 8
    1222:	70 e0       	ldi	r23, 0x00	; 0
    1224:	40 e0       	ldi	r20, 0x00	; 0
    1226:	50 e0       	ldi	r21, 0x00	; 0
    1228:	bf dc       	rcall	.-1666   	; 0xba8 <Pipe_Read_Stream_LE>

		if ((Notification.bRequest      == CDC_NOTIF_SerialState) &&
    122a:	8a 81       	ldd	r24, Y+2	; 0x02
    122c:	80 32       	cpi	r24, 0x20	; 32
    122e:	91 f4       	brne	.+36     	; 0x1254 <CDC_Host_USBTask+0x7a>
    1230:	89 81       	ldd	r24, Y+1	; 0x01
    1232:	81 3a       	cpi	r24, 0xA1	; 161
    1234:	79 f4       	brne	.+30     	; 0x1254 <CDC_Host_USBTask+0x7a>
		    (Notification.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE)))
		{
			Pipe_Read_Stream_LE(&CDCInterfaceInfo->State.ControlLineStates.DeviceToHost,
    1236:	c8 01       	movw	r24, r16
    1238:	0f 96       	adiw	r24, 0x0f	; 15
    123a:	61 e0       	ldi	r22, 0x01	; 1
    123c:	70 e0       	ldi	r23, 0x00	; 0
    123e:	40 e0       	ldi	r20, 0x00	; 0
    1240:	50 e0       	ldi	r21, 0x00	; 0
    1242:	b2 dc       	rcall	.-1692   	; 0xba8 <Pipe_Read_Stream_LE>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1244:	80 91 a6 00 	lds	r24, 0x00A6
    1248:	8e 77       	andi	r24, 0x7E	; 126
    124a:	80 93 a6 00 	sts	0x00A6, r24
			                    sizeof(CDCInterfaceInfo->State.ControlLineStates.DeviceToHost),
			                    NULL);

			Pipe_ClearIN();

			EVENT_CDC_Host_ControLineStateChanged(CDCInterfaceInfo);
    124e:	c8 01       	movw	r24, r16
    1250:	93 df       	rcall	.-218    	; 0x1178 <CDC_Host_Event_Stub>
    1252:	05 c0       	rjmp	.+10     	; 0x125e <CDC_Host_USBTask+0x84>
    1254:	80 91 a6 00 	lds	r24, 0x00A6
    1258:	8e 77       	andi	r24, 0x7E	; 126
    125a:	80 93 a6 00 	sts	0x00A6, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    125e:	80 91 a9 00 	lds	r24, 0x00A9
    1262:	80 64       	ori	r24, 0x40	; 64
    1264:	80 93 a9 00 	sts	0x00A9, r24
	}

	Pipe_Freeze();

	#if !defined(NO_CLASS_DRIVER_AUTOFLUSH)
	CDC_Host_Flush(CDCInterfaceInfo);
    1268:	c8 01       	movw	r24, r16
    126a:	87 df       	rcall	.-242    	; 0x117a <CDC_Host_Flush>
	#endif
}
    126c:	28 96       	adiw	r28, 0x08	; 8
    126e:	0f b6       	in	r0, 0x3f	; 63
    1270:	f8 94       	cli
    1272:	de bf       	out	0x3e, r29	; 62
    1274:	0f be       	out	0x3f, r0	; 63
    1276:	cd bf       	out	0x3d, r28	; 61
    1278:	cf 91       	pop	r28
    127a:	df 91       	pop	r29
    127c:	1f 91       	pop	r17
    127e:	0f 91       	pop	r16
    1280:	08 95       	ret

00001282 <CDC_Host_ConfigurePipes>:
#include "CDC.h"

uint8_t CDC_Host_ConfigurePipes(USB_ClassInfo_CDC_Host_t* const CDCInterfaceInfo,
                                uint16_t ConfigDescriptorSize,
                                void* ConfigDescriptorData)
{
    1282:	4f 92       	push	r4
    1284:	5f 92       	push	r5
    1286:	6f 92       	push	r6
    1288:	7f 92       	push	r7
    128a:	8f 92       	push	r8
    128c:	9f 92       	push	r9
    128e:	af 92       	push	r10
    1290:	bf 92       	push	r11
    1292:	cf 92       	push	r12
    1294:	df 92       	push	r13
    1296:	ef 92       	push	r14
    1298:	ff 92       	push	r15
    129a:	0f 93       	push	r16
    129c:	1f 93       	push	r17
    129e:	df 93       	push	r29
    12a0:	cf 93       	push	r28
    12a2:	00 d0       	rcall	.+0      	; 0x12a4 <CDC_Host_ConfigurePipes+0x22>
    12a4:	00 d0       	rcall	.+0      	; 0x12a6 <CDC_Host_ConfigurePipes+0x24>
    12a6:	0f 92       	push	r0
    12a8:	cd b7       	in	r28, 0x3d	; 61
    12aa:	de b7       	in	r29, 0x3e	; 62
    12ac:	6c 01       	movw	r12, r24
    12ae:	7a 83       	std	Y+2, r23	; 0x02
    12b0:	69 83       	std	Y+1, r22	; 0x01
    12b2:	5c 83       	std	Y+4, r21	; 0x04
    12b4:	4b 83       	std	Y+3, r20	; 0x03
	USB_Descriptor_Endpoint_t*  DataINEndpoint       = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint      = NULL;
	USB_Descriptor_Endpoint_t*  NotificationEndpoint = NULL;
	USB_Descriptor_Interface_t* CDCControlInterface  = NULL;

	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));
    12b6:	06 96       	adiw	r24, 0x06	; 6
    12b8:	fc 01       	movw	r30, r24
    12ba:	81 e1       	ldi	r24, 0x11	; 17
    12bc:	df 01       	movw	r26, r30
    12be:	1d 92       	st	X+, r1
    12c0:	8a 95       	dec	r24
    12c2:	e9 f7       	brne	.-6      	; 0x12be <CDC_Host_ConfigurePipes+0x3c>

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
    12c4:	eb 81       	ldd	r30, Y+3	; 0x03
    12c6:	fc 81       	ldd	r31, Y+4	; 0x04
    12c8:	81 81       	ldd	r24, Z+1	; 0x01
    12ca:	82 30       	cpi	r24, 0x02	; 2
    12cc:	11 f0       	breq	.+4      	; 0x12d2 <CDC_Host_ConfigurePipes+0x50>
    12ce:	81 e0       	ldi	r24, 0x01	; 1
    12d0:	ac c0       	rjmp	.+344    	; 0x142a <CDC_Host_ConfigurePipes+0x1a8>
    12d2:	66 24       	eor	r6, r6
    12d4:	77 24       	eor	r7, r7
    12d6:	88 24       	eor	r8, r8
    12d8:	99 24       	eor	r9, r9
    12da:	aa 24       	eor	r10, r10
    12dc:	bb 24       	eor	r11, r11
    12de:	44 24       	eor	r4, r4
    12e0:	55 24       	eor	r5, r5
	  return CDC_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint) || !(NotificationEndpoint))
	{
		if (!(CDCControlInterface) ||
    12e2:	83 e0       	ldi	r24, 0x03	; 3
    12e4:	e8 2e       	mov	r14, r24
    12e6:	f1 2c       	mov	r15, r1
    12e8:	ec 0e       	add	r14, r28
    12ea:	fd 1e       	adc	r15, r29
    12ec:	8e 01       	movw	r16, r28
    12ee:	0f 5f       	subi	r16, 0xFF	; 255
    12f0:	1f 4f       	sbci	r17, 0xFF	; 255
    12f2:	04 c0       	rjmp	.+8      	; 0x12fc <CDC_Host_ConfigurePipes+0x7a>
	USB_Descriptor_Endpoint_t*  NotificationEndpoint = NULL;
	USB_Descriptor_Interface_t* CDCControlInterface  = NULL;

	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
    12f4:	88 24       	eor	r8, r8
    12f6:	99 24       	eor	r9, r9
    12f8:	66 24       	eor	r6, r6
    12fa:	77 24       	eor	r7, r7
	  return CDC_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint) || !(NotificationEndpoint))
	{
		if (!(CDCControlInterface) ||
    12fc:	41 14       	cp	r4, r1
    12fe:	51 04       	cpc	r5, r1
    1300:	39 f0       	breq	.+14     	; 0x1310 <CDC_Host_ConfigurePipes+0x8e>
    1302:	c8 01       	movw	r24, r16
    1304:	b7 01       	movw	r22, r14
    1306:	4b e2       	ldi	r20, 0x2B	; 43
    1308:	5a e0       	ldi	r21, 0x0A	; 10
    130a:	a5 dc       	rcall	.-1718   	; 0xc56 <USB_GetNextDescriptorComp>
    130c:	88 23       	and	r24, r24
    130e:	b1 f0       	breq	.+44     	; 0x133c <CDC_Host_ConfigurePipes+0xba>
		    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
		                              DCOMP_CDC_Host_NextCDCInterfaceEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			if (NotificationEndpoint)
    1310:	a1 14       	cp	r10, r1
    1312:	b1 04       	cpc	r11, r1
    1314:	41 f0       	breq	.+16     	; 0x1326 <CDC_Host_ConfigurePipes+0xa4>
			{
				if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    1316:	c8 01       	movw	r24, r16
    1318:	b7 01       	movw	r22, r14
    131a:	42 e4       	ldi	r20, 0x42	; 66
    131c:	58 e0       	ldi	r21, 0x08	; 8
    131e:	9b dc       	rcall	.-1738   	; 0xc56 <USB_GetNextDescriptorComp>
    1320:	88 23       	and	r24, r24
    1322:	41 f3       	breq	.-48     	; 0x12f4 <CDC_Host_ConfigurePipes+0x72>
    1324:	81 c0       	rjmp	.+258    	; 0x1428 <CDC_Host_ConfigurePipes+0x1a6>
				DataINEndpoint  = NULL;
				DataOUTEndpoint = NULL;
			}
			else
			{
				if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    1326:	c8 01       	movw	r24, r16
    1328:	b7 01       	movw	r22, r14
    132a:	41 e3       	ldi	r20, 0x31	; 49
    132c:	58 e0       	ldi	r21, 0x08	; 8
    132e:	93 dc       	rcall	.-1754   	; 0xc56 <USB_GetNextDescriptorComp>
    1330:	88 23       	and	r24, r24
    1332:	09 f0       	breq	.+2      	; 0x1336 <CDC_Host_ConfigurePipes+0xb4>
    1334:	79 c0       	rjmp	.+242    	; 0x1428 <CDC_Host_ConfigurePipes+0x1a6>
				                              DCOMP_CDC_Host_NextCDCControlInterface) != DESCRIPTOR_SEARCH_COMP_Found)
				{
					return CDC_ENUMERROR_NoCompatibleInterfaceFound;
				}

				CDCControlInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);
    1336:	4b 80       	ldd	r4, Y+3	; 0x03
    1338:	5c 80       	ldd	r5, Y+4	; 0x04
    133a:	0e c0       	rjmp	.+28     	; 0x1358 <CDC_Host_ConfigurePipes+0xd6>
			}

			continue;
		}

		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Endpoint_t);
    133c:	eb 81       	ldd	r30, Y+3	; 0x03
    133e:	fc 81       	ldd	r31, Y+4	; 0x04

		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
    1340:	82 81       	ldd	r24, Z+2	; 0x02
    1342:	87 fd       	sbrc	r24, 7
    1344:	02 c0       	rjmp	.+4      	; 0x134a <CDC_Host_ConfigurePipes+0xc8>
    1346:	4f 01       	movw	r8, r30
    1348:	07 c0       	rjmp	.+14     	; 0x1358 <CDC_Host_ConfigurePipes+0xd6>
		{
			if ((EndpointData->Attributes & EP_TYPE_MASK) == EP_TYPE_INTERRUPT)
    134a:	83 81       	ldd	r24, Z+3	; 0x03
    134c:	83 70       	andi	r24, 0x03	; 3
    134e:	83 30       	cpi	r24, 0x03	; 3
    1350:	11 f0       	breq	.+4      	; 0x1356 <CDC_Host_ConfigurePipes+0xd4>
    1352:	3f 01       	movw	r6, r30
    1354:	01 c0       	rjmp	.+2      	; 0x1358 <CDC_Host_ConfigurePipes+0xd6>
    1356:	5f 01       	movw	r10, r30
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return CDC_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint) || !(NotificationEndpoint))
    1358:	61 14       	cp	r6, r1
    135a:	71 04       	cpc	r7, r1
    135c:	79 f2       	breq	.-98     	; 0x12fc <CDC_Host_ConfigurePipes+0x7a>
    135e:	81 14       	cp	r8, r1
    1360:	91 04       	cpc	r9, r1
    1362:	61 f2       	breq	.-104    	; 0x12fc <CDC_Host_ConfigurePipes+0x7a>
    1364:	a1 14       	cp	r10, r1
    1366:	b1 04       	cpc	r11, r1
    1368:	49 f2       	breq	.-110    	; 0x12fc <CDC_Host_ConfigurePipes+0x7a>
    136a:	91 e0       	ldi	r25, 0x01	; 1
		uint8_t  Token;
		uint8_t  EndpointAddress;
		uint8_t  InterruptPeriod;
		bool     DoubleBanked;

		if (PipeNum == CDCInterfaceInfo->Config.DataINPipeNumber)
    136c:	f6 01       	movw	r30, r12
    136e:	80 81       	ld	r24, Z
    1370:	98 17       	cp	r25, r24
    1372:	69 f4       	brne	.+26     	; 0x138e <CDC_Host_ConfigurePipes+0x10c>
		{
			Size            = le16_to_cpu(DataINEndpoint->EndpointSize);
    1374:	d3 01       	movw	r26, r6
    1376:	14 96       	adiw	r26, 0x04	; 4
    1378:	0d 91       	ld	r16, X+
    137a:	1c 91       	ld	r17, X
    137c:	15 97       	sbiw	r26, 0x05	; 5
			EndpointAddress = DataINEndpoint->EndpointAddress;
    137e:	12 96       	adiw	r26, 0x02	; 2
    1380:	2c 91       	ld	r18, X
			Token           = PIPE_TOKEN_IN;
			Type            = EP_TYPE_BULK;
			DoubleBanked    = CDCInterfaceInfo->Config.DataINPipeDoubleBank;
    1382:	81 81       	ldd	r24, Z+1	; 0x01
			InterruptPeriod = 0;

			CDCInterfaceInfo->State.DataINPipeSize = DataINEndpoint->EndpointSize;
    1384:	11 87       	std	Z+9, r17	; 0x09
    1386:	00 87       	std	Z+8, r16	; 0x08
    1388:	62 e0       	ldi	r22, 0x02	; 2
    138a:	40 e1       	ldi	r20, 0x10	; 16
    138c:	10 c0       	rjmp	.+32     	; 0x13ae <CDC_Host_ConfigurePipes+0x12c>
		}
		else if (PipeNum == CDCInterfaceInfo->Config.DataOUTPipeNumber)
    138e:	f6 01       	movw	r30, r12
    1390:	82 81       	ldd	r24, Z+2	; 0x02
    1392:	98 17       	cp	r25, r24
    1394:	71 f4       	brne	.+28     	; 0x13b2 <CDC_Host_ConfigurePipes+0x130>
		{
			Size            = le16_to_cpu(DataOUTEndpoint->EndpointSize);
    1396:	d4 01       	movw	r26, r8
    1398:	14 96       	adiw	r26, 0x04	; 4
    139a:	0d 91       	ld	r16, X+
    139c:	1c 91       	ld	r17, X
    139e:	15 97       	sbiw	r26, 0x05	; 5
			EndpointAddress = DataOUTEndpoint->EndpointAddress;
    13a0:	12 96       	adiw	r26, 0x02	; 2
    13a2:	2c 91       	ld	r18, X
			Token           = PIPE_TOKEN_OUT;
			Type            = EP_TYPE_BULK;
			DoubleBanked    = CDCInterfaceInfo->Config.DataOUTPipeDoubleBank;
    13a4:	83 81       	ldd	r24, Z+3	; 0x03
			InterruptPeriod = 0;

			CDCInterfaceInfo->State.DataOUTPipeSize = DataOUTEndpoint->EndpointSize;
    13a6:	13 87       	std	Z+11, r17	; 0x0b
    13a8:	02 87       	std	Z+10, r16	; 0x0a
    13aa:	62 e0       	ldi	r22, 0x02	; 2
    13ac:	40 e2       	ldi	r20, 0x20	; 32
    13ae:	ff 24       	eor	r15, r15
    13b0:	13 c0       	rjmp	.+38     	; 0x13d8 <CDC_Host_ConfigurePipes+0x156>
		}
		else if (PipeNum == CDCInterfaceInfo->Config.NotificationPipeNumber)
    13b2:	f6 01       	movw	r30, r12
    13b4:	84 81       	ldd	r24, Z+4	; 0x04
    13b6:	98 17       	cp	r25, r24
    13b8:	09 f5       	brne	.+66     	; 0x13fc <CDC_Host_ConfigurePipes+0x17a>
		{
			Size            = le16_to_cpu(NotificationEndpoint->EndpointSize);
    13ba:	d5 01       	movw	r26, r10
    13bc:	14 96       	adiw	r26, 0x04	; 4
    13be:	0d 91       	ld	r16, X+
    13c0:	1c 91       	ld	r17, X
    13c2:	15 97       	sbiw	r26, 0x05	; 5
			EndpointAddress = NotificationEndpoint->EndpointAddress;
    13c4:	12 96       	adiw	r26, 0x02	; 2
    13c6:	2c 91       	ld	r18, X
    13c8:	12 97       	sbiw	r26, 0x02	; 2
			Token           = PIPE_TOKEN_IN;
			Type            = EP_TYPE_INTERRUPT;
			DoubleBanked    = CDCInterfaceInfo->Config.NotificationPipeDoubleBank;
    13ca:	85 81       	ldd	r24, Z+5	; 0x05
			InterruptPeriod = NotificationEndpoint->PollingIntervalMS;
    13cc:	16 96       	adiw	r26, 0x06	; 6
    13ce:	fc 90       	ld	r15, X

			CDCInterfaceInfo->State.NotificationPipeSize = NotificationEndpoint->EndpointSize;
    13d0:	15 87       	std	Z+13, r17	; 0x0d
    13d2:	04 87       	std	Z+12, r16	; 0x0c
    13d4:	63 e0       	ldi	r22, 0x03	; 3
    13d6:	40 e1       	ldi	r20, 0x10	; 16
		else
		{
			continue;
		}
		
		if (!(Pipe_ConfigurePipe(PipeNum, Type, Token, EndpointAddress, Size,
    13d8:	88 23       	and	r24, r24
    13da:	11 f4       	brne	.+4      	; 0x13e0 <CDC_Host_ConfigurePipes+0x15e>
    13dc:	30 e0       	ldi	r19, 0x00	; 0
    13de:	01 c0       	rjmp	.+2      	; 0x13e2 <CDC_Host_ConfigurePipes+0x160>
    13e0:	34 e0       	ldi	r19, 0x04	; 4
    13e2:	89 2f       	mov	r24, r25
    13e4:	e3 2e       	mov	r14, r19
    13e6:	9d 83       	std	Y+5, r25	; 0x05
    13e8:	0b da       	rcall	.-3050   	; 0x800 <Pipe_ConfigurePipe>
    13ea:	9d 81       	ldd	r25, Y+5	; 0x05
    13ec:	88 23       	and	r24, r24
    13ee:	11 f4       	brne	.+4      	; 0x13f4 <CDC_Host_ConfigurePipes+0x172>
    13f0:	83 e0       	ldi	r24, 0x03	; 3
    13f2:	1b c0       	rjmp	.+54     	; 0x142a <CDC_Host_ConfigurePipes+0x1a8>
		                         DoubleBanked ? PIPE_BANK_DOUBLE : PIPE_BANK_SINGLE)))
		{
			return CDC_ENUMERROR_PipeConfigurationFailed;
		}
		
		if (InterruptPeriod)
    13f4:	ff 20       	and	r15, r15
    13f6:	11 f0       	breq	.+4      	; 0x13fc <CDC_Host_ConfigurePipes+0x17a>
			 *  \param[in] Milliseconds  Number of milliseconds between each pipe poll.
			 */
			static inline void Pipe_SetInterruptPeriod(const uint8_t Milliseconds) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInterruptPeriod(const uint8_t Milliseconds)
			{
				UPCFG2X = Milliseconds;
    13f8:	f0 92 ad 00 	sts	0x00AD, r15
		{
			DataOUTEndpoint = EndpointData;
		}
	}

	for (uint8_t PipeNum = 1; PipeNum < PIPE_TOTAL_PIPES; PipeNum++)
    13fc:	9f 5f       	subi	r25, 0xFF	; 255
    13fe:	97 30       	cpi	r25, 0x07	; 7
    1400:	09 f0       	breq	.+2      	; 0x1404 <CDC_Host_ConfigurePipes+0x182>
    1402:	b4 cf       	rjmp	.-152    	; 0x136c <CDC_Host_ConfigurePipes+0xea>
		
		if (InterruptPeriod)
		  Pipe_SetInterruptPeriod(InterruptPeriod);
	}

	CDCInterfaceInfo->State.ControlInterfaceNumber = CDCControlInterface->InterfaceNumber;
    1404:	f2 01       	movw	r30, r4
    1406:	82 81       	ldd	r24, Z+2	; 0x02
    1408:	d6 01       	movw	r26, r12
    140a:	17 96       	adiw	r26, 0x07	; 7
    140c:	8c 93       	st	X, r24
    140e:	17 97       	sbiw	r26, 0x07	; 7
	CDCInterfaceInfo->State.ControlLineStates.HostToDevice = (CDC_CONTROL_LINE_OUT_RTS | CDC_CONTROL_LINE_OUT_DTR);
    1410:	83 e0       	ldi	r24, 0x03	; 3
    1412:	1e 96       	adiw	r26, 0x0e	; 14
    1414:	8c 93       	st	X, r24
    1416:	1e 97       	sbiw	r26, 0x0e	; 14
	CDCInterfaceInfo->State.ControlLineStates.DeviceToHost = (CDC_CONTROL_LINE_IN_DCD  | CDC_CONTROL_LINE_IN_DSR);
    1418:	1f 96       	adiw	r26, 0x0f	; 15
    141a:	8c 93       	st	X, r24
    141c:	1f 97       	sbiw	r26, 0x0f	; 15
	CDCInterfaceInfo->State.IsActive = true;
    141e:	81 e0       	ldi	r24, 0x01	; 1
    1420:	16 96       	adiw	r26, 0x06	; 6
    1422:	8c 93       	st	X, r24
    1424:	80 e0       	ldi	r24, 0x00	; 0
    1426:	01 c0       	rjmp	.+2      	; 0x142a <CDC_Host_ConfigurePipes+0x1a8>

	return CDC_ENUMERROR_NoError;
    1428:	82 e0       	ldi	r24, 0x02	; 2
}
    142a:	0f 90       	pop	r0
    142c:	0f 90       	pop	r0
    142e:	0f 90       	pop	r0
    1430:	0f 90       	pop	r0
    1432:	0f 90       	pop	r0
    1434:	cf 91       	pop	r28
    1436:	df 91       	pop	r29
    1438:	1f 91       	pop	r17
    143a:	0f 91       	pop	r16
    143c:	ff 90       	pop	r15
    143e:	ef 90       	pop	r14
    1440:	df 90       	pop	r13
    1442:	cf 90       	pop	r12
    1444:	bf 90       	pop	r11
    1446:	af 90       	pop	r10
    1448:	9f 90       	pop	r9
    144a:	8f 90       	pop	r8
    144c:	7f 90       	pop	r7
    144e:	6f 90       	pop	r6
    1450:	5f 90       	pop	r5
    1452:	4f 90       	pop	r4
    1454:	08 95       	ret

00001456 <DCOMP_CDC_Host_NextCDCInterfaceEndpoint>:

	return DESCRIPTOR_SEARCH_NotFound;
}

static uint8_t DCOMP_CDC_Host_NextCDCInterfaceEndpoint(void* const CurrentDescriptor)
{
    1456:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Endpoint)
    1458:	81 81       	ldd	r24, Z+1	; 0x01
    145a:	85 30       	cpi	r24, 0x05	; 5
    145c:	51 f4       	brne	.+20     	; 0x1472 <DCOMP_CDC_Host_NextCDCInterfaceEndpoint+0x1c>
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		uint8_t EndpointType = (Endpoint->Attributes & EP_TYPE_MASK);

		if (((EndpointType == EP_TYPE_BULK) || (EndpointType == EP_TYPE_INTERRUPT)) &&
    145e:	83 81       	ldd	r24, Z+3	; 0x03
    1460:	83 70       	andi	r24, 0x03	; 3
    1462:	82 50       	subi	r24, 0x02	; 2
    1464:	82 30       	cpi	r24, 0x02	; 2
    1466:	48 f4       	brcc	.+18     	; 0x147a <DCOMP_CDC_Host_NextCDCInterfaceEndpoint+0x24>
    1468:	82 81       	ldd	r24, Z+2	; 0x02
    146a:	3c da       	rcall	.-2952   	; 0x8e4 <Pipe_IsEndpointBound>
    146c:	88 23       	and	r24, r24
    146e:	29 f4       	brne	.+10     	; 0x147a <DCOMP_CDC_Host_NextCDCInterfaceEndpoint+0x24>
    1470:	08 95       	ret
		    !(Pipe_IsEndpointBound(Endpoint->EndpointAddress)))
		{
			return DESCRIPTOR_SEARCH_Found;
		}
	}
	else if (Header->Type == DTYPE_Interface)
    1472:	84 30       	cpi	r24, 0x04	; 4
    1474:	11 f4       	brne	.+4      	; 0x147a <DCOMP_CDC_Host_NextCDCInterfaceEndpoint+0x24>
    1476:	81 e0       	ldi	r24, 0x01	; 1
    1478:	08 95       	ret
    147a:	82 e0       	ldi	r24, 0x02	; 2
	{
		return DESCRIPTOR_SEARCH_Fail;
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    147c:	08 95       	ret

0000147e <Serial_putchar>:

FILE USARTSerialStream;

int Serial_putchar(char DataByte,
                   FILE *Stream)
{
    147e:	98 2f       	mov	r25, r24
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
    1480:	80 91 c8 00 	lds	r24, 0x00C8
    1484:	85 ff       	sbrs	r24, 5
    1486:	fc cf       	rjmp	.-8      	; 0x1480 <Serial_putchar+0x2>
				UDR1 = DataByte;
    1488:	90 93 ce 00 	sts	0x00CE, r25
	(void)Stream;

	Serial_SendByte(DataByte);
	return 0;
}
    148c:	80 e0       	ldi	r24, 0x00	; 0
    148e:	90 e0       	ldi	r25, 0x00	; 0
    1490:	08 95       	ret

00001492 <Serial_getchar>:
			 *  \return Boolean \c true if a character has been received, \c false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    1492:	80 91 c8 00 	lds	r24, 0x00C8

int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    1496:	87 fd       	sbrc	r24, 7
    1498:	03 c0       	rjmp	.+6      	; 0x14a0 <Serial_getchar+0xe>
    149a:	2e ef       	ldi	r18, 0xFE	; 254
    149c:	3f ef       	ldi	r19, 0xFF	; 255
    149e:	0b c0       	rjmp	.+22     	; 0x14b6 <Serial_getchar+0x24>
    14a0:	80 91 c8 00 	lds	r24, 0x00C8
			 *  \return Next byte received from the USART, or a negative value if no byte has been received.
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
    14a4:	87 fd       	sbrc	r24, 7
    14a6:	03 c0       	rjmp	.+6      	; 0x14ae <Serial_getchar+0x1c>
    14a8:	2f ef       	ldi	r18, 0xFF	; 255
    14aa:	3f ef       	ldi	r19, 0xFF	; 255
    14ac:	04 c0       	rjmp	.+8      	; 0x14b6 <Serial_getchar+0x24>
				  return -1;
				
				return UDR1;
    14ae:	80 91 ce 00 	lds	r24, 0x00CE
    14b2:	28 2f       	mov	r18, r24
    14b4:	30 e0       	ldi	r19, 0x00	; 0
	  return _FDEV_EOF;

	return Serial_ReceiveByte();
}
    14b6:	c9 01       	movw	r24, r18
    14b8:	08 95       	ret

000014ba <fputc>:
    14ba:	0f 93       	push	r16
    14bc:	1f 93       	push	r17
    14be:	cf 93       	push	r28
    14c0:	df 93       	push	r29
    14c2:	8c 01       	movw	r16, r24
    14c4:	eb 01       	movw	r28, r22
    14c6:	8b 81       	ldd	r24, Y+3	; 0x03
    14c8:	81 ff       	sbrs	r24, 1
    14ca:	1b c0       	rjmp	.+54     	; 0x1502 <fputc+0x48>
    14cc:	82 ff       	sbrs	r24, 2
    14ce:	0d c0       	rjmp	.+26     	; 0x14ea <fputc+0x30>
    14d0:	2e 81       	ldd	r18, Y+6	; 0x06
    14d2:	3f 81       	ldd	r19, Y+7	; 0x07
    14d4:	8c 81       	ldd	r24, Y+4	; 0x04
    14d6:	9d 81       	ldd	r25, Y+5	; 0x05
    14d8:	28 17       	cp	r18, r24
    14da:	39 07       	cpc	r19, r25
    14dc:	64 f4       	brge	.+24     	; 0x14f6 <fputc+0x3c>
    14de:	e8 81       	ld	r30, Y
    14e0:	f9 81       	ldd	r31, Y+1	; 0x01
    14e2:	01 93       	st	Z+, r16
    14e4:	f9 83       	std	Y+1, r31	; 0x01
    14e6:	e8 83       	st	Y, r30
    14e8:	06 c0       	rjmp	.+12     	; 0x14f6 <fputc+0x3c>
    14ea:	e8 85       	ldd	r30, Y+8	; 0x08
    14ec:	f9 85       	ldd	r31, Y+9	; 0x09
    14ee:	80 2f       	mov	r24, r16
    14f0:	09 95       	icall
    14f2:	89 2b       	or	r24, r25
    14f4:	31 f4       	brne	.+12     	; 0x1502 <fputc+0x48>
    14f6:	8e 81       	ldd	r24, Y+6	; 0x06
    14f8:	9f 81       	ldd	r25, Y+7	; 0x07
    14fa:	01 96       	adiw	r24, 0x01	; 1
    14fc:	9f 83       	std	Y+7, r25	; 0x07
    14fe:	8e 83       	std	Y+6, r24	; 0x06
    1500:	02 c0       	rjmp	.+4      	; 0x1506 <fputc+0x4c>
    1502:	0f ef       	ldi	r16, 0xFF	; 255
    1504:	1f ef       	ldi	r17, 0xFF	; 255
    1506:	c8 01       	movw	r24, r16
    1508:	df 91       	pop	r29
    150a:	cf 91       	pop	r28
    150c:	1f 91       	pop	r17
    150e:	0f 91       	pop	r16
    1510:	08 95       	ret

00001512 <printf_P>:
    1512:	df 93       	push	r29
    1514:	cf 93       	push	r28
    1516:	cd b7       	in	r28, 0x3d	; 61
    1518:	de b7       	in	r29, 0x3e	; 62
    151a:	fe 01       	movw	r30, r28
    151c:	35 96       	adiw	r30, 0x05	; 5
    151e:	61 91       	ld	r22, Z+
    1520:	71 91       	ld	r23, Z+
    1522:	a0 91 46 01 	lds	r26, 0x0146
    1526:	b0 91 47 01 	lds	r27, 0x0147
    152a:	13 96       	adiw	r26, 0x03	; 3
    152c:	8c 91       	ld	r24, X
    152e:	13 97       	sbiw	r26, 0x03	; 3
    1530:	88 60       	ori	r24, 0x08	; 8
    1532:	13 96       	adiw	r26, 0x03	; 3
    1534:	8c 93       	st	X, r24
    1536:	80 91 46 01 	lds	r24, 0x0146
    153a:	90 91 47 01 	lds	r25, 0x0147
    153e:	af 01       	movw	r20, r30
    1540:	3f d0       	rcall	.+126    	; 0x15c0 <vfprintf>
    1542:	e0 91 46 01 	lds	r30, 0x0146
    1546:	f0 91 47 01 	lds	r31, 0x0147
    154a:	23 81       	ldd	r18, Z+3	; 0x03
    154c:	27 7f       	andi	r18, 0xF7	; 247
    154e:	23 83       	std	Z+3, r18	; 0x03
    1550:	cf 91       	pop	r28
    1552:	df 91       	pop	r29
    1554:	08 95       	ret

00001556 <puts_P>:
    1556:	0f 93       	push	r16
    1558:	1f 93       	push	r17
    155a:	cf 93       	push	r28
    155c:	df 93       	push	r29
    155e:	ec 01       	movw	r28, r24
    1560:	e0 91 46 01 	lds	r30, 0x0146
    1564:	f0 91 47 01 	lds	r31, 0x0147
    1568:	83 81       	ldd	r24, Z+3	; 0x03
    156a:	81 ff       	sbrs	r24, 1
    156c:	21 c0       	rjmp	.+66     	; 0x15b0 <puts_P+0x5a>
    156e:	00 e0       	ldi	r16, 0x00	; 0
    1570:	10 e0       	ldi	r17, 0x00	; 0
    1572:	0e c0       	rjmp	.+28     	; 0x1590 <puts_P+0x3a>
    1574:	e0 91 46 01 	lds	r30, 0x0146
    1578:	f0 91 47 01 	lds	r31, 0x0147
    157c:	20 85       	ldd	r18, Z+8	; 0x08
    157e:	31 85       	ldd	r19, Z+9	; 0x09
    1580:	bf 01       	movw	r22, r30
    1582:	f9 01       	movw	r30, r18
    1584:	09 95       	icall
    1586:	89 2b       	or	r24, r25
    1588:	11 f0       	breq	.+4      	; 0x158e <puts_P+0x38>
    158a:	0f ef       	ldi	r16, 0xFF	; 255
    158c:	1f ef       	ldi	r17, 0xFF	; 255
    158e:	21 96       	adiw	r28, 0x01	; 1
    1590:	fe 01       	movw	r30, r28
    1592:	84 91       	lpm	r24, Z+
    1594:	88 23       	and	r24, r24
    1596:	71 f7       	brne	.-36     	; 0x1574 <puts_P+0x1e>
    1598:	e0 91 46 01 	lds	r30, 0x0146
    159c:	f0 91 47 01 	lds	r31, 0x0147
    15a0:	20 85       	ldd	r18, Z+8	; 0x08
    15a2:	31 85       	ldd	r19, Z+9	; 0x09
    15a4:	8a e0       	ldi	r24, 0x0A	; 10
    15a6:	bf 01       	movw	r22, r30
    15a8:	f9 01       	movw	r30, r18
    15aa:	09 95       	icall
    15ac:	89 2b       	or	r24, r25
    15ae:	11 f0       	breq	.+4      	; 0x15b4 <puts_P+0x5e>
    15b0:	0f ef       	ldi	r16, 0xFF	; 255
    15b2:	1f ef       	ldi	r17, 0xFF	; 255
    15b4:	c8 01       	movw	r24, r16
    15b6:	df 91       	pop	r29
    15b8:	cf 91       	pop	r28
    15ba:	1f 91       	pop	r17
    15bc:	0f 91       	pop	r16
    15be:	08 95       	ret

000015c0 <vfprintf>:
    15c0:	2f 92       	push	r2
    15c2:	3f 92       	push	r3
    15c4:	4f 92       	push	r4
    15c6:	5f 92       	push	r5
    15c8:	6f 92       	push	r6
    15ca:	7f 92       	push	r7
    15cc:	8f 92       	push	r8
    15ce:	9f 92       	push	r9
    15d0:	af 92       	push	r10
    15d2:	bf 92       	push	r11
    15d4:	cf 92       	push	r12
    15d6:	df 92       	push	r13
    15d8:	ef 92       	push	r14
    15da:	ff 92       	push	r15
    15dc:	0f 93       	push	r16
    15de:	1f 93       	push	r17
    15e0:	df 93       	push	r29
    15e2:	cf 93       	push	r28
    15e4:	cd b7       	in	r28, 0x3d	; 61
    15e6:	de b7       	in	r29, 0x3e	; 62
    15e8:	2b 97       	sbiw	r28, 0x0b	; 11
    15ea:	0f b6       	in	r0, 0x3f	; 63
    15ec:	f8 94       	cli
    15ee:	de bf       	out	0x3e, r29	; 62
    15f0:	0f be       	out	0x3f, r0	; 63
    15f2:	cd bf       	out	0x3d, r28	; 61
    15f4:	3c 01       	movw	r6, r24
    15f6:	2b 01       	movw	r4, r22
    15f8:	5a 01       	movw	r10, r20
    15fa:	fc 01       	movw	r30, r24
    15fc:	17 82       	std	Z+7, r1	; 0x07
    15fe:	16 82       	std	Z+6, r1	; 0x06
    1600:	83 81       	ldd	r24, Z+3	; 0x03
    1602:	81 fd       	sbrc	r24, 1
    1604:	03 c0       	rjmp	.+6      	; 0x160c <vfprintf+0x4c>
    1606:	6f ef       	ldi	r22, 0xFF	; 255
    1608:	7f ef       	ldi	r23, 0xFF	; 255
    160a:	b9 c1       	rjmp	.+882    	; 0x197e <vfprintf+0x3be>
    160c:	9a e0       	ldi	r25, 0x0A	; 10
    160e:	89 2e       	mov	r8, r25
    1610:	1e 01       	movw	r2, r28
    1612:	08 94       	sec
    1614:	21 1c       	adc	r2, r1
    1616:	31 1c       	adc	r3, r1
    1618:	f3 01       	movw	r30, r6
    161a:	23 81       	ldd	r18, Z+3	; 0x03
    161c:	f2 01       	movw	r30, r4
    161e:	23 fd       	sbrc	r18, 3
    1620:	85 91       	lpm	r24, Z+
    1622:	23 ff       	sbrs	r18, 3
    1624:	81 91       	ld	r24, Z+
    1626:	2f 01       	movw	r4, r30
    1628:	88 23       	and	r24, r24
    162a:	09 f4       	brne	.+2      	; 0x162e <vfprintf+0x6e>
    162c:	a5 c1       	rjmp	.+842    	; 0x1978 <vfprintf+0x3b8>
    162e:	85 32       	cpi	r24, 0x25	; 37
    1630:	39 f4       	brne	.+14     	; 0x1640 <vfprintf+0x80>
    1632:	23 fd       	sbrc	r18, 3
    1634:	85 91       	lpm	r24, Z+
    1636:	23 ff       	sbrs	r18, 3
    1638:	81 91       	ld	r24, Z+
    163a:	2f 01       	movw	r4, r30
    163c:	85 32       	cpi	r24, 0x25	; 37
    163e:	21 f4       	brne	.+8      	; 0x1648 <vfprintf+0x88>
    1640:	90 e0       	ldi	r25, 0x00	; 0
    1642:	b3 01       	movw	r22, r6
    1644:	3a df       	rcall	.-396    	; 0x14ba <fputc>
    1646:	e8 cf       	rjmp	.-48     	; 0x1618 <vfprintf+0x58>
    1648:	98 2f       	mov	r25, r24
    164a:	ff 24       	eor	r15, r15
    164c:	ee 24       	eor	r14, r14
    164e:	99 24       	eor	r9, r9
    1650:	ff e1       	ldi	r31, 0x1F	; 31
    1652:	ff 15       	cp	r31, r15
    1654:	d0 f0       	brcs	.+52     	; 0x168a <vfprintf+0xca>
    1656:	9b 32       	cpi	r25, 0x2B	; 43
    1658:	69 f0       	breq	.+26     	; 0x1674 <vfprintf+0xb4>
    165a:	9c 32       	cpi	r25, 0x2C	; 44
    165c:	28 f4       	brcc	.+10     	; 0x1668 <vfprintf+0xa8>
    165e:	90 32       	cpi	r25, 0x20	; 32
    1660:	59 f0       	breq	.+22     	; 0x1678 <vfprintf+0xb8>
    1662:	93 32       	cpi	r25, 0x23	; 35
    1664:	91 f4       	brne	.+36     	; 0x168a <vfprintf+0xca>
    1666:	0e c0       	rjmp	.+28     	; 0x1684 <vfprintf+0xc4>
    1668:	9d 32       	cpi	r25, 0x2D	; 45
    166a:	49 f0       	breq	.+18     	; 0x167e <vfprintf+0xbe>
    166c:	90 33       	cpi	r25, 0x30	; 48
    166e:	69 f4       	brne	.+26     	; 0x168a <vfprintf+0xca>
    1670:	41 e0       	ldi	r20, 0x01	; 1
    1672:	24 c0       	rjmp	.+72     	; 0x16bc <vfprintf+0xfc>
    1674:	52 e0       	ldi	r21, 0x02	; 2
    1676:	f5 2a       	or	r15, r21
    1678:	84 e0       	ldi	r24, 0x04	; 4
    167a:	f8 2a       	or	r15, r24
    167c:	28 c0       	rjmp	.+80     	; 0x16ce <vfprintf+0x10e>
    167e:	98 e0       	ldi	r25, 0x08	; 8
    1680:	f9 2a       	or	r15, r25
    1682:	25 c0       	rjmp	.+74     	; 0x16ce <vfprintf+0x10e>
    1684:	e0 e1       	ldi	r30, 0x10	; 16
    1686:	fe 2a       	or	r15, r30
    1688:	22 c0       	rjmp	.+68     	; 0x16ce <vfprintf+0x10e>
    168a:	f7 fc       	sbrc	r15, 7
    168c:	29 c0       	rjmp	.+82     	; 0x16e0 <vfprintf+0x120>
    168e:	89 2f       	mov	r24, r25
    1690:	80 53       	subi	r24, 0x30	; 48
    1692:	8a 30       	cpi	r24, 0x0A	; 10
    1694:	70 f4       	brcc	.+28     	; 0x16b2 <vfprintf+0xf2>
    1696:	f6 fe       	sbrs	r15, 6
    1698:	05 c0       	rjmp	.+10     	; 0x16a4 <vfprintf+0xe4>
    169a:	98 9c       	mul	r9, r8
    169c:	90 2c       	mov	r9, r0
    169e:	11 24       	eor	r1, r1
    16a0:	98 0e       	add	r9, r24
    16a2:	15 c0       	rjmp	.+42     	; 0x16ce <vfprintf+0x10e>
    16a4:	e8 9c       	mul	r14, r8
    16a6:	e0 2c       	mov	r14, r0
    16a8:	11 24       	eor	r1, r1
    16aa:	e8 0e       	add	r14, r24
    16ac:	f0 e2       	ldi	r31, 0x20	; 32
    16ae:	ff 2a       	or	r15, r31
    16b0:	0e c0       	rjmp	.+28     	; 0x16ce <vfprintf+0x10e>
    16b2:	9e 32       	cpi	r25, 0x2E	; 46
    16b4:	29 f4       	brne	.+10     	; 0x16c0 <vfprintf+0x100>
    16b6:	f6 fc       	sbrc	r15, 6
    16b8:	5f c1       	rjmp	.+702    	; 0x1978 <vfprintf+0x3b8>
    16ba:	40 e4       	ldi	r20, 0x40	; 64
    16bc:	f4 2a       	or	r15, r20
    16be:	07 c0       	rjmp	.+14     	; 0x16ce <vfprintf+0x10e>
    16c0:	9c 36       	cpi	r25, 0x6C	; 108
    16c2:	19 f4       	brne	.+6      	; 0x16ca <vfprintf+0x10a>
    16c4:	50 e8       	ldi	r21, 0x80	; 128
    16c6:	f5 2a       	or	r15, r21
    16c8:	02 c0       	rjmp	.+4      	; 0x16ce <vfprintf+0x10e>
    16ca:	98 36       	cpi	r25, 0x68	; 104
    16cc:	49 f4       	brne	.+18     	; 0x16e0 <vfprintf+0x120>
    16ce:	f2 01       	movw	r30, r4
    16d0:	23 fd       	sbrc	r18, 3
    16d2:	95 91       	lpm	r25, Z+
    16d4:	23 ff       	sbrs	r18, 3
    16d6:	91 91       	ld	r25, Z+
    16d8:	2f 01       	movw	r4, r30
    16da:	99 23       	and	r25, r25
    16dc:	09 f0       	breq	.+2      	; 0x16e0 <vfprintf+0x120>
    16de:	b8 cf       	rjmp	.-144    	; 0x1650 <vfprintf+0x90>
    16e0:	89 2f       	mov	r24, r25
    16e2:	85 54       	subi	r24, 0x45	; 69
    16e4:	83 30       	cpi	r24, 0x03	; 3
    16e6:	18 f0       	brcs	.+6      	; 0x16ee <vfprintf+0x12e>
    16e8:	80 52       	subi	r24, 0x20	; 32
    16ea:	83 30       	cpi	r24, 0x03	; 3
    16ec:	38 f4       	brcc	.+14     	; 0x16fc <vfprintf+0x13c>
    16ee:	44 e0       	ldi	r20, 0x04	; 4
    16f0:	50 e0       	ldi	r21, 0x00	; 0
    16f2:	a4 0e       	add	r10, r20
    16f4:	b5 1e       	adc	r11, r21
    16f6:	5f e3       	ldi	r21, 0x3F	; 63
    16f8:	59 83       	std	Y+1, r21	; 0x01
    16fa:	0f c0       	rjmp	.+30     	; 0x171a <vfprintf+0x15a>
    16fc:	93 36       	cpi	r25, 0x63	; 99
    16fe:	31 f0       	breq	.+12     	; 0x170c <vfprintf+0x14c>
    1700:	93 37       	cpi	r25, 0x73	; 115
    1702:	79 f0       	breq	.+30     	; 0x1722 <vfprintf+0x162>
    1704:	93 35       	cpi	r25, 0x53	; 83
    1706:	09 f0       	breq	.+2      	; 0x170a <vfprintf+0x14a>
    1708:	52 c0       	rjmp	.+164    	; 0x17ae <vfprintf+0x1ee>
    170a:	1f c0       	rjmp	.+62     	; 0x174a <vfprintf+0x18a>
    170c:	f5 01       	movw	r30, r10
    170e:	80 81       	ld	r24, Z
    1710:	89 83       	std	Y+1, r24	; 0x01
    1712:	42 e0       	ldi	r20, 0x02	; 2
    1714:	50 e0       	ldi	r21, 0x00	; 0
    1716:	a4 0e       	add	r10, r20
    1718:	b5 1e       	adc	r11, r21
    171a:	61 01       	movw	r12, r2
    171c:	01 e0       	ldi	r16, 0x01	; 1
    171e:	10 e0       	ldi	r17, 0x00	; 0
    1720:	11 c0       	rjmp	.+34     	; 0x1744 <vfprintf+0x184>
    1722:	f5 01       	movw	r30, r10
    1724:	c0 80       	ld	r12, Z
    1726:	d1 80       	ldd	r13, Z+1	; 0x01
    1728:	f6 fc       	sbrc	r15, 6
    172a:	03 c0       	rjmp	.+6      	; 0x1732 <vfprintf+0x172>
    172c:	6f ef       	ldi	r22, 0xFF	; 255
    172e:	7f ef       	ldi	r23, 0xFF	; 255
    1730:	02 c0       	rjmp	.+4      	; 0x1736 <vfprintf+0x176>
    1732:	69 2d       	mov	r22, r9
    1734:	70 e0       	ldi	r23, 0x00	; 0
    1736:	42 e0       	ldi	r20, 0x02	; 2
    1738:	50 e0       	ldi	r21, 0x00	; 0
    173a:	a4 0e       	add	r10, r20
    173c:	b5 1e       	adc	r11, r21
    173e:	c6 01       	movw	r24, r12
    1740:	43 d1       	rcall	.+646    	; 0x19c8 <strnlen>
    1742:	8c 01       	movw	r16, r24
    1744:	5f e7       	ldi	r21, 0x7F	; 127
    1746:	f5 22       	and	r15, r21
    1748:	13 c0       	rjmp	.+38     	; 0x1770 <vfprintf+0x1b0>
    174a:	f5 01       	movw	r30, r10
    174c:	c0 80       	ld	r12, Z
    174e:	d1 80       	ldd	r13, Z+1	; 0x01
    1750:	f6 fc       	sbrc	r15, 6
    1752:	03 c0       	rjmp	.+6      	; 0x175a <vfprintf+0x19a>
    1754:	6f ef       	ldi	r22, 0xFF	; 255
    1756:	7f ef       	ldi	r23, 0xFF	; 255
    1758:	02 c0       	rjmp	.+4      	; 0x175e <vfprintf+0x19e>
    175a:	69 2d       	mov	r22, r9
    175c:	70 e0       	ldi	r23, 0x00	; 0
    175e:	42 e0       	ldi	r20, 0x02	; 2
    1760:	50 e0       	ldi	r21, 0x00	; 0
    1762:	a4 0e       	add	r10, r20
    1764:	b5 1e       	adc	r11, r21
    1766:	c6 01       	movw	r24, r12
    1768:	24 d1       	rcall	.+584    	; 0x19b2 <strnlen_P>
    176a:	8c 01       	movw	r16, r24
    176c:	50 e8       	ldi	r21, 0x80	; 128
    176e:	f5 2a       	or	r15, r21
    1770:	f3 fe       	sbrs	r15, 3
    1772:	06 c0       	rjmp	.+12     	; 0x1780 <vfprintf+0x1c0>
    1774:	18 c0       	rjmp	.+48     	; 0x17a6 <vfprintf+0x1e6>
    1776:	80 e2       	ldi	r24, 0x20	; 32
    1778:	90 e0       	ldi	r25, 0x00	; 0
    177a:	b3 01       	movw	r22, r6
    177c:	9e de       	rcall	.-708    	; 0x14ba <fputc>
    177e:	ea 94       	dec	r14
    1780:	8e 2d       	mov	r24, r14
    1782:	90 e0       	ldi	r25, 0x00	; 0
    1784:	08 17       	cp	r16, r24
    1786:	19 07       	cpc	r17, r25
    1788:	b0 f3       	brcs	.-20     	; 0x1776 <vfprintf+0x1b6>
    178a:	0d c0       	rjmp	.+26     	; 0x17a6 <vfprintf+0x1e6>
    178c:	f6 01       	movw	r30, r12
    178e:	f7 fc       	sbrc	r15, 7
    1790:	85 91       	lpm	r24, Z+
    1792:	f7 fe       	sbrs	r15, 7
    1794:	81 91       	ld	r24, Z+
    1796:	6f 01       	movw	r12, r30
    1798:	90 e0       	ldi	r25, 0x00	; 0
    179a:	b3 01       	movw	r22, r6
    179c:	8e de       	rcall	.-740    	; 0x14ba <fputc>
    179e:	e1 10       	cpse	r14, r1
    17a0:	ea 94       	dec	r14
    17a2:	01 50       	subi	r16, 0x01	; 1
    17a4:	10 40       	sbci	r17, 0x00	; 0
    17a6:	01 15       	cp	r16, r1
    17a8:	11 05       	cpc	r17, r1
    17aa:	81 f7       	brne	.-32     	; 0x178c <vfprintf+0x1cc>
    17ac:	e2 c0       	rjmp	.+452    	; 0x1972 <vfprintf+0x3b2>
    17ae:	94 36       	cpi	r25, 0x64	; 100
    17b0:	11 f0       	breq	.+4      	; 0x17b6 <vfprintf+0x1f6>
    17b2:	99 36       	cpi	r25, 0x69	; 105
    17b4:	61 f5       	brne	.+88     	; 0x180e <vfprintf+0x24e>
    17b6:	f7 fe       	sbrs	r15, 7
    17b8:	08 c0       	rjmp	.+16     	; 0x17ca <vfprintf+0x20a>
    17ba:	f5 01       	movw	r30, r10
    17bc:	20 81       	ld	r18, Z
    17be:	31 81       	ldd	r19, Z+1	; 0x01
    17c0:	42 81       	ldd	r20, Z+2	; 0x02
    17c2:	53 81       	ldd	r21, Z+3	; 0x03
    17c4:	84 e0       	ldi	r24, 0x04	; 4
    17c6:	90 e0       	ldi	r25, 0x00	; 0
    17c8:	0a c0       	rjmp	.+20     	; 0x17de <vfprintf+0x21e>
    17ca:	f5 01       	movw	r30, r10
    17cc:	80 81       	ld	r24, Z
    17ce:	91 81       	ldd	r25, Z+1	; 0x01
    17d0:	9c 01       	movw	r18, r24
    17d2:	44 27       	eor	r20, r20
    17d4:	37 fd       	sbrc	r19, 7
    17d6:	40 95       	com	r20
    17d8:	54 2f       	mov	r21, r20
    17da:	82 e0       	ldi	r24, 0x02	; 2
    17dc:	90 e0       	ldi	r25, 0x00	; 0
    17de:	a8 0e       	add	r10, r24
    17e0:	b9 1e       	adc	r11, r25
    17e2:	9f e6       	ldi	r25, 0x6F	; 111
    17e4:	f9 22       	and	r15, r25
    17e6:	57 ff       	sbrs	r21, 7
    17e8:	09 c0       	rjmp	.+18     	; 0x17fc <vfprintf+0x23c>
    17ea:	50 95       	com	r21
    17ec:	40 95       	com	r20
    17ee:	30 95       	com	r19
    17f0:	21 95       	neg	r18
    17f2:	3f 4f       	sbci	r19, 0xFF	; 255
    17f4:	4f 4f       	sbci	r20, 0xFF	; 255
    17f6:	5f 4f       	sbci	r21, 0xFF	; 255
    17f8:	e0 e8       	ldi	r30, 0x80	; 128
    17fa:	fe 2a       	or	r15, r30
    17fc:	ca 01       	movw	r24, r20
    17fe:	b9 01       	movw	r22, r18
    1800:	a1 01       	movw	r20, r2
    1802:	2a e0       	ldi	r18, 0x0A	; 10
    1804:	30 e0       	ldi	r19, 0x00	; 0
    1806:	eb d0       	rcall	.+470    	; 0x19de <__ultoa_invert>
    1808:	d8 2e       	mov	r13, r24
    180a:	d2 18       	sub	r13, r2
    180c:	3f c0       	rjmp	.+126    	; 0x188c <vfprintf+0x2cc>
    180e:	95 37       	cpi	r25, 0x75	; 117
    1810:	29 f4       	brne	.+10     	; 0x181c <vfprintf+0x25c>
    1812:	1f 2d       	mov	r17, r15
    1814:	1f 7e       	andi	r17, 0xEF	; 239
    1816:	2a e0       	ldi	r18, 0x0A	; 10
    1818:	30 e0       	ldi	r19, 0x00	; 0
    181a:	1d c0       	rjmp	.+58     	; 0x1856 <vfprintf+0x296>
    181c:	1f 2d       	mov	r17, r15
    181e:	19 7f       	andi	r17, 0xF9	; 249
    1820:	9f 36       	cpi	r25, 0x6F	; 111
    1822:	61 f0       	breq	.+24     	; 0x183c <vfprintf+0x27c>
    1824:	90 37       	cpi	r25, 0x70	; 112
    1826:	20 f4       	brcc	.+8      	; 0x1830 <vfprintf+0x270>
    1828:	98 35       	cpi	r25, 0x58	; 88
    182a:	09 f0       	breq	.+2      	; 0x182e <vfprintf+0x26e>
    182c:	a5 c0       	rjmp	.+330    	; 0x1978 <vfprintf+0x3b8>
    182e:	0f c0       	rjmp	.+30     	; 0x184e <vfprintf+0x28e>
    1830:	90 37       	cpi	r25, 0x70	; 112
    1832:	39 f0       	breq	.+14     	; 0x1842 <vfprintf+0x282>
    1834:	98 37       	cpi	r25, 0x78	; 120
    1836:	09 f0       	breq	.+2      	; 0x183a <vfprintf+0x27a>
    1838:	9f c0       	rjmp	.+318    	; 0x1978 <vfprintf+0x3b8>
    183a:	04 c0       	rjmp	.+8      	; 0x1844 <vfprintf+0x284>
    183c:	28 e0       	ldi	r18, 0x08	; 8
    183e:	30 e0       	ldi	r19, 0x00	; 0
    1840:	0a c0       	rjmp	.+20     	; 0x1856 <vfprintf+0x296>
    1842:	10 61       	ori	r17, 0x10	; 16
    1844:	14 fd       	sbrc	r17, 4
    1846:	14 60       	ori	r17, 0x04	; 4
    1848:	20 e1       	ldi	r18, 0x10	; 16
    184a:	30 e0       	ldi	r19, 0x00	; 0
    184c:	04 c0       	rjmp	.+8      	; 0x1856 <vfprintf+0x296>
    184e:	14 fd       	sbrc	r17, 4
    1850:	16 60       	ori	r17, 0x06	; 6
    1852:	20 e1       	ldi	r18, 0x10	; 16
    1854:	32 e0       	ldi	r19, 0x02	; 2
    1856:	17 ff       	sbrs	r17, 7
    1858:	08 c0       	rjmp	.+16     	; 0x186a <vfprintf+0x2aa>
    185a:	f5 01       	movw	r30, r10
    185c:	60 81       	ld	r22, Z
    185e:	71 81       	ldd	r23, Z+1	; 0x01
    1860:	82 81       	ldd	r24, Z+2	; 0x02
    1862:	93 81       	ldd	r25, Z+3	; 0x03
    1864:	44 e0       	ldi	r20, 0x04	; 4
    1866:	50 e0       	ldi	r21, 0x00	; 0
    1868:	08 c0       	rjmp	.+16     	; 0x187a <vfprintf+0x2ba>
    186a:	f5 01       	movw	r30, r10
    186c:	80 81       	ld	r24, Z
    186e:	91 81       	ldd	r25, Z+1	; 0x01
    1870:	bc 01       	movw	r22, r24
    1872:	80 e0       	ldi	r24, 0x00	; 0
    1874:	90 e0       	ldi	r25, 0x00	; 0
    1876:	42 e0       	ldi	r20, 0x02	; 2
    1878:	50 e0       	ldi	r21, 0x00	; 0
    187a:	a4 0e       	add	r10, r20
    187c:	b5 1e       	adc	r11, r21
    187e:	a1 01       	movw	r20, r2
    1880:	ae d0       	rcall	.+348    	; 0x19de <__ultoa_invert>
    1882:	d8 2e       	mov	r13, r24
    1884:	d2 18       	sub	r13, r2
    1886:	8f e7       	ldi	r24, 0x7F	; 127
    1888:	f8 2e       	mov	r15, r24
    188a:	f1 22       	and	r15, r17
    188c:	f6 fe       	sbrs	r15, 6
    188e:	0b c0       	rjmp	.+22     	; 0x18a6 <vfprintf+0x2e6>
    1890:	5e ef       	ldi	r21, 0xFE	; 254
    1892:	f5 22       	and	r15, r21
    1894:	d9 14       	cp	r13, r9
    1896:	38 f4       	brcc	.+14     	; 0x18a6 <vfprintf+0x2e6>
    1898:	f4 fe       	sbrs	r15, 4
    189a:	07 c0       	rjmp	.+14     	; 0x18aa <vfprintf+0x2ea>
    189c:	f2 fc       	sbrc	r15, 2
    189e:	05 c0       	rjmp	.+10     	; 0x18aa <vfprintf+0x2ea>
    18a0:	8f ee       	ldi	r24, 0xEF	; 239
    18a2:	f8 22       	and	r15, r24
    18a4:	02 c0       	rjmp	.+4      	; 0x18aa <vfprintf+0x2ea>
    18a6:	1d 2d       	mov	r17, r13
    18a8:	01 c0       	rjmp	.+2      	; 0x18ac <vfprintf+0x2ec>
    18aa:	19 2d       	mov	r17, r9
    18ac:	f4 fe       	sbrs	r15, 4
    18ae:	0d c0       	rjmp	.+26     	; 0x18ca <vfprintf+0x30a>
    18b0:	fe 01       	movw	r30, r28
    18b2:	ed 0d       	add	r30, r13
    18b4:	f1 1d       	adc	r31, r1
    18b6:	80 81       	ld	r24, Z
    18b8:	80 33       	cpi	r24, 0x30	; 48
    18ba:	19 f4       	brne	.+6      	; 0x18c2 <vfprintf+0x302>
    18bc:	99 ee       	ldi	r25, 0xE9	; 233
    18be:	f9 22       	and	r15, r25
    18c0:	08 c0       	rjmp	.+16     	; 0x18d2 <vfprintf+0x312>
    18c2:	1f 5f       	subi	r17, 0xFF	; 255
    18c4:	f2 fe       	sbrs	r15, 2
    18c6:	05 c0       	rjmp	.+10     	; 0x18d2 <vfprintf+0x312>
    18c8:	03 c0       	rjmp	.+6      	; 0x18d0 <vfprintf+0x310>
    18ca:	8f 2d       	mov	r24, r15
    18cc:	86 78       	andi	r24, 0x86	; 134
    18ce:	09 f0       	breq	.+2      	; 0x18d2 <vfprintf+0x312>
    18d0:	1f 5f       	subi	r17, 0xFF	; 255
    18d2:	0f 2d       	mov	r16, r15
    18d4:	f3 fc       	sbrc	r15, 3
    18d6:	13 c0       	rjmp	.+38     	; 0x18fe <vfprintf+0x33e>
    18d8:	f0 fe       	sbrs	r15, 0
    18da:	0e c0       	rjmp	.+28     	; 0x18f8 <vfprintf+0x338>
    18dc:	1e 15       	cp	r17, r14
    18de:	10 f0       	brcs	.+4      	; 0x18e4 <vfprintf+0x324>
    18e0:	9d 2c       	mov	r9, r13
    18e2:	0a c0       	rjmp	.+20     	; 0x18f8 <vfprintf+0x338>
    18e4:	9d 2c       	mov	r9, r13
    18e6:	9e 0c       	add	r9, r14
    18e8:	91 1a       	sub	r9, r17
    18ea:	1e 2d       	mov	r17, r14
    18ec:	05 c0       	rjmp	.+10     	; 0x18f8 <vfprintf+0x338>
    18ee:	80 e2       	ldi	r24, 0x20	; 32
    18f0:	90 e0       	ldi	r25, 0x00	; 0
    18f2:	b3 01       	movw	r22, r6
    18f4:	e2 dd       	rcall	.-1084   	; 0x14ba <fputc>
    18f6:	1f 5f       	subi	r17, 0xFF	; 255
    18f8:	1e 15       	cp	r17, r14
    18fa:	c8 f3       	brcs	.-14     	; 0x18ee <vfprintf+0x32e>
    18fc:	04 c0       	rjmp	.+8      	; 0x1906 <vfprintf+0x346>
    18fe:	1e 15       	cp	r17, r14
    1900:	10 f4       	brcc	.+4      	; 0x1906 <vfprintf+0x346>
    1902:	e1 1a       	sub	r14, r17
    1904:	01 c0       	rjmp	.+2      	; 0x1908 <vfprintf+0x348>
    1906:	ee 24       	eor	r14, r14
    1908:	04 ff       	sbrs	r16, 4
    190a:	0e c0       	rjmp	.+28     	; 0x1928 <vfprintf+0x368>
    190c:	80 e3       	ldi	r24, 0x30	; 48
    190e:	90 e0       	ldi	r25, 0x00	; 0
    1910:	b3 01       	movw	r22, r6
    1912:	d3 dd       	rcall	.-1114   	; 0x14ba <fputc>
    1914:	02 ff       	sbrs	r16, 2
    1916:	1b c0       	rjmp	.+54     	; 0x194e <vfprintf+0x38e>
    1918:	01 fd       	sbrc	r16, 1
    191a:	03 c0       	rjmp	.+6      	; 0x1922 <vfprintf+0x362>
    191c:	88 e7       	ldi	r24, 0x78	; 120
    191e:	90 e0       	ldi	r25, 0x00	; 0
    1920:	0e c0       	rjmp	.+28     	; 0x193e <vfprintf+0x37e>
    1922:	88 e5       	ldi	r24, 0x58	; 88
    1924:	90 e0       	ldi	r25, 0x00	; 0
    1926:	0b c0       	rjmp	.+22     	; 0x193e <vfprintf+0x37e>
    1928:	80 2f       	mov	r24, r16
    192a:	86 78       	andi	r24, 0x86	; 134
    192c:	81 f0       	breq	.+32     	; 0x194e <vfprintf+0x38e>
    192e:	01 ff       	sbrs	r16, 1
    1930:	02 c0       	rjmp	.+4      	; 0x1936 <vfprintf+0x376>
    1932:	8b e2       	ldi	r24, 0x2B	; 43
    1934:	01 c0       	rjmp	.+2      	; 0x1938 <vfprintf+0x378>
    1936:	80 e2       	ldi	r24, 0x20	; 32
    1938:	f7 fc       	sbrc	r15, 7
    193a:	8d e2       	ldi	r24, 0x2D	; 45
    193c:	90 e0       	ldi	r25, 0x00	; 0
    193e:	b3 01       	movw	r22, r6
    1940:	bc dd       	rcall	.-1160   	; 0x14ba <fputc>
    1942:	05 c0       	rjmp	.+10     	; 0x194e <vfprintf+0x38e>
    1944:	80 e3       	ldi	r24, 0x30	; 48
    1946:	90 e0       	ldi	r25, 0x00	; 0
    1948:	b3 01       	movw	r22, r6
    194a:	b7 dd       	rcall	.-1170   	; 0x14ba <fputc>
    194c:	9a 94       	dec	r9
    194e:	d9 14       	cp	r13, r9
    1950:	c8 f3       	brcs	.-14     	; 0x1944 <vfprintf+0x384>
    1952:	da 94       	dec	r13
    1954:	f1 01       	movw	r30, r2
    1956:	ed 0d       	add	r30, r13
    1958:	f1 1d       	adc	r31, r1
    195a:	80 81       	ld	r24, Z
    195c:	90 e0       	ldi	r25, 0x00	; 0
    195e:	b3 01       	movw	r22, r6
    1960:	ac dd       	rcall	.-1192   	; 0x14ba <fputc>
    1962:	dd 20       	and	r13, r13
    1964:	b1 f7       	brne	.-20     	; 0x1952 <vfprintf+0x392>
    1966:	05 c0       	rjmp	.+10     	; 0x1972 <vfprintf+0x3b2>
    1968:	80 e2       	ldi	r24, 0x20	; 32
    196a:	90 e0       	ldi	r25, 0x00	; 0
    196c:	b3 01       	movw	r22, r6
    196e:	a5 dd       	rcall	.-1206   	; 0x14ba <fputc>
    1970:	ea 94       	dec	r14
    1972:	ee 20       	and	r14, r14
    1974:	c9 f7       	brne	.-14     	; 0x1968 <vfprintf+0x3a8>
    1976:	50 ce       	rjmp	.-864    	; 0x1618 <vfprintf+0x58>
    1978:	f3 01       	movw	r30, r6
    197a:	66 81       	ldd	r22, Z+6	; 0x06
    197c:	77 81       	ldd	r23, Z+7	; 0x07
    197e:	cb 01       	movw	r24, r22
    1980:	2b 96       	adiw	r28, 0x0b	; 11
    1982:	0f b6       	in	r0, 0x3f	; 63
    1984:	f8 94       	cli
    1986:	de bf       	out	0x3e, r29	; 62
    1988:	0f be       	out	0x3f, r0	; 63
    198a:	cd bf       	out	0x3d, r28	; 61
    198c:	cf 91       	pop	r28
    198e:	df 91       	pop	r29
    1990:	1f 91       	pop	r17
    1992:	0f 91       	pop	r16
    1994:	ff 90       	pop	r15
    1996:	ef 90       	pop	r14
    1998:	df 90       	pop	r13
    199a:	cf 90       	pop	r12
    199c:	bf 90       	pop	r11
    199e:	af 90       	pop	r10
    19a0:	9f 90       	pop	r9
    19a2:	8f 90       	pop	r8
    19a4:	7f 90       	pop	r7
    19a6:	6f 90       	pop	r6
    19a8:	5f 90       	pop	r5
    19aa:	4f 90       	pop	r4
    19ac:	3f 90       	pop	r3
    19ae:	2f 90       	pop	r2
    19b0:	08 95       	ret

000019b2 <strnlen_P>:
    19b2:	fc 01       	movw	r30, r24
    19b4:	05 90       	lpm	r0, Z+
    19b6:	61 50       	subi	r22, 0x01	; 1
    19b8:	70 40       	sbci	r23, 0x00	; 0
    19ba:	01 10       	cpse	r0, r1
    19bc:	d8 f7       	brcc	.-10     	; 0x19b4 <strnlen_P+0x2>
    19be:	80 95       	com	r24
    19c0:	90 95       	com	r25
    19c2:	8e 0f       	add	r24, r30
    19c4:	9f 1f       	adc	r25, r31
    19c6:	08 95       	ret

000019c8 <strnlen>:
    19c8:	fc 01       	movw	r30, r24
    19ca:	61 50       	subi	r22, 0x01	; 1
    19cc:	70 40       	sbci	r23, 0x00	; 0
    19ce:	01 90       	ld	r0, Z+
    19d0:	01 10       	cpse	r0, r1
    19d2:	d8 f7       	brcc	.-10     	; 0x19ca <strnlen+0x2>
    19d4:	80 95       	com	r24
    19d6:	90 95       	com	r25
    19d8:	8e 0f       	add	r24, r30
    19da:	9f 1f       	adc	r25, r31
    19dc:	08 95       	ret

000019de <__ultoa_invert>:
    19de:	fa 01       	movw	r30, r20
    19e0:	aa 27       	eor	r26, r26
    19e2:	28 30       	cpi	r18, 0x08	; 8
    19e4:	51 f1       	breq	.+84     	; 0x1a3a <__ultoa_invert+0x5c>
    19e6:	20 31       	cpi	r18, 0x10	; 16
    19e8:	81 f1       	breq	.+96     	; 0x1a4a <__ultoa_invert+0x6c>
    19ea:	e8 94       	clt
    19ec:	6f 93       	push	r22
    19ee:	6e 7f       	andi	r22, 0xFE	; 254
    19f0:	6e 5f       	subi	r22, 0xFE	; 254
    19f2:	7f 4f       	sbci	r23, 0xFF	; 255
    19f4:	8f 4f       	sbci	r24, 0xFF	; 255
    19f6:	9f 4f       	sbci	r25, 0xFF	; 255
    19f8:	af 4f       	sbci	r26, 0xFF	; 255
    19fa:	b1 e0       	ldi	r27, 0x01	; 1
    19fc:	3e d0       	rcall	.+124    	; 0x1a7a <__ultoa_invert+0x9c>
    19fe:	b4 e0       	ldi	r27, 0x04	; 4
    1a00:	3c d0       	rcall	.+120    	; 0x1a7a <__ultoa_invert+0x9c>
    1a02:	67 0f       	add	r22, r23
    1a04:	78 1f       	adc	r23, r24
    1a06:	89 1f       	adc	r24, r25
    1a08:	9a 1f       	adc	r25, r26
    1a0a:	a1 1d       	adc	r26, r1
    1a0c:	68 0f       	add	r22, r24
    1a0e:	79 1f       	adc	r23, r25
    1a10:	8a 1f       	adc	r24, r26
    1a12:	91 1d       	adc	r25, r1
    1a14:	a1 1d       	adc	r26, r1
    1a16:	6a 0f       	add	r22, r26
    1a18:	71 1d       	adc	r23, r1
    1a1a:	81 1d       	adc	r24, r1
    1a1c:	91 1d       	adc	r25, r1
    1a1e:	a1 1d       	adc	r26, r1
    1a20:	20 d0       	rcall	.+64     	; 0x1a62 <__ultoa_invert+0x84>
    1a22:	09 f4       	brne	.+2      	; 0x1a26 <__ultoa_invert+0x48>
    1a24:	68 94       	set
    1a26:	3f 91       	pop	r19
    1a28:	2a e0       	ldi	r18, 0x0A	; 10
    1a2a:	26 9f       	mul	r18, r22
    1a2c:	11 24       	eor	r1, r1
    1a2e:	30 19       	sub	r19, r0
    1a30:	30 5d       	subi	r19, 0xD0	; 208
    1a32:	31 93       	st	Z+, r19
    1a34:	de f6       	brtc	.-74     	; 0x19ec <__ultoa_invert+0xe>
    1a36:	cf 01       	movw	r24, r30
    1a38:	08 95       	ret
    1a3a:	46 2f       	mov	r20, r22
    1a3c:	47 70       	andi	r20, 0x07	; 7
    1a3e:	40 5d       	subi	r20, 0xD0	; 208
    1a40:	41 93       	st	Z+, r20
    1a42:	b3 e0       	ldi	r27, 0x03	; 3
    1a44:	0f d0       	rcall	.+30     	; 0x1a64 <__ultoa_invert+0x86>
    1a46:	c9 f7       	brne	.-14     	; 0x1a3a <__ultoa_invert+0x5c>
    1a48:	f6 cf       	rjmp	.-20     	; 0x1a36 <__ultoa_invert+0x58>
    1a4a:	46 2f       	mov	r20, r22
    1a4c:	4f 70       	andi	r20, 0x0F	; 15
    1a4e:	40 5d       	subi	r20, 0xD0	; 208
    1a50:	4a 33       	cpi	r20, 0x3A	; 58
    1a52:	18 f0       	brcs	.+6      	; 0x1a5a <__ultoa_invert+0x7c>
    1a54:	49 5d       	subi	r20, 0xD9	; 217
    1a56:	31 fd       	sbrc	r19, 1
    1a58:	40 52       	subi	r20, 0x20	; 32
    1a5a:	41 93       	st	Z+, r20
    1a5c:	02 d0       	rcall	.+4      	; 0x1a62 <__ultoa_invert+0x84>
    1a5e:	a9 f7       	brne	.-22     	; 0x1a4a <__ultoa_invert+0x6c>
    1a60:	ea cf       	rjmp	.-44     	; 0x1a36 <__ultoa_invert+0x58>
    1a62:	b4 e0       	ldi	r27, 0x04	; 4
    1a64:	a6 95       	lsr	r26
    1a66:	97 95       	ror	r25
    1a68:	87 95       	ror	r24
    1a6a:	77 95       	ror	r23
    1a6c:	67 95       	ror	r22
    1a6e:	ba 95       	dec	r27
    1a70:	c9 f7       	brne	.-14     	; 0x1a64 <__ultoa_invert+0x86>
    1a72:	00 97       	sbiw	r24, 0x00	; 0
    1a74:	61 05       	cpc	r22, r1
    1a76:	71 05       	cpc	r23, r1
    1a78:	08 95       	ret
    1a7a:	9b 01       	movw	r18, r22
    1a7c:	ac 01       	movw	r20, r24
    1a7e:	0a 2e       	mov	r0, r26
    1a80:	06 94       	lsr	r0
    1a82:	57 95       	ror	r21
    1a84:	47 95       	ror	r20
    1a86:	37 95       	ror	r19
    1a88:	27 95       	ror	r18
    1a8a:	ba 95       	dec	r27
    1a8c:	c9 f7       	brne	.-14     	; 0x1a80 <__ultoa_invert+0xa2>
    1a8e:	62 0f       	add	r22, r18
    1a90:	73 1f       	adc	r23, r19
    1a92:	84 1f       	adc	r24, r20
    1a94:	95 1f       	adc	r25, r21
    1a96:	a0 1d       	adc	r26, r0
    1a98:	08 95       	ret

00001a9a <_exit>:
    1a9a:	f8 94       	cli

00001a9c <__stop_program>:
    1a9c:	ff cf       	rjmp	.-2      	; 0x1a9c <__stop_program>
