
StillImageHost.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000024  00800100  00001ed0  00001f64  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001ed0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000022  00800124  00800124  00001f88  2**0
                  ALLOC
  3 .debug_aranges 000006c8  00000000  00000000  00001f88  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000f98  00000000  00000000  00002650  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000b71b  00000000  00000000  000035e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000027f8  00000000  00000000  0000ed03  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00007d24  00000000  00000000  000114fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000b10  00000000  00000000  00019220  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000456b  00000000  00000000  00019d30  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00005753  00000000  00000000  0001e29b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000798  00000000  00000000  000239ee  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
       0:	64 c1       	rjmp	.+712    	; 0x2ca <__ctors_end>
{
	USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, AfterType);

	if (*BytesRem)
	  USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, Type);
}
       2:	00 00       	nop
	return USB_Host_SendControlRequest(NULL);
}

uint8_t USB_Host_SetInterfaceAltSetting(const uint8_t InterfaceIndex,
                                        const uint8_t AltSetting)
{
       4:	80 c1       	rjmp	.+768    	; 0x306 <__bad_interrupt>

	return ErrorCode;
}

bool SI_Host_IsEventReceived(USB_ClassInfo_SI_Host_t* const SIInterfaceInfo)
{
       6:	00 00       	nop

	return Serial_ReceiveByte();
}

int Serial_getchar_Blocking(FILE *Stream)
{
       8:	7e c1       	rjmp	.+764    	; 0x306 <__bad_interrupt>
       a:	00 00       	nop
       c:	7c c1       	rjmp	.+760    	; 0x306 <__bad_interrupt>
       e:	00 00       	nop
      10:	7a c1       	rjmp	.+756    	; 0x306 <__bad_interrupt>
      12:	00 00       	nop
      14:	78 c1       	rjmp	.+752    	; 0x306 <__bad_interrupt>
      16:	00 00       	nop
      18:	76 c1       	rjmp	.+748    	; 0x306 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	74 c1       	rjmp	.+744    	; 0x306 <__bad_interrupt>
      1e:	00 00       	nop
      20:	72 c1       	rjmp	.+740    	; 0x306 <__bad_interrupt>
      22:	00 00       	nop
      24:	70 c1       	rjmp	.+736    	; 0x306 <__bad_interrupt>
      26:	00 00       	nop
      28:	b9 c5       	rjmp	.+2930   	; 0xb9c <__vector_10>
      2a:	00 00       	nop
      2c:	6c c1       	rjmp	.+728    	; 0x306 <__bad_interrupt>
      2e:	00 00       	nop
      30:	6a c1       	rjmp	.+724    	; 0x306 <__bad_interrupt>
      32:	00 00       	nop
      34:	68 c1       	rjmp	.+720    	; 0x306 <__bad_interrupt>
      36:	00 00       	nop
      38:	66 c1       	rjmp	.+716    	; 0x306 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	64 c1       	rjmp	.+712    	; 0x306 <__bad_interrupt>
      3e:	00 00       	nop
      40:	62 c1       	rjmp	.+708    	; 0x306 <__bad_interrupt>
      42:	00 00       	nop
      44:	60 c1       	rjmp	.+704    	; 0x306 <__bad_interrupt>
      46:	00 00       	nop
      48:	5e c1       	rjmp	.+700    	; 0x306 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	5c c1       	rjmp	.+696    	; 0x306 <__bad_interrupt>
      4e:	00 00       	nop
      50:	5a c1       	rjmp	.+692    	; 0x306 <__bad_interrupt>
      52:	00 00       	nop
      54:	58 c1       	rjmp	.+688    	; 0x306 <__bad_interrupt>
      56:	00 00       	nop
      58:	56 c1       	rjmp	.+684    	; 0x306 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	54 c1       	rjmp	.+680    	; 0x306 <__bad_interrupt>
      5e:	00 00       	nop
      60:	52 c1       	rjmp	.+676    	; 0x306 <__bad_interrupt>
      62:	00 00       	nop
      64:	50 c1       	rjmp	.+672    	; 0x306 <__bad_interrupt>
      66:	00 00       	nop
      68:	4e c1       	rjmp	.+668    	; 0x306 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	4c c1       	rjmp	.+664    	; 0x306 <__bad_interrupt>
      6e:	00 00       	nop
      70:	4a c1       	rjmp	.+660    	; 0x306 <__bad_interrupt>
      72:	00 00       	nop
      74:	48 c1       	rjmp	.+656    	; 0x306 <__bad_interrupt>
      76:	00 00       	nop
      78:	46 c1       	rjmp	.+652    	; 0x306 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	44 c1       	rjmp	.+648    	; 0x306 <__bad_interrupt>
      7e:	00 00       	nop
      80:	42 c1       	rjmp	.+644    	; 0x306 <__bad_interrupt>
      82:	00 00       	nop
      84:	40 c1       	rjmp	.+640    	; 0x306 <__bad_interrupt>
      86:	00 00       	nop
      88:	3e c1       	rjmp	.+636    	; 0x306 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	3c c1       	rjmp	.+632    	; 0x306 <__bad_interrupt>
      8e:	00 00       	nop
      90:	3a c1       	rjmp	.+628    	; 0x306 <__bad_interrupt>
      92:	00 00       	nop
      94:	38 c1       	rjmp	.+624    	; 0x306 <__bad_interrupt>
      96:	00 00       	nop

00000098 <__c.4573>:
      98:	1b 5b 33 31 6d 44 65 76 20 45 6e 75 6d 20 45 72     .[31mDev Enum Er
      a8:	72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     ror.. -- Error C
      b8:	6f 64 65 20 25 64 0d 0a 20 2d 2d 20 53 75 62 20     ode %d.. -- Sub 
      c8:	45 72 72 6f 72 20 43 6f 64 65 20 25 64 0d 0a 20     Error Code %d.. 
      d8:	2d 2d 20 49 6e 20 53 74 61 74 65 20 25 64 0d 0a     -- In State %d..
      e8:	1b 5b 33 37 6d 00                                   .[37m.

000000ee <__c.4565>:
      ee:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
      fe:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 
     10e:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

0000011d <__c.4556>:
     11d:	53 74 69 6c 6c 20 49 6d 61 67 65 20 44 65 76 69     Still Image Devi
     12d:	63 65 20 45 6e 75 6d 65 72 61 74 65 64 2e 0d 0a     ce Enumerated...
     13d:	00                                                  .

0000013e <__c.4554>:
     13e:	45 72 72 6f 72 20 53 65 74 74 69 6e 67 20 44 65     Error Setting De
     14e:	76 69 63 65 20 43 6f 6e 66 69 67 75 72 61 74 69     vice Configurati
     15e:	6f 6e 2e 0d 0a 00                                   on....

00000164 <__c.4552>:
     164:	41 74 74 61 63 68 65 64 20 44 65 76 69 63 65 20     Attached Device 
     174:	4e 6f 74 20 61 20 56 61 6c 69 64 20 53 74 69 6c     Not a Valid Stil
     184:	6c 20 49 6d 61 67 65 20 43 6c 61 73 73 20 44 65     l Image Class De
     194:	76 69 63 65 2e 0d 0a 00                             vice....

0000019c <__c.4550>:
     19c:	45 72 72 6f 72 20 52 65 74 72 69 65 76 69 6e 67     Error Retrieving
     1ac:	20 43 6f 6e 66 69 67 75 72 61 74 69 6f 6e 20 44      Configuration D
     1bc:	65 73 63 72 69 70 74 6f 72 2e 0d 0a 00              escriptor....

000001c9 <__c.4543>:
     1c9:	0d 0a 44 65 76 69 63 65 20 55 6e 61 74 74 61 63     ..Device Unattac
     1d9:	68 65 64 2e 0d 0a 00                                hed....

000001e0 <__c.4538>:
     1e0:	44 65 76 69 63 65 20 41 74 74 61 63 68 65 64 2e     Device Attached.
     1f0:	0d 0a 00                                            ...

000001f3 <__c.4529>:
     1f3:	43 6f 75 6c 64 20 6e 6f 74 20 63 6c 6f 73 65 20     Could not close 
     203:	50 49 4d 41 20 73 65 73 73 69 6f 6e 2e 0d 0a 00     PIMA session....

00000213 <__c.4527>:
     213:	43 6c 6f 73 69 6e 67 20 53 65 73 73 69 6f 6e 2e     Closing Session.
     223:	2e 2e 0d 0a 00                                      .....

00000228 <__c.4525>:
     228:	44 65 76 69 63 65 20 4f 66 66 2e 0d 0a 00           Device Off....

00000236 <__c.4523>:
     236:	43 6f 75 6c 64 20 6e 6f 74 20 74 75 72 6e 20 6f     Could not turn o
     246:	66 66 20 64 65 76 69 63 65 2e 0d 0a 00              ff device....

00000253 <__c.4521>:
     253:	54 75 72 6e 69 6e 67 20 6f 66 66 20 44 65 76 69     Turning off Devi
     263:	63 65 2e 2e 2e 0d 0a 00                             ce......

0000026b <__c.4519>:
     26b:	43 6f 75 6c 64 20 6e 6f 74 20 6f 70 65 6e 20 50     Could not open P
     27b:	49 4d 41 20 73 65 73 73 69 6f 6e 2e 0d 0a 00        IMA session....

0000028a <__c.4517>:
     28a:	4f 70 65 6e 69 6e 67 20 53 65 73 73 69 6f 6e 2e     Opening Session.
     29a:	2e 2e 0d 0a 00                                      .....

0000029f <__c.4503>:
     29f:	1b 5b 33 36 6d 53 74 69 6c 6c 20 49 6d 61 67 65     .[36mStill Image
     2af:	20 48 6f 73 74 20 44 65 6d 6f 20 72 75 6e 6e 69      Host Demo runni
     2bf:	6e 67 2e 0d 0a 1b 5b 33 37 6d 00                    ng....[37m.

000002ca <__ctors_end>:
     2ca:	11 24       	eor	r1, r1
     2cc:	1f be       	out	0x3f, r1	; 63
     2ce:	cf ef       	ldi	r28, 0xFF	; 255
     2d0:	d0 e2       	ldi	r29, 0x20	; 32
     2d2:	de bf       	out	0x3e, r29	; 62
     2d4:	cd bf       	out	0x3d, r28	; 61

000002d6 <__do_copy_data>:
     2d6:	11 e0       	ldi	r17, 0x01	; 1
     2d8:	a0 e0       	ldi	r26, 0x00	; 0
     2da:	b1 e0       	ldi	r27, 0x01	; 1
     2dc:	e0 ed       	ldi	r30, 0xD0	; 208
     2de:	fe e1       	ldi	r31, 0x1E	; 30
     2e0:	00 e0       	ldi	r16, 0x00	; 0
     2e2:	0b bf       	out	0x3b, r16	; 59
     2e4:	02 c0       	rjmp	.+4      	; 0x2ea <__do_copy_data+0x14>
     2e6:	07 90       	elpm	r0, Z+
     2e8:	0d 92       	st	X+, r0
     2ea:	a4 32       	cpi	r26, 0x24	; 36
     2ec:	b1 07       	cpc	r27, r17
     2ee:	d9 f7       	brne	.-10     	; 0x2e6 <__do_copy_data+0x10>

000002f0 <__do_clear_bss>:
     2f0:	11 e0       	ldi	r17, 0x01	; 1
     2f2:	a4 e2       	ldi	r26, 0x24	; 36
     2f4:	b1 e0       	ldi	r27, 0x01	; 1
     2f6:	01 c0       	rjmp	.+2      	; 0x2fa <.do_clear_bss_start>

000002f8 <.do_clear_bss_loop>:
     2f8:	1d 92       	st	X+, r1

000002fa <.do_clear_bss_start>:
     2fa:	a6 34       	cpi	r26, 0x46	; 70
     2fc:	b1 07       	cpc	r27, r17
     2fe:	e1 f7       	brne	.-8      	; 0x2f8 <.do_clear_bss_loop>
     300:	37 d1       	rcall	.+622    	; 0x570 <main>
     302:	0c 94 66 0f 	jmp	0x1ecc	; 0x1ecc <_exit>

00000306 <__bad_interrupt>:
     306:	7c ce       	rjmp	.-776    	; 0x0 <__vectors>

00000308 <EVENT_USB_Host_DeviceEnumerationFailed>:
 *  enumerating an attached USB device.
 */
void EVENT_USB_Host_DeviceEnumerationFailed(const uint8_t ErrorCode,
                                            const uint8_t SubErrorCode)
{
	printf_P(PSTR(ESC_FG_RED "Dev Enum Error\r\n"
     308:	90 91 31 01 	lds	r25, 0x0131
     30c:	2d b7       	in	r18, 0x3d	; 61
     30e:	3e b7       	in	r19, 0x3e	; 62
     310:	28 50       	subi	r18, 0x08	; 8
     312:	30 40       	sbci	r19, 0x00	; 0
     314:	0f b6       	in	r0, 0x3f	; 63
     316:	f8 94       	cli
     318:	3e bf       	out	0x3e, r19	; 62
     31a:	0f be       	out	0x3f, r0	; 63
     31c:	2d bf       	out	0x3d, r18	; 61
     31e:	ed b7       	in	r30, 0x3d	; 61
     320:	fe b7       	in	r31, 0x3e	; 62
     322:	31 96       	adiw	r30, 0x01	; 1
     324:	28 e9       	ldi	r18, 0x98	; 152
     326:	30 e0       	ldi	r19, 0x00	; 0
     328:	ad b7       	in	r26, 0x3d	; 61
     32a:	be b7       	in	r27, 0x3e	; 62
     32c:	12 96       	adiw	r26, 0x02	; 2
     32e:	3c 93       	st	X, r19
     330:	2e 93       	st	-X, r18
     332:	11 97       	sbiw	r26, 0x01	; 1
     334:	82 83       	std	Z+2, r24	; 0x02
     336:	13 82       	std	Z+3, r1	; 0x03
     338:	64 83       	std	Z+4, r22	; 0x04
     33a:	15 82       	std	Z+5, r1	; 0x05
     33c:	96 83       	std	Z+6, r25	; 0x06
     33e:	17 82       	std	Z+7, r1	; 0x07
     340:	0e 94 76 0c 	call	0x18ec	; 0x18ec <printf_P>
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     344:	8b b1       	in	r24, 0x0b	; 11
     346:	8f 70       	andi	r24, 0x0F	; 15
     348:	80 69       	ori	r24, 0x90	; 144
     34a:	8b b9       	out	0x0b, r24	; 11
     34c:	2d b7       	in	r18, 0x3d	; 61
     34e:	3e b7       	in	r19, 0x3e	; 62
     350:	28 5f       	subi	r18, 0xF8	; 248
     352:	3f 4f       	sbci	r19, 0xFF	; 255
     354:	0f b6       	in	r0, 0x3f	; 63
     356:	f8 94       	cli
     358:	3e bf       	out	0x3e, r19	; 62
     35a:	0f be       	out	0x3f, r0	; 63
     35c:	2d bf       	out	0x3d, r18	; 61
	                         " -- Error Code %d\r\n"
	                         " -- Sub Error Code %d\r\n"
	                         " -- In State %d\r\n" ESC_FG_WHITE), ErrorCode, SubErrorCode, USB_HostState);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
}
     35e:	08 95       	ret

00000360 <EVENT_USB_Host_HostError>:
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
}

/** Event handler for the USB_HostError event. This indicates that a hardware error occurred while in host mode. */
void EVENT_USB_Host_HostError(const uint8_t ErrorCode)
{
     360:	1f 93       	push	r17
     362:	18 2f       	mov	r17, r24
	USB_Disable();
     364:	f6 d3       	rcall	.+2028   	; 0xb52 <USB_Disable>

	printf_P(PSTR(ESC_FG_RED "Host Mode Error\r\n"
     366:	00 d0       	rcall	.+0      	; 0x368 <EVENT_USB_Host_HostError+0x8>
     368:	00 d0       	rcall	.+0      	; 0x36a <EVENT_USB_Host_HostError+0xa>
     36a:	ed b7       	in	r30, 0x3d	; 61
     36c:	fe b7       	in	r31, 0x3e	; 62
     36e:	31 96       	adiw	r30, 0x01	; 1
     370:	8e ee       	ldi	r24, 0xEE	; 238
     372:	90 e0       	ldi	r25, 0x00	; 0
     374:	ad b7       	in	r26, 0x3d	; 61
     376:	be b7       	in	r27, 0x3e	; 62
     378:	12 96       	adiw	r26, 0x02	; 2
     37a:	9c 93       	st	X, r25
     37c:	8e 93       	st	-X, r24
     37e:	11 97       	sbiw	r26, 0x01	; 1
     380:	12 83       	std	Z+2, r17	; 0x02
     382:	13 82       	std	Z+3, r1	; 0x03
     384:	0e 94 76 0c 	call	0x18ec	; 0x18ec <printf_P>
     388:	8b b1       	in	r24, 0x0b	; 11
     38a:	8f 70       	andi	r24, 0x0F	; 15
     38c:	80 69       	ori	r24, 0x90	; 144
     38e:	8b b9       	out	0x0b, r24	; 11
     390:	0f 90       	pop	r0
     392:	0f 90       	pop	r0
     394:	0f 90       	pop	r0
     396:	0f 90       	pop	r0
     398:	ff cf       	rjmp	.-2      	; 0x398 <EVENT_USB_Host_HostError+0x38>

0000039a <EVENT_USB_Host_DeviceUnattached>:
/** Event handler for the USB_DeviceUnattached event. This indicates that a device has been removed from the host, and
 *  stops the library USB task management process.
 */
void EVENT_USB_Host_DeviceUnattached(void)
{
	puts_P(PSTR("\r\nDevice Unattached.\r\n"));
     39a:	89 ec       	ldi	r24, 0xC9	; 201
     39c:	91 e0       	ldi	r25, 0x01	; 1
     39e:	0e 94 98 0c 	call	0x1930	; 0x1930 <puts_P>
     3a2:	8b b1       	in	r24, 0x0b	; 11
     3a4:	8f 70       	andi	r24, 0x0F	; 15
     3a6:	80 61       	ori	r24, 0x10	; 16
     3a8:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
}
     3aa:	08 95       	ret

000003ac <EVENT_USB_Host_DeviceAttached>:
/** Event handler for the USB_DeviceAttached event. This indicates that a device has been attached to the host, and
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Host_DeviceAttached(void)
{
	puts_P(PSTR("Device Attached.\r\n"));
     3ac:	80 ee       	ldi	r24, 0xE0	; 224
     3ae:	91 e0       	ldi	r25, 0x01	; 1
     3b0:	0e 94 98 0c 	call	0x1930	; 0x1930 <puts_P>
     3b4:	8b b1       	in	r24, 0x0b	; 11
     3b6:	8f 70       	andi	r24, 0x0F	; 15
     3b8:	80 6a       	ori	r24, 0xA0	; 160
     3ba:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
}
     3bc:	08 95       	ret

000003be <EVENT_USB_Host_DeviceEnumerationComplete>:

/** Event handler for the USB_DeviceEnumerationComplete event. This indicates that a device has been successfully
 *  enumerated by the host and is now ready to be used by the application.
 */
void EVENT_USB_Host_DeviceEnumerationComplete(void)
{
     3be:	0f 93       	push	r16
     3c0:	1f 93       	push	r17
     3c2:	df 93       	push	r29
     3c4:	cf 93       	push	r28
     3c6:	cd b7       	in	r28, 0x3d	; 61
     3c8:	de b7       	in	r29, 0x3e	; 62
     3ca:	c2 50       	subi	r28, 0x02	; 2
     3cc:	d2 40       	sbci	r29, 0x02	; 2
     3ce:	0f b6       	in	r0, 0x3f	; 63
     3d0:	f8 94       	cli
     3d2:	de bf       	out	0x3e, r29	; 62
     3d4:	0f be       	out	0x3f, r0	; 63
     3d6:	cd bf       	out	0x3d, r28	; 61
     3d8:	8b b1       	in	r24, 0x0b	; 11
     3da:	8f 70       	andi	r24, 0x0F	; 15
     3dc:	80 6a       	ori	r24, 0xA0	; 160
     3de:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);

	uint16_t ConfigDescriptorSize;
	uint8_t  ConfigDescriptorData[512];

	if (USB_Host_GetDeviceConfigDescriptor(1, &ConfigDescriptorSize, ConfigDescriptorData,
     3e0:	8e 01       	movw	r16, r28
     3e2:	0d 5f       	subi	r16, 0xFD	; 253
     3e4:	1f 4f       	sbci	r17, 0xFF	; 255
     3e6:	81 e0       	ldi	r24, 0x01	; 1
     3e8:	be 01       	movw	r22, r28
     3ea:	6f 5f       	subi	r22, 0xFF	; 255
     3ec:	7f 4f       	sbci	r23, 0xFF	; 255
     3ee:	a8 01       	movw	r20, r16
     3f0:	20 e0       	ldi	r18, 0x00	; 0
     3f2:	32 e0       	ldi	r19, 0x02	; 2
     3f4:	58 d5       	rcall	.+2736   	; 0xea6 <USB_Host_GetDeviceConfigDescriptor>
     3f6:	88 23       	and	r24, r24
     3f8:	19 f0       	breq	.+6      	; 0x400 <EVENT_USB_Host_DeviceEnumerationComplete+0x42>
	                                       sizeof(ConfigDescriptorData)) != HOST_GETCONFIG_Successful)
	{
		puts_P(PSTR("Error Retrieving Configuration Descriptor.\r\n"));
     3fa:	8c e9       	ldi	r24, 0x9C	; 156
     3fc:	91 e0       	ldi	r25, 0x01	; 1
     3fe:	12 c0       	rjmp	.+36     	; 0x424 <EVENT_USB_Host_DeviceEnumerationComplete+0x66>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (SI_Host_ConfigurePipes(&DigitalCamera_SI_Interface,
     400:	69 81       	ldd	r22, Y+1	; 0x01
     402:	7a 81       	ldd	r23, Y+2	; 0x02
     404:	80 e0       	ldi	r24, 0x00	; 0
     406:	91 e0       	ldi	r25, 0x01	; 1
     408:	a8 01       	movw	r20, r16
     40a:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <SI_Host_ConfigurePipes>
     40e:	88 23       	and	r24, r24
     410:	19 f0       	breq	.+6      	; 0x418 <EVENT_USB_Host_DeviceEnumerationComplete+0x5a>
	                           ConfigDescriptorSize, ConfigDescriptorData) != SI_ENUMERROR_NoError)
	{
		puts_P(PSTR("Attached Device Not a Valid Still Image Class Device.\r\n"));
     412:	84 e6       	ldi	r24, 0x64	; 100
     414:	91 e0       	ldi	r25, 0x01	; 1
     416:	06 c0       	rjmp	.+12     	; 0x424 <EVENT_USB_Host_DeviceEnumerationComplete+0x66>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (USB_Host_SetDeviceConfiguration(1) != HOST_SENDCONTROL_Successful)
     418:	81 e0       	ldi	r24, 0x01	; 1
     41a:	e7 d6       	rcall	.+3534   	; 0x11ea <USB_Host_SetDeviceConfiguration>
     41c:	88 23       	and	r24, r24
     41e:	41 f0       	breq	.+16     	; 0x430 <EVENT_USB_Host_DeviceEnumerationComplete+0x72>
	{
		puts_P(PSTR("Error Setting Device Configuration.\r\n"));
     420:	8e e3       	ldi	r24, 0x3E	; 62
     422:	91 e0       	ldi	r25, 0x01	; 1
     424:	0e 94 98 0c 	call	0x1930	; 0x1930 <puts_P>
     428:	8b b1       	in	r24, 0x0b	; 11
     42a:	8f 70       	andi	r24, 0x0F	; 15
     42c:	80 69       	ori	r24, 0x90	; 144
     42e:	07 c0       	rjmp	.+14     	; 0x43e <EVENT_USB_Host_DeviceEnumerationComplete+0x80>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	puts_P(PSTR("Still Image Device Enumerated.\r\n"));
     430:	8d e1       	ldi	r24, 0x1D	; 29
     432:	91 e0       	ldi	r25, 0x01	; 1
     434:	0e 94 98 0c 	call	0x1930	; 0x1930 <puts_P>
     438:	8b b1       	in	r24, 0x0b	; 11
     43a:	8f 70       	andi	r24, 0x0F	; 15
     43c:	80 66       	ori	r24, 0x60	; 96
     43e:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
}
     440:	ce 5f       	subi	r28, 0xFE	; 254
     442:	dd 4f       	sbci	r29, 0xFD	; 253
     444:	0f b6       	in	r0, 0x3f	; 63
     446:	f8 94       	cli
     448:	de bf       	out	0x3e, r29	; 62
     44a:	0f be       	out	0x3f, r0	; 63
     44c:	cd bf       	out	0x3d, r28	; 61
     44e:	cf 91       	pop	r28
     450:	df 91       	pop	r29
     452:	1f 91       	pop	r17
     454:	0f 91       	pop	r16
     456:	08 95       	ret

00000458 <StillImageHost_Task>:
/** Task to manage an enumerated USB Still Image device once connected, to manage a
 *  new PIMA session in order to send commands to the attached device.
 */
void StillImageHost_Task(void)
{
	if (USB_HostState != HOST_STATE_Configured)
     458:	80 91 31 01 	lds	r24, 0x0131
     45c:	8b 30       	cpi	r24, 0x0B	; 11
     45e:	09 f0       	breq	.+2      	; 0x462 <StillImageHost_Task+0xa>
     460:	3c c0       	rjmp	.+120    	; 0x4da <StillImageHost_Task+0x82>
	  return;

	puts_P(PSTR("Opening Session...\r\n"));
     462:	8a e8       	ldi	r24, 0x8A	; 138
     464:	92 e0       	ldi	r25, 0x02	; 2
     466:	0e 94 98 0c 	call	0x1930	; 0x1930 <puts_P>

	if (SI_Host_OpenSession(&DigitalCamera_SI_Interface) != PIPE_RWSTREAM_NoError)
     46a:	80 e0       	ldi	r24, 0x00	; 0
     46c:	91 e0       	ldi	r25, 0x01	; 1
     46e:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <SI_Host_OpenSession>
     472:	88 23       	and	r24, r24
     474:	19 f0       	breq	.+6      	; 0x47c <StillImageHost_Task+0x24>
	{
		puts_P(PSTR("Could not open PIMA session.\r\n"));
     476:	8b e6       	ldi	r24, 0x6B	; 107
     478:	92 e0       	ldi	r25, 0x02	; 2
     47a:	25 c0       	rjmp	.+74     	; 0x4c6 <StillImageHost_Task+0x6e>
		USB_Host_SetDeviceConfiguration(0);
		return;
	}

	puts_P(PSTR("Turning off Device...\r\n"));
     47c:	83 e5       	ldi	r24, 0x53	; 83
     47e:	92 e0       	ldi	r25, 0x02	; 2
     480:	0e 94 98 0c 	call	0x1930	; 0x1930 <puts_P>

	SI_Host_SendCommand(&DigitalCamera_SI_Interface, 0x1013, 0, NULL);
     484:	80 e0       	ldi	r24, 0x00	; 0
     486:	91 e0       	ldi	r25, 0x01	; 1
     488:	63 e1       	ldi	r22, 0x13	; 19
     48a:	70 e1       	ldi	r23, 0x10	; 16
     48c:	40 e0       	ldi	r20, 0x00	; 0
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	30 e0       	ldi	r19, 0x00	; 0
     492:	41 d7       	rcall	.+3714   	; 0x1316 <SI_Host_SendCommand>
	if (SI_Host_ReceiveResponse(&DigitalCamera_SI_Interface))
     494:	80 e0       	ldi	r24, 0x00	; 0
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	0e 94 67 0a 	call	0x14ce	; 0x14ce <SI_Host_ReceiveResponse>
     49c:	88 23       	and	r24, r24
     49e:	19 f0       	breq	.+6      	; 0x4a6 <StillImageHost_Task+0x4e>
	{
		puts_P(PSTR("Could not turn off device.\r\n"));
     4a0:	86 e3       	ldi	r24, 0x36	; 54
     4a2:	92 e0       	ldi	r25, 0x02	; 2
     4a4:	10 c0       	rjmp	.+32     	; 0x4c6 <StillImageHost_Task+0x6e>
		USB_Host_SetDeviceConfiguration(0);
		return;
	}

	puts_P(PSTR("Device Off.\r\n"));
     4a6:	88 e2       	ldi	r24, 0x28	; 40
     4a8:	92 e0       	ldi	r25, 0x02	; 2
     4aa:	0e 94 98 0c 	call	0x1930	; 0x1930 <puts_P>

	puts_P(PSTR("Closing Session...\r\n"));
     4ae:	83 e1       	ldi	r24, 0x13	; 19
     4b0:	92 e0       	ldi	r25, 0x02	; 2
     4b2:	0e 94 98 0c 	call	0x1930	; 0x1930 <puts_P>

	if (SI_Host_CloseSession(&DigitalCamera_SI_Interface) != PIPE_RWSTREAM_NoError)
     4b6:	80 e0       	ldi	r24, 0x00	; 0
     4b8:	91 e0       	ldi	r25, 0x01	; 1
     4ba:	0e 94 98 0a 	call	0x1530	; 0x1530 <SI_Host_CloseSession>
     4be:	88 23       	and	r24, r24
     4c0:	31 f0       	breq	.+12     	; 0x4ce <StillImageHost_Task+0x76>
	{
		puts_P(PSTR("Could not close PIMA session.\r\n"));
     4c2:	83 ef       	ldi	r24, 0xF3	; 243
     4c4:	91 e0       	ldi	r25, 0x01	; 1
     4c6:	0e 94 98 0c 	call	0x1930	; 0x1930 <puts_P>
		USB_Host_SetDeviceConfiguration(0);
     4ca:	80 e0       	ldi	r24, 0x00	; 0
     4cc:	8e c6       	rjmp	.+3356   	; 0x11ea <USB_Host_SetDeviceConfiguration>
     4ce:	8b b1       	in	r24, 0x0b	; 11
     4d0:	8f 70       	andi	r24, 0x0F	; 15
     4d2:	80 66       	ori	r24, 0x60	; 96
     4d4:	8b b9       	out	0x0b, r24	; 11
		return;
	}

	LEDs_SetAllLEDs(LEDMASK_USB_READY);
	USB_Host_SetDeviceConfiguration(0);
     4d6:	80 e0       	ldi	r24, 0x00	; 0
     4d8:	88 c6       	rjmp	.+3344   	; 0x11ea <USB_Host_SetDeviceConfiguration>
     4da:	08 95       	ret

000004dc <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     4dc:	84 b7       	in	r24, 0x34	; 52
     4de:	87 7f       	andi	r24, 0xF7	; 247
     4e0:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     4e2:	38 e1       	ldi	r19, 0x18	; 24
     4e4:	0f b6       	in	r0, 0x3f	; 63
     4e6:	f8 94       	cli
     4e8:	30 93 60 00 	sts	0x0060, r19
     4ec:	10 92 60 00 	sts	0x0060, r1
     4f0:	0f be       	out	0x3f, r0	; 63

	/* Disable clock division */
	clock_prescale_set(clock_div_1);
     4f2:	80 e0       	ldi	r24, 0x00	; 0
     4f4:	90 e0       	ldi	r25, 0x00	; 0
     4f6:	20 e8       	ldi	r18, 0x80	; 128
     4f8:	0f b6       	in	r0, 0x3f	; 63
     4fa:	f8 94       	cli
     4fc:	20 93 61 00 	sts	0x0061, r18
     500:	80 93 61 00 	sts	0x0061, r24
     504:	0f be       	out	0x3f, r0	; 63
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     506:	83 e3       	ldi	r24, 0x33	; 51
     508:	90 e0       	ldi	r25, 0x00	; 0
     50a:	90 93 cd 00 	sts	0x00CD, r25
     50e:	80 93 cc 00 	sts	0x00CC, r24

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     512:	86 e0       	ldi	r24, 0x06	; 6
     514:	80 93 ca 00 	sts	0x00CA, r24
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     518:	10 92 c8 00 	sts	0x00C8, r1
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     51c:	30 93 c9 00 	sts	0x00C9, r19

				DDRD  |= (1 << 3);
     520:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     522:	5a 9a       	sbi	0x0b, 2	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     524:	8a b1       	in	r24, 0x0a	; 10
     526:	80 6f       	ori	r24, 0xF0	; 240
     528:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     52a:	8b b1       	in	r24, 0x0b	; 11
     52c:	8f 70       	andi	r24, 0x0F	; 15
     52e:	8b b9       	out	0x0b, r24	; 11

	/* Hardware Initialization */
	Serial_Init(9600, false);
	LEDs_Init();
	USB_Init();
     530:	07 d3       	rcall	.+1550   	; 0xb40 <USB_Init>
			static inline void Serial_CreateStream(FILE* Stream)
			{
				if (!(Stream))
				{
					Stream = &USARTSerialStream;
					stdin  = Stream;
     532:	e2 e3       	ldi	r30, 0x32	; 50
     534:	f1 e0       	ldi	r31, 0x01	; 1
     536:	f0 93 41 01 	sts	0x0141, r31
     53a:	e0 93 40 01 	sts	0x0140, r30
					stdout = Stream;
     53e:	f0 93 43 01 	sts	0x0143, r31
     542:	e0 93 42 01 	sts	0x0142, r30
				}
			
				*Stream = (FILE)FDEV_SETUP_STREAM(Serial_putchar, Serial_getchar, _FDEV_SETUP_RW);
     546:	8e e0       	ldi	r24, 0x0E	; 14
     548:	df 01       	movw	r26, r30
     54a:	1d 92       	st	X+, r1
     54c:	8a 95       	dec	r24
     54e:	e9 f7       	brne	.-6      	; 0x54a <SetupHardware+0x6e>
     550:	83 e0       	ldi	r24, 0x03	; 3
     552:	80 93 35 01 	sts	0x0135, r24
     556:	8f e4       	ldi	r24, 0x4F	; 79
     558:	9c e0       	ldi	r25, 0x0C	; 12
     55a:	90 93 3b 01 	sts	0x013B, r25
     55e:	80 93 3a 01 	sts	0x013A, r24
     562:	89 e5       	ldi	r24, 0x59	; 89
     564:	9c e0       	ldi	r25, 0x0C	; 12
     566:	90 93 3d 01 	sts	0x013D, r25
     56a:	80 93 3c 01 	sts	0x013C, r24

	/* Create a stdio stream for the serial port for stdin and stdout */
	Serial_CreateStream(NULL);
}
     56e:	08 95       	ret

00000570 <main>:
/** Main program entry point. This routine configures the hardware required by the application, then
 *  enters a loop to run the application tasks in sequence.
 */
int main(void)
{
	SetupHardware();
     570:	b5 df       	rcall	.-150    	; 0x4dc <SetupHardware>

	puts_P(PSTR(ESC_FG_CYAN "Still Image Host Demo running.\r\n" ESC_FG_WHITE));
     572:	8f e9       	ldi	r24, 0x9F	; 159
     574:	92 e0       	ldi	r25, 0x02	; 2
     576:	0e 94 98 0c 	call	0x1930	; 0x1930 <puts_P>
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     57a:	8b b1       	in	r24, 0x0b	; 11
     57c:	8f 70       	andi	r24, 0x0F	; 15
     57e:	80 61       	ori	r24, 0x10	; 16
     580:	8b b9       	out	0x0b, r24	; 11

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
	sei();
     582:	78 94       	sei

	for (;;)
	{
		StillImageHost_Task();
     584:	69 df       	rcall	.-302    	; 0x458 <StillImageHost_Task>
		
		SI_Host_USBTask(&DigitalCamera_SI_Interface);
		USB_USBTask();
     586:	56 d6       	rcall	.+3244   	; 0x1234 <USB_USBTask>
     588:	fd cf       	rjmp	.-6      	; 0x584 <main+0x14>

0000058a <USB_Host_WaitMS>:
		USB_ResetInterface();
	}
}

uint8_t USB_Host_WaitMS(uint8_t MS)
{
     58a:	98 2f       	mov	r25, r24
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     58c:	20 91 9e 00 	lds	r18, 0x009E
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     590:	30 91 a0 00 	lds	r19, 0x00A0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     594:	80 91 a0 00 	lds	r24, 0x00A0
     598:	8f 7d       	andi	r24, 0xDF	; 223
     59a:	80 93 a0 00 	sts	0x00A0, r24
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     59e:	80 91 9f 00 	lds	r24, 0x009F
     5a2:	8f 7d       	andi	r24, 0xDF	; 223
     5a4:	80 93 9f 00 	sts	0x009F, r24
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     5a8:	80 91 9e 00 	lds	r24, 0x009E
     5ac:	81 60       	ori	r24, 0x01	; 1
     5ae:	80 93 9e 00 	sts	0x009E, r24
     5b2:	28 c0       	rjmp	.+80     	; 0x604 <USB_Host_WaitMS+0x7a>
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     5b4:	80 91 9f 00 	lds	r24, 0x009F

	USB_Host_ResumeBus();

	while (MS)
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     5b8:	85 ff       	sbrs	r24, 5
     5ba:	06 c0       	rjmp	.+12     	; 0x5c8 <USB_Host_WaitMS+0x3e>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     5bc:	80 91 9f 00 	lds	r24, 0x009F
     5c0:	8f 7d       	andi	r24, 0xDF	; 223
     5c2:	80 93 9f 00 	sts	0x009F, r24
		{
			USB_INT_Clear(USB_INT_HSOFI);
			MS--;
     5c6:	91 50       	subi	r25, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
     5c8:	80 91 31 01 	lds	r24, 0x0131
     5cc:	81 30       	cpi	r24, 0x01	; 1
     5ce:	11 f4       	brne	.+4      	; 0x5d4 <USB_Host_WaitMS+0x4a>
     5d0:	91 e0       	ldi	r25, 0x01	; 1
     5d2:	1a c0       	rjmp	.+52     	; 0x608 <USB_Host_WaitMS+0x7e>
			 *  \return Boolean \c true if an error has occurred on the selected pipe, \c false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
     5d4:	80 91 a6 00 	lds	r24, 0x00A6
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError() == true)
     5d8:	84 ff       	sbrs	r24, 4
     5da:	09 c0       	rjmp	.+18     	; 0x5ee <USB_Host_WaitMS+0x64>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     5dc:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
     5e0:	80 91 a6 00 	lds	r24, 0x00A6
     5e4:	8f 7e       	andi	r24, 0xEF	; 239
     5e6:	80 93 a6 00 	sts	0x00A6, r24
     5ea:	92 e0       	ldi	r25, 0x02	; 2
     5ec:	0d c0       	rjmp	.+26     	; 0x608 <USB_Host_WaitMS+0x7e>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     5ee:	80 91 a6 00 	lds	r24, 0x00A6
			ErrorCode = HOST_WAITERROR_PipeError;

			break;
		}

		if (Pipe_IsStalled() == true)
     5f2:	81 ff       	sbrs	r24, 1
     5f4:	07 c0       	rjmp	.+14     	; 0x604 <USB_Host_WaitMS+0x7a>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
     5f6:	80 91 a6 00 	lds	r24, 0x00A6
     5fa:	8d 7f       	andi	r24, 0xFD	; 253
     5fc:	80 93 a6 00 	sts	0x00A6, r24
     600:	93 e0       	ldi	r25, 0x03	; 3
     602:	02 c0       	rjmp	.+4      	; 0x608 <USB_Host_WaitMS+0x7e>
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     604:	99 23       	and	r25, r25
     606:	b1 f6       	brne	.-84     	; 0x5b4 <USB_Host_WaitMS+0x2a>

			break;
		}
	}

	if (BusSuspended)
     608:	20 fd       	sbrc	r18, 0
     60a:	05 c0       	rjmp	.+10     	; 0x616 <USB_Host_WaitMS+0x8c>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     60c:	80 91 9e 00 	lds	r24, 0x009E
     610:	8e 7f       	andi	r24, 0xFE	; 254
     612:	80 93 9e 00 	sts	0x009E, r24
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
     616:	35 ff       	sbrs	r19, 5
     618:	05 c0       	rjmp	.+10     	; 0x624 <USB_Host_WaitMS+0x9a>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     61a:	80 91 a0 00 	lds	r24, 0x00A0
     61e:	80 62       	ori	r24, 0x20	; 32
     620:	80 93 a0 00 	sts	0x00A0, r24
	  USB_INT_Enable(USB_INT_HSOFI);

	return ErrorCode;
}
     624:	89 2f       	mov	r24, r25
     626:	08 95       	ret

00000628 <USB_Host_ResetDevice>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     628:	60 91 9e 00 	lds	r22, 0x009E
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     62c:	80 91 a0 00 	lds	r24, 0x00A0
     630:	8d 7f       	andi	r24, 0xFD	; 253
     632:	80 93 a0 00 	sts	0x00A0, r24
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
     636:	80 91 9e 00 	lds	r24, 0x009E
     63a:	82 60       	ori	r24, 0x02	; 2
     63c:	80 93 9e 00 	sts	0x009E, r24
			 *  \return Boolean \c true if no bus reset is currently being sent, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
     640:	80 91 9e 00 	lds	r24, 0x009E
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
     644:	81 fd       	sbrc	r24, 1
     646:	fc cf       	rjmp	.-8      	; 0x640 <USB_Host_ResetDevice+0x18>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     648:	80 91 9e 00 	lds	r24, 0x009E
     64c:	81 60       	ori	r24, 0x01	; 1
     64e:	80 93 9e 00 	sts	0x009E, r24
	USB_Host_ResumeBus();
	
	USB_Host_ConfigurationNumber = 0;
     652:	10 92 27 01 	sts	0x0127, r1
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     656:	30 91 a0 00 	lds	r19, 0x00A0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     65a:	80 91 a0 00 	lds	r24, 0x00A0
     65e:	8f 7d       	andi	r24, 0xDF	; 223
     660:	80 93 a0 00 	sts	0x00A0, r24
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     664:	80 91 9f 00 	lds	r24, 0x009F
     668:	8f 7d       	andi	r24, 0xDF	; 223
     66a:	80 93 9f 00 	sts	0x009F, r24
     66e:	2a e0       	ldi	r18, 0x0A	; 10
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     670:	40 ed       	ldi	r20, 0xD0	; 208
     672:	57 e0       	ldi	r21, 0x07	; 7
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     674:	80 91 9f 00 	lds	r24, 0x009F
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     678:	85 ff       	sbrs	r24, 5
     67a:	0b c0       	rjmp	.+22     	; 0x692 <USB_Host_ResetDevice+0x6a>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     67c:	80 91 9f 00 	lds	r24, 0x009F
     680:	8f 7d       	andi	r24, 0xDF	; 223
     682:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     686:	80 91 9f 00 	lds	r24, 0x009F
     68a:	8d 7f       	andi	r24, 0xFD	; 253
     68c:	80 93 9f 00 	sts	0x009F, r24
     690:	05 c0       	rjmp	.+10     	; 0x69c <USB_Host_ResetDevice+0x74>
     692:	ca 01       	movw	r24, r20
     694:	01 97       	sbiw	r24, 0x01	; 1
     696:	f1 f7       	brne	.-4      	; 0x694 <USB_Host_ResetDevice+0x6c>
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
     698:	21 50       	subi	r18, 0x01	; 1
     69a:	61 f7       	brne	.-40     	; 0x674 <USB_Host_ResetDevice+0x4c>
		}

		Delay_MS(1);
	}

	if (HSOFIEnabled)
     69c:	35 ff       	sbrs	r19, 5
     69e:	05 c0       	rjmp	.+10     	; 0x6aa <USB_Host_ResetDevice+0x82>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     6a0:	80 91 a0 00 	lds	r24, 0x00A0
     6a4:	80 62       	ori	r24, 0x20	; 32
     6a6:	80 93 a0 00 	sts	0x00A0, r24
	  USB_INT_Enable(USB_INT_HSOFI);

	if (BusSuspended)
     6aa:	60 fd       	sbrc	r22, 0
     6ac:	05 c0       	rjmp	.+10     	; 0x6b8 <USB_Host_ResetDevice+0x90>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     6ae:	80 91 9e 00 	lds	r24, 0x009E
     6b2:	8e 7f       	andi	r24, 0xFE	; 254
     6b4:	80 93 9e 00 	sts	0x009E, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     6b8:	80 91 a0 00 	lds	r24, 0x00A0
     6bc:	82 60       	ori	r24, 0x02	; 2
     6be:	80 93 a0 00 	sts	0x00A0, r24
	  USB_Host_SuspendBus();

	USB_INT_Enable(USB_INT_DDISCI);
}
     6c2:	08 95       	ret

000006c4 <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "../Host.h"

void USB_Host_ProcessNextHostState(void)
{
     6c4:	ef 92       	push	r14
     6c6:	0f 93       	push	r16
     6c8:	1f 93       	push	r17
     6ca:	df 93       	push	r29
     6cc:	cf 93       	push	r28
     6ce:	cd b7       	in	r28, 0x3d	; 61
     6d0:	de b7       	in	r29, 0x3e	; 62
     6d2:	28 97       	sbiw	r28, 0x08	; 8
     6d4:	0f b6       	in	r0, 0x3f	; 63
     6d6:	f8 94       	cli
     6d8:	de bf       	out	0x3e, r29	; 62
     6da:	0f be       	out	0x3f, r0	; 63
     6dc:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
     6de:	80 91 31 01 	lds	r24, 0x0131
     6e2:	85 30       	cpi	r24, 0x05	; 5
     6e4:	09 f4       	brne	.+2      	; 0x6e8 <USB_Host_ProcessNextHostState+0x24>
     6e6:	94 c0       	rjmp	.+296    	; 0x810 <USB_Host_ProcessNextHostState+0x14c>
     6e8:	86 30       	cpi	r24, 0x06	; 6
     6ea:	68 f4       	brcc	.+26     	; 0x706 <USB_Host_ProcessNextHostState+0x42>
     6ec:	82 30       	cpi	r24, 0x02	; 2
     6ee:	b9 f1       	breq	.+110    	; 0x75e <USB_Host_ProcessNextHostState+0x9a>
     6f0:	83 30       	cpi	r24, 0x03	; 3
     6f2:	18 f4       	brcc	.+6      	; 0x6fa <USB_Host_ProcessNextHostState+0x36>
     6f4:	88 23       	and	r24, r24
     6f6:	a1 f0       	breq	.+40     	; 0x720 <USB_Host_ProcessNextHostState+0x5c>
     6f8:	04 c1       	rjmp	.+520    	; 0x902 <USB_Host_ProcessNextHostState+0x23e>
     6fa:	83 30       	cpi	r24, 0x03	; 3
     6fc:	d1 f1       	breq	.+116    	; 0x772 <USB_Host_ProcessNextHostState+0xae>
     6fe:	84 30       	cpi	r24, 0x04	; 4
     700:	09 f0       	breq	.+2      	; 0x704 <USB_Host_ProcessNextHostState+0x40>
     702:	ff c0       	rjmp	.+510    	; 0x902 <USB_Host_ProcessNextHostState+0x23e>
     704:	5d c0       	rjmp	.+186    	; 0x7c0 <USB_Host_ProcessNextHostState+0xfc>
     706:	87 30       	cpi	r24, 0x07	; 7
     708:	09 f4       	brne	.+2      	; 0x70c <USB_Host_ProcessNextHostState+0x48>
     70a:	9b c0       	rjmp	.+310    	; 0x842 <USB_Host_ProcessNextHostState+0x17e>
     70c:	87 30       	cpi	r24, 0x07	; 7
     70e:	08 f4       	brcc	.+2      	; 0x712 <USB_Host_ProcessNextHostState+0x4e>
     710:	8a c0       	rjmp	.+276    	; 0x826 <USB_Host_ProcessNextHostState+0x162>
     712:	88 30       	cpi	r24, 0x08	; 8
     714:	09 f4       	brne	.+2      	; 0x718 <USB_Host_ProcessNextHostState+0x54>
     716:	b3 c0       	rjmp	.+358    	; 0x87e <USB_Host_ProcessNextHostState+0x1ba>
     718:	89 30       	cpi	r24, 0x09	; 9
     71a:	09 f0       	breq	.+2      	; 0x71e <USB_Host_ProcessNextHostState+0x5a>
     71c:	f2 c0       	rjmp	.+484    	; 0x902 <USB_Host_ProcessNextHostState+0x23e>
     71e:	d7 c0       	rjmp	.+430    	; 0x8ce <USB_Host_ProcessNextHostState+0x20a>
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
     720:	00 91 25 01 	lds	r16, 0x0125
     724:	10 91 26 01 	lds	r17, 0x0126
     728:	01 15       	cp	r16, r1
     72a:	11 05       	cpc	r17, r1
     72c:	09 f4       	brne	.+2      	; 0x730 <USB_Host_ProcessNextHostState+0x6c>
     72e:	e9 c0       	rjmp	.+466    	; 0x902 <USB_Host_ProcessNextHostState+0x23e>
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     730:	81 e0       	ldi	r24, 0x01	; 1
     732:	2b df       	rcall	.-426    	; 0x58a <USB_Host_WaitMS>
     734:	68 2f       	mov	r22, r24
     736:	88 23       	and	r24, r24
     738:	31 f0       	breq	.+12     	; 0x746 <USB_Host_ProcessNextHostState+0x82>
				{
					USB_HostState = PostWaitState;
     73a:	80 91 24 01 	lds	r24, 0x0124
     73e:	80 93 31 01 	sts	0x0131, r24
     742:	91 e0       	ldi	r25, 0x01	; 1
     744:	da c0       	rjmp	.+436    	; 0x8fa <USB_Host_ProcessNextHostState+0x236>
					ErrorCode     = HOST_ENUMERROR_WaitStage;
					break;
				}

				if (!(--WaitMSRemaining))
     746:	c8 01       	movw	r24, r16
     748:	01 97       	sbiw	r24, 0x01	; 1
     74a:	90 93 26 01 	sts	0x0126, r25
     74e:	80 93 25 01 	sts	0x0125, r24
     752:	89 2b       	or	r24, r25
     754:	09 f0       	breq	.+2      	; 0x758 <USB_Host_ProcessNextHostState+0x94>
     756:	d5 c0       	rjmp	.+426    	; 0x902 <USB_Host_ProcessNextHostState+0x23e>
				  USB_HostState = PostWaitState;
     758:	80 91 24 01 	lds	r24, 0x0124
     75c:	07 c0       	rjmp	.+14     	; 0x76c <USB_Host_ProcessNextHostState+0xa8>
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
     75e:	88 ee       	ldi	r24, 0xE8	; 232
     760:	93 e0       	ldi	r25, 0x03	; 3
     762:	90 93 26 01 	sts	0x0126, r25
     766:	80 93 25 01 	sts	0x0125, r24

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
     76a:	83 e0       	ldi	r24, 0x03	; 3
     76c:	80 93 31 01 	sts	0x0131, r24
     770:	c8 c0       	rjmp	.+400    	; 0x902 <USB_Host_ProcessNextHostState+0x23e>
			break;
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
     772:	80 91 25 01 	lds	r24, 0x0125
     776:	90 91 26 01 	lds	r25, 0x0126
     77a:	01 97       	sbiw	r24, 0x01	; 1
     77c:	90 93 26 01 	sts	0x0126, r25
     780:	80 93 25 01 	sts	0x0125, r24
     784:	01 96       	adiw	r24, 0x01	; 1
     786:	29 f0       	breq	.+10     	; 0x792 <USB_Host_ProcessNextHostState+0xce>
     788:	80 ed       	ldi	r24, 0xD0	; 208
     78a:	97 e0       	ldi	r25, 0x07	; 7
     78c:	01 97       	sbiw	r24, 0x01	; 1
     78e:	f1 f7       	brne	.-4      	; 0x78c <USB_Host_ProcessNextHostState+0xc8>
     790:	b8 c0       	rjmp	.+368    	; 0x902 <USB_Host_ProcessNextHostState+0x23e>
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
     792:	77 98       	cbi	0x0e, 7	; 14

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     794:	80 91 d8 00 	lds	r24, 0x00D8
     798:	80 61       	ori	r24, 0x10	; 16
     79a:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
     79e:	80 91 dd 00 	lds	r24, 0x00DD
     7a2:	8b 7f       	andi	r24, 0xFB	; 251
     7a4:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON |=  (1 << UVCONE);
     7a8:	80 91 d7 00 	lds	r24, 0x00D7
     7ac:	80 61       	ori	r24, 0x10	; 16
     7ae:	80 93 d7 00 	sts	0x00D7, r24
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
     7b2:	80 91 dd 00 	lds	r24, 0x00DD
     7b6:	82 60       	ori	r24, 0x02	; 2
     7b8:	80 93 dd 00 	sts	0x00DD, r24

				USB_OTGPAD_On();
				USB_Host_VBUS_Auto_Enable();
				USB_Host_VBUS_Auto_On();

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
     7bc:	84 e0       	ldi	r24, 0x04	; 4
     7be:	d6 cf       	rjmp	.-84     	; 0x76c <USB_Host_ProcessNextHostState+0xa8>
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
     7c0:	80 91 9f 00 	lds	r24, 0x009F
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
     7c4:	80 ff       	sbrs	r24, 0
     7c6:	9d c0       	rjmp	.+314    	; 0x902 <USB_Host_ProcessNextHostState+0x23e>
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     7c8:	80 91 9f 00 	lds	r24, 0x009F
     7cc:	8e 7f       	andi	r24, 0xFE	; 254
     7ce:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     7d2:	80 91 9f 00 	lds	r24, 0x009F
     7d6:	8d 7f       	andi	r24, 0xFD	; 253
     7d8:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     7dc:	80 91 df 00 	lds	r24, 0x00DF
     7e0:	8d 7f       	andi	r24, 0xFD	; 253
     7e2:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
     7e6:	80 91 de 00 	lds	r24, 0x00DE
     7ea:	82 60       	ori	r24, 0x02	; 2
     7ec:	80 93 de 00 	sts	0x00DE, r24
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     7f0:	80 91 9e 00 	lds	r24, 0x009E
     7f4:	81 60       	ori	r24, 0x01	; 1
     7f6:	80 93 9e 00 	sts	0x009E, r24

				USB_INT_Clear(USB_INT_VBERRI);
				USB_INT_Enable(USB_INT_VBERRI);

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
     7fa:	ed d0       	rcall	.+474    	; 0x9d6 <Pipe_ClearPipes>

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
     7fc:	10 92 31 01 	sts	0x0131, r1
     800:	84 e6       	ldi	r24, 0x64	; 100
     802:	90 e0       	ldi	r25, 0x00	; 0
     804:	90 93 26 01 	sts	0x0126, r25
     808:	80 93 25 01 	sts	0x0125, r24
     80c:	85 e0       	ldi	r24, 0x05	; 5
     80e:	5c c0       	rjmp	.+184    	; 0x8c8 <USB_Host_ProcessNextHostState+0x204>
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
     810:	0b df       	rcall	.-490    	; 0x628 <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
     812:	10 92 31 01 	sts	0x0131, r1
     816:	88 ec       	ldi	r24, 0xC8	; 200
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	90 93 26 01 	sts	0x0126, r25
     81e:	80 93 25 01 	sts	0x0125, r24
     822:	86 e0       	ldi	r24, 0x06	; 6
     824:	51 c0       	rjmp	.+162    	; 0x8c8 <USB_Host_ProcessNextHostState+0x204>
			break;
		case HOST_STATE_Powered_ConfigPipe:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
     826:	80 e0       	ldi	r24, 0x00	; 0
     828:	60 e0       	ldi	r22, 0x00	; 0
     82a:	40 e0       	ldi	r20, 0x00	; 0
     82c:	20 e0       	ldi	r18, 0x00	; 0
     82e:	00 e4       	ldi	r16, 0x40	; 64
     830:	10 e0       	ldi	r17, 0x00	; 0
     832:	ee 24       	eor	r14, r14
     834:	72 d0       	rcall	.+228    	; 0x91a <Pipe_ConfigurePipe>
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     836:	80 91 ac 00 	lds	r24, 0x00AC
							   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
							   PIPE_CONTROLPIPE_DEFAULT_SIZE, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
     83a:	87 ff       	sbrs	r24, 7
     83c:	5c c0       	rjmp	.+184    	; 0x8f6 <USB_Host_ProcessNextHostState+0x232>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
     83e:	87 e0       	ldi	r24, 0x07	; 7
     840:	95 cf       	rjmp	.-214    	; 0x76c <USB_Host_ProcessNextHostState+0xa8>
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
     842:	a9 e2       	ldi	r26, 0x29	; 41
     844:	b1 e0       	ldi	r27, 0x01	; 1
     846:	eb e1       	ldi	r30, 0x1B	; 27
     848:	f1 e0       	ldi	r31, 0x01	; 1
     84a:	88 e0       	ldi	r24, 0x08	; 8
     84c:	01 90       	ld	r0, Z+
     84e:	0d 92       	st	X+, r0
     850:	81 50       	subi	r24, 0x01	; 1
     852:	e1 f7       	brne	.-8      	; 0x84c <USB_Host_ProcessNextHostState+0x188>
					.wLength       = 8,
				};

			uint8_t DataBuffer[8];

			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
     854:	ce 01       	movw	r24, r28
     856:	01 96       	adiw	r24, 0x01	; 1
     858:	aa d3       	rcall	.+1876   	; 0xfae <USB_Host_SendControlRequest>
     85a:	68 2f       	mov	r22, r24
     85c:	88 23       	and	r24, r24
     85e:	09 f0       	breq	.+2      	; 0x862 <USB_Host_ProcessNextHostState+0x19e>
     860:	48 c0       	rjmp	.+144    	; 0x8f2 <USB_Host_ProcessNextHostState+0x22e>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_Host_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
     862:	88 85       	ldd	r24, Y+8	; 0x08
     864:	80 93 23 01 	sts	0x0123, r24

			USB_Host_ResetDevice();
     868:	df de       	rcall	.-578    	; 0x628 <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
     86a:	10 92 31 01 	sts	0x0131, r1
     86e:	88 ec       	ldi	r24, 0xC8	; 200
     870:	90 e0       	ldi	r25, 0x00	; 0
     872:	90 93 26 01 	sts	0x0126, r25
     876:	80 93 25 01 	sts	0x0125, r24
     87a:	88 e0       	ldi	r24, 0x08	; 8
     87c:	25 c0       	rjmp	.+74     	; 0x8c8 <USB_Host_ProcessNextHostState+0x204>
			break;
		case HOST_STATE_Default_PostReset:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
     87e:	00 91 23 01 	lds	r16, 0x0123
     882:	80 e0       	ldi	r24, 0x00	; 0
     884:	60 e0       	ldi	r22, 0x00	; 0
     886:	40 e0       	ldi	r20, 0x00	; 0
     888:	20 e0       	ldi	r18, 0x00	; 0
     88a:	10 e0       	ldi	r17, 0x00	; 0
     88c:	ee 24       	eor	r14, r14
     88e:	45 d0       	rcall	.+138    	; 0x91a <Pipe_ConfigurePipe>
     890:	80 91 ac 00 	lds	r24, 0x00AC
			                   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
			                   USB_Host_ControlPipeSize, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
     894:	87 ff       	sbrs	r24, 7
     896:	2f c0       	rjmp	.+94     	; 0x8f6 <USB_Host_ProcessNextHostState+0x232>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
     898:	a9 e2       	ldi	r26, 0x29	; 41
     89a:	b1 e0       	ldi	r27, 0x01	; 1
     89c:	e3 e1       	ldi	r30, 0x13	; 19
     89e:	f1 e0       	ldi	r31, 0x01	; 1
     8a0:	88 e0       	ldi	r24, 0x08	; 8
     8a2:	01 90       	ld	r0, Z+
     8a4:	0d 92       	st	X+, r0
     8a6:	81 50       	subi	r24, 0x01	; 1
     8a8:	e1 f7       	brne	.-8      	; 0x8a2 <USB_Host_ProcessNextHostState+0x1de>
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
     8aa:	80 e0       	ldi	r24, 0x00	; 0
     8ac:	90 e0       	ldi	r25, 0x00	; 0
     8ae:	7f d3       	rcall	.+1790   	; 0xfae <USB_Host_SendControlRequest>
     8b0:	68 2f       	mov	r22, r24
     8b2:	88 23       	and	r24, r24
     8b4:	f1 f4       	brne	.+60     	; 0x8f2 <USB_Host_ProcessNextHostState+0x22e>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
     8b6:	10 92 31 01 	sts	0x0131, r1
     8ba:	84 e6       	ldi	r24, 0x64	; 100
     8bc:	90 e0       	ldi	r25, 0x00	; 0
     8be:	90 93 26 01 	sts	0x0126, r25
     8c2:	80 93 25 01 	sts	0x0125, r24
     8c6:	89 e0       	ldi	r24, 0x09	; 9
     8c8:	80 93 24 01 	sts	0x0124, r24
     8cc:	1a c0       	rjmp	.+52     	; 0x902 <USB_Host_ProcessNextHostState+0x23e>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
     8ce:	81 e0       	ldi	r24, 0x01	; 1
     8d0:	80 93 a1 00 	sts	0x00A1, r24
			break;
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			USB_HostState = HOST_STATE_Addressed;
     8d4:	8a e0       	ldi	r24, 0x0A	; 10
     8d6:	80 93 31 01 	sts	0x0131, r24

			EVENT_USB_Host_DeviceEnumerationComplete();
     8da:	71 dd       	rcall	.-1310   	; 0x3be <EVENT_USB_Host_DeviceEnumerationComplete>
     8dc:	12 c0       	rjmp	.+36     	; 0x902 <USB_Host_ProcessNextHostState+0x23e>
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
     8de:	89 2f       	mov	r24, r25
     8e0:	13 dd       	rcall	.-1498   	; 0x308 <EVENT_USB_Host_DeviceEnumerationFailed>
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     8e2:	80 91 dd 00 	lds	r24, 0x00DD
     8e6:	81 60       	ori	r24, 0x01	; 1
     8e8:	80 93 dd 00 	sts	0x00DD, r24

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
     8ec:	56 dd       	rcall	.-1364   	; 0x39a <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     8ee:	d8 d0       	rcall	.+432    	; 0xaa0 <USB_ResetInterface>
     8f0:	08 c0       	rjmp	.+16     	; 0x902 <USB_Host_ProcessNextHostState+0x23e>
	}
}
     8f2:	93 e0       	ldi	r25, 0x03	; 3
     8f4:	02 c0       	rjmp	.+4      	; 0x8fa <USB_Host_ProcessNextHostState+0x236>
     8f6:	94 e0       	ldi	r25, 0x04	; 4
     8f8:	60 e0       	ldi	r22, 0x00	; 0

			EVENT_USB_Host_DeviceEnumerationComplete();
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
     8fa:	80 91 31 01 	lds	r24, 0x0131
     8fe:	81 30       	cpi	r24, 0x01	; 1
     900:	71 f7       	brne	.-36     	; 0x8de <USB_Host_ProcessNextHostState+0x21a>

		EVENT_USB_Host_DeviceUnattached();

		USB_ResetInterface();
	}
}
     902:	28 96       	adiw	r28, 0x08	; 8
     904:	0f b6       	in	r0, 0x3f	; 63
     906:	f8 94       	cli
     908:	de bf       	out	0x3e, r29	; 62
     90a:	0f be       	out	0x3f, r0	; 63
     90c:	cd bf       	out	0x3d, r28	; 61
     90e:	cf 91       	pop	r28
     910:	df 91       	pop	r29
     912:	1f 91       	pop	r17
     914:	0f 91       	pop	r16
     916:	ef 90       	pop	r14
     918:	08 95       	ret

0000091a <Pipe_ConfigurePipe>:
                        const uint8_t Type,
                        const uint8_t Token,
                        const uint8_t EndpointNumber,
                        const uint16_t Size,
                        const uint8_t Banks)
{
     91a:	ef 92       	push	r14
     91c:	0f 93       	push	r16
     91e:	1f 93       	push	r17
     920:	e8 2f       	mov	r30, r24
     922:	7e 2d       	mov	r23, r14

		Pipe_SelectPipe(PNum);
		
		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
     924:	62 95       	swap	r22
     926:	66 0f       	add	r22, r22
     928:	66 0f       	add	r22, r22
     92a:	60 7c       	andi	r22, 0xC0	; 192
     92c:	64 2b       	or	r22, r20
     92e:	2f 70       	andi	r18, 0x0F	; 15
     930:	62 2b       	or	r22, r18
     932:	38 2f       	mov	r19, r24
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     934:	72 60       	ori	r23, 0x02	; 2
     936:	45 c0       	rjmp	.+138    	; 0x9c2 <Pipe_ConfigurePipe+0xa8>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     938:	30 93 a7 00 	sts	0x00A7, r19
		uint8_t UPCFG2XTemp;
		uint8_t UPIENXTemp;

		Pipe_SelectPipe(PNum);
		
		if (PNum == Number)
     93c:	3e 17       	cp	r19, r30
     93e:	a1 f4       	brne	.+40     	; 0x968 <Pipe_ConfigurePipe+0x4e>
     940:	88 e0       	ldi	r24, 0x08	; 8
     942:	90 e0       	ldi	r25, 0x00	; 0
     944:	20 e0       	ldi	r18, 0x00	; 0
     946:	03 c0       	rjmp	.+6      	; 0x94e <Pipe_ConfigurePipe+0x34>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
				{
					MaskVal++;
     948:	2f 5f       	subi	r18, 0xFF	; 255
					CheckBytes <<= 1;
     94a:	88 0f       	add	r24, r24
     94c:	99 1f       	adc	r25, r25
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
     94e:	80 17       	cp	r24, r16
     950:	91 07       	cpc	r25, r17
     952:	10 f4       	brcc	.+4      	; 0x958 <Pipe_ConfigurePipe+0x3e>
     954:	25 30       	cpi	r18, 0x05	; 5
     956:	c1 f7       	brne	.-16     	; 0x948 <Pipe_ConfigurePipe+0x2e>
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     958:	92 2f       	mov	r25, r18
     95a:	92 95       	swap	r25
     95c:	90 7f       	andi	r25, 0xF0	; 240
     95e:	97 2b       	or	r25, r23
     960:	56 2f       	mov	r21, r22
     962:	40 e0       	ldi	r20, 0x00	; 0
     964:	20 e0       	ldi	r18, 0x00	; 0
     966:	08 c0       	rjmp	.+16     	; 0x978 <Pipe_ConfigurePipe+0x5e>
			UPCFG2XTemp = 0;
			UPIENXTemp  = 0;
		}
		else
		{
			UPCFG0XTemp = UPCFG0X;
     968:	50 91 aa 00 	lds	r21, 0x00AA
			UPCFG1XTemp = UPCFG1X;
     96c:	90 91 ab 00 	lds	r25, 0x00AB
			UPCFG2XTemp = UPCFG2X;
     970:	40 91 ad 00 	lds	r20, 0x00AD
			UPIENXTemp  = UPIENX;
     974:	20 91 ae 00 	lds	r18, 0x00AE
		}

		if (!(UPCFG1XTemp & (1 << ALLOC)))
     978:	91 ff       	sbrs	r25, 1
     97a:	22 c0       	rjmp	.+68     	; 0x9c0 <Pipe_ConfigurePipe+0xa6>
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     97c:	80 91 a9 00 	lds	r24, 0x00A9
     980:	8e 7f       	andi	r24, 0xFE	; 254
     982:	80 93 a9 00 	sts	0x00A9, r24
		  continue;
		  
		Pipe_DisablePipe();
		UPCFG1X &= ~(1 << ALLOC);
     986:	80 91 ab 00 	lds	r24, 0x00AB
     98a:	8d 7f       	andi	r24, 0xFD	; 253
     98c:	80 93 ab 00 	sts	0x00AB, r24
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
     990:	80 91 a9 00 	lds	r24, 0x00A9
     994:	81 60       	ori	r24, 0x01	; 1
     996:	80 93 a9 00 	sts	0x00A9, r24

		Pipe_EnablePipe();
		UPCFG0X = UPCFG0XTemp;
     99a:	50 93 aa 00 	sts	0x00AA, r21
		UPCFG1X = UPCFG1XTemp;
     99e:	90 93 ab 00 	sts	0x00AB, r25
		UPCFG2X = UPCFG2XTemp;
     9a2:	40 93 ad 00 	sts	0x00AD, r20
		UPIENX  = UPIENXTemp;
     9a6:	20 93 ae 00 	sts	0x00AE, r18

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
     9aa:	80 91 a9 00 	lds	r24, 0x00A9
     9ae:	80 62       	ori	r24, 0x20	; 32
     9b0:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     9b4:	80 91 ac 00 	lds	r24, 0x00AC

		Pipe_SetInfiniteINRequests();
	
		if (!(Pipe_IsConfigured()))
     9b8:	87 fd       	sbrc	r24, 7
     9ba:	02 c0       	rjmp	.+4      	; 0x9c0 <Pipe_ConfigurePipe+0xa6>
     9bc:	80 e0       	ldi	r24, 0x00	; 0
     9be:	07 c0       	rjmp	.+14     	; 0x9ce <Pipe_ConfigurePipe+0xb4>

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else	
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
     9c0:	3f 5f       	subi	r19, 0xFF	; 255
     9c2:	37 30       	cpi	r19, 0x07	; 7
     9c4:	08 f4       	brcc	.+2      	; 0x9c8 <Pipe_ConfigurePipe+0xae>
     9c6:	b8 cf       	rjmp	.-144    	; 0x938 <Pipe_ConfigurePipe+0x1e>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     9c8:	e0 93 a7 00 	sts	0x00A7, r30
     9cc:	81 e0       	ldi	r24, 0x01	; 1
	}
		
	Pipe_SelectPipe(Number);	
	return true;
#endif
}
     9ce:	1f 91       	pop	r17
     9d0:	0f 91       	pop	r16
     9d2:	ef 90       	pop	r14
     9d4:	08 95       	ret

000009d6 <Pipe_ClearPipes>:

void Pipe_ClearPipes(void)
{
	UPINT = 0;
     9d6:	10 92 f8 00 	sts	0x00F8, r1
     9da:	90 e0       	ldi	r25, 0x00	; 0
     9dc:	90 93 a7 00 	sts	0x00A7, r25

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
     9e0:	10 92 ae 00 	sts	0x00AE, r1
		UPINTX  = 0;
     9e4:	10 92 a6 00 	sts	0x00A6, r1
		UPCFG1X = 0;
     9e8:	10 92 ab 00 	sts	0x00AB, r1
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     9ec:	80 91 a9 00 	lds	r24, 0x00A9
     9f0:	8e 7f       	andi	r24, 0xFE	; 254
     9f2:	80 93 a9 00 	sts	0x00A9, r24

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     9f6:	9f 5f       	subi	r25, 0xFF	; 255
     9f8:	97 30       	cpi	r25, 0x07	; 7
     9fa:	81 f7       	brne	.-32     	; 0x9dc <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
     9fc:	08 95       	ret

000009fe <Pipe_IsEndpointBound>:

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
     9fe:	48 2f       	mov	r20, r24
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
     a00:	30 91 a7 00 	lds	r19, 0x00A7
     a04:	20 e0       	ldi	r18, 0x00	; 0
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     a06:	20 93 a7 00 	sts	0x00A7, r18
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     a0a:	80 91 ac 00 	lds	r24, 0x00AC

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
	{
		Pipe_SelectPipe(PNum);

		if (!(Pipe_IsConfigured()))
     a0e:	87 ff       	sbrs	r24, 7
     a10:	10 c0       	rjmp	.+32     	; 0xa32 <Pipe_IsEndpointBound+0x34>
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				return (((UPCFG0X >> PEPNUM0) & PIPE_EPNUM_MASK) |
     a12:	90 91 aa 00 	lds	r25, 0x00AA
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
     a16:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				return (((UPCFG0X >> PEPNUM0) & PIPE_EPNUM_MASK) |
     a1a:	80 73       	andi	r24, 0x30	; 48
     a1c:	80 31       	cpi	r24, 0x10	; 16
     a1e:	11 f0       	breq	.+4      	; 0xa24 <Pipe_IsEndpointBound+0x26>
     a20:	80 e0       	ldi	r24, 0x00	; 0
     a22:	01 c0       	rjmp	.+2      	; 0xa26 <Pipe_IsEndpointBound+0x28>
     a24:	80 e8       	ldi	r24, 0x80	; 128
		  continue;

		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
     a26:	9f 70       	andi	r25, 0x0F	; 15
     a28:	89 2b       	or	r24, r25
     a2a:	84 17       	cp	r24, r20
     a2c:	11 f4       	brne	.+4      	; 0xa32 <Pipe_IsEndpointBound+0x34>
     a2e:	81 e0       	ldi	r24, 0x01	; 1
     a30:	08 95       	ret

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
	uint8_t PrevPipeNumber = Pipe_GetCurrentPipe();

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     a32:	2f 5f       	subi	r18, 0xFF	; 255
     a34:	27 30       	cpi	r18, 0x07	; 7
     a36:	39 f7       	brne	.-50     	; 0xa06 <Pipe_IsEndpointBound+0x8>
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
     a38:	37 70       	andi	r19, 0x07	; 7
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     a3a:	30 93 a7 00 	sts	0x00A7, r19
     a3e:	80 e0       	ldi	r24, 0x00	; 0
		  return true;
	}

	Pipe_SelectPipe(PrevPipeNumber);
	return false;
}
     a40:	08 95       	ret

00000a42 <Pipe_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
     a42:	40 91 a2 00 	lds	r20, 0x00A2
     a46:	50 91 a3 00 	lds	r21, 0x00A3
     a4a:	24 e6       	ldi	r18, 0x64	; 100
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
     a4c:	80 91 aa 00 	lds	r24, 0x00AA

	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
     a50:	80 73       	andi	r24, 0x30	; 48
     a52:	80 31       	cpi	r24, 0x10	; 16
     a54:	29 f4       	brne	.+10     	; 0xa60 <Pipe_WaitUntilReady+0x1e>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     a56:	80 91 a6 00 	lds	r24, 0x00A6
		{
			if (Pipe_IsINReceived())
     a5a:	80 ff       	sbrs	r24, 0
     a5c:	05 c0       	rjmp	.+10     	; 0xa68 <Pipe_WaitUntilReady+0x26>
     a5e:	1e c0       	rjmp	.+60     	; 0xa9c <Pipe_WaitUntilReady+0x5a>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     a60:	80 91 a6 00 	lds	r24, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
     a64:	82 fd       	sbrc	r24, 2
     a66:	1a c0       	rjmp	.+52     	; 0xa9c <Pipe_WaitUntilReady+0x5a>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     a68:	80 91 a6 00 	lds	r24, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
     a6c:	81 ff       	sbrs	r24, 1
     a6e:	02 c0       	rjmp	.+4      	; 0xa74 <Pipe_WaitUntilReady+0x32>
     a70:	81 e0       	ldi	r24, 0x01	; 1
     a72:	08 95       	ret
		  return PIPE_READYWAIT_PipeStalled;
		else if (USB_HostState == HOST_STATE_Unattached)
     a74:	80 91 31 01 	lds	r24, 0x0131
     a78:	81 30       	cpi	r24, 0x01	; 1
     a7a:	11 f4       	brne	.+4      	; 0xa80 <Pipe_WaitUntilReady+0x3e>
     a7c:	82 e0       	ldi	r24, 0x02	; 2
     a7e:	08 95       	ret
     a80:	80 91 a2 00 	lds	r24, 0x00A2
     a84:	90 91 a3 00 	lds	r25, 0x00A3
		  return PIPE_READYWAIT_DeviceDisconnected;

		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     a88:	84 17       	cp	r24, r20
     a8a:	95 07       	cpc	r25, r21
     a8c:	f9 f2       	breq	.-66     	; 0xa4c <Pipe_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     a8e:	22 23       	and	r18, r18
     a90:	11 f4       	brne	.+4      	; 0xa96 <Pipe_WaitUntilReady+0x54>
     a92:	83 e0       	ldi	r24, 0x03	; 3
     a94:	08 95       	ret
     a96:	21 50       	subi	r18, 0x01	; 1
     a98:	ac 01       	movw	r20, r24
     a9a:	d8 cf       	rjmp	.-80     	; 0xa4c <Pipe_WaitUntilReady+0xa>
     a9c:	80 e0       	ldi	r24, 0x00	; 0
			  return PIPE_READYWAIT_Timeout;
		}
	}
}
     a9e:	08 95       	ret

00000aa0 <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     aa0:	70 d0       	rcall	.+224    	; 0xb82 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     aa2:	77 d0       	rcall	.+238    	; 0xb92 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     aa4:	80 91 d8 00 	lds	r24, 0x00D8
     aa8:	8f 77       	andi	r24, 0x7F	; 127
     aaa:	80 93 d8 00 	sts	0x00D8, r24
				USBCON |=  (1 << USBE);
     aae:	80 91 d8 00 	lds	r24, 0x00D8
     ab2:	80 68       	ori	r24, 0x80	; 128
     ab4:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
     ab8:	80 91 d8 00 	lds	r24, 0x00D8
     abc:	8f 7d       	andi	r24, 0xDF	; 223
     abe:	80 93 d8 00 	sts	0x00D8, r24
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
     ac2:	80 91 d7 00 	lds	r24, 0x00D7
     ac6:	8f 77       	andi	r24, 0x7F	; 127
     ac8:	80 93 d7 00 	sts	0x00D7, r24

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     acc:	8c e0       	ldi	r24, 0x0C	; 12
     ace:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     ad0:	8e e0       	ldi	r24, 0x0E	; 14
     ad2:	89 bd       	out	0x29, r24	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_CAN_BE_HOST)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));		
     ad4:	09 b4       	in	r0, 0x29	; 41
     ad6:	00 fe       	sbrs	r0, 0
     ad8:	fd cf       	rjmp	.-6      	; 0xad4 <USB_ResetInterface+0x34>
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState                = HOST_STATE_Unattached;
     ada:	81 e0       	ldi	r24, 0x01	; 1
     adc:	80 93 31 01 	sts	0x0131, r24
	USB_Host_ConfigurationNumber = 0;
     ae0:	10 92 27 01 	sts	0x0127, r1
	USB_Host_ControlPipeSize     = PIPE_CONTROLPIPE_DEFAULT_SIZE;
     ae4:	80 e4       	ldi	r24, 0x40	; 64
     ae6:	80 93 23 01 	sts	0x0123, r24
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
     aea:	80 91 d8 00 	lds	r24, 0x00D8
     aee:	80 64       	ori	r24, 0x40	; 64
     af0:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     af4:	80 91 dd 00 	lds	r24, 0x00DD
     af8:	81 60       	ori	r24, 0x01	; 1
     afa:	80 93 dd 00 	sts	0x00DD, r24
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
     afe:	80 91 dd 00 	lds	r24, 0x00DD
     b02:	84 60       	ori	r24, 0x04	; 4
     b04:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON &= ~(1 << UVCONE);
     b08:	80 91 d7 00 	lds	r24, 0x00D7
     b0c:	8f 7e       	andi	r24, 0xEF	; 239
     b0e:	80 93 d7 00 	sts	0x00D7, r24

				DDRE   |=  (1 << 7);
     b12:	6f 9a       	sbi	0x0d, 7	; 13
			}

			static inline void USB_Host_VBUS_Manual_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_On(void)
			{
				PORTE  |=  (1 << 7);
     b14:	77 9a       	sbi	0x0e, 7	; 14
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN |= (1 << SRPE);						
     b16:	80 91 de 00 	lds	r24, 0x00DE
     b1a:	81 60       	ori	r24, 0x01	; 1
     b1c:	80 93 de 00 	sts	0x00DE, r24
						break;
					case USB_INT_RSTI:
						UHIEN  |= (1 << RSTE);
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
     b20:	80 91 de 00 	lds	r24, 0x00DE
     b24:	84 60       	ori	r24, 0x04	; 4
     b26:	80 93 de 00 	sts	0x00DE, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     b2a:	80 91 e0 00 	lds	r24, 0x00E0
     b2e:	8e 7f       	andi	r24, 0xFE	; 254
     b30:	80 93 e0 00 	sts	0x00E0, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     b34:	80 91 d8 00 	lds	r24, 0x00D8
     b38:	80 61       	ori	r24, 0x10	; 16
     b3a:	80 93 d8 00 	sts	0x00D8, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     b3e:	08 95       	ret

00000b40 <USB_Init>:

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
     b40:	e7 ed       	ldi	r30, 0xD7	; 215
     b42:	f0 e0       	ldi	r31, 0x00	; 0
     b44:	80 81       	ld	r24, Z
     b46:	81 60       	ori	r24, 0x01	; 1
     b48:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     b4a:	81 e0       	ldi	r24, 0x01	; 1
     b4c:	80 93 28 01 	sts	0x0128, r24

	USB_ResetInterface();
}
     b50:	a7 cf       	rjmp	.-178    	; 0xaa0 <USB_ResetInterface>

00000b52 <USB_Disable>:

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
     b52:	17 d0       	rcall	.+46     	; 0xb82 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     b54:	1e d0       	rcall	.+60     	; 0xb92 <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
     b56:	e0 ee       	ldi	r30, 0xE0	; 224
     b58:	f0 e0       	ldi	r31, 0x00	; 0
     b5a:	80 81       	ld	r24, Z
     b5c:	81 60       	ori	r24, 0x01	; 1
     b5e:	80 83       	st	Z, r24
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON  &= ~(1 << USBE);
     b60:	a8 ed       	ldi	r26, 0xD8	; 216
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	8c 91       	ld	r24, X
     b66:	8f 77       	andi	r24, 0x7F	; 127
     b68:	8c 93       	st	X, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     b6a:	19 bc       	out	0x29, r1	; 41

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  &= ~(1 << UVREGE);
     b6c:	e7 ed       	ldi	r30, 0xD7	; 215
     b6e:	f0 e0       	ldi	r31, 0x00	; 0
     b70:	80 81       	ld	r24, Z
     b72:	8e 7f       	andi	r24, 0xFE	; 254
     b74:	80 83       	st	Z, r24
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON  &= ~(1 << OTGPADE);
     b76:	8c 91       	ld	r24, X
     b78:	8f 7e       	andi	r24, 0xEF	; 239
     b7a:	8c 93       	st	X, r24

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
     b7c:	10 92 28 01 	sts	0x0128, r1
}
     b80:	08 95       	ret

00000b82 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     b82:	e8 ed       	ldi	r30, 0xD8	; 216
     b84:	f0 e0       	ldi	r31, 0x00	; 0
     b86:	80 81       	ld	r24, Z
     b88:	8c 7f       	andi	r24, 0xFC	; 252
     b8a:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
     b8c:	10 92 a0 00 	sts	0x00A0, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
	#endif
}
     b90:	08 95       	ret

00000b92 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     b92:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_BOTH)
	OTGINT = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
     b96:	10 92 9f 00 	sts	0x009F, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
	#endif
}
     b9a:	08 95       	ret

00000b9c <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
     b9c:	1f 92       	push	r1
     b9e:	0f 92       	push	r0
     ba0:	0f b6       	in	r0, 0x3f	; 63
     ba2:	0f 92       	push	r0
     ba4:	0b b6       	in	r0, 0x3b	; 59
     ba6:	0f 92       	push	r0
     ba8:	11 24       	eor	r1, r1
     baa:	2f 93       	push	r18
     bac:	3f 93       	push	r19
     bae:	4f 93       	push	r20
     bb0:	5f 93       	push	r21
     bb2:	6f 93       	push	r22
     bb4:	7f 93       	push	r23
     bb6:	8f 93       	push	r24
     bb8:	9f 93       	push	r25
     bba:	af 93       	push	r26
     bbc:	bf 93       	push	r27
     bbe:	ef 93       	push	r30
     bc0:	ff 93       	push	r31
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     bc2:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	#if defined(USB_CAN_BE_HOST)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
     bc6:	85 ff       	sbrs	r24, 5
     bc8:	0a c0       	rjmp	.+20     	; 0xbde <__vector_10+0x42>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     bca:	80 91 a0 00 	lds	r24, 0x00A0
     bce:	85 ff       	sbrs	r24, 5
     bd0:	06 c0       	rjmp	.+12     	; 0xbde <__vector_10+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     bd2:	80 91 9f 00 	lds	r24, 0x009F
     bd6:	8f 7d       	andi	r24, 0xDF	; 223
     bd8:	80 93 9f 00 	sts	0x009F, r24
	{
		USB_INT_Clear(USB_INT_HSOFI);

		EVENT_USB_Host_StartOfFrame();
     bdc:	be d1       	rcall	.+892    	; 0xf5a <USB_Event_Stub>
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
     bde:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
     be2:	81 ff       	sbrs	r24, 1
     be4:	15 c0       	rjmp	.+42     	; 0xc10 <__vector_10+0x74>
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
					case USB_INT_DCONNI:
						return (UHIEN  & (1 << DCONNE));
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
     be6:	80 91 a0 00 	lds	r24, 0x00A0
     bea:	81 ff       	sbrs	r24, 1
     bec:	11 c0       	rjmp	.+34     	; 0xc10 <__vector_10+0x74>
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     bee:	80 91 9f 00 	lds	r24, 0x009F
     bf2:	8d 7f       	andi	r24, 0xFD	; 253
     bf4:	80 93 9f 00 	sts	0x009F, r24
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     bf8:	80 91 9f 00 	lds	r24, 0x009F
     bfc:	8e 7f       	andi	r24, 0xFE	; 254
     bfe:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     c02:	80 91 a0 00 	lds	r24, 0x00A0
     c06:	8d 7f       	andi	r24, 0xFD	; 253
     c08:	80 93 a0 00 	sts	0x00A0, r24
	{
		USB_INT_Clear(USB_INT_DDISCI);
		USB_INT_Clear(USB_INT_DCONNI);
		USB_INT_Disable(USB_INT_DDISCI);

		EVENT_USB_Host_DeviceUnattached();
     c0c:	c6 db       	rcall	.-2164   	; 0x39a <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     c0e:	48 df       	rcall	.-368    	; 0xaa0 <USB_ResetInterface>
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
     c10:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
     c14:	81 ff       	sbrs	r24, 1
     c16:	15 c0       	rjmp	.+42     	; 0xc42 <__vector_10+0xa6>
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
     c18:	80 91 de 00 	lds	r24, 0x00DE
     c1c:	81 ff       	sbrs	r24, 1
     c1e:	11 c0       	rjmp	.+34     	; 0xc42 <__vector_10+0xa6>
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     c20:	80 91 df 00 	lds	r24, 0x00DF
     c24:	8d 7f       	andi	r24, 0xFD	; 253
     c26:	80 93 df 00 	sts	0x00DF, r24
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
     c2a:	77 98       	cbi	0x0e, 7	; 14
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     c2c:	80 91 dd 00 	lds	r24, 0x00DD
     c30:	81 60       	ori	r24, 0x01	; 1
     c32:	80 93 dd 00 	sts	0x00DD, r24
		USB_INT_Clear(USB_INT_VBERRI);

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
     c36:	80 e0       	ldi	r24, 0x00	; 0
     c38:	93 db       	rcall	.-2266   	; 0x360 <EVENT_USB_Host_HostError>
		EVENT_USB_Host_DeviceUnattached();
     c3a:	af db       	rcall	.-2210   	; 0x39a <EVENT_USB_Host_DeviceUnattached>

		USB_HostState = HOST_STATE_Unattached;
     c3c:	81 e0       	ldi	r24, 0x01	; 1
     c3e:	80 93 31 01 	sts	0x0131, r24
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
					case USB_INT_SRPI:
						return (OTGINT & (1 << SRPI));
     c42:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
     c46:	80 ff       	sbrs	r24, 0
     c48:	17 c0       	rjmp	.+46     	; 0xc78 <__vector_10+0xdc>
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
					case USB_INT_SRPI:
						return (OTGIEN & (1 << SRPE));
     c4a:	80 91 de 00 	lds	r24, 0x00DE
     c4e:	80 ff       	sbrs	r24, 0
     c50:	13 c0       	rjmp	.+38     	; 0xc78 <__vector_10+0xdc>
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
						break;
					case USB_INT_SRPI:
						OTGINT &= ~(1 << SRPI);
     c52:	80 91 df 00 	lds	r24, 0x00DF
     c56:	8e 7f       	andi	r24, 0xFE	; 254
     c58:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_VBERRI:
						OTGIEN &= ~(1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN &= ~(1 << SRPE);						
     c5c:	80 91 de 00 	lds	r24, 0x00DE
     c60:	8e 7f       	andi	r24, 0xFE	; 254
     c62:	80 93 de 00 	sts	0x00DE, r24
	{
		USB_INT_Clear(USB_INT_SRPI);
		USB_INT_Disable(USB_INT_SRPI);

		EVENT_USB_Host_DeviceAttached();
     c66:	a2 db       	rcall	.-2236   	; 0x3ac <EVENT_USB_Host_DeviceAttached>
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     c68:	80 91 a0 00 	lds	r24, 0x00A0
     c6c:	82 60       	ori	r24, 0x02	; 2
     c6e:	80 93 a0 00 	sts	0x00A0, r24

		USB_INT_Enable(USB_INT_DDISCI);

		USB_HostState = HOST_STATE_Powered;
     c72:	82 e0       	ldi	r24, 0x02	; 2
     c74:	80 93 31 01 	sts	0x0131, r24
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
     c78:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
     c7c:	82 ff       	sbrs	r24, 2
     c7e:	0e c0       	rjmp	.+28     	; 0xc9c <__vector_10+0x100>
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
     c80:	80 91 de 00 	lds	r24, 0x00DE
     c84:	82 ff       	sbrs	r24, 2
     c86:	0a c0       	rjmp	.+20     	; 0xc9c <__vector_10+0x100>
						break;
					case USB_INT_RSTI:
						UHINT  &= ~(1 << RSTI);
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
     c88:	80 91 df 00 	lds	r24, 0x00DF
     c8c:	8b 7f       	andi	r24, 0xFB	; 251
     c8e:	80 93 df 00 	sts	0x00DF, r24
	{
		USB_INT_Clear(USB_INT_BCERRI);

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
     c92:	82 e0       	ldi	r24, 0x02	; 2
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	38 db       	rcall	.-2448   	; 0x308 <EVENT_USB_Host_DeviceEnumerationFailed>
		EVENT_USB_Host_DeviceUnattached();
     c98:	80 db       	rcall	.-2304   	; 0x39a <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     c9a:	02 df       	rcall	.-508    	; 0xaa0 <USB_ResetInterface>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     c9c:	ff 91       	pop	r31
     c9e:	ef 91       	pop	r30
     ca0:	bf 91       	pop	r27
     ca2:	af 91       	pop	r26
     ca4:	9f 91       	pop	r25
     ca6:	8f 91       	pop	r24
     ca8:	7f 91       	pop	r23
     caa:	6f 91       	pop	r22
     cac:	5f 91       	pop	r21
     cae:	4f 91       	pop	r20
     cb0:	3f 91       	pop	r19
     cb2:	2f 91       	pop	r18
     cb4:	0f 90       	pop	r0
     cb6:	0b be       	out	0x3b, r0	; 59
     cb8:	0f 90       	pop	r0
     cba:	0f be       	out	0x3f, r0	; 63
     cbc:	0f 90       	pop	r0
     cbe:	1f 90       	pop	r1
     cc0:	18 95       	reti

00000cc2 <Pipe_Read_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     cc2:	bf 92       	push	r11
     cc4:	cf 92       	push	r12
     cc6:	df 92       	push	r13
     cc8:	ef 92       	push	r14
     cca:	ff 92       	push	r15
     ccc:	0f 93       	push	r16
     cce:	1f 93       	push	r17
     cd0:	cf 93       	push	r28
     cd2:	df 93       	push	r29
     cd4:	18 2f       	mov	r17, r24
     cd6:	09 2f       	mov	r16, r25
     cd8:	7b 01       	movw	r14, r22
     cda:	6a 01       	movw	r12, r20
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     cdc:	80 91 aa 00 	lds	r24, 0x00AA
     ce0:	8f 7c       	andi	r24, 0xCF	; 207
     ce2:	80 61       	ori	r24, 0x10	; 16
     ce4:	80 93 aa 00 	sts	0x00AA, r24
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
     ce8:	ac de       	rcall	.-680    	; 0xa42 <Pipe_WaitUntilReady>
     cea:	b8 2e       	mov	r11, r24
     cec:	88 23       	and	r24, r24
     cee:	a9 f5       	brne	.+106    	; 0xd5a <Pipe_Read_Stream_LE+0x98>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     cf0:	81 2f       	mov	r24, r17
     cf2:	90 2f       	mov	r25, r16
     cf4:	9c 01       	movw	r18, r24
     cf6:	e9 01       	movw	r28, r18
	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
     cf8:	c1 14       	cp	r12, r1
     cfa:	d1 04       	cpc	r13, r1
     cfc:	39 f0       	breq	.+14     	; 0xd0c <Pipe_Read_Stream_LE+0x4a>
	{
		Length -= *BytesProcessed;
     cfe:	f6 01       	movw	r30, r12
     d00:	80 81       	ld	r24, Z
     d02:	91 81       	ldd	r25, Z+1	; 0x01
     d04:	e8 1a       	sub	r14, r24
     d06:	f9 0a       	sbc	r15, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     d08:	c8 0f       	add	r28, r24
     d0a:	d9 1f       	adc	r29, r25
     d0c:	00 e0       	ldi	r16, 0x00	; 0
     d0e:	10 e0       	ldi	r17, 0x00	; 0
     d10:	21 c0       	rjmp	.+66     	; 0xd54 <Pipe_Read_Stream_LE+0x92>
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
     d12:	80 91 a6 00 	lds	r24, 0x00A6
	}
	
	while (Length)
	{
		if (!(Pipe_IsReadWriteAllowed()))
     d16:	85 fd       	sbrc	r24, 5
     d18:	15 c0       	rjmp	.+42     	; 0xd44 <Pipe_Read_Stream_LE+0x82>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     d1a:	80 91 a6 00 	lds	r24, 0x00A6
     d1e:	8e 77       	andi	r24, 0x7E	; 126
     d20:	80 93 a6 00 	sts	0x00A6, r24
		{
			TEMPLATE_CLEAR_PIPE();

			if (BytesProcessed != NULL)
     d24:	c1 14       	cp	r12, r1
     d26:	d1 04       	cpc	r13, r1
     d28:	49 f0       	breq	.+18     	; 0xd3c <Pipe_Read_Stream_LE+0x7a>
			{
				*BytesProcessed += BytesInTransfer;
     d2a:	f6 01       	movw	r30, r12
     d2c:	80 81       	ld	r24, Z
     d2e:	91 81       	ldd	r25, Z+1	; 0x01
     d30:	80 0f       	add	r24, r16
     d32:	91 1f       	adc	r25, r17
     d34:	91 83       	std	Z+1, r25	; 0x01
     d36:	80 83       	st	Z, r24
     d38:	84 e0       	ldi	r24, 0x04	; 4
     d3a:	10 c0       	rjmp	.+32     	; 0xd5c <Pipe_Read_Stream_LE+0x9a>
				return PIPE_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
     d3c:	82 de       	rcall	.-764    	; 0xa42 <Pipe_WaitUntilReady>
     d3e:	88 23       	and	r24, r24
     d40:	49 f0       	breq	.+18     	; 0xd54 <Pipe_Read_Stream_LE+0x92>
     d42:	0c c0       	rjmp	.+24     	; 0xd5c <Pipe_Read_Stream_LE+0x9a>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
     d44:	80 91 af 00 	lds	r24, 0x00AF
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
     d48:	89 93       	st	Y+, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
     d4a:	08 94       	sec
     d4c:	e1 08       	sbc	r14, r1
     d4e:	f1 08       	sbc	r15, r1
			BytesInTransfer++;
     d50:	0f 5f       	subi	r16, 0xFF	; 255
     d52:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}
	
	while (Length)
     d54:	e1 14       	cp	r14, r1
     d56:	f1 04       	cpc	r15, r1
     d58:	e1 f6       	brne	.-72     	; 0xd12 <Pipe_Read_Stream_LE+0x50>
     d5a:	8b 2d       	mov	r24, r11
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
     d5c:	df 91       	pop	r29
     d5e:	cf 91       	pop	r28
     d60:	1f 91       	pop	r17
     d62:	0f 91       	pop	r16
     d64:	ff 90       	pop	r15
     d66:	ef 90       	pop	r14
     d68:	df 90       	pop	r13
     d6a:	cf 90       	pop	r12
     d6c:	bf 90       	pop	r11
     d6e:	08 95       	ret

00000d70 <Pipe_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     d70:	bf 92       	push	r11
     d72:	cf 92       	push	r12
     d74:	df 92       	push	r13
     d76:	ef 92       	push	r14
     d78:	ff 92       	push	r15
     d7a:	0f 93       	push	r16
     d7c:	1f 93       	push	r17
     d7e:	cf 93       	push	r28
     d80:	df 93       	push	r29
     d82:	18 2f       	mov	r17, r24
     d84:	09 2f       	mov	r16, r25
     d86:	7b 01       	movw	r14, r22
     d88:	6a 01       	movw	r12, r20
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     d8a:	80 91 aa 00 	lds	r24, 0x00AA
     d8e:	8f 7c       	andi	r24, 0xCF	; 207
     d90:	80 62       	ori	r24, 0x20	; 32
     d92:	80 93 aa 00 	sts	0x00AA, r24
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
     d96:	55 de       	rcall	.-854    	; 0xa42 <Pipe_WaitUntilReady>
     d98:	b8 2e       	mov	r11, r24
     d9a:	88 23       	and	r24, r24
     d9c:	a9 f5       	brne	.+106    	; 0xe08 <Pipe_Write_Stream_LE+0x98>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     d9e:	81 2f       	mov	r24, r17
     da0:	90 2f       	mov	r25, r16
     da2:	9c 01       	movw	r18, r24
     da4:	e9 01       	movw	r28, r18
	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
     da6:	c1 14       	cp	r12, r1
     da8:	d1 04       	cpc	r13, r1
     daa:	39 f0       	breq	.+14     	; 0xdba <Pipe_Write_Stream_LE+0x4a>
	{
		Length -= *BytesProcessed;
     dac:	f6 01       	movw	r30, r12
     dae:	80 81       	ld	r24, Z
     db0:	91 81       	ldd	r25, Z+1	; 0x01
     db2:	e8 1a       	sub	r14, r24
     db4:	f9 0a       	sbc	r15, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     db6:	c8 0f       	add	r28, r24
     db8:	d9 1f       	adc	r29, r25
     dba:	00 e0       	ldi	r16, 0x00	; 0
     dbc:	10 e0       	ldi	r17, 0x00	; 0
     dbe:	21 c0       	rjmp	.+66     	; 0xe02 <Pipe_Write_Stream_LE+0x92>
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
     dc0:	80 91 a6 00 	lds	r24, 0x00A6
	}
	
	while (Length)
	{
		if (!(Pipe_IsReadWriteAllowed()))
     dc4:	85 fd       	sbrc	r24, 5
     dc6:	15 c0       	rjmp	.+42     	; 0xdf2 <Pipe_Write_Stream_LE+0x82>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
     dc8:	80 91 a6 00 	lds	r24, 0x00A6
     dcc:	8b 77       	andi	r24, 0x7B	; 123
     dce:	80 93 a6 00 	sts	0x00A6, r24
		{
			TEMPLATE_CLEAR_PIPE();

			if (BytesProcessed != NULL)
     dd2:	c1 14       	cp	r12, r1
     dd4:	d1 04       	cpc	r13, r1
     dd6:	49 f0       	breq	.+18     	; 0xdea <Pipe_Write_Stream_LE+0x7a>
			{
				*BytesProcessed += BytesInTransfer;
     dd8:	f6 01       	movw	r30, r12
     dda:	80 81       	ld	r24, Z
     ddc:	91 81       	ldd	r25, Z+1	; 0x01
     dde:	80 0f       	add	r24, r16
     de0:	91 1f       	adc	r25, r17
     de2:	91 83       	std	Z+1, r25	; 0x01
     de4:	80 83       	st	Z, r24
     de6:	84 e0       	ldi	r24, 0x04	; 4
     de8:	10 c0       	rjmp	.+32     	; 0xe0a <Pipe_Write_Stream_LE+0x9a>
				return PIPE_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
     dea:	2b de       	rcall	.-938    	; 0xa42 <Pipe_WaitUntilReady>
     dec:	88 23       	and	r24, r24
     dee:	49 f0       	breq	.+18     	; 0xe02 <Pipe_Write_Stream_LE+0x92>
     df0:	0c c0       	rjmp	.+24     	; 0xe0a <Pipe_Write_Stream_LE+0x9a>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
     df2:	89 91       	ld	r24, Y+
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
     df4:	80 93 af 00 	sts	0x00AF, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
     df8:	08 94       	sec
     dfa:	e1 08       	sbc	r14, r1
     dfc:	f1 08       	sbc	r15, r1
			BytesInTransfer++;
     dfe:	0f 5f       	subi	r16, 0xFF	; 255
     e00:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}
	
	while (Length)
     e02:	e1 14       	cp	r14, r1
     e04:	f1 04       	cpc	r15, r1
     e06:	e1 f6       	brne	.-72     	; 0xdc0 <Pipe_Write_Stream_LE+0x50>
     e08:	8b 2d       	mov	r24, r11
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
     e0a:	df 91       	pop	r29
     e0c:	cf 91       	pop	r28
     e0e:	1f 91       	pop	r17
     e10:	0f 91       	pop	r16
     e12:	ff 90       	pop	r15
     e14:	ef 90       	pop	r14
     e16:	df 90       	pop	r13
     e18:	cf 90       	pop	r12
     e1a:	bf 90       	pop	r11
     e1c:	08 95       	ret

00000e1e <USB_GetNextDescriptorComp>:

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
     e1e:	af 92       	push	r10
     e20:	bf 92       	push	r11
     e22:	cf 92       	push	r12
     e24:	df 92       	push	r13
     e26:	ef 92       	push	r14
     e28:	ff 92       	push	r15
     e2a:	0f 93       	push	r16
     e2c:	1f 93       	push	r17
     e2e:	cf 93       	push	r28
     e30:	df 93       	push	r29
     e32:	7c 01       	movw	r14, r24
     e34:	eb 01       	movw	r28, r22
     e36:	6a 01       	movw	r12, r20
     e38:	24 c0       	rjmp	.+72     	; 0xe82 <USB_GetNextDescriptorComp+0x64>
	uint8_t ErrorCode;

	while (*BytesRem)
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
     e3a:	e8 81       	ld	r30, Y
     e3c:	f9 81       	ldd	r31, Y+1	; 0x01
     e3e:	be 2e       	mov	r11, r30
     e40:	af 2e       	mov	r10, r31
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc)
			{
				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;
     e42:	80 81       	ld	r24, Z
     e44:	90 e0       	ldi	r25, 0x00	; 0
     e46:	98 01       	movw	r18, r16
     e48:	80 17       	cp	r24, r16
     e4a:	91 07       	cpc	r25, r17
     e4c:	08 f4       	brcc	.+2      	; 0xe50 <USB_GetNextDescriptorComp+0x32>
     e4e:	9c 01       	movw	r18, r24
				
				if (*BytesRem < CurrDescriptorSize)
				  CurrDescriptorSize = *BytesRem;

				*CurrConfigLoc  = (void*)((uintptr_t)*CurrConfigLoc + CurrDescriptorSize);
     e50:	e2 0f       	add	r30, r18
     e52:	f3 1f       	adc	r31, r19
     e54:	f9 83       	std	Y+1, r31	; 0x01
     e56:	e8 83       	st	Y, r30
				*BytesRem      -= CurrDescriptorSize;
     e58:	f7 01       	movw	r30, r14
     e5a:	80 81       	ld	r24, Z
     e5c:	91 81       	ldd	r25, Z+1	; 0x01
     e5e:	82 1b       	sub	r24, r18
     e60:	93 0b       	sbc	r25, r19
     e62:	91 83       	std	Z+1, r25	; 0x01
     e64:	80 83       	st	Z, r24
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
     e66:	88 81       	ld	r24, Y
     e68:	99 81       	ldd	r25, Y+1	; 0x01
     e6a:	f6 01       	movw	r30, r12
     e6c:	09 95       	icall
     e6e:	82 30       	cpi	r24, 0x02	; 2
     e70:	41 f0       	breq	.+16     	; 0xe82 <USB_GetNextDescriptorComp+0x64>
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
     e72:	81 30       	cpi	r24, 0x01	; 1
     e74:	69 f4       	brne	.+26     	; 0xe90 <USB_GetNextDescriptorComp+0x72>
			{
				*CurrConfigLoc = PrevDescLoc;
     e76:	b8 82       	st	Y, r11
     e78:	a9 82       	std	Y+1, r10	; 0x01
				*BytesRem      = PrevBytesRem;
     e7a:	f7 01       	movw	r30, r14
     e7c:	11 83       	std	Z+1, r17	; 0x01
     e7e:	00 83       	st	Z, r16
     e80:	07 c0       	rjmp	.+14     	; 0xe90 <USB_GetNextDescriptorComp+0x72>
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
	uint8_t ErrorCode;

	while (*BytesRem)
     e82:	f7 01       	movw	r30, r14
     e84:	00 81       	ld	r16, Z
     e86:	11 81       	ldd	r17, Z+1	; 0x01
     e88:	01 15       	cp	r16, r1
     e8a:	11 05       	cpc	r17, r1
     e8c:	b1 f6       	brne	.-84     	; 0xe3a <USB_GetNextDescriptorComp+0x1c>
     e8e:	82 e0       	ldi	r24, 0x02	; 2
			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
}
     e90:	df 91       	pop	r29
     e92:	cf 91       	pop	r28
     e94:	1f 91       	pop	r17
     e96:	0f 91       	pop	r16
     e98:	ff 90       	pop	r15
     e9a:	ef 90       	pop	r14
     e9c:	df 90       	pop	r13
     e9e:	cf 90       	pop	r12
     ea0:	bf 90       	pop	r11
     ea2:	af 90       	pop	r10
     ea4:	08 95       	ret

00000ea6 <USB_Host_GetDeviceConfigDescriptor>:
#if defined(USB_CAN_BE_HOST)
uint8_t USB_Host_GetDeviceConfigDescriptor(const uint8_t ConfigNumber,
                                           uint16_t* const ConfigSizePtr,
                                           void* const BufferPtr,
                                           const uint16_t BufferSize)
{
     ea6:	cf 92       	push	r12
     ea8:	df 92       	push	r13
     eaa:	ef 92       	push	r14
     eac:	ff 92       	push	r15
     eae:	0f 93       	push	r16
     eb0:	1f 93       	push	r17
     eb2:	df 93       	push	r29
     eb4:	cf 93       	push	r28
     eb6:	cd b7       	in	r28, 0x3d	; 61
     eb8:	de b7       	in	r29, 0x3e	; 62
     eba:	29 97       	sbiw	r28, 0x09	; 9
     ebc:	0f b6       	in	r0, 0x3f	; 63
     ebe:	f8 94       	cli
     ec0:	de bf       	out	0x3e, r29	; 62
     ec2:	0f be       	out	0x3f, r0	; 63
     ec4:	cd bf       	out	0x3d, r28	; 61
     ec6:	6b 01       	movw	r12, r22
     ec8:	8a 01       	movw	r16, r20
     eca:	79 01       	movw	r14, r18
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
     ecc:	90 e8       	ldi	r25, 0x80	; 128
     ece:	90 93 29 01 	sts	0x0129, r25
     ed2:	96 e0       	ldi	r25, 0x06	; 6
     ed4:	90 93 2a 01 	sts	0x012A, r25
     ed8:	90 e0       	ldi	r25, 0x00	; 0
     eda:	01 97       	sbiw	r24, 0x01	; 1
     edc:	92 60       	ori	r25, 0x02	; 2
     ede:	90 93 2c 01 	sts	0x012C, r25
     ee2:	80 93 2b 01 	sts	0x012B, r24
     ee6:	10 92 2e 01 	sts	0x012E, r1
     eea:	10 92 2d 01 	sts	0x012D, r1
     eee:	89 e0       	ldi	r24, 0x09	; 9
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	90 93 30 01 	sts	0x0130, r25
     ef6:	80 93 2f 01 	sts	0x012F, r24
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     efa:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = sizeof(USB_Descriptor_Configuration_Header_t),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(ConfigHeader)) != HOST_SENDCONTROL_Successful)
     efe:	ce 01       	movw	r24, r28
     f00:	01 96       	adiw	r24, 0x01	; 1
     f02:	55 d0       	rcall	.+170    	; 0xfae <USB_Host_SendControlRequest>
     f04:	28 2f       	mov	r18, r24
     f06:	88 23       	and	r24, r24
     f08:	c1 f4       	brne	.+48     	; 0xf3a <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);
     f0a:	8b 81       	ldd	r24, Y+3	; 0x03
     f0c:	9c 81       	ldd	r25, Y+4	; 0x04
     f0e:	f6 01       	movw	r30, r12
     f10:	91 83       	std	Z+1, r25	; 0x01
     f12:	80 83       	st	Z, r24

	if (*ConfigSizePtr > BufferSize)
     f14:	e8 16       	cp	r14, r24
     f16:	f9 06       	cpc	r15, r25
     f18:	10 f4       	brcc	.+4      	; 0xf1e <USB_Host_GetDeviceConfigDescriptor+0x78>
     f1a:	25 e0       	ldi	r18, 0x05	; 5
     f1c:	0e c0       	rjmp	.+28     	; 0xf3a <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return HOST_GETCONFIG_BuffOverflow;

	USB_ControlRequest.wLength = *ConfigSizePtr;
     f1e:	90 93 30 01 	sts	0x0130, r25
     f22:	80 93 2f 01 	sts	0x012F, r24

	if ((ErrorCode = USB_Host_SendControlRequest(BufferPtr)) != HOST_SENDCONTROL_Successful)
     f26:	c8 01       	movw	r24, r16
     f28:	42 d0       	rcall	.+132    	; 0xfae <USB_Host_SendControlRequest>
     f2a:	28 2f       	mov	r18, r24
     f2c:	88 23       	and	r24, r24
     f2e:	29 f4       	brne	.+10     	; 0xf3a <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
     f30:	f8 01       	movw	r30, r16
     f32:	81 81       	ldd	r24, Z+1	; 0x01
     f34:	82 30       	cpi	r24, 0x02	; 2
     f36:	09 f0       	breq	.+2      	; 0xf3a <USB_Host_GetDeviceConfigDescriptor+0x94>
     f38:	26 e0       	ldi	r18, 0x06	; 6
	  return HOST_GETCONFIG_InvalidData;

	return HOST_GETCONFIG_Successful;
}
     f3a:	82 2f       	mov	r24, r18
     f3c:	29 96       	adiw	r28, 0x09	; 9
     f3e:	0f b6       	in	r0, 0x3f	; 63
     f40:	f8 94       	cli
     f42:	de bf       	out	0x3e, r29	; 62
     f44:	0f be       	out	0x3f, r0	; 63
     f46:	cd bf       	out	0x3d, r28	; 61
     f48:	cf 91       	pop	r28
     f4a:	df 91       	pop	r29
     f4c:	1f 91       	pop	r17
     f4e:	0f 91       	pop	r16
     f50:	ff 90       	pop	r15
     f52:	ef 90       	pop	r14
     f54:	df 90       	pop	r13
     f56:	cf 90       	pop	r12
     f58:	08 95       	ret

00000f5a <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
     f5a:	08 95       	ret

00000f5c <USB_Host_WaitForIOS>:

	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
     f5c:	1f 93       	push	r17
     f5e:	cf 93       	push	r28
     f60:	df 93       	push	r29
     f62:	18 2f       	mov	r17, r24
     f64:	c8 ee       	ldi	r28, 0xE8	; 232
     f66:	d3 e0       	ldi	r29, 0x03	; 3
     f68:	09 c0       	rjmp	.+18     	; 0xf7c <USB_Host_WaitForIOS+0x20>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     f6a:	81 e0       	ldi	r24, 0x01	; 1
     f6c:	0e db       	rcall	.-2532   	; 0x58a <USB_Host_WaitMS>
     f6e:	88 23       	and	r24, r24
     f70:	d1 f4       	brne	.+52     	; 0xfa6 <USB_Host_WaitForIOS+0x4a>
		  return ErrorCode;

		if (!(TimeoutCounter--))
     f72:	20 97       	sbiw	r28, 0x00	; 0
     f74:	11 f4       	brne	.+4      	; 0xf7a <USB_Host_WaitForIOS+0x1e>
     f76:	84 e0       	ldi	r24, 0x04	; 4
     f78:	16 c0       	rjmp	.+44     	; 0xfa6 <USB_Host_WaitForIOS+0x4a>
     f7a:	21 97       	sbiw	r28, 0x01	; 1
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
     f7c:	11 23       	and	r17, r17
     f7e:	29 f4       	brne	.+10     	; 0xf8a <USB_Host_WaitForIOS+0x2e>
			 *  \return Boolean \c true if the current pipe is ready for a SETUP packet, \c false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
     f80:	80 91 a6 00 	lds	r24, 0x00A6
     f84:	83 ff       	sbrs	r24, 3
     f86:	f1 cf       	rjmp	.-30     	; 0xf6a <USB_Host_WaitForIOS+0xe>
     f88:	0d c0       	rjmp	.+26     	; 0xfa4 <USB_Host_WaitForIOS+0x48>
     f8a:	11 30       	cpi	r17, 0x01	; 1
     f8c:	29 f4       	brne	.+10     	; 0xf98 <USB_Host_WaitForIOS+0x3c>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     f8e:	80 91 a6 00 	lds	r24, 0x00A6
     f92:	80 ff       	sbrs	r24, 0
     f94:	ea cf       	rjmp	.-44     	; 0xf6a <USB_Host_WaitForIOS+0xe>
     f96:	06 c0       	rjmp	.+12     	; 0xfa4 <USB_Host_WaitForIOS+0x48>
     f98:	12 30       	cpi	r17, 0x02	; 2
     f9a:	39 f7       	brne	.-50     	; 0xf6a <USB_Host_WaitForIOS+0xe>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     f9c:	80 91 a6 00 	lds	r24, 0x00A6
     fa0:	82 ff       	sbrs	r24, 2
     fa2:	e3 cf       	rjmp	.-58     	; 0xf6a <USB_Host_WaitForIOS+0xe>
     fa4:	80 e0       	ldi	r24, 0x00	; 0
		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
}
     fa6:	df 91       	pop	r29
     fa8:	cf 91       	pop	r28
     faa:	1f 91       	pop	r17
     fac:	08 95       	ret

00000fae <USB_Host_SendControlRequest>:
#include "HostStandardReq.h"

uint8_t USB_Host_ConfigurationNumber;

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
     fae:	ff 92       	push	r15
     fb0:	0f 93       	push	r16
     fb2:	1f 93       	push	r17
     fb4:	cf 93       	push	r28
     fb6:	df 93       	push	r29
     fb8:	18 2f       	mov	r17, r24
     fba:	09 2f       	mov	r16, r25
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     fbc:	f0 90 9e 00 	lds	r15, 0x009E
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
	bool     BusSuspended = USB_Host_IsBusSuspended();
	uint8_t  ReturnStatus = HOST_SENDCONTROL_Successful;
	uint16_t DataLen      = USB_ControlRequest.wLength;
     fc0:	c0 91 2f 01 	lds	r28, 0x012F
     fc4:	d0 91 30 01 	lds	r29, 0x0130
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     fc8:	80 91 9e 00 	lds	r24, 0x009E
     fcc:	81 60       	ori	r24, 0x01	; 1
     fce:	80 93 9e 00 	sts	0x009E, r24

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     fd2:	81 e0       	ldi	r24, 0x01	; 1
     fd4:	da da       	rcall	.-2636   	; 0x58a <USB_Host_WaitMS>
     fd6:	98 2f       	mov	r25, r24
     fd8:	88 23       	and	r24, r24
     fda:	09 f0       	breq	.+2      	; 0xfde <USB_Host_SendControlRequest+0x30>
     fdc:	d7 c0       	rjmp	.+430    	; 0x118c <USB_Host_SendControlRequest+0x1de>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     fde:	80 91 aa 00 	lds	r24, 0x00AA
     fe2:	8f 7c       	andi	r24, 0xCF	; 207
     fe4:	80 93 aa 00 	sts	0x00AA, r24

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     fe8:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
     fec:	80 91 a6 00 	lds	r24, 0x00A6
     ff0:	8f 7e       	andi	r24, 0xEF	; 239
     ff2:	80 93 a6 00 	sts	0x00A6, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     ff6:	80 91 a9 00 	lds	r24, 0x00A9
     ffa:	8f 7b       	andi	r24, 0xBF	; 191
     ffc:	80 93 a9 00 	sts	0x00A9, r24
    1000:	e9 e2       	ldi	r30, 0x29	; 41
    1002:	f1 e0       	ldi	r31, 0x01	; 1
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
	  Pipe_Write_8(*(HeaderStream++));	
    1004:	81 91       	ld	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    1006:	80 93 af 00 	sts	0x00AF, r24
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
    100a:	81 e0       	ldi	r24, 0x01	; 1
    100c:	e1 33       	cpi	r30, 0x31	; 49
    100e:	f8 07       	cpc	r31, r24
    1010:	c9 f7       	brne	.-14     	; 0x1004 <USB_Host_SendControlRequest+0x56>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
    1012:	80 91 a6 00 	lds	r24, 0x00A6
    1016:	87 77       	andi	r24, 0x77	; 119
    1018:	80 93 a6 00 	sts	0x00A6, r24
	  Pipe_Write_8(*(HeaderStream++));	
	#endif
	
	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
    101c:	80 e0       	ldi	r24, 0x00	; 0
    101e:	9e df       	rcall	.-196    	; 0xf5c <USB_Host_WaitForIOS>
    1020:	98 2f       	mov	r25, r24
    1022:	88 23       	and	r24, r24
    1024:	09 f0       	breq	.+2      	; 0x1028 <USB_Host_SendControlRequest+0x7a>
    1026:	b2 c0       	rjmp	.+356    	; 0x118c <USB_Host_SendControlRequest+0x1de>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1028:	80 91 a9 00 	lds	r24, 0x00A9
    102c:	80 64       	ori	r24, 0x40	; 64
    102e:	80 93 a9 00 	sts	0x00A9, r24
	  goto End_Of_Control_Send;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1032:	81 e0       	ldi	r24, 0x01	; 1
    1034:	aa da       	rcall	.-2732   	; 0x58a <USB_Host_WaitMS>
    1036:	98 2f       	mov	r25, r24
    1038:	88 23       	and	r24, r24
    103a:	09 f0       	breq	.+2      	; 0x103e <USB_Host_SendControlRequest+0x90>
    103c:	a7 c0       	rjmp	.+334    	; 0x118c <USB_Host_SendControlRequest+0x1de>

uint8_t USB_Host_ConfigurationNumber;

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
    103e:	21 2f       	mov	r18, r17
    1040:	30 2f       	mov	r19, r16
    1042:	c9 01       	movw	r24, r18
    1044:	8c 01       	movw	r16, r24
	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
	  goto End_Of_Control_Send;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
    1046:	80 91 29 01 	lds	r24, 0x0129
    104a:	87 ff       	sbrs	r24, 7
    104c:	52 c0       	rjmp	.+164    	; 0x10f2 <USB_Host_SendControlRequest+0x144>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    104e:	80 91 aa 00 	lds	r24, 0x00AA
    1052:	8f 7c       	andi	r24, 0xCF	; 207
    1054:	80 61       	ori	r24, 0x10	; 16
    1056:	80 93 aa 00 	sts	0x00AA, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
    105a:	01 15       	cp	r16, r1
    105c:	11 05       	cpc	r17, r1
    105e:	69 f5       	brne	.+90     	; 0x10ba <USB_Host_SendControlRequest+0x10c>
    1060:	2e c0       	rjmp	.+92     	; 0x10be <USB_Host_SendControlRequest+0x110>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1062:	80 91 a9 00 	lds	r24, 0x00A9
    1066:	8f 7b       	andi	r24, 0xBF	; 191
    1068:	80 93 a9 00 	sts	0x00A9, r24
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    106c:	81 e0       	ldi	r24, 0x01	; 1
    106e:	76 df       	rcall	.-276    	; 0xf5c <USB_Host_WaitForIOS>
    1070:	98 2f       	mov	r25, r24
    1072:	88 23       	and	r24, r24
    1074:	09 f0       	breq	.+2      	; 0x1078 <USB_Host_SendControlRequest+0xca>
    1076:	8a c0       	rjmp	.+276    	; 0x118c <USB_Host_SendControlRequest+0x1de>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1078:	80 91 f6 00 	lds	r24, 0x00F6
    107c:	90 91 f7 00 	lds	r25, 0x00F7
				  goto End_Of_Control_Send;

				if (!(Pipe_BytesInPipe()))
    1080:	89 2b       	or	r24, r25
    1082:	49 f4       	brne	.+18     	; 0x1096 <USB_Host_SendControlRequest+0xe8>
    1084:	c0 e0       	ldi	r28, 0x00	; 0
    1086:	d0 e0       	ldi	r29, 0x00	; 0
    1088:	06 c0       	rjmp	.+12     	; 0x1096 <USB_Host_SendControlRequest+0xe8>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    108a:	80 91 af 00 	lds	r24, 0x00AF
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
				{
					*(DataStream++) = Pipe_Read_8();
    108e:	f8 01       	movw	r30, r16
    1090:	81 93       	st	Z+, r24
    1092:	8f 01       	movw	r16, r30
					DataLen--;
    1094:	21 97       	sbiw	r28, 0x01	; 1
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1096:	80 91 f6 00 	lds	r24, 0x00F6
    109a:	90 91 f7 00 	lds	r25, 0x00F7
				  goto End_Of_Control_Send;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
    109e:	89 2b       	or	r24, r25
    10a0:	11 f0       	breq	.+4      	; 0x10a6 <USB_Host_SendControlRequest+0xf8>
    10a2:	20 97       	sbiw	r28, 0x00	; 0
    10a4:	91 f7       	brne	.-28     	; 0x108a <USB_Host_SendControlRequest+0xdc>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    10a6:	80 91 a9 00 	lds	r24, 0x00A9
    10aa:	80 64       	ori	r24, 0x40	; 64
    10ac:	80 93 a9 00 	sts	0x00A9, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    10b0:	80 91 a6 00 	lds	r24, 0x00A6
    10b4:	8e 77       	andi	r24, 0x7E	; 126
    10b6:	80 93 a6 00 	sts	0x00A6, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
    10ba:	20 97       	sbiw	r28, 0x00	; 0
    10bc:	91 f6       	brne	.-92     	; 0x1062 <USB_Host_SendControlRequest+0xb4>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    10be:	80 91 aa 00 	lds	r24, 0x00AA
    10c2:	8f 7c       	andi	r24, 0xCF	; 207
    10c4:	80 62       	ori	r24, 0x20	; 32
    10c6:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    10ca:	80 91 a9 00 	lds	r24, 0x00A9
    10ce:	8f 7b       	andi	r24, 0xBF	; 191
    10d0:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    10d4:	82 e0       	ldi	r24, 0x02	; 2
    10d6:	42 df       	rcall	.-380    	; 0xf5c <USB_Host_WaitForIOS>
    10d8:	98 2f       	mov	r25, r24
    10da:	88 23       	and	r24, r24
    10dc:	09 f0       	breq	.+2      	; 0x10e0 <USB_Host_SendControlRequest+0x132>
    10de:	56 c0       	rjmp	.+172    	; 0x118c <USB_Host_SendControlRequest+0x1de>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    10e0:	80 91 a6 00 	lds	r24, 0x00A6
    10e4:	8b 77       	andi	r24, 0x7B	; 123
    10e6:	80 93 a6 00 	sts	0x00A6, r24
		  goto End_Of_Control_Send;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    10ea:	82 e0       	ldi	r24, 0x02	; 2
    10ec:	37 df       	rcall	.-402    	; 0xf5c <USB_Host_WaitForIOS>
    10ee:	98 2f       	mov	r25, r24
    10f0:	4d c0       	rjmp	.+154    	; 0x118c <USB_Host_SendControlRequest+0x1de>
		  goto End_Of_Control_Send;
	}
	else
	{
		if (DataStream != NULL)
    10f2:	01 15       	cp	r16, r1
    10f4:	11 05       	cpc	r17, r1
    10f6:	a9 f1       	breq	.+106    	; 0x1162 <USB_Host_SendControlRequest+0x1b4>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    10f8:	80 91 aa 00 	lds	r24, 0x00AA
    10fc:	8f 7c       	andi	r24, 0xCF	; 207
    10fe:	80 62       	ori	r24, 0x20	; 32
    1100:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1104:	80 91 a9 00 	lds	r24, 0x00A9
    1108:	8f 7b       	andi	r24, 0xBF	; 191
    110a:	80 93 a9 00 	sts	0x00A9, r24
    110e:	1d c0       	rjmp	.+58     	; 0x114a <USB_Host_SendControlRequest+0x19c>
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1110:	82 e0       	ldi	r24, 0x02	; 2
    1112:	24 df       	rcall	.-440    	; 0xf5c <USB_Host_WaitForIOS>
    1114:	98 2f       	mov	r25, r24
    1116:	88 23       	and	r24, r24
    1118:	c9 f5       	brne	.+114    	; 0x118c <USB_Host_SendControlRequest+0x1de>
				  goto End_Of_Control_Send;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    111a:	80 91 23 01 	lds	r24, 0x0123
    111e:	28 2f       	mov	r18, r24
    1120:	30 e0       	ldi	r19, 0x00	; 0
    1122:	07 c0       	rjmp	.+14     	; 0x1132 <USB_Host_SendControlRequest+0x184>
				{
					Pipe_Write_8(*(DataStream++));
    1124:	f8 01       	movw	r30, r16
    1126:	81 91       	ld	r24, Z+
    1128:	8f 01       	movw	r16, r30
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    112a:	80 93 af 00 	sts	0x00AF, r24
					DataLen--;
    112e:	21 97       	sbiw	r28, 0x01	; 1
			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
				  goto End_Of_Control_Send;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    1130:	39 f0       	breq	.+14     	; 0x1140 <USB_Host_SendControlRequest+0x192>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1132:	80 91 f6 00 	lds	r24, 0x00F6
    1136:	90 91 f7 00 	lds	r25, 0x00F7
    113a:	82 17       	cp	r24, r18
    113c:	93 07       	cpc	r25, r19
    113e:	90 f3       	brcs	.-28     	; 0x1124 <USB_Host_SendControlRequest+0x176>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1140:	80 91 a6 00 	lds	r24, 0x00A6
    1144:	8b 77       	andi	r24, 0x7B	; 123
    1146:	80 93 a6 00 	sts	0x00A6, r24
		if (DataStream != NULL)
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
    114a:	20 97       	sbiw	r28, 0x00	; 0
    114c:	09 f7       	brne	.-62     	; 0x1110 <USB_Host_SendControlRequest+0x162>
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    114e:	82 e0       	ldi	r24, 0x02	; 2
    1150:	05 df       	rcall	.-502    	; 0xf5c <USB_Host_WaitForIOS>
    1152:	98 2f       	mov	r25, r24
    1154:	88 23       	and	r24, r24
    1156:	d1 f4       	brne	.+52     	; 0x118c <USB_Host_SendControlRequest+0x1de>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1158:	80 91 a9 00 	lds	r24, 0x00A9
    115c:	80 64       	ori	r24, 0x40	; 64
    115e:	80 93 a9 00 	sts	0x00A9, r24
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1162:	80 91 aa 00 	lds	r24, 0x00AA
    1166:	8f 7c       	andi	r24, 0xCF	; 207
    1168:	80 61       	ori	r24, 0x10	; 16
    116a:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    116e:	80 91 a9 00 	lds	r24, 0x00A9
    1172:	8f 7b       	andi	r24, 0xBF	; 191
    1174:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    1178:	81 e0       	ldi	r24, 0x01	; 1
    117a:	f0 de       	rcall	.-544    	; 0xf5c <USB_Host_WaitForIOS>
    117c:	98 2f       	mov	r25, r24
    117e:	88 23       	and	r24, r24
    1180:	29 f4       	brne	.+10     	; 0x118c <USB_Host_SendControlRequest+0x1de>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1182:	80 91 a6 00 	lds	r24, 0x00A6
    1186:	8e 77       	andi	r24, 0x7E	; 126
    1188:	80 93 a6 00 	sts	0x00A6, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    118c:	80 91 a9 00 	lds	r24, 0x00A9
    1190:	80 64       	ori	r24, 0x40	; 64
    1192:	80 93 a9 00 	sts	0x00A9, r24
	}

End_Of_Control_Send:
	Pipe_Freeze();

	if (BusSuspended)
    1196:	f0 fc       	sbrc	r15, 0
    1198:	05 c0       	rjmp	.+10     	; 0x11a4 <USB_Host_SendControlRequest+0x1f6>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    119a:	80 91 9e 00 	lds	r24, 0x009E
    119e:	8e 7f       	andi	r24, 0xFE	; 254
    11a0:	80 93 9e 00 	sts	0x009E, r24
			 *  \param[in] PipeNumber  Index of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t PipeNumber)
			{
				UPRST = (1 << PipeNumber);
    11a4:	81 e0       	ldi	r24, 0x01	; 1
    11a6:	80 93 a8 00 	sts	0x00A8, r24
				UPRST = 0;
    11aa:	10 92 a8 00 	sts	0x00A8, r1
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
    11ae:	89 2f       	mov	r24, r25
    11b0:	df 91       	pop	r29
    11b2:	cf 91       	pop	r28
    11b4:	1f 91       	pop	r17
    11b6:	0f 91       	pop	r16
    11b8:	ff 90       	pop	r15
    11ba:	08 95       	ret

000011bc <USB_Host_ClearEndpointStall>:
	return USB_Host_SendControlRequest(FeatureStatus);
}

uint8_t USB_Host_ClearEndpointStall(const uint8_t EndpointAddress)
{
	USB_ControlRequest = (USB_Request_Header_t)
    11bc:	92 e0       	ldi	r25, 0x02	; 2
    11be:	90 93 29 01 	sts	0x0129, r25
    11c2:	91 e0       	ldi	r25, 0x01	; 1
    11c4:	90 93 2a 01 	sts	0x012A, r25
    11c8:	10 92 2c 01 	sts	0x012C, r1
    11cc:	10 92 2b 01 	sts	0x012B, r1
    11d0:	80 93 2d 01 	sts	0x012D, r24
    11d4:	10 92 2e 01 	sts	0x012E, r1
    11d8:	10 92 30 01 	sts	0x0130, r1
    11dc:	10 92 2f 01 	sts	0x012F, r1
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    11e0:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	return USB_Host_SendControlRequest(NULL);
    11e4:	80 e0       	ldi	r24, 0x00	; 0
    11e6:	90 e0       	ldi	r25, 0x00	; 0
}
    11e8:	e2 ce       	rjmp	.-572    	; 0xfae <USB_Host_SendControlRequest>

000011ea <USB_Host_SetDeviceConfiguration>:

	return HOST_SENDCONTROL_Successful;
}

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
    11ea:	1f 93       	push	r17
    11ec:	18 2f       	mov	r17, r24
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
    11ee:	10 92 29 01 	sts	0x0129, r1
    11f2:	89 e0       	ldi	r24, 0x09	; 9
    11f4:	80 93 2a 01 	sts	0x012A, r24
    11f8:	10 93 2b 01 	sts	0x012B, r17
    11fc:	10 92 2c 01 	sts	0x012C, r1
    1200:	10 92 2e 01 	sts	0x012E, r1
    1204:	10 92 2d 01 	sts	0x012D, r1
    1208:	10 92 30 01 	sts	0x0130, r1
    120c:	10 92 2f 01 	sts	0x012F, r1
    1210:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);
	
	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) == HOST_SENDCONTROL_Successful)
    1214:	80 e0       	ldi	r24, 0x00	; 0
    1216:	90 e0       	ldi	r25, 0x00	; 0
    1218:	ca de       	rcall	.-620    	; 0xfae <USB_Host_SendControlRequest>
    121a:	88 23       	and	r24, r24
    121c:	49 f4       	brne	.+18     	; 0x1230 <USB_Host_SetDeviceConfiguration+0x46>
	{
		USB_Host_ConfigurationNumber = ConfigNumber;
    121e:	10 93 27 01 	sts	0x0127, r17
		USB_HostState                = (ConfigNumber) ? HOST_STATE_Configured : HOST_STATE_Addressed;
    1222:	11 23       	and	r17, r17
    1224:	11 f4       	brne	.+4      	; 0x122a <USB_Host_SetDeviceConfiguration+0x40>
    1226:	9a e0       	ldi	r25, 0x0A	; 10
    1228:	01 c0       	rjmp	.+2      	; 0x122c <USB_Host_SetDeviceConfiguration+0x42>
    122a:	9b e0       	ldi	r25, 0x0B	; 11
    122c:	90 93 31 01 	sts	0x0131, r25
	}

	return ErrorCode;
}
    1230:	1f 91       	pop	r17
    1232:	08 95       	ret

00001234 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    1234:	ff 92       	push	r15
    1236:	0f 93       	push	r16
    1238:	1f 93       	push	r17
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
    123a:	07 ea       	ldi	r16, 0xA7	; 167
    123c:	10 e0       	ldi	r17, 0x00	; 0
    123e:	f8 01       	movw	r30, r16
    1240:	f0 80       	ld	r15, Z
    1242:	f7 e0       	ldi	r31, 0x07	; 7
    1244:	ff 22       	and	r15, r31
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1246:	f8 01       	movw	r30, r16
    1248:	10 82       	st	Z, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    124a:	3c da       	rcall	.-2952   	; 0x6c4 <USB_Host_ProcessNextHostState>
    124c:	f8 01       	movw	r30, r16
    124e:	f0 82       	st	Z, r15
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
    1250:	1f 91       	pop	r17
    1252:	0f 91       	pop	r16
    1254:	ff 90       	pop	r15
    1256:	08 95       	ret

00001258 <DCOMP_SI_Host_NextSIInterface>:

	return SI_ENUMERROR_NoError;
}

uint8_t DCOMP_SI_Host_NextSIInterface(void* const CurrentDescriptor)
{
    1258:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
    125a:	81 81       	ldd	r24, Z+1	; 0x01
    125c:	84 30       	cpi	r24, 0x04	; 4
    125e:	59 f4       	brne	.+22     	; 0x1276 <DCOMP_SI_Host_NextSIInterface+0x1e>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		if ((Interface->Class    == SI_CSCP_StillImageClass)    &&
    1260:	85 81       	ldd	r24, Z+5	; 0x05
    1262:	86 30       	cpi	r24, 0x06	; 6
    1264:	41 f4       	brne	.+16     	; 0x1276 <DCOMP_SI_Host_NextSIInterface+0x1e>
    1266:	86 81       	ldd	r24, Z+6	; 0x06
    1268:	81 30       	cpi	r24, 0x01	; 1
    126a:	29 f4       	brne	.+10     	; 0x1276 <DCOMP_SI_Host_NextSIInterface+0x1e>
    126c:	87 81       	ldd	r24, Z+7	; 0x07
    126e:	81 30       	cpi	r24, 0x01	; 1
    1270:	11 f4       	brne	.+4      	; 0x1276 <DCOMP_SI_Host_NextSIInterface+0x1e>
    1272:	80 e0       	ldi	r24, 0x00	; 0
    1274:	08 95       	ret
    1276:	82 e0       	ldi	r24, 0x02	; 2
			return DESCRIPTOR_SEARCH_Found;
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    1278:	08 95       	ret

0000127a <SI_Host_SendBlockHeader>:
	return DESCRIPTOR_SEARCH_NotFound;
}

uint8_t SI_Host_SendBlockHeader(USB_ClassInfo_SI_Host_t* const SIInterfaceInfo,
                                PIMA_Container_t* const PIMAHeader)
{
    127a:	1f 93       	push	r17
    127c:	cf 93       	push	r28
    127e:	df 93       	push	r29
    1280:	fc 01       	movw	r30, r24
    1282:	eb 01       	movw	r28, r22
	uint8_t ErrorCode;

	if ((USB_HostState != HOST_STATE_Configured) || !(SIInterfaceInfo->State.IsActive))
    1284:	80 91 31 01 	lds	r24, 0x0131
    1288:	8b 30       	cpi	r24, 0x0B	; 11
    128a:	09 f0       	breq	.+2      	; 0x128e <SI_Host_SendBlockHeader+0x14>
    128c:	3e c0       	rjmp	.+124    	; 0x130a <SI_Host_SendBlockHeader+0x90>
    128e:	86 81       	ldd	r24, Z+6	; 0x06
    1290:	88 23       	and	r24, r24
    1292:	d9 f1       	breq	.+118    	; 0x130a <SI_Host_SendBlockHeader+0x90>
	  return PIPE_RWSTREAM_DeviceDisconnected;

	if (SIInterfaceInfo->State.IsSessionOpen)
    1294:	86 85       	ldd	r24, Z+14	; 0x0e
    1296:	88 23       	and	r24, r24
    1298:	79 f0       	breq	.+30     	; 0x12b8 <SI_Host_SendBlockHeader+0x3e>
	  PIMAHeader->TransactionID = cpu_to_le32(SIInterfaceInfo->State.TransactionID++);
    129a:	87 85       	ldd	r24, Z+15	; 0x0f
    129c:	90 89       	ldd	r25, Z+16	; 0x10
    129e:	a1 89       	ldd	r26, Z+17	; 0x11
    12a0:	b2 89       	ldd	r27, Z+18	; 0x12
    12a2:	88 87       	std	Y+8, r24	; 0x08
    12a4:	99 87       	std	Y+9, r25	; 0x09
    12a6:	aa 87       	std	Y+10, r26	; 0x0a
    12a8:	bb 87       	std	Y+11, r27	; 0x0b
    12aa:	01 96       	adiw	r24, 0x01	; 1
    12ac:	a1 1d       	adc	r26, r1
    12ae:	b1 1d       	adc	r27, r1
    12b0:	87 87       	std	Z+15, r24	; 0x0f
    12b2:	90 8b       	std	Z+16, r25	; 0x10
    12b4:	a1 8b       	std	Z+17, r26	; 0x11
    12b6:	b2 8b       	std	Z+18, r27	; 0x12

	Pipe_SelectPipe(SIInterfaceInfo->Config.DataOUTPipeNumber);
    12b8:	82 81       	ldd	r24, Z+2	; 0x02
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    12ba:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    12be:	80 91 a9 00 	lds	r24, 0x00A9
    12c2:	8f 7b       	andi	r24, 0xBF	; 191
    12c4:	80 93 a9 00 	sts	0x00A9, r24
	Pipe_Unfreeze();

	if ((ErrorCode = Pipe_Write_Stream_LE(PIMAHeader, PIMA_COMMAND_SIZE(0), NULL)) != PIPE_RWSTREAM_NoError)
    12c8:	ce 01       	movw	r24, r28
    12ca:	6c e0       	ldi	r22, 0x0C	; 12
    12cc:	70 e0       	ldi	r23, 0x00	; 0
    12ce:	40 e0       	ldi	r20, 0x00	; 0
    12d0:	50 e0       	ldi	r21, 0x00	; 0
    12d2:	4e dd       	rcall	.-1380   	; 0xd70 <Pipe_Write_Stream_LE>
    12d4:	18 2f       	mov	r17, r24
    12d6:	88 23       	and	r24, r24
    12d8:	c9 f4       	brne	.+50     	; 0x130c <SI_Host_SendBlockHeader+0x92>
	  return ErrorCode;

	uint8_t ParamBytes = (PIMAHeader->DataLength - PIMA_COMMAND_SIZE(0));
    12da:	68 81       	ld	r22, Y
    12dc:	6c 50       	subi	r22, 0x0C	; 12

	if (ParamBytes)
    12de:	51 f0       	breq	.+20     	; 0x12f4 <SI_Host_SendBlockHeader+0x7a>
	{
		if ((ErrorCode = Pipe_Write_Stream_LE(&PIMAHeader->Params, ParamBytes, NULL)) != PIPE_RWSTREAM_NoError)
    12e0:	ce 01       	movw	r24, r28
    12e2:	0c 96       	adiw	r24, 0x0c	; 12
    12e4:	70 e0       	ldi	r23, 0x00	; 0
    12e6:	40 e0       	ldi	r20, 0x00	; 0
    12e8:	50 e0       	ldi	r21, 0x00	; 0
    12ea:	42 dd       	rcall	.-1404   	; 0xd70 <Pipe_Write_Stream_LE>
    12ec:	88 23       	and	r24, r24
    12ee:	11 f0       	breq	.+4      	; 0x12f4 <SI_Host_SendBlockHeader+0x7a>
    12f0:	18 2f       	mov	r17, r24
    12f2:	0c c0       	rjmp	.+24     	; 0x130c <SI_Host_SendBlockHeader+0x92>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    12f4:	80 91 a6 00 	lds	r24, 0x00A6
    12f8:	8b 77       	andi	r24, 0x7B	; 123
    12fa:	80 93 a6 00 	sts	0x00A6, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    12fe:	80 91 a9 00 	lds	r24, 0x00A9
    1302:	80 64       	ori	r24, 0x40	; 64
    1304:	80 93 a9 00 	sts	0x00A9, r24
    1308:	01 c0       	rjmp	.+2      	; 0x130c <SI_Host_SendBlockHeader+0x92>
	}

	Pipe_ClearOUT();
	Pipe_Freeze();

	return PIPE_RWSTREAM_NoError;
    130a:	12 e0       	ldi	r17, 0x02	; 2
}
    130c:	81 2f       	mov	r24, r17
    130e:	df 91       	pop	r29
    1310:	cf 91       	pop	r28
    1312:	1f 91       	pop	r17
    1314:	08 95       	ret

00001316 <SI_Host_SendCommand>:

uint8_t SI_Host_SendCommand(USB_ClassInfo_SI_Host_t* const SIInterfaceInfo,
                            const uint16_t Operation,
                            const uint8_t TotalParams,
                            uint32_t* const Params)
{
    1316:	df 92       	push	r13
    1318:	ef 92       	push	r14
    131a:	ff 92       	push	r15
    131c:	0f 93       	push	r16
    131e:	1f 93       	push	r17
    1320:	df 93       	push	r29
    1322:	cf 93       	push	r28
    1324:	cd b7       	in	r28, 0x3d	; 61
    1326:	de b7       	in	r29, 0x3e	; 62
    1328:	68 97       	sbiw	r28, 0x18	; 24
    132a:	0f b6       	in	r0, 0x3f	; 63
    132c:	f8 94       	cli
    132e:	de bf       	out	0x3e, r29	; 62
    1330:	0f be       	out	0x3f, r0	; 63
    1332:	cd bf       	out	0x3d, r28	; 61
    1334:	7c 01       	movw	r14, r24
    1336:	52 2f       	mov	r21, r18
    1338:	d3 2e       	mov	r13, r19
	if ((USB_HostState != HOST_STATE_Configured) || !(SIInterfaceInfo->State.IsActive))
    133a:	80 91 31 01 	lds	r24, 0x0131
    133e:	8b 30       	cpi	r24, 0x0B	; 11
    1340:	89 f5       	brne	.+98     	; 0x13a4 <SI_Host_SendCommand+0x8e>
    1342:	d7 01       	movw	r26, r14
    1344:	16 96       	adiw	r26, 0x06	; 6
    1346:	8c 91       	ld	r24, X
    1348:	88 23       	and	r24, r24
    134a:	61 f1       	breq	.+88     	; 0x13a4 <SI_Host_SendCommand+0x8e>
	PIMA_Container_t PIMABlock = (PIMA_Container_t)
		{
			.DataLength    = cpu_to_le32(PIMA_COMMAND_SIZE(TotalParams)),
			.Type          = CPU_TO_LE16(PIMA_CONTAINER_CommandBlock),
			.Code          = cpu_to_le16(Operation),
		};
    134c:	e4 2f       	mov	r30, r20
    134e:	f0 e0       	ldi	r31, 0x00	; 0
    1350:	8e 01       	movw	r16, r28
    1352:	0f 5f       	subi	r16, 0xFF	; 255
    1354:	1f 4f       	sbci	r17, 0xFF	; 255
    1356:	88 e1       	ldi	r24, 0x18	; 24
    1358:	d8 01       	movw	r26, r16
    135a:	1d 92       	st	X+, r1
    135c:	8a 95       	dec	r24
    135e:	e9 f7       	brne	.-6      	; 0x135a <SI_Host_SendCommand+0x44>
    1360:	cf 01       	movw	r24, r30
    1362:	03 96       	adiw	r24, 0x03	; 3
    1364:	88 0f       	add	r24, r24
    1366:	99 1f       	adc	r25, r25
    1368:	88 0f       	add	r24, r24
    136a:	99 1f       	adc	r25, r25
    136c:	a0 e0       	ldi	r26, 0x00	; 0
    136e:	b0 e0       	ldi	r27, 0x00	; 0
    1370:	89 83       	std	Y+1, r24	; 0x01
    1372:	9a 83       	std	Y+2, r25	; 0x02
    1374:	ab 83       	std	Y+3, r26	; 0x03
    1376:	bc 83       	std	Y+4, r27	; 0x04
    1378:	81 e0       	ldi	r24, 0x01	; 1
    137a:	90 e0       	ldi	r25, 0x00	; 0
    137c:	9e 83       	std	Y+6, r25	; 0x06
    137e:	8d 83       	std	Y+5, r24	; 0x05
    1380:	78 87       	std	Y+8, r23	; 0x08
    1382:	6f 83       	std	Y+7, r22	; 0x07

	memcpy(&PIMABlock.Params, Params, sizeof(uint32_t) * TotalParams);
    1384:	9e 01       	movw	r18, r28
    1386:	23 5f       	subi	r18, 0xF3	; 243
    1388:	3f 4f       	sbci	r19, 0xFF	; 255
    138a:	ee 0f       	add	r30, r30
    138c:	ff 1f       	adc	r31, r31
    138e:	ee 0f       	add	r30, r30
    1390:	ff 1f       	adc	r31, r31
    1392:	c9 01       	movw	r24, r18
    1394:	65 2f       	mov	r22, r21
    1396:	7d 2d       	mov	r23, r13
    1398:	af 01       	movw	r20, r30
    139a:	9f d2       	rcall	.+1342   	; 0x18da <memcpy>

	if ((ErrorCode = SI_Host_SendBlockHeader(SIInterfaceInfo, &PIMABlock)) != PIPE_RWSTREAM_NoError)
    139c:	c7 01       	movw	r24, r14
    139e:	b8 01       	movw	r22, r16
    13a0:	6c df       	rcall	.-296    	; 0x127a <SI_Host_SendBlockHeader>
    13a2:	01 c0       	rjmp	.+2      	; 0x13a6 <SI_Host_SendCommand+0x90>
    13a4:	82 e0       	ldi	r24, 0x02	; 2
	  return ErrorCode;

	return PIPE_RWSTREAM_NoError;
}
    13a6:	68 96       	adiw	r28, 0x18	; 24
    13a8:	0f b6       	in	r0, 0x3f	; 63
    13aa:	f8 94       	cli
    13ac:	de bf       	out	0x3e, r29	; 62
    13ae:	0f be       	out	0x3f, r0	; 63
    13b0:	cd bf       	out	0x3d, r28	; 61
    13b2:	cf 91       	pop	r28
    13b4:	df 91       	pop	r29
    13b6:	1f 91       	pop	r17
    13b8:	0f 91       	pop	r16
    13ba:	ff 90       	pop	r15
    13bc:	ef 90       	pop	r14
    13be:	df 90       	pop	r13
    13c0:	08 95       	ret

000013c2 <SI_Host_ReceiveBlockHeader>:
	return PIPE_RWSTREAM_NoError;
}

uint8_t SI_Host_ReceiveBlockHeader(USB_ClassInfo_SI_Host_t* const SIInterfaceInfo,
                                   PIMA_Container_t* const PIMAHeader)
{
    13c2:	cf 93       	push	r28
    13c4:	df 93       	push	r29
    13c6:	fc 01       	movw	r30, r24
    13c8:	eb 01       	movw	r28, r22
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
    13ca:	40 91 a2 00 	lds	r20, 0x00A2
    13ce:	50 91 a3 00 	lds	r21, 0x00A3
	uint16_t TimeoutMSRem        = SI_COMMAND_DATA_TIMEOUT_MS;
	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	if ((USB_HostState != HOST_STATE_Configured) || !(SIInterfaceInfo->State.IsActive))
    13d2:	80 91 31 01 	lds	r24, 0x0131
    13d6:	8b 30       	cpi	r24, 0x0B	; 11
    13d8:	09 f0       	breq	.+2      	; 0x13dc <SI_Host_ReceiveBlockHeader+0x1a>
    13da:	75 c0       	rjmp	.+234    	; 0x14c6 <SI_Host_ReceiveBlockHeader+0x104>
    13dc:	86 81       	ldd	r24, Z+6	; 0x06
    13de:	88 23       	and	r24, r24
    13e0:	09 f4       	brne	.+2      	; 0x13e4 <SI_Host_ReceiveBlockHeader+0x22>
    13e2:	71 c0       	rjmp	.+226    	; 0x14c6 <SI_Host_ReceiveBlockHeader+0x104>
	  return PIPE_RWSTREAM_DeviceDisconnected;

	Pipe_SelectPipe(SIInterfaceInfo->Config.DataINPipeNumber);
    13e4:	60 81       	ld	r22, Z
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    13e6:	60 93 a7 00 	sts	0x00A7, r22

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    13ea:	80 91 a9 00 	lds	r24, 0x00A9
    13ee:	8f 7b       	andi	r24, 0xBF	; 191
    13f0:	80 93 a9 00 	sts	0x00A9, r24
    13f4:	20 e1       	ldi	r18, 0x10	; 16
    13f6:	37 e2       	ldi	r19, 0x27	; 39
    13f8:	43 c0       	rjmp	.+134    	; 0x1480 <SI_Host_ReceiveBlockHeader+0xbe>
    13fa:	80 91 a2 00 	lds	r24, 0x00A2
    13fe:	90 91 a3 00 	lds	r25, 0x00A3

	while (!(Pipe_IsINReceived()))
	{
		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    1402:	84 17       	cp	r24, r20
    1404:	95 07       	cpc	r25, r21
    1406:	41 f0       	breq	.+16     	; 0x1418 <SI_Host_ReceiveBlockHeader+0x56>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    1408:	21 15       	cp	r18, r1
    140a:	31 05       	cpc	r19, r1
    140c:	11 f4       	brne	.+4      	; 0x1412 <SI_Host_ReceiveBlockHeader+0x50>
    140e:	83 e0       	ldi	r24, 0x03	; 3
    1410:	5b c0       	rjmp	.+182    	; 0x14c8 <SI_Host_ReceiveBlockHeader+0x106>
    1412:	21 50       	subi	r18, 0x01	; 1
    1414:	30 40       	sbci	r19, 0x00	; 0
    1416:	ac 01       	movw	r20, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1418:	80 91 a9 00 	lds	r24, 0x00A9
    141c:	80 64       	ori	r24, 0x40	; 64
    141e:	80 93 a9 00 	sts	0x00A9, r24
			  return PIPE_RWSTREAM_Timeout;
		}

		Pipe_Freeze();
		Pipe_SelectPipe(SIInterfaceInfo->Config.DataOUTPipeNumber);
    1422:	82 81       	ldd	r24, Z+2	; 0x02
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1424:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1428:	80 91 a9 00 	lds	r24, 0x00A9
    142c:	8f 7b       	andi	r24, 0xBF	; 191
    142e:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
    1432:	80 91 a6 00 	lds	r24, 0x00A6
		Pipe_Unfreeze();

		if (Pipe_IsStalled())
    1436:	81 fd       	sbrc	r24, 1
    1438:	10 c0       	rjmp	.+32     	; 0x145a <SI_Host_ReceiveBlockHeader+0x98>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    143a:	80 91 a9 00 	lds	r24, 0x00A9
    143e:	80 64       	ori	r24, 0x40	; 64
    1440:	80 93 a9 00 	sts	0x00A9, r24
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1444:	60 93 a7 00 	sts	0x00A7, r22

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1448:	80 91 a9 00 	lds	r24, 0x00A9
    144c:	8f 7b       	andi	r24, 0xBF	; 191
    144e:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
    1452:	80 91 a6 00 	lds	r24, 0x00A6

		Pipe_Freeze();
		Pipe_SelectPipe(SIInterfaceInfo->Config.DataINPipeNumber);
		Pipe_Unfreeze();

		if (Pipe_IsStalled())
    1456:	81 ff       	sbrs	r24, 1
    1458:	0f c0       	rjmp	.+30     	; 0x1478 <SI_Host_ReceiveBlockHeader+0xb6>
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				return (((UPCFG0X >> PEPNUM0) & PIPE_EPNUM_MASK) |
    145a:	90 91 aa 00 	lds	r25, 0x00AA
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
    145e:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				return (((UPCFG0X >> PEPNUM0) & PIPE_EPNUM_MASK) |
    1462:	80 73       	andi	r24, 0x30	; 48
    1464:	80 31       	cpi	r24, 0x10	; 16
    1466:	11 f0       	breq	.+4      	; 0x146c <SI_Host_ReceiveBlockHeader+0xaa>
    1468:	80 e0       	ldi	r24, 0x00	; 0
    146a:	01 c0       	rjmp	.+2      	; 0x146e <SI_Host_ReceiveBlockHeader+0xac>
    146c:	80 e8       	ldi	r24, 0x80	; 128
		{
			USB_Host_ClearEndpointStall(Pipe_GetBoundEndpointAddress());
    146e:	9f 70       	andi	r25, 0x0F	; 15
    1470:	89 2b       	or	r24, r25
    1472:	a4 de       	rcall	.-696    	; 0x11bc <USB_Host_ClearEndpointStall>
    1474:	81 e0       	ldi	r24, 0x01	; 1
    1476:	28 c0       	rjmp	.+80     	; 0x14c8 <SI_Host_ReceiveBlockHeader+0x106>
			return PIPE_RWSTREAM_PipeStalled;
		}

		if (USB_HostState == HOST_STATE_Unattached)
    1478:	80 91 31 01 	lds	r24, 0x0131
    147c:	81 30       	cpi	r24, 0x01	; 1
    147e:	19 f1       	breq	.+70     	; 0x14c6 <SI_Host_ReceiveBlockHeader+0x104>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    1480:	80 91 a6 00 	lds	r24, 0x00A6
	  return PIPE_RWSTREAM_DeviceDisconnected;

	Pipe_SelectPipe(SIInterfaceInfo->Config.DataINPipeNumber);
	Pipe_Unfreeze();

	while (!(Pipe_IsINReceived()))
    1484:	80 ff       	sbrs	r24, 0
    1486:	b9 cf       	rjmp	.-142    	; 0x13fa <SI_Host_ReceiveBlockHeader+0x38>

		if (USB_HostState == HOST_STATE_Unattached)
		  return PIPE_RWSTREAM_DeviceDisconnected;
	}

	Pipe_Read_Stream_LE(PIMAHeader, PIMA_COMMAND_SIZE(0), NULL);
    1488:	ce 01       	movw	r24, r28
    148a:	6c e0       	ldi	r22, 0x0C	; 12
    148c:	70 e0       	ldi	r23, 0x00	; 0
    148e:	40 e0       	ldi	r20, 0x00	; 0
    1490:	50 e0       	ldi	r21, 0x00	; 0
    1492:	17 dc       	rcall	.-2002   	; 0xcc2 <Pipe_Read_Stream_LE>

	if (PIMAHeader->Type == CPU_TO_LE16(PIMA_CONTAINER_ResponseBlock))
    1494:	8c 81       	ldd	r24, Y+4	; 0x04
    1496:	9d 81       	ldd	r25, Y+5	; 0x05
    1498:	03 97       	sbiw	r24, 0x03	; 3
    149a:	71 f4       	brne	.+28     	; 0x14b8 <SI_Host_ReceiveBlockHeader+0xf6>
	{
		uint8_t ParamBytes = (PIMAHeader->DataLength - PIMA_COMMAND_SIZE(0));
    149c:	68 81       	ld	r22, Y
    149e:	6c 50       	subi	r22, 0x0C	; 12

		if (ParamBytes)
    14a0:	31 f0       	breq	.+12     	; 0x14ae <SI_Host_ReceiveBlockHeader+0xec>
		  Pipe_Read_Stream_LE(&PIMAHeader->Params, ParamBytes, NULL);
    14a2:	ce 01       	movw	r24, r28
    14a4:	0c 96       	adiw	r24, 0x0c	; 12
    14a6:	70 e0       	ldi	r23, 0x00	; 0
    14a8:	40 e0       	ldi	r20, 0x00	; 0
    14aa:	50 e0       	ldi	r21, 0x00	; 0
    14ac:	0a dc       	rcall	.-2028   	; 0xcc2 <Pipe_Read_Stream_LE>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    14ae:	80 91 a6 00 	lds	r24, 0x00A6
    14b2:	8e 77       	andi	r24, 0x7E	; 126
    14b4:	80 93 a6 00 	sts	0x00A6, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    14b8:	80 91 a9 00 	lds	r24, 0x00A9
    14bc:	80 64       	ori	r24, 0x40	; 64
    14be:	80 93 a9 00 	sts	0x00A9, r24
    14c2:	80 e0       	ldi	r24, 0x00	; 0
    14c4:	01 c0       	rjmp	.+2      	; 0x14c8 <SI_Host_ReceiveBlockHeader+0x106>
		Pipe_ClearIN();
	}

	Pipe_Freeze();

	return PIPE_RWSTREAM_NoError;
    14c6:	82 e0       	ldi	r24, 0x02	; 2
}
    14c8:	df 91       	pop	r29
    14ca:	cf 91       	pop	r28
    14cc:	08 95       	ret

000014ce <SI_Host_ReceiveResponse>:

	return PIPE_RWSTREAM_NoError;
}

uint8_t SI_Host_ReceiveResponse(USB_ClassInfo_SI_Host_t* const SIInterfaceInfo)
{
    14ce:	df 93       	push	r29
    14d0:	cf 93       	push	r28
    14d2:	cd b7       	in	r28, 0x3d	; 61
    14d4:	de b7       	in	r29, 0x3e	; 62
    14d6:	68 97       	sbiw	r28, 0x18	; 24
    14d8:	0f b6       	in	r0, 0x3f	; 63
    14da:	f8 94       	cli
    14dc:	de bf       	out	0x3e, r29	; 62
    14de:	0f be       	out	0x3f, r0	; 63
    14e0:	cd bf       	out	0x3d, r28	; 61
    14e2:	fc 01       	movw	r30, r24
	uint8_t ErrorCode;
	PIMA_Container_t PIMABlock;

	if ((USB_HostState != HOST_STATE_Configured) || !(SIInterfaceInfo->State.IsActive))
    14e4:	80 91 31 01 	lds	r24, 0x0131
    14e8:	8b 30       	cpi	r24, 0x0B	; 11
    14ea:	a9 f4       	brne	.+42     	; 0x1516 <SI_Host_ReceiveResponse+0x48>
    14ec:	86 81       	ldd	r24, Z+6	; 0x06
    14ee:	88 23       	and	r24, r24
    14f0:	91 f0       	breq	.+36     	; 0x1516 <SI_Host_ReceiveResponse+0x48>
	  return PIPE_RWSTREAM_DeviceDisconnected;

	if ((ErrorCode = SI_Host_ReceiveBlockHeader(SIInterfaceInfo, &PIMABlock)) != PIPE_RWSTREAM_NoError)
    14f2:	cf 01       	movw	r24, r30
    14f4:	be 01       	movw	r22, r28
    14f6:	6f 5f       	subi	r22, 0xFF	; 255
    14f8:	7f 4f       	sbci	r23, 0xFF	; 255
    14fa:	63 df       	rcall	.-314    	; 0x13c2 <SI_Host_ReceiveBlockHeader>
    14fc:	28 2f       	mov	r18, r24
    14fe:	88 23       	and	r24, r24
    1500:	69 f4       	brne	.+26     	; 0x151c <SI_Host_ReceiveResponse+0x4e>
	  return ErrorCode;

	if ((PIMABlock.Type != CPU_TO_LE16(PIMA_CONTAINER_ResponseBlock)) || (PIMABlock.Code != CPU_TO_LE16(0x2001)))
    1502:	8d 81       	ldd	r24, Y+5	; 0x05
    1504:	9e 81       	ldd	r25, Y+6	; 0x06
    1506:	03 97       	sbiw	r24, 0x03	; 3
    1508:	41 f4       	brne	.+16     	; 0x151a <SI_Host_ReceiveResponse+0x4c>
    150a:	8f 81       	ldd	r24, Y+7	; 0x07
    150c:	98 85       	ldd	r25, Y+8	; 0x08
    150e:	81 50       	subi	r24, 0x01	; 1
    1510:	90 42       	sbci	r25, 0x20	; 32
    1512:	19 f4       	brne	.+6      	; 0x151a <SI_Host_ReceiveResponse+0x4c>
    1514:	03 c0       	rjmp	.+6      	; 0x151c <SI_Host_ReceiveResponse+0x4e>
    1516:	22 e0       	ldi	r18, 0x02	; 2
    1518:	01 c0       	rjmp	.+2      	; 0x151c <SI_Host_ReceiveResponse+0x4e>
    151a:	20 e8       	ldi	r18, 0x80	; 128
	  return SI_ERROR_LOGICAL_CMD_FAILED;

	return PIPE_RWSTREAM_NoError;
}
    151c:	82 2f       	mov	r24, r18
    151e:	68 96       	adiw	r28, 0x18	; 24
    1520:	0f b6       	in	r0, 0x3f	; 63
    1522:	f8 94       	cli
    1524:	de bf       	out	0x3e, r29	; 62
    1526:	0f be       	out	0x3f, r0	; 63
    1528:	cd bf       	out	0x3d, r28	; 61
    152a:	cf 91       	pop	r28
    152c:	df 91       	pop	r29
    152e:	08 95       	ret

00001530 <SI_Host_CloseSession>:

	return PIPE_RWSTREAM_NoError;
}

uint8_t SI_Host_CloseSession(USB_ClassInfo_SI_Host_t* const SIInterfaceInfo)
{
    1530:	ef 92       	push	r14
    1532:	ff 92       	push	r15
    1534:	0f 93       	push	r16
    1536:	1f 93       	push	r17
    1538:	df 93       	push	r29
    153a:	cf 93       	push	r28
    153c:	cd b7       	in	r28, 0x3d	; 61
    153e:	de b7       	in	r29, 0x3e	; 62
    1540:	68 97       	sbiw	r28, 0x18	; 24
    1542:	0f b6       	in	r0, 0x3f	; 63
    1544:	f8 94       	cli
    1546:	de bf       	out	0x3e, r29	; 62
    1548:	0f be       	out	0x3f, r0	; 63
    154a:	cd bf       	out	0x3d, r28	; 61
    154c:	8c 01       	movw	r16, r24
	if ((USB_HostState != HOST_STATE_Configured) || !(SIInterfaceInfo->State.IsActive))
    154e:	80 91 31 01 	lds	r24, 0x0131
    1552:	8b 30       	cpi	r24, 0x0B	; 11
    1554:	09 f0       	breq	.+2      	; 0x1558 <SI_Host_CloseSession+0x28>
    1556:	3d c0       	rjmp	.+122    	; 0x15d2 <SI_Host_CloseSession+0xa2>
    1558:	f8 01       	movw	r30, r16
    155a:	86 81       	ldd	r24, Z+6	; 0x06
    155c:	88 23       	and	r24, r24
    155e:	c9 f1       	breq	.+114    	; 0x15d2 <SI_Host_CloseSession+0xa2>
		{
			.DataLength    = CPU_TO_LE32(PIMA_COMMAND_SIZE(1)),
			.Type          = CPU_TO_LE16(PIMA_CONTAINER_CommandBlock),
			.Code          = CPU_TO_LE16(0x1003),
			.Params        = {CPU_TO_LE32(1)},
		};
    1560:	7e 01       	movw	r14, r28
    1562:	08 94       	sec
    1564:	e1 1c       	adc	r14, r1
    1566:	f1 1c       	adc	r15, r1
    1568:	88 e1       	ldi	r24, 0x18	; 24
    156a:	f7 01       	movw	r30, r14
    156c:	11 92       	st	Z+, r1
    156e:	8a 95       	dec	r24
    1570:	e9 f7       	brne	.-6      	; 0x156c <SI_Host_CloseSession+0x3c>
    1572:	80 e1       	ldi	r24, 0x10	; 16
    1574:	90 e0       	ldi	r25, 0x00	; 0
    1576:	a0 e0       	ldi	r26, 0x00	; 0
    1578:	b0 e0       	ldi	r27, 0x00	; 0
    157a:	89 83       	std	Y+1, r24	; 0x01
    157c:	9a 83       	std	Y+2, r25	; 0x02
    157e:	ab 83       	std	Y+3, r26	; 0x03
    1580:	bc 83       	std	Y+4, r27	; 0x04
    1582:	81 e0       	ldi	r24, 0x01	; 1
    1584:	90 e0       	ldi	r25, 0x00	; 0
    1586:	9e 83       	std	Y+6, r25	; 0x06
    1588:	8d 83       	std	Y+5, r24	; 0x05
    158a:	83 e0       	ldi	r24, 0x03	; 3
    158c:	90 e1       	ldi	r25, 0x10	; 16
    158e:	98 87       	std	Y+8, r25	; 0x08
    1590:	8f 83       	std	Y+7, r24	; 0x07
    1592:	81 e0       	ldi	r24, 0x01	; 1
    1594:	90 e0       	ldi	r25, 0x00	; 0
    1596:	a0 e0       	ldi	r26, 0x00	; 0
    1598:	b0 e0       	ldi	r27, 0x00	; 0
    159a:	8d 87       	std	Y+13, r24	; 0x0d
    159c:	9e 87       	std	Y+14, r25	; 0x0e
    159e:	af 87       	std	Y+15, r26	; 0x0f
    15a0:	b8 8b       	std	Y+16, r27	; 0x10

	if ((ErrorCode = SI_Host_SendBlockHeader(SIInterfaceInfo, &PIMABlock)) != PIPE_RWSTREAM_NoError)
    15a2:	c8 01       	movw	r24, r16
    15a4:	b7 01       	movw	r22, r14
    15a6:	69 de       	rcall	.-814    	; 0x127a <SI_Host_SendBlockHeader>
    15a8:	28 2f       	mov	r18, r24
    15aa:	88 23       	and	r24, r24
    15ac:	a9 f4       	brne	.+42     	; 0x15d8 <SI_Host_CloseSession+0xa8>
	  return ErrorCode;

	if ((ErrorCode = SI_Host_ReceiveBlockHeader(SIInterfaceInfo, &PIMABlock)) != PIPE_RWSTREAM_NoError)
    15ae:	c8 01       	movw	r24, r16
    15b0:	b7 01       	movw	r22, r14
    15b2:	07 df       	rcall	.-498    	; 0x13c2 <SI_Host_ReceiveBlockHeader>
    15b4:	28 2f       	mov	r18, r24
    15b6:	88 23       	and	r24, r24
    15b8:	79 f4       	brne	.+30     	; 0x15d8 <SI_Host_CloseSession+0xa8>
	  return ErrorCode;

	SIInterfaceInfo->State.IsSessionOpen = false;
    15ba:	f8 01       	movw	r30, r16
    15bc:	16 86       	std	Z+14, r1	; 0x0e

	if ((PIMABlock.Type != CPU_TO_LE16(PIMA_CONTAINER_ResponseBlock)) || (PIMABlock.Code != CPU_TO_LE16(0x2001)))
    15be:	8d 81       	ldd	r24, Y+5	; 0x05
    15c0:	9e 81       	ldd	r25, Y+6	; 0x06
    15c2:	03 97       	sbiw	r24, 0x03	; 3
    15c4:	41 f4       	brne	.+16     	; 0x15d6 <SI_Host_CloseSession+0xa6>
    15c6:	8f 81       	ldd	r24, Y+7	; 0x07
    15c8:	98 85       	ldd	r25, Y+8	; 0x08
    15ca:	81 50       	subi	r24, 0x01	; 1
    15cc:	90 42       	sbci	r25, 0x20	; 32
    15ce:	19 f4       	brne	.+6      	; 0x15d6 <SI_Host_CloseSession+0xa6>
    15d0:	03 c0       	rjmp	.+6      	; 0x15d8 <SI_Host_CloseSession+0xa8>
    15d2:	22 e0       	ldi	r18, 0x02	; 2
    15d4:	01 c0       	rjmp	.+2      	; 0x15d8 <SI_Host_CloseSession+0xa8>
    15d6:	20 e8       	ldi	r18, 0x80	; 128
	  return SI_ERROR_LOGICAL_CMD_FAILED;

	return PIPE_RWSTREAM_NoError;
}
    15d8:	82 2f       	mov	r24, r18
    15da:	68 96       	adiw	r28, 0x18	; 24
    15dc:	0f b6       	in	r0, 0x3f	; 63
    15de:	f8 94       	cli
    15e0:	de bf       	out	0x3e, r29	; 62
    15e2:	0f be       	out	0x3f, r0	; 63
    15e4:	cd bf       	out	0x3d, r28	; 61
    15e6:	cf 91       	pop	r28
    15e8:	df 91       	pop	r29
    15ea:	1f 91       	pop	r17
    15ec:	0f 91       	pop	r16
    15ee:	ff 90       	pop	r15
    15f0:	ef 90       	pop	r14
    15f2:	08 95       	ret

000015f4 <SI_Host_OpenSession>:

	return ErrorCode;
}

uint8_t SI_Host_OpenSession(USB_ClassInfo_SI_Host_t* const SIInterfaceInfo)
{
    15f4:	ef 92       	push	r14
    15f6:	ff 92       	push	r15
    15f8:	0f 93       	push	r16
    15fa:	1f 93       	push	r17
    15fc:	df 93       	push	r29
    15fe:	cf 93       	push	r28
    1600:	cd b7       	in	r28, 0x3d	; 61
    1602:	de b7       	in	r29, 0x3e	; 62
    1604:	68 97       	sbiw	r28, 0x18	; 24
    1606:	0f b6       	in	r0, 0x3f	; 63
    1608:	f8 94       	cli
    160a:	de bf       	out	0x3e, r29	; 62
    160c:	0f be       	out	0x3f, r0	; 63
    160e:	cd bf       	out	0x3d, r28	; 61
    1610:	8c 01       	movw	r16, r24
	if ((USB_HostState != HOST_STATE_Configured) || !(SIInterfaceInfo->State.IsActive))
    1612:	80 91 31 01 	lds	r24, 0x0131
    1616:	8b 30       	cpi	r24, 0x0B	; 11
    1618:	09 f0       	breq	.+2      	; 0x161c <SI_Host_OpenSession+0x28>
    161a:	44 c0       	rjmp	.+136    	; 0x16a4 <SI_Host_OpenSession+0xb0>
    161c:	f8 01       	movw	r30, r16
    161e:	86 81       	ldd	r24, Z+6	; 0x06
    1620:	88 23       	and	r24, r24
    1622:	09 f4       	brne	.+2      	; 0x1626 <SI_Host_OpenSession+0x32>
    1624:	3f c0       	rjmp	.+126    	; 0x16a4 <SI_Host_OpenSession+0xb0>
	  return PIPE_RWSTREAM_DeviceDisconnected;

	uint8_t ErrorCode;

	SIInterfaceInfo->State.TransactionID = 0;
    1626:	17 86       	std	Z+15, r1	; 0x0f
    1628:	10 8a       	std	Z+16, r1	; 0x10
    162a:	11 8a       	std	Z+17, r1	; 0x11
    162c:	12 8a       	std	Z+18, r1	; 0x12
	SIInterfaceInfo->State.IsSessionOpen = false;
    162e:	16 86       	std	Z+14, r1	; 0x0e
		{
			.DataLength    = CPU_TO_LE32(PIMA_COMMAND_SIZE(1)),
			.Type          = CPU_TO_LE16(PIMA_CONTAINER_CommandBlock),
			.Code          = CPU_TO_LE16(0x1002),
			.Params        = {CPU_TO_LE32(1)},
		};
    1630:	7e 01       	movw	r14, r28
    1632:	08 94       	sec
    1634:	e1 1c       	adc	r14, r1
    1636:	f1 1c       	adc	r15, r1
    1638:	88 e1       	ldi	r24, 0x18	; 24
    163a:	f7 01       	movw	r30, r14
    163c:	11 92       	st	Z+, r1
    163e:	8a 95       	dec	r24
    1640:	e9 f7       	brne	.-6      	; 0x163c <SI_Host_OpenSession+0x48>
    1642:	80 e1       	ldi	r24, 0x10	; 16
    1644:	90 e0       	ldi	r25, 0x00	; 0
    1646:	a0 e0       	ldi	r26, 0x00	; 0
    1648:	b0 e0       	ldi	r27, 0x00	; 0
    164a:	89 83       	std	Y+1, r24	; 0x01
    164c:	9a 83       	std	Y+2, r25	; 0x02
    164e:	ab 83       	std	Y+3, r26	; 0x03
    1650:	bc 83       	std	Y+4, r27	; 0x04
    1652:	81 e0       	ldi	r24, 0x01	; 1
    1654:	90 e0       	ldi	r25, 0x00	; 0
    1656:	9e 83       	std	Y+6, r25	; 0x06
    1658:	8d 83       	std	Y+5, r24	; 0x05
    165a:	82 e0       	ldi	r24, 0x02	; 2
    165c:	90 e1       	ldi	r25, 0x10	; 16
    165e:	98 87       	std	Y+8, r25	; 0x08
    1660:	8f 83       	std	Y+7, r24	; 0x07
    1662:	81 e0       	ldi	r24, 0x01	; 1
    1664:	90 e0       	ldi	r25, 0x00	; 0
    1666:	a0 e0       	ldi	r26, 0x00	; 0
    1668:	b0 e0       	ldi	r27, 0x00	; 0
    166a:	8d 87       	std	Y+13, r24	; 0x0d
    166c:	9e 87       	std	Y+14, r25	; 0x0e
    166e:	af 87       	std	Y+15, r26	; 0x0f
    1670:	b8 8b       	std	Y+16, r27	; 0x10

	if ((ErrorCode = SI_Host_SendBlockHeader(SIInterfaceInfo, &PIMABlock)) != PIPE_RWSTREAM_NoError)
    1672:	c8 01       	movw	r24, r16
    1674:	b7 01       	movw	r22, r14
    1676:	01 de       	rcall	.-1022   	; 0x127a <SI_Host_SendBlockHeader>
    1678:	28 2f       	mov	r18, r24
    167a:	88 23       	and	r24, r24
    167c:	b1 f4       	brne	.+44     	; 0x16aa <SI_Host_OpenSession+0xb6>
	  return ErrorCode;

	if ((ErrorCode = SI_Host_ReceiveBlockHeader(SIInterfaceInfo, &PIMABlock)) != PIPE_RWSTREAM_NoError)
    167e:	c8 01       	movw	r24, r16
    1680:	b7 01       	movw	r22, r14
    1682:	9f de       	rcall	.-706    	; 0x13c2 <SI_Host_ReceiveBlockHeader>
    1684:	28 2f       	mov	r18, r24
    1686:	88 23       	and	r24, r24
    1688:	81 f4       	brne	.+32     	; 0x16aa <SI_Host_OpenSession+0xb6>
	  return ErrorCode;

	if ((PIMABlock.Type != CPU_TO_LE16(PIMA_CONTAINER_ResponseBlock)) || (PIMABlock.Code != CPU_TO_LE16(0x2001)))
    168a:	8d 81       	ldd	r24, Y+5	; 0x05
    168c:	9e 81       	ldd	r25, Y+6	; 0x06
    168e:	03 97       	sbiw	r24, 0x03	; 3
    1690:	59 f4       	brne	.+22     	; 0x16a8 <SI_Host_OpenSession+0xb4>
    1692:	8f 81       	ldd	r24, Y+7	; 0x07
    1694:	98 85       	ldd	r25, Y+8	; 0x08
    1696:	81 50       	subi	r24, 0x01	; 1
    1698:	90 42       	sbci	r25, 0x20	; 32
    169a:	31 f4       	brne	.+12     	; 0x16a8 <SI_Host_OpenSession+0xb4>
	  return SI_ERROR_LOGICAL_CMD_FAILED;

	SIInterfaceInfo->State.IsSessionOpen = true;
    169c:	81 e0       	ldi	r24, 0x01	; 1
    169e:	f8 01       	movw	r30, r16
    16a0:	86 87       	std	Z+14, r24	; 0x0e
    16a2:	03 c0       	rjmp	.+6      	; 0x16aa <SI_Host_OpenSession+0xb6>

	return PIPE_RWSTREAM_NoError;
    16a4:	22 e0       	ldi	r18, 0x02	; 2
    16a6:	01 c0       	rjmp	.+2      	; 0x16aa <SI_Host_OpenSession+0xb6>
    16a8:	20 e8       	ldi	r18, 0x80	; 128
}
    16aa:	82 2f       	mov	r24, r18
    16ac:	68 96       	adiw	r28, 0x18	; 24
    16ae:	0f b6       	in	r0, 0x3f	; 63
    16b0:	f8 94       	cli
    16b2:	de bf       	out	0x3e, r29	; 62
    16b4:	0f be       	out	0x3f, r0	; 63
    16b6:	cd bf       	out	0x3d, r28	; 61
    16b8:	cf 91       	pop	r28
    16ba:	df 91       	pop	r29
    16bc:	1f 91       	pop	r17
    16be:	0f 91       	pop	r16
    16c0:	ff 90       	pop	r15
    16c2:	ef 90       	pop	r14
    16c4:	08 95       	ret

000016c6 <SI_Host_ConfigurePipes>:
#include "StillImage.h"

uint8_t SI_Host_ConfigurePipes(USB_ClassInfo_SI_Host_t* const SIInterfaceInfo,
                               uint16_t ConfigDescriptorSize,
                               void* ConfigDescriptorData)
{
    16c6:	4f 92       	push	r4
    16c8:	5f 92       	push	r5
    16ca:	6f 92       	push	r6
    16cc:	7f 92       	push	r7
    16ce:	8f 92       	push	r8
    16d0:	9f 92       	push	r9
    16d2:	af 92       	push	r10
    16d4:	bf 92       	push	r11
    16d6:	cf 92       	push	r12
    16d8:	df 92       	push	r13
    16da:	ef 92       	push	r14
    16dc:	ff 92       	push	r15
    16de:	0f 93       	push	r16
    16e0:	1f 93       	push	r17
    16e2:	df 93       	push	r29
    16e4:	cf 93       	push	r28
    16e6:	00 d0       	rcall	.+0      	; 0x16e8 <SI_Host_ConfigurePipes+0x22>
    16e8:	00 d0       	rcall	.+0      	; 0x16ea <SI_Host_ConfigurePipes+0x24>
    16ea:	0f 92       	push	r0
    16ec:	cd b7       	in	r28, 0x3d	; 61
    16ee:	de b7       	in	r29, 0x3e	; 62
    16f0:	6c 01       	movw	r12, r24
    16f2:	7a 83       	std	Y+2, r23	; 0x02
    16f4:	69 83       	std	Y+1, r22	; 0x01
    16f6:	5c 83       	std	Y+4, r21	; 0x04
    16f8:	4b 83       	std	Y+3, r20	; 0x03
	USB_Descriptor_Endpoint_t*  DataINEndpoint      = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint     = NULL;
	USB_Descriptor_Endpoint_t*  EventsEndpoint      = NULL;
	USB_Descriptor_Interface_t* StillImageInterface = NULL;

	memset(&SIInterfaceInfo->State, 0x00, sizeof(SIInterfaceInfo->State));
    16fa:	06 96       	adiw	r24, 0x06	; 6
    16fc:	fc 01       	movw	r30, r24
    16fe:	8d e0       	ldi	r24, 0x0D	; 13
    1700:	df 01       	movw	r26, r30
    1702:	1d 92       	st	X+, r1
    1704:	8a 95       	dec	r24
    1706:	e9 f7       	brne	.-6      	; 0x1702 <SI_Host_ConfigurePipes+0x3c>

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
    1708:	eb 81       	ldd	r30, Y+3	; 0x03
    170a:	fc 81       	ldd	r31, Y+4	; 0x04
    170c:	81 81       	ldd	r24, Z+1	; 0x01
    170e:	82 30       	cpi	r24, 0x02	; 2
    1710:	11 f0       	breq	.+4      	; 0x1716 <SI_Host_ConfigurePipes+0x50>
    1712:	81 e0       	ldi	r24, 0x01	; 1
    1714:	9a c0       	rjmp	.+308    	; 0x184a <SI_Host_ConfigurePipes+0x184>
    1716:	aa 24       	eor	r10, r10
    1718:	bb 24       	eor	r11, r11
    171a:	44 24       	eor	r4, r4
    171c:	55 24       	eor	r5, r5
    171e:	66 24       	eor	r6, r6
    1720:	77 24       	eor	r7, r7
    1722:	88 24       	eor	r8, r8
    1724:	99 24       	eor	r9, r9
	  return SI_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint) || !(EventsEndpoint))
	{
		if (!(StillImageInterface) ||
    1726:	33 e0       	ldi	r19, 0x03	; 3
    1728:	e3 2e       	mov	r14, r19
    172a:	f1 2c       	mov	r15, r1
    172c:	ec 0e       	add	r14, r28
    172e:	fd 1e       	adc	r15, r29
    1730:	8e 01       	movw	r16, r28
    1732:	0f 5f       	subi	r16, 0xFF	; 255
    1734:	1f 4f       	sbci	r17, 0xFF	; 255
    1736:	41 14       	cp	r4, r1
    1738:	51 04       	cpc	r5, r1
    173a:	39 f0       	breq	.+14     	; 0x174a <SI_Host_ConfigurePipes+0x84>
    173c:	c8 01       	movw	r24, r16
    173e:	b7 01       	movw	r22, r14
    1740:	4b e3       	ldi	r20, 0x3B	; 59
    1742:	5c e0       	ldi	r21, 0x0C	; 12
    1744:	6c db       	rcall	.-2344   	; 0xe1e <USB_GetNextDescriptorComp>
    1746:	88 23       	and	r24, r24
    1748:	91 f0       	breq	.+36     	; 0x176e <SI_Host_ConfigurePipes+0xa8>
		    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
		                              DCOMP_SI_Host_NextSIInterfaceEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    174a:	c8 01       	movw	r24, r16
    174c:	b7 01       	movw	r22, r14
    174e:	4c e2       	ldi	r20, 0x2C	; 44
    1750:	59 e0       	ldi	r21, 0x09	; 9
    1752:	65 db       	rcall	.-2358   	; 0xe1e <USB_GetNextDescriptorComp>
    1754:	88 23       	and	r24, r24
    1756:	11 f0       	breq	.+4      	; 0x175c <SI_Host_ConfigurePipes+0x96>
    1758:	82 e0       	ldi	r24, 0x02	; 2
    175a:	77 c0       	rjmp	.+238    	; 0x184a <SI_Host_ConfigurePipes+0x184>
			                              DCOMP_SI_Host_NextSIInterface) != DESCRIPTOR_SEARCH_COMP_Found)
			{
				return SI_ENUMERROR_NoCompatibleInterfaceFound;
			}

			StillImageInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);
    175c:	4b 80       	ldd	r4, Y+3	; 0x03
    175e:	5c 80       	ldd	r5, Y+4	; 0x04
    1760:	88 24       	eor	r8, r8
    1762:	99 24       	eor	r9, r9
    1764:	66 24       	eor	r6, r6
    1766:	77 24       	eor	r7, r7
    1768:	aa 24       	eor	r10, r10
    176a:	bb 24       	eor	r11, r11
    176c:	e4 cf       	rjmp	.-56     	; 0x1736 <SI_Host_ConfigurePipes+0x70>
			EventsEndpoint  = NULL;

			continue;
		}

		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Endpoint_t);
    176e:	eb 81       	ldd	r30, Y+3	; 0x03
    1770:	fc 81       	ldd	r31, Y+4	; 0x04

		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
    1772:	82 81       	ldd	r24, Z+2	; 0x02
    1774:	87 fd       	sbrc	r24, 7
    1776:	02 c0       	rjmp	.+4      	; 0x177c <SI_Host_ConfigurePipes+0xb6>
    1778:	4f 01       	movw	r8, r30
    177a:	07 c0       	rjmp	.+14     	; 0x178a <SI_Host_ConfigurePipes+0xc4>
		{
			if ((EndpointData->Attributes & EP_TYPE_MASK) == EP_TYPE_INTERRUPT)
    177c:	83 81       	ldd	r24, Z+3	; 0x03
    177e:	83 70       	andi	r24, 0x03	; 3
    1780:	83 30       	cpi	r24, 0x03	; 3
    1782:	11 f0       	breq	.+4      	; 0x1788 <SI_Host_ConfigurePipes+0xc2>
    1784:	3f 01       	movw	r6, r30
    1786:	01 c0       	rjmp	.+2      	; 0x178a <SI_Host_ConfigurePipes+0xc4>
    1788:	5f 01       	movw	r10, r30
	memset(&SIInterfaceInfo->State, 0x00, sizeof(SIInterfaceInfo->State));

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return SI_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint) || !(EventsEndpoint))
    178a:	61 14       	cp	r6, r1
    178c:	71 04       	cpc	r7, r1
    178e:	99 f2       	breq	.-90     	; 0x1736 <SI_Host_ConfigurePipes+0x70>
    1790:	81 14       	cp	r8, r1
    1792:	91 04       	cpc	r9, r1
    1794:	81 f2       	breq	.-96     	; 0x1736 <SI_Host_ConfigurePipes+0x70>
    1796:	a1 14       	cp	r10, r1
    1798:	b1 04       	cpc	r11, r1
    179a:	69 f2       	breq	.-102    	; 0x1736 <SI_Host_ConfigurePipes+0x70>
    179c:	91 e0       	ldi	r25, 0x01	; 1
		uint8_t  Token;
		uint8_t  EndpointAddress;
		uint8_t  InterruptPeriod;
		bool     DoubleBanked;

		if (PipeNum == SIInterfaceInfo->Config.DataINPipeNumber)
    179e:	f6 01       	movw	r30, r12
    17a0:	80 81       	ld	r24, Z
    17a2:	98 17       	cp	r25, r24
    17a4:	69 f4       	brne	.+26     	; 0x17c0 <SI_Host_ConfigurePipes+0xfa>
		{
			Size            = DataINEndpoint->EndpointSize;
    17a6:	d3 01       	movw	r26, r6
    17a8:	14 96       	adiw	r26, 0x04	; 4
    17aa:	0d 91       	ld	r16, X+
    17ac:	1c 91       	ld	r17, X
    17ae:	15 97       	sbiw	r26, 0x05	; 5
			EndpointAddress = DataINEndpoint->EndpointAddress;
    17b0:	12 96       	adiw	r26, 0x02	; 2
    17b2:	2c 91       	ld	r18, X
			Token           = PIPE_TOKEN_IN;
			Type            = EP_TYPE_BULK;
			DoubleBanked    = SIInterfaceInfo->Config.DataINPipeDoubleBank;
    17b4:	81 81       	ldd	r24, Z+1	; 0x01
			InterruptPeriod = 0;

			SIInterfaceInfo->State.DataINPipeSize = DataINEndpoint->EndpointSize;
    17b6:	11 87       	std	Z+9, r17	; 0x09
    17b8:	00 87       	std	Z+8, r16	; 0x08
    17ba:	62 e0       	ldi	r22, 0x02	; 2
    17bc:	40 e1       	ldi	r20, 0x10	; 16
    17be:	10 c0       	rjmp	.+32     	; 0x17e0 <SI_Host_ConfigurePipes+0x11a>
		}
		else if (PipeNum == SIInterfaceInfo->Config.DataOUTPipeNumber)
    17c0:	f6 01       	movw	r30, r12
    17c2:	82 81       	ldd	r24, Z+2	; 0x02
    17c4:	98 17       	cp	r25, r24
    17c6:	71 f4       	brne	.+28     	; 0x17e4 <SI_Host_ConfigurePipes+0x11e>
		{
			Size            = DataOUTEndpoint->EndpointSize;
    17c8:	d4 01       	movw	r26, r8
    17ca:	14 96       	adiw	r26, 0x04	; 4
    17cc:	0d 91       	ld	r16, X+
    17ce:	1c 91       	ld	r17, X
    17d0:	15 97       	sbiw	r26, 0x05	; 5
			EndpointAddress = DataOUTEndpoint->EndpointAddress;
    17d2:	12 96       	adiw	r26, 0x02	; 2
    17d4:	2c 91       	ld	r18, X
			Token           = PIPE_TOKEN_OUT;
			Type            = EP_TYPE_BULK;
			DoubleBanked    = SIInterfaceInfo->Config.DataOUTPipeDoubleBank;
    17d6:	83 81       	ldd	r24, Z+3	; 0x03
			InterruptPeriod = 0;

			SIInterfaceInfo->State.DataOUTPipeSize = DataOUTEndpoint->EndpointSize;
    17d8:	13 87       	std	Z+11, r17	; 0x0b
    17da:	02 87       	std	Z+10, r16	; 0x0a
    17dc:	62 e0       	ldi	r22, 0x02	; 2
    17de:	40 e2       	ldi	r20, 0x20	; 32
    17e0:	ff 24       	eor	r15, r15
    17e2:	13 c0       	rjmp	.+38     	; 0x180a <SI_Host_ConfigurePipes+0x144>
		}
		else if (PipeNum == SIInterfaceInfo->Config.EventsPipeNumber)
    17e4:	f6 01       	movw	r30, r12
    17e6:	84 81       	ldd	r24, Z+4	; 0x04
    17e8:	98 17       	cp	r25, r24
    17ea:	09 f5       	brne	.+66     	; 0x182e <SI_Host_ConfigurePipes+0x168>
		{
			Size            = EventsEndpoint->EndpointSize;
    17ec:	d5 01       	movw	r26, r10
    17ee:	14 96       	adiw	r26, 0x04	; 4
    17f0:	0d 91       	ld	r16, X+
    17f2:	1c 91       	ld	r17, X
    17f4:	15 97       	sbiw	r26, 0x05	; 5
			EndpointAddress = EventsEndpoint->EndpointAddress;
    17f6:	12 96       	adiw	r26, 0x02	; 2
    17f8:	2c 91       	ld	r18, X
    17fa:	12 97       	sbiw	r26, 0x02	; 2
			Token           = PIPE_TOKEN_IN;
			Type            = EP_TYPE_INTERRUPT;
			DoubleBanked    = SIInterfaceInfo->Config.EventsPipeDoubleBank;
    17fc:	85 81       	ldd	r24, Z+5	; 0x05
			InterruptPeriod = EventsEndpoint->PollingIntervalMS;
    17fe:	16 96       	adiw	r26, 0x06	; 6
    1800:	fc 90       	ld	r15, X

			SIInterfaceInfo->State.EventsPipeSize = EventsEndpoint->EndpointSize;
    1802:	15 87       	std	Z+13, r17	; 0x0d
    1804:	04 87       	std	Z+12, r16	; 0x0c
    1806:	63 e0       	ldi	r22, 0x03	; 3
    1808:	40 e1       	ldi	r20, 0x10	; 16
		else
		{
			continue;
		}
		
		if (!(Pipe_ConfigurePipe(PipeNum, Type, Token, EndpointAddress, Size,
    180a:	88 23       	and	r24, r24
    180c:	11 f4       	brne	.+4      	; 0x1812 <SI_Host_ConfigurePipes+0x14c>
    180e:	30 e0       	ldi	r19, 0x00	; 0
    1810:	01 c0       	rjmp	.+2      	; 0x1814 <SI_Host_ConfigurePipes+0x14e>
    1812:	34 e0       	ldi	r19, 0x04	; 4
    1814:	89 2f       	mov	r24, r25
    1816:	e3 2e       	mov	r14, r19
    1818:	9d 83       	std	Y+5, r25	; 0x05
    181a:	7f d8       	rcall	.-3842   	; 0x91a <Pipe_ConfigurePipe>
    181c:	9d 81       	ldd	r25, Y+5	; 0x05
    181e:	88 23       	and	r24, r24
    1820:	11 f4       	brne	.+4      	; 0x1826 <SI_Host_ConfigurePipes+0x160>
    1822:	83 e0       	ldi	r24, 0x03	; 3
    1824:	12 c0       	rjmp	.+36     	; 0x184a <SI_Host_ConfigurePipes+0x184>
		                         DoubleBanked ? PIPE_BANK_DOUBLE : PIPE_BANK_SINGLE)))
		{
			return SI_ENUMERROR_PipeConfigurationFailed;
		}
		
		if (InterruptPeriod)
    1826:	ff 20       	and	r15, r15
    1828:	11 f0       	breq	.+4      	; 0x182e <SI_Host_ConfigurePipes+0x168>
			 *  \param[in] Milliseconds  Number of milliseconds between each pipe poll.
			 */
			static inline void Pipe_SetInterruptPeriod(const uint8_t Milliseconds) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInterruptPeriod(const uint8_t Milliseconds)
			{
				UPCFG2X = Milliseconds;
    182a:	f0 92 ad 00 	sts	0x00AD, r15
		{
			DataOUTEndpoint = EndpointData;
		}
	}

	for (uint8_t PipeNum = 1; PipeNum < PIPE_TOTAL_PIPES; PipeNum++)
    182e:	9f 5f       	subi	r25, 0xFF	; 255
    1830:	97 30       	cpi	r25, 0x07	; 7
    1832:	09 f0       	breq	.+2      	; 0x1836 <SI_Host_ConfigurePipes+0x170>
    1834:	b4 cf       	rjmp	.-152    	; 0x179e <SI_Host_ConfigurePipes+0xd8>
		
		if (InterruptPeriod)
		  Pipe_SetInterruptPeriod(InterruptPeriod);
	}

	SIInterfaceInfo->State.InterfaceNumber = StillImageInterface->InterfaceNumber;
    1836:	f2 01       	movw	r30, r4
    1838:	82 81       	ldd	r24, Z+2	; 0x02
    183a:	d6 01       	movw	r26, r12
    183c:	17 96       	adiw	r26, 0x07	; 7
    183e:	8c 93       	st	X, r24
    1840:	17 97       	sbiw	r26, 0x07	; 7
	SIInterfaceInfo->State.IsActive = true;
    1842:	81 e0       	ldi	r24, 0x01	; 1
    1844:	16 96       	adiw	r26, 0x06	; 6
    1846:	8c 93       	st	X, r24
    1848:	80 e0       	ldi	r24, 0x00	; 0

	return SI_ENUMERROR_NoError;
}
    184a:	0f 90       	pop	r0
    184c:	0f 90       	pop	r0
    184e:	0f 90       	pop	r0
    1850:	0f 90       	pop	r0
    1852:	0f 90       	pop	r0
    1854:	cf 91       	pop	r28
    1856:	df 91       	pop	r29
    1858:	1f 91       	pop	r17
    185a:	0f 91       	pop	r16
    185c:	ff 90       	pop	r15
    185e:	ef 90       	pop	r14
    1860:	df 90       	pop	r13
    1862:	cf 90       	pop	r12
    1864:	bf 90       	pop	r11
    1866:	af 90       	pop	r10
    1868:	9f 90       	pop	r9
    186a:	8f 90       	pop	r8
    186c:	7f 90       	pop	r7
    186e:	6f 90       	pop	r6
    1870:	5f 90       	pop	r5
    1872:	4f 90       	pop	r4
    1874:	08 95       	ret

00001876 <DCOMP_SI_Host_NextSIInterfaceEndpoint>:

	return DESCRIPTOR_SEARCH_NotFound;
}

uint8_t DCOMP_SI_Host_NextSIInterfaceEndpoint(void* const CurrentDescriptor)
{
    1876:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Endpoint)
    1878:	81 81       	ldd	r24, Z+1	; 0x01
    187a:	85 30       	cpi	r24, 0x05	; 5
    187c:	51 f4       	brne	.+20     	; 0x1892 <DCOMP_SI_Host_NextSIInterfaceEndpoint+0x1c>
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		uint8_t EndpointType = (Endpoint->Attributes & EP_TYPE_MASK);

		if (((EndpointType == EP_TYPE_BULK) || (EndpointType == EP_TYPE_INTERRUPT)) &&
    187e:	83 81       	ldd	r24, Z+3	; 0x03
    1880:	83 70       	andi	r24, 0x03	; 3
    1882:	82 50       	subi	r24, 0x02	; 2
    1884:	82 30       	cpi	r24, 0x02	; 2
    1886:	48 f4       	brcc	.+18     	; 0x189a <DCOMP_SI_Host_NextSIInterfaceEndpoint+0x24>
    1888:	82 81       	ldd	r24, Z+2	; 0x02
    188a:	b9 d8       	rcall	.-3726   	; 0x9fe <Pipe_IsEndpointBound>
    188c:	88 23       	and	r24, r24
    188e:	29 f4       	brne	.+10     	; 0x189a <DCOMP_SI_Host_NextSIInterfaceEndpoint+0x24>
    1890:	08 95       	ret
		    (!(Pipe_IsEndpointBound(Endpoint->EndpointAddress))))
		{
			return DESCRIPTOR_SEARCH_Found;
		}
	}
	else if (Header->Type == DTYPE_Interface)
    1892:	84 30       	cpi	r24, 0x04	; 4
    1894:	11 f4       	brne	.+4      	; 0x189a <DCOMP_SI_Host_NextSIInterfaceEndpoint+0x24>
    1896:	81 e0       	ldi	r24, 0x01	; 1
    1898:	08 95       	ret
    189a:	82 e0       	ldi	r24, 0x02	; 2
	{
		return DESCRIPTOR_SEARCH_Fail;
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    189c:	08 95       	ret

0000189e <Serial_putchar>:

FILE USARTSerialStream;

int Serial_putchar(char DataByte,
                   FILE *Stream)
{
    189e:	98 2f       	mov	r25, r24
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
    18a0:	80 91 c8 00 	lds	r24, 0x00C8
    18a4:	85 ff       	sbrs	r24, 5
    18a6:	fc cf       	rjmp	.-8      	; 0x18a0 <Serial_putchar+0x2>
				UDR1 = DataByte;
    18a8:	90 93 ce 00 	sts	0x00CE, r25
	(void)Stream;

	Serial_SendByte(DataByte);
	return 0;
}
    18ac:	80 e0       	ldi	r24, 0x00	; 0
    18ae:	90 e0       	ldi	r25, 0x00	; 0
    18b0:	08 95       	ret

000018b2 <Serial_getchar>:
			 *  \return Boolean \c true if a character has been received, \c false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    18b2:	80 91 c8 00 	lds	r24, 0x00C8

int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    18b6:	87 fd       	sbrc	r24, 7
    18b8:	03 c0       	rjmp	.+6      	; 0x18c0 <Serial_getchar+0xe>
    18ba:	2e ef       	ldi	r18, 0xFE	; 254
    18bc:	3f ef       	ldi	r19, 0xFF	; 255
    18be:	0b c0       	rjmp	.+22     	; 0x18d6 <Serial_getchar+0x24>
    18c0:	80 91 c8 00 	lds	r24, 0x00C8
			 *  \return Next byte received from the USART, or a negative value if no byte has been received.
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
    18c4:	87 fd       	sbrc	r24, 7
    18c6:	03 c0       	rjmp	.+6      	; 0x18ce <Serial_getchar+0x1c>
    18c8:	2f ef       	ldi	r18, 0xFF	; 255
    18ca:	3f ef       	ldi	r19, 0xFF	; 255
    18cc:	04 c0       	rjmp	.+8      	; 0x18d6 <Serial_getchar+0x24>
				  return -1;
				
				return UDR1;
    18ce:	80 91 ce 00 	lds	r24, 0x00CE
    18d2:	28 2f       	mov	r18, r24
    18d4:	30 e0       	ldi	r19, 0x00	; 0
	  return _FDEV_EOF;

	return Serial_ReceiveByte();
}
    18d6:	c9 01       	movw	r24, r18
    18d8:	08 95       	ret

000018da <memcpy>:
    18da:	fb 01       	movw	r30, r22
    18dc:	dc 01       	movw	r26, r24
    18de:	02 c0       	rjmp	.+4      	; 0x18e4 <memcpy+0xa>
    18e0:	01 90       	ld	r0, Z+
    18e2:	0d 92       	st	X+, r0
    18e4:	41 50       	subi	r20, 0x01	; 1
    18e6:	50 40       	sbci	r21, 0x00	; 0
    18e8:	d8 f7       	brcc	.-10     	; 0x18e0 <memcpy+0x6>
    18ea:	08 95       	ret

000018ec <printf_P>:
    18ec:	df 93       	push	r29
    18ee:	cf 93       	push	r28
    18f0:	cd b7       	in	r28, 0x3d	; 61
    18f2:	de b7       	in	r29, 0x3e	; 62
    18f4:	fe 01       	movw	r30, r28
    18f6:	35 96       	adiw	r30, 0x05	; 5
    18f8:	61 91       	ld	r22, Z+
    18fa:	71 91       	ld	r23, Z+
    18fc:	a0 91 42 01 	lds	r26, 0x0142
    1900:	b0 91 43 01 	lds	r27, 0x0143
    1904:	13 96       	adiw	r26, 0x03	; 3
    1906:	8c 91       	ld	r24, X
    1908:	13 97       	sbiw	r26, 0x03	; 3
    190a:	88 60       	ori	r24, 0x08	; 8
    190c:	13 96       	adiw	r26, 0x03	; 3
    190e:	8c 93       	st	X, r24
    1910:	80 91 42 01 	lds	r24, 0x0142
    1914:	90 91 43 01 	lds	r25, 0x0143
    1918:	af 01       	movw	r20, r30
    191a:	3f d0       	rcall	.+126    	; 0x199a <vfprintf>
    191c:	e0 91 42 01 	lds	r30, 0x0142
    1920:	f0 91 43 01 	lds	r31, 0x0143
    1924:	23 81       	ldd	r18, Z+3	; 0x03
    1926:	27 7f       	andi	r18, 0xF7	; 247
    1928:	23 83       	std	Z+3, r18	; 0x03
    192a:	cf 91       	pop	r28
    192c:	df 91       	pop	r29
    192e:	08 95       	ret

00001930 <puts_P>:
    1930:	0f 93       	push	r16
    1932:	1f 93       	push	r17
    1934:	cf 93       	push	r28
    1936:	df 93       	push	r29
    1938:	ec 01       	movw	r28, r24
    193a:	e0 91 42 01 	lds	r30, 0x0142
    193e:	f0 91 43 01 	lds	r31, 0x0143
    1942:	83 81       	ldd	r24, Z+3	; 0x03
    1944:	81 ff       	sbrs	r24, 1
    1946:	21 c0       	rjmp	.+66     	; 0x198a <puts_P+0x5a>
    1948:	00 e0       	ldi	r16, 0x00	; 0
    194a:	10 e0       	ldi	r17, 0x00	; 0
    194c:	0e c0       	rjmp	.+28     	; 0x196a <puts_P+0x3a>
    194e:	e0 91 42 01 	lds	r30, 0x0142
    1952:	f0 91 43 01 	lds	r31, 0x0143
    1956:	20 85       	ldd	r18, Z+8	; 0x08
    1958:	31 85       	ldd	r19, Z+9	; 0x09
    195a:	bf 01       	movw	r22, r30
    195c:	f9 01       	movw	r30, r18
    195e:	09 95       	icall
    1960:	89 2b       	or	r24, r25
    1962:	11 f0       	breq	.+4      	; 0x1968 <puts_P+0x38>
    1964:	0f ef       	ldi	r16, 0xFF	; 255
    1966:	1f ef       	ldi	r17, 0xFF	; 255
    1968:	21 96       	adiw	r28, 0x01	; 1
    196a:	fe 01       	movw	r30, r28
    196c:	84 91       	lpm	r24, Z+
    196e:	88 23       	and	r24, r24
    1970:	71 f7       	brne	.-36     	; 0x194e <puts_P+0x1e>
    1972:	e0 91 42 01 	lds	r30, 0x0142
    1976:	f0 91 43 01 	lds	r31, 0x0143
    197a:	20 85       	ldd	r18, Z+8	; 0x08
    197c:	31 85       	ldd	r19, Z+9	; 0x09
    197e:	8a e0       	ldi	r24, 0x0A	; 10
    1980:	bf 01       	movw	r22, r30
    1982:	f9 01       	movw	r30, r18
    1984:	09 95       	icall
    1986:	89 2b       	or	r24, r25
    1988:	11 f0       	breq	.+4      	; 0x198e <puts_P+0x5e>
    198a:	0f ef       	ldi	r16, 0xFF	; 255
    198c:	1f ef       	ldi	r17, 0xFF	; 255
    198e:	c8 01       	movw	r24, r16
    1990:	df 91       	pop	r29
    1992:	cf 91       	pop	r28
    1994:	1f 91       	pop	r17
    1996:	0f 91       	pop	r16
    1998:	08 95       	ret

0000199a <vfprintf>:
    199a:	2f 92       	push	r2
    199c:	3f 92       	push	r3
    199e:	4f 92       	push	r4
    19a0:	5f 92       	push	r5
    19a2:	6f 92       	push	r6
    19a4:	7f 92       	push	r7
    19a6:	8f 92       	push	r8
    19a8:	9f 92       	push	r9
    19aa:	af 92       	push	r10
    19ac:	bf 92       	push	r11
    19ae:	cf 92       	push	r12
    19b0:	df 92       	push	r13
    19b2:	ef 92       	push	r14
    19b4:	ff 92       	push	r15
    19b6:	0f 93       	push	r16
    19b8:	1f 93       	push	r17
    19ba:	df 93       	push	r29
    19bc:	cf 93       	push	r28
    19be:	cd b7       	in	r28, 0x3d	; 61
    19c0:	de b7       	in	r29, 0x3e	; 62
    19c2:	2b 97       	sbiw	r28, 0x0b	; 11
    19c4:	0f b6       	in	r0, 0x3f	; 63
    19c6:	f8 94       	cli
    19c8:	de bf       	out	0x3e, r29	; 62
    19ca:	0f be       	out	0x3f, r0	; 63
    19cc:	cd bf       	out	0x3d, r28	; 61
    19ce:	3c 01       	movw	r6, r24
    19d0:	2b 01       	movw	r4, r22
    19d2:	5a 01       	movw	r10, r20
    19d4:	fc 01       	movw	r30, r24
    19d6:	17 82       	std	Z+7, r1	; 0x07
    19d8:	16 82       	std	Z+6, r1	; 0x06
    19da:	83 81       	ldd	r24, Z+3	; 0x03
    19dc:	81 fd       	sbrc	r24, 1
    19de:	03 c0       	rjmp	.+6      	; 0x19e6 <vfprintf+0x4c>
    19e0:	6f ef       	ldi	r22, 0xFF	; 255
    19e2:	7f ef       	ldi	r23, 0xFF	; 255
    19e4:	b9 c1       	rjmp	.+882    	; 0x1d58 <vfprintf+0x3be>
    19e6:	9a e0       	ldi	r25, 0x0A	; 10
    19e8:	89 2e       	mov	r8, r25
    19ea:	1e 01       	movw	r2, r28
    19ec:	08 94       	sec
    19ee:	21 1c       	adc	r2, r1
    19f0:	31 1c       	adc	r3, r1
    19f2:	f3 01       	movw	r30, r6
    19f4:	23 81       	ldd	r18, Z+3	; 0x03
    19f6:	f2 01       	movw	r30, r4
    19f8:	23 fd       	sbrc	r18, 3
    19fa:	85 91       	lpm	r24, Z+
    19fc:	23 ff       	sbrs	r18, 3
    19fe:	81 91       	ld	r24, Z+
    1a00:	2f 01       	movw	r4, r30
    1a02:	88 23       	and	r24, r24
    1a04:	09 f4       	brne	.+2      	; 0x1a08 <vfprintf+0x6e>
    1a06:	a5 c1       	rjmp	.+842    	; 0x1d52 <vfprintf+0x3b8>
    1a08:	85 32       	cpi	r24, 0x25	; 37
    1a0a:	39 f4       	brne	.+14     	; 0x1a1a <vfprintf+0x80>
    1a0c:	23 fd       	sbrc	r18, 3
    1a0e:	85 91       	lpm	r24, Z+
    1a10:	23 ff       	sbrs	r18, 3
    1a12:	81 91       	ld	r24, Z+
    1a14:	2f 01       	movw	r4, r30
    1a16:	85 32       	cpi	r24, 0x25	; 37
    1a18:	21 f4       	brne	.+8      	; 0x1a22 <vfprintf+0x88>
    1a1a:	90 e0       	ldi	r25, 0x00	; 0
    1a1c:	b3 01       	movw	r22, r6
    1a1e:	cc d1       	rcall	.+920    	; 0x1db8 <fputc>
    1a20:	e8 cf       	rjmp	.-48     	; 0x19f2 <vfprintf+0x58>
    1a22:	98 2f       	mov	r25, r24
    1a24:	ff 24       	eor	r15, r15
    1a26:	ee 24       	eor	r14, r14
    1a28:	99 24       	eor	r9, r9
    1a2a:	ff e1       	ldi	r31, 0x1F	; 31
    1a2c:	ff 15       	cp	r31, r15
    1a2e:	d0 f0       	brcs	.+52     	; 0x1a64 <vfprintf+0xca>
    1a30:	9b 32       	cpi	r25, 0x2B	; 43
    1a32:	69 f0       	breq	.+26     	; 0x1a4e <vfprintf+0xb4>
    1a34:	9c 32       	cpi	r25, 0x2C	; 44
    1a36:	28 f4       	brcc	.+10     	; 0x1a42 <vfprintf+0xa8>
    1a38:	90 32       	cpi	r25, 0x20	; 32
    1a3a:	59 f0       	breq	.+22     	; 0x1a52 <vfprintf+0xb8>
    1a3c:	93 32       	cpi	r25, 0x23	; 35
    1a3e:	91 f4       	brne	.+36     	; 0x1a64 <vfprintf+0xca>
    1a40:	0e c0       	rjmp	.+28     	; 0x1a5e <vfprintf+0xc4>
    1a42:	9d 32       	cpi	r25, 0x2D	; 45
    1a44:	49 f0       	breq	.+18     	; 0x1a58 <vfprintf+0xbe>
    1a46:	90 33       	cpi	r25, 0x30	; 48
    1a48:	69 f4       	brne	.+26     	; 0x1a64 <vfprintf+0xca>
    1a4a:	41 e0       	ldi	r20, 0x01	; 1
    1a4c:	24 c0       	rjmp	.+72     	; 0x1a96 <vfprintf+0xfc>
    1a4e:	52 e0       	ldi	r21, 0x02	; 2
    1a50:	f5 2a       	or	r15, r21
    1a52:	84 e0       	ldi	r24, 0x04	; 4
    1a54:	f8 2a       	or	r15, r24
    1a56:	28 c0       	rjmp	.+80     	; 0x1aa8 <vfprintf+0x10e>
    1a58:	98 e0       	ldi	r25, 0x08	; 8
    1a5a:	f9 2a       	or	r15, r25
    1a5c:	25 c0       	rjmp	.+74     	; 0x1aa8 <vfprintf+0x10e>
    1a5e:	e0 e1       	ldi	r30, 0x10	; 16
    1a60:	fe 2a       	or	r15, r30
    1a62:	22 c0       	rjmp	.+68     	; 0x1aa8 <vfprintf+0x10e>
    1a64:	f7 fc       	sbrc	r15, 7
    1a66:	29 c0       	rjmp	.+82     	; 0x1aba <vfprintf+0x120>
    1a68:	89 2f       	mov	r24, r25
    1a6a:	80 53       	subi	r24, 0x30	; 48
    1a6c:	8a 30       	cpi	r24, 0x0A	; 10
    1a6e:	70 f4       	brcc	.+28     	; 0x1a8c <vfprintf+0xf2>
    1a70:	f6 fe       	sbrs	r15, 6
    1a72:	05 c0       	rjmp	.+10     	; 0x1a7e <vfprintf+0xe4>
    1a74:	98 9c       	mul	r9, r8
    1a76:	90 2c       	mov	r9, r0
    1a78:	11 24       	eor	r1, r1
    1a7a:	98 0e       	add	r9, r24
    1a7c:	15 c0       	rjmp	.+42     	; 0x1aa8 <vfprintf+0x10e>
    1a7e:	e8 9c       	mul	r14, r8
    1a80:	e0 2c       	mov	r14, r0
    1a82:	11 24       	eor	r1, r1
    1a84:	e8 0e       	add	r14, r24
    1a86:	f0 e2       	ldi	r31, 0x20	; 32
    1a88:	ff 2a       	or	r15, r31
    1a8a:	0e c0       	rjmp	.+28     	; 0x1aa8 <vfprintf+0x10e>
    1a8c:	9e 32       	cpi	r25, 0x2E	; 46
    1a8e:	29 f4       	brne	.+10     	; 0x1a9a <vfprintf+0x100>
    1a90:	f6 fc       	sbrc	r15, 6
    1a92:	5f c1       	rjmp	.+702    	; 0x1d52 <vfprintf+0x3b8>
    1a94:	40 e4       	ldi	r20, 0x40	; 64
    1a96:	f4 2a       	or	r15, r20
    1a98:	07 c0       	rjmp	.+14     	; 0x1aa8 <vfprintf+0x10e>
    1a9a:	9c 36       	cpi	r25, 0x6C	; 108
    1a9c:	19 f4       	brne	.+6      	; 0x1aa4 <vfprintf+0x10a>
    1a9e:	50 e8       	ldi	r21, 0x80	; 128
    1aa0:	f5 2a       	or	r15, r21
    1aa2:	02 c0       	rjmp	.+4      	; 0x1aa8 <vfprintf+0x10e>
    1aa4:	98 36       	cpi	r25, 0x68	; 104
    1aa6:	49 f4       	brne	.+18     	; 0x1aba <vfprintf+0x120>
    1aa8:	f2 01       	movw	r30, r4
    1aaa:	23 fd       	sbrc	r18, 3
    1aac:	95 91       	lpm	r25, Z+
    1aae:	23 ff       	sbrs	r18, 3
    1ab0:	91 91       	ld	r25, Z+
    1ab2:	2f 01       	movw	r4, r30
    1ab4:	99 23       	and	r25, r25
    1ab6:	09 f0       	breq	.+2      	; 0x1aba <vfprintf+0x120>
    1ab8:	b8 cf       	rjmp	.-144    	; 0x1a2a <vfprintf+0x90>
    1aba:	89 2f       	mov	r24, r25
    1abc:	85 54       	subi	r24, 0x45	; 69
    1abe:	83 30       	cpi	r24, 0x03	; 3
    1ac0:	18 f0       	brcs	.+6      	; 0x1ac8 <vfprintf+0x12e>
    1ac2:	80 52       	subi	r24, 0x20	; 32
    1ac4:	83 30       	cpi	r24, 0x03	; 3
    1ac6:	38 f4       	brcc	.+14     	; 0x1ad6 <vfprintf+0x13c>
    1ac8:	44 e0       	ldi	r20, 0x04	; 4
    1aca:	50 e0       	ldi	r21, 0x00	; 0
    1acc:	a4 0e       	add	r10, r20
    1ace:	b5 1e       	adc	r11, r21
    1ad0:	5f e3       	ldi	r21, 0x3F	; 63
    1ad2:	59 83       	std	Y+1, r21	; 0x01
    1ad4:	0f c0       	rjmp	.+30     	; 0x1af4 <vfprintf+0x15a>
    1ad6:	93 36       	cpi	r25, 0x63	; 99
    1ad8:	31 f0       	breq	.+12     	; 0x1ae6 <vfprintf+0x14c>
    1ada:	93 37       	cpi	r25, 0x73	; 115
    1adc:	79 f0       	breq	.+30     	; 0x1afc <vfprintf+0x162>
    1ade:	93 35       	cpi	r25, 0x53	; 83
    1ae0:	09 f0       	breq	.+2      	; 0x1ae4 <vfprintf+0x14a>
    1ae2:	52 c0       	rjmp	.+164    	; 0x1b88 <vfprintf+0x1ee>
    1ae4:	1f c0       	rjmp	.+62     	; 0x1b24 <vfprintf+0x18a>
    1ae6:	f5 01       	movw	r30, r10
    1ae8:	80 81       	ld	r24, Z
    1aea:	89 83       	std	Y+1, r24	; 0x01
    1aec:	42 e0       	ldi	r20, 0x02	; 2
    1aee:	50 e0       	ldi	r21, 0x00	; 0
    1af0:	a4 0e       	add	r10, r20
    1af2:	b5 1e       	adc	r11, r21
    1af4:	61 01       	movw	r12, r2
    1af6:	01 e0       	ldi	r16, 0x01	; 1
    1af8:	10 e0       	ldi	r17, 0x00	; 0
    1afa:	11 c0       	rjmp	.+34     	; 0x1b1e <vfprintf+0x184>
    1afc:	f5 01       	movw	r30, r10
    1afe:	c0 80       	ld	r12, Z
    1b00:	d1 80       	ldd	r13, Z+1	; 0x01
    1b02:	f6 fc       	sbrc	r15, 6
    1b04:	03 c0       	rjmp	.+6      	; 0x1b0c <vfprintf+0x172>
    1b06:	6f ef       	ldi	r22, 0xFF	; 255
    1b08:	7f ef       	ldi	r23, 0xFF	; 255
    1b0a:	02 c0       	rjmp	.+4      	; 0x1b10 <vfprintf+0x176>
    1b0c:	69 2d       	mov	r22, r9
    1b0e:	70 e0       	ldi	r23, 0x00	; 0
    1b10:	42 e0       	ldi	r20, 0x02	; 2
    1b12:	50 e0       	ldi	r21, 0x00	; 0
    1b14:	a4 0e       	add	r10, r20
    1b16:	b5 1e       	adc	r11, r21
    1b18:	c6 01       	movw	r24, r12
    1b1a:	43 d1       	rcall	.+646    	; 0x1da2 <strnlen>
    1b1c:	8c 01       	movw	r16, r24
    1b1e:	5f e7       	ldi	r21, 0x7F	; 127
    1b20:	f5 22       	and	r15, r21
    1b22:	13 c0       	rjmp	.+38     	; 0x1b4a <vfprintf+0x1b0>
    1b24:	f5 01       	movw	r30, r10
    1b26:	c0 80       	ld	r12, Z
    1b28:	d1 80       	ldd	r13, Z+1	; 0x01
    1b2a:	f6 fc       	sbrc	r15, 6
    1b2c:	03 c0       	rjmp	.+6      	; 0x1b34 <vfprintf+0x19a>
    1b2e:	6f ef       	ldi	r22, 0xFF	; 255
    1b30:	7f ef       	ldi	r23, 0xFF	; 255
    1b32:	02 c0       	rjmp	.+4      	; 0x1b38 <vfprintf+0x19e>
    1b34:	69 2d       	mov	r22, r9
    1b36:	70 e0       	ldi	r23, 0x00	; 0
    1b38:	42 e0       	ldi	r20, 0x02	; 2
    1b3a:	50 e0       	ldi	r21, 0x00	; 0
    1b3c:	a4 0e       	add	r10, r20
    1b3e:	b5 1e       	adc	r11, r21
    1b40:	c6 01       	movw	r24, r12
    1b42:	24 d1       	rcall	.+584    	; 0x1d8c <strnlen_P>
    1b44:	8c 01       	movw	r16, r24
    1b46:	50 e8       	ldi	r21, 0x80	; 128
    1b48:	f5 2a       	or	r15, r21
    1b4a:	f3 fe       	sbrs	r15, 3
    1b4c:	06 c0       	rjmp	.+12     	; 0x1b5a <vfprintf+0x1c0>
    1b4e:	18 c0       	rjmp	.+48     	; 0x1b80 <vfprintf+0x1e6>
    1b50:	80 e2       	ldi	r24, 0x20	; 32
    1b52:	90 e0       	ldi	r25, 0x00	; 0
    1b54:	b3 01       	movw	r22, r6
    1b56:	30 d1       	rcall	.+608    	; 0x1db8 <fputc>
    1b58:	ea 94       	dec	r14
    1b5a:	8e 2d       	mov	r24, r14
    1b5c:	90 e0       	ldi	r25, 0x00	; 0
    1b5e:	08 17       	cp	r16, r24
    1b60:	19 07       	cpc	r17, r25
    1b62:	b0 f3       	brcs	.-20     	; 0x1b50 <vfprintf+0x1b6>
    1b64:	0d c0       	rjmp	.+26     	; 0x1b80 <vfprintf+0x1e6>
    1b66:	f6 01       	movw	r30, r12
    1b68:	f7 fc       	sbrc	r15, 7
    1b6a:	85 91       	lpm	r24, Z+
    1b6c:	f7 fe       	sbrs	r15, 7
    1b6e:	81 91       	ld	r24, Z+
    1b70:	6f 01       	movw	r12, r30
    1b72:	90 e0       	ldi	r25, 0x00	; 0
    1b74:	b3 01       	movw	r22, r6
    1b76:	20 d1       	rcall	.+576    	; 0x1db8 <fputc>
    1b78:	e1 10       	cpse	r14, r1
    1b7a:	ea 94       	dec	r14
    1b7c:	01 50       	subi	r16, 0x01	; 1
    1b7e:	10 40       	sbci	r17, 0x00	; 0
    1b80:	01 15       	cp	r16, r1
    1b82:	11 05       	cpc	r17, r1
    1b84:	81 f7       	brne	.-32     	; 0x1b66 <vfprintf+0x1cc>
    1b86:	e2 c0       	rjmp	.+452    	; 0x1d4c <vfprintf+0x3b2>
    1b88:	94 36       	cpi	r25, 0x64	; 100
    1b8a:	11 f0       	breq	.+4      	; 0x1b90 <vfprintf+0x1f6>
    1b8c:	99 36       	cpi	r25, 0x69	; 105
    1b8e:	61 f5       	brne	.+88     	; 0x1be8 <vfprintf+0x24e>
    1b90:	f7 fe       	sbrs	r15, 7
    1b92:	08 c0       	rjmp	.+16     	; 0x1ba4 <vfprintf+0x20a>
    1b94:	f5 01       	movw	r30, r10
    1b96:	20 81       	ld	r18, Z
    1b98:	31 81       	ldd	r19, Z+1	; 0x01
    1b9a:	42 81       	ldd	r20, Z+2	; 0x02
    1b9c:	53 81       	ldd	r21, Z+3	; 0x03
    1b9e:	84 e0       	ldi	r24, 0x04	; 4
    1ba0:	90 e0       	ldi	r25, 0x00	; 0
    1ba2:	0a c0       	rjmp	.+20     	; 0x1bb8 <vfprintf+0x21e>
    1ba4:	f5 01       	movw	r30, r10
    1ba6:	80 81       	ld	r24, Z
    1ba8:	91 81       	ldd	r25, Z+1	; 0x01
    1baa:	9c 01       	movw	r18, r24
    1bac:	44 27       	eor	r20, r20
    1bae:	37 fd       	sbrc	r19, 7
    1bb0:	40 95       	com	r20
    1bb2:	54 2f       	mov	r21, r20
    1bb4:	82 e0       	ldi	r24, 0x02	; 2
    1bb6:	90 e0       	ldi	r25, 0x00	; 0
    1bb8:	a8 0e       	add	r10, r24
    1bba:	b9 1e       	adc	r11, r25
    1bbc:	9f e6       	ldi	r25, 0x6F	; 111
    1bbe:	f9 22       	and	r15, r25
    1bc0:	57 ff       	sbrs	r21, 7
    1bc2:	09 c0       	rjmp	.+18     	; 0x1bd6 <vfprintf+0x23c>
    1bc4:	50 95       	com	r21
    1bc6:	40 95       	com	r20
    1bc8:	30 95       	com	r19
    1bca:	21 95       	neg	r18
    1bcc:	3f 4f       	sbci	r19, 0xFF	; 255
    1bce:	4f 4f       	sbci	r20, 0xFF	; 255
    1bd0:	5f 4f       	sbci	r21, 0xFF	; 255
    1bd2:	e0 e8       	ldi	r30, 0x80	; 128
    1bd4:	fe 2a       	or	r15, r30
    1bd6:	ca 01       	movw	r24, r20
    1bd8:	b9 01       	movw	r22, r18
    1bda:	a1 01       	movw	r20, r2
    1bdc:	2a e0       	ldi	r18, 0x0A	; 10
    1bde:	30 e0       	ldi	r19, 0x00	; 0
    1be0:	17 d1       	rcall	.+558    	; 0x1e10 <__ultoa_invert>
    1be2:	d8 2e       	mov	r13, r24
    1be4:	d2 18       	sub	r13, r2
    1be6:	3f c0       	rjmp	.+126    	; 0x1c66 <vfprintf+0x2cc>
    1be8:	95 37       	cpi	r25, 0x75	; 117
    1bea:	29 f4       	brne	.+10     	; 0x1bf6 <vfprintf+0x25c>
    1bec:	1f 2d       	mov	r17, r15
    1bee:	1f 7e       	andi	r17, 0xEF	; 239
    1bf0:	2a e0       	ldi	r18, 0x0A	; 10
    1bf2:	30 e0       	ldi	r19, 0x00	; 0
    1bf4:	1d c0       	rjmp	.+58     	; 0x1c30 <vfprintf+0x296>
    1bf6:	1f 2d       	mov	r17, r15
    1bf8:	19 7f       	andi	r17, 0xF9	; 249
    1bfa:	9f 36       	cpi	r25, 0x6F	; 111
    1bfc:	61 f0       	breq	.+24     	; 0x1c16 <vfprintf+0x27c>
    1bfe:	90 37       	cpi	r25, 0x70	; 112
    1c00:	20 f4       	brcc	.+8      	; 0x1c0a <vfprintf+0x270>
    1c02:	98 35       	cpi	r25, 0x58	; 88
    1c04:	09 f0       	breq	.+2      	; 0x1c08 <vfprintf+0x26e>
    1c06:	a5 c0       	rjmp	.+330    	; 0x1d52 <vfprintf+0x3b8>
    1c08:	0f c0       	rjmp	.+30     	; 0x1c28 <vfprintf+0x28e>
    1c0a:	90 37       	cpi	r25, 0x70	; 112
    1c0c:	39 f0       	breq	.+14     	; 0x1c1c <vfprintf+0x282>
    1c0e:	98 37       	cpi	r25, 0x78	; 120
    1c10:	09 f0       	breq	.+2      	; 0x1c14 <vfprintf+0x27a>
    1c12:	9f c0       	rjmp	.+318    	; 0x1d52 <vfprintf+0x3b8>
    1c14:	04 c0       	rjmp	.+8      	; 0x1c1e <vfprintf+0x284>
    1c16:	28 e0       	ldi	r18, 0x08	; 8
    1c18:	30 e0       	ldi	r19, 0x00	; 0
    1c1a:	0a c0       	rjmp	.+20     	; 0x1c30 <vfprintf+0x296>
    1c1c:	10 61       	ori	r17, 0x10	; 16
    1c1e:	14 fd       	sbrc	r17, 4
    1c20:	14 60       	ori	r17, 0x04	; 4
    1c22:	20 e1       	ldi	r18, 0x10	; 16
    1c24:	30 e0       	ldi	r19, 0x00	; 0
    1c26:	04 c0       	rjmp	.+8      	; 0x1c30 <vfprintf+0x296>
    1c28:	14 fd       	sbrc	r17, 4
    1c2a:	16 60       	ori	r17, 0x06	; 6
    1c2c:	20 e1       	ldi	r18, 0x10	; 16
    1c2e:	32 e0       	ldi	r19, 0x02	; 2
    1c30:	17 ff       	sbrs	r17, 7
    1c32:	08 c0       	rjmp	.+16     	; 0x1c44 <vfprintf+0x2aa>
    1c34:	f5 01       	movw	r30, r10
    1c36:	60 81       	ld	r22, Z
    1c38:	71 81       	ldd	r23, Z+1	; 0x01
    1c3a:	82 81       	ldd	r24, Z+2	; 0x02
    1c3c:	93 81       	ldd	r25, Z+3	; 0x03
    1c3e:	44 e0       	ldi	r20, 0x04	; 4
    1c40:	50 e0       	ldi	r21, 0x00	; 0
    1c42:	08 c0       	rjmp	.+16     	; 0x1c54 <vfprintf+0x2ba>
    1c44:	f5 01       	movw	r30, r10
    1c46:	80 81       	ld	r24, Z
    1c48:	91 81       	ldd	r25, Z+1	; 0x01
    1c4a:	bc 01       	movw	r22, r24
    1c4c:	80 e0       	ldi	r24, 0x00	; 0
    1c4e:	90 e0       	ldi	r25, 0x00	; 0
    1c50:	42 e0       	ldi	r20, 0x02	; 2
    1c52:	50 e0       	ldi	r21, 0x00	; 0
    1c54:	a4 0e       	add	r10, r20
    1c56:	b5 1e       	adc	r11, r21
    1c58:	a1 01       	movw	r20, r2
    1c5a:	da d0       	rcall	.+436    	; 0x1e10 <__ultoa_invert>
    1c5c:	d8 2e       	mov	r13, r24
    1c5e:	d2 18       	sub	r13, r2
    1c60:	8f e7       	ldi	r24, 0x7F	; 127
    1c62:	f8 2e       	mov	r15, r24
    1c64:	f1 22       	and	r15, r17
    1c66:	f6 fe       	sbrs	r15, 6
    1c68:	0b c0       	rjmp	.+22     	; 0x1c80 <vfprintf+0x2e6>
    1c6a:	5e ef       	ldi	r21, 0xFE	; 254
    1c6c:	f5 22       	and	r15, r21
    1c6e:	d9 14       	cp	r13, r9
    1c70:	38 f4       	brcc	.+14     	; 0x1c80 <vfprintf+0x2e6>
    1c72:	f4 fe       	sbrs	r15, 4
    1c74:	07 c0       	rjmp	.+14     	; 0x1c84 <vfprintf+0x2ea>
    1c76:	f2 fc       	sbrc	r15, 2
    1c78:	05 c0       	rjmp	.+10     	; 0x1c84 <vfprintf+0x2ea>
    1c7a:	8f ee       	ldi	r24, 0xEF	; 239
    1c7c:	f8 22       	and	r15, r24
    1c7e:	02 c0       	rjmp	.+4      	; 0x1c84 <vfprintf+0x2ea>
    1c80:	1d 2d       	mov	r17, r13
    1c82:	01 c0       	rjmp	.+2      	; 0x1c86 <vfprintf+0x2ec>
    1c84:	19 2d       	mov	r17, r9
    1c86:	f4 fe       	sbrs	r15, 4
    1c88:	0d c0       	rjmp	.+26     	; 0x1ca4 <vfprintf+0x30a>
    1c8a:	fe 01       	movw	r30, r28
    1c8c:	ed 0d       	add	r30, r13
    1c8e:	f1 1d       	adc	r31, r1
    1c90:	80 81       	ld	r24, Z
    1c92:	80 33       	cpi	r24, 0x30	; 48
    1c94:	19 f4       	brne	.+6      	; 0x1c9c <vfprintf+0x302>
    1c96:	99 ee       	ldi	r25, 0xE9	; 233
    1c98:	f9 22       	and	r15, r25
    1c9a:	08 c0       	rjmp	.+16     	; 0x1cac <vfprintf+0x312>
    1c9c:	1f 5f       	subi	r17, 0xFF	; 255
    1c9e:	f2 fe       	sbrs	r15, 2
    1ca0:	05 c0       	rjmp	.+10     	; 0x1cac <vfprintf+0x312>
    1ca2:	03 c0       	rjmp	.+6      	; 0x1caa <vfprintf+0x310>
    1ca4:	8f 2d       	mov	r24, r15
    1ca6:	86 78       	andi	r24, 0x86	; 134
    1ca8:	09 f0       	breq	.+2      	; 0x1cac <vfprintf+0x312>
    1caa:	1f 5f       	subi	r17, 0xFF	; 255
    1cac:	0f 2d       	mov	r16, r15
    1cae:	f3 fc       	sbrc	r15, 3
    1cb0:	13 c0       	rjmp	.+38     	; 0x1cd8 <vfprintf+0x33e>
    1cb2:	f0 fe       	sbrs	r15, 0
    1cb4:	0e c0       	rjmp	.+28     	; 0x1cd2 <vfprintf+0x338>
    1cb6:	1e 15       	cp	r17, r14
    1cb8:	10 f0       	brcs	.+4      	; 0x1cbe <vfprintf+0x324>
    1cba:	9d 2c       	mov	r9, r13
    1cbc:	0a c0       	rjmp	.+20     	; 0x1cd2 <vfprintf+0x338>
    1cbe:	9d 2c       	mov	r9, r13
    1cc0:	9e 0c       	add	r9, r14
    1cc2:	91 1a       	sub	r9, r17
    1cc4:	1e 2d       	mov	r17, r14
    1cc6:	05 c0       	rjmp	.+10     	; 0x1cd2 <vfprintf+0x338>
    1cc8:	80 e2       	ldi	r24, 0x20	; 32
    1cca:	90 e0       	ldi	r25, 0x00	; 0
    1ccc:	b3 01       	movw	r22, r6
    1cce:	74 d0       	rcall	.+232    	; 0x1db8 <fputc>
    1cd0:	1f 5f       	subi	r17, 0xFF	; 255
    1cd2:	1e 15       	cp	r17, r14
    1cd4:	c8 f3       	brcs	.-14     	; 0x1cc8 <vfprintf+0x32e>
    1cd6:	04 c0       	rjmp	.+8      	; 0x1ce0 <vfprintf+0x346>
    1cd8:	1e 15       	cp	r17, r14
    1cda:	10 f4       	brcc	.+4      	; 0x1ce0 <vfprintf+0x346>
    1cdc:	e1 1a       	sub	r14, r17
    1cde:	01 c0       	rjmp	.+2      	; 0x1ce2 <vfprintf+0x348>
    1ce0:	ee 24       	eor	r14, r14
    1ce2:	04 ff       	sbrs	r16, 4
    1ce4:	0e c0       	rjmp	.+28     	; 0x1d02 <vfprintf+0x368>
    1ce6:	80 e3       	ldi	r24, 0x30	; 48
    1ce8:	90 e0       	ldi	r25, 0x00	; 0
    1cea:	b3 01       	movw	r22, r6
    1cec:	65 d0       	rcall	.+202    	; 0x1db8 <fputc>
    1cee:	02 ff       	sbrs	r16, 2
    1cf0:	1b c0       	rjmp	.+54     	; 0x1d28 <vfprintf+0x38e>
    1cf2:	01 fd       	sbrc	r16, 1
    1cf4:	03 c0       	rjmp	.+6      	; 0x1cfc <vfprintf+0x362>
    1cf6:	88 e7       	ldi	r24, 0x78	; 120
    1cf8:	90 e0       	ldi	r25, 0x00	; 0
    1cfa:	0e c0       	rjmp	.+28     	; 0x1d18 <vfprintf+0x37e>
    1cfc:	88 e5       	ldi	r24, 0x58	; 88
    1cfe:	90 e0       	ldi	r25, 0x00	; 0
    1d00:	0b c0       	rjmp	.+22     	; 0x1d18 <vfprintf+0x37e>
    1d02:	80 2f       	mov	r24, r16
    1d04:	86 78       	andi	r24, 0x86	; 134
    1d06:	81 f0       	breq	.+32     	; 0x1d28 <vfprintf+0x38e>
    1d08:	01 ff       	sbrs	r16, 1
    1d0a:	02 c0       	rjmp	.+4      	; 0x1d10 <vfprintf+0x376>
    1d0c:	8b e2       	ldi	r24, 0x2B	; 43
    1d0e:	01 c0       	rjmp	.+2      	; 0x1d12 <vfprintf+0x378>
    1d10:	80 e2       	ldi	r24, 0x20	; 32
    1d12:	f7 fc       	sbrc	r15, 7
    1d14:	8d e2       	ldi	r24, 0x2D	; 45
    1d16:	90 e0       	ldi	r25, 0x00	; 0
    1d18:	b3 01       	movw	r22, r6
    1d1a:	4e d0       	rcall	.+156    	; 0x1db8 <fputc>
    1d1c:	05 c0       	rjmp	.+10     	; 0x1d28 <vfprintf+0x38e>
    1d1e:	80 e3       	ldi	r24, 0x30	; 48
    1d20:	90 e0       	ldi	r25, 0x00	; 0
    1d22:	b3 01       	movw	r22, r6
    1d24:	49 d0       	rcall	.+146    	; 0x1db8 <fputc>
    1d26:	9a 94       	dec	r9
    1d28:	d9 14       	cp	r13, r9
    1d2a:	c8 f3       	brcs	.-14     	; 0x1d1e <vfprintf+0x384>
    1d2c:	da 94       	dec	r13
    1d2e:	f1 01       	movw	r30, r2
    1d30:	ed 0d       	add	r30, r13
    1d32:	f1 1d       	adc	r31, r1
    1d34:	80 81       	ld	r24, Z
    1d36:	90 e0       	ldi	r25, 0x00	; 0
    1d38:	b3 01       	movw	r22, r6
    1d3a:	3e d0       	rcall	.+124    	; 0x1db8 <fputc>
    1d3c:	dd 20       	and	r13, r13
    1d3e:	b1 f7       	brne	.-20     	; 0x1d2c <vfprintf+0x392>
    1d40:	05 c0       	rjmp	.+10     	; 0x1d4c <vfprintf+0x3b2>
    1d42:	80 e2       	ldi	r24, 0x20	; 32
    1d44:	90 e0       	ldi	r25, 0x00	; 0
    1d46:	b3 01       	movw	r22, r6
    1d48:	37 d0       	rcall	.+110    	; 0x1db8 <fputc>
    1d4a:	ea 94       	dec	r14
    1d4c:	ee 20       	and	r14, r14
    1d4e:	c9 f7       	brne	.-14     	; 0x1d42 <vfprintf+0x3a8>
    1d50:	50 ce       	rjmp	.-864    	; 0x19f2 <vfprintf+0x58>
    1d52:	f3 01       	movw	r30, r6
    1d54:	66 81       	ldd	r22, Z+6	; 0x06
    1d56:	77 81       	ldd	r23, Z+7	; 0x07
    1d58:	cb 01       	movw	r24, r22
    1d5a:	2b 96       	adiw	r28, 0x0b	; 11
    1d5c:	0f b6       	in	r0, 0x3f	; 63
    1d5e:	f8 94       	cli
    1d60:	de bf       	out	0x3e, r29	; 62
    1d62:	0f be       	out	0x3f, r0	; 63
    1d64:	cd bf       	out	0x3d, r28	; 61
    1d66:	cf 91       	pop	r28
    1d68:	df 91       	pop	r29
    1d6a:	1f 91       	pop	r17
    1d6c:	0f 91       	pop	r16
    1d6e:	ff 90       	pop	r15
    1d70:	ef 90       	pop	r14
    1d72:	df 90       	pop	r13
    1d74:	cf 90       	pop	r12
    1d76:	bf 90       	pop	r11
    1d78:	af 90       	pop	r10
    1d7a:	9f 90       	pop	r9
    1d7c:	8f 90       	pop	r8
    1d7e:	7f 90       	pop	r7
    1d80:	6f 90       	pop	r6
    1d82:	5f 90       	pop	r5
    1d84:	4f 90       	pop	r4
    1d86:	3f 90       	pop	r3
    1d88:	2f 90       	pop	r2
    1d8a:	08 95       	ret

00001d8c <strnlen_P>:
    1d8c:	fc 01       	movw	r30, r24
    1d8e:	05 90       	lpm	r0, Z+
    1d90:	61 50       	subi	r22, 0x01	; 1
    1d92:	70 40       	sbci	r23, 0x00	; 0
    1d94:	01 10       	cpse	r0, r1
    1d96:	d8 f7       	brcc	.-10     	; 0x1d8e <strnlen_P+0x2>
    1d98:	80 95       	com	r24
    1d9a:	90 95       	com	r25
    1d9c:	8e 0f       	add	r24, r30
    1d9e:	9f 1f       	adc	r25, r31
    1da0:	08 95       	ret

00001da2 <strnlen>:
    1da2:	fc 01       	movw	r30, r24
    1da4:	61 50       	subi	r22, 0x01	; 1
    1da6:	70 40       	sbci	r23, 0x00	; 0
    1da8:	01 90       	ld	r0, Z+
    1daa:	01 10       	cpse	r0, r1
    1dac:	d8 f7       	brcc	.-10     	; 0x1da4 <strnlen+0x2>
    1dae:	80 95       	com	r24
    1db0:	90 95       	com	r25
    1db2:	8e 0f       	add	r24, r30
    1db4:	9f 1f       	adc	r25, r31
    1db6:	08 95       	ret

00001db8 <fputc>:
    1db8:	0f 93       	push	r16
    1dba:	1f 93       	push	r17
    1dbc:	cf 93       	push	r28
    1dbe:	df 93       	push	r29
    1dc0:	8c 01       	movw	r16, r24
    1dc2:	eb 01       	movw	r28, r22
    1dc4:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc6:	81 ff       	sbrs	r24, 1
    1dc8:	1b c0       	rjmp	.+54     	; 0x1e00 <fputc+0x48>
    1dca:	82 ff       	sbrs	r24, 2
    1dcc:	0d c0       	rjmp	.+26     	; 0x1de8 <fputc+0x30>
    1dce:	2e 81       	ldd	r18, Y+6	; 0x06
    1dd0:	3f 81       	ldd	r19, Y+7	; 0x07
    1dd2:	8c 81       	ldd	r24, Y+4	; 0x04
    1dd4:	9d 81       	ldd	r25, Y+5	; 0x05
    1dd6:	28 17       	cp	r18, r24
    1dd8:	39 07       	cpc	r19, r25
    1dda:	64 f4       	brge	.+24     	; 0x1df4 <fputc+0x3c>
    1ddc:	e8 81       	ld	r30, Y
    1dde:	f9 81       	ldd	r31, Y+1	; 0x01
    1de0:	01 93       	st	Z+, r16
    1de2:	f9 83       	std	Y+1, r31	; 0x01
    1de4:	e8 83       	st	Y, r30
    1de6:	06 c0       	rjmp	.+12     	; 0x1df4 <fputc+0x3c>
    1de8:	e8 85       	ldd	r30, Y+8	; 0x08
    1dea:	f9 85       	ldd	r31, Y+9	; 0x09
    1dec:	80 2f       	mov	r24, r16
    1dee:	09 95       	icall
    1df0:	89 2b       	or	r24, r25
    1df2:	31 f4       	brne	.+12     	; 0x1e00 <fputc+0x48>
    1df4:	8e 81       	ldd	r24, Y+6	; 0x06
    1df6:	9f 81       	ldd	r25, Y+7	; 0x07
    1df8:	01 96       	adiw	r24, 0x01	; 1
    1dfa:	9f 83       	std	Y+7, r25	; 0x07
    1dfc:	8e 83       	std	Y+6, r24	; 0x06
    1dfe:	02 c0       	rjmp	.+4      	; 0x1e04 <fputc+0x4c>
    1e00:	0f ef       	ldi	r16, 0xFF	; 255
    1e02:	1f ef       	ldi	r17, 0xFF	; 255
    1e04:	c8 01       	movw	r24, r16
    1e06:	df 91       	pop	r29
    1e08:	cf 91       	pop	r28
    1e0a:	1f 91       	pop	r17
    1e0c:	0f 91       	pop	r16
    1e0e:	08 95       	ret

00001e10 <__ultoa_invert>:
    1e10:	fa 01       	movw	r30, r20
    1e12:	aa 27       	eor	r26, r26
    1e14:	28 30       	cpi	r18, 0x08	; 8
    1e16:	51 f1       	breq	.+84     	; 0x1e6c <__ultoa_invert+0x5c>
    1e18:	20 31       	cpi	r18, 0x10	; 16
    1e1a:	81 f1       	breq	.+96     	; 0x1e7c <__ultoa_invert+0x6c>
    1e1c:	e8 94       	clt
    1e1e:	6f 93       	push	r22
    1e20:	6e 7f       	andi	r22, 0xFE	; 254
    1e22:	6e 5f       	subi	r22, 0xFE	; 254
    1e24:	7f 4f       	sbci	r23, 0xFF	; 255
    1e26:	8f 4f       	sbci	r24, 0xFF	; 255
    1e28:	9f 4f       	sbci	r25, 0xFF	; 255
    1e2a:	af 4f       	sbci	r26, 0xFF	; 255
    1e2c:	b1 e0       	ldi	r27, 0x01	; 1
    1e2e:	3e d0       	rcall	.+124    	; 0x1eac <__ultoa_invert+0x9c>
    1e30:	b4 e0       	ldi	r27, 0x04	; 4
    1e32:	3c d0       	rcall	.+120    	; 0x1eac <__ultoa_invert+0x9c>
    1e34:	67 0f       	add	r22, r23
    1e36:	78 1f       	adc	r23, r24
    1e38:	89 1f       	adc	r24, r25
    1e3a:	9a 1f       	adc	r25, r26
    1e3c:	a1 1d       	adc	r26, r1
    1e3e:	68 0f       	add	r22, r24
    1e40:	79 1f       	adc	r23, r25
    1e42:	8a 1f       	adc	r24, r26
    1e44:	91 1d       	adc	r25, r1
    1e46:	a1 1d       	adc	r26, r1
    1e48:	6a 0f       	add	r22, r26
    1e4a:	71 1d       	adc	r23, r1
    1e4c:	81 1d       	adc	r24, r1
    1e4e:	91 1d       	adc	r25, r1
    1e50:	a1 1d       	adc	r26, r1
    1e52:	20 d0       	rcall	.+64     	; 0x1e94 <__ultoa_invert+0x84>
    1e54:	09 f4       	brne	.+2      	; 0x1e58 <__ultoa_invert+0x48>
    1e56:	68 94       	set
    1e58:	3f 91       	pop	r19
    1e5a:	2a e0       	ldi	r18, 0x0A	; 10
    1e5c:	26 9f       	mul	r18, r22
    1e5e:	11 24       	eor	r1, r1
    1e60:	30 19       	sub	r19, r0
    1e62:	30 5d       	subi	r19, 0xD0	; 208
    1e64:	31 93       	st	Z+, r19
    1e66:	de f6       	brtc	.-74     	; 0x1e1e <__ultoa_invert+0xe>
    1e68:	cf 01       	movw	r24, r30
    1e6a:	08 95       	ret
    1e6c:	46 2f       	mov	r20, r22
    1e6e:	47 70       	andi	r20, 0x07	; 7
    1e70:	40 5d       	subi	r20, 0xD0	; 208
    1e72:	41 93       	st	Z+, r20
    1e74:	b3 e0       	ldi	r27, 0x03	; 3
    1e76:	0f d0       	rcall	.+30     	; 0x1e96 <__ultoa_invert+0x86>
    1e78:	c9 f7       	brne	.-14     	; 0x1e6c <__ultoa_invert+0x5c>
    1e7a:	f6 cf       	rjmp	.-20     	; 0x1e68 <__ultoa_invert+0x58>
    1e7c:	46 2f       	mov	r20, r22
    1e7e:	4f 70       	andi	r20, 0x0F	; 15
    1e80:	40 5d       	subi	r20, 0xD0	; 208
    1e82:	4a 33       	cpi	r20, 0x3A	; 58
    1e84:	18 f0       	brcs	.+6      	; 0x1e8c <__ultoa_invert+0x7c>
    1e86:	49 5d       	subi	r20, 0xD9	; 217
    1e88:	31 fd       	sbrc	r19, 1
    1e8a:	40 52       	subi	r20, 0x20	; 32
    1e8c:	41 93       	st	Z+, r20
    1e8e:	02 d0       	rcall	.+4      	; 0x1e94 <__ultoa_invert+0x84>
    1e90:	a9 f7       	brne	.-22     	; 0x1e7c <__ultoa_invert+0x6c>
    1e92:	ea cf       	rjmp	.-44     	; 0x1e68 <__ultoa_invert+0x58>
    1e94:	b4 e0       	ldi	r27, 0x04	; 4
    1e96:	a6 95       	lsr	r26
    1e98:	97 95       	ror	r25
    1e9a:	87 95       	ror	r24
    1e9c:	77 95       	ror	r23
    1e9e:	67 95       	ror	r22
    1ea0:	ba 95       	dec	r27
    1ea2:	c9 f7       	brne	.-14     	; 0x1e96 <__ultoa_invert+0x86>
    1ea4:	00 97       	sbiw	r24, 0x00	; 0
    1ea6:	61 05       	cpc	r22, r1
    1ea8:	71 05       	cpc	r23, r1
    1eaa:	08 95       	ret
    1eac:	9b 01       	movw	r18, r22
    1eae:	ac 01       	movw	r20, r24
    1eb0:	0a 2e       	mov	r0, r26
    1eb2:	06 94       	lsr	r0
    1eb4:	57 95       	ror	r21
    1eb6:	47 95       	ror	r20
    1eb8:	37 95       	ror	r19
    1eba:	27 95       	ror	r18
    1ebc:	ba 95       	dec	r27
    1ebe:	c9 f7       	brne	.-14     	; 0x1eb2 <__ultoa_invert+0xa2>
    1ec0:	62 0f       	add	r22, r18
    1ec2:	73 1f       	adc	r23, r19
    1ec4:	84 1f       	adc	r24, r20
    1ec6:	95 1f       	adc	r25, r21
    1ec8:	a0 1d       	adc	r26, r0
    1eca:	08 95       	ret

00001ecc <_exit>:
    1ecc:	f8 94       	cli

00001ece <__stop_program>:
    1ece:	ff cf       	rjmp	.-2      	; 0x1ece <__stop_program>
