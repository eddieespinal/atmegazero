
MIDIHost.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000022  00800100  00001b52  00001be6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001b52  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000023  00800122  00800122  00001c08  2**0
                  ALLOC
  3 .debug_aranges 000006d0  00000000  00000000  00001c08  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000fad  00000000  00000000  000022d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000b717  00000000  00000000  00003285  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002885  00000000  00000000  0000e99c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00007e1a  00000000  00000000  00011221  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000b20  00000000  00000000  0001903c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000045fe  00000000  00000000  00019b5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000585a  00000000  00000000  0001e15a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000007b8  00000000  00000000  000239b4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
       0:	1d c1       	rjmp	.+570    	; 0x23c <__ctors_end>
{
	USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, AfterType);

	if (*BytesRem)
	  USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, Type);
}
       2:	00 00       	nop
	return USB_Host_SendControlRequest(NULL);
}

uint8_t USB_Host_SetInterfaceAltSetting(const uint8_t InterfaceIndex,
                                        const uint8_t AltSetting)
{
       4:	39 c1       	rjmp	.+626    	; 0x278 <__bad_interrupt>

	return Serial_ReceiveByte();
}

int Serial_getchar_Blocking(FILE *Stream)
{
       6:	00 00       	nop
       8:	37 c1       	rjmp	.+622    	; 0x278 <__bad_interrupt>
       a:	00 00       	nop
       c:	35 c1       	rjmp	.+618    	; 0x278 <__bad_interrupt>
       e:	00 00       	nop
      10:	33 c1       	rjmp	.+614    	; 0x278 <__bad_interrupt>
      12:	00 00       	nop
      14:	31 c1       	rjmp	.+610    	; 0x278 <__bad_interrupt>
      16:	00 00       	nop
      18:	2f c1       	rjmp	.+606    	; 0x278 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	2d c1       	rjmp	.+602    	; 0x278 <__bad_interrupt>
      1e:	00 00       	nop
      20:	2b c1       	rjmp	.+598    	; 0x278 <__bad_interrupt>
      22:	00 00       	nop
      24:	29 c1       	rjmp	.+594    	; 0x278 <__bad_interrupt>
      26:	00 00       	nop
      28:	05 c6       	rjmp	.+3082   	; 0xc34 <__vector_10>
      2a:	00 00       	nop
      2c:	25 c1       	rjmp	.+586    	; 0x278 <__bad_interrupt>
      2e:	00 00       	nop
      30:	23 c1       	rjmp	.+582    	; 0x278 <__bad_interrupt>
      32:	00 00       	nop
      34:	21 c1       	rjmp	.+578    	; 0x278 <__bad_interrupt>
      36:	00 00       	nop
      38:	1f c1       	rjmp	.+574    	; 0x278 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	1d c1       	rjmp	.+570    	; 0x278 <__bad_interrupt>
      3e:	00 00       	nop
      40:	1b c1       	rjmp	.+566    	; 0x278 <__bad_interrupt>
      42:	00 00       	nop
      44:	19 c1       	rjmp	.+562    	; 0x278 <__bad_interrupt>
      46:	00 00       	nop
      48:	17 c1       	rjmp	.+558    	; 0x278 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	15 c1       	rjmp	.+554    	; 0x278 <__bad_interrupt>
      4e:	00 00       	nop
      50:	13 c1       	rjmp	.+550    	; 0x278 <__bad_interrupt>
      52:	00 00       	nop
      54:	11 c1       	rjmp	.+546    	; 0x278 <__bad_interrupt>
      56:	00 00       	nop
      58:	0f c1       	rjmp	.+542    	; 0x278 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0d c1       	rjmp	.+538    	; 0x278 <__bad_interrupt>
      5e:	00 00       	nop
      60:	0b c1       	rjmp	.+534    	; 0x278 <__bad_interrupt>
      62:	00 00       	nop
      64:	09 c1       	rjmp	.+530    	; 0x278 <__bad_interrupt>
      66:	00 00       	nop
      68:	07 c1       	rjmp	.+526    	; 0x278 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	05 c1       	rjmp	.+522    	; 0x278 <__bad_interrupt>
      6e:	00 00       	nop
      70:	03 c1       	rjmp	.+518    	; 0x278 <__bad_interrupt>
      72:	00 00       	nop
      74:	01 c1       	rjmp	.+514    	; 0x278 <__bad_interrupt>
      76:	00 00       	nop
      78:	ff c0       	rjmp	.+510    	; 0x278 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	fd c0       	rjmp	.+506    	; 0x278 <__bad_interrupt>
      7e:	00 00       	nop
      80:	fb c0       	rjmp	.+502    	; 0x278 <__bad_interrupt>
      82:	00 00       	nop
      84:	f9 c0       	rjmp	.+498    	; 0x278 <__bad_interrupt>
      86:	00 00       	nop
      88:	f7 c0       	rjmp	.+494    	; 0x278 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	f5 c0       	rjmp	.+490    	; 0x278 <__bad_interrupt>
      8e:	00 00       	nop
      90:	f3 c0       	rjmp	.+486    	; 0x278 <__bad_interrupt>
      92:	00 00       	nop
      94:	f1 c0       	rjmp	.+482    	; 0x278 <__bad_interrupt>
      96:	00 00       	nop

00000098 <__c.4670>:
      98:	1b 5b 33 31 6d 44 65 76 20 45 6e 75 6d 20 45 72     .[31mDev Enum Er
      a8:	72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     ror.. -- Error C
      b8:	6f 64 65 20 25 64 0d 0a 20 2d 2d 20 53 75 62 20     ode %d.. -- Sub 
      c8:	45 72 72 6f 72 20 43 6f 64 65 20 25 64 0d 0a 20     Error Code %d.. 
      d8:	2d 2d 20 49 6e 20 53 74 61 74 65 20 25 64 0d 0a     -- In State %d..
      e8:	1b 5b 33 37 6d 00                                   .[37m.

000000ee <__c.4662>:
      ee:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
      fe:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 
     10e:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

0000011d <__c.4653>:
     11d:	4d 49 44 49 20 44 65 76 69 63 65 20 45 6e 75 6d     MIDI Device Enum
     12d:	65 72 61 74 65 64 2e 0d 0a 00                       erated....

00000137 <__c.4651>:
     137:	45 72 72 6f 72 20 53 65 74 74 69 6e 67 20 44 65     Error Setting De
     147:	76 69 63 65 20 43 6f 6e 66 69 67 75 72 61 74 69     vice Configurati
     157:	6f 6e 2e 0d 0a 00                                   on....

0000015d <__c.4649>:
     15d:	41 74 74 61 63 68 65 64 20 44 65 76 69 63 65 20     Attached Device 
     16d:	4e 6f 74 20 61 20 56 61 6c 69 64 20 4d 49 44 49     Not a Valid MIDI
     17d:	20 43 6c 61 73 73 20 44 65 76 69 63 65 2e 0d 0a      Class Device...
     18d:	00                                                  .

0000018e <__c.4647>:
     18e:	45 72 72 6f 72 20 52 65 74 72 69 65 76 69 6e 67     Error Retrieving
     19e:	20 43 6f 6e 66 69 67 75 72 61 74 69 6f 6e 20 44      Configuration D
     1ae:	65 73 63 72 69 70 74 6f 72 2e 0d 0a 00              escriptor....

000001bb <__c.4640>:
     1bb:	0d 0a 44 65 76 69 63 65 20 55 6e 61 74 74 61 63     ..Device Unattac
     1cb:	68 65 64 2e 0d 0a 00                                hed....

000001d2 <__c.4635>:
     1d2:	44 65 76 69 63 65 20 41 74 74 61 63 68 65 64 2e     Device Attached.
     1e2:	0d 0a 00                                            ...

000001e5 <__c.4574>:
     1e5:	4d 49 44 49 20 4e 6f 74 65 20 25 73 20 2d 20 43     MIDI Note %s - C
     1f5:	68 61 6e 6e 65 6c 20 25 64 2c 20 50 69 74 63 68     hannel %d, Pitch
     205:	20 25 64 2c 20 56 65 6c 6f 63 69 74 79 20 25 64      %d, Velocity %d
     215:	0d 0a 00                                            ...

00000218 <__c.4557>:
     218:	1b 5b 33 36 6d 4d 49 44 49 20 48 6f 73 74 20 44     .[36mMIDI Host D
     228:	65 6d 6f 20 72 75 6e 6e 69 6e 67 2e 0d 0a 1b 5b     emo running....[
     238:	33 37 6d 00                                         37m.

0000023c <__ctors_end>:
     23c:	11 24       	eor	r1, r1
     23e:	1f be       	out	0x3f, r1	; 63
     240:	cf ef       	ldi	r28, 0xFF	; 255
     242:	d0 e2       	ldi	r29, 0x20	; 32
     244:	de bf       	out	0x3e, r29	; 62
     246:	cd bf       	out	0x3d, r28	; 61

00000248 <__do_copy_data>:
     248:	11 e0       	ldi	r17, 0x01	; 1
     24a:	a0 e0       	ldi	r26, 0x00	; 0
     24c:	b1 e0       	ldi	r27, 0x01	; 1
     24e:	e2 e5       	ldi	r30, 0x52	; 82
     250:	fb e1       	ldi	r31, 0x1B	; 27
     252:	00 e0       	ldi	r16, 0x00	; 0
     254:	0b bf       	out	0x3b, r16	; 59
     256:	02 c0       	rjmp	.+4      	; 0x25c <__do_copy_data+0x14>
     258:	07 90       	elpm	r0, Z+
     25a:	0d 92       	st	X+, r0
     25c:	a2 32       	cpi	r26, 0x22	; 34
     25e:	b1 07       	cpc	r27, r17
     260:	d9 f7       	brne	.-10     	; 0x258 <__do_copy_data+0x10>

00000262 <__do_clear_bss>:
     262:	11 e0       	ldi	r17, 0x01	; 1
     264:	a2 e2       	ldi	r26, 0x22	; 34
     266:	b1 e0       	ldi	r27, 0x01	; 1
     268:	01 c0       	rjmp	.+2      	; 0x26c <.do_clear_bss_start>

0000026a <.do_clear_bss_loop>:
     26a:	1d 92       	st	X+, r1

0000026c <.do_clear_bss_start>:
     26c:	a5 34       	cpi	r26, 0x45	; 69
     26e:	b1 07       	cpc	r27, r17
     270:	e1 f7       	brne	.-8      	; 0x26a <.do_clear_bss_loop>
     272:	c8 d1       	rcall	.+912    	; 0x604 <main>
     274:	0c 94 a7 0d 	jmp	0x1b4e	; 0x1b4e <_exit>

00000278 <__bad_interrupt>:
     278:	c3 ce       	rjmp	.-634    	; 0x0 <__vectors>

0000027a <EVENT_USB_Host_DeviceEnumerationFailed>:
 *  enumerating an attached USB device.
 */
void EVENT_USB_Host_DeviceEnumerationFailed(const uint8_t ErrorCode,
                                            const uint8_t SubErrorCode)
{
	printf_P(PSTR(ESC_FG_RED "Dev Enum Error\r\n"
     27a:	90 91 30 01 	lds	r25, 0x0130
     27e:	2d b7       	in	r18, 0x3d	; 61
     280:	3e b7       	in	r19, 0x3e	; 62
     282:	28 50       	subi	r18, 0x08	; 8
     284:	30 40       	sbci	r19, 0x00	; 0
     286:	0f b6       	in	r0, 0x3f	; 63
     288:	f8 94       	cli
     28a:	3e bf       	out	0x3e, r19	; 62
     28c:	0f be       	out	0x3f, r0	; 63
     28e:	2d bf       	out	0x3d, r18	; 61
     290:	ed b7       	in	r30, 0x3d	; 61
     292:	fe b7       	in	r31, 0x3e	; 62
     294:	31 96       	adiw	r30, 0x01	; 1
     296:	28 e9       	ldi	r18, 0x98	; 152
     298:	30 e0       	ldi	r19, 0x00	; 0
     29a:	ad b7       	in	r26, 0x3d	; 61
     29c:	be b7       	in	r27, 0x3e	; 62
     29e:	12 96       	adiw	r26, 0x02	; 2
     2a0:	3c 93       	st	X, r19
     2a2:	2e 93       	st	-X, r18
     2a4:	11 97       	sbiw	r26, 0x01	; 1
     2a6:	82 83       	std	Z+2, r24	; 0x02
     2a8:	13 82       	std	Z+3, r1	; 0x03
     2aa:	64 83       	std	Z+4, r22	; 0x04
     2ac:	15 82       	std	Z+5, r1	; 0x05
     2ae:	96 83       	std	Z+6, r25	; 0x06
     2b0:	17 82       	std	Z+7, r1	; 0x07
     2b2:	0e 94 b7 0a 	call	0x156e	; 0x156e <printf_P>
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     2b6:	8b b1       	in	r24, 0x0b	; 11
     2b8:	8f 70       	andi	r24, 0x0F	; 15
     2ba:	80 69       	ori	r24, 0x90	; 144
     2bc:	8b b9       	out	0x0b, r24	; 11
     2be:	2d b7       	in	r18, 0x3d	; 61
     2c0:	3e b7       	in	r19, 0x3e	; 62
     2c2:	28 5f       	subi	r18, 0xF8	; 248
     2c4:	3f 4f       	sbci	r19, 0xFF	; 255
     2c6:	0f b6       	in	r0, 0x3f	; 63
     2c8:	f8 94       	cli
     2ca:	3e bf       	out	0x3e, r19	; 62
     2cc:	0f be       	out	0x3f, r0	; 63
     2ce:	2d bf       	out	0x3d, r18	; 61
	                         " -- Error Code %d\r\n"
	                         " -- Sub Error Code %d\r\n"
	                         " -- In State %d\r\n" ESC_FG_WHITE), ErrorCode, SubErrorCode, USB_HostState);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
}
     2d0:	08 95       	ret

000002d2 <EVENT_USB_Host_HostError>:
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
}

/** Event handler for the USB_HostError event. This indicates that a hardware error occurred while in host mode. */
void EVENT_USB_Host_HostError(const uint8_t ErrorCode)
{
     2d2:	1f 93       	push	r17
     2d4:	18 2f       	mov	r17, r24
	USB_Disable();
     2d6:	89 d4       	rcall	.+2322   	; 0xbea <USB_Disable>

	printf_P(PSTR(ESC_FG_RED "Host Mode Error\r\n"
     2d8:	00 d0       	rcall	.+0      	; 0x2da <EVENT_USB_Host_HostError+0x8>
     2da:	00 d0       	rcall	.+0      	; 0x2dc <EVENT_USB_Host_HostError+0xa>
     2dc:	ed b7       	in	r30, 0x3d	; 61
     2de:	fe b7       	in	r31, 0x3e	; 62
     2e0:	31 96       	adiw	r30, 0x01	; 1
     2e2:	8e ee       	ldi	r24, 0xEE	; 238
     2e4:	90 e0       	ldi	r25, 0x00	; 0
     2e6:	ad b7       	in	r26, 0x3d	; 61
     2e8:	be b7       	in	r27, 0x3e	; 62
     2ea:	12 96       	adiw	r26, 0x02	; 2
     2ec:	9c 93       	st	X, r25
     2ee:	8e 93       	st	-X, r24
     2f0:	11 97       	sbiw	r26, 0x01	; 1
     2f2:	12 83       	std	Z+2, r17	; 0x02
     2f4:	13 82       	std	Z+3, r1	; 0x03
     2f6:	0e 94 b7 0a 	call	0x156e	; 0x156e <printf_P>
     2fa:	8b b1       	in	r24, 0x0b	; 11
     2fc:	8f 70       	andi	r24, 0x0F	; 15
     2fe:	80 69       	ori	r24, 0x90	; 144
     300:	8b b9       	out	0x0b, r24	; 11
     302:	0f 90       	pop	r0
     304:	0f 90       	pop	r0
     306:	0f 90       	pop	r0
     308:	0f 90       	pop	r0
     30a:	ff cf       	rjmp	.-2      	; 0x30a <EVENT_USB_Host_HostError+0x38>

0000030c <EVENT_USB_Host_DeviceUnattached>:
/** Event handler for the USB_DeviceUnattached event. This indicates that a device has been removed from the host, and
 *  stops the library USB task management process.
 */
void EVENT_USB_Host_DeviceUnattached(void)
{
	puts_P(PSTR("\r\nDevice Unattached.\r\n"));
     30c:	8b eb       	ldi	r24, 0xBB	; 187
     30e:	91 e0       	ldi	r25, 0x01	; 1
     310:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <puts_P>
     314:	8b b1       	in	r24, 0x0b	; 11
     316:	8f 70       	andi	r24, 0x0F	; 15
     318:	80 61       	ori	r24, 0x10	; 16
     31a:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
}
     31c:	08 95       	ret

0000031e <EVENT_USB_Host_DeviceAttached>:
/** Event handler for the USB_DeviceAttached event. This indicates that a device has been attached to the host, and
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Host_DeviceAttached(void)
{
	puts_P(PSTR("Device Attached.\r\n"));
     31e:	82 ed       	ldi	r24, 0xD2	; 210
     320:	91 e0       	ldi	r25, 0x01	; 1
     322:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <puts_P>
     326:	8b b1       	in	r24, 0x0b	; 11
     328:	8f 70       	andi	r24, 0x0F	; 15
     32a:	80 6a       	ori	r24, 0xA0	; 160
     32c:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
}
     32e:	08 95       	ret

00000330 <EVENT_USB_Host_DeviceEnumerationComplete>:

/** Event handler for the USB_DeviceEnumerationComplete event. This indicates that a device has been successfully
 *  enumerated by the host and is now ready to be used by the application.
 */
void EVENT_USB_Host_DeviceEnumerationComplete(void)
{
     330:	0f 93       	push	r16
     332:	1f 93       	push	r17
     334:	df 93       	push	r29
     336:	cf 93       	push	r28
     338:	cd b7       	in	r28, 0x3d	; 61
     33a:	de b7       	in	r29, 0x3e	; 62
     33c:	c2 50       	subi	r28, 0x02	; 2
     33e:	d2 40       	sbci	r29, 0x02	; 2
     340:	0f b6       	in	r0, 0x3f	; 63
     342:	f8 94       	cli
     344:	de bf       	out	0x3e, r29	; 62
     346:	0f be       	out	0x3f, r0	; 63
     348:	cd bf       	out	0x3d, r28	; 61
     34a:	8b b1       	in	r24, 0x0b	; 11
     34c:	8f 70       	andi	r24, 0x0F	; 15
     34e:	80 6a       	ori	r24, 0xA0	; 160
     350:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);

	uint16_t ConfigDescriptorSize;
	uint8_t  ConfigDescriptorData[512];

	if (USB_Host_GetDeviceConfigDescriptor(1, &ConfigDescriptorSize, ConfigDescriptorData,
     352:	8e 01       	movw	r16, r28
     354:	0d 5f       	subi	r16, 0xFD	; 253
     356:	1f 4f       	sbci	r17, 0xFF	; 255
     358:	81 e0       	ldi	r24, 0x01	; 1
     35a:	be 01       	movw	r22, r28
     35c:	6f 5f       	subi	r22, 0xFF	; 255
     35e:	7f 4f       	sbci	r23, 0xFF	; 255
     360:	a8 01       	movw	r20, r16
     362:	20 e0       	ldi	r18, 0x00	; 0
     364:	32 e0       	ldi	r19, 0x02	; 2
     366:	eb d5       	rcall	.+3030   	; 0xf3e <USB_Host_GetDeviceConfigDescriptor>
     368:	88 23       	and	r24, r24
     36a:	19 f0       	breq	.+6      	; 0x372 <EVENT_USB_Host_DeviceEnumerationComplete+0x42>
	                                       sizeof(ConfigDescriptorData)) != HOST_GETCONFIG_Successful)
	{
		puts_P(PSTR("Error Retrieving Configuration Descriptor.\r\n"));
     36c:	8e e8       	ldi	r24, 0x8E	; 142
     36e:	91 e0       	ldi	r25, 0x01	; 1
     370:	12 c0       	rjmp	.+36     	; 0x396 <EVENT_USB_Host_DeviceEnumerationComplete+0x66>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (MIDI_Host_ConfigurePipes(&Keyboard_MIDI_Interface,
     372:	69 81       	ldd	r22, Y+1	; 0x01
     374:	7a 81       	ldd	r23, Y+2	; 0x02
     376:	87 e0       	ldi	r24, 0x07	; 7
     378:	91 e0       	ldi	r25, 0x01	; 1
     37a:	a8 01       	movw	r20, r16
     37c:	0e 94 da 09 	call	0x13b4	; 0x13b4 <MIDI_Host_ConfigurePipes>
     380:	88 23       	and	r24, r24
     382:	19 f0       	breq	.+6      	; 0x38a <EVENT_USB_Host_DeviceEnumerationComplete+0x5a>
	                             ConfigDescriptorSize, ConfigDescriptorData) != MIDI_ENUMERROR_NoError)
	{
		puts_P(PSTR("Attached Device Not a Valid MIDI Class Device.\r\n"));
     384:	8d e5       	ldi	r24, 0x5D	; 93
     386:	91 e0       	ldi	r25, 0x01	; 1
     388:	06 c0       	rjmp	.+12     	; 0x396 <EVENT_USB_Host_DeviceEnumerationComplete+0x66>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (USB_Host_SetDeviceConfiguration(1) != HOST_SENDCONTROL_Successful)
     38a:	81 e0       	ldi	r24, 0x01	; 1
     38c:	63 d7       	rcall	.+3782   	; 0x1254 <USB_Host_SetDeviceConfiguration>
     38e:	88 23       	and	r24, r24
     390:	41 f0       	breq	.+16     	; 0x3a2 <EVENT_USB_Host_DeviceEnumerationComplete+0x72>
	{
		puts_P(PSTR("Error Setting Device Configuration.\r\n"));
     392:	87 e3       	ldi	r24, 0x37	; 55
     394:	91 e0       	ldi	r25, 0x01	; 1
     396:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <puts_P>
     39a:	8b b1       	in	r24, 0x0b	; 11
     39c:	8f 70       	andi	r24, 0x0F	; 15
     39e:	80 69       	ori	r24, 0x90	; 144
     3a0:	07 c0       	rjmp	.+14     	; 0x3b0 <EVENT_USB_Host_DeviceEnumerationComplete+0x80>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	puts_P(PSTR("MIDI Device Enumerated.\r\n"));
     3a2:	8d e1       	ldi	r24, 0x1D	; 29
     3a4:	91 e0       	ldi	r25, 0x01	; 1
     3a6:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <puts_P>
     3aa:	8b b1       	in	r24, 0x0b	; 11
     3ac:	8f 70       	andi	r24, 0x0F	; 15
     3ae:	80 66       	ori	r24, 0x60	; 96
     3b0:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
}
     3b2:	ce 5f       	subi	r28, 0xFE	; 254
     3b4:	dd 4f       	sbci	r29, 0xFD	; 253
     3b6:	0f b6       	in	r0, 0x3f	; 63
     3b8:	f8 94       	cli
     3ba:	de bf       	out	0x3e, r29	; 62
     3bc:	0f be       	out	0x3f, r0	; 63
     3be:	cd bf       	out	0x3d, r28	; 61
     3c0:	cf 91       	pop	r28
     3c2:	df 91       	pop	r29
     3c4:	1f 91       	pop	r17
     3c6:	0f 91       	pop	r16
     3c8:	08 95       	ret

000003ca <CheckJoystickMovement>:

/** Checks for movement of the board's joystick, and sends corresponding MIDI note on/off
 *  messages to the host.
 */
void CheckJoystickMovement(void)
{
     3ca:	1f 93       	push	r17
     3cc:	df 93       	push	r29
     3ce:	cf 93       	push	r28
     3d0:	00 d0       	rcall	.+0      	; 0x3d2 <CheckJoystickMovement+0x8>
     3d2:	00 d0       	rcall	.+0      	; 0x3d4 <CheckJoystickMovement+0xa>
     3d4:	cd b7       	in	r28, 0x3d	; 61
     3d6:	de b7       	in	r29, 0x3e	; 62
			}

			static inline uint8_t Joystick_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Joystick_GetStatus(void)
			{
				return (((uint8_t)~PINB & JOY_BMASK) | (((uint8_t)~PINE & JOY_EMASK) >> JOY_PORTE_MASK_SHIFT));
     3d8:	13 b1       	in	r17, 0x03	; 3
     3da:	8c b1       	in	r24, 0x0c	; 12
     3dc:	80 95       	com	r24
     3de:	90 e0       	ldi	r25, 0x00	; 0
     3e0:	80 73       	andi	r24, 0x30	; 48
     3e2:	90 70       	andi	r25, 0x00	; 0
     3e4:	95 95       	asr	r25
     3e6:	87 95       	ror	r24
     3e8:	10 95       	com	r17
     3ea:	10 7e       	andi	r17, 0xE0	; 224
     3ec:	18 2b       	or	r17, r24
	uint8_t MIDICommand = 0;
	uint8_t MIDIPitch;

	/* Get current joystick mask, XOR with previous to detect joystick changes */
	uint8_t JoystickStatus  = Joystick_GetStatus();
	uint8_t JoystickChanges = (JoystickStatus ^ PrevJoystickStatus);
     3ee:	90 91 22 01 	lds	r25, 0x0122
     3f2:	91 27       	eor	r25, r17

	/* Get board button status - if pressed use channel 10 (percussion), otherwise use channel 1 */
	uint8_t Channel = ((Buttons_GetStatus() & BUTTONS_BUTTON1) ? MIDI_CHANNEL(10) : MIDI_CHANNEL(1));
     3f4:	62 9b       	sbis	0x0c, 2	; 12
     3f6:	02 c0       	rjmp	.+4      	; 0x3fc <CheckJoystickMovement+0x32>
     3f8:	30 e0       	ldi	r19, 0x00	; 0
     3fa:	01 c0       	rjmp	.+2      	; 0x3fe <CheckJoystickMovement+0x34>
     3fc:	39 e0       	ldi	r19, 0x09	; 9

	if (JoystickChanges & JOY_LEFT)
     3fe:	96 ff       	sbrs	r25, 6
     400:	07 c0       	rjmp	.+14     	; 0x410 <CheckJoystickMovement+0x46>
	{
		MIDICommand = ((JoystickStatus & JOY_LEFT)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
     402:	16 fd       	sbrc	r17, 6
     404:	02 c0       	rjmp	.+4      	; 0x40a <CheckJoystickMovement+0x40>
     406:	20 e8       	ldi	r18, 0x80	; 128
     408:	01 c0       	rjmp	.+2      	; 0x40c <CheckJoystickMovement+0x42>
     40a:	20 e9       	ldi	r18, 0x90	; 144
     40c:	9c e3       	ldi	r25, 0x3C	; 60
     40e:	23 c0       	rjmp	.+70     	; 0x456 <CheckJoystickMovement+0x8c>
		MIDIPitch   = 0x3C;
	}
	else if (JoystickChanges & JOY_UP)
     410:	97 ff       	sbrs	r25, 7
     412:	07 c0       	rjmp	.+14     	; 0x422 <CheckJoystickMovement+0x58>
	{
		MIDICommand = ((JoystickStatus & JOY_UP)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
     414:	17 fd       	sbrc	r17, 7
     416:	02 c0       	rjmp	.+4      	; 0x41c <CheckJoystickMovement+0x52>
     418:	20 e8       	ldi	r18, 0x80	; 128
     41a:	01 c0       	rjmp	.+2      	; 0x41e <CheckJoystickMovement+0x54>
     41c:	20 e9       	ldi	r18, 0x90	; 144
     41e:	9d e3       	ldi	r25, 0x3D	; 61
     420:	1a c0       	rjmp	.+52     	; 0x456 <CheckJoystickMovement+0x8c>
		MIDIPitch   = 0x3D;
	}
	else if (JoystickChanges & JOY_RIGHT)
     422:	93 ff       	sbrs	r25, 3
     424:	07 c0       	rjmp	.+14     	; 0x434 <CheckJoystickMovement+0x6a>
	{
		MIDICommand = ((JoystickStatus & JOY_RIGHT)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
     426:	13 fd       	sbrc	r17, 3
     428:	02 c0       	rjmp	.+4      	; 0x42e <CheckJoystickMovement+0x64>
     42a:	20 e8       	ldi	r18, 0x80	; 128
     42c:	01 c0       	rjmp	.+2      	; 0x430 <CheckJoystickMovement+0x66>
     42e:	20 e9       	ldi	r18, 0x90	; 144
     430:	9e e3       	ldi	r25, 0x3E	; 62
     432:	11 c0       	rjmp	.+34     	; 0x456 <CheckJoystickMovement+0x8c>
		MIDIPitch   = 0x3E;
	}
	else if (JoystickChanges & JOY_DOWN)
     434:	94 ff       	sbrs	r25, 4
     436:	07 c0       	rjmp	.+14     	; 0x446 <CheckJoystickMovement+0x7c>
	{
		MIDICommand = ((JoystickStatus & JOY_DOWN)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
     438:	14 fd       	sbrc	r17, 4
     43a:	02 c0       	rjmp	.+4      	; 0x440 <CheckJoystickMovement+0x76>
     43c:	20 e8       	ldi	r18, 0x80	; 128
     43e:	01 c0       	rjmp	.+2      	; 0x442 <CheckJoystickMovement+0x78>
     440:	20 e9       	ldi	r18, 0x90	; 144
     442:	9f e3       	ldi	r25, 0x3F	; 63
     444:	08 c0       	rjmp	.+16     	; 0x456 <CheckJoystickMovement+0x8c>
		MIDIPitch   = 0x3F;
	}
	else if (JoystickChanges & JOY_PRESS)
     446:	95 ff       	sbrs	r25, 5
     448:	18 c0       	rjmp	.+48     	; 0x47a <CheckJoystickMovement+0xb0>
	{
		MIDICommand = ((JoystickStatus & JOY_PRESS)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
     44a:	15 fd       	sbrc	r17, 5
     44c:	02 c0       	rjmp	.+4      	; 0x452 <CheckJoystickMovement+0x88>
     44e:	20 e8       	ldi	r18, 0x80	; 128
     450:	01 c0       	rjmp	.+2      	; 0x454 <CheckJoystickMovement+0x8a>
     452:	20 e9       	ldi	r18, 0x90	; 144
     454:	9b e3       	ldi	r25, 0x3B	; 59
				.Command     = (MIDICommand >> 4),

				.Data1       = MIDICommand | Channel,
				.Data2       = MIDIPitch,
				.Data3       = MIDI_STANDARD_VELOCITY,
			};
     456:	82 2f       	mov	r24, r18
     458:	82 95       	swap	r24
     45a:	8f 70       	andi	r24, 0x0F	; 15
     45c:	89 83       	std	Y+1, r24	; 0x01
     45e:	23 2b       	or	r18, r19
     460:	2a 83       	std	Y+2, r18	; 0x02
     462:	9b 83       	std	Y+3, r25	; 0x03
     464:	80 e4       	ldi	r24, 0x40	; 64
     466:	8c 83       	std	Y+4, r24	; 0x04

		MIDI_Host_SendEventPacket(&Keyboard_MIDI_Interface, &MIDIEvent);
     468:	87 e0       	ldi	r24, 0x07	; 7
     46a:	91 e0       	ldi	r25, 0x01	; 1
     46c:	be 01       	movw	r22, r28
     46e:	6f 5f       	subi	r22, 0xFF	; 255
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	59 d7       	rcall	.+3762   	; 0x1326 <MIDI_Host_SendEventPacket>
		MIDI_Host_Flush(&Keyboard_MIDI_Interface);
     474:	87 e0       	ldi	r24, 0x07	; 7
     476:	91 e0       	ldi	r25, 0x01	; 1
     478:	77 d7       	rcall	.+3822   	; 0x1368 <MIDI_Host_Flush>
	}

	PrevJoystickStatus = JoystickStatus;
     47a:	10 93 22 01 	sts	0x0122, r17
}
     47e:	0f 90       	pop	r0
     480:	0f 90       	pop	r0
     482:	0f 90       	pop	r0
     484:	0f 90       	pop	r0
     486:	cf 91       	pop	r28
     488:	df 91       	pop	r29
     48a:	1f 91       	pop	r17
     48c:	08 95       	ret

0000048e <JoystickHost_Task>:

/** Task to manage an enumerated USB MIDI device once connected, to display received
 *  note events from the host and send note changes in response to tbe board's joystick.
 */
void JoystickHost_Task(void)
{
     48e:	ef 92       	push	r14
     490:	ff 92       	push	r15
     492:	0f 93       	push	r16
     494:	1f 93       	push	r17
     496:	df 93       	push	r29
     498:	cf 93       	push	r28
     49a:	00 d0       	rcall	.+0      	; 0x49c <JoystickHost_Task+0xe>
     49c:	00 d0       	rcall	.+0      	; 0x49e <JoystickHost_Task+0x10>
     49e:	cd b7       	in	r28, 0x3d	; 61
     4a0:	de b7       	in	r29, 0x3e	; 62
	if (USB_HostState != HOST_STATE_Configured)
     4a2:	80 91 30 01 	lds	r24, 0x0130
     4a6:	8b 30       	cpi	r24, 0x0B	; 11
     4a8:	09 f0       	breq	.+2      	; 0x4ac <JoystickHost_Task+0x1e>
     4aa:	49 c0       	rjmp	.+146    	; 0x53e <JoystickHost_Task+0xb0>
     4ac:	3a c0       	rjmp	.+116    	; 0x522 <JoystickHost_Task+0x94>
	  return;

	MIDI_EventPacket_t MIDIEvent;
	while (MIDI_Host_ReceiveEventPacket(&Keyboard_MIDI_Interface, &MIDIEvent))
	{
		bool NoteOnEvent  = ((MIDIEvent.Command & 0x0F) == (MIDI_COMMAND_NOTE_ON  >> 4));
     4ae:	89 81       	ldd	r24, Y+1	; 0x01
     4b0:	8f 70       	andi	r24, 0x0F	; 15
     4b2:	90 e0       	ldi	r25, 0x00	; 0
		bool NoteOffEvent = ((MIDIEvent.Command & 0x0F) == (MIDI_COMMAND_NOTE_OFF >> 4));

		/* Display note events from the host */
		if (NoteOnEvent || NoteOffEvent)
     4b4:	89 30       	cpi	r24, 0x09	; 9
     4b6:	91 05       	cpc	r25, r1
     4b8:	19 f4       	brne	.+6      	; 0x4c0 <JoystickHost_Task+0x32>
     4ba:	80 e0       	ldi	r24, 0x00	; 0
     4bc:	91 e0       	ldi	r25, 0x01	; 1
     4be:	04 c0       	rjmp	.+8      	; 0x4c8 <JoystickHost_Task+0x3a>
     4c0:	08 97       	sbiw	r24, 0x08	; 8
     4c2:	a9 f5       	brne	.+106    	; 0x52e <JoystickHost_Task+0xa0>
     4c4:	83 e0       	ldi	r24, 0x03	; 3
     4c6:	91 e0       	ldi	r25, 0x01	; 1
		{
			printf_P(PSTR("MIDI Note %s - Channel %d, Pitch %d, Velocity %d\r\n"), NoteOnEvent ? "On" : "Off",
     4c8:	2d b7       	in	r18, 0x3d	; 61
     4ca:	3e b7       	in	r19, 0x3e	; 62
     4cc:	2a 50       	subi	r18, 0x0A	; 10
     4ce:	30 40       	sbci	r19, 0x00	; 0
     4d0:	0f b6       	in	r0, 0x3f	; 63
     4d2:	f8 94       	cli
     4d4:	3e bf       	out	0x3e, r19	; 62
     4d6:	0f be       	out	0x3f, r0	; 63
     4d8:	2d bf       	out	0x3d, r18	; 61
     4da:	ed b7       	in	r30, 0x3d	; 61
     4dc:	fe b7       	in	r31, 0x3e	; 62
     4de:	31 96       	adiw	r30, 0x01	; 1
     4e0:	ad b7       	in	r26, 0x3d	; 61
     4e2:	be b7       	in	r27, 0x3e	; 62
     4e4:	12 96       	adiw	r26, 0x02	; 2
     4e6:	1c 93       	st	X, r17
     4e8:	0e 93       	st	-X, r16
     4ea:	11 97       	sbiw	r26, 0x01	; 1
     4ec:	93 83       	std	Z+3, r25	; 0x03
     4ee:	82 83       	std	Z+2, r24	; 0x02
     4f0:	8a 81       	ldd	r24, Y+2	; 0x02
     4f2:	90 e0       	ldi	r25, 0x00	; 0
     4f4:	8f 70       	andi	r24, 0x0F	; 15
     4f6:	90 70       	andi	r25, 0x00	; 0
     4f8:	01 96       	adiw	r24, 0x01	; 1
     4fa:	95 83       	std	Z+5, r25	; 0x05
     4fc:	84 83       	std	Z+4, r24	; 0x04
     4fe:	8b 81       	ldd	r24, Y+3	; 0x03
     500:	86 83       	std	Z+6, r24	; 0x06
     502:	17 82       	std	Z+7, r1	; 0x07
     504:	8c 81       	ldd	r24, Y+4	; 0x04
     506:	80 87       	std	Z+8, r24	; 0x08
     508:	11 86       	std	Z+9, r1	; 0x09
     50a:	0e 94 b7 0a 	call	0x156e	; 0x156e <printf_P>
     50e:	2d b7       	in	r18, 0x3d	; 61
     510:	3e b7       	in	r19, 0x3e	; 62
     512:	26 5f       	subi	r18, 0xF6	; 246
     514:	3f 4f       	sbci	r19, 0xFF	; 255
     516:	0f b6       	in	r0, 0x3f	; 63
     518:	f8 94       	cli
     51a:	3e bf       	out	0x3e, r19	; 62
     51c:	0f be       	out	0x3f, r0	; 63
     51e:	2d bf       	out	0x3d, r18	; 61
     520:	06 c0       	rjmp	.+12     	; 0x52e <JoystickHost_Task+0xa0>
{
	if (USB_HostState != HOST_STATE_Configured)
	  return;

	MIDI_EventPacket_t MIDIEvent;
	while (MIDI_Host_ReceiveEventPacket(&Keyboard_MIDI_Interface, &MIDIEvent))
     522:	7e 01       	movw	r14, r28
     524:	08 94       	sec
     526:	e1 1c       	adc	r14, r1
     528:	f1 1c       	adc	r15, r1
		bool NoteOffEvent = ((MIDIEvent.Command & 0x0F) == (MIDI_COMMAND_NOTE_OFF >> 4));

		/* Display note events from the host */
		if (NoteOnEvent || NoteOffEvent)
		{
			printf_P(PSTR("MIDI Note %s - Channel %d, Pitch %d, Velocity %d\r\n"), NoteOnEvent ? "On" : "Off",
     52a:	05 ee       	ldi	r16, 0xE5	; 229
     52c:	11 e0       	ldi	r17, 0x01	; 1
{
	if (USB_HostState != HOST_STATE_Configured)
	  return;

	MIDI_EventPacket_t MIDIEvent;
	while (MIDI_Host_ReceiveEventPacket(&Keyboard_MIDI_Interface, &MIDIEvent))
     52e:	87 e0       	ldi	r24, 0x07	; 7
     530:	91 e0       	ldi	r25, 0x01	; 1
     532:	b7 01       	movw	r22, r14
     534:	d4 d6       	rcall	.+3496   	; 0x12de <MIDI_Host_ReceiveEventPacket>
     536:	88 23       	and	r24, r24
     538:	09 f0       	breq	.+2      	; 0x53c <JoystickHost_Task+0xae>
     53a:	b9 cf       	rjmp	.-142    	; 0x4ae <JoystickHost_Task+0x20>
																				   ((MIDIEvent.Data1 & 0x0F) + 1),
																				   MIDIEvent.Data2, MIDIEvent.Data3);
		}
	}

	CheckJoystickMovement();
     53c:	46 df       	rcall	.-372    	; 0x3ca <CheckJoystickMovement>
}
     53e:	0f 90       	pop	r0
     540:	0f 90       	pop	r0
     542:	0f 90       	pop	r0
     544:	0f 90       	pop	r0
     546:	cf 91       	pop	r28
     548:	df 91       	pop	r29
     54a:	1f 91       	pop	r17
     54c:	0f 91       	pop	r16
     54e:	ff 90       	pop	r15
     550:	ef 90       	pop	r14
     552:	08 95       	ret

00000554 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     554:	84 b7       	in	r24, 0x34	; 52
     556:	87 7f       	andi	r24, 0xF7	; 247
     558:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     55a:	38 e1       	ldi	r19, 0x18	; 24
     55c:	0f b6       	in	r0, 0x3f	; 63
     55e:	f8 94       	cli
     560:	30 93 60 00 	sts	0x0060, r19
     564:	10 92 60 00 	sts	0x0060, r1
     568:	0f be       	out	0x3f, r0	; 63

	/* Disable clock division */
	clock_prescale_set(clock_div_1);
     56a:	80 e0       	ldi	r24, 0x00	; 0
     56c:	90 e0       	ldi	r25, 0x00	; 0
     56e:	20 e8       	ldi	r18, 0x80	; 128
     570:	0f b6       	in	r0, 0x3f	; 63
     572:	f8 94       	cli
     574:	20 93 61 00 	sts	0x0061, r18
     578:	80 93 61 00 	sts	0x0061, r24
     57c:	0f be       	out	0x3f, r0	; 63
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     57e:	83 e3       	ldi	r24, 0x33	; 51
     580:	90 e0       	ldi	r25, 0x00	; 0
     582:	90 93 cd 00 	sts	0x00CD, r25
     586:	80 93 cc 00 	sts	0x00CC, r24

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     58a:	86 e0       	ldi	r24, 0x06	; 6
     58c:	80 93 ca 00 	sts	0x00CA, r24
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     590:	10 92 c8 00 	sts	0x00C8, r1
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     594:	30 93 c9 00 	sts	0x00C9, r19

				DDRD  |= (1 << 3);
     598:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     59a:	5a 9a       	sbi	0x0b, 2	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     59c:	8a b1       	in	r24, 0x0a	; 10
     59e:	80 6f       	ori	r24, 0xF0	; 240
     5a0:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     5a2:	8b b1       	in	r24, 0x0b	; 11
     5a4:	8f 70       	andi	r24, 0x0F	; 15
     5a6:	8b b9       	out	0x0b, r24	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Buttons_Init(void)
			{
				DDRE  &= ~BUTTONS_BUTTON1;
     5a8:	6a 98       	cbi	0x0d, 2	; 13
				PORTE |=  BUTTONS_BUTTON1;
     5aa:	72 9a       	sbi	0x0e, 2	; 14

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Joystick_Init(void)
			{
				DDRB  &= ~(JOY_BMASK);
     5ac:	84 b1       	in	r24, 0x04	; 4
     5ae:	8f 71       	andi	r24, 0x1F	; 31
     5b0:	84 b9       	out	0x04, r24	; 4
				DDRE  &= ~(JOY_EMASK);
     5b2:	8d b1       	in	r24, 0x0d	; 13
     5b4:	8f 7c       	andi	r24, 0xCF	; 207
     5b6:	8d b9       	out	0x0d, r24	; 13

				PORTB |= JOY_BMASK;
     5b8:	85 b1       	in	r24, 0x05	; 5
     5ba:	80 6e       	ori	r24, 0xE0	; 224
     5bc:	85 b9       	out	0x05, r24	; 5
				PORTE |= JOY_EMASK;
     5be:	8e b1       	in	r24, 0x0e	; 14
     5c0:	80 63       	ori	r24, 0x30	; 48
     5c2:	8e b9       	out	0x0e, r24	; 14
	/* Hardware Initialization */
	Serial_Init(9600, false);
	LEDs_Init();
	Buttons_Init();
	Joystick_Init();
	USB_Init();
     5c4:	09 d3       	rcall	.+1554   	; 0xbd8 <USB_Init>
			static inline void Serial_CreateStream(FILE* Stream)
			{
				if (!(Stream))
				{
					Stream = &USARTSerialStream;
					stdin  = Stream;
     5c6:	e1 e3       	ldi	r30, 0x31	; 49
     5c8:	f1 e0       	ldi	r31, 0x01	; 1
     5ca:	f0 93 40 01 	sts	0x0140, r31
     5ce:	e0 93 3f 01 	sts	0x013F, r30
					stdout = Stream;
     5d2:	f0 93 42 01 	sts	0x0142, r31
     5d6:	e0 93 41 01 	sts	0x0141, r30
				}
			
				*Stream = (FILE)FDEV_SETUP_STREAM(Serial_putchar, Serial_getchar, _FDEV_SETUP_RW);
     5da:	8e e0       	ldi	r24, 0x0E	; 14
     5dc:	df 01       	movw	r26, r30
     5de:	1d 92       	st	X+, r1
     5e0:	8a 95       	dec	r24
     5e2:	e9 f7       	brne	.-6      	; 0x5de <SetupHardware+0x8a>
     5e4:	83 e0       	ldi	r24, 0x03	; 3
     5e6:	80 93 34 01 	sts	0x0134, r24
     5ea:	89 e9       	ldi	r24, 0x99	; 153
     5ec:	9a e0       	ldi	r25, 0x0A	; 10
     5ee:	90 93 3a 01 	sts	0x013A, r25
     5f2:	80 93 39 01 	sts	0x0139, r24
     5f6:	83 ea       	ldi	r24, 0xA3	; 163
     5f8:	9a e0       	ldi	r25, 0x0A	; 10
     5fa:	90 93 3c 01 	sts	0x013C, r25
     5fe:	80 93 3b 01 	sts	0x013B, r24

	/* Create a stdio stream for the serial port for stdin and stdout */
	Serial_CreateStream(NULL);
}
     602:	08 95       	ret

00000604 <main>:
/** Main program entry point. This routine configures the hardware required by the application, then
 *  enters a loop to run the application tasks in sequence.
 */
int main(void)
{
	SetupHardware();
     604:	a7 df       	rcall	.-178    	; 0x554 <SetupHardware>

	puts_P(PSTR(ESC_FG_CYAN "MIDI Host Demo running.\r\n" ESC_FG_WHITE));
     606:	88 e1       	ldi	r24, 0x18	; 24
     608:	92 e0       	ldi	r25, 0x02	; 2
     60a:	d3 d7       	rcall	.+4006   	; 0x15b2 <puts_P>
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     60c:	8b b1       	in	r24, 0x0b	; 11
     60e:	8f 70       	andi	r24, 0x0F	; 15
     610:	80 61       	ori	r24, 0x10	; 16
     612:	8b b9       	out	0x0b, r24	; 11

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
	sei();
     614:	78 94       	sei

	for (;;)
	{
		JoystickHost_Task();
     616:	3b df       	rcall	.-394    	; 0x48e <JoystickHost_Task>

		MIDI_Host_USBTask(&Keyboard_MIDI_Interface);
     618:	87 e0       	ldi	r24, 0x07	; 7
     61a:	91 e0       	ldi	r25, 0x01	; 1
     61c:	c0 d6       	rcall	.+3456   	; 0x139e <MIDI_Host_USBTask>
		USB_USBTask();
     61e:	3f d6       	rcall	.+3198   	; 0x129e <USB_USBTask>
     620:	fa cf       	rjmp	.-12     	; 0x616 <main+0x12>

00000622 <USB_Host_WaitMS>:
		USB_ResetInterface();
	}
}

uint8_t USB_Host_WaitMS(uint8_t MS)
{
     622:	98 2f       	mov	r25, r24
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     624:	20 91 9e 00 	lds	r18, 0x009E
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     628:	30 91 a0 00 	lds	r19, 0x00A0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     62c:	80 91 a0 00 	lds	r24, 0x00A0
     630:	8f 7d       	andi	r24, 0xDF	; 223
     632:	80 93 a0 00 	sts	0x00A0, r24
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     636:	80 91 9f 00 	lds	r24, 0x009F
     63a:	8f 7d       	andi	r24, 0xDF	; 223
     63c:	80 93 9f 00 	sts	0x009F, r24
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     640:	80 91 9e 00 	lds	r24, 0x009E
     644:	81 60       	ori	r24, 0x01	; 1
     646:	80 93 9e 00 	sts	0x009E, r24
     64a:	28 c0       	rjmp	.+80     	; 0x69c <USB_Host_WaitMS+0x7a>
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     64c:	80 91 9f 00 	lds	r24, 0x009F

	USB_Host_ResumeBus();

	while (MS)
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     650:	85 ff       	sbrs	r24, 5
     652:	06 c0       	rjmp	.+12     	; 0x660 <USB_Host_WaitMS+0x3e>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     654:	80 91 9f 00 	lds	r24, 0x009F
     658:	8f 7d       	andi	r24, 0xDF	; 223
     65a:	80 93 9f 00 	sts	0x009F, r24
		{
			USB_INT_Clear(USB_INT_HSOFI);
			MS--;
     65e:	91 50       	subi	r25, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
     660:	80 91 30 01 	lds	r24, 0x0130
     664:	81 30       	cpi	r24, 0x01	; 1
     666:	11 f4       	brne	.+4      	; 0x66c <USB_Host_WaitMS+0x4a>
     668:	91 e0       	ldi	r25, 0x01	; 1
     66a:	1a c0       	rjmp	.+52     	; 0x6a0 <USB_Host_WaitMS+0x7e>
			 *  \return Boolean \c true if an error has occurred on the selected pipe, \c false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
     66c:	80 91 a6 00 	lds	r24, 0x00A6
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError() == true)
     670:	84 ff       	sbrs	r24, 4
     672:	09 c0       	rjmp	.+18     	; 0x686 <USB_Host_WaitMS+0x64>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     674:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
     678:	80 91 a6 00 	lds	r24, 0x00A6
     67c:	8f 7e       	andi	r24, 0xEF	; 239
     67e:	80 93 a6 00 	sts	0x00A6, r24
     682:	92 e0       	ldi	r25, 0x02	; 2
     684:	0d c0       	rjmp	.+26     	; 0x6a0 <USB_Host_WaitMS+0x7e>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     686:	80 91 a6 00 	lds	r24, 0x00A6
			ErrorCode = HOST_WAITERROR_PipeError;

			break;
		}

		if (Pipe_IsStalled() == true)
     68a:	81 ff       	sbrs	r24, 1
     68c:	07 c0       	rjmp	.+14     	; 0x69c <USB_Host_WaitMS+0x7a>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
     68e:	80 91 a6 00 	lds	r24, 0x00A6
     692:	8d 7f       	andi	r24, 0xFD	; 253
     694:	80 93 a6 00 	sts	0x00A6, r24
     698:	93 e0       	ldi	r25, 0x03	; 3
     69a:	02 c0       	rjmp	.+4      	; 0x6a0 <USB_Host_WaitMS+0x7e>
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     69c:	99 23       	and	r25, r25
     69e:	b1 f6       	brne	.-84     	; 0x64c <USB_Host_WaitMS+0x2a>

			break;
		}
	}

	if (BusSuspended)
     6a0:	20 fd       	sbrc	r18, 0
     6a2:	05 c0       	rjmp	.+10     	; 0x6ae <USB_Host_WaitMS+0x8c>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     6a4:	80 91 9e 00 	lds	r24, 0x009E
     6a8:	8e 7f       	andi	r24, 0xFE	; 254
     6aa:	80 93 9e 00 	sts	0x009E, r24
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
     6ae:	35 ff       	sbrs	r19, 5
     6b0:	05 c0       	rjmp	.+10     	; 0x6bc <USB_Host_WaitMS+0x9a>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     6b2:	80 91 a0 00 	lds	r24, 0x00A0
     6b6:	80 62       	ori	r24, 0x20	; 32
     6b8:	80 93 a0 00 	sts	0x00A0, r24
	  USB_INT_Enable(USB_INT_HSOFI);

	return ErrorCode;
}
     6bc:	89 2f       	mov	r24, r25
     6be:	08 95       	ret

000006c0 <USB_Host_ResetDevice>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     6c0:	60 91 9e 00 	lds	r22, 0x009E
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     6c4:	80 91 a0 00 	lds	r24, 0x00A0
     6c8:	8d 7f       	andi	r24, 0xFD	; 253
     6ca:	80 93 a0 00 	sts	0x00A0, r24
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
     6ce:	80 91 9e 00 	lds	r24, 0x009E
     6d2:	82 60       	ori	r24, 0x02	; 2
     6d4:	80 93 9e 00 	sts	0x009E, r24
			 *  \return Boolean \c true if no bus reset is currently being sent, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
     6d8:	80 91 9e 00 	lds	r24, 0x009E
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
     6dc:	81 fd       	sbrc	r24, 1
     6de:	fc cf       	rjmp	.-8      	; 0x6d8 <USB_Host_ResetDevice+0x18>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     6e0:	80 91 9e 00 	lds	r24, 0x009E
     6e4:	81 60       	ori	r24, 0x01	; 1
     6e6:	80 93 9e 00 	sts	0x009E, r24
	USB_Host_ResumeBus();
	
	USB_Host_ConfigurationNumber = 0;
     6ea:	10 92 26 01 	sts	0x0126, r1
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     6ee:	30 91 a0 00 	lds	r19, 0x00A0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     6f2:	80 91 a0 00 	lds	r24, 0x00A0
     6f6:	8f 7d       	andi	r24, 0xDF	; 223
     6f8:	80 93 a0 00 	sts	0x00A0, r24
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     6fc:	80 91 9f 00 	lds	r24, 0x009F
     700:	8f 7d       	andi	r24, 0xDF	; 223
     702:	80 93 9f 00 	sts	0x009F, r24
     706:	2a e0       	ldi	r18, 0x0A	; 10
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     708:	40 ed       	ldi	r20, 0xD0	; 208
     70a:	57 e0       	ldi	r21, 0x07	; 7
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     70c:	80 91 9f 00 	lds	r24, 0x009F
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     710:	85 ff       	sbrs	r24, 5
     712:	0b c0       	rjmp	.+22     	; 0x72a <USB_Host_ResetDevice+0x6a>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     714:	80 91 9f 00 	lds	r24, 0x009F
     718:	8f 7d       	andi	r24, 0xDF	; 223
     71a:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     71e:	80 91 9f 00 	lds	r24, 0x009F
     722:	8d 7f       	andi	r24, 0xFD	; 253
     724:	80 93 9f 00 	sts	0x009F, r24
     728:	05 c0       	rjmp	.+10     	; 0x734 <USB_Host_ResetDevice+0x74>
     72a:	ca 01       	movw	r24, r20
     72c:	01 97       	sbiw	r24, 0x01	; 1
     72e:	f1 f7       	brne	.-4      	; 0x72c <USB_Host_ResetDevice+0x6c>
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
     730:	21 50       	subi	r18, 0x01	; 1
     732:	61 f7       	brne	.-40     	; 0x70c <USB_Host_ResetDevice+0x4c>
		}

		Delay_MS(1);
	}

	if (HSOFIEnabled)
     734:	35 ff       	sbrs	r19, 5
     736:	05 c0       	rjmp	.+10     	; 0x742 <USB_Host_ResetDevice+0x82>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     738:	80 91 a0 00 	lds	r24, 0x00A0
     73c:	80 62       	ori	r24, 0x20	; 32
     73e:	80 93 a0 00 	sts	0x00A0, r24
	  USB_INT_Enable(USB_INT_HSOFI);

	if (BusSuspended)
     742:	60 fd       	sbrc	r22, 0
     744:	05 c0       	rjmp	.+10     	; 0x750 <USB_Host_ResetDevice+0x90>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     746:	80 91 9e 00 	lds	r24, 0x009E
     74a:	8e 7f       	andi	r24, 0xFE	; 254
     74c:	80 93 9e 00 	sts	0x009E, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     750:	80 91 a0 00 	lds	r24, 0x00A0
     754:	82 60       	ori	r24, 0x02	; 2
     756:	80 93 a0 00 	sts	0x00A0, r24
	  USB_Host_SuspendBus();

	USB_INT_Enable(USB_INT_DDISCI);
}
     75a:	08 95       	ret

0000075c <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "../Host.h"

void USB_Host_ProcessNextHostState(void)
{
     75c:	ef 92       	push	r14
     75e:	0f 93       	push	r16
     760:	1f 93       	push	r17
     762:	df 93       	push	r29
     764:	cf 93       	push	r28
     766:	cd b7       	in	r28, 0x3d	; 61
     768:	de b7       	in	r29, 0x3e	; 62
     76a:	28 97       	sbiw	r28, 0x08	; 8
     76c:	0f b6       	in	r0, 0x3f	; 63
     76e:	f8 94       	cli
     770:	de bf       	out	0x3e, r29	; 62
     772:	0f be       	out	0x3f, r0	; 63
     774:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
     776:	80 91 30 01 	lds	r24, 0x0130
     77a:	85 30       	cpi	r24, 0x05	; 5
     77c:	09 f4       	brne	.+2      	; 0x780 <USB_Host_ProcessNextHostState+0x24>
     77e:	94 c0       	rjmp	.+296    	; 0x8a8 <USB_Host_ProcessNextHostState+0x14c>
     780:	86 30       	cpi	r24, 0x06	; 6
     782:	68 f4       	brcc	.+26     	; 0x79e <USB_Host_ProcessNextHostState+0x42>
     784:	82 30       	cpi	r24, 0x02	; 2
     786:	b9 f1       	breq	.+110    	; 0x7f6 <USB_Host_ProcessNextHostState+0x9a>
     788:	83 30       	cpi	r24, 0x03	; 3
     78a:	18 f4       	brcc	.+6      	; 0x792 <USB_Host_ProcessNextHostState+0x36>
     78c:	88 23       	and	r24, r24
     78e:	a1 f0       	breq	.+40     	; 0x7b8 <USB_Host_ProcessNextHostState+0x5c>
     790:	04 c1       	rjmp	.+520    	; 0x99a <USB_Host_ProcessNextHostState+0x23e>
     792:	83 30       	cpi	r24, 0x03	; 3
     794:	d1 f1       	breq	.+116    	; 0x80a <USB_Host_ProcessNextHostState+0xae>
     796:	84 30       	cpi	r24, 0x04	; 4
     798:	09 f0       	breq	.+2      	; 0x79c <USB_Host_ProcessNextHostState+0x40>
     79a:	ff c0       	rjmp	.+510    	; 0x99a <USB_Host_ProcessNextHostState+0x23e>
     79c:	5d c0       	rjmp	.+186    	; 0x858 <USB_Host_ProcessNextHostState+0xfc>
     79e:	87 30       	cpi	r24, 0x07	; 7
     7a0:	09 f4       	brne	.+2      	; 0x7a4 <USB_Host_ProcessNextHostState+0x48>
     7a2:	9b c0       	rjmp	.+310    	; 0x8da <USB_Host_ProcessNextHostState+0x17e>
     7a4:	87 30       	cpi	r24, 0x07	; 7
     7a6:	08 f4       	brcc	.+2      	; 0x7aa <USB_Host_ProcessNextHostState+0x4e>
     7a8:	8a c0       	rjmp	.+276    	; 0x8be <USB_Host_ProcessNextHostState+0x162>
     7aa:	88 30       	cpi	r24, 0x08	; 8
     7ac:	09 f4       	brne	.+2      	; 0x7b0 <USB_Host_ProcessNextHostState+0x54>
     7ae:	b3 c0       	rjmp	.+358    	; 0x916 <USB_Host_ProcessNextHostState+0x1ba>
     7b0:	89 30       	cpi	r24, 0x09	; 9
     7b2:	09 f0       	breq	.+2      	; 0x7b6 <USB_Host_ProcessNextHostState+0x5a>
     7b4:	f2 c0       	rjmp	.+484    	; 0x99a <USB_Host_ProcessNextHostState+0x23e>
     7b6:	d7 c0       	rjmp	.+430    	; 0x966 <USB_Host_ProcessNextHostState+0x20a>
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
     7b8:	00 91 24 01 	lds	r16, 0x0124
     7bc:	10 91 25 01 	lds	r17, 0x0125
     7c0:	01 15       	cp	r16, r1
     7c2:	11 05       	cpc	r17, r1
     7c4:	09 f4       	brne	.+2      	; 0x7c8 <USB_Host_ProcessNextHostState+0x6c>
     7c6:	e9 c0       	rjmp	.+466    	; 0x99a <USB_Host_ProcessNextHostState+0x23e>
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     7c8:	81 e0       	ldi	r24, 0x01	; 1
     7ca:	2b df       	rcall	.-426    	; 0x622 <USB_Host_WaitMS>
     7cc:	68 2f       	mov	r22, r24
     7ce:	88 23       	and	r24, r24
     7d0:	31 f0       	breq	.+12     	; 0x7de <USB_Host_ProcessNextHostState+0x82>
				{
					USB_HostState = PostWaitState;
     7d2:	80 91 23 01 	lds	r24, 0x0123
     7d6:	80 93 30 01 	sts	0x0130, r24
     7da:	91 e0       	ldi	r25, 0x01	; 1
     7dc:	da c0       	rjmp	.+436    	; 0x992 <USB_Host_ProcessNextHostState+0x236>
					ErrorCode     = HOST_ENUMERROR_WaitStage;
					break;
				}

				if (!(--WaitMSRemaining))
     7de:	c8 01       	movw	r24, r16
     7e0:	01 97       	sbiw	r24, 0x01	; 1
     7e2:	90 93 25 01 	sts	0x0125, r25
     7e6:	80 93 24 01 	sts	0x0124, r24
     7ea:	89 2b       	or	r24, r25
     7ec:	09 f0       	breq	.+2      	; 0x7f0 <USB_Host_ProcessNextHostState+0x94>
     7ee:	d5 c0       	rjmp	.+426    	; 0x99a <USB_Host_ProcessNextHostState+0x23e>
				  USB_HostState = PostWaitState;
     7f0:	80 91 23 01 	lds	r24, 0x0123
     7f4:	07 c0       	rjmp	.+14     	; 0x804 <USB_Host_ProcessNextHostState+0xa8>
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
     7f6:	88 ee       	ldi	r24, 0xE8	; 232
     7f8:	93 e0       	ldi	r25, 0x03	; 3
     7fa:	90 93 25 01 	sts	0x0125, r25
     7fe:	80 93 24 01 	sts	0x0124, r24

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
     802:	83 e0       	ldi	r24, 0x03	; 3
     804:	80 93 30 01 	sts	0x0130, r24
     808:	c8 c0       	rjmp	.+400    	; 0x99a <USB_Host_ProcessNextHostState+0x23e>
			break;
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
     80a:	80 91 24 01 	lds	r24, 0x0124
     80e:	90 91 25 01 	lds	r25, 0x0125
     812:	01 97       	sbiw	r24, 0x01	; 1
     814:	90 93 25 01 	sts	0x0125, r25
     818:	80 93 24 01 	sts	0x0124, r24
     81c:	01 96       	adiw	r24, 0x01	; 1
     81e:	29 f0       	breq	.+10     	; 0x82a <USB_Host_ProcessNextHostState+0xce>
     820:	80 ed       	ldi	r24, 0xD0	; 208
     822:	97 e0       	ldi	r25, 0x07	; 7
     824:	01 97       	sbiw	r24, 0x01	; 1
     826:	f1 f7       	brne	.-4      	; 0x824 <USB_Host_ProcessNextHostState+0xc8>
     828:	b8 c0       	rjmp	.+368    	; 0x99a <USB_Host_ProcessNextHostState+0x23e>
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
     82a:	77 98       	cbi	0x0e, 7	; 14

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     82c:	80 91 d8 00 	lds	r24, 0x00D8
     830:	80 61       	ori	r24, 0x10	; 16
     832:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
     836:	80 91 dd 00 	lds	r24, 0x00DD
     83a:	8b 7f       	andi	r24, 0xFB	; 251
     83c:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON |=  (1 << UVCONE);
     840:	80 91 d7 00 	lds	r24, 0x00D7
     844:	80 61       	ori	r24, 0x10	; 16
     846:	80 93 d7 00 	sts	0x00D7, r24
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
     84a:	80 91 dd 00 	lds	r24, 0x00DD
     84e:	82 60       	ori	r24, 0x02	; 2
     850:	80 93 dd 00 	sts	0x00DD, r24

				USB_OTGPAD_On();
				USB_Host_VBUS_Auto_Enable();
				USB_Host_VBUS_Auto_On();

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
     854:	84 e0       	ldi	r24, 0x04	; 4
     856:	d6 cf       	rjmp	.-84     	; 0x804 <USB_Host_ProcessNextHostState+0xa8>
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
     858:	80 91 9f 00 	lds	r24, 0x009F
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
     85c:	80 ff       	sbrs	r24, 0
     85e:	9d c0       	rjmp	.+314    	; 0x99a <USB_Host_ProcessNextHostState+0x23e>
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     860:	80 91 9f 00 	lds	r24, 0x009F
     864:	8e 7f       	andi	r24, 0xFE	; 254
     866:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     86a:	80 91 9f 00 	lds	r24, 0x009F
     86e:	8d 7f       	andi	r24, 0xFD	; 253
     870:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     874:	80 91 df 00 	lds	r24, 0x00DF
     878:	8d 7f       	andi	r24, 0xFD	; 253
     87a:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
     87e:	80 91 de 00 	lds	r24, 0x00DE
     882:	82 60       	ori	r24, 0x02	; 2
     884:	80 93 de 00 	sts	0x00DE, r24
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     888:	80 91 9e 00 	lds	r24, 0x009E
     88c:	81 60       	ori	r24, 0x01	; 1
     88e:	80 93 9e 00 	sts	0x009E, r24

				USB_INT_Clear(USB_INT_VBERRI);
				USB_INT_Enable(USB_INT_VBERRI);

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
     892:	ed d0       	rcall	.+474    	; 0xa6e <Pipe_ClearPipes>

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
     894:	10 92 30 01 	sts	0x0130, r1
     898:	84 e6       	ldi	r24, 0x64	; 100
     89a:	90 e0       	ldi	r25, 0x00	; 0
     89c:	90 93 25 01 	sts	0x0125, r25
     8a0:	80 93 24 01 	sts	0x0124, r24
     8a4:	85 e0       	ldi	r24, 0x05	; 5
     8a6:	5c c0       	rjmp	.+184    	; 0x960 <USB_Host_ProcessNextHostState+0x204>
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
     8a8:	0b df       	rcall	.-490    	; 0x6c0 <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
     8aa:	10 92 30 01 	sts	0x0130, r1
     8ae:	88 ec       	ldi	r24, 0xC8	; 200
     8b0:	90 e0       	ldi	r25, 0x00	; 0
     8b2:	90 93 25 01 	sts	0x0125, r25
     8b6:	80 93 24 01 	sts	0x0124, r24
     8ba:	86 e0       	ldi	r24, 0x06	; 6
     8bc:	51 c0       	rjmp	.+162    	; 0x960 <USB_Host_ProcessNextHostState+0x204>
			break;
		case HOST_STATE_Powered_ConfigPipe:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
     8be:	80 e0       	ldi	r24, 0x00	; 0
     8c0:	60 e0       	ldi	r22, 0x00	; 0
     8c2:	40 e0       	ldi	r20, 0x00	; 0
     8c4:	20 e0       	ldi	r18, 0x00	; 0
     8c6:	00 e4       	ldi	r16, 0x40	; 64
     8c8:	10 e0       	ldi	r17, 0x00	; 0
     8ca:	ee 24       	eor	r14, r14
     8cc:	72 d0       	rcall	.+228    	; 0x9b2 <Pipe_ConfigurePipe>
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     8ce:	80 91 ac 00 	lds	r24, 0x00AC
							   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
							   PIPE_CONTROLPIPE_DEFAULT_SIZE, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
     8d2:	87 ff       	sbrs	r24, 7
     8d4:	5c c0       	rjmp	.+184    	; 0x98e <USB_Host_ProcessNextHostState+0x232>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
     8d6:	87 e0       	ldi	r24, 0x07	; 7
     8d8:	95 cf       	rjmp	.-214    	; 0x804 <USB_Host_ProcessNextHostState+0xa8>
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
     8da:	a8 e2       	ldi	r26, 0x28	; 40
     8dc:	b1 e0       	ldi	r27, 0x01	; 1
     8de:	e9 e1       	ldi	r30, 0x19	; 25
     8e0:	f1 e0       	ldi	r31, 0x01	; 1
     8e2:	88 e0       	ldi	r24, 0x08	; 8
     8e4:	01 90       	ld	r0, Z+
     8e6:	0d 92       	st	X+, r0
     8e8:	81 50       	subi	r24, 0x01	; 1
     8ea:	e1 f7       	brne	.-8      	; 0x8e4 <USB_Host_ProcessNextHostState+0x188>
					.wLength       = 8,
				};

			uint8_t DataBuffer[8];

			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
     8ec:	ce 01       	movw	r24, r28
     8ee:	01 96       	adiw	r24, 0x01	; 1
     8f0:	aa d3       	rcall	.+1876   	; 0x1046 <USB_Host_SendControlRequest>
     8f2:	68 2f       	mov	r22, r24
     8f4:	88 23       	and	r24, r24
     8f6:	09 f0       	breq	.+2      	; 0x8fa <USB_Host_ProcessNextHostState+0x19e>
     8f8:	48 c0       	rjmp	.+144    	; 0x98a <USB_Host_ProcessNextHostState+0x22e>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_Host_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
     8fa:	88 85       	ldd	r24, Y+8	; 0x08
     8fc:	80 93 21 01 	sts	0x0121, r24

			USB_Host_ResetDevice();
     900:	df de       	rcall	.-578    	; 0x6c0 <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
     902:	10 92 30 01 	sts	0x0130, r1
     906:	88 ec       	ldi	r24, 0xC8	; 200
     908:	90 e0       	ldi	r25, 0x00	; 0
     90a:	90 93 25 01 	sts	0x0125, r25
     90e:	80 93 24 01 	sts	0x0124, r24
     912:	88 e0       	ldi	r24, 0x08	; 8
     914:	25 c0       	rjmp	.+74     	; 0x960 <USB_Host_ProcessNextHostState+0x204>
			break;
		case HOST_STATE_Default_PostReset:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
     916:	00 91 21 01 	lds	r16, 0x0121
     91a:	80 e0       	ldi	r24, 0x00	; 0
     91c:	60 e0       	ldi	r22, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	20 e0       	ldi	r18, 0x00	; 0
     922:	10 e0       	ldi	r17, 0x00	; 0
     924:	ee 24       	eor	r14, r14
     926:	45 d0       	rcall	.+138    	; 0x9b2 <Pipe_ConfigurePipe>
     928:	80 91 ac 00 	lds	r24, 0x00AC
			                   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
			                   USB_Host_ControlPipeSize, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
     92c:	87 ff       	sbrs	r24, 7
     92e:	2f c0       	rjmp	.+94     	; 0x98e <USB_Host_ProcessNextHostState+0x232>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
     930:	a8 e2       	ldi	r26, 0x28	; 40
     932:	b1 e0       	ldi	r27, 0x01	; 1
     934:	e1 e1       	ldi	r30, 0x11	; 17
     936:	f1 e0       	ldi	r31, 0x01	; 1
     938:	88 e0       	ldi	r24, 0x08	; 8
     93a:	01 90       	ld	r0, Z+
     93c:	0d 92       	st	X+, r0
     93e:	81 50       	subi	r24, 0x01	; 1
     940:	e1 f7       	brne	.-8      	; 0x93a <USB_Host_ProcessNextHostState+0x1de>
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
     942:	80 e0       	ldi	r24, 0x00	; 0
     944:	90 e0       	ldi	r25, 0x00	; 0
     946:	7f d3       	rcall	.+1790   	; 0x1046 <USB_Host_SendControlRequest>
     948:	68 2f       	mov	r22, r24
     94a:	88 23       	and	r24, r24
     94c:	f1 f4       	brne	.+60     	; 0x98a <USB_Host_ProcessNextHostState+0x22e>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
     94e:	10 92 30 01 	sts	0x0130, r1
     952:	84 e6       	ldi	r24, 0x64	; 100
     954:	90 e0       	ldi	r25, 0x00	; 0
     956:	90 93 25 01 	sts	0x0125, r25
     95a:	80 93 24 01 	sts	0x0124, r24
     95e:	89 e0       	ldi	r24, 0x09	; 9
     960:	80 93 23 01 	sts	0x0123, r24
     964:	1a c0       	rjmp	.+52     	; 0x99a <USB_Host_ProcessNextHostState+0x23e>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
     966:	81 e0       	ldi	r24, 0x01	; 1
     968:	80 93 a1 00 	sts	0x00A1, r24
			break;
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			USB_HostState = HOST_STATE_Addressed;
     96c:	8a e0       	ldi	r24, 0x0A	; 10
     96e:	80 93 30 01 	sts	0x0130, r24

			EVENT_USB_Host_DeviceEnumerationComplete();
     972:	de dc       	rcall	.-1604   	; 0x330 <EVENT_USB_Host_DeviceEnumerationComplete>
     974:	12 c0       	rjmp	.+36     	; 0x99a <USB_Host_ProcessNextHostState+0x23e>
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
     976:	89 2f       	mov	r24, r25
     978:	80 dc       	rcall	.-1792   	; 0x27a <EVENT_USB_Host_DeviceEnumerationFailed>
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     97a:	80 91 dd 00 	lds	r24, 0x00DD
     97e:	81 60       	ori	r24, 0x01	; 1
     980:	80 93 dd 00 	sts	0x00DD, r24

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
     984:	c3 dc       	rcall	.-1658   	; 0x30c <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     986:	d8 d0       	rcall	.+432    	; 0xb38 <USB_ResetInterface>
     988:	08 c0       	rjmp	.+16     	; 0x99a <USB_Host_ProcessNextHostState+0x23e>
	}
}
     98a:	93 e0       	ldi	r25, 0x03	; 3
     98c:	02 c0       	rjmp	.+4      	; 0x992 <USB_Host_ProcessNextHostState+0x236>
     98e:	94 e0       	ldi	r25, 0x04	; 4
     990:	60 e0       	ldi	r22, 0x00	; 0

			EVENT_USB_Host_DeviceEnumerationComplete();
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
     992:	80 91 30 01 	lds	r24, 0x0130
     996:	81 30       	cpi	r24, 0x01	; 1
     998:	71 f7       	brne	.-36     	; 0x976 <USB_Host_ProcessNextHostState+0x21a>

		EVENT_USB_Host_DeviceUnattached();

		USB_ResetInterface();
	}
}
     99a:	28 96       	adiw	r28, 0x08	; 8
     99c:	0f b6       	in	r0, 0x3f	; 63
     99e:	f8 94       	cli
     9a0:	de bf       	out	0x3e, r29	; 62
     9a2:	0f be       	out	0x3f, r0	; 63
     9a4:	cd bf       	out	0x3d, r28	; 61
     9a6:	cf 91       	pop	r28
     9a8:	df 91       	pop	r29
     9aa:	1f 91       	pop	r17
     9ac:	0f 91       	pop	r16
     9ae:	ef 90       	pop	r14
     9b0:	08 95       	ret

000009b2 <Pipe_ConfigurePipe>:
                        const uint8_t Type,
                        const uint8_t Token,
                        const uint8_t EndpointNumber,
                        const uint16_t Size,
                        const uint8_t Banks)
{
     9b2:	ef 92       	push	r14
     9b4:	0f 93       	push	r16
     9b6:	1f 93       	push	r17
     9b8:	e8 2f       	mov	r30, r24
     9ba:	7e 2d       	mov	r23, r14

		Pipe_SelectPipe(PNum);
		
		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
     9bc:	62 95       	swap	r22
     9be:	66 0f       	add	r22, r22
     9c0:	66 0f       	add	r22, r22
     9c2:	60 7c       	andi	r22, 0xC0	; 192
     9c4:	64 2b       	or	r22, r20
     9c6:	2f 70       	andi	r18, 0x0F	; 15
     9c8:	62 2b       	or	r22, r18
     9ca:	38 2f       	mov	r19, r24
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     9cc:	72 60       	ori	r23, 0x02	; 2
     9ce:	45 c0       	rjmp	.+138    	; 0xa5a <Pipe_ConfigurePipe+0xa8>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     9d0:	30 93 a7 00 	sts	0x00A7, r19
		uint8_t UPCFG2XTemp;
		uint8_t UPIENXTemp;

		Pipe_SelectPipe(PNum);
		
		if (PNum == Number)
     9d4:	3e 17       	cp	r19, r30
     9d6:	a1 f4       	brne	.+40     	; 0xa00 <Pipe_ConfigurePipe+0x4e>
     9d8:	88 e0       	ldi	r24, 0x08	; 8
     9da:	90 e0       	ldi	r25, 0x00	; 0
     9dc:	20 e0       	ldi	r18, 0x00	; 0
     9de:	03 c0       	rjmp	.+6      	; 0x9e6 <Pipe_ConfigurePipe+0x34>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
				{
					MaskVal++;
     9e0:	2f 5f       	subi	r18, 0xFF	; 255
					CheckBytes <<= 1;
     9e2:	88 0f       	add	r24, r24
     9e4:	99 1f       	adc	r25, r25
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
     9e6:	80 17       	cp	r24, r16
     9e8:	91 07       	cpc	r25, r17
     9ea:	10 f4       	brcc	.+4      	; 0x9f0 <Pipe_ConfigurePipe+0x3e>
     9ec:	25 30       	cpi	r18, 0x05	; 5
     9ee:	c1 f7       	brne	.-16     	; 0x9e0 <Pipe_ConfigurePipe+0x2e>
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     9f0:	92 2f       	mov	r25, r18
     9f2:	92 95       	swap	r25
     9f4:	90 7f       	andi	r25, 0xF0	; 240
     9f6:	97 2b       	or	r25, r23
     9f8:	56 2f       	mov	r21, r22
     9fa:	40 e0       	ldi	r20, 0x00	; 0
     9fc:	20 e0       	ldi	r18, 0x00	; 0
     9fe:	08 c0       	rjmp	.+16     	; 0xa10 <Pipe_ConfigurePipe+0x5e>
			UPCFG2XTemp = 0;
			UPIENXTemp  = 0;
		}
		else
		{
			UPCFG0XTemp = UPCFG0X;
     a00:	50 91 aa 00 	lds	r21, 0x00AA
			UPCFG1XTemp = UPCFG1X;
     a04:	90 91 ab 00 	lds	r25, 0x00AB
			UPCFG2XTemp = UPCFG2X;
     a08:	40 91 ad 00 	lds	r20, 0x00AD
			UPIENXTemp  = UPIENX;
     a0c:	20 91 ae 00 	lds	r18, 0x00AE
		}

		if (!(UPCFG1XTemp & (1 << ALLOC)))
     a10:	91 ff       	sbrs	r25, 1
     a12:	22 c0       	rjmp	.+68     	; 0xa58 <Pipe_ConfigurePipe+0xa6>
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     a14:	80 91 a9 00 	lds	r24, 0x00A9
     a18:	8e 7f       	andi	r24, 0xFE	; 254
     a1a:	80 93 a9 00 	sts	0x00A9, r24
		  continue;
		  
		Pipe_DisablePipe();
		UPCFG1X &= ~(1 << ALLOC);
     a1e:	80 91 ab 00 	lds	r24, 0x00AB
     a22:	8d 7f       	andi	r24, 0xFD	; 253
     a24:	80 93 ab 00 	sts	0x00AB, r24
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
     a28:	80 91 a9 00 	lds	r24, 0x00A9
     a2c:	81 60       	ori	r24, 0x01	; 1
     a2e:	80 93 a9 00 	sts	0x00A9, r24

		Pipe_EnablePipe();
		UPCFG0X = UPCFG0XTemp;
     a32:	50 93 aa 00 	sts	0x00AA, r21
		UPCFG1X = UPCFG1XTemp;
     a36:	90 93 ab 00 	sts	0x00AB, r25
		UPCFG2X = UPCFG2XTemp;
     a3a:	40 93 ad 00 	sts	0x00AD, r20
		UPIENX  = UPIENXTemp;
     a3e:	20 93 ae 00 	sts	0x00AE, r18

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
     a42:	80 91 a9 00 	lds	r24, 0x00A9
     a46:	80 62       	ori	r24, 0x20	; 32
     a48:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     a4c:	80 91 ac 00 	lds	r24, 0x00AC

		Pipe_SetInfiniteINRequests();
	
		if (!(Pipe_IsConfigured()))
     a50:	87 fd       	sbrc	r24, 7
     a52:	02 c0       	rjmp	.+4      	; 0xa58 <Pipe_ConfigurePipe+0xa6>
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	07 c0       	rjmp	.+14     	; 0xa66 <Pipe_ConfigurePipe+0xb4>

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else	
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
     a58:	3f 5f       	subi	r19, 0xFF	; 255
     a5a:	37 30       	cpi	r19, 0x07	; 7
     a5c:	08 f4       	brcc	.+2      	; 0xa60 <Pipe_ConfigurePipe+0xae>
     a5e:	b8 cf       	rjmp	.-144    	; 0x9d0 <Pipe_ConfigurePipe+0x1e>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     a60:	e0 93 a7 00 	sts	0x00A7, r30
     a64:	81 e0       	ldi	r24, 0x01	; 1
	}
		
	Pipe_SelectPipe(Number);	
	return true;
#endif
}
     a66:	1f 91       	pop	r17
     a68:	0f 91       	pop	r16
     a6a:	ef 90       	pop	r14
     a6c:	08 95       	ret

00000a6e <Pipe_ClearPipes>:

void Pipe_ClearPipes(void)
{
	UPINT = 0;
     a6e:	10 92 f8 00 	sts	0x00F8, r1
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	90 93 a7 00 	sts	0x00A7, r25

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
     a78:	10 92 ae 00 	sts	0x00AE, r1
		UPINTX  = 0;
     a7c:	10 92 a6 00 	sts	0x00A6, r1
		UPCFG1X = 0;
     a80:	10 92 ab 00 	sts	0x00AB, r1
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     a84:	80 91 a9 00 	lds	r24, 0x00A9
     a88:	8e 7f       	andi	r24, 0xFE	; 254
     a8a:	80 93 a9 00 	sts	0x00A9, r24

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     a8e:	9f 5f       	subi	r25, 0xFF	; 255
     a90:	97 30       	cpi	r25, 0x07	; 7
     a92:	81 f7       	brne	.-32     	; 0xa74 <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
     a94:	08 95       	ret

00000a96 <Pipe_IsEndpointBound>:

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
     a96:	48 2f       	mov	r20, r24
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
     a98:	30 91 a7 00 	lds	r19, 0x00A7
     a9c:	20 e0       	ldi	r18, 0x00	; 0
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     a9e:	20 93 a7 00 	sts	0x00A7, r18
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     aa2:	80 91 ac 00 	lds	r24, 0x00AC

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
	{
		Pipe_SelectPipe(PNum);

		if (!(Pipe_IsConfigured()))
     aa6:	87 ff       	sbrs	r24, 7
     aa8:	10 c0       	rjmp	.+32     	; 0xaca <Pipe_IsEndpointBound+0x34>
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				return (((UPCFG0X >> PEPNUM0) & PIPE_EPNUM_MASK) |
     aaa:	90 91 aa 00 	lds	r25, 0x00AA
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
     aae:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				return (((UPCFG0X >> PEPNUM0) & PIPE_EPNUM_MASK) |
     ab2:	80 73       	andi	r24, 0x30	; 48
     ab4:	80 31       	cpi	r24, 0x10	; 16
     ab6:	11 f0       	breq	.+4      	; 0xabc <Pipe_IsEndpointBound+0x26>
     ab8:	80 e0       	ldi	r24, 0x00	; 0
     aba:	01 c0       	rjmp	.+2      	; 0xabe <Pipe_IsEndpointBound+0x28>
     abc:	80 e8       	ldi	r24, 0x80	; 128
		  continue;

		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
     abe:	9f 70       	andi	r25, 0x0F	; 15
     ac0:	89 2b       	or	r24, r25
     ac2:	84 17       	cp	r24, r20
     ac4:	11 f4       	brne	.+4      	; 0xaca <Pipe_IsEndpointBound+0x34>
     ac6:	81 e0       	ldi	r24, 0x01	; 1
     ac8:	08 95       	ret

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
	uint8_t PrevPipeNumber = Pipe_GetCurrentPipe();

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     aca:	2f 5f       	subi	r18, 0xFF	; 255
     acc:	27 30       	cpi	r18, 0x07	; 7
     ace:	39 f7       	brne	.-50     	; 0xa9e <Pipe_IsEndpointBound+0x8>
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
     ad0:	37 70       	andi	r19, 0x07	; 7
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     ad2:	30 93 a7 00 	sts	0x00A7, r19
     ad6:	80 e0       	ldi	r24, 0x00	; 0
		  return true;
	}

	Pipe_SelectPipe(PrevPipeNumber);
	return false;
}
     ad8:	08 95       	ret

00000ada <Pipe_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
     ada:	40 91 a2 00 	lds	r20, 0x00A2
     ade:	50 91 a3 00 	lds	r21, 0x00A3
     ae2:	24 e6       	ldi	r18, 0x64	; 100
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
     ae4:	80 91 aa 00 	lds	r24, 0x00AA

	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
     ae8:	80 73       	andi	r24, 0x30	; 48
     aea:	80 31       	cpi	r24, 0x10	; 16
     aec:	29 f4       	brne	.+10     	; 0xaf8 <Pipe_WaitUntilReady+0x1e>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     aee:	80 91 a6 00 	lds	r24, 0x00A6
		{
			if (Pipe_IsINReceived())
     af2:	80 ff       	sbrs	r24, 0
     af4:	05 c0       	rjmp	.+10     	; 0xb00 <Pipe_WaitUntilReady+0x26>
     af6:	1e c0       	rjmp	.+60     	; 0xb34 <Pipe_WaitUntilReady+0x5a>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     af8:	80 91 a6 00 	lds	r24, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
     afc:	82 fd       	sbrc	r24, 2
     afe:	1a c0       	rjmp	.+52     	; 0xb34 <Pipe_WaitUntilReady+0x5a>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     b00:	80 91 a6 00 	lds	r24, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
     b04:	81 ff       	sbrs	r24, 1
     b06:	02 c0       	rjmp	.+4      	; 0xb0c <Pipe_WaitUntilReady+0x32>
     b08:	81 e0       	ldi	r24, 0x01	; 1
     b0a:	08 95       	ret
		  return PIPE_READYWAIT_PipeStalled;
		else if (USB_HostState == HOST_STATE_Unattached)
     b0c:	80 91 30 01 	lds	r24, 0x0130
     b10:	81 30       	cpi	r24, 0x01	; 1
     b12:	11 f4       	brne	.+4      	; 0xb18 <Pipe_WaitUntilReady+0x3e>
     b14:	82 e0       	ldi	r24, 0x02	; 2
     b16:	08 95       	ret
     b18:	80 91 a2 00 	lds	r24, 0x00A2
     b1c:	90 91 a3 00 	lds	r25, 0x00A3
		  return PIPE_READYWAIT_DeviceDisconnected;

		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     b20:	84 17       	cp	r24, r20
     b22:	95 07       	cpc	r25, r21
     b24:	f9 f2       	breq	.-66     	; 0xae4 <Pipe_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     b26:	22 23       	and	r18, r18
     b28:	11 f4       	brne	.+4      	; 0xb2e <Pipe_WaitUntilReady+0x54>
     b2a:	83 e0       	ldi	r24, 0x03	; 3
     b2c:	08 95       	ret
     b2e:	21 50       	subi	r18, 0x01	; 1
     b30:	ac 01       	movw	r20, r24
     b32:	d8 cf       	rjmp	.-80     	; 0xae4 <Pipe_WaitUntilReady+0xa>
     b34:	80 e0       	ldi	r24, 0x00	; 0
			  return PIPE_READYWAIT_Timeout;
		}
	}
}
     b36:	08 95       	ret

00000b38 <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     b38:	70 d0       	rcall	.+224    	; 0xc1a <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     b3a:	77 d0       	rcall	.+238    	; 0xc2a <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     b3c:	80 91 d8 00 	lds	r24, 0x00D8
     b40:	8f 77       	andi	r24, 0x7F	; 127
     b42:	80 93 d8 00 	sts	0x00D8, r24
				USBCON |=  (1 << USBE);
     b46:	80 91 d8 00 	lds	r24, 0x00D8
     b4a:	80 68       	ori	r24, 0x80	; 128
     b4c:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
     b50:	80 91 d8 00 	lds	r24, 0x00D8
     b54:	8f 7d       	andi	r24, 0xDF	; 223
     b56:	80 93 d8 00 	sts	0x00D8, r24
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
     b5a:	80 91 d7 00 	lds	r24, 0x00D7
     b5e:	8f 77       	andi	r24, 0x7F	; 127
     b60:	80 93 d7 00 	sts	0x00D7, r24

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     b64:	8c e0       	ldi	r24, 0x0C	; 12
     b66:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     b68:	8e e0       	ldi	r24, 0x0E	; 14
     b6a:	89 bd       	out	0x29, r24	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_CAN_BE_HOST)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));		
     b6c:	09 b4       	in	r0, 0x29	; 41
     b6e:	00 fe       	sbrs	r0, 0
     b70:	fd cf       	rjmp	.-6      	; 0xb6c <USB_ResetInterface+0x34>
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState                = HOST_STATE_Unattached;
     b72:	81 e0       	ldi	r24, 0x01	; 1
     b74:	80 93 30 01 	sts	0x0130, r24
	USB_Host_ConfigurationNumber = 0;
     b78:	10 92 26 01 	sts	0x0126, r1
	USB_Host_ControlPipeSize     = PIPE_CONTROLPIPE_DEFAULT_SIZE;
     b7c:	80 e4       	ldi	r24, 0x40	; 64
     b7e:	80 93 21 01 	sts	0x0121, r24
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
     b82:	80 91 d8 00 	lds	r24, 0x00D8
     b86:	80 64       	ori	r24, 0x40	; 64
     b88:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     b8c:	80 91 dd 00 	lds	r24, 0x00DD
     b90:	81 60       	ori	r24, 0x01	; 1
     b92:	80 93 dd 00 	sts	0x00DD, r24
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
     b96:	80 91 dd 00 	lds	r24, 0x00DD
     b9a:	84 60       	ori	r24, 0x04	; 4
     b9c:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON &= ~(1 << UVCONE);
     ba0:	80 91 d7 00 	lds	r24, 0x00D7
     ba4:	8f 7e       	andi	r24, 0xEF	; 239
     ba6:	80 93 d7 00 	sts	0x00D7, r24

				DDRE   |=  (1 << 7);
     baa:	6f 9a       	sbi	0x0d, 7	; 13
			}

			static inline void USB_Host_VBUS_Manual_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_On(void)
			{
				PORTE  |=  (1 << 7);
     bac:	77 9a       	sbi	0x0e, 7	; 14
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN |= (1 << SRPE);						
     bae:	80 91 de 00 	lds	r24, 0x00DE
     bb2:	81 60       	ori	r24, 0x01	; 1
     bb4:	80 93 de 00 	sts	0x00DE, r24
						break;
					case USB_INT_RSTI:
						UHIEN  |= (1 << RSTE);
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
     bb8:	80 91 de 00 	lds	r24, 0x00DE
     bbc:	84 60       	ori	r24, 0x04	; 4
     bbe:	80 93 de 00 	sts	0x00DE, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     bc2:	80 91 e0 00 	lds	r24, 0x00E0
     bc6:	8e 7f       	andi	r24, 0xFE	; 254
     bc8:	80 93 e0 00 	sts	0x00E0, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     bcc:	80 91 d8 00 	lds	r24, 0x00D8
     bd0:	80 61       	ori	r24, 0x10	; 16
     bd2:	80 93 d8 00 	sts	0x00D8, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     bd6:	08 95       	ret

00000bd8 <USB_Init>:

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
     bd8:	e7 ed       	ldi	r30, 0xD7	; 215
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	80 81       	ld	r24, Z
     bde:	81 60       	ori	r24, 0x01	; 1
     be0:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     be2:	81 e0       	ldi	r24, 0x01	; 1
     be4:	80 93 27 01 	sts	0x0127, r24

	USB_ResetInterface();
}
     be8:	a7 cf       	rjmp	.-178    	; 0xb38 <USB_ResetInterface>

00000bea <USB_Disable>:

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
     bea:	17 d0       	rcall	.+46     	; 0xc1a <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     bec:	1e d0       	rcall	.+60     	; 0xc2a <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
     bee:	e0 ee       	ldi	r30, 0xE0	; 224
     bf0:	f0 e0       	ldi	r31, 0x00	; 0
     bf2:	80 81       	ld	r24, Z
     bf4:	81 60       	ori	r24, 0x01	; 1
     bf6:	80 83       	st	Z, r24
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON  &= ~(1 << USBE);
     bf8:	a8 ed       	ldi	r26, 0xD8	; 216
     bfa:	b0 e0       	ldi	r27, 0x00	; 0
     bfc:	8c 91       	ld	r24, X
     bfe:	8f 77       	andi	r24, 0x7F	; 127
     c00:	8c 93       	st	X, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     c02:	19 bc       	out	0x29, r1	; 41

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  &= ~(1 << UVREGE);
     c04:	e7 ed       	ldi	r30, 0xD7	; 215
     c06:	f0 e0       	ldi	r31, 0x00	; 0
     c08:	80 81       	ld	r24, Z
     c0a:	8e 7f       	andi	r24, 0xFE	; 254
     c0c:	80 83       	st	Z, r24
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON  &= ~(1 << OTGPADE);
     c0e:	8c 91       	ld	r24, X
     c10:	8f 7e       	andi	r24, 0xEF	; 239
     c12:	8c 93       	st	X, r24

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
     c14:	10 92 27 01 	sts	0x0127, r1
}
     c18:	08 95       	ret

00000c1a <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     c1a:	e8 ed       	ldi	r30, 0xD8	; 216
     c1c:	f0 e0       	ldi	r31, 0x00	; 0
     c1e:	80 81       	ld	r24, Z
     c20:	8c 7f       	andi	r24, 0xFC	; 252
     c22:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
     c24:	10 92 a0 00 	sts	0x00A0, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
	#endif
}
     c28:	08 95       	ret

00000c2a <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     c2a:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_BOTH)
	OTGINT = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
     c2e:	10 92 9f 00 	sts	0x009F, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
	#endif
}
     c32:	08 95       	ret

00000c34 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
     c34:	1f 92       	push	r1
     c36:	0f 92       	push	r0
     c38:	0f b6       	in	r0, 0x3f	; 63
     c3a:	0f 92       	push	r0
     c3c:	0b b6       	in	r0, 0x3b	; 59
     c3e:	0f 92       	push	r0
     c40:	11 24       	eor	r1, r1
     c42:	2f 93       	push	r18
     c44:	3f 93       	push	r19
     c46:	4f 93       	push	r20
     c48:	5f 93       	push	r21
     c4a:	6f 93       	push	r22
     c4c:	7f 93       	push	r23
     c4e:	8f 93       	push	r24
     c50:	9f 93       	push	r25
     c52:	af 93       	push	r26
     c54:	bf 93       	push	r27
     c56:	ef 93       	push	r30
     c58:	ff 93       	push	r31
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     c5a:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	#if defined(USB_CAN_BE_HOST)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
     c5e:	85 ff       	sbrs	r24, 5
     c60:	0a c0       	rjmp	.+20     	; 0xc76 <__vector_10+0x42>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     c62:	80 91 a0 00 	lds	r24, 0x00A0
     c66:	85 ff       	sbrs	r24, 5
     c68:	06 c0       	rjmp	.+12     	; 0xc76 <__vector_10+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     c6a:	80 91 9f 00 	lds	r24, 0x009F
     c6e:	8f 7d       	andi	r24, 0xDF	; 223
     c70:	80 93 9f 00 	sts	0x009F, r24
	{
		USB_INT_Clear(USB_INT_HSOFI);

		EVENT_USB_Host_StartOfFrame();
     c74:	be d1       	rcall	.+892    	; 0xff2 <USB_Event_Stub>
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
     c76:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
     c7a:	81 ff       	sbrs	r24, 1
     c7c:	15 c0       	rjmp	.+42     	; 0xca8 <__vector_10+0x74>
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
					case USB_INT_DCONNI:
						return (UHIEN  & (1 << DCONNE));
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
     c7e:	80 91 a0 00 	lds	r24, 0x00A0
     c82:	81 ff       	sbrs	r24, 1
     c84:	11 c0       	rjmp	.+34     	; 0xca8 <__vector_10+0x74>
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     c86:	80 91 9f 00 	lds	r24, 0x009F
     c8a:	8d 7f       	andi	r24, 0xFD	; 253
     c8c:	80 93 9f 00 	sts	0x009F, r24
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     c90:	80 91 9f 00 	lds	r24, 0x009F
     c94:	8e 7f       	andi	r24, 0xFE	; 254
     c96:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     c9a:	80 91 a0 00 	lds	r24, 0x00A0
     c9e:	8d 7f       	andi	r24, 0xFD	; 253
     ca0:	80 93 a0 00 	sts	0x00A0, r24
	{
		USB_INT_Clear(USB_INT_DDISCI);
		USB_INT_Clear(USB_INT_DCONNI);
		USB_INT_Disable(USB_INT_DDISCI);

		EVENT_USB_Host_DeviceUnattached();
     ca4:	33 db       	rcall	.-2458   	; 0x30c <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     ca6:	48 df       	rcall	.-368    	; 0xb38 <USB_ResetInterface>
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
     ca8:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
     cac:	81 ff       	sbrs	r24, 1
     cae:	15 c0       	rjmp	.+42     	; 0xcda <__vector_10+0xa6>
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
     cb0:	80 91 de 00 	lds	r24, 0x00DE
     cb4:	81 ff       	sbrs	r24, 1
     cb6:	11 c0       	rjmp	.+34     	; 0xcda <__vector_10+0xa6>
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     cb8:	80 91 df 00 	lds	r24, 0x00DF
     cbc:	8d 7f       	andi	r24, 0xFD	; 253
     cbe:	80 93 df 00 	sts	0x00DF, r24
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
     cc2:	77 98       	cbi	0x0e, 7	; 14
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     cc4:	80 91 dd 00 	lds	r24, 0x00DD
     cc8:	81 60       	ori	r24, 0x01	; 1
     cca:	80 93 dd 00 	sts	0x00DD, r24
		USB_INT_Clear(USB_INT_VBERRI);

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
     cce:	80 e0       	ldi	r24, 0x00	; 0
     cd0:	00 db       	rcall	.-2560   	; 0x2d2 <EVENT_USB_Host_HostError>
		EVENT_USB_Host_DeviceUnattached();
     cd2:	1c db       	rcall	.-2504   	; 0x30c <EVENT_USB_Host_DeviceUnattached>

		USB_HostState = HOST_STATE_Unattached;
     cd4:	81 e0       	ldi	r24, 0x01	; 1
     cd6:	80 93 30 01 	sts	0x0130, r24
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
					case USB_INT_SRPI:
						return (OTGINT & (1 << SRPI));
     cda:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
     cde:	80 ff       	sbrs	r24, 0
     ce0:	17 c0       	rjmp	.+46     	; 0xd10 <__vector_10+0xdc>
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
					case USB_INT_SRPI:
						return (OTGIEN & (1 << SRPE));
     ce2:	80 91 de 00 	lds	r24, 0x00DE
     ce6:	80 ff       	sbrs	r24, 0
     ce8:	13 c0       	rjmp	.+38     	; 0xd10 <__vector_10+0xdc>
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
						break;
					case USB_INT_SRPI:
						OTGINT &= ~(1 << SRPI);
     cea:	80 91 df 00 	lds	r24, 0x00DF
     cee:	8e 7f       	andi	r24, 0xFE	; 254
     cf0:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_VBERRI:
						OTGIEN &= ~(1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN &= ~(1 << SRPE);						
     cf4:	80 91 de 00 	lds	r24, 0x00DE
     cf8:	8e 7f       	andi	r24, 0xFE	; 254
     cfa:	80 93 de 00 	sts	0x00DE, r24
	{
		USB_INT_Clear(USB_INT_SRPI);
		USB_INT_Disable(USB_INT_SRPI);

		EVENT_USB_Host_DeviceAttached();
     cfe:	0f db       	rcall	.-2530   	; 0x31e <EVENT_USB_Host_DeviceAttached>
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     d00:	80 91 a0 00 	lds	r24, 0x00A0
     d04:	82 60       	ori	r24, 0x02	; 2
     d06:	80 93 a0 00 	sts	0x00A0, r24

		USB_INT_Enable(USB_INT_DDISCI);

		USB_HostState = HOST_STATE_Powered;
     d0a:	82 e0       	ldi	r24, 0x02	; 2
     d0c:	80 93 30 01 	sts	0x0130, r24
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
     d10:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
     d14:	82 ff       	sbrs	r24, 2
     d16:	0e c0       	rjmp	.+28     	; 0xd34 <__vector_10+0x100>
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
     d18:	80 91 de 00 	lds	r24, 0x00DE
     d1c:	82 ff       	sbrs	r24, 2
     d1e:	0a c0       	rjmp	.+20     	; 0xd34 <__vector_10+0x100>
						break;
					case USB_INT_RSTI:
						UHINT  &= ~(1 << RSTI);
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
     d20:	80 91 df 00 	lds	r24, 0x00DF
     d24:	8b 7f       	andi	r24, 0xFB	; 251
     d26:	80 93 df 00 	sts	0x00DF, r24
	{
		USB_INT_Clear(USB_INT_BCERRI);

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
     d2a:	82 e0       	ldi	r24, 0x02	; 2
     d2c:	60 e0       	ldi	r22, 0x00	; 0
     d2e:	a5 da       	rcall	.-2742   	; 0x27a <EVENT_USB_Host_DeviceEnumerationFailed>
		EVENT_USB_Host_DeviceUnattached();
     d30:	ed da       	rcall	.-2598   	; 0x30c <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     d32:	02 df       	rcall	.-508    	; 0xb38 <USB_ResetInterface>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     d34:	ff 91       	pop	r31
     d36:	ef 91       	pop	r30
     d38:	bf 91       	pop	r27
     d3a:	af 91       	pop	r26
     d3c:	9f 91       	pop	r25
     d3e:	8f 91       	pop	r24
     d40:	7f 91       	pop	r23
     d42:	6f 91       	pop	r22
     d44:	5f 91       	pop	r21
     d46:	4f 91       	pop	r20
     d48:	3f 91       	pop	r19
     d4a:	2f 91       	pop	r18
     d4c:	0f 90       	pop	r0
     d4e:	0b be       	out	0x3b, r0	; 59
     d50:	0f 90       	pop	r0
     d52:	0f be       	out	0x3f, r0	; 63
     d54:	0f 90       	pop	r0
     d56:	1f 90       	pop	r1
     d58:	18 95       	reti

00000d5a <Pipe_Read_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     d5a:	bf 92       	push	r11
     d5c:	cf 92       	push	r12
     d5e:	df 92       	push	r13
     d60:	ef 92       	push	r14
     d62:	ff 92       	push	r15
     d64:	0f 93       	push	r16
     d66:	1f 93       	push	r17
     d68:	cf 93       	push	r28
     d6a:	df 93       	push	r29
     d6c:	18 2f       	mov	r17, r24
     d6e:	09 2f       	mov	r16, r25
     d70:	7b 01       	movw	r14, r22
     d72:	6a 01       	movw	r12, r20
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     d74:	80 91 aa 00 	lds	r24, 0x00AA
     d78:	8f 7c       	andi	r24, 0xCF	; 207
     d7a:	80 61       	ori	r24, 0x10	; 16
     d7c:	80 93 aa 00 	sts	0x00AA, r24
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
     d80:	ac de       	rcall	.-680    	; 0xada <Pipe_WaitUntilReady>
     d82:	b8 2e       	mov	r11, r24
     d84:	88 23       	and	r24, r24
     d86:	a9 f5       	brne	.+106    	; 0xdf2 <Pipe_Read_Stream_LE+0x98>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     d88:	81 2f       	mov	r24, r17
     d8a:	90 2f       	mov	r25, r16
     d8c:	9c 01       	movw	r18, r24
     d8e:	e9 01       	movw	r28, r18
	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
     d90:	c1 14       	cp	r12, r1
     d92:	d1 04       	cpc	r13, r1
     d94:	39 f0       	breq	.+14     	; 0xda4 <Pipe_Read_Stream_LE+0x4a>
	{
		Length -= *BytesProcessed;
     d96:	f6 01       	movw	r30, r12
     d98:	80 81       	ld	r24, Z
     d9a:	91 81       	ldd	r25, Z+1	; 0x01
     d9c:	e8 1a       	sub	r14, r24
     d9e:	f9 0a       	sbc	r15, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     da0:	c8 0f       	add	r28, r24
     da2:	d9 1f       	adc	r29, r25
     da4:	00 e0       	ldi	r16, 0x00	; 0
     da6:	10 e0       	ldi	r17, 0x00	; 0
     da8:	21 c0       	rjmp	.+66     	; 0xdec <Pipe_Read_Stream_LE+0x92>
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
     daa:	80 91 a6 00 	lds	r24, 0x00A6
	}
	
	while (Length)
	{
		if (!(Pipe_IsReadWriteAllowed()))
     dae:	85 fd       	sbrc	r24, 5
     db0:	15 c0       	rjmp	.+42     	; 0xddc <Pipe_Read_Stream_LE+0x82>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     db2:	80 91 a6 00 	lds	r24, 0x00A6
     db6:	8e 77       	andi	r24, 0x7E	; 126
     db8:	80 93 a6 00 	sts	0x00A6, r24
		{
			TEMPLATE_CLEAR_PIPE();

			if (BytesProcessed != NULL)
     dbc:	c1 14       	cp	r12, r1
     dbe:	d1 04       	cpc	r13, r1
     dc0:	49 f0       	breq	.+18     	; 0xdd4 <Pipe_Read_Stream_LE+0x7a>
			{
				*BytesProcessed += BytesInTransfer;
     dc2:	f6 01       	movw	r30, r12
     dc4:	80 81       	ld	r24, Z
     dc6:	91 81       	ldd	r25, Z+1	; 0x01
     dc8:	80 0f       	add	r24, r16
     dca:	91 1f       	adc	r25, r17
     dcc:	91 83       	std	Z+1, r25	; 0x01
     dce:	80 83       	st	Z, r24
     dd0:	84 e0       	ldi	r24, 0x04	; 4
     dd2:	10 c0       	rjmp	.+32     	; 0xdf4 <Pipe_Read_Stream_LE+0x9a>
				return PIPE_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
     dd4:	82 de       	rcall	.-764    	; 0xada <Pipe_WaitUntilReady>
     dd6:	88 23       	and	r24, r24
     dd8:	49 f0       	breq	.+18     	; 0xdec <Pipe_Read_Stream_LE+0x92>
     dda:	0c c0       	rjmp	.+24     	; 0xdf4 <Pipe_Read_Stream_LE+0x9a>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
     ddc:	80 91 af 00 	lds	r24, 0x00AF
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
     de0:	89 93       	st	Y+, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
     de2:	08 94       	sec
     de4:	e1 08       	sbc	r14, r1
     de6:	f1 08       	sbc	r15, r1
			BytesInTransfer++;
     de8:	0f 5f       	subi	r16, 0xFF	; 255
     dea:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}
	
	while (Length)
     dec:	e1 14       	cp	r14, r1
     dee:	f1 04       	cpc	r15, r1
     df0:	e1 f6       	brne	.-72     	; 0xdaa <Pipe_Read_Stream_LE+0x50>
     df2:	8b 2d       	mov	r24, r11
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
     df4:	df 91       	pop	r29
     df6:	cf 91       	pop	r28
     df8:	1f 91       	pop	r17
     dfa:	0f 91       	pop	r16
     dfc:	ff 90       	pop	r15
     dfe:	ef 90       	pop	r14
     e00:	df 90       	pop	r13
     e02:	cf 90       	pop	r12
     e04:	bf 90       	pop	r11
     e06:	08 95       	ret

00000e08 <Pipe_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     e08:	bf 92       	push	r11
     e0a:	cf 92       	push	r12
     e0c:	df 92       	push	r13
     e0e:	ef 92       	push	r14
     e10:	ff 92       	push	r15
     e12:	0f 93       	push	r16
     e14:	1f 93       	push	r17
     e16:	cf 93       	push	r28
     e18:	df 93       	push	r29
     e1a:	18 2f       	mov	r17, r24
     e1c:	09 2f       	mov	r16, r25
     e1e:	7b 01       	movw	r14, r22
     e20:	6a 01       	movw	r12, r20
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     e22:	80 91 aa 00 	lds	r24, 0x00AA
     e26:	8f 7c       	andi	r24, 0xCF	; 207
     e28:	80 62       	ori	r24, 0x20	; 32
     e2a:	80 93 aa 00 	sts	0x00AA, r24
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
     e2e:	55 de       	rcall	.-854    	; 0xada <Pipe_WaitUntilReady>
     e30:	b8 2e       	mov	r11, r24
     e32:	88 23       	and	r24, r24
     e34:	a9 f5       	brne	.+106    	; 0xea0 <Pipe_Write_Stream_LE+0x98>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     e36:	81 2f       	mov	r24, r17
     e38:	90 2f       	mov	r25, r16
     e3a:	9c 01       	movw	r18, r24
     e3c:	e9 01       	movw	r28, r18
	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
     e3e:	c1 14       	cp	r12, r1
     e40:	d1 04       	cpc	r13, r1
     e42:	39 f0       	breq	.+14     	; 0xe52 <Pipe_Write_Stream_LE+0x4a>
	{
		Length -= *BytesProcessed;
     e44:	f6 01       	movw	r30, r12
     e46:	80 81       	ld	r24, Z
     e48:	91 81       	ldd	r25, Z+1	; 0x01
     e4a:	e8 1a       	sub	r14, r24
     e4c:	f9 0a       	sbc	r15, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     e4e:	c8 0f       	add	r28, r24
     e50:	d9 1f       	adc	r29, r25
     e52:	00 e0       	ldi	r16, 0x00	; 0
     e54:	10 e0       	ldi	r17, 0x00	; 0
     e56:	21 c0       	rjmp	.+66     	; 0xe9a <Pipe_Write_Stream_LE+0x92>
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
     e58:	80 91 a6 00 	lds	r24, 0x00A6
	}
	
	while (Length)
	{
		if (!(Pipe_IsReadWriteAllowed()))
     e5c:	85 fd       	sbrc	r24, 5
     e5e:	15 c0       	rjmp	.+42     	; 0xe8a <Pipe_Write_Stream_LE+0x82>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
     e60:	80 91 a6 00 	lds	r24, 0x00A6
     e64:	8b 77       	andi	r24, 0x7B	; 123
     e66:	80 93 a6 00 	sts	0x00A6, r24
		{
			TEMPLATE_CLEAR_PIPE();

			if (BytesProcessed != NULL)
     e6a:	c1 14       	cp	r12, r1
     e6c:	d1 04       	cpc	r13, r1
     e6e:	49 f0       	breq	.+18     	; 0xe82 <Pipe_Write_Stream_LE+0x7a>
			{
				*BytesProcessed += BytesInTransfer;
     e70:	f6 01       	movw	r30, r12
     e72:	80 81       	ld	r24, Z
     e74:	91 81       	ldd	r25, Z+1	; 0x01
     e76:	80 0f       	add	r24, r16
     e78:	91 1f       	adc	r25, r17
     e7a:	91 83       	std	Z+1, r25	; 0x01
     e7c:	80 83       	st	Z, r24
     e7e:	84 e0       	ldi	r24, 0x04	; 4
     e80:	10 c0       	rjmp	.+32     	; 0xea2 <Pipe_Write_Stream_LE+0x9a>
				return PIPE_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
     e82:	2b de       	rcall	.-938    	; 0xada <Pipe_WaitUntilReady>
     e84:	88 23       	and	r24, r24
     e86:	49 f0       	breq	.+18     	; 0xe9a <Pipe_Write_Stream_LE+0x92>
     e88:	0c c0       	rjmp	.+24     	; 0xea2 <Pipe_Write_Stream_LE+0x9a>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
     e8a:	89 91       	ld	r24, Y+
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
     e8c:	80 93 af 00 	sts	0x00AF, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
     e90:	08 94       	sec
     e92:	e1 08       	sbc	r14, r1
     e94:	f1 08       	sbc	r15, r1
			BytesInTransfer++;
     e96:	0f 5f       	subi	r16, 0xFF	; 255
     e98:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}
	
	while (Length)
     e9a:	e1 14       	cp	r14, r1
     e9c:	f1 04       	cpc	r15, r1
     e9e:	e1 f6       	brne	.-72     	; 0xe58 <Pipe_Write_Stream_LE+0x50>
     ea0:	8b 2d       	mov	r24, r11
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
     ea2:	df 91       	pop	r29
     ea4:	cf 91       	pop	r28
     ea6:	1f 91       	pop	r17
     ea8:	0f 91       	pop	r16
     eaa:	ff 90       	pop	r15
     eac:	ef 90       	pop	r14
     eae:	df 90       	pop	r13
     eb0:	cf 90       	pop	r12
     eb2:	bf 90       	pop	r11
     eb4:	08 95       	ret

00000eb6 <USB_GetNextDescriptorComp>:

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
     eb6:	af 92       	push	r10
     eb8:	bf 92       	push	r11
     eba:	cf 92       	push	r12
     ebc:	df 92       	push	r13
     ebe:	ef 92       	push	r14
     ec0:	ff 92       	push	r15
     ec2:	0f 93       	push	r16
     ec4:	1f 93       	push	r17
     ec6:	cf 93       	push	r28
     ec8:	df 93       	push	r29
     eca:	7c 01       	movw	r14, r24
     ecc:	eb 01       	movw	r28, r22
     ece:	6a 01       	movw	r12, r20
     ed0:	24 c0       	rjmp	.+72     	; 0xf1a <USB_GetNextDescriptorComp+0x64>
	uint8_t ErrorCode;

	while (*BytesRem)
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
     ed2:	e8 81       	ld	r30, Y
     ed4:	f9 81       	ldd	r31, Y+1	; 0x01
     ed6:	be 2e       	mov	r11, r30
     ed8:	af 2e       	mov	r10, r31
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc)
			{
				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;
     eda:	80 81       	ld	r24, Z
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	98 01       	movw	r18, r16
     ee0:	80 17       	cp	r24, r16
     ee2:	91 07       	cpc	r25, r17
     ee4:	08 f4       	brcc	.+2      	; 0xee8 <USB_GetNextDescriptorComp+0x32>
     ee6:	9c 01       	movw	r18, r24
				
				if (*BytesRem < CurrDescriptorSize)
				  CurrDescriptorSize = *BytesRem;

				*CurrConfigLoc  = (void*)((uintptr_t)*CurrConfigLoc + CurrDescriptorSize);
     ee8:	e2 0f       	add	r30, r18
     eea:	f3 1f       	adc	r31, r19
     eec:	f9 83       	std	Y+1, r31	; 0x01
     eee:	e8 83       	st	Y, r30
				*BytesRem      -= CurrDescriptorSize;
     ef0:	f7 01       	movw	r30, r14
     ef2:	80 81       	ld	r24, Z
     ef4:	91 81       	ldd	r25, Z+1	; 0x01
     ef6:	82 1b       	sub	r24, r18
     ef8:	93 0b       	sbc	r25, r19
     efa:	91 83       	std	Z+1, r25	; 0x01
     efc:	80 83       	st	Z, r24
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
     efe:	88 81       	ld	r24, Y
     f00:	99 81       	ldd	r25, Y+1	; 0x01
     f02:	f6 01       	movw	r30, r12
     f04:	09 95       	icall
     f06:	82 30       	cpi	r24, 0x02	; 2
     f08:	41 f0       	breq	.+16     	; 0xf1a <USB_GetNextDescriptorComp+0x64>
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
     f0a:	81 30       	cpi	r24, 0x01	; 1
     f0c:	69 f4       	brne	.+26     	; 0xf28 <USB_GetNextDescriptorComp+0x72>
			{
				*CurrConfigLoc = PrevDescLoc;
     f0e:	b8 82       	st	Y, r11
     f10:	a9 82       	std	Y+1, r10	; 0x01
				*BytesRem      = PrevBytesRem;
     f12:	f7 01       	movw	r30, r14
     f14:	11 83       	std	Z+1, r17	; 0x01
     f16:	00 83       	st	Z, r16
     f18:	07 c0       	rjmp	.+14     	; 0xf28 <USB_GetNextDescriptorComp+0x72>
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
	uint8_t ErrorCode;

	while (*BytesRem)
     f1a:	f7 01       	movw	r30, r14
     f1c:	00 81       	ld	r16, Z
     f1e:	11 81       	ldd	r17, Z+1	; 0x01
     f20:	01 15       	cp	r16, r1
     f22:	11 05       	cpc	r17, r1
     f24:	b1 f6       	brne	.-84     	; 0xed2 <USB_GetNextDescriptorComp+0x1c>
     f26:	82 e0       	ldi	r24, 0x02	; 2
			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
}
     f28:	df 91       	pop	r29
     f2a:	cf 91       	pop	r28
     f2c:	1f 91       	pop	r17
     f2e:	0f 91       	pop	r16
     f30:	ff 90       	pop	r15
     f32:	ef 90       	pop	r14
     f34:	df 90       	pop	r13
     f36:	cf 90       	pop	r12
     f38:	bf 90       	pop	r11
     f3a:	af 90       	pop	r10
     f3c:	08 95       	ret

00000f3e <USB_Host_GetDeviceConfigDescriptor>:
#if defined(USB_CAN_BE_HOST)
uint8_t USB_Host_GetDeviceConfigDescriptor(const uint8_t ConfigNumber,
                                           uint16_t* const ConfigSizePtr,
                                           void* const BufferPtr,
                                           const uint16_t BufferSize)
{
     f3e:	cf 92       	push	r12
     f40:	df 92       	push	r13
     f42:	ef 92       	push	r14
     f44:	ff 92       	push	r15
     f46:	0f 93       	push	r16
     f48:	1f 93       	push	r17
     f4a:	df 93       	push	r29
     f4c:	cf 93       	push	r28
     f4e:	cd b7       	in	r28, 0x3d	; 61
     f50:	de b7       	in	r29, 0x3e	; 62
     f52:	29 97       	sbiw	r28, 0x09	; 9
     f54:	0f b6       	in	r0, 0x3f	; 63
     f56:	f8 94       	cli
     f58:	de bf       	out	0x3e, r29	; 62
     f5a:	0f be       	out	0x3f, r0	; 63
     f5c:	cd bf       	out	0x3d, r28	; 61
     f5e:	6b 01       	movw	r12, r22
     f60:	8a 01       	movw	r16, r20
     f62:	79 01       	movw	r14, r18
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
     f64:	90 e8       	ldi	r25, 0x80	; 128
     f66:	90 93 28 01 	sts	0x0128, r25
     f6a:	96 e0       	ldi	r25, 0x06	; 6
     f6c:	90 93 29 01 	sts	0x0129, r25
     f70:	90 e0       	ldi	r25, 0x00	; 0
     f72:	01 97       	sbiw	r24, 0x01	; 1
     f74:	92 60       	ori	r25, 0x02	; 2
     f76:	90 93 2b 01 	sts	0x012B, r25
     f7a:	80 93 2a 01 	sts	0x012A, r24
     f7e:	10 92 2d 01 	sts	0x012D, r1
     f82:	10 92 2c 01 	sts	0x012C, r1
     f86:	89 e0       	ldi	r24, 0x09	; 9
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	90 93 2f 01 	sts	0x012F, r25
     f8e:	80 93 2e 01 	sts	0x012E, r24
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     f92:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = sizeof(USB_Descriptor_Configuration_Header_t),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(ConfigHeader)) != HOST_SENDCONTROL_Successful)
     f96:	ce 01       	movw	r24, r28
     f98:	01 96       	adiw	r24, 0x01	; 1
     f9a:	55 d0       	rcall	.+170    	; 0x1046 <USB_Host_SendControlRequest>
     f9c:	28 2f       	mov	r18, r24
     f9e:	88 23       	and	r24, r24
     fa0:	c1 f4       	brne	.+48     	; 0xfd2 <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);
     fa2:	8b 81       	ldd	r24, Y+3	; 0x03
     fa4:	9c 81       	ldd	r25, Y+4	; 0x04
     fa6:	f6 01       	movw	r30, r12
     fa8:	91 83       	std	Z+1, r25	; 0x01
     faa:	80 83       	st	Z, r24

	if (*ConfigSizePtr > BufferSize)
     fac:	e8 16       	cp	r14, r24
     fae:	f9 06       	cpc	r15, r25
     fb0:	10 f4       	brcc	.+4      	; 0xfb6 <USB_Host_GetDeviceConfigDescriptor+0x78>
     fb2:	25 e0       	ldi	r18, 0x05	; 5
     fb4:	0e c0       	rjmp	.+28     	; 0xfd2 <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return HOST_GETCONFIG_BuffOverflow;

	USB_ControlRequest.wLength = *ConfigSizePtr;
     fb6:	90 93 2f 01 	sts	0x012F, r25
     fba:	80 93 2e 01 	sts	0x012E, r24

	if ((ErrorCode = USB_Host_SendControlRequest(BufferPtr)) != HOST_SENDCONTROL_Successful)
     fbe:	c8 01       	movw	r24, r16
     fc0:	42 d0       	rcall	.+132    	; 0x1046 <USB_Host_SendControlRequest>
     fc2:	28 2f       	mov	r18, r24
     fc4:	88 23       	and	r24, r24
     fc6:	29 f4       	brne	.+10     	; 0xfd2 <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
     fc8:	f8 01       	movw	r30, r16
     fca:	81 81       	ldd	r24, Z+1	; 0x01
     fcc:	82 30       	cpi	r24, 0x02	; 2
     fce:	09 f0       	breq	.+2      	; 0xfd2 <USB_Host_GetDeviceConfigDescriptor+0x94>
     fd0:	26 e0       	ldi	r18, 0x06	; 6
	  return HOST_GETCONFIG_InvalidData;

	return HOST_GETCONFIG_Successful;
}
     fd2:	82 2f       	mov	r24, r18
     fd4:	29 96       	adiw	r28, 0x09	; 9
     fd6:	0f b6       	in	r0, 0x3f	; 63
     fd8:	f8 94       	cli
     fda:	de bf       	out	0x3e, r29	; 62
     fdc:	0f be       	out	0x3f, r0	; 63
     fde:	cd bf       	out	0x3d, r28	; 61
     fe0:	cf 91       	pop	r28
     fe2:	df 91       	pop	r29
     fe4:	1f 91       	pop	r17
     fe6:	0f 91       	pop	r16
     fe8:	ff 90       	pop	r15
     fea:	ef 90       	pop	r14
     fec:	df 90       	pop	r13
     fee:	cf 90       	pop	r12
     ff0:	08 95       	ret

00000ff2 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
     ff2:	08 95       	ret

00000ff4 <USB_Host_WaitForIOS>:

	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
     ff4:	1f 93       	push	r17
     ff6:	cf 93       	push	r28
     ff8:	df 93       	push	r29
     ffa:	18 2f       	mov	r17, r24
     ffc:	c8 ee       	ldi	r28, 0xE8	; 232
     ffe:	d3 e0       	ldi	r29, 0x03	; 3
    1000:	09 c0       	rjmp	.+18     	; 0x1014 <USB_Host_WaitForIOS+0x20>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1002:	81 e0       	ldi	r24, 0x01	; 1
    1004:	0e db       	rcall	.-2532   	; 0x622 <USB_Host_WaitMS>
    1006:	88 23       	and	r24, r24
    1008:	d1 f4       	brne	.+52     	; 0x103e <USB_Host_WaitForIOS+0x4a>
		  return ErrorCode;

		if (!(TimeoutCounter--))
    100a:	20 97       	sbiw	r28, 0x00	; 0
    100c:	11 f4       	brne	.+4      	; 0x1012 <USB_Host_WaitForIOS+0x1e>
    100e:	84 e0       	ldi	r24, 0x04	; 4
    1010:	16 c0       	rjmp	.+44     	; 0x103e <USB_Host_WaitForIOS+0x4a>
    1012:	21 97       	sbiw	r28, 0x01	; 1
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    1014:	11 23       	and	r17, r17
    1016:	29 f4       	brne	.+10     	; 0x1022 <USB_Host_WaitForIOS+0x2e>
			 *  \return Boolean \c true if the current pipe is ready for a SETUP packet, \c false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
    1018:	80 91 a6 00 	lds	r24, 0x00A6
    101c:	83 ff       	sbrs	r24, 3
    101e:	f1 cf       	rjmp	.-30     	; 0x1002 <USB_Host_WaitForIOS+0xe>
    1020:	0d c0       	rjmp	.+26     	; 0x103c <USB_Host_WaitForIOS+0x48>
    1022:	11 30       	cpi	r17, 0x01	; 1
    1024:	29 f4       	brne	.+10     	; 0x1030 <USB_Host_WaitForIOS+0x3c>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    1026:	80 91 a6 00 	lds	r24, 0x00A6
    102a:	80 ff       	sbrs	r24, 0
    102c:	ea cf       	rjmp	.-44     	; 0x1002 <USB_Host_WaitForIOS+0xe>
    102e:	06 c0       	rjmp	.+12     	; 0x103c <USB_Host_WaitForIOS+0x48>
    1030:	12 30       	cpi	r17, 0x02	; 2
    1032:	39 f7       	brne	.-50     	; 0x1002 <USB_Host_WaitForIOS+0xe>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
    1034:	80 91 a6 00 	lds	r24, 0x00A6
    1038:	82 ff       	sbrs	r24, 2
    103a:	e3 cf       	rjmp	.-58     	; 0x1002 <USB_Host_WaitForIOS+0xe>
    103c:	80 e0       	ldi	r24, 0x00	; 0
		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
}
    103e:	df 91       	pop	r29
    1040:	cf 91       	pop	r28
    1042:	1f 91       	pop	r17
    1044:	08 95       	ret

00001046 <USB_Host_SendControlRequest>:
#include "HostStandardReq.h"

uint8_t USB_Host_ConfigurationNumber;

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
    1046:	ff 92       	push	r15
    1048:	0f 93       	push	r16
    104a:	1f 93       	push	r17
    104c:	cf 93       	push	r28
    104e:	df 93       	push	r29
    1050:	18 2f       	mov	r17, r24
    1052:	09 2f       	mov	r16, r25
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
    1054:	f0 90 9e 00 	lds	r15, 0x009E
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
	bool     BusSuspended = USB_Host_IsBusSuspended();
	uint8_t  ReturnStatus = HOST_SENDCONTROL_Successful;
	uint16_t DataLen      = USB_ControlRequest.wLength;
    1058:	c0 91 2e 01 	lds	r28, 0x012E
    105c:	d0 91 2f 01 	lds	r29, 0x012F
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    1060:	80 91 9e 00 	lds	r24, 0x009E
    1064:	81 60       	ori	r24, 0x01	; 1
    1066:	80 93 9e 00 	sts	0x009E, r24

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    106a:	81 e0       	ldi	r24, 0x01	; 1
    106c:	da da       	rcall	.-2636   	; 0x622 <USB_Host_WaitMS>
    106e:	98 2f       	mov	r25, r24
    1070:	88 23       	and	r24, r24
    1072:	09 f0       	breq	.+2      	; 0x1076 <USB_Host_SendControlRequest+0x30>
    1074:	d7 c0       	rjmp	.+430    	; 0x1224 <USB_Host_SendControlRequest+0x1de>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1076:	80 91 aa 00 	lds	r24, 0x00AA
    107a:	8f 7c       	andi	r24, 0xCF	; 207
    107c:	80 93 aa 00 	sts	0x00AA, r24

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
    1080:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
    1084:	80 91 a6 00 	lds	r24, 0x00A6
    1088:	8f 7e       	andi	r24, 0xEF	; 239
    108a:	80 93 a6 00 	sts	0x00A6, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    108e:	80 91 a9 00 	lds	r24, 0x00A9
    1092:	8f 7b       	andi	r24, 0xBF	; 191
    1094:	80 93 a9 00 	sts	0x00A9, r24
    1098:	e8 e2       	ldi	r30, 0x28	; 40
    109a:	f1 e0       	ldi	r31, 0x01	; 1
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
	  Pipe_Write_8(*(HeaderStream++));	
    109c:	81 91       	ld	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    109e:	80 93 af 00 	sts	0x00AF, r24
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
    10a2:	81 e0       	ldi	r24, 0x01	; 1
    10a4:	e0 33       	cpi	r30, 0x30	; 48
    10a6:	f8 07       	cpc	r31, r24
    10a8:	c9 f7       	brne	.-14     	; 0x109c <USB_Host_SendControlRequest+0x56>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
    10aa:	80 91 a6 00 	lds	r24, 0x00A6
    10ae:	87 77       	andi	r24, 0x77	; 119
    10b0:	80 93 a6 00 	sts	0x00A6, r24
	  Pipe_Write_8(*(HeaderStream++));	
	#endif
	
	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
    10b4:	80 e0       	ldi	r24, 0x00	; 0
    10b6:	9e df       	rcall	.-196    	; 0xff4 <USB_Host_WaitForIOS>
    10b8:	98 2f       	mov	r25, r24
    10ba:	88 23       	and	r24, r24
    10bc:	09 f0       	breq	.+2      	; 0x10c0 <USB_Host_SendControlRequest+0x7a>
    10be:	b2 c0       	rjmp	.+356    	; 0x1224 <USB_Host_SendControlRequest+0x1de>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    10c0:	80 91 a9 00 	lds	r24, 0x00A9
    10c4:	80 64       	ori	r24, 0x40	; 64
    10c6:	80 93 a9 00 	sts	0x00A9, r24
	  goto End_Of_Control_Send;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    10ca:	81 e0       	ldi	r24, 0x01	; 1
    10cc:	aa da       	rcall	.-2732   	; 0x622 <USB_Host_WaitMS>
    10ce:	98 2f       	mov	r25, r24
    10d0:	88 23       	and	r24, r24
    10d2:	09 f0       	breq	.+2      	; 0x10d6 <USB_Host_SendControlRequest+0x90>
    10d4:	a7 c0       	rjmp	.+334    	; 0x1224 <USB_Host_SendControlRequest+0x1de>

uint8_t USB_Host_ConfigurationNumber;

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
    10d6:	21 2f       	mov	r18, r17
    10d8:	30 2f       	mov	r19, r16
    10da:	c9 01       	movw	r24, r18
    10dc:	8c 01       	movw	r16, r24
	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
	  goto End_Of_Control_Send;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
    10de:	80 91 28 01 	lds	r24, 0x0128
    10e2:	87 ff       	sbrs	r24, 7
    10e4:	52 c0       	rjmp	.+164    	; 0x118a <USB_Host_SendControlRequest+0x144>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    10e6:	80 91 aa 00 	lds	r24, 0x00AA
    10ea:	8f 7c       	andi	r24, 0xCF	; 207
    10ec:	80 61       	ori	r24, 0x10	; 16
    10ee:	80 93 aa 00 	sts	0x00AA, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
    10f2:	01 15       	cp	r16, r1
    10f4:	11 05       	cpc	r17, r1
    10f6:	69 f5       	brne	.+90     	; 0x1152 <USB_Host_SendControlRequest+0x10c>
    10f8:	2e c0       	rjmp	.+92     	; 0x1156 <USB_Host_SendControlRequest+0x110>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    10fa:	80 91 a9 00 	lds	r24, 0x00A9
    10fe:	8f 7b       	andi	r24, 0xBF	; 191
    1100:	80 93 a9 00 	sts	0x00A9, r24
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    1104:	81 e0       	ldi	r24, 0x01	; 1
    1106:	76 df       	rcall	.-276    	; 0xff4 <USB_Host_WaitForIOS>
    1108:	98 2f       	mov	r25, r24
    110a:	88 23       	and	r24, r24
    110c:	09 f0       	breq	.+2      	; 0x1110 <USB_Host_SendControlRequest+0xca>
    110e:	8a c0       	rjmp	.+276    	; 0x1224 <USB_Host_SendControlRequest+0x1de>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1110:	80 91 f6 00 	lds	r24, 0x00F6
    1114:	90 91 f7 00 	lds	r25, 0x00F7
				  goto End_Of_Control_Send;

				if (!(Pipe_BytesInPipe()))
    1118:	89 2b       	or	r24, r25
    111a:	49 f4       	brne	.+18     	; 0x112e <USB_Host_SendControlRequest+0xe8>
    111c:	c0 e0       	ldi	r28, 0x00	; 0
    111e:	d0 e0       	ldi	r29, 0x00	; 0
    1120:	06 c0       	rjmp	.+12     	; 0x112e <USB_Host_SendControlRequest+0xe8>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    1122:	80 91 af 00 	lds	r24, 0x00AF
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
				{
					*(DataStream++) = Pipe_Read_8();
    1126:	f8 01       	movw	r30, r16
    1128:	81 93       	st	Z+, r24
    112a:	8f 01       	movw	r16, r30
					DataLen--;
    112c:	21 97       	sbiw	r28, 0x01	; 1
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    112e:	80 91 f6 00 	lds	r24, 0x00F6
    1132:	90 91 f7 00 	lds	r25, 0x00F7
				  goto End_Of_Control_Send;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
    1136:	89 2b       	or	r24, r25
    1138:	11 f0       	breq	.+4      	; 0x113e <USB_Host_SendControlRequest+0xf8>
    113a:	20 97       	sbiw	r28, 0x00	; 0
    113c:	91 f7       	brne	.-28     	; 0x1122 <USB_Host_SendControlRequest+0xdc>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    113e:	80 91 a9 00 	lds	r24, 0x00A9
    1142:	80 64       	ori	r24, 0x40	; 64
    1144:	80 93 a9 00 	sts	0x00A9, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1148:	80 91 a6 00 	lds	r24, 0x00A6
    114c:	8e 77       	andi	r24, 0x7E	; 126
    114e:	80 93 a6 00 	sts	0x00A6, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
    1152:	20 97       	sbiw	r28, 0x00	; 0
    1154:	91 f6       	brne	.-92     	; 0x10fa <USB_Host_SendControlRequest+0xb4>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1156:	80 91 aa 00 	lds	r24, 0x00AA
    115a:	8f 7c       	andi	r24, 0xCF	; 207
    115c:	80 62       	ori	r24, 0x20	; 32
    115e:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1162:	80 91 a9 00 	lds	r24, 0x00A9
    1166:	8f 7b       	andi	r24, 0xBF	; 191
    1168:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    116c:	82 e0       	ldi	r24, 0x02	; 2
    116e:	42 df       	rcall	.-380    	; 0xff4 <USB_Host_WaitForIOS>
    1170:	98 2f       	mov	r25, r24
    1172:	88 23       	and	r24, r24
    1174:	09 f0       	breq	.+2      	; 0x1178 <USB_Host_SendControlRequest+0x132>
    1176:	56 c0       	rjmp	.+172    	; 0x1224 <USB_Host_SendControlRequest+0x1de>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1178:	80 91 a6 00 	lds	r24, 0x00A6
    117c:	8b 77       	andi	r24, 0x7B	; 123
    117e:	80 93 a6 00 	sts	0x00A6, r24
		  goto End_Of_Control_Send;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1182:	82 e0       	ldi	r24, 0x02	; 2
    1184:	37 df       	rcall	.-402    	; 0xff4 <USB_Host_WaitForIOS>
    1186:	98 2f       	mov	r25, r24
    1188:	4d c0       	rjmp	.+154    	; 0x1224 <USB_Host_SendControlRequest+0x1de>
		  goto End_Of_Control_Send;
	}
	else
	{
		if (DataStream != NULL)
    118a:	01 15       	cp	r16, r1
    118c:	11 05       	cpc	r17, r1
    118e:	a9 f1       	breq	.+106    	; 0x11fa <USB_Host_SendControlRequest+0x1b4>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1190:	80 91 aa 00 	lds	r24, 0x00AA
    1194:	8f 7c       	andi	r24, 0xCF	; 207
    1196:	80 62       	ori	r24, 0x20	; 32
    1198:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    119c:	80 91 a9 00 	lds	r24, 0x00A9
    11a0:	8f 7b       	andi	r24, 0xBF	; 191
    11a2:	80 93 a9 00 	sts	0x00A9, r24
    11a6:	1d c0       	rjmp	.+58     	; 0x11e2 <USB_Host_SendControlRequest+0x19c>
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    11a8:	82 e0       	ldi	r24, 0x02	; 2
    11aa:	24 df       	rcall	.-440    	; 0xff4 <USB_Host_WaitForIOS>
    11ac:	98 2f       	mov	r25, r24
    11ae:	88 23       	and	r24, r24
    11b0:	c9 f5       	brne	.+114    	; 0x1224 <USB_Host_SendControlRequest+0x1de>
				  goto End_Of_Control_Send;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    11b2:	80 91 21 01 	lds	r24, 0x0121
    11b6:	28 2f       	mov	r18, r24
    11b8:	30 e0       	ldi	r19, 0x00	; 0
    11ba:	07 c0       	rjmp	.+14     	; 0x11ca <USB_Host_SendControlRequest+0x184>
				{
					Pipe_Write_8(*(DataStream++));
    11bc:	f8 01       	movw	r30, r16
    11be:	81 91       	ld	r24, Z+
    11c0:	8f 01       	movw	r16, r30
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    11c2:	80 93 af 00 	sts	0x00AF, r24
					DataLen--;
    11c6:	21 97       	sbiw	r28, 0x01	; 1
			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
				  goto End_Of_Control_Send;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    11c8:	39 f0       	breq	.+14     	; 0x11d8 <USB_Host_SendControlRequest+0x192>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    11ca:	80 91 f6 00 	lds	r24, 0x00F6
    11ce:	90 91 f7 00 	lds	r25, 0x00F7
    11d2:	82 17       	cp	r24, r18
    11d4:	93 07       	cpc	r25, r19
    11d6:	90 f3       	brcs	.-28     	; 0x11bc <USB_Host_SendControlRequest+0x176>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    11d8:	80 91 a6 00 	lds	r24, 0x00A6
    11dc:	8b 77       	andi	r24, 0x7B	; 123
    11de:	80 93 a6 00 	sts	0x00A6, r24
		if (DataStream != NULL)
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
    11e2:	20 97       	sbiw	r28, 0x00	; 0
    11e4:	09 f7       	brne	.-62     	; 0x11a8 <USB_Host_SendControlRequest+0x162>
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    11e6:	82 e0       	ldi	r24, 0x02	; 2
    11e8:	05 df       	rcall	.-502    	; 0xff4 <USB_Host_WaitForIOS>
    11ea:	98 2f       	mov	r25, r24
    11ec:	88 23       	and	r24, r24
    11ee:	d1 f4       	brne	.+52     	; 0x1224 <USB_Host_SendControlRequest+0x1de>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    11f0:	80 91 a9 00 	lds	r24, 0x00A9
    11f4:	80 64       	ori	r24, 0x40	; 64
    11f6:	80 93 a9 00 	sts	0x00A9, r24
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    11fa:	80 91 aa 00 	lds	r24, 0x00AA
    11fe:	8f 7c       	andi	r24, 0xCF	; 207
    1200:	80 61       	ori	r24, 0x10	; 16
    1202:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1206:	80 91 a9 00 	lds	r24, 0x00A9
    120a:	8f 7b       	andi	r24, 0xBF	; 191
    120c:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    1210:	81 e0       	ldi	r24, 0x01	; 1
    1212:	f0 de       	rcall	.-544    	; 0xff4 <USB_Host_WaitForIOS>
    1214:	98 2f       	mov	r25, r24
    1216:	88 23       	and	r24, r24
    1218:	29 f4       	brne	.+10     	; 0x1224 <USB_Host_SendControlRequest+0x1de>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    121a:	80 91 a6 00 	lds	r24, 0x00A6
    121e:	8e 77       	andi	r24, 0x7E	; 126
    1220:	80 93 a6 00 	sts	0x00A6, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1224:	80 91 a9 00 	lds	r24, 0x00A9
    1228:	80 64       	ori	r24, 0x40	; 64
    122a:	80 93 a9 00 	sts	0x00A9, r24
	}

End_Of_Control_Send:
	Pipe_Freeze();

	if (BusSuspended)
    122e:	f0 fc       	sbrc	r15, 0
    1230:	05 c0       	rjmp	.+10     	; 0x123c <USB_Host_SendControlRequest+0x1f6>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    1232:	80 91 9e 00 	lds	r24, 0x009E
    1236:	8e 7f       	andi	r24, 0xFE	; 254
    1238:	80 93 9e 00 	sts	0x009E, r24
			 *  \param[in] PipeNumber  Index of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t PipeNumber)
			{
				UPRST = (1 << PipeNumber);
    123c:	81 e0       	ldi	r24, 0x01	; 1
    123e:	80 93 a8 00 	sts	0x00A8, r24
				UPRST = 0;
    1242:	10 92 a8 00 	sts	0x00A8, r1
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
    1246:	89 2f       	mov	r24, r25
    1248:	df 91       	pop	r29
    124a:	cf 91       	pop	r28
    124c:	1f 91       	pop	r17
    124e:	0f 91       	pop	r16
    1250:	ff 90       	pop	r15
    1252:	08 95       	ret

00001254 <USB_Host_SetDeviceConfiguration>:

	return HOST_SENDCONTROL_Successful;
}

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
    1254:	1f 93       	push	r17
    1256:	18 2f       	mov	r17, r24
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
    1258:	10 92 28 01 	sts	0x0128, r1
    125c:	89 e0       	ldi	r24, 0x09	; 9
    125e:	80 93 29 01 	sts	0x0129, r24
    1262:	10 93 2a 01 	sts	0x012A, r17
    1266:	10 92 2b 01 	sts	0x012B, r1
    126a:	10 92 2d 01 	sts	0x012D, r1
    126e:	10 92 2c 01 	sts	0x012C, r1
    1272:	10 92 2f 01 	sts	0x012F, r1
    1276:	10 92 2e 01 	sts	0x012E, r1
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    127a:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);
	
	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) == HOST_SENDCONTROL_Successful)
    127e:	80 e0       	ldi	r24, 0x00	; 0
    1280:	90 e0       	ldi	r25, 0x00	; 0
    1282:	e1 de       	rcall	.-574    	; 0x1046 <USB_Host_SendControlRequest>
    1284:	88 23       	and	r24, r24
    1286:	49 f4       	brne	.+18     	; 0x129a <USB_Host_SetDeviceConfiguration+0x46>
	{
		USB_Host_ConfigurationNumber = ConfigNumber;
    1288:	10 93 26 01 	sts	0x0126, r17
		USB_HostState                = (ConfigNumber) ? HOST_STATE_Configured : HOST_STATE_Addressed;
    128c:	11 23       	and	r17, r17
    128e:	11 f4       	brne	.+4      	; 0x1294 <USB_Host_SetDeviceConfiguration+0x40>
    1290:	9a e0       	ldi	r25, 0x0A	; 10
    1292:	01 c0       	rjmp	.+2      	; 0x1296 <USB_Host_SetDeviceConfiguration+0x42>
    1294:	9b e0       	ldi	r25, 0x0B	; 11
    1296:	90 93 30 01 	sts	0x0130, r25
	}

	return ErrorCode;
}
    129a:	1f 91       	pop	r17
    129c:	08 95       	ret

0000129e <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    129e:	ff 92       	push	r15
    12a0:	0f 93       	push	r16
    12a2:	1f 93       	push	r17
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
    12a4:	07 ea       	ldi	r16, 0xA7	; 167
    12a6:	10 e0       	ldi	r17, 0x00	; 0
    12a8:	f8 01       	movw	r30, r16
    12aa:	f0 80       	ld	r15, Z
    12ac:	f7 e0       	ldi	r31, 0x07	; 7
    12ae:	ff 22       	and	r15, r31
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    12b0:	f8 01       	movw	r30, r16
    12b2:	10 82       	st	Z, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    12b4:	53 da       	rcall	.-2906   	; 0x75c <USB_Host_ProcessNextHostState>
    12b6:	f8 01       	movw	r30, r16
    12b8:	f0 82       	st	Z, r15
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
    12ba:	1f 91       	pop	r17
    12bc:	0f 91       	pop	r16
    12be:	ff 90       	pop	r15
    12c0:	08 95       	ret

000012c2 <DCOMP_MIDI_Host_NextMIDIStreamingInterface>:

	return MIDI_ENUMERROR_NoError;
}

static uint8_t DCOMP_MIDI_Host_NextMIDIStreamingInterface(void* const CurrentDescriptor)
{
    12c2:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
    12c4:	81 81       	ldd	r24, Z+1	; 0x01
    12c6:	84 30       	cpi	r24, 0x04	; 4
    12c8:	41 f4       	brne	.+16     	; 0x12da <DCOMP_MIDI_Host_NextMIDIStreamingInterface+0x18>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		if ((Interface->Class    == AUDIO_CSCP_AudioClass)            &&
    12ca:	85 81       	ldd	r24, Z+5	; 0x05
    12cc:	81 30       	cpi	r24, 0x01	; 1
    12ce:	29 f4       	brne	.+10     	; 0x12da <DCOMP_MIDI_Host_NextMIDIStreamingInterface+0x18>
    12d0:	86 81       	ldd	r24, Z+6	; 0x06
    12d2:	83 30       	cpi	r24, 0x03	; 3
    12d4:	11 f4       	brne	.+4      	; 0x12da <DCOMP_MIDI_Host_NextMIDIStreamingInterface+0x18>
    12d6:	87 81       	ldd	r24, Z+7	; 0x07
    12d8:	81 11       	cpse	r24, r1
    12da:	82 e0       	ldi	r24, 0x02	; 2
			return DESCRIPTOR_SEARCH_Found;
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    12dc:	08 95       	ret

000012de <MIDI_Host_ReceiveEventPacket>:
	return PIPE_RWSTREAM_NoError;
}

bool MIDI_Host_ReceiveEventPacket(USB_ClassInfo_MIDI_Host_t* const MIDIInterfaceInfo,
                                  MIDI_EventPacket_t* const Event)
{
    12de:	fc 01       	movw	r30, r24
	if ((USB_HostState != HOST_STATE_Configured) || !(MIDIInterfaceInfo->State.IsActive))
    12e0:	80 91 30 01 	lds	r24, 0x0130
    12e4:	8b 30       	cpi	r24, 0x0B	; 11
    12e6:	e9 f4       	brne	.+58     	; 0x1322 <MIDI_Host_ReceiveEventPacket+0x44>
    12e8:	84 81       	ldd	r24, Z+4	; 0x04
    12ea:	88 23       	and	r24, r24
    12ec:	d1 f0       	breq	.+52     	; 0x1322 <MIDI_Host_ReceiveEventPacket+0x44>
	  return HOST_SENDCONTROL_DeviceDisconnected;

	Pipe_SelectPipe(MIDIInterfaceInfo->Config.DataINPipeNumber);
    12ee:	80 81       	ld	r24, Z
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    12f0:	80 93 a7 00 	sts	0x00A7, r24
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
    12f4:	80 91 a6 00 	lds	r24, 0x00A6

	if (!(Pipe_IsReadWriteAllowed()))
    12f8:	85 fd       	sbrc	r24, 5
    12fa:	02 c0       	rjmp	.+4      	; 0x1300 <MIDI_Host_ReceiveEventPacket+0x22>
    12fc:	80 e0       	ldi	r24, 0x00	; 0
    12fe:	08 95       	ret
	  return false;

	Pipe_Read_Stream_LE(Event, sizeof(MIDI_EventPacket_t), NULL);
    1300:	cb 01       	movw	r24, r22
    1302:	64 e0       	ldi	r22, 0x04	; 4
    1304:	70 e0       	ldi	r23, 0x00	; 0
    1306:	40 e0       	ldi	r20, 0x00	; 0
    1308:	50 e0       	ldi	r21, 0x00	; 0
    130a:	27 dd       	rcall	.-1458   	; 0xd5a <Pipe_Read_Stream_LE>
    130c:	80 91 a6 00 	lds	r24, 0x00A6

	if (!(Pipe_IsReadWriteAllowed()))
    1310:	85 fd       	sbrc	r24, 5
    1312:	07 c0       	rjmp	.+14     	; 0x1322 <MIDI_Host_ReceiveEventPacket+0x44>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1314:	80 91 a6 00 	lds	r24, 0x00A6
    1318:	8e 77       	andi	r24, 0x7E	; 126
    131a:	80 93 a6 00 	sts	0x00A6, r24
    131e:	81 e0       	ldi	r24, 0x01	; 1
    1320:	08 95       	ret
    1322:	81 e0       	ldi	r24, 0x01	; 1
	  Pipe_ClearIN();

	return true;
}
    1324:	08 95       	ret

00001326 <MIDI_Host_SendEventPacket>:
	return PIPE_READYWAIT_NoError;
}

uint8_t MIDI_Host_SendEventPacket(USB_ClassInfo_MIDI_Host_t* const MIDIInterfaceInfo,
                                  MIDI_EventPacket_t* const Event)
{
    1326:	fc 01       	movw	r30, r24
	if ((USB_HostState != HOST_STATE_Configured) || !(MIDIInterfaceInfo->State.IsActive))
    1328:	80 91 30 01 	lds	r24, 0x0130
    132c:	8b 30       	cpi	r24, 0x0B	; 11
    132e:	c9 f4       	brne	.+50     	; 0x1362 <MIDI_Host_SendEventPacket+0x3c>
    1330:	84 81       	ldd	r24, Z+4	; 0x04
    1332:	88 23       	and	r24, r24
    1334:	b1 f0       	breq	.+44     	; 0x1362 <MIDI_Host_SendEventPacket+0x3c>
	  return HOST_SENDCONTROL_DeviceDisconnected;

	uint8_t ErrorCode;

	Pipe_SelectPipe(MIDIInterfaceInfo->Config.DataOUTPipeNumber);
    1336:	82 81       	ldd	r24, Z+2	; 0x02
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1338:	80 93 a7 00 	sts	0x00A7, r24

	if ((ErrorCode = Pipe_Write_Stream_LE(Event, sizeof(MIDI_EventPacket_t), NULL)) != PIPE_RWSTREAM_NoError)
    133c:	cb 01       	movw	r24, r22
    133e:	64 e0       	ldi	r22, 0x04	; 4
    1340:	70 e0       	ldi	r23, 0x00	; 0
    1342:	40 e0       	ldi	r20, 0x00	; 0
    1344:	50 e0       	ldi	r21, 0x00	; 0
    1346:	60 dd       	rcall	.-1344   	; 0xe08 <Pipe_Write_Stream_LE>
    1348:	98 2f       	mov	r25, r24
    134a:	88 23       	and	r24, r24
    134c:	59 f4       	brne	.+22     	; 0x1364 <MIDI_Host_SendEventPacket+0x3e>
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
    134e:	80 91 a6 00 	lds	r24, 0x00A6
	  return ErrorCode;

	if (!(Pipe_IsReadWriteAllowed()))
    1352:	85 fd       	sbrc	r24, 5
    1354:	07 c0       	rjmp	.+14     	; 0x1364 <MIDI_Host_SendEventPacket+0x3e>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1356:	80 91 a6 00 	lds	r24, 0x00A6
    135a:	8b 77       	andi	r24, 0x7B	; 123
    135c:	80 93 a6 00 	sts	0x00A6, r24
    1360:	01 c0       	rjmp	.+2      	; 0x1364 <MIDI_Host_SendEventPacket+0x3e>
    1362:	91 e0       	ldi	r25, 0x01	; 1
	  Pipe_ClearOUT();

	return PIPE_RWSTREAM_NoError;
}
    1364:	89 2f       	mov	r24, r25
    1366:	08 95       	ret

00001368 <MIDI_Host_Flush>:
	MIDI_Host_Flush(MIDIInterfaceInfo);
	#endif	
}

uint8_t MIDI_Host_Flush(USB_ClassInfo_MIDI_Host_t* const MIDIInterfaceInfo)
{
    1368:	fc 01       	movw	r30, r24
	if ((USB_HostState != HOST_STATE_Configured) || !(MIDIInterfaceInfo->State.IsActive))
    136a:	80 91 30 01 	lds	r24, 0x0130
    136e:	8b 30       	cpi	r24, 0x0B	; 11
    1370:	a1 f4       	brne	.+40     	; 0x139a <MIDI_Host_Flush+0x32>
    1372:	84 81       	ldd	r24, Z+4	; 0x04
    1374:	88 23       	and	r24, r24
    1376:	89 f0       	breq	.+34     	; 0x139a <MIDI_Host_Flush+0x32>
	  return PIPE_RWSTREAM_DeviceDisconnected;

	uint8_t ErrorCode;

	Pipe_SelectPipe(MIDIInterfaceInfo->Config.DataOUTPipeNumber);
    1378:	82 81       	ldd	r24, Z+2	; 0x02
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    137a:	80 93 a7 00 	sts	0x00A7, r24
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    137e:	80 91 f6 00 	lds	r24, 0x00F6
    1382:	90 91 f7 00 	lds	r25, 0x00F7

	if (Pipe_BytesInPipe())
    1386:	89 2b       	or	r24, r25
    1388:	11 f4       	brne	.+4      	; 0x138e <MIDI_Host_Flush+0x26>
    138a:	80 e0       	ldi	r24, 0x00	; 0
    138c:	08 95       	ret
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    138e:	80 91 a6 00 	lds	r24, 0x00A6
    1392:	8b 77       	andi	r24, 0x7B	; 123
    1394:	80 93 a6 00 	sts	0x00A6, r24
	{
		Pipe_ClearOUT();

		if ((ErrorCode = Pipe_WaitUntilReady()) != PIPE_READYWAIT_NoError)
    1398:	a0 cb       	rjmp	.-2240   	; 0xada <Pipe_WaitUntilReady>
    139a:	82 e0       	ldi	r24, 0x02	; 2
		  return ErrorCode;
	}

	return PIPE_READYWAIT_NoError;
}
    139c:	08 95       	ret

0000139e <MIDI_Host_USBTask>:

	return DESCRIPTOR_SEARCH_NotFound;
}

void MIDI_Host_USBTask(USB_ClassInfo_MIDI_Host_t* const MIDIInterfaceInfo)
{
    139e:	fc 01       	movw	r30, r24
	if ((USB_HostState != HOST_STATE_Configured) || !(MIDIInterfaceInfo->State.IsActive))
    13a0:	80 91 30 01 	lds	r24, 0x0130
    13a4:	8b 30       	cpi	r24, 0x0B	; 11
    13a6:	29 f4       	brne	.+10     	; 0x13b2 <MIDI_Host_USBTask+0x14>
    13a8:	84 81       	ldd	r24, Z+4	; 0x04
    13aa:	88 23       	and	r24, r24
    13ac:	11 f0       	breq	.+4      	; 0x13b2 <MIDI_Host_USBTask+0x14>
	  return;

	#if !defined(NO_CLASS_DRIVER_AUTOFLUSH)
	MIDI_Host_Flush(MIDIInterfaceInfo);
    13ae:	cf 01       	movw	r24, r30
    13b0:	db cf       	rjmp	.-74     	; 0x1368 <MIDI_Host_Flush>
    13b2:	08 95       	ret

000013b4 <MIDI_Host_ConfigurePipes>:
#include "MIDI.h"

uint8_t MIDI_Host_ConfigurePipes(USB_ClassInfo_MIDI_Host_t* const MIDIInterfaceInfo,
                                 uint16_t ConfigDescriptorSize,
                                 void* ConfigDescriptorData)
{
    13b4:	6f 92       	push	r6
    13b6:	7f 92       	push	r7
    13b8:	8f 92       	push	r8
    13ba:	9f 92       	push	r9
    13bc:	af 92       	push	r10
    13be:	bf 92       	push	r11
    13c0:	cf 92       	push	r12
    13c2:	df 92       	push	r13
    13c4:	ef 92       	push	r14
    13c6:	ff 92       	push	r15
    13c8:	0f 93       	push	r16
    13ca:	1f 93       	push	r17
    13cc:	df 93       	push	r29
    13ce:	cf 93       	push	r28
    13d0:	00 d0       	rcall	.+0      	; 0x13d2 <MIDI_Host_ConfigurePipes+0x1e>
    13d2:	00 d0       	rcall	.+0      	; 0x13d4 <MIDI_Host_ConfigurePipes+0x20>
    13d4:	0f 92       	push	r0
    13d6:	cd b7       	in	r28, 0x3d	; 61
    13d8:	de b7       	in	r29, 0x3e	; 62
    13da:	6c 01       	movw	r12, r24
    13dc:	7a 83       	std	Y+2, r23	; 0x02
    13de:	69 83       	std	Y+1, r22	; 0x01
    13e0:	5c 83       	std	Y+4, r21	; 0x04
    13e2:	4b 83       	std	Y+3, r20	; 0x03
	USB_Descriptor_Endpoint_t*  DataINEndpoint  = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint = NULL;
	USB_Descriptor_Interface_t* MIDIInterface   = NULL;

	memset(&MIDIInterfaceInfo->State, 0x00, sizeof(MIDIInterfaceInfo->State));
    13e4:	04 96       	adiw	r24, 0x04	; 4
    13e6:	fc 01       	movw	r30, r24
    13e8:	86 e0       	ldi	r24, 0x06	; 6
    13ea:	df 01       	movw	r26, r30
    13ec:	1d 92       	st	X+, r1
    13ee:	8a 95       	dec	r24
    13f0:	e9 f7       	brne	.-6      	; 0x13ec <MIDI_Host_ConfigurePipes+0x38>

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
    13f2:	eb 81       	ldd	r30, Y+3	; 0x03
    13f4:	fc 81       	ldd	r31, Y+4	; 0x04
    13f6:	81 81       	ldd	r24, Z+1	; 0x01
    13f8:	82 30       	cpi	r24, 0x02	; 2
    13fa:	11 f0       	breq	.+4      	; 0x1400 <MIDI_Host_ConfigurePipes+0x4c>
    13fc:	81 e0       	ldi	r24, 0x01	; 1
    13fe:	72 c0       	rjmp	.+228    	; 0x14e4 <MIDI_Host_ConfigurePipes+0x130>
    1400:	66 24       	eor	r6, r6
    1402:	77 24       	eor	r7, r7
    1404:	88 24       	eor	r8, r8
    1406:	99 24       	eor	r9, r9
    1408:	aa 24       	eor	r10, r10
    140a:	bb 24       	eor	r11, r11
	  return MIDI_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		if (!(MIDIInterface) ||
    140c:	83 e0       	ldi	r24, 0x03	; 3
    140e:	e8 2e       	mov	r14, r24
    1410:	f1 2c       	mov	r15, r1
    1412:	ec 0e       	add	r14, r28
    1414:	fd 1e       	adc	r15, r29
    1416:	8e 01       	movw	r16, r28
    1418:	0f 5f       	subi	r16, 0xFF	; 255
    141a:	1f 4f       	sbci	r17, 0xFF	; 255
    141c:	61 14       	cp	r6, r1
    141e:	71 04       	cpc	r7, r1
    1420:	39 f0       	breq	.+14     	; 0x1430 <MIDI_Host_ConfigurePipes+0x7c>
    1422:	c8 01       	movw	r24, r16
    1424:	b7 01       	movw	r22, r14
    1426:	46 e8       	ldi	r20, 0x86	; 134
    1428:	5a e0       	ldi	r21, 0x0A	; 10
    142a:	45 dd       	rcall	.-1398   	; 0xeb6 <USB_GetNextDescriptorComp>
    142c:	88 23       	and	r24, r24
    142e:	81 f0       	breq	.+32     	; 0x1450 <MIDI_Host_ConfigurePipes+0x9c>
		    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
		                              DCOMP_MIDI_Host_NextMIDIStreamingDataEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    1430:	c8 01       	movw	r24, r16
    1432:	b7 01       	movw	r22, r14
    1434:	41 e6       	ldi	r20, 0x61	; 97
    1436:	59 e0       	ldi	r21, 0x09	; 9
    1438:	3e dd       	rcall	.-1412   	; 0xeb6 <USB_GetNextDescriptorComp>
    143a:	88 23       	and	r24, r24
    143c:	11 f0       	breq	.+4      	; 0x1442 <MIDI_Host_ConfigurePipes+0x8e>
    143e:	82 e0       	ldi	r24, 0x02	; 2
    1440:	51 c0       	rjmp	.+162    	; 0x14e4 <MIDI_Host_ConfigurePipes+0x130>
			                              DCOMP_MIDI_Host_NextMIDIStreamingInterface) != DESCRIPTOR_SEARCH_COMP_Found)
			{
				return MIDI_ENUMERROR_NoCompatibleInterfaceFound;
			}

			MIDIInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);
    1442:	6b 80       	ldd	r6, Y+3	; 0x03
    1444:	7c 80       	ldd	r7, Y+4	; 0x04
    1446:	aa 24       	eor	r10, r10
    1448:	bb 24       	eor	r11, r11
    144a:	88 24       	eor	r8, r8
    144c:	99 24       	eor	r9, r9
    144e:	e6 cf       	rjmp	.-52     	; 0x141c <MIDI_Host_ConfigurePipes+0x68>
			DataOUTEndpoint = NULL;

			continue;
		}

		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Endpoint_t);
    1450:	eb 81       	ldd	r30, Y+3	; 0x03
    1452:	fc 81       	ldd	r31, Y+4	; 0x04

		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
    1454:	82 81       	ldd	r24, Z+2	; 0x02
    1456:	87 fd       	sbrc	r24, 7
    1458:	02 c0       	rjmp	.+4      	; 0x145e <MIDI_Host_ConfigurePipes+0xaa>
    145a:	5f 01       	movw	r10, r30
    145c:	01 c0       	rjmp	.+2      	; 0x1460 <MIDI_Host_ConfigurePipes+0xac>
    145e:	4f 01       	movw	r8, r30
	memset(&MIDIInterfaceInfo->State, 0x00, sizeof(MIDIInterfaceInfo->State));

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return MIDI_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
    1460:	81 14       	cp	r8, r1
    1462:	91 04       	cpc	r9, r1
    1464:	d9 f2       	breq	.-74     	; 0x141c <MIDI_Host_ConfigurePipes+0x68>
    1466:	a1 14       	cp	r10, r1
    1468:	b1 04       	cpc	r11, r1
    146a:	c1 f2       	breq	.-80     	; 0x141c <MIDI_Host_ConfigurePipes+0x68>
    146c:	91 e0       	ldi	r25, 0x01	; 1
		uint8_t  Type;
		uint8_t  Token;
		uint8_t  EndpointAddress;
		bool     DoubleBanked;

		if (PipeNum == MIDIInterfaceInfo->Config.DataINPipeNumber)
    146e:	f6 01       	movw	r30, r12
    1470:	80 81       	ld	r24, Z
    1472:	98 17       	cp	r25, r24
    1474:	61 f4       	brne	.+24     	; 0x148e <MIDI_Host_ConfigurePipes+0xda>
		{
			Size            = le16_to_cpu(DataINEndpoint->EndpointSize);
    1476:	d4 01       	movw	r26, r8
    1478:	14 96       	adiw	r26, 0x04	; 4
    147a:	0d 91       	ld	r16, X+
    147c:	1c 91       	ld	r17, X
    147e:	15 97       	sbiw	r26, 0x05	; 5
			EndpointAddress = DataINEndpoint->EndpointAddress;
    1480:	12 96       	adiw	r26, 0x02	; 2
    1482:	2c 91       	ld	r18, X
			Token           = PIPE_TOKEN_IN;
			Type            = EP_TYPE_BULK;
			DoubleBanked    = MIDIInterfaceInfo->Config.DataINPipeDoubleBank;
    1484:	81 81       	ldd	r24, Z+1	; 0x01

			MIDIInterfaceInfo->State.DataINPipeSize = DataINEndpoint->EndpointSize;
    1486:	17 83       	std	Z+7, r17	; 0x07
    1488:	06 83       	std	Z+6, r16	; 0x06
    148a:	40 e1       	ldi	r20, 0x10	; 16
    148c:	0f c0       	rjmp	.+30     	; 0x14ac <MIDI_Host_ConfigurePipes+0xf8>
		}
		else if (PipeNum == MIDIInterfaceInfo->Config.DataOUTPipeNumber)
    148e:	f6 01       	movw	r30, r12
    1490:	82 81       	ldd	r24, Z+2	; 0x02
    1492:	98 17       	cp	r25, r24
    1494:	d1 f4       	brne	.+52     	; 0x14ca <MIDI_Host_ConfigurePipes+0x116>
		{
			Size            = le16_to_cpu(DataOUTEndpoint->EndpointSize);
    1496:	d5 01       	movw	r26, r10
    1498:	14 96       	adiw	r26, 0x04	; 4
    149a:	0d 91       	ld	r16, X+
    149c:	1c 91       	ld	r17, X
    149e:	15 97       	sbiw	r26, 0x05	; 5
			EndpointAddress = DataOUTEndpoint->EndpointAddress;
    14a0:	12 96       	adiw	r26, 0x02	; 2
    14a2:	2c 91       	ld	r18, X
			Token           = PIPE_TOKEN_OUT;
			Type            = EP_TYPE_BULK;
			DoubleBanked    = MIDIInterfaceInfo->Config.DataOUTPipeDoubleBank;
    14a4:	83 81       	ldd	r24, Z+3	; 0x03

			MIDIInterfaceInfo->State.DataOUTPipeSize = DataOUTEndpoint->EndpointSize;
    14a6:	11 87       	std	Z+9, r17	; 0x09
    14a8:	00 87       	std	Z+8, r16	; 0x08
    14aa:	40 e2       	ldi	r20, 0x20	; 32
		else
		{
			continue;
		}

		if (!(Pipe_ConfigurePipe(PipeNum, Type, Token, EndpointAddress, Size,
    14ac:	88 23       	and	r24, r24
    14ae:	11 f4       	brne	.+4      	; 0x14b4 <MIDI_Host_ConfigurePipes+0x100>
    14b0:	30 e0       	ldi	r19, 0x00	; 0
    14b2:	01 c0       	rjmp	.+2      	; 0x14b6 <MIDI_Host_ConfigurePipes+0x102>
    14b4:	34 e0       	ldi	r19, 0x04	; 4
    14b6:	89 2f       	mov	r24, r25
    14b8:	62 e0       	ldi	r22, 0x02	; 2
    14ba:	e3 2e       	mov	r14, r19
    14bc:	9d 83       	std	Y+5, r25	; 0x05
    14be:	79 da       	rcall	.-2830   	; 0x9b2 <Pipe_ConfigurePipe>
    14c0:	9d 81       	ldd	r25, Y+5	; 0x05
    14c2:	88 23       	and	r24, r24
    14c4:	11 f4       	brne	.+4      	; 0x14ca <MIDI_Host_ConfigurePipes+0x116>
    14c6:	83 e0       	ldi	r24, 0x03	; 3
    14c8:	0d c0       	rjmp	.+26     	; 0x14e4 <MIDI_Host_ConfigurePipes+0x130>
		  DataINEndpoint  = EndpointData;
		else
		  DataOUTEndpoint = EndpointData;
	}

	for (uint8_t PipeNum = 1; PipeNum < PIPE_TOTAL_PIPES; PipeNum++)
    14ca:	9f 5f       	subi	r25, 0xFF	; 255
    14cc:	97 30       	cpi	r25, 0x07	; 7
    14ce:	79 f6       	brne	.-98     	; 0x146e <MIDI_Host_ConfigurePipes+0xba>
		{
			return MIDI_ENUMERROR_PipeConfigurationFailed;
		}
	}

	MIDIInterfaceInfo->State.InterfaceNumber = MIDIInterface->InterfaceNumber;
    14d0:	f3 01       	movw	r30, r6
    14d2:	82 81       	ldd	r24, Z+2	; 0x02
    14d4:	d6 01       	movw	r26, r12
    14d6:	15 96       	adiw	r26, 0x05	; 5
    14d8:	8c 93       	st	X, r24
    14da:	15 97       	sbiw	r26, 0x05	; 5
	MIDIInterfaceInfo->State.IsActive = true;
    14dc:	81 e0       	ldi	r24, 0x01	; 1
    14de:	14 96       	adiw	r26, 0x04	; 4
    14e0:	8c 93       	st	X, r24
    14e2:	80 e0       	ldi	r24, 0x00	; 0

	return MIDI_ENUMERROR_NoError;
}
    14e4:	0f 90       	pop	r0
    14e6:	0f 90       	pop	r0
    14e8:	0f 90       	pop	r0
    14ea:	0f 90       	pop	r0
    14ec:	0f 90       	pop	r0
    14ee:	cf 91       	pop	r28
    14f0:	df 91       	pop	r29
    14f2:	1f 91       	pop	r17
    14f4:	0f 91       	pop	r16
    14f6:	ff 90       	pop	r15
    14f8:	ef 90       	pop	r14
    14fa:	df 90       	pop	r13
    14fc:	cf 90       	pop	r12
    14fe:	bf 90       	pop	r11
    1500:	af 90       	pop	r10
    1502:	9f 90       	pop	r9
    1504:	8f 90       	pop	r8
    1506:	7f 90       	pop	r7
    1508:	6f 90       	pop	r6
    150a:	08 95       	ret

0000150c <DCOMP_MIDI_Host_NextMIDIStreamingDataEndpoint>:

	return DESCRIPTOR_SEARCH_NotFound;
}

static uint8_t DCOMP_MIDI_Host_NextMIDIStreamingDataEndpoint(void* const CurrentDescriptor)
{
    150c:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Endpoint)
    150e:	81 81       	ldd	r24, Z+1	; 0x01
    1510:	85 30       	cpi	r24, 0x05	; 5
    1512:	49 f4       	brne	.+18     	; 0x1526 <DCOMP_MIDI_Host_NextMIDIStreamingDataEndpoint+0x1a>
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		uint8_t EndpointType = (Endpoint->Attributes & EP_TYPE_MASK);

		if ((EndpointType == EP_TYPE_BULK) && !(Pipe_IsEndpointBound(Endpoint->EndpointAddress)))
    1514:	83 81       	ldd	r24, Z+3	; 0x03
    1516:	83 70       	andi	r24, 0x03	; 3
    1518:	82 30       	cpi	r24, 0x02	; 2
    151a:	49 f4       	brne	.+18     	; 0x152e <DCOMP_MIDI_Host_NextMIDIStreamingDataEndpoint+0x22>
    151c:	82 81       	ldd	r24, Z+2	; 0x02
    151e:	bb da       	rcall	.-2698   	; 0xa96 <Pipe_IsEndpointBound>
    1520:	88 23       	and	r24, r24
    1522:	29 f4       	brne	.+10     	; 0x152e <DCOMP_MIDI_Host_NextMIDIStreamingDataEndpoint+0x22>
    1524:	08 95       	ret
		  return DESCRIPTOR_SEARCH_Found;
	}
	else if (Header->Type == DTYPE_Interface)
    1526:	84 30       	cpi	r24, 0x04	; 4
    1528:	11 f4       	brne	.+4      	; 0x152e <DCOMP_MIDI_Host_NextMIDIStreamingDataEndpoint+0x22>
    152a:	81 e0       	ldi	r24, 0x01	; 1
    152c:	08 95       	ret
    152e:	82 e0       	ldi	r24, 0x02	; 2
	{
		return DESCRIPTOR_SEARCH_Fail;
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    1530:	08 95       	ret

00001532 <Serial_putchar>:

FILE USARTSerialStream;

int Serial_putchar(char DataByte,
                   FILE *Stream)
{
    1532:	98 2f       	mov	r25, r24
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
    1534:	80 91 c8 00 	lds	r24, 0x00C8
    1538:	85 ff       	sbrs	r24, 5
    153a:	fc cf       	rjmp	.-8      	; 0x1534 <Serial_putchar+0x2>
				UDR1 = DataByte;
    153c:	90 93 ce 00 	sts	0x00CE, r25
	(void)Stream;

	Serial_SendByte(DataByte);
	return 0;
}
    1540:	80 e0       	ldi	r24, 0x00	; 0
    1542:	90 e0       	ldi	r25, 0x00	; 0
    1544:	08 95       	ret

00001546 <Serial_getchar>:
			 *  \return Boolean \c true if a character has been received, \c false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    1546:	80 91 c8 00 	lds	r24, 0x00C8

int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    154a:	87 fd       	sbrc	r24, 7
    154c:	03 c0       	rjmp	.+6      	; 0x1554 <Serial_getchar+0xe>
    154e:	2e ef       	ldi	r18, 0xFE	; 254
    1550:	3f ef       	ldi	r19, 0xFF	; 255
    1552:	0b c0       	rjmp	.+22     	; 0x156a <Serial_getchar+0x24>
    1554:	80 91 c8 00 	lds	r24, 0x00C8
			 *  \return Next byte received from the USART, or a negative value if no byte has been received.
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
    1558:	87 fd       	sbrc	r24, 7
    155a:	03 c0       	rjmp	.+6      	; 0x1562 <Serial_getchar+0x1c>
    155c:	2f ef       	ldi	r18, 0xFF	; 255
    155e:	3f ef       	ldi	r19, 0xFF	; 255
    1560:	04 c0       	rjmp	.+8      	; 0x156a <Serial_getchar+0x24>
				  return -1;
				
				return UDR1;
    1562:	80 91 ce 00 	lds	r24, 0x00CE
    1566:	28 2f       	mov	r18, r24
    1568:	30 e0       	ldi	r19, 0x00	; 0
	  return _FDEV_EOF;

	return Serial_ReceiveByte();
}
    156a:	c9 01       	movw	r24, r18
    156c:	08 95       	ret

0000156e <printf_P>:
    156e:	df 93       	push	r29
    1570:	cf 93       	push	r28
    1572:	cd b7       	in	r28, 0x3d	; 61
    1574:	de b7       	in	r29, 0x3e	; 62
    1576:	fe 01       	movw	r30, r28
    1578:	35 96       	adiw	r30, 0x05	; 5
    157a:	61 91       	ld	r22, Z+
    157c:	71 91       	ld	r23, Z+
    157e:	a0 91 41 01 	lds	r26, 0x0141
    1582:	b0 91 42 01 	lds	r27, 0x0142
    1586:	13 96       	adiw	r26, 0x03	; 3
    1588:	8c 91       	ld	r24, X
    158a:	13 97       	sbiw	r26, 0x03	; 3
    158c:	88 60       	ori	r24, 0x08	; 8
    158e:	13 96       	adiw	r26, 0x03	; 3
    1590:	8c 93       	st	X, r24
    1592:	80 91 41 01 	lds	r24, 0x0141
    1596:	90 91 42 01 	lds	r25, 0x0142
    159a:	af 01       	movw	r20, r30
    159c:	3f d0       	rcall	.+126    	; 0x161c <vfprintf>
    159e:	e0 91 41 01 	lds	r30, 0x0141
    15a2:	f0 91 42 01 	lds	r31, 0x0142
    15a6:	23 81       	ldd	r18, Z+3	; 0x03
    15a8:	27 7f       	andi	r18, 0xF7	; 247
    15aa:	23 83       	std	Z+3, r18	; 0x03
    15ac:	cf 91       	pop	r28
    15ae:	df 91       	pop	r29
    15b0:	08 95       	ret

000015b2 <puts_P>:
    15b2:	0f 93       	push	r16
    15b4:	1f 93       	push	r17
    15b6:	cf 93       	push	r28
    15b8:	df 93       	push	r29
    15ba:	ec 01       	movw	r28, r24
    15bc:	e0 91 41 01 	lds	r30, 0x0141
    15c0:	f0 91 42 01 	lds	r31, 0x0142
    15c4:	83 81       	ldd	r24, Z+3	; 0x03
    15c6:	81 ff       	sbrs	r24, 1
    15c8:	21 c0       	rjmp	.+66     	; 0x160c <puts_P+0x5a>
    15ca:	00 e0       	ldi	r16, 0x00	; 0
    15cc:	10 e0       	ldi	r17, 0x00	; 0
    15ce:	0e c0       	rjmp	.+28     	; 0x15ec <puts_P+0x3a>
    15d0:	e0 91 41 01 	lds	r30, 0x0141
    15d4:	f0 91 42 01 	lds	r31, 0x0142
    15d8:	20 85       	ldd	r18, Z+8	; 0x08
    15da:	31 85       	ldd	r19, Z+9	; 0x09
    15dc:	bf 01       	movw	r22, r30
    15de:	f9 01       	movw	r30, r18
    15e0:	09 95       	icall
    15e2:	89 2b       	or	r24, r25
    15e4:	11 f0       	breq	.+4      	; 0x15ea <puts_P+0x38>
    15e6:	0f ef       	ldi	r16, 0xFF	; 255
    15e8:	1f ef       	ldi	r17, 0xFF	; 255
    15ea:	21 96       	adiw	r28, 0x01	; 1
    15ec:	fe 01       	movw	r30, r28
    15ee:	84 91       	lpm	r24, Z+
    15f0:	88 23       	and	r24, r24
    15f2:	71 f7       	brne	.-36     	; 0x15d0 <puts_P+0x1e>
    15f4:	e0 91 41 01 	lds	r30, 0x0141
    15f8:	f0 91 42 01 	lds	r31, 0x0142
    15fc:	20 85       	ldd	r18, Z+8	; 0x08
    15fe:	31 85       	ldd	r19, Z+9	; 0x09
    1600:	8a e0       	ldi	r24, 0x0A	; 10
    1602:	bf 01       	movw	r22, r30
    1604:	f9 01       	movw	r30, r18
    1606:	09 95       	icall
    1608:	89 2b       	or	r24, r25
    160a:	11 f0       	breq	.+4      	; 0x1610 <puts_P+0x5e>
    160c:	0f ef       	ldi	r16, 0xFF	; 255
    160e:	1f ef       	ldi	r17, 0xFF	; 255
    1610:	c8 01       	movw	r24, r16
    1612:	df 91       	pop	r29
    1614:	cf 91       	pop	r28
    1616:	1f 91       	pop	r17
    1618:	0f 91       	pop	r16
    161a:	08 95       	ret

0000161c <vfprintf>:
    161c:	2f 92       	push	r2
    161e:	3f 92       	push	r3
    1620:	4f 92       	push	r4
    1622:	5f 92       	push	r5
    1624:	6f 92       	push	r6
    1626:	7f 92       	push	r7
    1628:	8f 92       	push	r8
    162a:	9f 92       	push	r9
    162c:	af 92       	push	r10
    162e:	bf 92       	push	r11
    1630:	cf 92       	push	r12
    1632:	df 92       	push	r13
    1634:	ef 92       	push	r14
    1636:	ff 92       	push	r15
    1638:	0f 93       	push	r16
    163a:	1f 93       	push	r17
    163c:	df 93       	push	r29
    163e:	cf 93       	push	r28
    1640:	cd b7       	in	r28, 0x3d	; 61
    1642:	de b7       	in	r29, 0x3e	; 62
    1644:	2b 97       	sbiw	r28, 0x0b	; 11
    1646:	0f b6       	in	r0, 0x3f	; 63
    1648:	f8 94       	cli
    164a:	de bf       	out	0x3e, r29	; 62
    164c:	0f be       	out	0x3f, r0	; 63
    164e:	cd bf       	out	0x3d, r28	; 61
    1650:	3c 01       	movw	r6, r24
    1652:	2b 01       	movw	r4, r22
    1654:	5a 01       	movw	r10, r20
    1656:	fc 01       	movw	r30, r24
    1658:	17 82       	std	Z+7, r1	; 0x07
    165a:	16 82       	std	Z+6, r1	; 0x06
    165c:	83 81       	ldd	r24, Z+3	; 0x03
    165e:	81 fd       	sbrc	r24, 1
    1660:	03 c0       	rjmp	.+6      	; 0x1668 <vfprintf+0x4c>
    1662:	6f ef       	ldi	r22, 0xFF	; 255
    1664:	7f ef       	ldi	r23, 0xFF	; 255
    1666:	b9 c1       	rjmp	.+882    	; 0x19da <vfprintf+0x3be>
    1668:	9a e0       	ldi	r25, 0x0A	; 10
    166a:	89 2e       	mov	r8, r25
    166c:	1e 01       	movw	r2, r28
    166e:	08 94       	sec
    1670:	21 1c       	adc	r2, r1
    1672:	31 1c       	adc	r3, r1
    1674:	f3 01       	movw	r30, r6
    1676:	23 81       	ldd	r18, Z+3	; 0x03
    1678:	f2 01       	movw	r30, r4
    167a:	23 fd       	sbrc	r18, 3
    167c:	85 91       	lpm	r24, Z+
    167e:	23 ff       	sbrs	r18, 3
    1680:	81 91       	ld	r24, Z+
    1682:	2f 01       	movw	r4, r30
    1684:	88 23       	and	r24, r24
    1686:	09 f4       	brne	.+2      	; 0x168a <vfprintf+0x6e>
    1688:	a5 c1       	rjmp	.+842    	; 0x19d4 <vfprintf+0x3b8>
    168a:	85 32       	cpi	r24, 0x25	; 37
    168c:	39 f4       	brne	.+14     	; 0x169c <vfprintf+0x80>
    168e:	23 fd       	sbrc	r18, 3
    1690:	85 91       	lpm	r24, Z+
    1692:	23 ff       	sbrs	r18, 3
    1694:	81 91       	ld	r24, Z+
    1696:	2f 01       	movw	r4, r30
    1698:	85 32       	cpi	r24, 0x25	; 37
    169a:	21 f4       	brne	.+8      	; 0x16a4 <vfprintf+0x88>
    169c:	90 e0       	ldi	r25, 0x00	; 0
    169e:	b3 01       	movw	r22, r6
    16a0:	cc d1       	rcall	.+920    	; 0x1a3a <fputc>
    16a2:	e8 cf       	rjmp	.-48     	; 0x1674 <vfprintf+0x58>
    16a4:	98 2f       	mov	r25, r24
    16a6:	ff 24       	eor	r15, r15
    16a8:	ee 24       	eor	r14, r14
    16aa:	99 24       	eor	r9, r9
    16ac:	ff e1       	ldi	r31, 0x1F	; 31
    16ae:	ff 15       	cp	r31, r15
    16b0:	d0 f0       	brcs	.+52     	; 0x16e6 <vfprintf+0xca>
    16b2:	9b 32       	cpi	r25, 0x2B	; 43
    16b4:	69 f0       	breq	.+26     	; 0x16d0 <vfprintf+0xb4>
    16b6:	9c 32       	cpi	r25, 0x2C	; 44
    16b8:	28 f4       	brcc	.+10     	; 0x16c4 <vfprintf+0xa8>
    16ba:	90 32       	cpi	r25, 0x20	; 32
    16bc:	59 f0       	breq	.+22     	; 0x16d4 <vfprintf+0xb8>
    16be:	93 32       	cpi	r25, 0x23	; 35
    16c0:	91 f4       	brne	.+36     	; 0x16e6 <vfprintf+0xca>
    16c2:	0e c0       	rjmp	.+28     	; 0x16e0 <vfprintf+0xc4>
    16c4:	9d 32       	cpi	r25, 0x2D	; 45
    16c6:	49 f0       	breq	.+18     	; 0x16da <vfprintf+0xbe>
    16c8:	90 33       	cpi	r25, 0x30	; 48
    16ca:	69 f4       	brne	.+26     	; 0x16e6 <vfprintf+0xca>
    16cc:	41 e0       	ldi	r20, 0x01	; 1
    16ce:	24 c0       	rjmp	.+72     	; 0x1718 <vfprintf+0xfc>
    16d0:	52 e0       	ldi	r21, 0x02	; 2
    16d2:	f5 2a       	or	r15, r21
    16d4:	84 e0       	ldi	r24, 0x04	; 4
    16d6:	f8 2a       	or	r15, r24
    16d8:	28 c0       	rjmp	.+80     	; 0x172a <vfprintf+0x10e>
    16da:	98 e0       	ldi	r25, 0x08	; 8
    16dc:	f9 2a       	or	r15, r25
    16de:	25 c0       	rjmp	.+74     	; 0x172a <vfprintf+0x10e>
    16e0:	e0 e1       	ldi	r30, 0x10	; 16
    16e2:	fe 2a       	or	r15, r30
    16e4:	22 c0       	rjmp	.+68     	; 0x172a <vfprintf+0x10e>
    16e6:	f7 fc       	sbrc	r15, 7
    16e8:	29 c0       	rjmp	.+82     	; 0x173c <vfprintf+0x120>
    16ea:	89 2f       	mov	r24, r25
    16ec:	80 53       	subi	r24, 0x30	; 48
    16ee:	8a 30       	cpi	r24, 0x0A	; 10
    16f0:	70 f4       	brcc	.+28     	; 0x170e <vfprintf+0xf2>
    16f2:	f6 fe       	sbrs	r15, 6
    16f4:	05 c0       	rjmp	.+10     	; 0x1700 <vfprintf+0xe4>
    16f6:	98 9c       	mul	r9, r8
    16f8:	90 2c       	mov	r9, r0
    16fa:	11 24       	eor	r1, r1
    16fc:	98 0e       	add	r9, r24
    16fe:	15 c0       	rjmp	.+42     	; 0x172a <vfprintf+0x10e>
    1700:	e8 9c       	mul	r14, r8
    1702:	e0 2c       	mov	r14, r0
    1704:	11 24       	eor	r1, r1
    1706:	e8 0e       	add	r14, r24
    1708:	f0 e2       	ldi	r31, 0x20	; 32
    170a:	ff 2a       	or	r15, r31
    170c:	0e c0       	rjmp	.+28     	; 0x172a <vfprintf+0x10e>
    170e:	9e 32       	cpi	r25, 0x2E	; 46
    1710:	29 f4       	brne	.+10     	; 0x171c <vfprintf+0x100>
    1712:	f6 fc       	sbrc	r15, 6
    1714:	5f c1       	rjmp	.+702    	; 0x19d4 <vfprintf+0x3b8>
    1716:	40 e4       	ldi	r20, 0x40	; 64
    1718:	f4 2a       	or	r15, r20
    171a:	07 c0       	rjmp	.+14     	; 0x172a <vfprintf+0x10e>
    171c:	9c 36       	cpi	r25, 0x6C	; 108
    171e:	19 f4       	brne	.+6      	; 0x1726 <vfprintf+0x10a>
    1720:	50 e8       	ldi	r21, 0x80	; 128
    1722:	f5 2a       	or	r15, r21
    1724:	02 c0       	rjmp	.+4      	; 0x172a <vfprintf+0x10e>
    1726:	98 36       	cpi	r25, 0x68	; 104
    1728:	49 f4       	brne	.+18     	; 0x173c <vfprintf+0x120>
    172a:	f2 01       	movw	r30, r4
    172c:	23 fd       	sbrc	r18, 3
    172e:	95 91       	lpm	r25, Z+
    1730:	23 ff       	sbrs	r18, 3
    1732:	91 91       	ld	r25, Z+
    1734:	2f 01       	movw	r4, r30
    1736:	99 23       	and	r25, r25
    1738:	09 f0       	breq	.+2      	; 0x173c <vfprintf+0x120>
    173a:	b8 cf       	rjmp	.-144    	; 0x16ac <vfprintf+0x90>
    173c:	89 2f       	mov	r24, r25
    173e:	85 54       	subi	r24, 0x45	; 69
    1740:	83 30       	cpi	r24, 0x03	; 3
    1742:	18 f0       	brcs	.+6      	; 0x174a <vfprintf+0x12e>
    1744:	80 52       	subi	r24, 0x20	; 32
    1746:	83 30       	cpi	r24, 0x03	; 3
    1748:	38 f4       	brcc	.+14     	; 0x1758 <vfprintf+0x13c>
    174a:	44 e0       	ldi	r20, 0x04	; 4
    174c:	50 e0       	ldi	r21, 0x00	; 0
    174e:	a4 0e       	add	r10, r20
    1750:	b5 1e       	adc	r11, r21
    1752:	5f e3       	ldi	r21, 0x3F	; 63
    1754:	59 83       	std	Y+1, r21	; 0x01
    1756:	0f c0       	rjmp	.+30     	; 0x1776 <vfprintf+0x15a>
    1758:	93 36       	cpi	r25, 0x63	; 99
    175a:	31 f0       	breq	.+12     	; 0x1768 <vfprintf+0x14c>
    175c:	93 37       	cpi	r25, 0x73	; 115
    175e:	79 f0       	breq	.+30     	; 0x177e <vfprintf+0x162>
    1760:	93 35       	cpi	r25, 0x53	; 83
    1762:	09 f0       	breq	.+2      	; 0x1766 <vfprintf+0x14a>
    1764:	52 c0       	rjmp	.+164    	; 0x180a <vfprintf+0x1ee>
    1766:	1f c0       	rjmp	.+62     	; 0x17a6 <vfprintf+0x18a>
    1768:	f5 01       	movw	r30, r10
    176a:	80 81       	ld	r24, Z
    176c:	89 83       	std	Y+1, r24	; 0x01
    176e:	42 e0       	ldi	r20, 0x02	; 2
    1770:	50 e0       	ldi	r21, 0x00	; 0
    1772:	a4 0e       	add	r10, r20
    1774:	b5 1e       	adc	r11, r21
    1776:	61 01       	movw	r12, r2
    1778:	01 e0       	ldi	r16, 0x01	; 1
    177a:	10 e0       	ldi	r17, 0x00	; 0
    177c:	11 c0       	rjmp	.+34     	; 0x17a0 <vfprintf+0x184>
    177e:	f5 01       	movw	r30, r10
    1780:	c0 80       	ld	r12, Z
    1782:	d1 80       	ldd	r13, Z+1	; 0x01
    1784:	f6 fc       	sbrc	r15, 6
    1786:	03 c0       	rjmp	.+6      	; 0x178e <vfprintf+0x172>
    1788:	6f ef       	ldi	r22, 0xFF	; 255
    178a:	7f ef       	ldi	r23, 0xFF	; 255
    178c:	02 c0       	rjmp	.+4      	; 0x1792 <vfprintf+0x176>
    178e:	69 2d       	mov	r22, r9
    1790:	70 e0       	ldi	r23, 0x00	; 0
    1792:	42 e0       	ldi	r20, 0x02	; 2
    1794:	50 e0       	ldi	r21, 0x00	; 0
    1796:	a4 0e       	add	r10, r20
    1798:	b5 1e       	adc	r11, r21
    179a:	c6 01       	movw	r24, r12
    179c:	43 d1       	rcall	.+646    	; 0x1a24 <strnlen>
    179e:	8c 01       	movw	r16, r24
    17a0:	5f e7       	ldi	r21, 0x7F	; 127
    17a2:	f5 22       	and	r15, r21
    17a4:	13 c0       	rjmp	.+38     	; 0x17cc <vfprintf+0x1b0>
    17a6:	f5 01       	movw	r30, r10
    17a8:	c0 80       	ld	r12, Z
    17aa:	d1 80       	ldd	r13, Z+1	; 0x01
    17ac:	f6 fc       	sbrc	r15, 6
    17ae:	03 c0       	rjmp	.+6      	; 0x17b6 <vfprintf+0x19a>
    17b0:	6f ef       	ldi	r22, 0xFF	; 255
    17b2:	7f ef       	ldi	r23, 0xFF	; 255
    17b4:	02 c0       	rjmp	.+4      	; 0x17ba <vfprintf+0x19e>
    17b6:	69 2d       	mov	r22, r9
    17b8:	70 e0       	ldi	r23, 0x00	; 0
    17ba:	42 e0       	ldi	r20, 0x02	; 2
    17bc:	50 e0       	ldi	r21, 0x00	; 0
    17be:	a4 0e       	add	r10, r20
    17c0:	b5 1e       	adc	r11, r21
    17c2:	c6 01       	movw	r24, r12
    17c4:	24 d1       	rcall	.+584    	; 0x1a0e <strnlen_P>
    17c6:	8c 01       	movw	r16, r24
    17c8:	50 e8       	ldi	r21, 0x80	; 128
    17ca:	f5 2a       	or	r15, r21
    17cc:	f3 fe       	sbrs	r15, 3
    17ce:	06 c0       	rjmp	.+12     	; 0x17dc <vfprintf+0x1c0>
    17d0:	18 c0       	rjmp	.+48     	; 0x1802 <vfprintf+0x1e6>
    17d2:	80 e2       	ldi	r24, 0x20	; 32
    17d4:	90 e0       	ldi	r25, 0x00	; 0
    17d6:	b3 01       	movw	r22, r6
    17d8:	30 d1       	rcall	.+608    	; 0x1a3a <fputc>
    17da:	ea 94       	dec	r14
    17dc:	8e 2d       	mov	r24, r14
    17de:	90 e0       	ldi	r25, 0x00	; 0
    17e0:	08 17       	cp	r16, r24
    17e2:	19 07       	cpc	r17, r25
    17e4:	b0 f3       	brcs	.-20     	; 0x17d2 <vfprintf+0x1b6>
    17e6:	0d c0       	rjmp	.+26     	; 0x1802 <vfprintf+0x1e6>
    17e8:	f6 01       	movw	r30, r12
    17ea:	f7 fc       	sbrc	r15, 7
    17ec:	85 91       	lpm	r24, Z+
    17ee:	f7 fe       	sbrs	r15, 7
    17f0:	81 91       	ld	r24, Z+
    17f2:	6f 01       	movw	r12, r30
    17f4:	90 e0       	ldi	r25, 0x00	; 0
    17f6:	b3 01       	movw	r22, r6
    17f8:	20 d1       	rcall	.+576    	; 0x1a3a <fputc>
    17fa:	e1 10       	cpse	r14, r1
    17fc:	ea 94       	dec	r14
    17fe:	01 50       	subi	r16, 0x01	; 1
    1800:	10 40       	sbci	r17, 0x00	; 0
    1802:	01 15       	cp	r16, r1
    1804:	11 05       	cpc	r17, r1
    1806:	81 f7       	brne	.-32     	; 0x17e8 <vfprintf+0x1cc>
    1808:	e2 c0       	rjmp	.+452    	; 0x19ce <vfprintf+0x3b2>
    180a:	94 36       	cpi	r25, 0x64	; 100
    180c:	11 f0       	breq	.+4      	; 0x1812 <vfprintf+0x1f6>
    180e:	99 36       	cpi	r25, 0x69	; 105
    1810:	61 f5       	brne	.+88     	; 0x186a <vfprintf+0x24e>
    1812:	f7 fe       	sbrs	r15, 7
    1814:	08 c0       	rjmp	.+16     	; 0x1826 <vfprintf+0x20a>
    1816:	f5 01       	movw	r30, r10
    1818:	20 81       	ld	r18, Z
    181a:	31 81       	ldd	r19, Z+1	; 0x01
    181c:	42 81       	ldd	r20, Z+2	; 0x02
    181e:	53 81       	ldd	r21, Z+3	; 0x03
    1820:	84 e0       	ldi	r24, 0x04	; 4
    1822:	90 e0       	ldi	r25, 0x00	; 0
    1824:	0a c0       	rjmp	.+20     	; 0x183a <vfprintf+0x21e>
    1826:	f5 01       	movw	r30, r10
    1828:	80 81       	ld	r24, Z
    182a:	91 81       	ldd	r25, Z+1	; 0x01
    182c:	9c 01       	movw	r18, r24
    182e:	44 27       	eor	r20, r20
    1830:	37 fd       	sbrc	r19, 7
    1832:	40 95       	com	r20
    1834:	54 2f       	mov	r21, r20
    1836:	82 e0       	ldi	r24, 0x02	; 2
    1838:	90 e0       	ldi	r25, 0x00	; 0
    183a:	a8 0e       	add	r10, r24
    183c:	b9 1e       	adc	r11, r25
    183e:	9f e6       	ldi	r25, 0x6F	; 111
    1840:	f9 22       	and	r15, r25
    1842:	57 ff       	sbrs	r21, 7
    1844:	09 c0       	rjmp	.+18     	; 0x1858 <vfprintf+0x23c>
    1846:	50 95       	com	r21
    1848:	40 95       	com	r20
    184a:	30 95       	com	r19
    184c:	21 95       	neg	r18
    184e:	3f 4f       	sbci	r19, 0xFF	; 255
    1850:	4f 4f       	sbci	r20, 0xFF	; 255
    1852:	5f 4f       	sbci	r21, 0xFF	; 255
    1854:	e0 e8       	ldi	r30, 0x80	; 128
    1856:	fe 2a       	or	r15, r30
    1858:	ca 01       	movw	r24, r20
    185a:	b9 01       	movw	r22, r18
    185c:	a1 01       	movw	r20, r2
    185e:	2a e0       	ldi	r18, 0x0A	; 10
    1860:	30 e0       	ldi	r19, 0x00	; 0
    1862:	17 d1       	rcall	.+558    	; 0x1a92 <__ultoa_invert>
    1864:	d8 2e       	mov	r13, r24
    1866:	d2 18       	sub	r13, r2
    1868:	3f c0       	rjmp	.+126    	; 0x18e8 <vfprintf+0x2cc>
    186a:	95 37       	cpi	r25, 0x75	; 117
    186c:	29 f4       	brne	.+10     	; 0x1878 <vfprintf+0x25c>
    186e:	1f 2d       	mov	r17, r15
    1870:	1f 7e       	andi	r17, 0xEF	; 239
    1872:	2a e0       	ldi	r18, 0x0A	; 10
    1874:	30 e0       	ldi	r19, 0x00	; 0
    1876:	1d c0       	rjmp	.+58     	; 0x18b2 <vfprintf+0x296>
    1878:	1f 2d       	mov	r17, r15
    187a:	19 7f       	andi	r17, 0xF9	; 249
    187c:	9f 36       	cpi	r25, 0x6F	; 111
    187e:	61 f0       	breq	.+24     	; 0x1898 <vfprintf+0x27c>
    1880:	90 37       	cpi	r25, 0x70	; 112
    1882:	20 f4       	brcc	.+8      	; 0x188c <vfprintf+0x270>
    1884:	98 35       	cpi	r25, 0x58	; 88
    1886:	09 f0       	breq	.+2      	; 0x188a <vfprintf+0x26e>
    1888:	a5 c0       	rjmp	.+330    	; 0x19d4 <vfprintf+0x3b8>
    188a:	0f c0       	rjmp	.+30     	; 0x18aa <vfprintf+0x28e>
    188c:	90 37       	cpi	r25, 0x70	; 112
    188e:	39 f0       	breq	.+14     	; 0x189e <vfprintf+0x282>
    1890:	98 37       	cpi	r25, 0x78	; 120
    1892:	09 f0       	breq	.+2      	; 0x1896 <vfprintf+0x27a>
    1894:	9f c0       	rjmp	.+318    	; 0x19d4 <vfprintf+0x3b8>
    1896:	04 c0       	rjmp	.+8      	; 0x18a0 <vfprintf+0x284>
    1898:	28 e0       	ldi	r18, 0x08	; 8
    189a:	30 e0       	ldi	r19, 0x00	; 0
    189c:	0a c0       	rjmp	.+20     	; 0x18b2 <vfprintf+0x296>
    189e:	10 61       	ori	r17, 0x10	; 16
    18a0:	14 fd       	sbrc	r17, 4
    18a2:	14 60       	ori	r17, 0x04	; 4
    18a4:	20 e1       	ldi	r18, 0x10	; 16
    18a6:	30 e0       	ldi	r19, 0x00	; 0
    18a8:	04 c0       	rjmp	.+8      	; 0x18b2 <vfprintf+0x296>
    18aa:	14 fd       	sbrc	r17, 4
    18ac:	16 60       	ori	r17, 0x06	; 6
    18ae:	20 e1       	ldi	r18, 0x10	; 16
    18b0:	32 e0       	ldi	r19, 0x02	; 2
    18b2:	17 ff       	sbrs	r17, 7
    18b4:	08 c0       	rjmp	.+16     	; 0x18c6 <vfprintf+0x2aa>
    18b6:	f5 01       	movw	r30, r10
    18b8:	60 81       	ld	r22, Z
    18ba:	71 81       	ldd	r23, Z+1	; 0x01
    18bc:	82 81       	ldd	r24, Z+2	; 0x02
    18be:	93 81       	ldd	r25, Z+3	; 0x03
    18c0:	44 e0       	ldi	r20, 0x04	; 4
    18c2:	50 e0       	ldi	r21, 0x00	; 0
    18c4:	08 c0       	rjmp	.+16     	; 0x18d6 <vfprintf+0x2ba>
    18c6:	f5 01       	movw	r30, r10
    18c8:	80 81       	ld	r24, Z
    18ca:	91 81       	ldd	r25, Z+1	; 0x01
    18cc:	bc 01       	movw	r22, r24
    18ce:	80 e0       	ldi	r24, 0x00	; 0
    18d0:	90 e0       	ldi	r25, 0x00	; 0
    18d2:	42 e0       	ldi	r20, 0x02	; 2
    18d4:	50 e0       	ldi	r21, 0x00	; 0
    18d6:	a4 0e       	add	r10, r20
    18d8:	b5 1e       	adc	r11, r21
    18da:	a1 01       	movw	r20, r2
    18dc:	da d0       	rcall	.+436    	; 0x1a92 <__ultoa_invert>
    18de:	d8 2e       	mov	r13, r24
    18e0:	d2 18       	sub	r13, r2
    18e2:	8f e7       	ldi	r24, 0x7F	; 127
    18e4:	f8 2e       	mov	r15, r24
    18e6:	f1 22       	and	r15, r17
    18e8:	f6 fe       	sbrs	r15, 6
    18ea:	0b c0       	rjmp	.+22     	; 0x1902 <vfprintf+0x2e6>
    18ec:	5e ef       	ldi	r21, 0xFE	; 254
    18ee:	f5 22       	and	r15, r21
    18f0:	d9 14       	cp	r13, r9
    18f2:	38 f4       	brcc	.+14     	; 0x1902 <vfprintf+0x2e6>
    18f4:	f4 fe       	sbrs	r15, 4
    18f6:	07 c0       	rjmp	.+14     	; 0x1906 <vfprintf+0x2ea>
    18f8:	f2 fc       	sbrc	r15, 2
    18fa:	05 c0       	rjmp	.+10     	; 0x1906 <vfprintf+0x2ea>
    18fc:	8f ee       	ldi	r24, 0xEF	; 239
    18fe:	f8 22       	and	r15, r24
    1900:	02 c0       	rjmp	.+4      	; 0x1906 <vfprintf+0x2ea>
    1902:	1d 2d       	mov	r17, r13
    1904:	01 c0       	rjmp	.+2      	; 0x1908 <vfprintf+0x2ec>
    1906:	19 2d       	mov	r17, r9
    1908:	f4 fe       	sbrs	r15, 4
    190a:	0d c0       	rjmp	.+26     	; 0x1926 <vfprintf+0x30a>
    190c:	fe 01       	movw	r30, r28
    190e:	ed 0d       	add	r30, r13
    1910:	f1 1d       	adc	r31, r1
    1912:	80 81       	ld	r24, Z
    1914:	80 33       	cpi	r24, 0x30	; 48
    1916:	19 f4       	brne	.+6      	; 0x191e <vfprintf+0x302>
    1918:	99 ee       	ldi	r25, 0xE9	; 233
    191a:	f9 22       	and	r15, r25
    191c:	08 c0       	rjmp	.+16     	; 0x192e <vfprintf+0x312>
    191e:	1f 5f       	subi	r17, 0xFF	; 255
    1920:	f2 fe       	sbrs	r15, 2
    1922:	05 c0       	rjmp	.+10     	; 0x192e <vfprintf+0x312>
    1924:	03 c0       	rjmp	.+6      	; 0x192c <vfprintf+0x310>
    1926:	8f 2d       	mov	r24, r15
    1928:	86 78       	andi	r24, 0x86	; 134
    192a:	09 f0       	breq	.+2      	; 0x192e <vfprintf+0x312>
    192c:	1f 5f       	subi	r17, 0xFF	; 255
    192e:	0f 2d       	mov	r16, r15
    1930:	f3 fc       	sbrc	r15, 3
    1932:	13 c0       	rjmp	.+38     	; 0x195a <vfprintf+0x33e>
    1934:	f0 fe       	sbrs	r15, 0
    1936:	0e c0       	rjmp	.+28     	; 0x1954 <vfprintf+0x338>
    1938:	1e 15       	cp	r17, r14
    193a:	10 f0       	brcs	.+4      	; 0x1940 <vfprintf+0x324>
    193c:	9d 2c       	mov	r9, r13
    193e:	0a c0       	rjmp	.+20     	; 0x1954 <vfprintf+0x338>
    1940:	9d 2c       	mov	r9, r13
    1942:	9e 0c       	add	r9, r14
    1944:	91 1a       	sub	r9, r17
    1946:	1e 2d       	mov	r17, r14
    1948:	05 c0       	rjmp	.+10     	; 0x1954 <vfprintf+0x338>
    194a:	80 e2       	ldi	r24, 0x20	; 32
    194c:	90 e0       	ldi	r25, 0x00	; 0
    194e:	b3 01       	movw	r22, r6
    1950:	74 d0       	rcall	.+232    	; 0x1a3a <fputc>
    1952:	1f 5f       	subi	r17, 0xFF	; 255
    1954:	1e 15       	cp	r17, r14
    1956:	c8 f3       	brcs	.-14     	; 0x194a <vfprintf+0x32e>
    1958:	04 c0       	rjmp	.+8      	; 0x1962 <vfprintf+0x346>
    195a:	1e 15       	cp	r17, r14
    195c:	10 f4       	brcc	.+4      	; 0x1962 <vfprintf+0x346>
    195e:	e1 1a       	sub	r14, r17
    1960:	01 c0       	rjmp	.+2      	; 0x1964 <vfprintf+0x348>
    1962:	ee 24       	eor	r14, r14
    1964:	04 ff       	sbrs	r16, 4
    1966:	0e c0       	rjmp	.+28     	; 0x1984 <vfprintf+0x368>
    1968:	80 e3       	ldi	r24, 0x30	; 48
    196a:	90 e0       	ldi	r25, 0x00	; 0
    196c:	b3 01       	movw	r22, r6
    196e:	65 d0       	rcall	.+202    	; 0x1a3a <fputc>
    1970:	02 ff       	sbrs	r16, 2
    1972:	1b c0       	rjmp	.+54     	; 0x19aa <vfprintf+0x38e>
    1974:	01 fd       	sbrc	r16, 1
    1976:	03 c0       	rjmp	.+6      	; 0x197e <vfprintf+0x362>
    1978:	88 e7       	ldi	r24, 0x78	; 120
    197a:	90 e0       	ldi	r25, 0x00	; 0
    197c:	0e c0       	rjmp	.+28     	; 0x199a <vfprintf+0x37e>
    197e:	88 e5       	ldi	r24, 0x58	; 88
    1980:	90 e0       	ldi	r25, 0x00	; 0
    1982:	0b c0       	rjmp	.+22     	; 0x199a <vfprintf+0x37e>
    1984:	80 2f       	mov	r24, r16
    1986:	86 78       	andi	r24, 0x86	; 134
    1988:	81 f0       	breq	.+32     	; 0x19aa <vfprintf+0x38e>
    198a:	01 ff       	sbrs	r16, 1
    198c:	02 c0       	rjmp	.+4      	; 0x1992 <vfprintf+0x376>
    198e:	8b e2       	ldi	r24, 0x2B	; 43
    1990:	01 c0       	rjmp	.+2      	; 0x1994 <vfprintf+0x378>
    1992:	80 e2       	ldi	r24, 0x20	; 32
    1994:	f7 fc       	sbrc	r15, 7
    1996:	8d e2       	ldi	r24, 0x2D	; 45
    1998:	90 e0       	ldi	r25, 0x00	; 0
    199a:	b3 01       	movw	r22, r6
    199c:	4e d0       	rcall	.+156    	; 0x1a3a <fputc>
    199e:	05 c0       	rjmp	.+10     	; 0x19aa <vfprintf+0x38e>
    19a0:	80 e3       	ldi	r24, 0x30	; 48
    19a2:	90 e0       	ldi	r25, 0x00	; 0
    19a4:	b3 01       	movw	r22, r6
    19a6:	49 d0       	rcall	.+146    	; 0x1a3a <fputc>
    19a8:	9a 94       	dec	r9
    19aa:	d9 14       	cp	r13, r9
    19ac:	c8 f3       	brcs	.-14     	; 0x19a0 <vfprintf+0x384>
    19ae:	da 94       	dec	r13
    19b0:	f1 01       	movw	r30, r2
    19b2:	ed 0d       	add	r30, r13
    19b4:	f1 1d       	adc	r31, r1
    19b6:	80 81       	ld	r24, Z
    19b8:	90 e0       	ldi	r25, 0x00	; 0
    19ba:	b3 01       	movw	r22, r6
    19bc:	3e d0       	rcall	.+124    	; 0x1a3a <fputc>
    19be:	dd 20       	and	r13, r13
    19c0:	b1 f7       	brne	.-20     	; 0x19ae <vfprintf+0x392>
    19c2:	05 c0       	rjmp	.+10     	; 0x19ce <vfprintf+0x3b2>
    19c4:	80 e2       	ldi	r24, 0x20	; 32
    19c6:	90 e0       	ldi	r25, 0x00	; 0
    19c8:	b3 01       	movw	r22, r6
    19ca:	37 d0       	rcall	.+110    	; 0x1a3a <fputc>
    19cc:	ea 94       	dec	r14
    19ce:	ee 20       	and	r14, r14
    19d0:	c9 f7       	brne	.-14     	; 0x19c4 <vfprintf+0x3a8>
    19d2:	50 ce       	rjmp	.-864    	; 0x1674 <vfprintf+0x58>
    19d4:	f3 01       	movw	r30, r6
    19d6:	66 81       	ldd	r22, Z+6	; 0x06
    19d8:	77 81       	ldd	r23, Z+7	; 0x07
    19da:	cb 01       	movw	r24, r22
    19dc:	2b 96       	adiw	r28, 0x0b	; 11
    19de:	0f b6       	in	r0, 0x3f	; 63
    19e0:	f8 94       	cli
    19e2:	de bf       	out	0x3e, r29	; 62
    19e4:	0f be       	out	0x3f, r0	; 63
    19e6:	cd bf       	out	0x3d, r28	; 61
    19e8:	cf 91       	pop	r28
    19ea:	df 91       	pop	r29
    19ec:	1f 91       	pop	r17
    19ee:	0f 91       	pop	r16
    19f0:	ff 90       	pop	r15
    19f2:	ef 90       	pop	r14
    19f4:	df 90       	pop	r13
    19f6:	cf 90       	pop	r12
    19f8:	bf 90       	pop	r11
    19fa:	af 90       	pop	r10
    19fc:	9f 90       	pop	r9
    19fe:	8f 90       	pop	r8
    1a00:	7f 90       	pop	r7
    1a02:	6f 90       	pop	r6
    1a04:	5f 90       	pop	r5
    1a06:	4f 90       	pop	r4
    1a08:	3f 90       	pop	r3
    1a0a:	2f 90       	pop	r2
    1a0c:	08 95       	ret

00001a0e <strnlen_P>:
    1a0e:	fc 01       	movw	r30, r24
    1a10:	05 90       	lpm	r0, Z+
    1a12:	61 50       	subi	r22, 0x01	; 1
    1a14:	70 40       	sbci	r23, 0x00	; 0
    1a16:	01 10       	cpse	r0, r1
    1a18:	d8 f7       	brcc	.-10     	; 0x1a10 <strnlen_P+0x2>
    1a1a:	80 95       	com	r24
    1a1c:	90 95       	com	r25
    1a1e:	8e 0f       	add	r24, r30
    1a20:	9f 1f       	adc	r25, r31
    1a22:	08 95       	ret

00001a24 <strnlen>:
    1a24:	fc 01       	movw	r30, r24
    1a26:	61 50       	subi	r22, 0x01	; 1
    1a28:	70 40       	sbci	r23, 0x00	; 0
    1a2a:	01 90       	ld	r0, Z+
    1a2c:	01 10       	cpse	r0, r1
    1a2e:	d8 f7       	brcc	.-10     	; 0x1a26 <strnlen+0x2>
    1a30:	80 95       	com	r24
    1a32:	90 95       	com	r25
    1a34:	8e 0f       	add	r24, r30
    1a36:	9f 1f       	adc	r25, r31
    1a38:	08 95       	ret

00001a3a <fputc>:
    1a3a:	0f 93       	push	r16
    1a3c:	1f 93       	push	r17
    1a3e:	cf 93       	push	r28
    1a40:	df 93       	push	r29
    1a42:	8c 01       	movw	r16, r24
    1a44:	eb 01       	movw	r28, r22
    1a46:	8b 81       	ldd	r24, Y+3	; 0x03
    1a48:	81 ff       	sbrs	r24, 1
    1a4a:	1b c0       	rjmp	.+54     	; 0x1a82 <fputc+0x48>
    1a4c:	82 ff       	sbrs	r24, 2
    1a4e:	0d c0       	rjmp	.+26     	; 0x1a6a <fputc+0x30>
    1a50:	2e 81       	ldd	r18, Y+6	; 0x06
    1a52:	3f 81       	ldd	r19, Y+7	; 0x07
    1a54:	8c 81       	ldd	r24, Y+4	; 0x04
    1a56:	9d 81       	ldd	r25, Y+5	; 0x05
    1a58:	28 17       	cp	r18, r24
    1a5a:	39 07       	cpc	r19, r25
    1a5c:	64 f4       	brge	.+24     	; 0x1a76 <fputc+0x3c>
    1a5e:	e8 81       	ld	r30, Y
    1a60:	f9 81       	ldd	r31, Y+1	; 0x01
    1a62:	01 93       	st	Z+, r16
    1a64:	f9 83       	std	Y+1, r31	; 0x01
    1a66:	e8 83       	st	Y, r30
    1a68:	06 c0       	rjmp	.+12     	; 0x1a76 <fputc+0x3c>
    1a6a:	e8 85       	ldd	r30, Y+8	; 0x08
    1a6c:	f9 85       	ldd	r31, Y+9	; 0x09
    1a6e:	80 2f       	mov	r24, r16
    1a70:	09 95       	icall
    1a72:	89 2b       	or	r24, r25
    1a74:	31 f4       	brne	.+12     	; 0x1a82 <fputc+0x48>
    1a76:	8e 81       	ldd	r24, Y+6	; 0x06
    1a78:	9f 81       	ldd	r25, Y+7	; 0x07
    1a7a:	01 96       	adiw	r24, 0x01	; 1
    1a7c:	9f 83       	std	Y+7, r25	; 0x07
    1a7e:	8e 83       	std	Y+6, r24	; 0x06
    1a80:	02 c0       	rjmp	.+4      	; 0x1a86 <fputc+0x4c>
    1a82:	0f ef       	ldi	r16, 0xFF	; 255
    1a84:	1f ef       	ldi	r17, 0xFF	; 255
    1a86:	c8 01       	movw	r24, r16
    1a88:	df 91       	pop	r29
    1a8a:	cf 91       	pop	r28
    1a8c:	1f 91       	pop	r17
    1a8e:	0f 91       	pop	r16
    1a90:	08 95       	ret

00001a92 <__ultoa_invert>:
    1a92:	fa 01       	movw	r30, r20
    1a94:	aa 27       	eor	r26, r26
    1a96:	28 30       	cpi	r18, 0x08	; 8
    1a98:	51 f1       	breq	.+84     	; 0x1aee <__ultoa_invert+0x5c>
    1a9a:	20 31       	cpi	r18, 0x10	; 16
    1a9c:	81 f1       	breq	.+96     	; 0x1afe <__ultoa_invert+0x6c>
    1a9e:	e8 94       	clt
    1aa0:	6f 93       	push	r22
    1aa2:	6e 7f       	andi	r22, 0xFE	; 254
    1aa4:	6e 5f       	subi	r22, 0xFE	; 254
    1aa6:	7f 4f       	sbci	r23, 0xFF	; 255
    1aa8:	8f 4f       	sbci	r24, 0xFF	; 255
    1aaa:	9f 4f       	sbci	r25, 0xFF	; 255
    1aac:	af 4f       	sbci	r26, 0xFF	; 255
    1aae:	b1 e0       	ldi	r27, 0x01	; 1
    1ab0:	3e d0       	rcall	.+124    	; 0x1b2e <__ultoa_invert+0x9c>
    1ab2:	b4 e0       	ldi	r27, 0x04	; 4
    1ab4:	3c d0       	rcall	.+120    	; 0x1b2e <__ultoa_invert+0x9c>
    1ab6:	67 0f       	add	r22, r23
    1ab8:	78 1f       	adc	r23, r24
    1aba:	89 1f       	adc	r24, r25
    1abc:	9a 1f       	adc	r25, r26
    1abe:	a1 1d       	adc	r26, r1
    1ac0:	68 0f       	add	r22, r24
    1ac2:	79 1f       	adc	r23, r25
    1ac4:	8a 1f       	adc	r24, r26
    1ac6:	91 1d       	adc	r25, r1
    1ac8:	a1 1d       	adc	r26, r1
    1aca:	6a 0f       	add	r22, r26
    1acc:	71 1d       	adc	r23, r1
    1ace:	81 1d       	adc	r24, r1
    1ad0:	91 1d       	adc	r25, r1
    1ad2:	a1 1d       	adc	r26, r1
    1ad4:	20 d0       	rcall	.+64     	; 0x1b16 <__ultoa_invert+0x84>
    1ad6:	09 f4       	brne	.+2      	; 0x1ada <__ultoa_invert+0x48>
    1ad8:	68 94       	set
    1ada:	3f 91       	pop	r19
    1adc:	2a e0       	ldi	r18, 0x0A	; 10
    1ade:	26 9f       	mul	r18, r22
    1ae0:	11 24       	eor	r1, r1
    1ae2:	30 19       	sub	r19, r0
    1ae4:	30 5d       	subi	r19, 0xD0	; 208
    1ae6:	31 93       	st	Z+, r19
    1ae8:	de f6       	brtc	.-74     	; 0x1aa0 <__ultoa_invert+0xe>
    1aea:	cf 01       	movw	r24, r30
    1aec:	08 95       	ret
    1aee:	46 2f       	mov	r20, r22
    1af0:	47 70       	andi	r20, 0x07	; 7
    1af2:	40 5d       	subi	r20, 0xD0	; 208
    1af4:	41 93       	st	Z+, r20
    1af6:	b3 e0       	ldi	r27, 0x03	; 3
    1af8:	0f d0       	rcall	.+30     	; 0x1b18 <__ultoa_invert+0x86>
    1afa:	c9 f7       	brne	.-14     	; 0x1aee <__ultoa_invert+0x5c>
    1afc:	f6 cf       	rjmp	.-20     	; 0x1aea <__ultoa_invert+0x58>
    1afe:	46 2f       	mov	r20, r22
    1b00:	4f 70       	andi	r20, 0x0F	; 15
    1b02:	40 5d       	subi	r20, 0xD0	; 208
    1b04:	4a 33       	cpi	r20, 0x3A	; 58
    1b06:	18 f0       	brcs	.+6      	; 0x1b0e <__ultoa_invert+0x7c>
    1b08:	49 5d       	subi	r20, 0xD9	; 217
    1b0a:	31 fd       	sbrc	r19, 1
    1b0c:	40 52       	subi	r20, 0x20	; 32
    1b0e:	41 93       	st	Z+, r20
    1b10:	02 d0       	rcall	.+4      	; 0x1b16 <__ultoa_invert+0x84>
    1b12:	a9 f7       	brne	.-22     	; 0x1afe <__ultoa_invert+0x6c>
    1b14:	ea cf       	rjmp	.-44     	; 0x1aea <__ultoa_invert+0x58>
    1b16:	b4 e0       	ldi	r27, 0x04	; 4
    1b18:	a6 95       	lsr	r26
    1b1a:	97 95       	ror	r25
    1b1c:	87 95       	ror	r24
    1b1e:	77 95       	ror	r23
    1b20:	67 95       	ror	r22
    1b22:	ba 95       	dec	r27
    1b24:	c9 f7       	brne	.-14     	; 0x1b18 <__ultoa_invert+0x86>
    1b26:	00 97       	sbiw	r24, 0x00	; 0
    1b28:	61 05       	cpc	r22, r1
    1b2a:	71 05       	cpc	r23, r1
    1b2c:	08 95       	ret
    1b2e:	9b 01       	movw	r18, r22
    1b30:	ac 01       	movw	r20, r24
    1b32:	0a 2e       	mov	r0, r26
    1b34:	06 94       	lsr	r0
    1b36:	57 95       	ror	r21
    1b38:	47 95       	ror	r20
    1b3a:	37 95       	ror	r19
    1b3c:	27 95       	ror	r18
    1b3e:	ba 95       	dec	r27
    1b40:	c9 f7       	brne	.-14     	; 0x1b34 <__ultoa_invert+0xa2>
    1b42:	62 0f       	add	r22, r18
    1b44:	73 1f       	adc	r23, r19
    1b46:	84 1f       	adc	r24, r20
    1b48:	95 1f       	adc	r25, r21
    1b4a:	a0 1d       	adc	r26, r0
    1b4c:	08 95       	ret

00001b4e <_exit>:
    1b4e:	f8 94       	cli

00001b50 <__stop_program>:
    1b50:	ff cf       	rjmp	.-2      	; 0x1b50 <__stop_program>
