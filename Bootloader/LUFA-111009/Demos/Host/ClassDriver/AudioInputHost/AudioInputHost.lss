
AudioInputHost.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001e  00800100  00001978  00001a0c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001978  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000022  0080011e  0080011e  00001a2a  2**0
                  ALLOC
  3 .debug_aranges 000006c8  00000000  00000000  00001a2a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000f90  00000000  00000000  000020f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000b954  00000000  00000000  00003082  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000028f8  00000000  00000000  0000e9d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00007e96  00000000  00000000  000112ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000b10  00000000  00000000  00019164  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000471f  00000000  00000000  00019c74  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000057bb  00000000  00000000  0001e393  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000007b0  00000000  00000000  00023b4e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
		Pipe_DisablePipe();
	}
}

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
       0:	2d c1       	rjmp	.+602    	; 0x25c <__ctors_end>
{
	USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, AfterType);

	if (*BytesRem)
	  USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, Type);
}
       2:	00 00       	nop

	return USB_Host_SendControlRequest(FeatureStatus);
}

uint8_t USB_Host_ClearEndpointStall(const uint8_t EndpointAddress)
{
       4:	49 c1       	rjmp	.+658    	; 0x298 <__bad_interrupt>

	return Serial_ReceiveByte();
}

int Serial_getchar_Blocking(FILE *Stream)
{
       6:	00 00       	nop
       8:	47 c1       	rjmp	.+654    	; 0x298 <__bad_interrupt>
       a:	00 00       	nop
       c:	45 c1       	rjmp	.+650    	; 0x298 <__bad_interrupt>
       e:	00 00       	nop
      10:	43 c1       	rjmp	.+646    	; 0x298 <__bad_interrupt>
      12:	00 00       	nop
      14:	41 c1       	rjmp	.+642    	; 0x298 <__bad_interrupt>
      16:	00 00       	nop
      18:	3f c1       	rjmp	.+638    	; 0x298 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	3d c1       	rjmp	.+634    	; 0x298 <__bad_interrupt>
      1e:	00 00       	nop
      20:	3b c1       	rjmp	.+630    	; 0x298 <__bad_interrupt>
      22:	00 00       	nop
      24:	39 c1       	rjmp	.+626    	; 0x298 <__bad_interrupt>
      26:	00 00       	nop
      28:	9a c5       	rjmp	.+2868   	; 0xb5e <__vector_10>
      2a:	00 00       	nop
      2c:	35 c1       	rjmp	.+618    	; 0x298 <__bad_interrupt>
      2e:	00 00       	nop
      30:	33 c1       	rjmp	.+614    	; 0x298 <__bad_interrupt>
      32:	00 00       	nop
      34:	31 c1       	rjmp	.+610    	; 0x298 <__bad_interrupt>
      36:	00 00       	nop
      38:	2f c1       	rjmp	.+606    	; 0x298 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	2d c1       	rjmp	.+602    	; 0x298 <__bad_interrupt>
      3e:	00 00       	nop
      40:	2b c1       	rjmp	.+598    	; 0x298 <__bad_interrupt>
      42:	00 00       	nop
      44:	29 c1       	rjmp	.+594    	; 0x298 <__bad_interrupt>
      46:	00 00       	nop
      48:	27 c1       	rjmp	.+590    	; 0x298 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	25 c1       	rjmp	.+586    	; 0x298 <__bad_interrupt>
      4e:	00 00       	nop
      50:	23 c1       	rjmp	.+582    	; 0x298 <__bad_interrupt>
      52:	00 00       	nop
      54:	22 c1       	rjmp	.+580    	; 0x29a <__vector_21>
      56:	00 00       	nop
      58:	1f c1       	rjmp	.+574    	; 0x298 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	1d c1       	rjmp	.+570    	; 0x298 <__bad_interrupt>
      5e:	00 00       	nop
      60:	1b c1       	rjmp	.+566    	; 0x298 <__bad_interrupt>
      62:	00 00       	nop
      64:	19 c1       	rjmp	.+562    	; 0x298 <__bad_interrupt>
      66:	00 00       	nop
      68:	17 c1       	rjmp	.+558    	; 0x298 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	15 c1       	rjmp	.+554    	; 0x298 <__bad_interrupt>
      6e:	00 00       	nop
      70:	13 c1       	rjmp	.+550    	; 0x298 <__bad_interrupt>
      72:	00 00       	nop
      74:	11 c1       	rjmp	.+546    	; 0x298 <__bad_interrupt>
      76:	00 00       	nop
      78:	0f c1       	rjmp	.+542    	; 0x298 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	0d c1       	rjmp	.+538    	; 0x298 <__bad_interrupt>
      7e:	00 00       	nop
      80:	0b c1       	rjmp	.+534    	; 0x298 <__bad_interrupt>
      82:	00 00       	nop
      84:	09 c1       	rjmp	.+530    	; 0x298 <__bad_interrupt>
      86:	00 00       	nop
      88:	07 c1       	rjmp	.+526    	; 0x298 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	05 c1       	rjmp	.+522    	; 0x298 <__bad_interrupt>
      8e:	00 00       	nop
      90:	03 c1       	rjmp	.+518    	; 0x298 <__bad_interrupt>
      92:	00 00       	nop
      94:	01 c1       	rjmp	.+514    	; 0x298 <__bad_interrupt>
      96:	00 00       	nop

00000098 <__c.4584>:
      98:	1b 5b 33 31 6d 44 65 76 20 45 6e 75 6d 20 45 72     .[31mDev Enum Er
      a8:	72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     ror.. -- Error C
      b8:	6f 64 65 20 25 64 0d 0a 20 2d 2d 20 53 75 62 20     ode %d.. -- Sub 
      c8:	45 72 72 6f 72 20 43 6f 64 65 20 25 64 0d 0a 20     Error Code %d.. 
      d8:	2d 2d 20 49 6e 20 53 74 61 74 65 20 25 64 0d 0a     -- In State %d..
      e8:	1b 5b 33 37 6d 00                                   .[37m.

000000ee <__c.4576>:
      ee:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
      fe:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 
     10e:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

0000011d <__c.4554>:
     11d:	41 75 64 69 6f 20 44 65 76 69 63 65 20 45 6e 75     Audio Device Enu
     12d:	6d 65 72 61 74 65 64 2e 0d 0a 00                    merated....

00000138 <__c.4552>:
     138:	45 72 72 6f 72 20 53 65 74 74 69 6e 67 20 41 75     Error Setting Au
     148:	64 69 6f 20 53 61 6d 70 6c 69 6e 67 20 46 72 65     dio Sampling Fre
     158:	71 75 65 6e 63 79 2e 0d 0a 00                       quency....

00000162 <__c.4549>:
     162:	45 72 72 6f 72 20 45 6e 61 62 6c 69 6e 67 20 41     Error Enabling A
     172:	75 64 69 6f 20 53 74 72 65 61 6d 2e 0d 0a 00        udio Stream....

00000181 <__c.4547>:
     181:	45 72 72 6f 72 20 53 65 74 74 69 6e 67 20 44 65     Error Setting De
     191:	76 69 63 65 20 43 6f 6e 66 69 67 75 72 61 74 69     vice Configurati
     1a1:	6f 6e 2e 0d 0a 00                                   on....

000001a7 <__c.4545>:
     1a7:	41 74 74 61 63 68 65 64 20 44 65 76 69 63 65 20     Attached Device 
     1b7:	4e 6f 74 20 61 20 56 61 6c 69 64 20 41 75 64 69     Not a Valid Audi
     1c7:	6f 20 49 6e 70 75 74 20 44 65 76 69 63 65 2e 0d     o Input Device..
     1d7:	0a 00                                               ..

000001d9 <__c.4543>:
     1d9:	45 72 72 6f 72 20 52 65 74 72 69 65 76 69 6e 67     Error Retrieving
     1e9:	20 43 6f 6e 66 69 67 75 72 61 74 69 6f 6e 20 44      Configuration D
     1f9:	65 73 63 72 69 70 74 6f 72 2e 0d 0a 00              escriptor....

00000206 <__c.4536>:
     206:	0d 0a 44 65 76 69 63 65 20 55 6e 61 74 74 61 63     ..Device Unattac
     216:	68 65 64 2e 0d 0a 00                                hed....

0000021d <__c.4531>:
     21d:	44 65 76 69 63 65 20 41 74 74 61 63 68 65 64 2e     Device Attached.
     22d:	0d 0a 00                                            ...

00000230 <__c.4501>:
     230:	1b 5b 33 36 6d 41 75 64 69 6f 20 49 6e 70 75 74     .[36mAudio Input
     240:	20 48 6f 73 74 20 44 65 6d 6f 20 72 75 6e 6e 69      Host Demo runni
     250:	6e 67 2e 0d 0a 1b 5b 33 37 6d 00 00                 ng....[37m..

0000025c <__ctors_end>:
     25c:	11 24       	eor	r1, r1
     25e:	1f be       	out	0x3f, r1	; 63
     260:	cf ef       	ldi	r28, 0xFF	; 255
     262:	d0 e2       	ldi	r29, 0x20	; 32
     264:	de bf       	out	0x3e, r29	; 62
     266:	cd bf       	out	0x3d, r28	; 61

00000268 <__do_copy_data>:
     268:	11 e0       	ldi	r17, 0x01	; 1
     26a:	a0 e0       	ldi	r26, 0x00	; 0
     26c:	b1 e0       	ldi	r27, 0x01	; 1
     26e:	e8 e7       	ldi	r30, 0x78	; 120
     270:	f9 e1       	ldi	r31, 0x19	; 25
     272:	00 e0       	ldi	r16, 0x00	; 0
     274:	0b bf       	out	0x3b, r16	; 59
     276:	02 c0       	rjmp	.+4      	; 0x27c <__do_copy_data+0x14>
     278:	07 90       	elpm	r0, Z+
     27a:	0d 92       	st	X+, r0
     27c:	ae 31       	cpi	r26, 0x1E	; 30
     27e:	b1 07       	cpc	r27, r17
     280:	d9 f7       	brne	.-10     	; 0x278 <__do_copy_data+0x10>

00000282 <__do_clear_bss>:
     282:	11 e0       	ldi	r17, 0x01	; 1
     284:	ae e1       	ldi	r26, 0x1E	; 30
     286:	b1 e0       	ldi	r27, 0x01	; 1
     288:	01 c0       	rjmp	.+2      	; 0x28c <.do_clear_bss_start>

0000028a <.do_clear_bss_loop>:
     28a:	1d 92       	st	X+, r1

0000028c <.do_clear_bss_start>:
     28c:	a0 34       	cpi	r26, 0x40	; 64
     28e:	b1 07       	cpc	r27, r17
     290:	e1 f7       	brne	.-8      	; 0x28a <.do_clear_bss_loop>
     292:	a2 d1       	rcall	.+836    	; 0x5d8 <main>
     294:	0c 94 ba 0c 	jmp	0x1974	; 0x1974 <_exit>

00000298 <__bad_interrupt>:
     298:	b3 ce       	rjmp	.-666    	; 0x0 <__vectors>

0000029a <__vector_21>:
	}
}

/** ISR to handle the reloading of the PWM timer with the next sample. */
ISR(TIMER0_COMPA_vect, ISR_BLOCK)
{
     29a:	1f 92       	push	r1
     29c:	0f 92       	push	r0
     29e:	0f b6       	in	r0, 0x3f	; 63
     2a0:	0f 92       	push	r0
     2a2:	11 24       	eor	r1, r1
     2a4:	2f 93       	push	r18
     2a6:	3f 93       	push	r19
     2a8:	4f 93       	push	r20
     2aa:	5f 93       	push	r21
     2ac:	8f 93       	push	r24
     2ae:	9f 93       	push	r25
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
     2b0:	50 91 a7 00 	lds	r21, 0x00A7
			 */
			static inline bool Audio_Host_IsSampleReceived(USB_ClassInfo_Audio_Host_t* const AudioInterfaceInfo)
			                                               ATTR_NON_NULL_PTR_ARG(1) ATTR_ALWAYS_INLINE;
			static inline bool Audio_Host_IsSampleReceived(USB_ClassInfo_Audio_Host_t* const AudioInterfaceInfo)
			{
				if ((USB_HostState != HOST_STATE_Configured) || !(AudioInterfaceInfo->State.IsActive))
     2b4:	80 91 2b 01 	lds	r24, 0x012B
     2b8:	8b 30       	cpi	r24, 0x0B	; 11
     2ba:	09 f0       	breq	.+2      	; 0x2be <__vector_21+0x24>
     2bc:	56 c0       	rjmp	.+172    	; 0x36a <__vector_21+0xd0>
     2be:	80 91 02 01 	lds	r24, 0x0102
     2c2:	88 23       	and	r24, r24
     2c4:	09 f4       	brne	.+2      	; 0x2c8 <__vector_21+0x2e>
     2c6:	51 c0       	rjmp	.+162    	; 0x36a <__vector_21+0xd0>
				  return false;

				bool SampleReceived = false;

				Pipe_SelectPipe(AudioInterfaceInfo->Config.DataINPipeNumber);
     2c8:	80 91 00 01 	lds	r24, 0x0100
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     2cc:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     2d0:	80 91 a9 00 	lds	r24, 0x00A9
     2d4:	8f 7b       	andi	r24, 0xBF	; 191
     2d6:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     2da:	90 91 a6 00 	lds	r25, 0x00A6

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     2de:	80 91 a9 00 	lds	r24, 0x00A9
     2e2:	80 64       	ori	r24, 0x40	; 64
     2e4:	80 93 a9 00 	sts	0x00A9, r24
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	/* Check that the USB bus is ready for the next sample to read */
	if (Audio_Host_IsSampleReceived(&Microphone_Audio_Interface))
     2e8:	90 ff       	sbrs	r25, 0
     2ea:	3f c0       	rjmp	.+126    	; 0x36a <__vector_21+0xd0>
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[0] = UPDATX;
     2ec:	80 91 af 00 	lds	r24, 0x00AF
				Data.Bytes[1] = UPDATX;
     2f0:	90 91 af 00 	lds	r25, 0x00AF

				return Data.Value;
     2f4:	9c 01       	movw	r18, r24
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
     2f6:	80 91 f6 00 	lds	r24, 0x00F6
     2fa:	90 91 f7 00 	lds	r25, 0x00F7

				(void)AudioInterfaceInfo;

				Sample = (int16_t)Pipe_Read_16_LE();

				if (!(Pipe_BytesInPipe()))
     2fe:	89 2b       	or	r24, r25
     300:	79 f4       	brne	.+30     	; 0x320 <__vector_21+0x86>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     302:	80 91 a9 00 	lds	r24, 0x00A9
     306:	8f 7b       	andi	r24, 0xBF	; 191
     308:	80 93 a9 00 	sts	0x00A9, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     30c:	80 91 a6 00 	lds	r24, 0x00A6
     310:	8e 77       	andi	r24, 0x7E	; 126
     312:	80 93 a6 00 	sts	0x00A6, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     316:	80 91 a9 00 	lds	r24, 0x00A9
     31a:	80 64       	ori	r24, 0x40	; 64
     31c:	80 93 a9 00 	sts	0x00A9, r24
	{
		/* Retrieve the signed 16-bit audio sample, convert to 8-bit */
		int8_t Sample_8Bit = (Audio_Host_ReadSample16(&Microphone_Audio_Interface) >> 8);
     320:	83 2f       	mov	r24, r19
     322:	99 27       	eor	r25, r25
     324:	87 fd       	sbrc	r24, 7
     326:	9a 95       	dec	r25
     328:	48 2f       	mov	r20, r24

		/* Load the sample into the PWM timer channel */
		OCR3A = (Sample_8Bit ^ (1 << 7));
     32a:	99 27       	eor	r25, r25
     32c:	87 fd       	sbrc	r24, 7
     32e:	90 95       	com	r25
     330:	20 e8       	ldi	r18, 0x80	; 128
     332:	30 e0       	ldi	r19, 0x00	; 0
     334:	82 27       	eor	r24, r18
     336:	93 27       	eor	r25, r19
     338:	90 93 99 00 	sts	0x0099, r25
     33c:	80 93 98 00 	sts	0x0098, r24

		uint8_t LEDMask = LEDS_NO_LEDS;

		/* Turn on LEDs as the sample amplitude increases */
		if (Sample_8Bit > 16)
     340:	41 31       	cpi	r20, 0x11	; 17
     342:	14 f0       	brlt	.+4      	; 0x348 <__vector_21+0xae>
     344:	90 ef       	ldi	r25, 0xF0	; 240
     346:	0d c0       	rjmp	.+26     	; 0x362 <__vector_21+0xc8>
		  LEDMask = (LEDS_LED1 | LEDS_LED2 | LEDS_LED3 | LEDS_LED4);
		else if (Sample_8Bit > 8)
     348:	49 30       	cpi	r20, 0x09	; 9
     34a:	14 f0       	brlt	.+4      	; 0x350 <__vector_21+0xb6>
     34c:	90 eb       	ldi	r25, 0xB0	; 176
     34e:	09 c0       	rjmp	.+18     	; 0x362 <__vector_21+0xc8>
		  LEDMask = (LEDS_LED1 | LEDS_LED2 | LEDS_LED3);
		else if (Sample_8Bit > 4)
     350:	45 30       	cpi	r20, 0x05	; 5
     352:	14 f0       	brlt	.+4      	; 0x358 <__vector_21+0xbe>
     354:	90 e3       	ldi	r25, 0x30	; 48
     356:	05 c0       	rjmp	.+10     	; 0x362 <__vector_21+0xc8>
		  LEDMask = (LEDS_LED1 | LEDS_LED2);
		else if (Sample_8Bit > 2)
     358:	43 30       	cpi	r20, 0x03	; 3
     35a:	14 f0       	brlt	.+4      	; 0x360 <__vector_21+0xc6>
     35c:	90 e1       	ldi	r25, 0x10	; 16
     35e:	01 c0       	rjmp	.+2      	; 0x362 <__vector_21+0xc8>
     360:	90 e0       	ldi	r25, 0x00	; 0
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     362:	8b b1       	in	r24, 0x0b	; 11
     364:	8f 70       	andi	r24, 0x0F	; 15
     366:	98 2b       	or	r25, r24
     368:	9b b9       	out	0x0b, r25	; 11
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
     36a:	57 70       	andi	r21, 0x07	; 7
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     36c:	50 93 a7 00 	sts	0x00A7, r21

		LEDs_SetAllLEDs(LEDMask);
	}
	
	Pipe_SelectPipe(PrevPipe);
}
     370:	9f 91       	pop	r25
     372:	8f 91       	pop	r24
     374:	5f 91       	pop	r21
     376:	4f 91       	pop	r20
     378:	3f 91       	pop	r19
     37a:	2f 91       	pop	r18
     37c:	0f 90       	pop	r0
     37e:	0f be       	out	0x3f, r0	; 63
     380:	0f 90       	pop	r0
     382:	1f 90       	pop	r1
     384:	18 95       	reti

00000386 <EVENT_USB_Host_DeviceEnumerationFailed>:
 *  enumerating an attached USB device.
 */
void EVENT_USB_Host_DeviceEnumerationFailed(const uint8_t ErrorCode,
                                            const uint8_t SubErrorCode)
{
	printf_P(PSTR(ESC_FG_RED "Dev Enum Error\r\n"
     386:	90 91 2b 01 	lds	r25, 0x012B
     38a:	2d b7       	in	r18, 0x3d	; 61
     38c:	3e b7       	in	r19, 0x3e	; 62
     38e:	28 50       	subi	r18, 0x08	; 8
     390:	30 40       	sbci	r19, 0x00	; 0
     392:	0f b6       	in	r0, 0x3f	; 63
     394:	f8 94       	cli
     396:	3e bf       	out	0x3e, r19	; 62
     398:	0f be       	out	0x3f, r0	; 63
     39a:	2d bf       	out	0x3d, r18	; 61
     39c:	ed b7       	in	r30, 0x3d	; 61
     39e:	fe b7       	in	r31, 0x3e	; 62
     3a0:	31 96       	adiw	r30, 0x01	; 1
     3a2:	28 e9       	ldi	r18, 0x98	; 152
     3a4:	30 e0       	ldi	r19, 0x00	; 0
     3a6:	ad b7       	in	r26, 0x3d	; 61
     3a8:	be b7       	in	r27, 0x3e	; 62
     3aa:	12 96       	adiw	r26, 0x02	; 2
     3ac:	3c 93       	st	X, r19
     3ae:	2e 93       	st	-X, r18
     3b0:	11 97       	sbiw	r26, 0x01	; 1
     3b2:	82 83       	std	Z+2, r24	; 0x02
     3b4:	13 82       	std	Z+3, r1	; 0x03
     3b6:	64 83       	std	Z+4, r22	; 0x04
     3b8:	15 82       	std	Z+5, r1	; 0x05
     3ba:	96 83       	std	Z+6, r25	; 0x06
     3bc:	17 82       	std	Z+7, r1	; 0x07
     3be:	ea d7       	rcall	.+4052   	; 0x1394 <printf_P>
     3c0:	8b b1       	in	r24, 0x0b	; 11
     3c2:	8f 70       	andi	r24, 0x0F	; 15
     3c4:	80 69       	ori	r24, 0x90	; 144
     3c6:	8b b9       	out	0x0b, r24	; 11
     3c8:	2d b7       	in	r18, 0x3d	; 61
     3ca:	3e b7       	in	r19, 0x3e	; 62
     3cc:	28 5f       	subi	r18, 0xF8	; 248
     3ce:	3f 4f       	sbci	r19, 0xFF	; 255
     3d0:	0f b6       	in	r0, 0x3f	; 63
     3d2:	f8 94       	cli
     3d4:	3e bf       	out	0x3e, r19	; 62
     3d6:	0f be       	out	0x3f, r0	; 63
     3d8:	2d bf       	out	0x3d, r18	; 61
	                         " -- Error Code %d\r\n"
	                         " -- Sub Error Code %d\r\n"
	                         " -- In State %d\r\n" ESC_FG_WHITE), ErrorCode, SubErrorCode, USB_HostState);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
}
     3da:	08 95       	ret

000003dc <EVENT_USB_Host_HostError>:
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
}

/** Event handler for the USB_HostError event. This indicates that a hardware error occurred while in host mode. */
void EVENT_USB_Host_HostError(const uint8_t ErrorCode)
{
     3dc:	1f 93       	push	r17
     3de:	18 2f       	mov	r17, r24
	USB_Disable();
     3e0:	99 d3       	rcall	.+1842   	; 0xb14 <USB_Disable>

	printf_P(PSTR(ESC_FG_RED "Host Mode Error\r\n"
     3e2:	00 d0       	rcall	.+0      	; 0x3e4 <EVENT_USB_Host_HostError+0x8>
     3e4:	00 d0       	rcall	.+0      	; 0x3e6 <EVENT_USB_Host_HostError+0xa>
     3e6:	ed b7       	in	r30, 0x3d	; 61
     3e8:	fe b7       	in	r31, 0x3e	; 62
     3ea:	31 96       	adiw	r30, 0x01	; 1
     3ec:	8e ee       	ldi	r24, 0xEE	; 238
     3ee:	90 e0       	ldi	r25, 0x00	; 0
     3f0:	ad b7       	in	r26, 0x3d	; 61
     3f2:	be b7       	in	r27, 0x3e	; 62
     3f4:	12 96       	adiw	r26, 0x02	; 2
     3f6:	9c 93       	st	X, r25
     3f8:	8e 93       	st	-X, r24
     3fa:	11 97       	sbiw	r26, 0x01	; 1
     3fc:	12 83       	std	Z+2, r17	; 0x02
     3fe:	13 82       	std	Z+3, r1	; 0x03
     400:	c9 d7       	rcall	.+3986   	; 0x1394 <printf_P>
     402:	8b b1       	in	r24, 0x0b	; 11
     404:	8f 70       	andi	r24, 0x0F	; 15
     406:	80 69       	ori	r24, 0x90	; 144
     408:	8b b9       	out	0x0b, r24	; 11
     40a:	0f 90       	pop	r0
     40c:	0f 90       	pop	r0
     40e:	0f 90       	pop	r0
     410:	0f 90       	pop	r0
     412:	ff cf       	rjmp	.-2      	; 0x412 <EVENT_USB_Host_HostError+0x36>

00000414 <EVENT_USB_Host_DeviceUnattached>:
/** Event handler for the USB_DeviceUnattached event. This indicates that a device has been removed from the host, and
 *  stops the library USB task management process.
 */
void EVENT_USB_Host_DeviceUnattached(void)
{
	puts_P(PSTR("\r\nDevice Unattached.\r\n"));
     414:	86 e0       	ldi	r24, 0x06	; 6
     416:	92 e0       	ldi	r25, 0x02	; 2
     418:	df d7       	rcall	.+4030   	; 0x13d8 <puts_P>
     41a:	8b b1       	in	r24, 0x0b	; 11
     41c:	8f 70       	andi	r24, 0x0F	; 15
     41e:	80 61       	ori	r24, 0x10	; 16
     420:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
}
     422:	08 95       	ret

00000424 <EVENT_USB_Host_DeviceAttached>:
/** Event handler for the USB_DeviceAttached event. This indicates that a device has been attached to the host, and
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Host_DeviceAttached(void)
{
	puts_P(PSTR("Device Attached.\r\n"));
     424:	8d e1       	ldi	r24, 0x1D	; 29
     426:	92 e0       	ldi	r25, 0x02	; 2
     428:	d7 d7       	rcall	.+4014   	; 0x13d8 <puts_P>
     42a:	8b b1       	in	r24, 0x0b	; 11
     42c:	8f 70       	andi	r24, 0x0F	; 15
     42e:	80 6a       	ori	r24, 0xA0	; 160
     430:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
}
     432:	08 95       	ret

00000434 <EVENT_USB_Host_DeviceEnumerationComplete>:

/** Event handler for the USB_DeviceEnumerationComplete event. This indicates that a device has been successfully
 *  enumerated by the host and is now ready to be used by the application.
 */
void EVENT_USB_Host_DeviceEnumerationComplete(void)
{
     434:	ef 92       	push	r14
     436:	ff 92       	push	r15
     438:	0f 93       	push	r16
     43a:	1f 93       	push	r17
     43c:	df 93       	push	r29
     43e:	cf 93       	push	r28
     440:	cd b7       	in	r28, 0x3d	; 61
     442:	de b7       	in	r29, 0x3e	; 62
     444:	c5 50       	subi	r28, 0x05	; 5
     446:	d2 40       	sbci	r29, 0x02	; 2
     448:	0f b6       	in	r0, 0x3f	; 63
     44a:	f8 94       	cli
     44c:	de bf       	out	0x3e, r29	; 62
     44e:	0f be       	out	0x3f, r0	; 63
     450:	cd bf       	out	0x3d, r28	; 61
     452:	8b b1       	in	r24, 0x0b	; 11
     454:	8f 70       	andi	r24, 0x0F	; 15
     456:	80 6a       	ori	r24, 0xA0	; 160
     458:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);

	uint16_t ConfigDescriptorSize;
	uint8_t  ConfigDescriptorData[512];

	if (USB_Host_GetDeviceConfigDescriptor(1, &ConfigDescriptorSize, ConfigDescriptorData,
     45a:	8e 01       	movw	r16, r28
     45c:	0a 5f       	subi	r16, 0xFA	; 250
     45e:	1f 4f       	sbci	r17, 0xFF	; 255
     460:	81 e0       	ldi	r24, 0x01	; 1
     462:	be 01       	movw	r22, r28
     464:	6f 5f       	subi	r22, 0xFF	; 255
     466:	7f 4f       	sbci	r23, 0xFF	; 255
     468:	a8 01       	movw	r20, r16
     46a:	20 e0       	ldi	r18, 0x00	; 0
     46c:	32 e0       	ldi	r19, 0x02	; 2
     46e:	4e d4       	rcall	.+2204   	; 0xd0c <USB_Host_GetDeviceConfigDescriptor>
     470:	88 23       	and	r24, r24
     472:	19 f0       	breq	.+6      	; 0x47a <EVENT_USB_Host_DeviceEnumerationComplete+0x46>
	                                       sizeof(ConfigDescriptorData)) != HOST_GETCONFIG_Successful)
	{
		puts_P(PSTR("Error Retrieving Configuration Descriptor.\r\n"));
     474:	89 ed       	ldi	r24, 0xD9	; 217
     476:	91 e0       	ldi	r25, 0x01	; 1
     478:	11 c0       	rjmp	.+34     	; 0x49c <EVENT_USB_Host_DeviceEnumerationComplete+0x68>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (Audio_Host_ConfigurePipes(&Microphone_Audio_Interface,
     47a:	69 81       	ldd	r22, Y+1	; 0x01
     47c:	7a 81       	ldd	r23, Y+2	; 0x02
     47e:	80 e0       	ldi	r24, 0x00	; 0
     480:	91 e0       	ldi	r25, 0x01	; 1
     482:	a8 01       	movw	r20, r16
     484:	88 d6       	rcall	.+3344   	; 0x1196 <Audio_Host_ConfigurePipes>
     486:	88 23       	and	r24, r24
     488:	19 f0       	breq	.+6      	; 0x490 <EVENT_USB_Host_DeviceEnumerationComplete+0x5c>
	                              ConfigDescriptorSize, ConfigDescriptorData) != AUDIO_ENUMERROR_NoError)
	{
		puts_P(PSTR("Attached Device Not a Valid Audio Input Device.\r\n"));
     48a:	87 ea       	ldi	r24, 0xA7	; 167
     48c:	91 e0       	ldi	r25, 0x01	; 1
     48e:	06 c0       	rjmp	.+12     	; 0x49c <EVENT_USB_Host_DeviceEnumerationComplete+0x68>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (USB_Host_SetDeviceConfiguration(1) != HOST_SENDCONTROL_Successful)
     490:	81 e0       	ldi	r24, 0x01	; 1
     492:	de d5       	rcall	.+3004   	; 0x1050 <USB_Host_SetDeviceConfiguration>
     494:	88 23       	and	r24, r24
     496:	39 f0       	breq	.+14     	; 0x4a6 <EVENT_USB_Host_DeviceEnumerationComplete+0x72>
	{
		puts_P(PSTR("Error Setting Device Configuration.\r\n"));
     498:	81 e8       	ldi	r24, 0x81	; 129
     49a:	91 e0       	ldi	r25, 0x01	; 1
     49c:	9d d7       	rcall	.+3898   	; 0x13d8 <puts_P>
     49e:	8b b1       	in	r24, 0x0b	; 11
     4a0:	8f 70       	andi	r24, 0x0F	; 15
     4a2:	80 69       	ori	r24, 0x90	; 144
     4a4:	40 c0       	rjmp	.+128    	; 0x526 <EVENT_USB_Host_DeviceEnumerationComplete+0xf2>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (Audio_Host_StartStopStreaming(&Microphone_Audio_Interface, true) != HOST_SENDCONTROL_Successful)
     4a6:	80 e0       	ldi	r24, 0x00	; 0
     4a8:	91 e0       	ldi	r25, 0x01	; 1
     4aa:	61 e0       	ldi	r22, 0x01	; 1
     4ac:	6a d6       	rcall	.+3284   	; 0x1182 <Audio_Host_StartStopStreaming>
     4ae:	88 23       	and	r24, r24
     4b0:	19 f0       	breq	.+6      	; 0x4b8 <EVENT_USB_Host_DeviceEnumerationComplete+0x84>
	{
		puts_P(PSTR("Error Enabling Audio Stream.\r\n"));
     4b2:	82 e6       	ldi	r24, 0x62	; 98
     4b4:	91 e0       	ldi	r25, 0x01	; 1
     4b6:	1b c0       	rjmp	.+54     	; 0x4ee <EVENT_USB_Host_DeviceEnumerationComplete+0xba>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		USB_Host_SetDeviceConfiguration(0);
		return;
	}

	USB_Audio_SampleFreq_t SampleRate = AUDIO_SAMPLE_FREQ(48000);
     4b8:	de 01       	movw	r26, r28
     4ba:	13 96       	adiw	r26, 0x03	; 3
     4bc:	ea e0       	ldi	r30, 0x0A	; 10
     4be:	f1 e0       	ldi	r31, 0x01	; 1
     4c0:	83 e0       	ldi	r24, 0x03	; 3
     4c2:	01 90       	ld	r0, Z+
     4c4:	0d 92       	st	X+, r0
     4c6:	81 50       	subi	r24, 0x01	; 1
     4c8:	e1 f7       	brne	.-8      	; 0x4c2 <EVENT_USB_Host_DeviceEnumerationComplete+0x8e>
	if (Audio_Host_GetSetEndpointProperty(&Microphone_Audio_Interface, Microphone_Audio_Interface.Config.DataINPipeNumber,
     4ca:	80 e0       	ldi	r24, 0x00	; 0
     4cc:	91 e0       	ldi	r25, 0x01	; 1
     4ce:	60 91 00 01 	lds	r22, 0x0100
     4d2:	41 e0       	ldi	r20, 0x01	; 1
     4d4:	21 e0       	ldi	r18, 0x01	; 1
     4d6:	03 e0       	ldi	r16, 0x03	; 3
     4d8:	10 e0       	ldi	r17, 0x00	; 0
     4da:	33 e0       	ldi	r19, 0x03	; 3
     4dc:	e3 2e       	mov	r14, r19
     4de:	f1 2c       	mov	r15, r1
     4e0:	ec 0e       	add	r14, r28
     4e2:	fd 1e       	adc	r15, r29
     4e4:	18 d6       	rcall	.+3120   	; 0x1116 <Audio_Host_GetSetEndpointProperty>
     4e6:	88 23       	and	r24, r24
     4e8:	51 f0       	breq	.+20     	; 0x4fe <EVENT_USB_Host_DeviceEnumerationComplete+0xca>
	                                      AUDIO_REQ_SetCurrent, AUDIO_EPCONTROL_SamplingFreq,
	                                      sizeof(SampleRate), &SampleRate) != HOST_SENDCONTROL_Successful)
	{
		puts_P(PSTR("Error Setting Audio Sampling Frequency.\r\n"));
     4ea:	88 e3       	ldi	r24, 0x38	; 56
     4ec:	91 e0       	ldi	r25, 0x01	; 1
     4ee:	74 d7       	rcall	.+3816   	; 0x13d8 <puts_P>
     4f0:	8b b1       	in	r24, 0x0b	; 11
     4f2:	8f 70       	andi	r24, 0x0F	; 15
     4f4:	80 69       	ori	r24, 0x90	; 144
     4f6:	8b b9       	out	0x0b, r24	; 11
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		USB_Host_SetDeviceConfiguration(0);
     4f8:	80 e0       	ldi	r24, 0x00	; 0
     4fa:	aa d5       	rcall	.+2900   	; 0x1050 <USB_Host_SetDeviceConfiguration>
     4fc:	15 c0       	rjmp	.+42     	; 0x528 <EVENT_USB_Host_DeviceEnumerationComplete+0xf4>
		return;
	}

	/* Sample reload timer initialization */
	TIMSK0  = (1 << OCIE0A);
     4fe:	92 e0       	ldi	r25, 0x02	; 2
     500:	90 93 6e 00 	sts	0x006E, r25
	OCR0A   = ((F_CPU / 8 / 48000) - 1);
     504:	83 e1       	ldi	r24, 0x13	; 19
     506:	87 bd       	out	0x27, r24	; 39
	TCCR0A  = (1 << WGM01);  // CTC mode
     508:	94 bd       	out	0x24, r25	; 36
	TCCR0B  = (1 << CS01);   // Fcpu/8 speed	
     50a:	95 bd       	out	0x25, r25	; 37

	/* Set speaker as output */
	DDRC   |= (1 << 6);
     50c:	3e 9a       	sbi	0x07, 6	; 7

	/* PWM speaker timer initialization */
	TCCR3A  = ((1 << WGM30) | (1 << COM3A1) | (1 << COM3A0)); // Set on match, clear on TOP
     50e:	81 ec       	ldi	r24, 0xC1	; 193
     510:	80 93 90 00 	sts	0x0090, r24
	TCCR3B  = ((1 << WGM32) | (1 << CS30));  // Fast 8-Bit PWM, F_CPU speed
     514:	89 e0       	ldi	r24, 0x09	; 9
     516:	80 93 91 00 	sts	0x0091, r24

	puts_P(PSTR("Audio Device Enumerated.\r\n"));
     51a:	8d e1       	ldi	r24, 0x1D	; 29
     51c:	91 e0       	ldi	r25, 0x01	; 1
     51e:	5c d7       	rcall	.+3768   	; 0x13d8 <puts_P>
     520:	8b b1       	in	r24, 0x0b	; 11
     522:	8f 70       	andi	r24, 0x0F	; 15
     524:	80 66       	ori	r24, 0x60	; 96
     526:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
}
     528:	cb 5f       	subi	r28, 0xFB	; 251
     52a:	dd 4f       	sbci	r29, 0xFD	; 253
     52c:	0f b6       	in	r0, 0x3f	; 63
     52e:	f8 94       	cli
     530:	de bf       	out	0x3e, r29	; 62
     532:	0f be       	out	0x3f, r0	; 63
     534:	cd bf       	out	0x3d, r28	; 61
     536:	cf 91       	pop	r28
     538:	df 91       	pop	r29
     53a:	1f 91       	pop	r17
     53c:	0f 91       	pop	r16
     53e:	ff 90       	pop	r15
     540:	ef 90       	pop	r14
     542:	08 95       	ret

00000544 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     544:	84 b7       	in	r24, 0x34	; 52
     546:	87 7f       	andi	r24, 0xF7	; 247
     548:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     54a:	38 e1       	ldi	r19, 0x18	; 24
     54c:	0f b6       	in	r0, 0x3f	; 63
     54e:	f8 94       	cli
     550:	30 93 60 00 	sts	0x0060, r19
     554:	10 92 60 00 	sts	0x0060, r1
     558:	0f be       	out	0x3f, r0	; 63

	/* Disable clock division */
	clock_prescale_set(clock_div_1);
     55a:	80 e0       	ldi	r24, 0x00	; 0
     55c:	90 e0       	ldi	r25, 0x00	; 0
     55e:	20 e8       	ldi	r18, 0x80	; 128
     560:	0f b6       	in	r0, 0x3f	; 63
     562:	f8 94       	cli
     564:	20 93 61 00 	sts	0x0061, r18
     568:	80 93 61 00 	sts	0x0061, r24
     56c:	0f be       	out	0x3f, r0	; 63
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     56e:	83 e3       	ldi	r24, 0x33	; 51
     570:	90 e0       	ldi	r25, 0x00	; 0
     572:	90 93 cd 00 	sts	0x00CD, r25
     576:	80 93 cc 00 	sts	0x00CC, r24

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     57a:	86 e0       	ldi	r24, 0x06	; 6
     57c:	80 93 ca 00 	sts	0x00CA, r24
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     580:	10 92 c8 00 	sts	0x00C8, r1
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     584:	30 93 c9 00 	sts	0x00C9, r19

				DDRD  |= (1 << 3);
     588:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     58a:	5a 9a       	sbi	0x0b, 2	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     58c:	8a b1       	in	r24, 0x0a	; 10
     58e:	80 6f       	ori	r24, 0xF0	; 240
     590:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     592:	8b b1       	in	r24, 0x0b	; 11
     594:	8f 70       	andi	r24, 0x0F	; 15
     596:	8b b9       	out	0x0b, r24	; 11

	/* Hardware Initialization */
	Serial_Init(9600, false);
	LEDs_Init();
	USB_Init();
     598:	b4 d2       	rcall	.+1384   	; 0xb02 <USB_Init>
			static inline void Serial_CreateStream(FILE* Stream)
			{
				if (!(Stream))
				{
					Stream = &USARTSerialStream;
					stdin  = Stream;
     59a:	ec e2       	ldi	r30, 0x2C	; 44
     59c:	f1 e0       	ldi	r31, 0x01	; 1
     59e:	f0 93 3b 01 	sts	0x013B, r31
     5a2:	e0 93 3a 01 	sts	0x013A, r30
					stdout = Stream;
     5a6:	f0 93 3d 01 	sts	0x013D, r31
     5aa:	e0 93 3c 01 	sts	0x013C, r30
				}
			
				*Stream = (FILE)FDEV_SETUP_STREAM(Serial_putchar, Serial_getchar, _FDEV_SETUP_RW);
     5ae:	8e e0       	ldi	r24, 0x0E	; 14
     5b0:	df 01       	movw	r26, r30
     5b2:	1d 92       	st	X+, r1
     5b4:	8a 95       	dec	r24
     5b6:	e9 f7       	brne	.-6      	; 0x5b2 <SetupHardware+0x6e>
     5b8:	83 e0       	ldi	r24, 0x03	; 3
     5ba:	80 93 2f 01 	sts	0x012F, r24
     5be:	8c ea       	ldi	r24, 0xAC	; 172
     5c0:	99 e0       	ldi	r25, 0x09	; 9
     5c2:	90 93 35 01 	sts	0x0135, r25
     5c6:	80 93 34 01 	sts	0x0134, r24
     5ca:	86 eb       	ldi	r24, 0xB6	; 182
     5cc:	99 e0       	ldi	r25, 0x09	; 9
     5ce:	90 93 37 01 	sts	0x0137, r25
     5d2:	80 93 36 01 	sts	0x0136, r24

	/* Create a stdio stream for the serial port for stdin and stdout */
	Serial_CreateStream(NULL);
}
     5d6:	08 95       	ret

000005d8 <main>:
/** Main program entry point. This routine configures the hardware required by the application, then
 *  enters a loop to run the application tasks in sequence.
 */
int main(void)
{
	SetupHardware();
     5d8:	b5 df       	rcall	.-150    	; 0x544 <SetupHardware>

	puts_P(PSTR(ESC_FG_CYAN "Audio Input Host Demo running.\r\n" ESC_FG_WHITE));
     5da:	80 e3       	ldi	r24, 0x30	; 48
     5dc:	92 e0       	ldi	r25, 0x02	; 2
     5de:	fc d6       	rcall	.+3576   	; 0x13d8 <puts_P>
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     5e0:	8b b1       	in	r24, 0x0b	; 11
     5e2:	8f 70       	andi	r24, 0x0F	; 15
     5e4:	80 61       	ori	r24, 0x10	; 16
     5e6:	8b b9       	out	0x0b, r24	; 11

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
	sei();
     5e8:	78 94       	sei

	for (;;)
	{
		Audio_Host_USBTask(&Microphone_Audio_Interface);
		USB_USBTask();
     5ea:	57 d5       	rcall	.+2734   	; 0x109a <USB_USBTask>
     5ec:	fe cf       	rjmp	.-4      	; 0x5ea <main+0x12>

000005ee <USB_Host_WaitMS>:
		USB_ResetInterface();
	}
}

uint8_t USB_Host_WaitMS(uint8_t MS)
{
     5ee:	98 2f       	mov	r25, r24
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     5f0:	20 91 9e 00 	lds	r18, 0x009E
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     5f4:	30 91 a0 00 	lds	r19, 0x00A0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     5f8:	80 91 a0 00 	lds	r24, 0x00A0
     5fc:	8f 7d       	andi	r24, 0xDF	; 223
     5fe:	80 93 a0 00 	sts	0x00A0, r24
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     602:	80 91 9f 00 	lds	r24, 0x009F
     606:	8f 7d       	andi	r24, 0xDF	; 223
     608:	80 93 9f 00 	sts	0x009F, r24
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     60c:	80 91 9e 00 	lds	r24, 0x009E
     610:	81 60       	ori	r24, 0x01	; 1
     612:	80 93 9e 00 	sts	0x009E, r24
     616:	28 c0       	rjmp	.+80     	; 0x668 <USB_Host_WaitMS+0x7a>
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     618:	80 91 9f 00 	lds	r24, 0x009F

	USB_Host_ResumeBus();

	while (MS)
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     61c:	85 ff       	sbrs	r24, 5
     61e:	06 c0       	rjmp	.+12     	; 0x62c <USB_Host_WaitMS+0x3e>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     620:	80 91 9f 00 	lds	r24, 0x009F
     624:	8f 7d       	andi	r24, 0xDF	; 223
     626:	80 93 9f 00 	sts	0x009F, r24
		{
			USB_INT_Clear(USB_INT_HSOFI);
			MS--;
     62a:	91 50       	subi	r25, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
     62c:	80 91 2b 01 	lds	r24, 0x012B
     630:	81 30       	cpi	r24, 0x01	; 1
     632:	11 f4       	brne	.+4      	; 0x638 <USB_Host_WaitMS+0x4a>
     634:	91 e0       	ldi	r25, 0x01	; 1
     636:	1a c0       	rjmp	.+52     	; 0x66c <USB_Host_WaitMS+0x7e>
			 *  \return Boolean \c true if an error has occurred on the selected pipe, \c false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
     638:	80 91 a6 00 	lds	r24, 0x00A6
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError() == true)
     63c:	84 ff       	sbrs	r24, 4
     63e:	09 c0       	rjmp	.+18     	; 0x652 <USB_Host_WaitMS+0x64>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     640:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
     644:	80 91 a6 00 	lds	r24, 0x00A6
     648:	8f 7e       	andi	r24, 0xEF	; 239
     64a:	80 93 a6 00 	sts	0x00A6, r24
     64e:	92 e0       	ldi	r25, 0x02	; 2
     650:	0d c0       	rjmp	.+26     	; 0x66c <USB_Host_WaitMS+0x7e>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     652:	80 91 a6 00 	lds	r24, 0x00A6
			ErrorCode = HOST_WAITERROR_PipeError;

			break;
		}

		if (Pipe_IsStalled() == true)
     656:	81 ff       	sbrs	r24, 1
     658:	07 c0       	rjmp	.+14     	; 0x668 <USB_Host_WaitMS+0x7a>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
     65a:	80 91 a6 00 	lds	r24, 0x00A6
     65e:	8d 7f       	andi	r24, 0xFD	; 253
     660:	80 93 a6 00 	sts	0x00A6, r24
     664:	93 e0       	ldi	r25, 0x03	; 3
     666:	02 c0       	rjmp	.+4      	; 0x66c <USB_Host_WaitMS+0x7e>
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     668:	99 23       	and	r25, r25
     66a:	b1 f6       	brne	.-84     	; 0x618 <USB_Host_WaitMS+0x2a>

			break;
		}
	}

	if (BusSuspended)
     66c:	20 fd       	sbrc	r18, 0
     66e:	05 c0       	rjmp	.+10     	; 0x67a <USB_Host_WaitMS+0x8c>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     670:	80 91 9e 00 	lds	r24, 0x009E
     674:	8e 7f       	andi	r24, 0xFE	; 254
     676:	80 93 9e 00 	sts	0x009E, r24
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
     67a:	35 ff       	sbrs	r19, 5
     67c:	05 c0       	rjmp	.+10     	; 0x688 <USB_Host_WaitMS+0x9a>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     67e:	80 91 a0 00 	lds	r24, 0x00A0
     682:	80 62       	ori	r24, 0x20	; 32
     684:	80 93 a0 00 	sts	0x00A0, r24
	  USB_INT_Enable(USB_INT_HSOFI);

	return ErrorCode;
}
     688:	89 2f       	mov	r24, r25
     68a:	08 95       	ret

0000068c <USB_Host_ResetDevice>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     68c:	60 91 9e 00 	lds	r22, 0x009E
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     690:	80 91 a0 00 	lds	r24, 0x00A0
     694:	8d 7f       	andi	r24, 0xFD	; 253
     696:	80 93 a0 00 	sts	0x00A0, r24
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
     69a:	80 91 9e 00 	lds	r24, 0x009E
     69e:	82 60       	ori	r24, 0x02	; 2
     6a0:	80 93 9e 00 	sts	0x009E, r24
			 *  \return Boolean \c true if no bus reset is currently being sent, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
     6a4:	80 91 9e 00 	lds	r24, 0x009E
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
     6a8:	81 fd       	sbrc	r24, 1
     6aa:	fc cf       	rjmp	.-8      	; 0x6a4 <USB_Host_ResetDevice+0x18>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     6ac:	80 91 9e 00 	lds	r24, 0x009E
     6b0:	81 60       	ori	r24, 0x01	; 1
     6b2:	80 93 9e 00 	sts	0x009E, r24
	USB_Host_ResumeBus();
	
	USB_Host_ConfigurationNumber = 0;
     6b6:	10 92 21 01 	sts	0x0121, r1
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     6ba:	30 91 a0 00 	lds	r19, 0x00A0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     6be:	80 91 a0 00 	lds	r24, 0x00A0
     6c2:	8f 7d       	andi	r24, 0xDF	; 223
     6c4:	80 93 a0 00 	sts	0x00A0, r24
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     6c8:	80 91 9f 00 	lds	r24, 0x009F
     6cc:	8f 7d       	andi	r24, 0xDF	; 223
     6ce:	80 93 9f 00 	sts	0x009F, r24
     6d2:	2a e0       	ldi	r18, 0x0A	; 10
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     6d4:	40 ed       	ldi	r20, 0xD0	; 208
     6d6:	57 e0       	ldi	r21, 0x07	; 7
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     6d8:	80 91 9f 00 	lds	r24, 0x009F
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     6dc:	85 ff       	sbrs	r24, 5
     6de:	0b c0       	rjmp	.+22     	; 0x6f6 <USB_Host_ResetDevice+0x6a>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     6e0:	80 91 9f 00 	lds	r24, 0x009F
     6e4:	8f 7d       	andi	r24, 0xDF	; 223
     6e6:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     6ea:	80 91 9f 00 	lds	r24, 0x009F
     6ee:	8d 7f       	andi	r24, 0xFD	; 253
     6f0:	80 93 9f 00 	sts	0x009F, r24
     6f4:	05 c0       	rjmp	.+10     	; 0x700 <USB_Host_ResetDevice+0x74>
     6f6:	ca 01       	movw	r24, r20
     6f8:	01 97       	sbiw	r24, 0x01	; 1
     6fa:	f1 f7       	brne	.-4      	; 0x6f8 <USB_Host_ResetDevice+0x6c>
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
     6fc:	21 50       	subi	r18, 0x01	; 1
     6fe:	61 f7       	brne	.-40     	; 0x6d8 <USB_Host_ResetDevice+0x4c>
		}

		Delay_MS(1);
	}

	if (HSOFIEnabled)
     700:	35 ff       	sbrs	r19, 5
     702:	05 c0       	rjmp	.+10     	; 0x70e <USB_Host_ResetDevice+0x82>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     704:	80 91 a0 00 	lds	r24, 0x00A0
     708:	80 62       	ori	r24, 0x20	; 32
     70a:	80 93 a0 00 	sts	0x00A0, r24
	  USB_INT_Enable(USB_INT_HSOFI);

	if (BusSuspended)
     70e:	60 fd       	sbrc	r22, 0
     710:	05 c0       	rjmp	.+10     	; 0x71c <USB_Host_ResetDevice+0x90>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     712:	80 91 9e 00 	lds	r24, 0x009E
     716:	8e 7f       	andi	r24, 0xFE	; 254
     718:	80 93 9e 00 	sts	0x009E, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     71c:	80 91 a0 00 	lds	r24, 0x00A0
     720:	82 60       	ori	r24, 0x02	; 2
     722:	80 93 a0 00 	sts	0x00A0, r24
	  USB_Host_SuspendBus();

	USB_INT_Enable(USB_INT_DDISCI);
}
     726:	08 95       	ret

00000728 <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "../Host.h"

void USB_Host_ProcessNextHostState(void)
{
     728:	ef 92       	push	r14
     72a:	0f 93       	push	r16
     72c:	1f 93       	push	r17
     72e:	df 93       	push	r29
     730:	cf 93       	push	r28
     732:	cd b7       	in	r28, 0x3d	; 61
     734:	de b7       	in	r29, 0x3e	; 62
     736:	28 97       	sbiw	r28, 0x08	; 8
     738:	0f b6       	in	r0, 0x3f	; 63
     73a:	f8 94       	cli
     73c:	de bf       	out	0x3e, r29	; 62
     73e:	0f be       	out	0x3f, r0	; 63
     740:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
     742:	80 91 2b 01 	lds	r24, 0x012B
     746:	85 30       	cpi	r24, 0x05	; 5
     748:	09 f4       	brne	.+2      	; 0x74c <USB_Host_ProcessNextHostState+0x24>
     74a:	94 c0       	rjmp	.+296    	; 0x874 <USB_Host_ProcessNextHostState+0x14c>
     74c:	86 30       	cpi	r24, 0x06	; 6
     74e:	68 f4       	brcc	.+26     	; 0x76a <USB_Host_ProcessNextHostState+0x42>
     750:	82 30       	cpi	r24, 0x02	; 2
     752:	b9 f1       	breq	.+110    	; 0x7c2 <USB_Host_ProcessNextHostState+0x9a>
     754:	83 30       	cpi	r24, 0x03	; 3
     756:	18 f4       	brcc	.+6      	; 0x75e <USB_Host_ProcessNextHostState+0x36>
     758:	88 23       	and	r24, r24
     75a:	a1 f0       	breq	.+40     	; 0x784 <USB_Host_ProcessNextHostState+0x5c>
     75c:	04 c1       	rjmp	.+520    	; 0x966 <USB_Host_ProcessNextHostState+0x23e>
     75e:	83 30       	cpi	r24, 0x03	; 3
     760:	d1 f1       	breq	.+116    	; 0x7d6 <USB_Host_ProcessNextHostState+0xae>
     762:	84 30       	cpi	r24, 0x04	; 4
     764:	09 f0       	breq	.+2      	; 0x768 <USB_Host_ProcessNextHostState+0x40>
     766:	ff c0       	rjmp	.+510    	; 0x966 <USB_Host_ProcessNextHostState+0x23e>
     768:	5d c0       	rjmp	.+186    	; 0x824 <USB_Host_ProcessNextHostState+0xfc>
     76a:	87 30       	cpi	r24, 0x07	; 7
     76c:	09 f4       	brne	.+2      	; 0x770 <USB_Host_ProcessNextHostState+0x48>
     76e:	9b c0       	rjmp	.+310    	; 0x8a6 <USB_Host_ProcessNextHostState+0x17e>
     770:	87 30       	cpi	r24, 0x07	; 7
     772:	08 f4       	brcc	.+2      	; 0x776 <USB_Host_ProcessNextHostState+0x4e>
     774:	8a c0       	rjmp	.+276    	; 0x88a <USB_Host_ProcessNextHostState+0x162>
     776:	88 30       	cpi	r24, 0x08	; 8
     778:	09 f4       	brne	.+2      	; 0x77c <USB_Host_ProcessNextHostState+0x54>
     77a:	b3 c0       	rjmp	.+358    	; 0x8e2 <USB_Host_ProcessNextHostState+0x1ba>
     77c:	89 30       	cpi	r24, 0x09	; 9
     77e:	09 f0       	breq	.+2      	; 0x782 <USB_Host_ProcessNextHostState+0x5a>
     780:	f2 c0       	rjmp	.+484    	; 0x966 <USB_Host_ProcessNextHostState+0x23e>
     782:	d7 c0       	rjmp	.+430    	; 0x932 <USB_Host_ProcessNextHostState+0x20a>
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
     784:	00 91 1f 01 	lds	r16, 0x011F
     788:	10 91 20 01 	lds	r17, 0x0120
     78c:	01 15       	cp	r16, r1
     78e:	11 05       	cpc	r17, r1
     790:	09 f4       	brne	.+2      	; 0x794 <USB_Host_ProcessNextHostState+0x6c>
     792:	e9 c0       	rjmp	.+466    	; 0x966 <USB_Host_ProcessNextHostState+0x23e>
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     794:	81 e0       	ldi	r24, 0x01	; 1
     796:	2b df       	rcall	.-426    	; 0x5ee <USB_Host_WaitMS>
     798:	68 2f       	mov	r22, r24
     79a:	88 23       	and	r24, r24
     79c:	31 f0       	breq	.+12     	; 0x7aa <USB_Host_ProcessNextHostState+0x82>
				{
					USB_HostState = PostWaitState;
     79e:	80 91 1e 01 	lds	r24, 0x011E
     7a2:	80 93 2b 01 	sts	0x012B, r24
     7a6:	91 e0       	ldi	r25, 0x01	; 1
     7a8:	da c0       	rjmp	.+436    	; 0x95e <USB_Host_ProcessNextHostState+0x236>
					ErrorCode     = HOST_ENUMERROR_WaitStage;
					break;
				}

				if (!(--WaitMSRemaining))
     7aa:	c8 01       	movw	r24, r16
     7ac:	01 97       	sbiw	r24, 0x01	; 1
     7ae:	90 93 20 01 	sts	0x0120, r25
     7b2:	80 93 1f 01 	sts	0x011F, r24
     7b6:	89 2b       	or	r24, r25
     7b8:	09 f0       	breq	.+2      	; 0x7bc <USB_Host_ProcessNextHostState+0x94>
     7ba:	d5 c0       	rjmp	.+426    	; 0x966 <USB_Host_ProcessNextHostState+0x23e>
				  USB_HostState = PostWaitState;
     7bc:	80 91 1e 01 	lds	r24, 0x011E
     7c0:	07 c0       	rjmp	.+14     	; 0x7d0 <USB_Host_ProcessNextHostState+0xa8>
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
     7c2:	88 ee       	ldi	r24, 0xE8	; 232
     7c4:	93 e0       	ldi	r25, 0x03	; 3
     7c6:	90 93 20 01 	sts	0x0120, r25
     7ca:	80 93 1f 01 	sts	0x011F, r24

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
     7ce:	83 e0       	ldi	r24, 0x03	; 3
     7d0:	80 93 2b 01 	sts	0x012B, r24
     7d4:	c8 c0       	rjmp	.+400    	; 0x966 <USB_Host_ProcessNextHostState+0x23e>
			break;
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
     7d6:	80 91 1f 01 	lds	r24, 0x011F
     7da:	90 91 20 01 	lds	r25, 0x0120
     7de:	01 97       	sbiw	r24, 0x01	; 1
     7e0:	90 93 20 01 	sts	0x0120, r25
     7e4:	80 93 1f 01 	sts	0x011F, r24
     7e8:	01 96       	adiw	r24, 0x01	; 1
     7ea:	29 f0       	breq	.+10     	; 0x7f6 <USB_Host_ProcessNextHostState+0xce>
     7ec:	80 ed       	ldi	r24, 0xD0	; 208
     7ee:	97 e0       	ldi	r25, 0x07	; 7
     7f0:	01 97       	sbiw	r24, 0x01	; 1
     7f2:	f1 f7       	brne	.-4      	; 0x7f0 <USB_Host_ProcessNextHostState+0xc8>
     7f4:	b8 c0       	rjmp	.+368    	; 0x966 <USB_Host_ProcessNextHostState+0x23e>
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
     7f6:	77 98       	cbi	0x0e, 7	; 14

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     7f8:	80 91 d8 00 	lds	r24, 0x00D8
     7fc:	80 61       	ori	r24, 0x10	; 16
     7fe:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
     802:	80 91 dd 00 	lds	r24, 0x00DD
     806:	8b 7f       	andi	r24, 0xFB	; 251
     808:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON |=  (1 << UVCONE);
     80c:	80 91 d7 00 	lds	r24, 0x00D7
     810:	80 61       	ori	r24, 0x10	; 16
     812:	80 93 d7 00 	sts	0x00D7, r24
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
     816:	80 91 dd 00 	lds	r24, 0x00DD
     81a:	82 60       	ori	r24, 0x02	; 2
     81c:	80 93 dd 00 	sts	0x00DD, r24

				USB_OTGPAD_On();
				USB_Host_VBUS_Auto_Enable();
				USB_Host_VBUS_Auto_On();

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
     820:	84 e0       	ldi	r24, 0x04	; 4
     822:	d6 cf       	rjmp	.-84     	; 0x7d0 <USB_Host_ProcessNextHostState+0xa8>
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
     824:	80 91 9f 00 	lds	r24, 0x009F
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
     828:	80 ff       	sbrs	r24, 0
     82a:	9d c0       	rjmp	.+314    	; 0x966 <USB_Host_ProcessNextHostState+0x23e>
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     82c:	80 91 9f 00 	lds	r24, 0x009F
     830:	8e 7f       	andi	r24, 0xFE	; 254
     832:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     836:	80 91 9f 00 	lds	r24, 0x009F
     83a:	8d 7f       	andi	r24, 0xFD	; 253
     83c:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     840:	80 91 df 00 	lds	r24, 0x00DF
     844:	8d 7f       	andi	r24, 0xFD	; 253
     846:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
     84a:	80 91 de 00 	lds	r24, 0x00DE
     84e:	82 60       	ori	r24, 0x02	; 2
     850:	80 93 de 00 	sts	0x00DE, r24
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     854:	80 91 9e 00 	lds	r24, 0x009E
     858:	81 60       	ori	r24, 0x01	; 1
     85a:	80 93 9e 00 	sts	0x009E, r24

				USB_INT_Clear(USB_INT_VBERRI);
				USB_INT_Enable(USB_INT_VBERRI);

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
     85e:	ed d0       	rcall	.+474    	; 0xa3a <Pipe_ClearPipes>

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
     860:	10 92 2b 01 	sts	0x012B, r1
     864:	84 e6       	ldi	r24, 0x64	; 100
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	90 93 20 01 	sts	0x0120, r25
     86c:	80 93 1f 01 	sts	0x011F, r24
     870:	85 e0       	ldi	r24, 0x05	; 5
     872:	5c c0       	rjmp	.+184    	; 0x92c <USB_Host_ProcessNextHostState+0x204>
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
     874:	0b df       	rcall	.-490    	; 0x68c <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
     876:	10 92 2b 01 	sts	0x012B, r1
     87a:	88 ec       	ldi	r24, 0xC8	; 200
     87c:	90 e0       	ldi	r25, 0x00	; 0
     87e:	90 93 20 01 	sts	0x0120, r25
     882:	80 93 1f 01 	sts	0x011F, r24
     886:	86 e0       	ldi	r24, 0x06	; 6
     888:	51 c0       	rjmp	.+162    	; 0x92c <USB_Host_ProcessNextHostState+0x204>
			break;
		case HOST_STATE_Powered_ConfigPipe:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
     88a:	80 e0       	ldi	r24, 0x00	; 0
     88c:	60 e0       	ldi	r22, 0x00	; 0
     88e:	40 e0       	ldi	r20, 0x00	; 0
     890:	20 e0       	ldi	r18, 0x00	; 0
     892:	00 e4       	ldi	r16, 0x40	; 64
     894:	10 e0       	ldi	r17, 0x00	; 0
     896:	ee 24       	eor	r14, r14
     898:	72 d0       	rcall	.+228    	; 0x97e <Pipe_ConfigurePipe>
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     89a:	80 91 ac 00 	lds	r24, 0x00AC
							   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
							   PIPE_CONTROLPIPE_DEFAULT_SIZE, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
     89e:	87 ff       	sbrs	r24, 7
     8a0:	5c c0       	rjmp	.+184    	; 0x95a <USB_Host_ProcessNextHostState+0x232>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
     8a2:	87 e0       	ldi	r24, 0x07	; 7
     8a4:	95 cf       	rjmp	.-214    	; 0x7d0 <USB_Host_ProcessNextHostState+0xa8>
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
     8a6:	a3 e2       	ldi	r26, 0x23	; 35
     8a8:	b1 e0       	ldi	r27, 0x01	; 1
     8aa:	e5 e1       	ldi	r30, 0x15	; 21
     8ac:	f1 e0       	ldi	r31, 0x01	; 1
     8ae:	88 e0       	ldi	r24, 0x08	; 8
     8b0:	01 90       	ld	r0, Z+
     8b2:	0d 92       	st	X+, r0
     8b4:	81 50       	subi	r24, 0x01	; 1
     8b6:	e1 f7       	brne	.-8      	; 0x8b0 <USB_Host_ProcessNextHostState+0x188>
					.wLength       = 8,
				};

			uint8_t DataBuffer[8];

			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
     8b8:	ce 01       	movw	r24, r28
     8ba:	01 96       	adiw	r24, 0x01	; 1
     8bc:	ab d2       	rcall	.+1366   	; 0xe14 <USB_Host_SendControlRequest>
     8be:	68 2f       	mov	r22, r24
     8c0:	88 23       	and	r24, r24
     8c2:	09 f0       	breq	.+2      	; 0x8c6 <USB_Host_ProcessNextHostState+0x19e>
     8c4:	48 c0       	rjmp	.+144    	; 0x956 <USB_Host_ProcessNextHostState+0x22e>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_Host_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
     8c6:	88 85       	ldd	r24, Y+8	; 0x08
     8c8:	80 93 1d 01 	sts	0x011D, r24

			USB_Host_ResetDevice();
     8cc:	df de       	rcall	.-578    	; 0x68c <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
     8ce:	10 92 2b 01 	sts	0x012B, r1
     8d2:	88 ec       	ldi	r24, 0xC8	; 200
     8d4:	90 e0       	ldi	r25, 0x00	; 0
     8d6:	90 93 20 01 	sts	0x0120, r25
     8da:	80 93 1f 01 	sts	0x011F, r24
     8de:	88 e0       	ldi	r24, 0x08	; 8
     8e0:	25 c0       	rjmp	.+74     	; 0x92c <USB_Host_ProcessNextHostState+0x204>
			break;
		case HOST_STATE_Default_PostReset:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
     8e2:	00 91 1d 01 	lds	r16, 0x011D
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	60 e0       	ldi	r22, 0x00	; 0
     8ea:	40 e0       	ldi	r20, 0x00	; 0
     8ec:	20 e0       	ldi	r18, 0x00	; 0
     8ee:	10 e0       	ldi	r17, 0x00	; 0
     8f0:	ee 24       	eor	r14, r14
     8f2:	45 d0       	rcall	.+138    	; 0x97e <Pipe_ConfigurePipe>
     8f4:	80 91 ac 00 	lds	r24, 0x00AC
			                   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
			                   USB_Host_ControlPipeSize, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
     8f8:	87 ff       	sbrs	r24, 7
     8fa:	2f c0       	rjmp	.+94     	; 0x95a <USB_Host_ProcessNextHostState+0x232>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
     8fc:	a3 e2       	ldi	r26, 0x23	; 35
     8fe:	b1 e0       	ldi	r27, 0x01	; 1
     900:	ed e0       	ldi	r30, 0x0D	; 13
     902:	f1 e0       	ldi	r31, 0x01	; 1
     904:	88 e0       	ldi	r24, 0x08	; 8
     906:	01 90       	ld	r0, Z+
     908:	0d 92       	st	X+, r0
     90a:	81 50       	subi	r24, 0x01	; 1
     90c:	e1 f7       	brne	.-8      	; 0x906 <USB_Host_ProcessNextHostState+0x1de>
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
     90e:	80 e0       	ldi	r24, 0x00	; 0
     910:	90 e0       	ldi	r25, 0x00	; 0
     912:	80 d2       	rcall	.+1280   	; 0xe14 <USB_Host_SendControlRequest>
     914:	68 2f       	mov	r22, r24
     916:	88 23       	and	r24, r24
     918:	f1 f4       	brne	.+60     	; 0x956 <USB_Host_ProcessNextHostState+0x22e>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
     91a:	10 92 2b 01 	sts	0x012B, r1
     91e:	84 e6       	ldi	r24, 0x64	; 100
     920:	90 e0       	ldi	r25, 0x00	; 0
     922:	90 93 20 01 	sts	0x0120, r25
     926:	80 93 1f 01 	sts	0x011F, r24
     92a:	89 e0       	ldi	r24, 0x09	; 9
     92c:	80 93 1e 01 	sts	0x011E, r24
     930:	1a c0       	rjmp	.+52     	; 0x966 <USB_Host_ProcessNextHostState+0x23e>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
     932:	81 e0       	ldi	r24, 0x01	; 1
     934:	80 93 a1 00 	sts	0x00A1, r24
			break;
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			USB_HostState = HOST_STATE_Addressed;
     938:	8a e0       	ldi	r24, 0x0A	; 10
     93a:	80 93 2b 01 	sts	0x012B, r24

			EVENT_USB_Host_DeviceEnumerationComplete();
     93e:	7a dd       	rcall	.-1292   	; 0x434 <EVENT_USB_Host_DeviceEnumerationComplete>
     940:	12 c0       	rjmp	.+36     	; 0x966 <USB_Host_ProcessNextHostState+0x23e>
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
     942:	89 2f       	mov	r24, r25
     944:	20 dd       	rcall	.-1472   	; 0x386 <EVENT_USB_Host_DeviceEnumerationFailed>
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     946:	80 91 dd 00 	lds	r24, 0x00DD
     94a:	81 60       	ori	r24, 0x01	; 1
     94c:	80 93 dd 00 	sts	0x00DD, r24

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
     950:	61 dd       	rcall	.-1342   	; 0x414 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     952:	87 d0       	rcall	.+270    	; 0xa62 <USB_ResetInterface>
     954:	08 c0       	rjmp	.+16     	; 0x966 <USB_Host_ProcessNextHostState+0x23e>
	}
}
     956:	93 e0       	ldi	r25, 0x03	; 3
     958:	02 c0       	rjmp	.+4      	; 0x95e <USB_Host_ProcessNextHostState+0x236>
     95a:	94 e0       	ldi	r25, 0x04	; 4
     95c:	60 e0       	ldi	r22, 0x00	; 0

			EVENT_USB_Host_DeviceEnumerationComplete();
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
     95e:	80 91 2b 01 	lds	r24, 0x012B
     962:	81 30       	cpi	r24, 0x01	; 1
     964:	71 f7       	brne	.-36     	; 0x942 <USB_Host_ProcessNextHostState+0x21a>

		EVENT_USB_Host_DeviceUnattached();

		USB_ResetInterface();
	}
}
     966:	28 96       	adiw	r28, 0x08	; 8
     968:	0f b6       	in	r0, 0x3f	; 63
     96a:	f8 94       	cli
     96c:	de bf       	out	0x3e, r29	; 62
     96e:	0f be       	out	0x3f, r0	; 63
     970:	cd bf       	out	0x3d, r28	; 61
     972:	cf 91       	pop	r28
     974:	df 91       	pop	r29
     976:	1f 91       	pop	r17
     978:	0f 91       	pop	r16
     97a:	ef 90       	pop	r14
     97c:	08 95       	ret

0000097e <Pipe_ConfigurePipe>:
                        const uint8_t Type,
                        const uint8_t Token,
                        const uint8_t EndpointNumber,
                        const uint16_t Size,
                        const uint8_t Banks)
{
     97e:	ef 92       	push	r14
     980:	0f 93       	push	r16
     982:	1f 93       	push	r17
     984:	e8 2f       	mov	r30, r24
     986:	7e 2d       	mov	r23, r14

		Pipe_SelectPipe(PNum);
		
		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
     988:	62 95       	swap	r22
     98a:	66 0f       	add	r22, r22
     98c:	66 0f       	add	r22, r22
     98e:	60 7c       	andi	r22, 0xC0	; 192
     990:	64 2b       	or	r22, r20
     992:	2f 70       	andi	r18, 0x0F	; 15
     994:	62 2b       	or	r22, r18
     996:	38 2f       	mov	r19, r24
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     998:	72 60       	ori	r23, 0x02	; 2
     99a:	45 c0       	rjmp	.+138    	; 0xa26 <Pipe_ConfigurePipe+0xa8>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     99c:	30 93 a7 00 	sts	0x00A7, r19
		uint8_t UPCFG2XTemp;
		uint8_t UPIENXTemp;

		Pipe_SelectPipe(PNum);
		
		if (PNum == Number)
     9a0:	3e 17       	cp	r19, r30
     9a2:	a1 f4       	brne	.+40     	; 0x9cc <Pipe_ConfigurePipe+0x4e>
     9a4:	88 e0       	ldi	r24, 0x08	; 8
     9a6:	90 e0       	ldi	r25, 0x00	; 0
     9a8:	20 e0       	ldi	r18, 0x00	; 0
     9aa:	03 c0       	rjmp	.+6      	; 0x9b2 <Pipe_ConfigurePipe+0x34>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
				{
					MaskVal++;
     9ac:	2f 5f       	subi	r18, 0xFF	; 255
					CheckBytes <<= 1;
     9ae:	88 0f       	add	r24, r24
     9b0:	99 1f       	adc	r25, r25
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
     9b2:	80 17       	cp	r24, r16
     9b4:	91 07       	cpc	r25, r17
     9b6:	10 f4       	brcc	.+4      	; 0x9bc <Pipe_ConfigurePipe+0x3e>
     9b8:	25 30       	cpi	r18, 0x05	; 5
     9ba:	c1 f7       	brne	.-16     	; 0x9ac <Pipe_ConfigurePipe+0x2e>
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     9bc:	92 2f       	mov	r25, r18
     9be:	92 95       	swap	r25
     9c0:	90 7f       	andi	r25, 0xF0	; 240
     9c2:	97 2b       	or	r25, r23
     9c4:	56 2f       	mov	r21, r22
     9c6:	40 e0       	ldi	r20, 0x00	; 0
     9c8:	20 e0       	ldi	r18, 0x00	; 0
     9ca:	08 c0       	rjmp	.+16     	; 0x9dc <Pipe_ConfigurePipe+0x5e>
			UPCFG2XTemp = 0;
			UPIENXTemp  = 0;
		}
		else
		{
			UPCFG0XTemp = UPCFG0X;
     9cc:	50 91 aa 00 	lds	r21, 0x00AA
			UPCFG1XTemp = UPCFG1X;
     9d0:	90 91 ab 00 	lds	r25, 0x00AB
			UPCFG2XTemp = UPCFG2X;
     9d4:	40 91 ad 00 	lds	r20, 0x00AD
			UPIENXTemp  = UPIENX;
     9d8:	20 91 ae 00 	lds	r18, 0x00AE
		}

		if (!(UPCFG1XTemp & (1 << ALLOC)))
     9dc:	91 ff       	sbrs	r25, 1
     9de:	22 c0       	rjmp	.+68     	; 0xa24 <Pipe_ConfigurePipe+0xa6>
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     9e0:	80 91 a9 00 	lds	r24, 0x00A9
     9e4:	8e 7f       	andi	r24, 0xFE	; 254
     9e6:	80 93 a9 00 	sts	0x00A9, r24
		  continue;
		  
		Pipe_DisablePipe();
		UPCFG1X &= ~(1 << ALLOC);
     9ea:	80 91 ab 00 	lds	r24, 0x00AB
     9ee:	8d 7f       	andi	r24, 0xFD	; 253
     9f0:	80 93 ab 00 	sts	0x00AB, r24
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
     9f4:	80 91 a9 00 	lds	r24, 0x00A9
     9f8:	81 60       	ori	r24, 0x01	; 1
     9fa:	80 93 a9 00 	sts	0x00A9, r24

		Pipe_EnablePipe();
		UPCFG0X = UPCFG0XTemp;
     9fe:	50 93 aa 00 	sts	0x00AA, r21
		UPCFG1X = UPCFG1XTemp;
     a02:	90 93 ab 00 	sts	0x00AB, r25
		UPCFG2X = UPCFG2XTemp;
     a06:	40 93 ad 00 	sts	0x00AD, r20
		UPIENX  = UPIENXTemp;
     a0a:	20 93 ae 00 	sts	0x00AE, r18

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
     a0e:	80 91 a9 00 	lds	r24, 0x00A9
     a12:	80 62       	ori	r24, 0x20	; 32
     a14:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     a18:	80 91 ac 00 	lds	r24, 0x00AC

		Pipe_SetInfiniteINRequests();
	
		if (!(Pipe_IsConfigured()))
     a1c:	87 fd       	sbrc	r24, 7
     a1e:	02 c0       	rjmp	.+4      	; 0xa24 <Pipe_ConfigurePipe+0xa6>
     a20:	80 e0       	ldi	r24, 0x00	; 0
     a22:	07 c0       	rjmp	.+14     	; 0xa32 <Pipe_ConfigurePipe+0xb4>

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else	
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
     a24:	3f 5f       	subi	r19, 0xFF	; 255
     a26:	37 30       	cpi	r19, 0x07	; 7
     a28:	08 f4       	brcc	.+2      	; 0xa2c <Pipe_ConfigurePipe+0xae>
     a2a:	b8 cf       	rjmp	.-144    	; 0x99c <Pipe_ConfigurePipe+0x1e>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     a2c:	e0 93 a7 00 	sts	0x00A7, r30
     a30:	81 e0       	ldi	r24, 0x01	; 1
	}
		
	Pipe_SelectPipe(Number);	
	return true;
#endif
}
     a32:	1f 91       	pop	r17
     a34:	0f 91       	pop	r16
     a36:	ef 90       	pop	r14
     a38:	08 95       	ret

00000a3a <Pipe_ClearPipes>:

void Pipe_ClearPipes(void)
{
	UPINT = 0;
     a3a:	10 92 f8 00 	sts	0x00F8, r1
     a3e:	90 e0       	ldi	r25, 0x00	; 0
     a40:	90 93 a7 00 	sts	0x00A7, r25

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
     a44:	10 92 ae 00 	sts	0x00AE, r1
		UPINTX  = 0;
     a48:	10 92 a6 00 	sts	0x00A6, r1
		UPCFG1X = 0;
     a4c:	10 92 ab 00 	sts	0x00AB, r1
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     a50:	80 91 a9 00 	lds	r24, 0x00A9
     a54:	8e 7f       	andi	r24, 0xFE	; 254
     a56:	80 93 a9 00 	sts	0x00A9, r24

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     a5a:	9f 5f       	subi	r25, 0xFF	; 255
     a5c:	97 30       	cpi	r25, 0x07	; 7
     a5e:	81 f7       	brne	.-32     	; 0xa40 <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
     a60:	08 95       	ret

00000a62 <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     a62:	70 d0       	rcall	.+224    	; 0xb44 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     a64:	77 d0       	rcall	.+238    	; 0xb54 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     a66:	80 91 d8 00 	lds	r24, 0x00D8
     a6a:	8f 77       	andi	r24, 0x7F	; 127
     a6c:	80 93 d8 00 	sts	0x00D8, r24
				USBCON |=  (1 << USBE);
     a70:	80 91 d8 00 	lds	r24, 0x00D8
     a74:	80 68       	ori	r24, 0x80	; 128
     a76:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
     a7a:	80 91 d8 00 	lds	r24, 0x00D8
     a7e:	8f 7d       	andi	r24, 0xDF	; 223
     a80:	80 93 d8 00 	sts	0x00D8, r24
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
     a84:	80 91 d7 00 	lds	r24, 0x00D7
     a88:	8f 77       	andi	r24, 0x7F	; 127
     a8a:	80 93 d7 00 	sts	0x00D7, r24

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     a8e:	8c e0       	ldi	r24, 0x0C	; 12
     a90:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     a92:	8e e0       	ldi	r24, 0x0E	; 14
     a94:	89 bd       	out	0x29, r24	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_CAN_BE_HOST)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));		
     a96:	09 b4       	in	r0, 0x29	; 41
     a98:	00 fe       	sbrs	r0, 0
     a9a:	fd cf       	rjmp	.-6      	; 0xa96 <USB_ResetInterface+0x34>
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState                = HOST_STATE_Unattached;
     a9c:	81 e0       	ldi	r24, 0x01	; 1
     a9e:	80 93 2b 01 	sts	0x012B, r24
	USB_Host_ConfigurationNumber = 0;
     aa2:	10 92 21 01 	sts	0x0121, r1
	USB_Host_ControlPipeSize     = PIPE_CONTROLPIPE_DEFAULT_SIZE;
     aa6:	80 e4       	ldi	r24, 0x40	; 64
     aa8:	80 93 1d 01 	sts	0x011D, r24
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
     aac:	80 91 d8 00 	lds	r24, 0x00D8
     ab0:	80 64       	ori	r24, 0x40	; 64
     ab2:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     ab6:	80 91 dd 00 	lds	r24, 0x00DD
     aba:	81 60       	ori	r24, 0x01	; 1
     abc:	80 93 dd 00 	sts	0x00DD, r24
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
     ac0:	80 91 dd 00 	lds	r24, 0x00DD
     ac4:	84 60       	ori	r24, 0x04	; 4
     ac6:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON &= ~(1 << UVCONE);
     aca:	80 91 d7 00 	lds	r24, 0x00D7
     ace:	8f 7e       	andi	r24, 0xEF	; 239
     ad0:	80 93 d7 00 	sts	0x00D7, r24

				DDRE   |=  (1 << 7);
     ad4:	6f 9a       	sbi	0x0d, 7	; 13
			}

			static inline void USB_Host_VBUS_Manual_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_On(void)
			{
				PORTE  |=  (1 << 7);
     ad6:	77 9a       	sbi	0x0e, 7	; 14
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN |= (1 << SRPE);						
     ad8:	80 91 de 00 	lds	r24, 0x00DE
     adc:	81 60       	ori	r24, 0x01	; 1
     ade:	80 93 de 00 	sts	0x00DE, r24
						break;
					case USB_INT_RSTI:
						UHIEN  |= (1 << RSTE);
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
     ae2:	80 91 de 00 	lds	r24, 0x00DE
     ae6:	84 60       	ori	r24, 0x04	; 4
     ae8:	80 93 de 00 	sts	0x00DE, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     aec:	80 91 e0 00 	lds	r24, 0x00E0
     af0:	8e 7f       	andi	r24, 0xFE	; 254
     af2:	80 93 e0 00 	sts	0x00E0, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     af6:	80 91 d8 00 	lds	r24, 0x00D8
     afa:	80 61       	ori	r24, 0x10	; 16
     afc:	80 93 d8 00 	sts	0x00D8, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     b00:	08 95       	ret

00000b02 <USB_Init>:

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
     b02:	e7 ed       	ldi	r30, 0xD7	; 215
     b04:	f0 e0       	ldi	r31, 0x00	; 0
     b06:	80 81       	ld	r24, Z
     b08:	81 60       	ori	r24, 0x01	; 1
     b0a:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     b0c:	81 e0       	ldi	r24, 0x01	; 1
     b0e:	80 93 22 01 	sts	0x0122, r24

	USB_ResetInterface();
}
     b12:	a7 cf       	rjmp	.-178    	; 0xa62 <USB_ResetInterface>

00000b14 <USB_Disable>:

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
     b14:	17 d0       	rcall	.+46     	; 0xb44 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     b16:	1e d0       	rcall	.+60     	; 0xb54 <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
     b18:	e0 ee       	ldi	r30, 0xE0	; 224
     b1a:	f0 e0       	ldi	r31, 0x00	; 0
     b1c:	80 81       	ld	r24, Z
     b1e:	81 60       	ori	r24, 0x01	; 1
     b20:	80 83       	st	Z, r24
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON  &= ~(1 << USBE);
     b22:	a8 ed       	ldi	r26, 0xD8	; 216
     b24:	b0 e0       	ldi	r27, 0x00	; 0
     b26:	8c 91       	ld	r24, X
     b28:	8f 77       	andi	r24, 0x7F	; 127
     b2a:	8c 93       	st	X, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     b2c:	19 bc       	out	0x29, r1	; 41

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  &= ~(1 << UVREGE);
     b2e:	e7 ed       	ldi	r30, 0xD7	; 215
     b30:	f0 e0       	ldi	r31, 0x00	; 0
     b32:	80 81       	ld	r24, Z
     b34:	8e 7f       	andi	r24, 0xFE	; 254
     b36:	80 83       	st	Z, r24
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON  &= ~(1 << OTGPADE);
     b38:	8c 91       	ld	r24, X
     b3a:	8f 7e       	andi	r24, 0xEF	; 239
     b3c:	8c 93       	st	X, r24

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
     b3e:	10 92 22 01 	sts	0x0122, r1
}
     b42:	08 95       	ret

00000b44 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     b44:	e8 ed       	ldi	r30, 0xD8	; 216
     b46:	f0 e0       	ldi	r31, 0x00	; 0
     b48:	80 81       	ld	r24, Z
     b4a:	8c 7f       	andi	r24, 0xFC	; 252
     b4c:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
     b4e:	10 92 a0 00 	sts	0x00A0, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
	#endif
}
     b52:	08 95       	ret

00000b54 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     b54:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_BOTH)
	OTGINT = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
     b58:	10 92 9f 00 	sts	0x009F, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
	#endif
}
     b5c:	08 95       	ret

00000b5e <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
     b5e:	1f 92       	push	r1
     b60:	0f 92       	push	r0
     b62:	0f b6       	in	r0, 0x3f	; 63
     b64:	0f 92       	push	r0
     b66:	0b b6       	in	r0, 0x3b	; 59
     b68:	0f 92       	push	r0
     b6a:	11 24       	eor	r1, r1
     b6c:	2f 93       	push	r18
     b6e:	3f 93       	push	r19
     b70:	4f 93       	push	r20
     b72:	5f 93       	push	r21
     b74:	6f 93       	push	r22
     b76:	7f 93       	push	r23
     b78:	8f 93       	push	r24
     b7a:	9f 93       	push	r25
     b7c:	af 93       	push	r26
     b7e:	bf 93       	push	r27
     b80:	ef 93       	push	r30
     b82:	ff 93       	push	r31
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     b84:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	#if defined(USB_CAN_BE_HOST)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
     b88:	85 ff       	sbrs	r24, 5
     b8a:	0a c0       	rjmp	.+20     	; 0xba0 <__vector_10+0x42>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     b8c:	80 91 a0 00 	lds	r24, 0x00A0
     b90:	85 ff       	sbrs	r24, 5
     b92:	06 c0       	rjmp	.+12     	; 0xba0 <__vector_10+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     b94:	80 91 9f 00 	lds	r24, 0x009F
     b98:	8f 7d       	andi	r24, 0xDF	; 223
     b9a:	80 93 9f 00 	sts	0x009F, r24
	{
		USB_INT_Clear(USB_INT_HSOFI);

		EVENT_USB_Host_StartOfFrame();
     b9e:	10 d1       	rcall	.+544    	; 0xdc0 <USB_Event_Stub>
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
     ba0:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
     ba4:	81 ff       	sbrs	r24, 1
     ba6:	15 c0       	rjmp	.+42     	; 0xbd2 <__vector_10+0x74>
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
					case USB_INT_DCONNI:
						return (UHIEN  & (1 << DCONNE));
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
     ba8:	80 91 a0 00 	lds	r24, 0x00A0
     bac:	81 ff       	sbrs	r24, 1
     bae:	11 c0       	rjmp	.+34     	; 0xbd2 <__vector_10+0x74>
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     bb0:	80 91 9f 00 	lds	r24, 0x009F
     bb4:	8d 7f       	andi	r24, 0xFD	; 253
     bb6:	80 93 9f 00 	sts	0x009F, r24
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     bba:	80 91 9f 00 	lds	r24, 0x009F
     bbe:	8e 7f       	andi	r24, 0xFE	; 254
     bc0:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     bc4:	80 91 a0 00 	lds	r24, 0x00A0
     bc8:	8d 7f       	andi	r24, 0xFD	; 253
     bca:	80 93 a0 00 	sts	0x00A0, r24
	{
		USB_INT_Clear(USB_INT_DDISCI);
		USB_INT_Clear(USB_INT_DCONNI);
		USB_INT_Disable(USB_INT_DDISCI);

		EVENT_USB_Host_DeviceUnattached();
     bce:	22 dc       	rcall	.-1980   	; 0x414 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     bd0:	48 df       	rcall	.-368    	; 0xa62 <USB_ResetInterface>
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
     bd2:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
     bd6:	81 ff       	sbrs	r24, 1
     bd8:	15 c0       	rjmp	.+42     	; 0xc04 <__vector_10+0xa6>
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
     bda:	80 91 de 00 	lds	r24, 0x00DE
     bde:	81 ff       	sbrs	r24, 1
     be0:	11 c0       	rjmp	.+34     	; 0xc04 <__vector_10+0xa6>
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     be2:	80 91 df 00 	lds	r24, 0x00DF
     be6:	8d 7f       	andi	r24, 0xFD	; 253
     be8:	80 93 df 00 	sts	0x00DF, r24
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
     bec:	77 98       	cbi	0x0e, 7	; 14
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     bee:	80 91 dd 00 	lds	r24, 0x00DD
     bf2:	81 60       	ori	r24, 0x01	; 1
     bf4:	80 93 dd 00 	sts	0x00DD, r24
		USB_INT_Clear(USB_INT_VBERRI);

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
     bf8:	80 e0       	ldi	r24, 0x00	; 0
     bfa:	f0 db       	rcall	.-2080   	; 0x3dc <EVENT_USB_Host_HostError>
		EVENT_USB_Host_DeviceUnattached();
     bfc:	0b dc       	rcall	.-2026   	; 0x414 <EVENT_USB_Host_DeviceUnattached>

		USB_HostState = HOST_STATE_Unattached;
     bfe:	81 e0       	ldi	r24, 0x01	; 1
     c00:	80 93 2b 01 	sts	0x012B, r24
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
					case USB_INT_SRPI:
						return (OTGINT & (1 << SRPI));
     c04:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
     c08:	80 ff       	sbrs	r24, 0
     c0a:	17 c0       	rjmp	.+46     	; 0xc3a <__vector_10+0xdc>
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
					case USB_INT_SRPI:
						return (OTGIEN & (1 << SRPE));
     c0c:	80 91 de 00 	lds	r24, 0x00DE
     c10:	80 ff       	sbrs	r24, 0
     c12:	13 c0       	rjmp	.+38     	; 0xc3a <__vector_10+0xdc>
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
						break;
					case USB_INT_SRPI:
						OTGINT &= ~(1 << SRPI);
     c14:	80 91 df 00 	lds	r24, 0x00DF
     c18:	8e 7f       	andi	r24, 0xFE	; 254
     c1a:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_VBERRI:
						OTGIEN &= ~(1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN &= ~(1 << SRPE);						
     c1e:	80 91 de 00 	lds	r24, 0x00DE
     c22:	8e 7f       	andi	r24, 0xFE	; 254
     c24:	80 93 de 00 	sts	0x00DE, r24
	{
		USB_INT_Clear(USB_INT_SRPI);
		USB_INT_Disable(USB_INT_SRPI);

		EVENT_USB_Host_DeviceAttached();
     c28:	fd db       	rcall	.-2054   	; 0x424 <EVENT_USB_Host_DeviceAttached>
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     c2a:	80 91 a0 00 	lds	r24, 0x00A0
     c2e:	82 60       	ori	r24, 0x02	; 2
     c30:	80 93 a0 00 	sts	0x00A0, r24

		USB_INT_Enable(USB_INT_DDISCI);

		USB_HostState = HOST_STATE_Powered;
     c34:	82 e0       	ldi	r24, 0x02	; 2
     c36:	80 93 2b 01 	sts	0x012B, r24
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
     c3a:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
     c3e:	82 ff       	sbrs	r24, 2
     c40:	0e c0       	rjmp	.+28     	; 0xc5e <__vector_10+0x100>
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
     c42:	80 91 de 00 	lds	r24, 0x00DE
     c46:	82 ff       	sbrs	r24, 2
     c48:	0a c0       	rjmp	.+20     	; 0xc5e <__vector_10+0x100>
						break;
					case USB_INT_RSTI:
						UHINT  &= ~(1 << RSTI);
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
     c4a:	80 91 df 00 	lds	r24, 0x00DF
     c4e:	8b 7f       	andi	r24, 0xFB	; 251
     c50:	80 93 df 00 	sts	0x00DF, r24
	{
		USB_INT_Clear(USB_INT_BCERRI);

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
     c54:	82 e0       	ldi	r24, 0x02	; 2
     c56:	60 e0       	ldi	r22, 0x00	; 0
     c58:	96 db       	rcall	.-2260   	; 0x386 <EVENT_USB_Host_DeviceEnumerationFailed>
		EVENT_USB_Host_DeviceUnattached();
     c5a:	dc db       	rcall	.-2120   	; 0x414 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     c5c:	02 df       	rcall	.-508    	; 0xa62 <USB_ResetInterface>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     c5e:	ff 91       	pop	r31
     c60:	ef 91       	pop	r30
     c62:	bf 91       	pop	r27
     c64:	af 91       	pop	r26
     c66:	9f 91       	pop	r25
     c68:	8f 91       	pop	r24
     c6a:	7f 91       	pop	r23
     c6c:	6f 91       	pop	r22
     c6e:	5f 91       	pop	r21
     c70:	4f 91       	pop	r20
     c72:	3f 91       	pop	r19
     c74:	2f 91       	pop	r18
     c76:	0f 90       	pop	r0
     c78:	0b be       	out	0x3b, r0	; 59
     c7a:	0f 90       	pop	r0
     c7c:	0f be       	out	0x3f, r0	; 63
     c7e:	0f 90       	pop	r0
     c80:	1f 90       	pop	r1
     c82:	18 95       	reti

00000c84 <USB_GetNextDescriptorComp>:

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
     c84:	af 92       	push	r10
     c86:	bf 92       	push	r11
     c88:	cf 92       	push	r12
     c8a:	df 92       	push	r13
     c8c:	ef 92       	push	r14
     c8e:	ff 92       	push	r15
     c90:	0f 93       	push	r16
     c92:	1f 93       	push	r17
     c94:	cf 93       	push	r28
     c96:	df 93       	push	r29
     c98:	7c 01       	movw	r14, r24
     c9a:	eb 01       	movw	r28, r22
     c9c:	6a 01       	movw	r12, r20
     c9e:	24 c0       	rjmp	.+72     	; 0xce8 <USB_GetNextDescriptorComp+0x64>
	uint8_t ErrorCode;

	while (*BytesRem)
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
     ca0:	e8 81       	ld	r30, Y
     ca2:	f9 81       	ldd	r31, Y+1	; 0x01
     ca4:	be 2e       	mov	r11, r30
     ca6:	af 2e       	mov	r10, r31
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc)
			{
				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;
     ca8:	80 81       	ld	r24, Z
     caa:	90 e0       	ldi	r25, 0x00	; 0
     cac:	98 01       	movw	r18, r16
     cae:	80 17       	cp	r24, r16
     cb0:	91 07       	cpc	r25, r17
     cb2:	08 f4       	brcc	.+2      	; 0xcb6 <USB_GetNextDescriptorComp+0x32>
     cb4:	9c 01       	movw	r18, r24
				
				if (*BytesRem < CurrDescriptorSize)
				  CurrDescriptorSize = *BytesRem;

				*CurrConfigLoc  = (void*)((uintptr_t)*CurrConfigLoc + CurrDescriptorSize);
     cb6:	e2 0f       	add	r30, r18
     cb8:	f3 1f       	adc	r31, r19
     cba:	f9 83       	std	Y+1, r31	; 0x01
     cbc:	e8 83       	st	Y, r30
				*BytesRem      -= CurrDescriptorSize;
     cbe:	f7 01       	movw	r30, r14
     cc0:	80 81       	ld	r24, Z
     cc2:	91 81       	ldd	r25, Z+1	; 0x01
     cc4:	82 1b       	sub	r24, r18
     cc6:	93 0b       	sbc	r25, r19
     cc8:	91 83       	std	Z+1, r25	; 0x01
     cca:	80 83       	st	Z, r24
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
     ccc:	88 81       	ld	r24, Y
     cce:	99 81       	ldd	r25, Y+1	; 0x01
     cd0:	f6 01       	movw	r30, r12
     cd2:	09 95       	icall
     cd4:	82 30       	cpi	r24, 0x02	; 2
     cd6:	41 f0       	breq	.+16     	; 0xce8 <USB_GetNextDescriptorComp+0x64>
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
     cd8:	81 30       	cpi	r24, 0x01	; 1
     cda:	69 f4       	brne	.+26     	; 0xcf6 <USB_GetNextDescriptorComp+0x72>
			{
				*CurrConfigLoc = PrevDescLoc;
     cdc:	b8 82       	st	Y, r11
     cde:	a9 82       	std	Y+1, r10	; 0x01
				*BytesRem      = PrevBytesRem;
     ce0:	f7 01       	movw	r30, r14
     ce2:	11 83       	std	Z+1, r17	; 0x01
     ce4:	00 83       	st	Z, r16
     ce6:	07 c0       	rjmp	.+14     	; 0xcf6 <USB_GetNextDescriptorComp+0x72>
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
	uint8_t ErrorCode;

	while (*BytesRem)
     ce8:	f7 01       	movw	r30, r14
     cea:	00 81       	ld	r16, Z
     cec:	11 81       	ldd	r17, Z+1	; 0x01
     cee:	01 15       	cp	r16, r1
     cf0:	11 05       	cpc	r17, r1
     cf2:	b1 f6       	brne	.-84     	; 0xca0 <USB_GetNextDescriptorComp+0x1c>
     cf4:	82 e0       	ldi	r24, 0x02	; 2
			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
}
     cf6:	df 91       	pop	r29
     cf8:	cf 91       	pop	r28
     cfa:	1f 91       	pop	r17
     cfc:	0f 91       	pop	r16
     cfe:	ff 90       	pop	r15
     d00:	ef 90       	pop	r14
     d02:	df 90       	pop	r13
     d04:	cf 90       	pop	r12
     d06:	bf 90       	pop	r11
     d08:	af 90       	pop	r10
     d0a:	08 95       	ret

00000d0c <USB_Host_GetDeviceConfigDescriptor>:
#if defined(USB_CAN_BE_HOST)
uint8_t USB_Host_GetDeviceConfigDescriptor(const uint8_t ConfigNumber,
                                           uint16_t* const ConfigSizePtr,
                                           void* const BufferPtr,
                                           const uint16_t BufferSize)
{
     d0c:	cf 92       	push	r12
     d0e:	df 92       	push	r13
     d10:	ef 92       	push	r14
     d12:	ff 92       	push	r15
     d14:	0f 93       	push	r16
     d16:	1f 93       	push	r17
     d18:	df 93       	push	r29
     d1a:	cf 93       	push	r28
     d1c:	cd b7       	in	r28, 0x3d	; 61
     d1e:	de b7       	in	r29, 0x3e	; 62
     d20:	29 97       	sbiw	r28, 0x09	; 9
     d22:	0f b6       	in	r0, 0x3f	; 63
     d24:	f8 94       	cli
     d26:	de bf       	out	0x3e, r29	; 62
     d28:	0f be       	out	0x3f, r0	; 63
     d2a:	cd bf       	out	0x3d, r28	; 61
     d2c:	6b 01       	movw	r12, r22
     d2e:	8a 01       	movw	r16, r20
     d30:	79 01       	movw	r14, r18
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
     d32:	90 e8       	ldi	r25, 0x80	; 128
     d34:	90 93 23 01 	sts	0x0123, r25
     d38:	96 e0       	ldi	r25, 0x06	; 6
     d3a:	90 93 24 01 	sts	0x0124, r25
     d3e:	90 e0       	ldi	r25, 0x00	; 0
     d40:	01 97       	sbiw	r24, 0x01	; 1
     d42:	92 60       	ori	r25, 0x02	; 2
     d44:	90 93 26 01 	sts	0x0126, r25
     d48:	80 93 25 01 	sts	0x0125, r24
     d4c:	10 92 28 01 	sts	0x0128, r1
     d50:	10 92 27 01 	sts	0x0127, r1
     d54:	89 e0       	ldi	r24, 0x09	; 9
     d56:	90 e0       	ldi	r25, 0x00	; 0
     d58:	90 93 2a 01 	sts	0x012A, r25
     d5c:	80 93 29 01 	sts	0x0129, r24
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     d60:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = sizeof(USB_Descriptor_Configuration_Header_t),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(ConfigHeader)) != HOST_SENDCONTROL_Successful)
     d64:	ce 01       	movw	r24, r28
     d66:	01 96       	adiw	r24, 0x01	; 1
     d68:	55 d0       	rcall	.+170    	; 0xe14 <USB_Host_SendControlRequest>
     d6a:	28 2f       	mov	r18, r24
     d6c:	88 23       	and	r24, r24
     d6e:	c1 f4       	brne	.+48     	; 0xda0 <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);
     d70:	8b 81       	ldd	r24, Y+3	; 0x03
     d72:	9c 81       	ldd	r25, Y+4	; 0x04
     d74:	f6 01       	movw	r30, r12
     d76:	91 83       	std	Z+1, r25	; 0x01
     d78:	80 83       	st	Z, r24

	if (*ConfigSizePtr > BufferSize)
     d7a:	e8 16       	cp	r14, r24
     d7c:	f9 06       	cpc	r15, r25
     d7e:	10 f4       	brcc	.+4      	; 0xd84 <USB_Host_GetDeviceConfigDescriptor+0x78>
     d80:	25 e0       	ldi	r18, 0x05	; 5
     d82:	0e c0       	rjmp	.+28     	; 0xda0 <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return HOST_GETCONFIG_BuffOverflow;

	USB_ControlRequest.wLength = *ConfigSizePtr;
     d84:	90 93 2a 01 	sts	0x012A, r25
     d88:	80 93 29 01 	sts	0x0129, r24

	if ((ErrorCode = USB_Host_SendControlRequest(BufferPtr)) != HOST_SENDCONTROL_Successful)
     d8c:	c8 01       	movw	r24, r16
     d8e:	42 d0       	rcall	.+132    	; 0xe14 <USB_Host_SendControlRequest>
     d90:	28 2f       	mov	r18, r24
     d92:	88 23       	and	r24, r24
     d94:	29 f4       	brne	.+10     	; 0xda0 <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
     d96:	f8 01       	movw	r30, r16
     d98:	81 81       	ldd	r24, Z+1	; 0x01
     d9a:	82 30       	cpi	r24, 0x02	; 2
     d9c:	09 f0       	breq	.+2      	; 0xda0 <USB_Host_GetDeviceConfigDescriptor+0x94>
     d9e:	26 e0       	ldi	r18, 0x06	; 6
	  return HOST_GETCONFIG_InvalidData;

	return HOST_GETCONFIG_Successful;
}
     da0:	82 2f       	mov	r24, r18
     da2:	29 96       	adiw	r28, 0x09	; 9
     da4:	0f b6       	in	r0, 0x3f	; 63
     da6:	f8 94       	cli
     da8:	de bf       	out	0x3e, r29	; 62
     daa:	0f be       	out	0x3f, r0	; 63
     dac:	cd bf       	out	0x3d, r28	; 61
     dae:	cf 91       	pop	r28
     db0:	df 91       	pop	r29
     db2:	1f 91       	pop	r17
     db4:	0f 91       	pop	r16
     db6:	ff 90       	pop	r15
     db8:	ef 90       	pop	r14
     dba:	df 90       	pop	r13
     dbc:	cf 90       	pop	r12
     dbe:	08 95       	ret

00000dc0 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
     dc0:	08 95       	ret

00000dc2 <USB_Host_WaitForIOS>:

	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
     dc2:	1f 93       	push	r17
     dc4:	cf 93       	push	r28
     dc6:	df 93       	push	r29
     dc8:	18 2f       	mov	r17, r24
     dca:	c8 ee       	ldi	r28, 0xE8	; 232
     dcc:	d3 e0       	ldi	r29, 0x03	; 3
     dce:	09 c0       	rjmp	.+18     	; 0xde2 <USB_Host_WaitForIOS+0x20>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     dd0:	81 e0       	ldi	r24, 0x01	; 1
     dd2:	0d dc       	rcall	.-2022   	; 0x5ee <USB_Host_WaitMS>
     dd4:	88 23       	and	r24, r24
     dd6:	d1 f4       	brne	.+52     	; 0xe0c <USB_Host_WaitForIOS+0x4a>
		  return ErrorCode;

		if (!(TimeoutCounter--))
     dd8:	20 97       	sbiw	r28, 0x00	; 0
     dda:	11 f4       	brne	.+4      	; 0xde0 <USB_Host_WaitForIOS+0x1e>
     ddc:	84 e0       	ldi	r24, 0x04	; 4
     dde:	16 c0       	rjmp	.+44     	; 0xe0c <USB_Host_WaitForIOS+0x4a>
     de0:	21 97       	sbiw	r28, 0x01	; 1
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
     de2:	11 23       	and	r17, r17
     de4:	29 f4       	brne	.+10     	; 0xdf0 <USB_Host_WaitForIOS+0x2e>
			 *  \return Boolean \c true if the current pipe is ready for a SETUP packet, \c false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
     de6:	80 91 a6 00 	lds	r24, 0x00A6
     dea:	83 ff       	sbrs	r24, 3
     dec:	f1 cf       	rjmp	.-30     	; 0xdd0 <USB_Host_WaitForIOS+0xe>
     dee:	0d c0       	rjmp	.+26     	; 0xe0a <USB_Host_WaitForIOS+0x48>
     df0:	11 30       	cpi	r17, 0x01	; 1
     df2:	29 f4       	brne	.+10     	; 0xdfe <USB_Host_WaitForIOS+0x3c>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     df4:	80 91 a6 00 	lds	r24, 0x00A6
     df8:	80 ff       	sbrs	r24, 0
     dfa:	ea cf       	rjmp	.-44     	; 0xdd0 <USB_Host_WaitForIOS+0xe>
     dfc:	06 c0       	rjmp	.+12     	; 0xe0a <USB_Host_WaitForIOS+0x48>
     dfe:	12 30       	cpi	r17, 0x02	; 2
     e00:	39 f7       	brne	.-50     	; 0xdd0 <USB_Host_WaitForIOS+0xe>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     e02:	80 91 a6 00 	lds	r24, 0x00A6
     e06:	82 ff       	sbrs	r24, 2
     e08:	e3 cf       	rjmp	.-58     	; 0xdd0 <USB_Host_WaitForIOS+0xe>
     e0a:	80 e0       	ldi	r24, 0x00	; 0
		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
}
     e0c:	df 91       	pop	r29
     e0e:	cf 91       	pop	r28
     e10:	1f 91       	pop	r17
     e12:	08 95       	ret

00000e14 <USB_Host_SendControlRequest>:
#include "HostStandardReq.h"

uint8_t USB_Host_ConfigurationNumber;

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
     e14:	ff 92       	push	r15
     e16:	0f 93       	push	r16
     e18:	1f 93       	push	r17
     e1a:	cf 93       	push	r28
     e1c:	df 93       	push	r29
     e1e:	18 2f       	mov	r17, r24
     e20:	09 2f       	mov	r16, r25
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     e22:	f0 90 9e 00 	lds	r15, 0x009E
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
	bool     BusSuspended = USB_Host_IsBusSuspended();
	uint8_t  ReturnStatus = HOST_SENDCONTROL_Successful;
	uint16_t DataLen      = USB_ControlRequest.wLength;
     e26:	c0 91 29 01 	lds	r28, 0x0129
     e2a:	d0 91 2a 01 	lds	r29, 0x012A
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     e2e:	80 91 9e 00 	lds	r24, 0x009E
     e32:	81 60       	ori	r24, 0x01	; 1
     e34:	80 93 9e 00 	sts	0x009E, r24

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     e38:	81 e0       	ldi	r24, 0x01	; 1
     e3a:	d9 db       	rcall	.-2126   	; 0x5ee <USB_Host_WaitMS>
     e3c:	98 2f       	mov	r25, r24
     e3e:	88 23       	and	r24, r24
     e40:	09 f0       	breq	.+2      	; 0xe44 <USB_Host_SendControlRequest+0x30>
     e42:	d7 c0       	rjmp	.+430    	; 0xff2 <USB_Host_SendControlRequest+0x1de>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     e44:	80 91 aa 00 	lds	r24, 0x00AA
     e48:	8f 7c       	andi	r24, 0xCF	; 207
     e4a:	80 93 aa 00 	sts	0x00AA, r24

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     e4e:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
     e52:	80 91 a6 00 	lds	r24, 0x00A6
     e56:	8f 7e       	andi	r24, 0xEF	; 239
     e58:	80 93 a6 00 	sts	0x00A6, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     e5c:	80 91 a9 00 	lds	r24, 0x00A9
     e60:	8f 7b       	andi	r24, 0xBF	; 191
     e62:	80 93 a9 00 	sts	0x00A9, r24
     e66:	e3 e2       	ldi	r30, 0x23	; 35
     e68:	f1 e0       	ldi	r31, 0x01	; 1
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
	  Pipe_Write_8(*(HeaderStream++));	
     e6a:	81 91       	ld	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
     e6c:	80 93 af 00 	sts	0x00AF, r24
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
     e70:	81 e0       	ldi	r24, 0x01	; 1
     e72:	eb 32       	cpi	r30, 0x2B	; 43
     e74:	f8 07       	cpc	r31, r24
     e76:	c9 f7       	brne	.-14     	; 0xe6a <USB_Host_SendControlRequest+0x56>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
     e78:	80 91 a6 00 	lds	r24, 0x00A6
     e7c:	87 77       	andi	r24, 0x77	; 119
     e7e:	80 93 a6 00 	sts	0x00A6, r24
	  Pipe_Write_8(*(HeaderStream++));	
	#endif
	
	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
     e82:	80 e0       	ldi	r24, 0x00	; 0
     e84:	9e df       	rcall	.-196    	; 0xdc2 <USB_Host_WaitForIOS>
     e86:	98 2f       	mov	r25, r24
     e88:	88 23       	and	r24, r24
     e8a:	09 f0       	breq	.+2      	; 0xe8e <USB_Host_SendControlRequest+0x7a>
     e8c:	b2 c0       	rjmp	.+356    	; 0xff2 <USB_Host_SendControlRequest+0x1de>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     e8e:	80 91 a9 00 	lds	r24, 0x00A9
     e92:	80 64       	ori	r24, 0x40	; 64
     e94:	80 93 a9 00 	sts	0x00A9, r24
	  goto End_Of_Control_Send;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     e98:	81 e0       	ldi	r24, 0x01	; 1
     e9a:	a9 db       	rcall	.-2222   	; 0x5ee <USB_Host_WaitMS>
     e9c:	98 2f       	mov	r25, r24
     e9e:	88 23       	and	r24, r24
     ea0:	09 f0       	breq	.+2      	; 0xea4 <USB_Host_SendControlRequest+0x90>
     ea2:	a7 c0       	rjmp	.+334    	; 0xff2 <USB_Host_SendControlRequest+0x1de>

uint8_t USB_Host_ConfigurationNumber;

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
     ea4:	21 2f       	mov	r18, r17
     ea6:	30 2f       	mov	r19, r16
     ea8:	c9 01       	movw	r24, r18
     eaa:	8c 01       	movw	r16, r24
	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
	  goto End_Of_Control_Send;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
     eac:	80 91 23 01 	lds	r24, 0x0123
     eb0:	87 ff       	sbrs	r24, 7
     eb2:	52 c0       	rjmp	.+164    	; 0xf58 <USB_Host_SendControlRequest+0x144>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     eb4:	80 91 aa 00 	lds	r24, 0x00AA
     eb8:	8f 7c       	andi	r24, 0xCF	; 207
     eba:	80 61       	ori	r24, 0x10	; 16
     ebc:	80 93 aa 00 	sts	0x00AA, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
     ec0:	01 15       	cp	r16, r1
     ec2:	11 05       	cpc	r17, r1
     ec4:	69 f5       	brne	.+90     	; 0xf20 <USB_Host_SendControlRequest+0x10c>
     ec6:	2e c0       	rjmp	.+92     	; 0xf24 <USB_Host_SendControlRequest+0x110>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     ec8:	80 91 a9 00 	lds	r24, 0x00A9
     ecc:	8f 7b       	andi	r24, 0xBF	; 191
     ece:	80 93 a9 00 	sts	0x00A9, r24
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
     ed2:	81 e0       	ldi	r24, 0x01	; 1
     ed4:	76 df       	rcall	.-276    	; 0xdc2 <USB_Host_WaitForIOS>
     ed6:	98 2f       	mov	r25, r24
     ed8:	88 23       	and	r24, r24
     eda:	09 f0       	breq	.+2      	; 0xede <USB_Host_SendControlRequest+0xca>
     edc:	8a c0       	rjmp	.+276    	; 0xff2 <USB_Host_SendControlRequest+0x1de>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
     ede:	80 91 f6 00 	lds	r24, 0x00F6
     ee2:	90 91 f7 00 	lds	r25, 0x00F7
				  goto End_Of_Control_Send;

				if (!(Pipe_BytesInPipe()))
     ee6:	89 2b       	or	r24, r25
     ee8:	49 f4       	brne	.+18     	; 0xefc <USB_Host_SendControlRequest+0xe8>
     eea:	c0 e0       	ldi	r28, 0x00	; 0
     eec:	d0 e0       	ldi	r29, 0x00	; 0
     eee:	06 c0       	rjmp	.+12     	; 0xefc <USB_Host_SendControlRequest+0xe8>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
     ef0:	80 91 af 00 	lds	r24, 0x00AF
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
				{
					*(DataStream++) = Pipe_Read_8();
     ef4:	f8 01       	movw	r30, r16
     ef6:	81 93       	st	Z+, r24
     ef8:	8f 01       	movw	r16, r30
					DataLen--;
     efa:	21 97       	sbiw	r28, 0x01	; 1
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
     efc:	80 91 f6 00 	lds	r24, 0x00F6
     f00:	90 91 f7 00 	lds	r25, 0x00F7
				  goto End_Of_Control_Send;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
     f04:	89 2b       	or	r24, r25
     f06:	11 f0       	breq	.+4      	; 0xf0c <USB_Host_SendControlRequest+0xf8>
     f08:	20 97       	sbiw	r28, 0x00	; 0
     f0a:	91 f7       	brne	.-28     	; 0xef0 <USB_Host_SendControlRequest+0xdc>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     f0c:	80 91 a9 00 	lds	r24, 0x00A9
     f10:	80 64       	ori	r24, 0x40	; 64
     f12:	80 93 a9 00 	sts	0x00A9, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     f16:	80 91 a6 00 	lds	r24, 0x00A6
     f1a:	8e 77       	andi	r24, 0x7E	; 126
     f1c:	80 93 a6 00 	sts	0x00A6, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
     f20:	20 97       	sbiw	r28, 0x00	; 0
     f22:	91 f6       	brne	.-92     	; 0xec8 <USB_Host_SendControlRequest+0xb4>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     f24:	80 91 aa 00 	lds	r24, 0x00AA
     f28:	8f 7c       	andi	r24, 0xCF	; 207
     f2a:	80 62       	ori	r24, 0x20	; 32
     f2c:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     f30:	80 91 a9 00 	lds	r24, 0x00A9
     f34:	8f 7b       	andi	r24, 0xBF	; 191
     f36:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
     f3a:	82 e0       	ldi	r24, 0x02	; 2
     f3c:	42 df       	rcall	.-380    	; 0xdc2 <USB_Host_WaitForIOS>
     f3e:	98 2f       	mov	r25, r24
     f40:	88 23       	and	r24, r24
     f42:	09 f0       	breq	.+2      	; 0xf46 <USB_Host_SendControlRequest+0x132>
     f44:	56 c0       	rjmp	.+172    	; 0xff2 <USB_Host_SendControlRequest+0x1de>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
     f46:	80 91 a6 00 	lds	r24, 0x00A6
     f4a:	8b 77       	andi	r24, 0x7B	; 123
     f4c:	80 93 a6 00 	sts	0x00A6, r24
		  goto End_Of_Control_Send;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
     f50:	82 e0       	ldi	r24, 0x02	; 2
     f52:	37 df       	rcall	.-402    	; 0xdc2 <USB_Host_WaitForIOS>
     f54:	98 2f       	mov	r25, r24
     f56:	4d c0       	rjmp	.+154    	; 0xff2 <USB_Host_SendControlRequest+0x1de>
		  goto End_Of_Control_Send;
	}
	else
	{
		if (DataStream != NULL)
     f58:	01 15       	cp	r16, r1
     f5a:	11 05       	cpc	r17, r1
     f5c:	a9 f1       	breq	.+106    	; 0xfc8 <USB_Host_SendControlRequest+0x1b4>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     f5e:	80 91 aa 00 	lds	r24, 0x00AA
     f62:	8f 7c       	andi	r24, 0xCF	; 207
     f64:	80 62       	ori	r24, 0x20	; 32
     f66:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     f6a:	80 91 a9 00 	lds	r24, 0x00A9
     f6e:	8f 7b       	andi	r24, 0xBF	; 191
     f70:	80 93 a9 00 	sts	0x00A9, r24
     f74:	1d c0       	rjmp	.+58     	; 0xfb0 <USB_Host_SendControlRequest+0x19c>
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
     f76:	82 e0       	ldi	r24, 0x02	; 2
     f78:	24 df       	rcall	.-440    	; 0xdc2 <USB_Host_WaitForIOS>
     f7a:	98 2f       	mov	r25, r24
     f7c:	88 23       	and	r24, r24
     f7e:	c9 f5       	brne	.+114    	; 0xff2 <USB_Host_SendControlRequest+0x1de>
				  goto End_Of_Control_Send;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
     f80:	80 91 1d 01 	lds	r24, 0x011D
     f84:	28 2f       	mov	r18, r24
     f86:	30 e0       	ldi	r19, 0x00	; 0
     f88:	07 c0       	rjmp	.+14     	; 0xf98 <USB_Host_SendControlRequest+0x184>
				{
					Pipe_Write_8(*(DataStream++));
     f8a:	f8 01       	movw	r30, r16
     f8c:	81 91       	ld	r24, Z+
     f8e:	8f 01       	movw	r16, r30
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
     f90:	80 93 af 00 	sts	0x00AF, r24
					DataLen--;
     f94:	21 97       	sbiw	r28, 0x01	; 1
			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
				  goto End_Of_Control_Send;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
     f96:	39 f0       	breq	.+14     	; 0xfa6 <USB_Host_SendControlRequest+0x192>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
     f98:	80 91 f6 00 	lds	r24, 0x00F6
     f9c:	90 91 f7 00 	lds	r25, 0x00F7
     fa0:	82 17       	cp	r24, r18
     fa2:	93 07       	cpc	r25, r19
     fa4:	90 f3       	brcs	.-28     	; 0xf8a <USB_Host_SendControlRequest+0x176>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
     fa6:	80 91 a6 00 	lds	r24, 0x00A6
     faa:	8b 77       	andi	r24, 0x7B	; 123
     fac:	80 93 a6 00 	sts	0x00A6, r24
		if (DataStream != NULL)
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
     fb0:	20 97       	sbiw	r28, 0x00	; 0
     fb2:	09 f7       	brne	.-62     	; 0xf76 <USB_Host_SendControlRequest+0x162>
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
     fb4:	82 e0       	ldi	r24, 0x02	; 2
     fb6:	05 df       	rcall	.-502    	; 0xdc2 <USB_Host_WaitForIOS>
     fb8:	98 2f       	mov	r25, r24
     fba:	88 23       	and	r24, r24
     fbc:	d1 f4       	brne	.+52     	; 0xff2 <USB_Host_SendControlRequest+0x1de>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     fbe:	80 91 a9 00 	lds	r24, 0x00A9
     fc2:	80 64       	ori	r24, 0x40	; 64
     fc4:	80 93 a9 00 	sts	0x00A9, r24
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     fc8:	80 91 aa 00 	lds	r24, 0x00AA
     fcc:	8f 7c       	andi	r24, 0xCF	; 207
     fce:	80 61       	ori	r24, 0x10	; 16
     fd0:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     fd4:	80 91 a9 00 	lds	r24, 0x00A9
     fd8:	8f 7b       	andi	r24, 0xBF	; 191
     fda:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
     fde:	81 e0       	ldi	r24, 0x01	; 1
     fe0:	f0 de       	rcall	.-544    	; 0xdc2 <USB_Host_WaitForIOS>
     fe2:	98 2f       	mov	r25, r24
     fe4:	88 23       	and	r24, r24
     fe6:	29 f4       	brne	.+10     	; 0xff2 <USB_Host_SendControlRequest+0x1de>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     fe8:	80 91 a6 00 	lds	r24, 0x00A6
     fec:	8e 77       	andi	r24, 0x7E	; 126
     fee:	80 93 a6 00 	sts	0x00A6, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     ff2:	80 91 a9 00 	lds	r24, 0x00A9
     ff6:	80 64       	ori	r24, 0x40	; 64
     ff8:	80 93 a9 00 	sts	0x00A9, r24
	}

End_Of_Control_Send:
	Pipe_Freeze();

	if (BusSuspended)
     ffc:	f0 fc       	sbrc	r15, 0
     ffe:	05 c0       	rjmp	.+10     	; 0x100a <USB_Host_SendControlRequest+0x1f6>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    1000:	80 91 9e 00 	lds	r24, 0x009E
    1004:	8e 7f       	andi	r24, 0xFE	; 254
    1006:	80 93 9e 00 	sts	0x009E, r24
			 *  \param[in] PipeNumber  Index of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t PipeNumber)
			{
				UPRST = (1 << PipeNumber);
    100a:	81 e0       	ldi	r24, 0x01	; 1
    100c:	80 93 a8 00 	sts	0x00A8, r24
				UPRST = 0;
    1010:	10 92 a8 00 	sts	0x00A8, r1
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
    1014:	89 2f       	mov	r24, r25
    1016:	df 91       	pop	r29
    1018:	cf 91       	pop	r28
    101a:	1f 91       	pop	r17
    101c:	0f 91       	pop	r16
    101e:	ff 90       	pop	r15
    1020:	08 95       	ret

00001022 <USB_Host_SetInterfaceAltSetting>:
}

uint8_t USB_Host_SetInterfaceAltSetting(const uint8_t InterfaceIndex,
                                        const uint8_t AltSetting)
{
	USB_ControlRequest = (USB_Request_Header_t)
    1022:	e3 e2       	ldi	r30, 0x23	; 35
    1024:	f1 e0       	ldi	r31, 0x01	; 1
    1026:	91 e0       	ldi	r25, 0x01	; 1
    1028:	90 93 23 01 	sts	0x0123, r25
    102c:	9b e0       	ldi	r25, 0x0B	; 11
    102e:	90 93 24 01 	sts	0x0124, r25
    1032:	60 93 25 01 	sts	0x0125, r22
    1036:	13 82       	std	Z+3, r1	; 0x03
    1038:	80 93 27 01 	sts	0x0127, r24
    103c:	15 82       	std	Z+5, r1	; 0x05
    103e:	10 92 2a 01 	sts	0x012A, r1
    1042:	10 92 29 01 	sts	0x0129, r1
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1046:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	return USB_Host_SendControlRequest(NULL);
    104a:	80 e0       	ldi	r24, 0x00	; 0
    104c:	90 e0       	ldi	r25, 0x00	; 0
}
    104e:	e2 ce       	rjmp	.-572    	; 0xe14 <USB_Host_SendControlRequest>

00001050 <USB_Host_SetDeviceConfiguration>:

	return HOST_SENDCONTROL_Successful;
}

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
    1050:	1f 93       	push	r17
    1052:	18 2f       	mov	r17, r24
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
    1054:	10 92 23 01 	sts	0x0123, r1
    1058:	89 e0       	ldi	r24, 0x09	; 9
    105a:	80 93 24 01 	sts	0x0124, r24
    105e:	10 93 25 01 	sts	0x0125, r17
    1062:	10 92 26 01 	sts	0x0126, r1
    1066:	10 92 28 01 	sts	0x0128, r1
    106a:	10 92 27 01 	sts	0x0127, r1
    106e:	10 92 2a 01 	sts	0x012A, r1
    1072:	10 92 29 01 	sts	0x0129, r1
    1076:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);
	
	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) == HOST_SENDCONTROL_Successful)
    107a:	80 e0       	ldi	r24, 0x00	; 0
    107c:	90 e0       	ldi	r25, 0x00	; 0
    107e:	ca de       	rcall	.-620    	; 0xe14 <USB_Host_SendControlRequest>
    1080:	88 23       	and	r24, r24
    1082:	49 f4       	brne	.+18     	; 0x1096 <USB_Host_SetDeviceConfiguration+0x46>
	{
		USB_Host_ConfigurationNumber = ConfigNumber;
    1084:	10 93 21 01 	sts	0x0121, r17
		USB_HostState                = (ConfigNumber) ? HOST_STATE_Configured : HOST_STATE_Addressed;
    1088:	11 23       	and	r17, r17
    108a:	11 f4       	brne	.+4      	; 0x1090 <USB_Host_SetDeviceConfiguration+0x40>
    108c:	9a e0       	ldi	r25, 0x0A	; 10
    108e:	01 c0       	rjmp	.+2      	; 0x1092 <USB_Host_SetDeviceConfiguration+0x42>
    1090:	9b e0       	ldi	r25, 0x0B	; 11
    1092:	90 93 2b 01 	sts	0x012B, r25
	}

	return ErrorCode;
}
    1096:	1f 91       	pop	r17
    1098:	08 95       	ret

0000109a <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    109a:	ff 92       	push	r15
    109c:	0f 93       	push	r16
    109e:	1f 93       	push	r17
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
    10a0:	07 ea       	ldi	r16, 0xA7	; 167
    10a2:	10 e0       	ldi	r17, 0x00	; 0
    10a4:	f8 01       	movw	r30, r16
    10a6:	f0 80       	ld	r15, Z
    10a8:	f7 e0       	ldi	r31, 0x07	; 7
    10aa:	ff 22       	and	r15, r31
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    10ac:	f8 01       	movw	r30, r16
    10ae:	10 82       	st	Z, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    10b0:	3b db       	rcall	.-2442   	; 0x728 <USB_Host_ProcessNextHostState>
    10b2:	f8 01       	movw	r30, r16
    10b4:	f0 82       	st	Z, r15
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
    10b6:	1f 91       	pop	r17
    10b8:	0f 91       	pop	r16
    10ba:	ff 90       	pop	r15
    10bc:	08 95       	ret

000010be <DCOMP_Audio_Host_NextAudioControlInterface>:
	
	return AUDIO_ENUMERROR_NoError;
}

static uint8_t DCOMP_Audio_Host_NextAudioControlInterface(void* CurrentDescriptor)
{
    10be:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
    10c0:	81 81       	ldd	r24, Z+1	; 0x01
    10c2:	84 30       	cpi	r24, 0x04	; 4
    10c4:	41 f4       	brne	.+16     	; 0x10d6 <DCOMP_Audio_Host_NextAudioControlInterface+0x18>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		if ((Interface->Class    == AUDIO_CSCP_AudioClass) &&
    10c6:	85 81       	ldd	r24, Z+5	; 0x05
    10c8:	81 30       	cpi	r24, 0x01	; 1
    10ca:	29 f4       	brne	.+10     	; 0x10d6 <DCOMP_Audio_Host_NextAudioControlInterface+0x18>
    10cc:	86 81       	ldd	r24, Z+6	; 0x06
    10ce:	81 30       	cpi	r24, 0x01	; 1
    10d0:	11 f4       	brne	.+4      	; 0x10d6 <DCOMP_Audio_Host_NextAudioControlInterface+0x18>
    10d2:	87 81       	ldd	r24, Z+7	; 0x07
    10d4:	81 11       	cpse	r24, r1
    10d6:	82 e0       	ldi	r24, 0x02	; 2
			return DESCRIPTOR_SEARCH_Found;
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    10d8:	08 95       	ret

000010da <DCOMP_Audio_Host_NextAudioStreamInterface>:

static uint8_t DCOMP_Audio_Host_NextAudioStreamInterface(void* CurrentDescriptor)
{
    10da:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
    10dc:	81 81       	ldd	r24, Z+1	; 0x01
    10de:	84 30       	cpi	r24, 0x04	; 4
    10e0:	41 f4       	brne	.+16     	; 0x10f2 <DCOMP_Audio_Host_NextAudioStreamInterface+0x18>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		if ((Interface->Class    == AUDIO_CSCP_AudioClass) &&
    10e2:	85 81       	ldd	r24, Z+5	; 0x05
    10e4:	81 30       	cpi	r24, 0x01	; 1
    10e6:	29 f4       	brne	.+10     	; 0x10f2 <DCOMP_Audio_Host_NextAudioStreamInterface+0x18>
    10e8:	86 81       	ldd	r24, Z+6	; 0x06
    10ea:	82 30       	cpi	r24, 0x02	; 2
    10ec:	11 f4       	brne	.+4      	; 0x10f2 <DCOMP_Audio_Host_NextAudioStreamInterface+0x18>
    10ee:	87 81       	ldd	r24, Z+7	; 0x07
    10f0:	81 11       	cpse	r24, r1
    10f2:	82 e0       	ldi	r24, 0x02	; 2
			return DESCRIPTOR_SEARCH_Found;
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    10f4:	08 95       	ret

000010f6 <DCOMP_Audio_Host_NextAudioInterfaceDataEndpoint>:

static uint8_t DCOMP_Audio_Host_NextAudioInterfaceDataEndpoint(void* CurrentDescriptor)
{
    10f6:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Endpoint)
    10f8:	81 81       	ldd	r24, Z+1	; 0x01
    10fa:	85 30       	cpi	r24, 0x05	; 5
    10fc:	31 f4       	brne	.+12     	; 0x110a <DCOMP_Audio_Host_NextAudioInterfaceDataEndpoint+0x14>
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		if ((Endpoint->Attributes & EP_TYPE_MASK) == EP_TYPE_ISOCHRONOUS)
    10fe:	83 81       	ldd	r24, Z+3	; 0x03
    1100:	83 70       	andi	r24, 0x03	; 3
    1102:	81 30       	cpi	r24, 0x01	; 1
    1104:	31 f4       	brne	.+12     	; 0x1112 <DCOMP_Audio_Host_NextAudioInterfaceDataEndpoint+0x1c>
    1106:	80 e0       	ldi	r24, 0x00	; 0
    1108:	08 95       	ret
		  return DESCRIPTOR_SEARCH_Found;
	}
	else if (Header->Type == DTYPE_Interface)
    110a:	84 30       	cpi	r24, 0x04	; 4
    110c:	11 f4       	brne	.+4      	; 0x1112 <DCOMP_Audio_Host_NextAudioInterfaceDataEndpoint+0x1c>
    110e:	81 e0       	ldi	r24, 0x01	; 1
    1110:	08 95       	ret
    1112:	82 e0       	ldi	r24, 0x02	; 2
	{
		return DESCRIPTOR_SEARCH_Fail;
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    1114:	08 95       	ret

00001116 <Audio_Host_GetSetEndpointProperty>:
			                              const uint8_t DataPipeIndex,
			                              const uint8_t EndpointProperty,
			                              const uint8_t EndpointControl,
			                              const uint16_t DataLength,
			                              void* const Data)
{
    1116:	ef 92       	push	r14
    1118:	ff 92       	push	r15
    111a:	0f 93       	push	r16
    111c:	1f 93       	push	r17
	if (!(AudioInterfaceInfo->State.IsActive))
    111e:	fc 01       	movw	r30, r24
    1120:	82 81       	ldd	r24, Z+2	; 0x02
    1122:	88 23       	and	r24, r24
    1124:	11 f4       	brne	.+4      	; 0x112a <Audio_Host_GetSetEndpointProperty+0x14>
    1126:	81 e0       	ldi	r24, 0x01	; 1
    1128:	27 c0       	rjmp	.+78     	; 0x1178 <Audio_Host_GetSetEndpointProperty+0x62>
	  return HOST_SENDCONTROL_DeviceDisconnected;

	uint8_t RequestType;
	uint8_t EndpointAddress;

	if (EndpointProperty & 0x80)
    112a:	47 fd       	sbrc	r20, 7
    112c:	02 c0       	rjmp	.+4      	; 0x1132 <Audio_Host_GetSetEndpointProperty+0x1c>
    112e:	32 e2       	ldi	r19, 0x22	; 34
    1130:	01 c0       	rjmp	.+2      	; 0x1134 <Audio_Host_GetSetEndpointProperty+0x1e>
    1132:	32 ea       	ldi	r19, 0xA2	; 162
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1134:	60 93 a7 00 	sts	0x00A7, r22
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				return (((UPCFG0X >> PEPNUM0) & PIPE_EPNUM_MASK) |
    1138:	90 91 aa 00 	lds	r25, 0x00AA
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
    113c:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				return (((UPCFG0X >> PEPNUM0) & PIPE_EPNUM_MASK) |
    1140:	80 73       	andi	r24, 0x30	; 48
    1142:	80 31       	cpi	r24, 0x10	; 16
    1144:	11 f0       	breq	.+4      	; 0x114a <Audio_Host_GetSetEndpointProperty+0x34>
    1146:	80 e0       	ldi	r24, 0x00	; 0
    1148:	01 c0       	rjmp	.+2      	; 0x114c <Audio_Host_GetSetEndpointProperty+0x36>
    114a:	80 e8       	ldi	r24, 0x80	; 128
	  RequestType = (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_ENDPOINT);
	  
	Pipe_SelectPipe(DataPipeIndex);
	EndpointAddress = Pipe_GetBoundEndpointAddress();

	USB_ControlRequest = (USB_Request_Header_t)
    114c:	30 93 23 01 	sts	0x0123, r19
    1150:	40 93 24 01 	sts	0x0124, r20
    1154:	10 92 25 01 	sts	0x0125, r1
    1158:	20 93 26 01 	sts	0x0126, r18
    115c:	9f 70       	andi	r25, 0x0F	; 15
    115e:	89 2b       	or	r24, r25
    1160:	80 93 27 01 	sts	0x0127, r24
    1164:	10 92 28 01 	sts	0x0128, r1
    1168:	10 93 2a 01 	sts	0x012A, r17
    116c:	00 93 29 01 	sts	0x0129, r16
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1170:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = DataLength,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	return USB_Host_SendControlRequest(Data);
    1174:	c7 01       	movw	r24, r14
    1176:	4e de       	rcall	.-868    	; 0xe14 <USB_Host_SendControlRequest>
}
    1178:	1f 91       	pop	r17
    117a:	0f 91       	pop	r16
    117c:	ff 90       	pop	r15
    117e:	ef 90       	pop	r14
    1180:	08 95       	ret

00001182 <Audio_Host_StartStopStreaming>:
	return DESCRIPTOR_SEARCH_NotFound;
}

uint8_t Audio_Host_StartStopStreaming(USB_ClassInfo_Audio_Host_t* const AudioInterfaceInfo,
			                          const bool EnableStreaming)
{
    1182:	fc 01       	movw	r30, r24
	if (!(AudioInterfaceInfo->State.IsActive))
    1184:	82 81       	ldd	r24, Z+2	; 0x02
    1186:	88 23       	and	r24, r24
    1188:	11 f4       	brne	.+4      	; 0x118e <Audio_Host_StartStopStreaming+0xc>
    118a:	81 e0       	ldi	r24, 0x01	; 1
    118c:	08 95       	ret
	  return HOST_SENDCONTROL_DeviceDisconnected;

	return USB_Host_SetInterfaceAltSetting(AudioInterfaceInfo->State.StreamingInterfaceNumber,
    118e:	84 81       	ldd	r24, Z+4	; 0x04
    1190:	61 11       	cpse	r22, r1
    1192:	65 81       	ldd	r22, Z+5	; 0x05
	                                       EnableStreaming ? AudioInterfaceInfo->State.EnabledStreamingAltIndex : 0);
}
    1194:	46 cf       	rjmp	.-372    	; 0x1022 <USB_Host_SetInterfaceAltSetting>

00001196 <Audio_Host_ConfigurePipes>:
#include "Audio.h"

uint8_t Audio_Host_ConfigurePipes(USB_ClassInfo_Audio_Host_t* const AudioInterfaceInfo,
                                  uint16_t ConfigDescriptorSize,
                                  void* ConfigDescriptorData)
{
    1196:	2f 92       	push	r2
    1198:	3f 92       	push	r3
    119a:	4f 92       	push	r4
    119c:	5f 92       	push	r5
    119e:	6f 92       	push	r6
    11a0:	7f 92       	push	r7
    11a2:	8f 92       	push	r8
    11a4:	9f 92       	push	r9
    11a6:	af 92       	push	r10
    11a8:	bf 92       	push	r11
    11aa:	cf 92       	push	r12
    11ac:	df 92       	push	r13
    11ae:	ef 92       	push	r14
    11b0:	ff 92       	push	r15
    11b2:	0f 93       	push	r16
    11b4:	1f 93       	push	r17
    11b6:	df 93       	push	r29
    11b8:	cf 93       	push	r28
    11ba:	00 d0       	rcall	.+0      	; 0x11bc <Audio_Host_ConfigurePipes+0x26>
    11bc:	00 d0       	rcall	.+0      	; 0x11be <Audio_Host_ConfigurePipes+0x28>
    11be:	0f 92       	push	r0
    11c0:	cd b7       	in	r28, 0x3d	; 61
    11c2:	de b7       	in	r29, 0x3e	; 62
    11c4:	6c 01       	movw	r12, r24
    11c6:	7a 83       	std	Y+2, r23	; 0x02
    11c8:	69 83       	std	Y+1, r22	; 0x01
    11ca:	5c 83       	std	Y+4, r21	; 0x04
    11cc:	4b 83       	std	Y+3, r20	; 0x03
	USB_Descriptor_Endpoint_t*  DataINEndpoint          = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint         = NULL;
	USB_Descriptor_Interface_t* AudioControlInterface   = NULL;
	USB_Descriptor_Interface_t* AudioStreamingInterface = NULL;

	memset(&AudioInterfaceInfo->State, 0x00, sizeof(AudioInterfaceInfo->State));
    11ce:	02 96       	adiw	r24, 0x02	; 2
    11d0:	fc 01       	movw	r30, r24
    11d2:	88 e0       	ldi	r24, 0x08	; 8
    11d4:	df 01       	movw	r26, r30
    11d6:	1d 92       	st	X+, r1
    11d8:	8a 95       	dec	r24
    11da:	e9 f7       	brne	.-6      	; 0x11d6 <Audio_Host_ConfigurePipes+0x40>

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
    11dc:	eb 81       	ldd	r30, Y+3	; 0x03
    11de:	fc 81       	ldd	r31, Y+4	; 0x04
    11e0:	81 81       	ldd	r24, Z+1	; 0x01
    11e2:	82 30       	cpi	r24, 0x02	; 2
    11e4:	11 f0       	breq	.+4      	; 0x11ea <Audio_Host_ConfigurePipes+0x54>
    11e6:	81 e0       	ldi	r24, 0x01	; 1
    11e8:	96 c0       	rjmp	.+300    	; 0x1316 <Audio_Host_ConfigurePipes+0x180>
    11ea:	88 24       	eor	r8, r8
    11ec:	99 24       	eor	r9, r9
    11ee:	aa 24       	eor	r10, r10
    11f0:	bb 24       	eor	r11, r11
    11f2:	44 24       	eor	r4, r4
    11f4:	55 24       	eor	r5, r5
    11f6:	66 24       	eor	r6, r6
    11f8:	77 24       	eor	r7, r7
		{
			if (!(AudioControlInterface) ||
			    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
			                              DCOMP_Audio_Host_NextAudioStreamInterface) != DESCRIPTOR_SEARCH_COMP_Found)
			{
				if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    11fa:	43 e0       	ldi	r20, 0x03	; 3
    11fc:	24 2e       	mov	r2, r20
    11fe:	31 2c       	mov	r3, r1
    1200:	2c 0e       	add	r2, r28
    1202:	3d 1e       	adc	r3, r29
    1204:	7e 01       	movw	r14, r28
    1206:	08 94       	sec
    1208:	e1 1c       	adc	r14, r1
    120a:	f1 1c       	adc	r15, r1
    120c:	31 c0       	rjmp	.+98     	; 0x1270 <Audio_Host_ConfigurePipes+0xda>
	  return AUDIO_ENUMERROR_InvalidConfigDescriptor;

	while ((AudioInterfaceInfo->Config.DataINPipeNumber  && !(DataINEndpoint)) ||
	       (AudioInterfaceInfo->Config.DataOUTPipeNumber && !(DataOUTEndpoint)))
	{
		if (!(AudioControlInterface) ||
    120e:	41 14       	cp	r4, r1
    1210:	51 04       	cpc	r5, r1
    1212:	49 f0       	breq	.+18     	; 0x1226 <Audio_Host_ConfigurePipes+0x90>
    1214:	c7 01       	movw	r24, r14
    1216:	b1 01       	movw	r22, r2
    1218:	4b e7       	ldi	r20, 0x7B	; 123
    121a:	58 e0       	ldi	r21, 0x08	; 8
    121c:	33 dd       	rcall	.-1434   	; 0xc84 <USB_GetNextDescriptorComp>
    121e:	88 23       	and	r24, r24
    1220:	09 f0       	breq	.+2      	; 0x1224 <Audio_Host_ConfigurePipes+0x8e>
    1222:	91 c0       	rjmp	.+290    	; 0x1346 <Audio_Host_ConfigurePipes+0x1b0>
    1224:	1d c0       	rjmp	.+58     	; 0x1260 <Audio_Host_ConfigurePipes+0xca>
		{
			if (!(AudioControlInterface) ||
			    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
			                              DCOMP_Audio_Host_NextAudioStreamInterface) != DESCRIPTOR_SEARCH_COMP_Found)
			{
				if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    1226:	c7 01       	movw	r24, r14
    1228:	b1 01       	movw	r22, r2
    122a:	4f e5       	ldi	r20, 0x5F	; 95
    122c:	58 e0       	ldi	r21, 0x08	; 8
    122e:	2a dd       	rcall	.-1452   	; 0xc84 <USB_GetNextDescriptorComp>
    1230:	88 23       	and	r24, r24
    1232:	09 f0       	breq	.+2      	; 0x1236 <Audio_Host_ConfigurePipes+0xa0>
    1234:	6f c0       	rjmp	.+222    	; 0x1314 <Audio_Host_ConfigurePipes+0x17e>
				                              DCOMP_Audio_Host_NextAudioControlInterface) != DESCRIPTOR_SEARCH_COMP_Found)
				{
					return AUDIO_ENUMERROR_NoCompatibleInterfaceFound;
				}

				AudioControlInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);			
    1236:	1b 81       	ldd	r17, Y+3	; 0x03
    1238:	0c 81       	ldd	r16, Y+4	; 0x04

				if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    123a:	c7 01       	movw	r24, r14
    123c:	b1 01       	movw	r22, r2
    123e:	4d e6       	ldi	r20, 0x6D	; 109
    1240:	58 e0       	ldi	r21, 0x08	; 8
    1242:	20 dd       	rcall	.-1472   	; 0xc84 <USB_GetNextDescriptorComp>
    1244:	88 23       	and	r24, r24
    1246:	09 f0       	breq	.+2      	; 0x124a <Audio_Host_ConfigurePipes+0xb4>
    1248:	65 c0       	rjmp	.+202    	; 0x1314 <Audio_Host_ConfigurePipes+0x17e>
				                              DCOMP_Audio_Host_NextAudioControlInterface) != DESCRIPTOR_SEARCH_COMP_Found)
				{
					return AUDIO_ENUMERROR_NoCompatibleInterfaceFound;
				}

				AudioControlInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);			
    124a:	81 2f       	mov	r24, r17
    124c:	90 2f       	mov	r25, r16
    124e:	9c 01       	movw	r18, r24
    1250:	29 01       	movw	r4, r18
				{
					return AUDIO_ENUMERROR_NoCompatibleInterfaceFound;
				}
			}

			AudioStreamingInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);
    1252:	6b 80       	ldd	r6, Y+3	; 0x03
    1254:	7c 80       	ldd	r7, Y+4	; 0x04
    1256:	88 24       	eor	r8, r8
    1258:	99 24       	eor	r9, r9
    125a:	aa 24       	eor	r10, r10
    125c:	bb 24       	eor	r11, r11
    125e:	08 c0       	rjmp	.+16     	; 0x1270 <Audio_Host_ConfigurePipes+0xda>
			DataOUTEndpoint = NULL;

			continue;
		}

		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Endpoint_t);
    1260:	eb 81       	ldd	r30, Y+3	; 0x03
    1262:	fc 81       	ldd	r31, Y+4	; 0x04

		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
    1264:	82 81       	ldd	r24, Z+2	; 0x02
    1266:	87 fd       	sbrc	r24, 7
    1268:	02 c0       	rjmp	.+4      	; 0x126e <Audio_Host_ConfigurePipes+0xd8>
    126a:	5f 01       	movw	r10, r30
    126c:	01 c0       	rjmp	.+2      	; 0x1270 <Audio_Host_ConfigurePipes+0xda>
    126e:	4f 01       	movw	r8, r30
	memset(&AudioInterfaceInfo->State, 0x00, sizeof(AudioInterfaceInfo->State));

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return AUDIO_ENUMERROR_InvalidConfigDescriptor;

	while ((AudioInterfaceInfo->Config.DataINPipeNumber  && !(DataINEndpoint)) ||
    1270:	f6 01       	movw	r30, r12
    1272:	80 81       	ld	r24, Z
    1274:	88 23       	and	r24, r24
    1276:	19 f0       	breq	.+6      	; 0x127e <Audio_Host_ConfigurePipes+0xe8>
    1278:	81 14       	cp	r8, r1
    127a:	91 04       	cpc	r9, r1
    127c:	41 f2       	breq	.-112    	; 0x120e <Audio_Host_ConfigurePipes+0x78>
    127e:	d6 01       	movw	r26, r12
    1280:	11 96       	adiw	r26, 0x01	; 1
    1282:	8c 91       	ld	r24, X
    1284:	88 23       	and	r24, r24
    1286:	11 f4       	brne	.+4      	; 0x128c <Audio_Host_ConfigurePipes+0xf6>
    1288:	91 e0       	ldi	r25, 0x01	; 1
    128a:	05 c0       	rjmp	.+10     	; 0x1296 <Audio_Host_ConfigurePipes+0x100>
    128c:	a1 14       	cp	r10, r1
    128e:	b1 04       	cpc	r11, r1
    1290:	09 f4       	brne	.+2      	; 0x1294 <Audio_Host_ConfigurePipes+0xfe>
    1292:	bd cf       	rjmp	.-134    	; 0x120e <Audio_Host_ConfigurePipes+0x78>
    1294:	f9 cf       	rjmp	.-14     	; 0x1288 <Audio_Host_ConfigurePipes+0xf2>
		uint8_t  Type;
		uint8_t  Token;
		uint8_t  EndpointAddress;
		bool     DoubleBanked;

		if (PipeNum == AudioInterfaceInfo->Config.DataINPipeNumber)
    1296:	f6 01       	movw	r30, r12
    1298:	80 81       	ld	r24, Z
    129a:	98 17       	cp	r25, r24
    129c:	59 f4       	brne	.+22     	; 0x12b4 <Audio_Host_ConfigurePipes+0x11e>
		{
			Size            = le16_to_cpu(DataINEndpoint->EndpointSize);
    129e:	d4 01       	movw	r26, r8
    12a0:	14 96       	adiw	r26, 0x04	; 4
    12a2:	0d 91       	ld	r16, X+
    12a4:	1c 91       	ld	r17, X
    12a6:	15 97       	sbiw	r26, 0x05	; 5
			EndpointAddress = DataINEndpoint->EndpointAddress;
    12a8:	12 96       	adiw	r26, 0x02	; 2
    12aa:	2c 91       	ld	r18, X
			Token           = PIPE_TOKEN_IN;
			Type            = EP_TYPE_ISOCHRONOUS;
			DoubleBanked    = true;

			AudioInterfaceInfo->State.DataINPipeSize = DataINEndpoint->EndpointSize;
    12ac:	17 83       	std	Z+7, r17	; 0x07
    12ae:	06 83       	std	Z+6, r16	; 0x06
    12b0:	40 e1       	ldi	r20, 0x10	; 16
    12b2:	0e c0       	rjmp	.+28     	; 0x12d0 <Audio_Host_ConfigurePipes+0x13a>
		}
		else if (PipeNum == AudioInterfaceInfo->Config.DataOUTPipeNumber)
    12b4:	f6 01       	movw	r30, r12
    12b6:	81 81       	ldd	r24, Z+1	; 0x01
    12b8:	98 17       	cp	r25, r24
    12ba:	a9 f4       	brne	.+42     	; 0x12e6 <Audio_Host_ConfigurePipes+0x150>
		{
			Size            = le16_to_cpu(DataOUTEndpoint->EndpointSize);
    12bc:	d5 01       	movw	r26, r10
    12be:	14 96       	adiw	r26, 0x04	; 4
    12c0:	0d 91       	ld	r16, X+
    12c2:	1c 91       	ld	r17, X
    12c4:	15 97       	sbiw	r26, 0x05	; 5
			EndpointAddress = DataOUTEndpoint->EndpointAddress;
    12c6:	12 96       	adiw	r26, 0x02	; 2
    12c8:	2c 91       	ld	r18, X
			Token           = PIPE_TOKEN_OUT;
			Type            = EP_TYPE_ISOCHRONOUS;
			DoubleBanked    = true;

			AudioInterfaceInfo->State.DataOUTPipeSize = DataOUTEndpoint->EndpointSize;
    12ca:	11 87       	std	Z+9, r17	; 0x09
    12cc:	00 87       	std	Z+8, r16	; 0x08
    12ce:	40 e2       	ldi	r20, 0x20	; 32
		else
		{
			continue;
		}
		
		if (!(Pipe_ConfigurePipe(PipeNum, Type, Token, EndpointAddress, Size,
    12d0:	89 2f       	mov	r24, r25
    12d2:	61 e0       	ldi	r22, 0x01	; 1
    12d4:	34 e0       	ldi	r19, 0x04	; 4
    12d6:	e3 2e       	mov	r14, r19
    12d8:	9d 83       	std	Y+5, r25	; 0x05
    12da:	51 db       	rcall	.-2398   	; 0x97e <Pipe_ConfigurePipe>
    12dc:	9d 81       	ldd	r25, Y+5	; 0x05
    12de:	88 23       	and	r24, r24
    12e0:	11 f4       	brne	.+4      	; 0x12e6 <Audio_Host_ConfigurePipes+0x150>
    12e2:	83 e0       	ldi	r24, 0x03	; 3
    12e4:	18 c0       	rjmp	.+48     	; 0x1316 <Audio_Host_ConfigurePipes+0x180>
		  DataINEndpoint  = EndpointData;
		else
		  DataOUTEndpoint = EndpointData;
	}

	for (uint8_t PipeNum = 1; PipeNum < PIPE_TOTAL_PIPES; PipeNum++)
    12e6:	9f 5f       	subi	r25, 0xFF	; 255
    12e8:	97 30       	cpi	r25, 0x07	; 7
    12ea:	a9 f6       	brne	.-86     	; 0x1296 <Audio_Host_ConfigurePipes+0x100>
		{
			return AUDIO_ENUMERROR_PipeConfigurationFailed;
		}
	}

	AudioInterfaceInfo->State.ControlInterfaceNumber    = AudioControlInterface->InterfaceNumber;
    12ec:	f2 01       	movw	r30, r4
    12ee:	82 81       	ldd	r24, Z+2	; 0x02
    12f0:	d6 01       	movw	r26, r12
    12f2:	13 96       	adiw	r26, 0x03	; 3
    12f4:	8c 93       	st	X, r24
    12f6:	13 97       	sbiw	r26, 0x03	; 3
	AudioInterfaceInfo->State.StreamingInterfaceNumber  = AudioStreamingInterface->InterfaceNumber;
    12f8:	f3 01       	movw	r30, r6
    12fa:	82 81       	ldd	r24, Z+2	; 0x02
    12fc:	14 96       	adiw	r26, 0x04	; 4
    12fe:	8c 93       	st	X, r24
    1300:	14 97       	sbiw	r26, 0x04	; 4
	AudioInterfaceInfo->State.EnabledStreamingAltIndex  = AudioStreamingInterface->AlternateSetting;
    1302:	83 81       	ldd	r24, Z+3	; 0x03
    1304:	15 96       	adiw	r26, 0x05	; 5
    1306:	8c 93       	st	X, r24
    1308:	15 97       	sbiw	r26, 0x05	; 5
	AudioInterfaceInfo->State.IsActive = true;
    130a:	81 e0       	ldi	r24, 0x01	; 1
    130c:	12 96       	adiw	r26, 0x02	; 2
    130e:	8c 93       	st	X, r24
    1310:	80 e0       	ldi	r24, 0x00	; 0
    1312:	01 c0       	rjmp	.+2      	; 0x1316 <Audio_Host_ConfigurePipes+0x180>
	
	return AUDIO_ENUMERROR_NoError;
    1314:	82 e0       	ldi	r24, 0x02	; 2
}
    1316:	0f 90       	pop	r0
    1318:	0f 90       	pop	r0
    131a:	0f 90       	pop	r0
    131c:	0f 90       	pop	r0
    131e:	0f 90       	pop	r0
    1320:	cf 91       	pop	r28
    1322:	df 91       	pop	r29
    1324:	1f 91       	pop	r17
    1326:	0f 91       	pop	r16
    1328:	ff 90       	pop	r15
    132a:	ef 90       	pop	r14
    132c:	df 90       	pop	r13
    132e:	cf 90       	pop	r12
    1330:	bf 90       	pop	r11
    1332:	af 90       	pop	r10
    1334:	9f 90       	pop	r9
    1336:	8f 90       	pop	r8
    1338:	7f 90       	pop	r7
    133a:	6f 90       	pop	r6
    133c:	5f 90       	pop	r5
    133e:	4f 90       	pop	r4
    1340:	3f 90       	pop	r3
    1342:	2f 90       	pop	r2
    1344:	08 95       	ret
	{
		if (!(AudioControlInterface) ||
		    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
		                              DCOMP_Audio_Host_NextAudioInterfaceDataEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			if (!(AudioControlInterface) ||
    1346:	c7 01       	movw	r24, r14
    1348:	b1 01       	movw	r22, r2
    134a:	4d e6       	ldi	r20, 0x6D	; 109
    134c:	58 e0       	ldi	r21, 0x08	; 8
    134e:	9a dc       	rcall	.-1740   	; 0xc84 <USB_GetNextDescriptorComp>
    1350:	88 23       	and	r24, r24
    1352:	09 f0       	breq	.+2      	; 0x1356 <Audio_Host_ConfigurePipes+0x1c0>
    1354:	68 cf       	rjmp	.-304    	; 0x1226 <Audio_Host_ConfigurePipes+0x90>
    1356:	7d cf       	rjmp	.-262    	; 0x1252 <Audio_Host_ConfigurePipes+0xbc>

00001358 <Serial_putchar>:

FILE USARTSerialStream;

int Serial_putchar(char DataByte,
                   FILE *Stream)
{
    1358:	98 2f       	mov	r25, r24
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
    135a:	80 91 c8 00 	lds	r24, 0x00C8
    135e:	85 ff       	sbrs	r24, 5
    1360:	fc cf       	rjmp	.-8      	; 0x135a <Serial_putchar+0x2>
				UDR1 = DataByte;
    1362:	90 93 ce 00 	sts	0x00CE, r25
	(void)Stream;

	Serial_SendByte(DataByte);
	return 0;
}
    1366:	80 e0       	ldi	r24, 0x00	; 0
    1368:	90 e0       	ldi	r25, 0x00	; 0
    136a:	08 95       	ret

0000136c <Serial_getchar>:
			 *  \return Boolean \c true if a character has been received, \c false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    136c:	80 91 c8 00 	lds	r24, 0x00C8

int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    1370:	87 fd       	sbrc	r24, 7
    1372:	03 c0       	rjmp	.+6      	; 0x137a <Serial_getchar+0xe>
    1374:	2e ef       	ldi	r18, 0xFE	; 254
    1376:	3f ef       	ldi	r19, 0xFF	; 255
    1378:	0b c0       	rjmp	.+22     	; 0x1390 <Serial_getchar+0x24>
    137a:	80 91 c8 00 	lds	r24, 0x00C8
			 *  \return Next byte received from the USART, or a negative value if no byte has been received.
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
    137e:	87 fd       	sbrc	r24, 7
    1380:	03 c0       	rjmp	.+6      	; 0x1388 <Serial_getchar+0x1c>
    1382:	2f ef       	ldi	r18, 0xFF	; 255
    1384:	3f ef       	ldi	r19, 0xFF	; 255
    1386:	04 c0       	rjmp	.+8      	; 0x1390 <Serial_getchar+0x24>
				  return -1;
				
				return UDR1;
    1388:	80 91 ce 00 	lds	r24, 0x00CE
    138c:	28 2f       	mov	r18, r24
    138e:	30 e0       	ldi	r19, 0x00	; 0
	  return _FDEV_EOF;

	return Serial_ReceiveByte();
}
    1390:	c9 01       	movw	r24, r18
    1392:	08 95       	ret

00001394 <printf_P>:
    1394:	df 93       	push	r29
    1396:	cf 93       	push	r28
    1398:	cd b7       	in	r28, 0x3d	; 61
    139a:	de b7       	in	r29, 0x3e	; 62
    139c:	fe 01       	movw	r30, r28
    139e:	35 96       	adiw	r30, 0x05	; 5
    13a0:	61 91       	ld	r22, Z+
    13a2:	71 91       	ld	r23, Z+
    13a4:	a0 91 3c 01 	lds	r26, 0x013C
    13a8:	b0 91 3d 01 	lds	r27, 0x013D
    13ac:	13 96       	adiw	r26, 0x03	; 3
    13ae:	8c 91       	ld	r24, X
    13b0:	13 97       	sbiw	r26, 0x03	; 3
    13b2:	88 60       	ori	r24, 0x08	; 8
    13b4:	13 96       	adiw	r26, 0x03	; 3
    13b6:	8c 93       	st	X, r24
    13b8:	80 91 3c 01 	lds	r24, 0x013C
    13bc:	90 91 3d 01 	lds	r25, 0x013D
    13c0:	af 01       	movw	r20, r30
    13c2:	3f d0       	rcall	.+126    	; 0x1442 <vfprintf>
    13c4:	e0 91 3c 01 	lds	r30, 0x013C
    13c8:	f0 91 3d 01 	lds	r31, 0x013D
    13cc:	23 81       	ldd	r18, Z+3	; 0x03
    13ce:	27 7f       	andi	r18, 0xF7	; 247
    13d0:	23 83       	std	Z+3, r18	; 0x03
    13d2:	cf 91       	pop	r28
    13d4:	df 91       	pop	r29
    13d6:	08 95       	ret

000013d8 <puts_P>:
    13d8:	0f 93       	push	r16
    13da:	1f 93       	push	r17
    13dc:	cf 93       	push	r28
    13de:	df 93       	push	r29
    13e0:	ec 01       	movw	r28, r24
    13e2:	e0 91 3c 01 	lds	r30, 0x013C
    13e6:	f0 91 3d 01 	lds	r31, 0x013D
    13ea:	83 81       	ldd	r24, Z+3	; 0x03
    13ec:	81 ff       	sbrs	r24, 1
    13ee:	21 c0       	rjmp	.+66     	; 0x1432 <puts_P+0x5a>
    13f0:	00 e0       	ldi	r16, 0x00	; 0
    13f2:	10 e0       	ldi	r17, 0x00	; 0
    13f4:	0e c0       	rjmp	.+28     	; 0x1412 <puts_P+0x3a>
    13f6:	e0 91 3c 01 	lds	r30, 0x013C
    13fa:	f0 91 3d 01 	lds	r31, 0x013D
    13fe:	20 85       	ldd	r18, Z+8	; 0x08
    1400:	31 85       	ldd	r19, Z+9	; 0x09
    1402:	bf 01       	movw	r22, r30
    1404:	f9 01       	movw	r30, r18
    1406:	09 95       	icall
    1408:	89 2b       	or	r24, r25
    140a:	11 f0       	breq	.+4      	; 0x1410 <puts_P+0x38>
    140c:	0f ef       	ldi	r16, 0xFF	; 255
    140e:	1f ef       	ldi	r17, 0xFF	; 255
    1410:	21 96       	adiw	r28, 0x01	; 1
    1412:	fe 01       	movw	r30, r28
    1414:	84 91       	lpm	r24, Z+
    1416:	88 23       	and	r24, r24
    1418:	71 f7       	brne	.-36     	; 0x13f6 <puts_P+0x1e>
    141a:	e0 91 3c 01 	lds	r30, 0x013C
    141e:	f0 91 3d 01 	lds	r31, 0x013D
    1422:	20 85       	ldd	r18, Z+8	; 0x08
    1424:	31 85       	ldd	r19, Z+9	; 0x09
    1426:	8a e0       	ldi	r24, 0x0A	; 10
    1428:	bf 01       	movw	r22, r30
    142a:	f9 01       	movw	r30, r18
    142c:	09 95       	icall
    142e:	89 2b       	or	r24, r25
    1430:	11 f0       	breq	.+4      	; 0x1436 <puts_P+0x5e>
    1432:	0f ef       	ldi	r16, 0xFF	; 255
    1434:	1f ef       	ldi	r17, 0xFF	; 255
    1436:	c8 01       	movw	r24, r16
    1438:	df 91       	pop	r29
    143a:	cf 91       	pop	r28
    143c:	1f 91       	pop	r17
    143e:	0f 91       	pop	r16
    1440:	08 95       	ret

00001442 <vfprintf>:
    1442:	2f 92       	push	r2
    1444:	3f 92       	push	r3
    1446:	4f 92       	push	r4
    1448:	5f 92       	push	r5
    144a:	6f 92       	push	r6
    144c:	7f 92       	push	r7
    144e:	8f 92       	push	r8
    1450:	9f 92       	push	r9
    1452:	af 92       	push	r10
    1454:	bf 92       	push	r11
    1456:	cf 92       	push	r12
    1458:	df 92       	push	r13
    145a:	ef 92       	push	r14
    145c:	ff 92       	push	r15
    145e:	0f 93       	push	r16
    1460:	1f 93       	push	r17
    1462:	df 93       	push	r29
    1464:	cf 93       	push	r28
    1466:	cd b7       	in	r28, 0x3d	; 61
    1468:	de b7       	in	r29, 0x3e	; 62
    146a:	2b 97       	sbiw	r28, 0x0b	; 11
    146c:	0f b6       	in	r0, 0x3f	; 63
    146e:	f8 94       	cli
    1470:	de bf       	out	0x3e, r29	; 62
    1472:	0f be       	out	0x3f, r0	; 63
    1474:	cd bf       	out	0x3d, r28	; 61
    1476:	3c 01       	movw	r6, r24
    1478:	2b 01       	movw	r4, r22
    147a:	5a 01       	movw	r10, r20
    147c:	fc 01       	movw	r30, r24
    147e:	17 82       	std	Z+7, r1	; 0x07
    1480:	16 82       	std	Z+6, r1	; 0x06
    1482:	83 81       	ldd	r24, Z+3	; 0x03
    1484:	81 fd       	sbrc	r24, 1
    1486:	03 c0       	rjmp	.+6      	; 0x148e <vfprintf+0x4c>
    1488:	6f ef       	ldi	r22, 0xFF	; 255
    148a:	7f ef       	ldi	r23, 0xFF	; 255
    148c:	b9 c1       	rjmp	.+882    	; 0x1800 <vfprintf+0x3be>
    148e:	9a e0       	ldi	r25, 0x0A	; 10
    1490:	89 2e       	mov	r8, r25
    1492:	1e 01       	movw	r2, r28
    1494:	08 94       	sec
    1496:	21 1c       	adc	r2, r1
    1498:	31 1c       	adc	r3, r1
    149a:	f3 01       	movw	r30, r6
    149c:	23 81       	ldd	r18, Z+3	; 0x03
    149e:	f2 01       	movw	r30, r4
    14a0:	23 fd       	sbrc	r18, 3
    14a2:	85 91       	lpm	r24, Z+
    14a4:	23 ff       	sbrs	r18, 3
    14a6:	81 91       	ld	r24, Z+
    14a8:	2f 01       	movw	r4, r30
    14aa:	88 23       	and	r24, r24
    14ac:	09 f4       	brne	.+2      	; 0x14b0 <vfprintf+0x6e>
    14ae:	a5 c1       	rjmp	.+842    	; 0x17fa <vfprintf+0x3b8>
    14b0:	85 32       	cpi	r24, 0x25	; 37
    14b2:	39 f4       	brne	.+14     	; 0x14c2 <vfprintf+0x80>
    14b4:	23 fd       	sbrc	r18, 3
    14b6:	85 91       	lpm	r24, Z+
    14b8:	23 ff       	sbrs	r18, 3
    14ba:	81 91       	ld	r24, Z+
    14bc:	2f 01       	movw	r4, r30
    14be:	85 32       	cpi	r24, 0x25	; 37
    14c0:	21 f4       	brne	.+8      	; 0x14ca <vfprintf+0x88>
    14c2:	90 e0       	ldi	r25, 0x00	; 0
    14c4:	b3 01       	movw	r22, r6
    14c6:	cc d1       	rcall	.+920    	; 0x1860 <fputc>
    14c8:	e8 cf       	rjmp	.-48     	; 0x149a <vfprintf+0x58>
    14ca:	98 2f       	mov	r25, r24
    14cc:	ff 24       	eor	r15, r15
    14ce:	ee 24       	eor	r14, r14
    14d0:	99 24       	eor	r9, r9
    14d2:	ff e1       	ldi	r31, 0x1F	; 31
    14d4:	ff 15       	cp	r31, r15
    14d6:	d0 f0       	brcs	.+52     	; 0x150c <vfprintf+0xca>
    14d8:	9b 32       	cpi	r25, 0x2B	; 43
    14da:	69 f0       	breq	.+26     	; 0x14f6 <vfprintf+0xb4>
    14dc:	9c 32       	cpi	r25, 0x2C	; 44
    14de:	28 f4       	brcc	.+10     	; 0x14ea <vfprintf+0xa8>
    14e0:	90 32       	cpi	r25, 0x20	; 32
    14e2:	59 f0       	breq	.+22     	; 0x14fa <vfprintf+0xb8>
    14e4:	93 32       	cpi	r25, 0x23	; 35
    14e6:	91 f4       	brne	.+36     	; 0x150c <vfprintf+0xca>
    14e8:	0e c0       	rjmp	.+28     	; 0x1506 <vfprintf+0xc4>
    14ea:	9d 32       	cpi	r25, 0x2D	; 45
    14ec:	49 f0       	breq	.+18     	; 0x1500 <vfprintf+0xbe>
    14ee:	90 33       	cpi	r25, 0x30	; 48
    14f0:	69 f4       	brne	.+26     	; 0x150c <vfprintf+0xca>
    14f2:	41 e0       	ldi	r20, 0x01	; 1
    14f4:	24 c0       	rjmp	.+72     	; 0x153e <vfprintf+0xfc>
    14f6:	52 e0       	ldi	r21, 0x02	; 2
    14f8:	f5 2a       	or	r15, r21
    14fa:	84 e0       	ldi	r24, 0x04	; 4
    14fc:	f8 2a       	or	r15, r24
    14fe:	28 c0       	rjmp	.+80     	; 0x1550 <vfprintf+0x10e>
    1500:	98 e0       	ldi	r25, 0x08	; 8
    1502:	f9 2a       	or	r15, r25
    1504:	25 c0       	rjmp	.+74     	; 0x1550 <vfprintf+0x10e>
    1506:	e0 e1       	ldi	r30, 0x10	; 16
    1508:	fe 2a       	or	r15, r30
    150a:	22 c0       	rjmp	.+68     	; 0x1550 <vfprintf+0x10e>
    150c:	f7 fc       	sbrc	r15, 7
    150e:	29 c0       	rjmp	.+82     	; 0x1562 <vfprintf+0x120>
    1510:	89 2f       	mov	r24, r25
    1512:	80 53       	subi	r24, 0x30	; 48
    1514:	8a 30       	cpi	r24, 0x0A	; 10
    1516:	70 f4       	brcc	.+28     	; 0x1534 <vfprintf+0xf2>
    1518:	f6 fe       	sbrs	r15, 6
    151a:	05 c0       	rjmp	.+10     	; 0x1526 <vfprintf+0xe4>
    151c:	98 9c       	mul	r9, r8
    151e:	90 2c       	mov	r9, r0
    1520:	11 24       	eor	r1, r1
    1522:	98 0e       	add	r9, r24
    1524:	15 c0       	rjmp	.+42     	; 0x1550 <vfprintf+0x10e>
    1526:	e8 9c       	mul	r14, r8
    1528:	e0 2c       	mov	r14, r0
    152a:	11 24       	eor	r1, r1
    152c:	e8 0e       	add	r14, r24
    152e:	f0 e2       	ldi	r31, 0x20	; 32
    1530:	ff 2a       	or	r15, r31
    1532:	0e c0       	rjmp	.+28     	; 0x1550 <vfprintf+0x10e>
    1534:	9e 32       	cpi	r25, 0x2E	; 46
    1536:	29 f4       	brne	.+10     	; 0x1542 <vfprintf+0x100>
    1538:	f6 fc       	sbrc	r15, 6
    153a:	5f c1       	rjmp	.+702    	; 0x17fa <vfprintf+0x3b8>
    153c:	40 e4       	ldi	r20, 0x40	; 64
    153e:	f4 2a       	or	r15, r20
    1540:	07 c0       	rjmp	.+14     	; 0x1550 <vfprintf+0x10e>
    1542:	9c 36       	cpi	r25, 0x6C	; 108
    1544:	19 f4       	brne	.+6      	; 0x154c <vfprintf+0x10a>
    1546:	50 e8       	ldi	r21, 0x80	; 128
    1548:	f5 2a       	or	r15, r21
    154a:	02 c0       	rjmp	.+4      	; 0x1550 <vfprintf+0x10e>
    154c:	98 36       	cpi	r25, 0x68	; 104
    154e:	49 f4       	brne	.+18     	; 0x1562 <vfprintf+0x120>
    1550:	f2 01       	movw	r30, r4
    1552:	23 fd       	sbrc	r18, 3
    1554:	95 91       	lpm	r25, Z+
    1556:	23 ff       	sbrs	r18, 3
    1558:	91 91       	ld	r25, Z+
    155a:	2f 01       	movw	r4, r30
    155c:	99 23       	and	r25, r25
    155e:	09 f0       	breq	.+2      	; 0x1562 <vfprintf+0x120>
    1560:	b8 cf       	rjmp	.-144    	; 0x14d2 <vfprintf+0x90>
    1562:	89 2f       	mov	r24, r25
    1564:	85 54       	subi	r24, 0x45	; 69
    1566:	83 30       	cpi	r24, 0x03	; 3
    1568:	18 f0       	brcs	.+6      	; 0x1570 <vfprintf+0x12e>
    156a:	80 52       	subi	r24, 0x20	; 32
    156c:	83 30       	cpi	r24, 0x03	; 3
    156e:	38 f4       	brcc	.+14     	; 0x157e <vfprintf+0x13c>
    1570:	44 e0       	ldi	r20, 0x04	; 4
    1572:	50 e0       	ldi	r21, 0x00	; 0
    1574:	a4 0e       	add	r10, r20
    1576:	b5 1e       	adc	r11, r21
    1578:	5f e3       	ldi	r21, 0x3F	; 63
    157a:	59 83       	std	Y+1, r21	; 0x01
    157c:	0f c0       	rjmp	.+30     	; 0x159c <vfprintf+0x15a>
    157e:	93 36       	cpi	r25, 0x63	; 99
    1580:	31 f0       	breq	.+12     	; 0x158e <vfprintf+0x14c>
    1582:	93 37       	cpi	r25, 0x73	; 115
    1584:	79 f0       	breq	.+30     	; 0x15a4 <vfprintf+0x162>
    1586:	93 35       	cpi	r25, 0x53	; 83
    1588:	09 f0       	breq	.+2      	; 0x158c <vfprintf+0x14a>
    158a:	52 c0       	rjmp	.+164    	; 0x1630 <vfprintf+0x1ee>
    158c:	1f c0       	rjmp	.+62     	; 0x15cc <vfprintf+0x18a>
    158e:	f5 01       	movw	r30, r10
    1590:	80 81       	ld	r24, Z
    1592:	89 83       	std	Y+1, r24	; 0x01
    1594:	42 e0       	ldi	r20, 0x02	; 2
    1596:	50 e0       	ldi	r21, 0x00	; 0
    1598:	a4 0e       	add	r10, r20
    159a:	b5 1e       	adc	r11, r21
    159c:	61 01       	movw	r12, r2
    159e:	01 e0       	ldi	r16, 0x01	; 1
    15a0:	10 e0       	ldi	r17, 0x00	; 0
    15a2:	11 c0       	rjmp	.+34     	; 0x15c6 <vfprintf+0x184>
    15a4:	f5 01       	movw	r30, r10
    15a6:	c0 80       	ld	r12, Z
    15a8:	d1 80       	ldd	r13, Z+1	; 0x01
    15aa:	f6 fc       	sbrc	r15, 6
    15ac:	03 c0       	rjmp	.+6      	; 0x15b4 <vfprintf+0x172>
    15ae:	6f ef       	ldi	r22, 0xFF	; 255
    15b0:	7f ef       	ldi	r23, 0xFF	; 255
    15b2:	02 c0       	rjmp	.+4      	; 0x15b8 <vfprintf+0x176>
    15b4:	69 2d       	mov	r22, r9
    15b6:	70 e0       	ldi	r23, 0x00	; 0
    15b8:	42 e0       	ldi	r20, 0x02	; 2
    15ba:	50 e0       	ldi	r21, 0x00	; 0
    15bc:	a4 0e       	add	r10, r20
    15be:	b5 1e       	adc	r11, r21
    15c0:	c6 01       	movw	r24, r12
    15c2:	43 d1       	rcall	.+646    	; 0x184a <strnlen>
    15c4:	8c 01       	movw	r16, r24
    15c6:	5f e7       	ldi	r21, 0x7F	; 127
    15c8:	f5 22       	and	r15, r21
    15ca:	13 c0       	rjmp	.+38     	; 0x15f2 <vfprintf+0x1b0>
    15cc:	f5 01       	movw	r30, r10
    15ce:	c0 80       	ld	r12, Z
    15d0:	d1 80       	ldd	r13, Z+1	; 0x01
    15d2:	f6 fc       	sbrc	r15, 6
    15d4:	03 c0       	rjmp	.+6      	; 0x15dc <vfprintf+0x19a>
    15d6:	6f ef       	ldi	r22, 0xFF	; 255
    15d8:	7f ef       	ldi	r23, 0xFF	; 255
    15da:	02 c0       	rjmp	.+4      	; 0x15e0 <vfprintf+0x19e>
    15dc:	69 2d       	mov	r22, r9
    15de:	70 e0       	ldi	r23, 0x00	; 0
    15e0:	42 e0       	ldi	r20, 0x02	; 2
    15e2:	50 e0       	ldi	r21, 0x00	; 0
    15e4:	a4 0e       	add	r10, r20
    15e6:	b5 1e       	adc	r11, r21
    15e8:	c6 01       	movw	r24, r12
    15ea:	24 d1       	rcall	.+584    	; 0x1834 <strnlen_P>
    15ec:	8c 01       	movw	r16, r24
    15ee:	50 e8       	ldi	r21, 0x80	; 128
    15f0:	f5 2a       	or	r15, r21
    15f2:	f3 fe       	sbrs	r15, 3
    15f4:	06 c0       	rjmp	.+12     	; 0x1602 <vfprintf+0x1c0>
    15f6:	18 c0       	rjmp	.+48     	; 0x1628 <vfprintf+0x1e6>
    15f8:	80 e2       	ldi	r24, 0x20	; 32
    15fa:	90 e0       	ldi	r25, 0x00	; 0
    15fc:	b3 01       	movw	r22, r6
    15fe:	30 d1       	rcall	.+608    	; 0x1860 <fputc>
    1600:	ea 94       	dec	r14
    1602:	8e 2d       	mov	r24, r14
    1604:	90 e0       	ldi	r25, 0x00	; 0
    1606:	08 17       	cp	r16, r24
    1608:	19 07       	cpc	r17, r25
    160a:	b0 f3       	brcs	.-20     	; 0x15f8 <vfprintf+0x1b6>
    160c:	0d c0       	rjmp	.+26     	; 0x1628 <vfprintf+0x1e6>
    160e:	f6 01       	movw	r30, r12
    1610:	f7 fc       	sbrc	r15, 7
    1612:	85 91       	lpm	r24, Z+
    1614:	f7 fe       	sbrs	r15, 7
    1616:	81 91       	ld	r24, Z+
    1618:	6f 01       	movw	r12, r30
    161a:	90 e0       	ldi	r25, 0x00	; 0
    161c:	b3 01       	movw	r22, r6
    161e:	20 d1       	rcall	.+576    	; 0x1860 <fputc>
    1620:	e1 10       	cpse	r14, r1
    1622:	ea 94       	dec	r14
    1624:	01 50       	subi	r16, 0x01	; 1
    1626:	10 40       	sbci	r17, 0x00	; 0
    1628:	01 15       	cp	r16, r1
    162a:	11 05       	cpc	r17, r1
    162c:	81 f7       	brne	.-32     	; 0x160e <vfprintf+0x1cc>
    162e:	e2 c0       	rjmp	.+452    	; 0x17f4 <vfprintf+0x3b2>
    1630:	94 36       	cpi	r25, 0x64	; 100
    1632:	11 f0       	breq	.+4      	; 0x1638 <vfprintf+0x1f6>
    1634:	99 36       	cpi	r25, 0x69	; 105
    1636:	61 f5       	brne	.+88     	; 0x1690 <vfprintf+0x24e>
    1638:	f7 fe       	sbrs	r15, 7
    163a:	08 c0       	rjmp	.+16     	; 0x164c <vfprintf+0x20a>
    163c:	f5 01       	movw	r30, r10
    163e:	20 81       	ld	r18, Z
    1640:	31 81       	ldd	r19, Z+1	; 0x01
    1642:	42 81       	ldd	r20, Z+2	; 0x02
    1644:	53 81       	ldd	r21, Z+3	; 0x03
    1646:	84 e0       	ldi	r24, 0x04	; 4
    1648:	90 e0       	ldi	r25, 0x00	; 0
    164a:	0a c0       	rjmp	.+20     	; 0x1660 <vfprintf+0x21e>
    164c:	f5 01       	movw	r30, r10
    164e:	80 81       	ld	r24, Z
    1650:	91 81       	ldd	r25, Z+1	; 0x01
    1652:	9c 01       	movw	r18, r24
    1654:	44 27       	eor	r20, r20
    1656:	37 fd       	sbrc	r19, 7
    1658:	40 95       	com	r20
    165a:	54 2f       	mov	r21, r20
    165c:	82 e0       	ldi	r24, 0x02	; 2
    165e:	90 e0       	ldi	r25, 0x00	; 0
    1660:	a8 0e       	add	r10, r24
    1662:	b9 1e       	adc	r11, r25
    1664:	9f e6       	ldi	r25, 0x6F	; 111
    1666:	f9 22       	and	r15, r25
    1668:	57 ff       	sbrs	r21, 7
    166a:	09 c0       	rjmp	.+18     	; 0x167e <vfprintf+0x23c>
    166c:	50 95       	com	r21
    166e:	40 95       	com	r20
    1670:	30 95       	com	r19
    1672:	21 95       	neg	r18
    1674:	3f 4f       	sbci	r19, 0xFF	; 255
    1676:	4f 4f       	sbci	r20, 0xFF	; 255
    1678:	5f 4f       	sbci	r21, 0xFF	; 255
    167a:	e0 e8       	ldi	r30, 0x80	; 128
    167c:	fe 2a       	or	r15, r30
    167e:	ca 01       	movw	r24, r20
    1680:	b9 01       	movw	r22, r18
    1682:	a1 01       	movw	r20, r2
    1684:	2a e0       	ldi	r18, 0x0A	; 10
    1686:	30 e0       	ldi	r19, 0x00	; 0
    1688:	17 d1       	rcall	.+558    	; 0x18b8 <__ultoa_invert>
    168a:	d8 2e       	mov	r13, r24
    168c:	d2 18       	sub	r13, r2
    168e:	3f c0       	rjmp	.+126    	; 0x170e <vfprintf+0x2cc>
    1690:	95 37       	cpi	r25, 0x75	; 117
    1692:	29 f4       	brne	.+10     	; 0x169e <vfprintf+0x25c>
    1694:	1f 2d       	mov	r17, r15
    1696:	1f 7e       	andi	r17, 0xEF	; 239
    1698:	2a e0       	ldi	r18, 0x0A	; 10
    169a:	30 e0       	ldi	r19, 0x00	; 0
    169c:	1d c0       	rjmp	.+58     	; 0x16d8 <vfprintf+0x296>
    169e:	1f 2d       	mov	r17, r15
    16a0:	19 7f       	andi	r17, 0xF9	; 249
    16a2:	9f 36       	cpi	r25, 0x6F	; 111
    16a4:	61 f0       	breq	.+24     	; 0x16be <vfprintf+0x27c>
    16a6:	90 37       	cpi	r25, 0x70	; 112
    16a8:	20 f4       	brcc	.+8      	; 0x16b2 <vfprintf+0x270>
    16aa:	98 35       	cpi	r25, 0x58	; 88
    16ac:	09 f0       	breq	.+2      	; 0x16b0 <vfprintf+0x26e>
    16ae:	a5 c0       	rjmp	.+330    	; 0x17fa <vfprintf+0x3b8>
    16b0:	0f c0       	rjmp	.+30     	; 0x16d0 <vfprintf+0x28e>
    16b2:	90 37       	cpi	r25, 0x70	; 112
    16b4:	39 f0       	breq	.+14     	; 0x16c4 <vfprintf+0x282>
    16b6:	98 37       	cpi	r25, 0x78	; 120
    16b8:	09 f0       	breq	.+2      	; 0x16bc <vfprintf+0x27a>
    16ba:	9f c0       	rjmp	.+318    	; 0x17fa <vfprintf+0x3b8>
    16bc:	04 c0       	rjmp	.+8      	; 0x16c6 <vfprintf+0x284>
    16be:	28 e0       	ldi	r18, 0x08	; 8
    16c0:	30 e0       	ldi	r19, 0x00	; 0
    16c2:	0a c0       	rjmp	.+20     	; 0x16d8 <vfprintf+0x296>
    16c4:	10 61       	ori	r17, 0x10	; 16
    16c6:	14 fd       	sbrc	r17, 4
    16c8:	14 60       	ori	r17, 0x04	; 4
    16ca:	20 e1       	ldi	r18, 0x10	; 16
    16cc:	30 e0       	ldi	r19, 0x00	; 0
    16ce:	04 c0       	rjmp	.+8      	; 0x16d8 <vfprintf+0x296>
    16d0:	14 fd       	sbrc	r17, 4
    16d2:	16 60       	ori	r17, 0x06	; 6
    16d4:	20 e1       	ldi	r18, 0x10	; 16
    16d6:	32 e0       	ldi	r19, 0x02	; 2
    16d8:	17 ff       	sbrs	r17, 7
    16da:	08 c0       	rjmp	.+16     	; 0x16ec <vfprintf+0x2aa>
    16dc:	f5 01       	movw	r30, r10
    16de:	60 81       	ld	r22, Z
    16e0:	71 81       	ldd	r23, Z+1	; 0x01
    16e2:	82 81       	ldd	r24, Z+2	; 0x02
    16e4:	93 81       	ldd	r25, Z+3	; 0x03
    16e6:	44 e0       	ldi	r20, 0x04	; 4
    16e8:	50 e0       	ldi	r21, 0x00	; 0
    16ea:	08 c0       	rjmp	.+16     	; 0x16fc <vfprintf+0x2ba>
    16ec:	f5 01       	movw	r30, r10
    16ee:	80 81       	ld	r24, Z
    16f0:	91 81       	ldd	r25, Z+1	; 0x01
    16f2:	bc 01       	movw	r22, r24
    16f4:	80 e0       	ldi	r24, 0x00	; 0
    16f6:	90 e0       	ldi	r25, 0x00	; 0
    16f8:	42 e0       	ldi	r20, 0x02	; 2
    16fa:	50 e0       	ldi	r21, 0x00	; 0
    16fc:	a4 0e       	add	r10, r20
    16fe:	b5 1e       	adc	r11, r21
    1700:	a1 01       	movw	r20, r2
    1702:	da d0       	rcall	.+436    	; 0x18b8 <__ultoa_invert>
    1704:	d8 2e       	mov	r13, r24
    1706:	d2 18       	sub	r13, r2
    1708:	8f e7       	ldi	r24, 0x7F	; 127
    170a:	f8 2e       	mov	r15, r24
    170c:	f1 22       	and	r15, r17
    170e:	f6 fe       	sbrs	r15, 6
    1710:	0b c0       	rjmp	.+22     	; 0x1728 <vfprintf+0x2e6>
    1712:	5e ef       	ldi	r21, 0xFE	; 254
    1714:	f5 22       	and	r15, r21
    1716:	d9 14       	cp	r13, r9
    1718:	38 f4       	brcc	.+14     	; 0x1728 <vfprintf+0x2e6>
    171a:	f4 fe       	sbrs	r15, 4
    171c:	07 c0       	rjmp	.+14     	; 0x172c <vfprintf+0x2ea>
    171e:	f2 fc       	sbrc	r15, 2
    1720:	05 c0       	rjmp	.+10     	; 0x172c <vfprintf+0x2ea>
    1722:	8f ee       	ldi	r24, 0xEF	; 239
    1724:	f8 22       	and	r15, r24
    1726:	02 c0       	rjmp	.+4      	; 0x172c <vfprintf+0x2ea>
    1728:	1d 2d       	mov	r17, r13
    172a:	01 c0       	rjmp	.+2      	; 0x172e <vfprintf+0x2ec>
    172c:	19 2d       	mov	r17, r9
    172e:	f4 fe       	sbrs	r15, 4
    1730:	0d c0       	rjmp	.+26     	; 0x174c <vfprintf+0x30a>
    1732:	fe 01       	movw	r30, r28
    1734:	ed 0d       	add	r30, r13
    1736:	f1 1d       	adc	r31, r1
    1738:	80 81       	ld	r24, Z
    173a:	80 33       	cpi	r24, 0x30	; 48
    173c:	19 f4       	brne	.+6      	; 0x1744 <vfprintf+0x302>
    173e:	99 ee       	ldi	r25, 0xE9	; 233
    1740:	f9 22       	and	r15, r25
    1742:	08 c0       	rjmp	.+16     	; 0x1754 <vfprintf+0x312>
    1744:	1f 5f       	subi	r17, 0xFF	; 255
    1746:	f2 fe       	sbrs	r15, 2
    1748:	05 c0       	rjmp	.+10     	; 0x1754 <vfprintf+0x312>
    174a:	03 c0       	rjmp	.+6      	; 0x1752 <vfprintf+0x310>
    174c:	8f 2d       	mov	r24, r15
    174e:	86 78       	andi	r24, 0x86	; 134
    1750:	09 f0       	breq	.+2      	; 0x1754 <vfprintf+0x312>
    1752:	1f 5f       	subi	r17, 0xFF	; 255
    1754:	0f 2d       	mov	r16, r15
    1756:	f3 fc       	sbrc	r15, 3
    1758:	13 c0       	rjmp	.+38     	; 0x1780 <vfprintf+0x33e>
    175a:	f0 fe       	sbrs	r15, 0
    175c:	0e c0       	rjmp	.+28     	; 0x177a <vfprintf+0x338>
    175e:	1e 15       	cp	r17, r14
    1760:	10 f0       	brcs	.+4      	; 0x1766 <vfprintf+0x324>
    1762:	9d 2c       	mov	r9, r13
    1764:	0a c0       	rjmp	.+20     	; 0x177a <vfprintf+0x338>
    1766:	9d 2c       	mov	r9, r13
    1768:	9e 0c       	add	r9, r14
    176a:	91 1a       	sub	r9, r17
    176c:	1e 2d       	mov	r17, r14
    176e:	05 c0       	rjmp	.+10     	; 0x177a <vfprintf+0x338>
    1770:	80 e2       	ldi	r24, 0x20	; 32
    1772:	90 e0       	ldi	r25, 0x00	; 0
    1774:	b3 01       	movw	r22, r6
    1776:	74 d0       	rcall	.+232    	; 0x1860 <fputc>
    1778:	1f 5f       	subi	r17, 0xFF	; 255
    177a:	1e 15       	cp	r17, r14
    177c:	c8 f3       	brcs	.-14     	; 0x1770 <vfprintf+0x32e>
    177e:	04 c0       	rjmp	.+8      	; 0x1788 <vfprintf+0x346>
    1780:	1e 15       	cp	r17, r14
    1782:	10 f4       	brcc	.+4      	; 0x1788 <vfprintf+0x346>
    1784:	e1 1a       	sub	r14, r17
    1786:	01 c0       	rjmp	.+2      	; 0x178a <vfprintf+0x348>
    1788:	ee 24       	eor	r14, r14
    178a:	04 ff       	sbrs	r16, 4
    178c:	0e c0       	rjmp	.+28     	; 0x17aa <vfprintf+0x368>
    178e:	80 e3       	ldi	r24, 0x30	; 48
    1790:	90 e0       	ldi	r25, 0x00	; 0
    1792:	b3 01       	movw	r22, r6
    1794:	65 d0       	rcall	.+202    	; 0x1860 <fputc>
    1796:	02 ff       	sbrs	r16, 2
    1798:	1b c0       	rjmp	.+54     	; 0x17d0 <vfprintf+0x38e>
    179a:	01 fd       	sbrc	r16, 1
    179c:	03 c0       	rjmp	.+6      	; 0x17a4 <vfprintf+0x362>
    179e:	88 e7       	ldi	r24, 0x78	; 120
    17a0:	90 e0       	ldi	r25, 0x00	; 0
    17a2:	0e c0       	rjmp	.+28     	; 0x17c0 <vfprintf+0x37e>
    17a4:	88 e5       	ldi	r24, 0x58	; 88
    17a6:	90 e0       	ldi	r25, 0x00	; 0
    17a8:	0b c0       	rjmp	.+22     	; 0x17c0 <vfprintf+0x37e>
    17aa:	80 2f       	mov	r24, r16
    17ac:	86 78       	andi	r24, 0x86	; 134
    17ae:	81 f0       	breq	.+32     	; 0x17d0 <vfprintf+0x38e>
    17b0:	01 ff       	sbrs	r16, 1
    17b2:	02 c0       	rjmp	.+4      	; 0x17b8 <vfprintf+0x376>
    17b4:	8b e2       	ldi	r24, 0x2B	; 43
    17b6:	01 c0       	rjmp	.+2      	; 0x17ba <vfprintf+0x378>
    17b8:	80 e2       	ldi	r24, 0x20	; 32
    17ba:	f7 fc       	sbrc	r15, 7
    17bc:	8d e2       	ldi	r24, 0x2D	; 45
    17be:	90 e0       	ldi	r25, 0x00	; 0
    17c0:	b3 01       	movw	r22, r6
    17c2:	4e d0       	rcall	.+156    	; 0x1860 <fputc>
    17c4:	05 c0       	rjmp	.+10     	; 0x17d0 <vfprintf+0x38e>
    17c6:	80 e3       	ldi	r24, 0x30	; 48
    17c8:	90 e0       	ldi	r25, 0x00	; 0
    17ca:	b3 01       	movw	r22, r6
    17cc:	49 d0       	rcall	.+146    	; 0x1860 <fputc>
    17ce:	9a 94       	dec	r9
    17d0:	d9 14       	cp	r13, r9
    17d2:	c8 f3       	brcs	.-14     	; 0x17c6 <vfprintf+0x384>
    17d4:	da 94       	dec	r13
    17d6:	f1 01       	movw	r30, r2
    17d8:	ed 0d       	add	r30, r13
    17da:	f1 1d       	adc	r31, r1
    17dc:	80 81       	ld	r24, Z
    17de:	90 e0       	ldi	r25, 0x00	; 0
    17e0:	b3 01       	movw	r22, r6
    17e2:	3e d0       	rcall	.+124    	; 0x1860 <fputc>
    17e4:	dd 20       	and	r13, r13
    17e6:	b1 f7       	brne	.-20     	; 0x17d4 <vfprintf+0x392>
    17e8:	05 c0       	rjmp	.+10     	; 0x17f4 <vfprintf+0x3b2>
    17ea:	80 e2       	ldi	r24, 0x20	; 32
    17ec:	90 e0       	ldi	r25, 0x00	; 0
    17ee:	b3 01       	movw	r22, r6
    17f0:	37 d0       	rcall	.+110    	; 0x1860 <fputc>
    17f2:	ea 94       	dec	r14
    17f4:	ee 20       	and	r14, r14
    17f6:	c9 f7       	brne	.-14     	; 0x17ea <vfprintf+0x3a8>
    17f8:	50 ce       	rjmp	.-864    	; 0x149a <vfprintf+0x58>
    17fa:	f3 01       	movw	r30, r6
    17fc:	66 81       	ldd	r22, Z+6	; 0x06
    17fe:	77 81       	ldd	r23, Z+7	; 0x07
    1800:	cb 01       	movw	r24, r22
    1802:	2b 96       	adiw	r28, 0x0b	; 11
    1804:	0f b6       	in	r0, 0x3f	; 63
    1806:	f8 94       	cli
    1808:	de bf       	out	0x3e, r29	; 62
    180a:	0f be       	out	0x3f, r0	; 63
    180c:	cd bf       	out	0x3d, r28	; 61
    180e:	cf 91       	pop	r28
    1810:	df 91       	pop	r29
    1812:	1f 91       	pop	r17
    1814:	0f 91       	pop	r16
    1816:	ff 90       	pop	r15
    1818:	ef 90       	pop	r14
    181a:	df 90       	pop	r13
    181c:	cf 90       	pop	r12
    181e:	bf 90       	pop	r11
    1820:	af 90       	pop	r10
    1822:	9f 90       	pop	r9
    1824:	8f 90       	pop	r8
    1826:	7f 90       	pop	r7
    1828:	6f 90       	pop	r6
    182a:	5f 90       	pop	r5
    182c:	4f 90       	pop	r4
    182e:	3f 90       	pop	r3
    1830:	2f 90       	pop	r2
    1832:	08 95       	ret

00001834 <strnlen_P>:
    1834:	fc 01       	movw	r30, r24
    1836:	05 90       	lpm	r0, Z+
    1838:	61 50       	subi	r22, 0x01	; 1
    183a:	70 40       	sbci	r23, 0x00	; 0
    183c:	01 10       	cpse	r0, r1
    183e:	d8 f7       	brcc	.-10     	; 0x1836 <strnlen_P+0x2>
    1840:	80 95       	com	r24
    1842:	90 95       	com	r25
    1844:	8e 0f       	add	r24, r30
    1846:	9f 1f       	adc	r25, r31
    1848:	08 95       	ret

0000184a <strnlen>:
    184a:	fc 01       	movw	r30, r24
    184c:	61 50       	subi	r22, 0x01	; 1
    184e:	70 40       	sbci	r23, 0x00	; 0
    1850:	01 90       	ld	r0, Z+
    1852:	01 10       	cpse	r0, r1
    1854:	d8 f7       	brcc	.-10     	; 0x184c <strnlen+0x2>
    1856:	80 95       	com	r24
    1858:	90 95       	com	r25
    185a:	8e 0f       	add	r24, r30
    185c:	9f 1f       	adc	r25, r31
    185e:	08 95       	ret

00001860 <fputc>:
    1860:	0f 93       	push	r16
    1862:	1f 93       	push	r17
    1864:	cf 93       	push	r28
    1866:	df 93       	push	r29
    1868:	8c 01       	movw	r16, r24
    186a:	eb 01       	movw	r28, r22
    186c:	8b 81       	ldd	r24, Y+3	; 0x03
    186e:	81 ff       	sbrs	r24, 1
    1870:	1b c0       	rjmp	.+54     	; 0x18a8 <fputc+0x48>
    1872:	82 ff       	sbrs	r24, 2
    1874:	0d c0       	rjmp	.+26     	; 0x1890 <fputc+0x30>
    1876:	2e 81       	ldd	r18, Y+6	; 0x06
    1878:	3f 81       	ldd	r19, Y+7	; 0x07
    187a:	8c 81       	ldd	r24, Y+4	; 0x04
    187c:	9d 81       	ldd	r25, Y+5	; 0x05
    187e:	28 17       	cp	r18, r24
    1880:	39 07       	cpc	r19, r25
    1882:	64 f4       	brge	.+24     	; 0x189c <fputc+0x3c>
    1884:	e8 81       	ld	r30, Y
    1886:	f9 81       	ldd	r31, Y+1	; 0x01
    1888:	01 93       	st	Z+, r16
    188a:	f9 83       	std	Y+1, r31	; 0x01
    188c:	e8 83       	st	Y, r30
    188e:	06 c0       	rjmp	.+12     	; 0x189c <fputc+0x3c>
    1890:	e8 85       	ldd	r30, Y+8	; 0x08
    1892:	f9 85       	ldd	r31, Y+9	; 0x09
    1894:	80 2f       	mov	r24, r16
    1896:	09 95       	icall
    1898:	89 2b       	or	r24, r25
    189a:	31 f4       	brne	.+12     	; 0x18a8 <fputc+0x48>
    189c:	8e 81       	ldd	r24, Y+6	; 0x06
    189e:	9f 81       	ldd	r25, Y+7	; 0x07
    18a0:	01 96       	adiw	r24, 0x01	; 1
    18a2:	9f 83       	std	Y+7, r25	; 0x07
    18a4:	8e 83       	std	Y+6, r24	; 0x06
    18a6:	02 c0       	rjmp	.+4      	; 0x18ac <fputc+0x4c>
    18a8:	0f ef       	ldi	r16, 0xFF	; 255
    18aa:	1f ef       	ldi	r17, 0xFF	; 255
    18ac:	c8 01       	movw	r24, r16
    18ae:	df 91       	pop	r29
    18b0:	cf 91       	pop	r28
    18b2:	1f 91       	pop	r17
    18b4:	0f 91       	pop	r16
    18b6:	08 95       	ret

000018b8 <__ultoa_invert>:
    18b8:	fa 01       	movw	r30, r20
    18ba:	aa 27       	eor	r26, r26
    18bc:	28 30       	cpi	r18, 0x08	; 8
    18be:	51 f1       	breq	.+84     	; 0x1914 <__ultoa_invert+0x5c>
    18c0:	20 31       	cpi	r18, 0x10	; 16
    18c2:	81 f1       	breq	.+96     	; 0x1924 <__ultoa_invert+0x6c>
    18c4:	e8 94       	clt
    18c6:	6f 93       	push	r22
    18c8:	6e 7f       	andi	r22, 0xFE	; 254
    18ca:	6e 5f       	subi	r22, 0xFE	; 254
    18cc:	7f 4f       	sbci	r23, 0xFF	; 255
    18ce:	8f 4f       	sbci	r24, 0xFF	; 255
    18d0:	9f 4f       	sbci	r25, 0xFF	; 255
    18d2:	af 4f       	sbci	r26, 0xFF	; 255
    18d4:	b1 e0       	ldi	r27, 0x01	; 1
    18d6:	3e d0       	rcall	.+124    	; 0x1954 <__ultoa_invert+0x9c>
    18d8:	b4 e0       	ldi	r27, 0x04	; 4
    18da:	3c d0       	rcall	.+120    	; 0x1954 <__ultoa_invert+0x9c>
    18dc:	67 0f       	add	r22, r23
    18de:	78 1f       	adc	r23, r24
    18e0:	89 1f       	adc	r24, r25
    18e2:	9a 1f       	adc	r25, r26
    18e4:	a1 1d       	adc	r26, r1
    18e6:	68 0f       	add	r22, r24
    18e8:	79 1f       	adc	r23, r25
    18ea:	8a 1f       	adc	r24, r26
    18ec:	91 1d       	adc	r25, r1
    18ee:	a1 1d       	adc	r26, r1
    18f0:	6a 0f       	add	r22, r26
    18f2:	71 1d       	adc	r23, r1
    18f4:	81 1d       	adc	r24, r1
    18f6:	91 1d       	adc	r25, r1
    18f8:	a1 1d       	adc	r26, r1
    18fa:	20 d0       	rcall	.+64     	; 0x193c <__ultoa_invert+0x84>
    18fc:	09 f4       	brne	.+2      	; 0x1900 <__ultoa_invert+0x48>
    18fe:	68 94       	set
    1900:	3f 91       	pop	r19
    1902:	2a e0       	ldi	r18, 0x0A	; 10
    1904:	26 9f       	mul	r18, r22
    1906:	11 24       	eor	r1, r1
    1908:	30 19       	sub	r19, r0
    190a:	30 5d       	subi	r19, 0xD0	; 208
    190c:	31 93       	st	Z+, r19
    190e:	de f6       	brtc	.-74     	; 0x18c6 <__ultoa_invert+0xe>
    1910:	cf 01       	movw	r24, r30
    1912:	08 95       	ret
    1914:	46 2f       	mov	r20, r22
    1916:	47 70       	andi	r20, 0x07	; 7
    1918:	40 5d       	subi	r20, 0xD0	; 208
    191a:	41 93       	st	Z+, r20
    191c:	b3 e0       	ldi	r27, 0x03	; 3
    191e:	0f d0       	rcall	.+30     	; 0x193e <__ultoa_invert+0x86>
    1920:	c9 f7       	brne	.-14     	; 0x1914 <__ultoa_invert+0x5c>
    1922:	f6 cf       	rjmp	.-20     	; 0x1910 <__ultoa_invert+0x58>
    1924:	46 2f       	mov	r20, r22
    1926:	4f 70       	andi	r20, 0x0F	; 15
    1928:	40 5d       	subi	r20, 0xD0	; 208
    192a:	4a 33       	cpi	r20, 0x3A	; 58
    192c:	18 f0       	brcs	.+6      	; 0x1934 <__ultoa_invert+0x7c>
    192e:	49 5d       	subi	r20, 0xD9	; 217
    1930:	31 fd       	sbrc	r19, 1
    1932:	40 52       	subi	r20, 0x20	; 32
    1934:	41 93       	st	Z+, r20
    1936:	02 d0       	rcall	.+4      	; 0x193c <__ultoa_invert+0x84>
    1938:	a9 f7       	brne	.-22     	; 0x1924 <__ultoa_invert+0x6c>
    193a:	ea cf       	rjmp	.-44     	; 0x1910 <__ultoa_invert+0x58>
    193c:	b4 e0       	ldi	r27, 0x04	; 4
    193e:	a6 95       	lsr	r26
    1940:	97 95       	ror	r25
    1942:	87 95       	ror	r24
    1944:	77 95       	ror	r23
    1946:	67 95       	ror	r22
    1948:	ba 95       	dec	r27
    194a:	c9 f7       	brne	.-14     	; 0x193e <__ultoa_invert+0x86>
    194c:	00 97       	sbiw	r24, 0x00	; 0
    194e:	61 05       	cpc	r22, r1
    1950:	71 05       	cpc	r23, r1
    1952:	08 95       	ret
    1954:	9b 01       	movw	r18, r22
    1956:	ac 01       	movw	r20, r24
    1958:	0a 2e       	mov	r0, r26
    195a:	06 94       	lsr	r0
    195c:	57 95       	ror	r21
    195e:	47 95       	ror	r20
    1960:	37 95       	ror	r19
    1962:	27 95       	ror	r18
    1964:	ba 95       	dec	r27
    1966:	c9 f7       	brne	.-14     	; 0x195a <__ultoa_invert+0xa2>
    1968:	62 0f       	add	r22, r18
    196a:	73 1f       	adc	r23, r19
    196c:	84 1f       	adc	r24, r20
    196e:	95 1f       	adc	r25, r21
    1970:	a0 1d       	adc	r26, r0
    1972:	08 95       	ret

00001974 <_exit>:
    1974:	f8 94       	cli

00001976 <__stop_program>:
    1976:	ff cf       	rjmp	.-2      	; 0x1976 <__stop_program>
