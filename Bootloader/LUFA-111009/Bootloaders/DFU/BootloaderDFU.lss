
BootloaderDFU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000062  00800100  0001fd42  00000dd6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d42  0001f000  0001f000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001d  00800162  00800162  00000e38  2**0
                  ALLOC
  3 .debug_aranges 00000260  00000000  00000000  00000e38  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000005b0  00000000  00000000  00001098  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003cba  00000000  00000000  00001648  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000107b  00000000  00000000  00005302  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000033c7  00000000  00000000  0000637d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000340  00000000  00000000  00009744  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00001bd5  00000000  00000000  00009a84  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000017d8  00000000  00000000  0000b659  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000290  00000000  00000000  0000ce31  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0001f000 <__vectors>:
	return true;
#endif
}

void Endpoint_ClearEndpoints(void)
{
   1f000:	4b c0       	rjmp	.+150    	; 0x1f098 <__ctors_end>

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
   1f002:	00 00       	nop
   1f004:	66 c0       	rjmp	.+204    	; 0x1f0d2 <__bad_interrupt>
   1f006:	00 00       	nop
   1f008:	64 c0       	rjmp	.+200    	; 0x1f0d2 <__bad_interrupt>
   1f00a:	00 00       	nop
   1f00c:	62 c0       	rjmp	.+196    	; 0x1f0d2 <__bad_interrupt>
   1f00e:	00 00       	nop
   1f010:	60 c0       	rjmp	.+192    	; 0x1f0d2 <__bad_interrupt>
   1f012:	00 00       	nop
   1f014:	5e c0       	rjmp	.+188    	; 0x1f0d2 <__bad_interrupt>
   1f016:	00 00       	nop
   1f018:	5c c0       	rjmp	.+184    	; 0x1f0d2 <__bad_interrupt>
   1f01a:	00 00       	nop
   1f01c:	5a c0       	rjmp	.+180    	; 0x1f0d2 <__bad_interrupt>
   1f01e:	00 00       	nop
   1f020:	58 c0       	rjmp	.+176    	; 0x1f0d2 <__bad_interrupt>
   1f022:	00 00       	nop
   1f024:	56 c0       	rjmp	.+172    	; 0x1f0d2 <__bad_interrupt>
   1f026:	00 00       	nop
   1f028:	ac c4       	rjmp	.+2392   	; 0x1f982 <__vector_10>
   1f02a:	00 00       	nop
   1f02c:	52 c0       	rjmp	.+164    	; 0x1f0d2 <__bad_interrupt>
   1f02e:	00 00       	nop
   1f030:	50 c0       	rjmp	.+160    	; 0x1f0d2 <__bad_interrupt>
   1f032:	00 00       	nop
   1f034:	4e c0       	rjmp	.+156    	; 0x1f0d2 <__bad_interrupt>
   1f036:	00 00       	nop
   1f038:	4c c0       	rjmp	.+152    	; 0x1f0d2 <__bad_interrupt>
   1f03a:	00 00       	nop
   1f03c:	4a c0       	rjmp	.+148    	; 0x1f0d2 <__bad_interrupt>
   1f03e:	00 00       	nop
   1f040:	48 c0       	rjmp	.+144    	; 0x1f0d2 <__bad_interrupt>
   1f042:	00 00       	nop
   1f044:	46 c0       	rjmp	.+140    	; 0x1f0d2 <__bad_interrupt>
   1f046:	00 00       	nop
   1f048:	44 c0       	rjmp	.+136    	; 0x1f0d2 <__bad_interrupt>
   1f04a:	00 00       	nop
   1f04c:	42 c0       	rjmp	.+132    	; 0x1f0d2 <__bad_interrupt>
   1f04e:	00 00       	nop
   1f050:	41 c0       	rjmp	.+130    	; 0x1f0d4 <__vector_20>
   1f052:	00 00       	nop
   1f054:	3e c0       	rjmp	.+124    	; 0x1f0d2 <__bad_interrupt>
   1f056:	00 00       	nop
   1f058:	3c c0       	rjmp	.+120    	; 0x1f0d2 <__bad_interrupt>
   1f05a:	00 00       	nop
   1f05c:	3a c0       	rjmp	.+116    	; 0x1f0d2 <__bad_interrupt>
   1f05e:	00 00       	nop
   1f060:	38 c0       	rjmp	.+112    	; 0x1f0d2 <__bad_interrupt>
   1f062:	00 00       	nop
   1f064:	36 c0       	rjmp	.+108    	; 0x1f0d2 <__bad_interrupt>
   1f066:	00 00       	nop
   1f068:	34 c0       	rjmp	.+104    	; 0x1f0d2 <__bad_interrupt>
   1f06a:	00 00       	nop
   1f06c:	32 c0       	rjmp	.+100    	; 0x1f0d2 <__bad_interrupt>
   1f06e:	00 00       	nop
   1f070:	30 c0       	rjmp	.+96     	; 0x1f0d2 <__bad_interrupt>
   1f072:	00 00       	nop
   1f074:	2e c0       	rjmp	.+92     	; 0x1f0d2 <__bad_interrupt>
   1f076:	00 00       	nop
   1f078:	2c c0       	rjmp	.+88     	; 0x1f0d2 <__bad_interrupt>
   1f07a:	00 00       	nop
   1f07c:	2a c0       	rjmp	.+84     	; 0x1f0d2 <__bad_interrupt>
   1f07e:	00 00       	nop
   1f080:	28 c0       	rjmp	.+80     	; 0x1f0d2 <__bad_interrupt>
   1f082:	00 00       	nop
   1f084:	26 c0       	rjmp	.+76     	; 0x1f0d2 <__bad_interrupt>
   1f086:	00 00       	nop
   1f088:	24 c0       	rjmp	.+72     	; 0x1f0d2 <__bad_interrupt>
   1f08a:	00 00       	nop
   1f08c:	22 c0       	rjmp	.+68     	; 0x1f0d2 <__bad_interrupt>
   1f08e:	00 00       	nop
   1f090:	20 c0       	rjmp	.+64     	; 0x1f0d2 <__bad_interrupt>
   1f092:	00 00       	nop
   1f094:	1e c0       	rjmp	.+60     	; 0x1f0d2 <__bad_interrupt>
   1f096:	00 00       	nop

0001f098 <__ctors_end>:
   1f098:	11 24       	eor	r1, r1
   1f09a:	1f be       	out	0x3f, r1	; 63
   1f09c:	cf ef       	ldi	r28, 0xFF	; 255
   1f09e:	d0 e2       	ldi	r29, 0x20	; 32
   1f0a0:	de bf       	out	0x3e, r29	; 62
   1f0a2:	cd bf       	out	0x3d, r28	; 61

0001f0a4 <__do_copy_data>:
   1f0a4:	11 e0       	ldi	r17, 0x01	; 1
   1f0a6:	a0 e0       	ldi	r26, 0x00	; 0
   1f0a8:	b1 e0       	ldi	r27, 0x01	; 1
   1f0aa:	e2 e4       	ldi	r30, 0x42	; 66
   1f0ac:	fd ef       	ldi	r31, 0xFD	; 253
   1f0ae:	01 e0       	ldi	r16, 0x01	; 1
   1f0b0:	0b bf       	out	0x3b, r16	; 59
   1f0b2:	02 c0       	rjmp	.+4      	; 0x1f0b8 <__do_copy_data+0x14>
   1f0b4:	07 90       	elpm	r0, Z+
   1f0b6:	0d 92       	st	X+, r0
   1f0b8:	a2 36       	cpi	r26, 0x62	; 98
   1f0ba:	b1 07       	cpc	r27, r17
   1f0bc:	d9 f7       	brne	.-10     	; 0x1f0b4 <__do_copy_data+0x10>

0001f0be <__do_clear_bss>:
   1f0be:	11 e0       	ldi	r17, 0x01	; 1
   1f0c0:	a2 e6       	ldi	r26, 0x62	; 98
   1f0c2:	b1 e0       	ldi	r27, 0x01	; 1
   1f0c4:	01 c0       	rjmp	.+2      	; 0x1f0c8 <.do_clear_bss_start>

0001f0c6 <.do_clear_bss_loop>:
   1f0c6:	1d 92       	st	X+, r1

0001f0c8 <.do_clear_bss_start>:
   1f0c8:	af 37       	cpi	r26, 0x7F	; 127
   1f0ca:	b1 07       	cpc	r27, r17
   1f0cc:	e1 f7       	brne	.-8      	; 0x1f0c6 <.do_clear_bss_loop>
   1f0ce:	7c d3       	rcall	.+1784   	; 0x1f7c8 <main>
   1f0d0:	36 c6       	rjmp	.+3180   	; 0x1fd3e <_exit>

0001f0d2 <__bad_interrupt>:
   1f0d2:	96 cf       	rjmp	.-212    	; 0x1f000 <__vectors>

0001f0d4 <__vector_20>:
	MCUCR = 0;
}

/** ISR to periodically toggle the LEDs on the board to indicate that the bootloader is active. */
ISR(TIMER1_OVF_vect, ISR_BLOCK)
{
   1f0d4:	1f 92       	push	r1
   1f0d6:	0f 92       	push	r0
   1f0d8:	0f b6       	in	r0, 0x3f	; 63
   1f0da:	0f 92       	push	r0
   1f0dc:	11 24       	eor	r1, r1
   1f0de:	8f 93       	push	r24
   1f0e0:	9f 93       	push	r25
				PORTD = ((PORTD & ~LEDMask) | ActiveMask);
			}

			static inline void LEDs_ToggleLEDs(const uint8_t LEDMask)
			{
				PORTD ^= LEDMask;
   1f0e2:	8b b1       	in	r24, 0x0b	; 11
   1f0e4:	90 e3       	ldi	r25, 0x30	; 48
   1f0e6:	89 27       	eor	r24, r25
   1f0e8:	8b b9       	out	0x0b, r24	; 11
	LEDs_ToggleLEDs(LEDS_LED1 | LEDS_LED2);
}
   1f0ea:	9f 91       	pop	r25
   1f0ec:	8f 91       	pop	r24
   1f0ee:	0f 90       	pop	r0
   1f0f0:	0f be       	out	0x3f, r0	; 63
   1f0f2:	0f 90       	pop	r0
   1f0f4:	1f 90       	pop	r1
   1f0f6:	18 95       	reti

0001f0f8 <DiscardFillerBytes>:
 *  discard unused bytes in the stream from the host, including the memory program block suffix.
 *
 *  \param[in] NumberOfBytes  Number of bytes to discard from the host from the control endpoint
 */
static void DiscardFillerBytes(uint8_t NumberOfBytes)
{
   1f0f8:	28 2f       	mov	r18, r24
   1f0fa:	17 c0       	rjmp	.+46     	; 0x1f12a <DiscardFillerBytes+0x32>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
   1f0fc:	80 91 f2 00 	lds	r24, 0x00F2
   1f100:	90 91 f3 00 	lds	r25, 0x00F3
	while (NumberOfBytes--)
	{
		if (!(Endpoint_BytesInEndpoint()))
   1f104:	89 2b       	or	r24, r25
   1f106:	71 f4       	brne	.+28     	; 0x1f124 <DiscardFillerBytes+0x2c>
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
				#else
					UEINTX &= ~(1 << RXOUTI);
   1f108:	80 91 e8 00 	lds	r24, 0x00E8
   1f10c:	8b 7f       	andi	r24, 0xFB	; 251
   1f10e:	80 93 e8 00 	sts	0x00E8, r24
   1f112:	03 c0       	rjmp	.+6      	; 0x1f11a <DiscardFillerBytes+0x22>
			Endpoint_ClearOUT();

			/* Wait until next data packet received */
			while (!(Endpoint_IsOUTReceived()))
			{
				if (USB_DeviceState == DEVICE_STATE_Unattached)
   1f114:	8e b3       	in	r24, 0x1e	; 30
   1f116:	88 23       	and	r24, r24
   1f118:	51 f0       	breq	.+20     	; 0x1f12e <DiscardFillerBytes+0x36>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
   1f11a:	80 91 e8 00 	lds	r24, 0x00E8
		if (!(Endpoint_BytesInEndpoint()))
		{
			Endpoint_ClearOUT();

			/* Wait until next data packet received */
			while (!(Endpoint_IsOUTReceived()))
   1f11e:	82 ff       	sbrs	r24, 2
   1f120:	f9 cf       	rjmp	.-14     	; 0x1f114 <DiscardFillerBytes+0x1c>
   1f122:	02 c0       	rjmp	.+4      	; 0x1f128 <DiscardFillerBytes+0x30>
			static inline void Endpoint_Discard_8(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Discard_8(void)
			{
				uint8_t Dummy;

				Dummy = UEDATX;
   1f124:	80 91 f1 00 	lds	r24, 0x00F1
   1f128:	21 50       	subi	r18, 0x01	; 1
 *
 *  \param[in] NumberOfBytes  Number of bytes to discard from the host from the control endpoint
 */
static void DiscardFillerBytes(uint8_t NumberOfBytes)
{
	while (NumberOfBytes--)
   1f12a:	22 23       	and	r18, r18
   1f12c:	39 f7       	brne	.-50     	; 0x1f0fc <DiscardFillerBytes+0x4>
   1f12e:	08 95       	ret

0001f130 <LoadStartEndAddresses>:
	union
	{
		uint8_t  Bytes[2];
		uint16_t Word;
	} Address[2] = {{.Bytes = {SentCommand.Data[2], SentCommand.Data[1]}},
	                {.Bytes = {SentCommand.Data[4], SentCommand.Data[3]}}};
   1f130:	20 91 71 01 	lds	r18, 0x0171
   1f134:	30 91 70 01 	lds	r19, 0x0170

	/* Load in the start and ending read addresses from the sent data packet */
	StartAddr = Address[0].Word;
   1f138:	80 91 6f 01 	lds	r24, 0x016F
   1f13c:	90 91 6e 01 	lds	r25, 0x016E
   1f140:	80 93 63 01 	sts	0x0163, r24
   1f144:	90 93 64 01 	sts	0x0164, r25
	EndAddr   = Address[1].Word;
   1f148:	c9 01       	movw	r24, r18
   1f14a:	80 93 65 01 	sts	0x0165, r24
   1f14e:	90 93 66 01 	sts	0x0166, r25
}
   1f152:	08 95       	ret

0001f154 <ProcessBootloaderCommand>:
/** Routine to process an issued command from the host, via a DFU_DNLOAD request wrapper. This routine ensures
 *  that the command is allowed based on the current secure mode flag value, and passes the command off to the
 *  appropriate handler function.
 */
static void ProcessBootloaderCommand(void)
{
   1f154:	1f 93       	push	r17
	/* Check if device is in secure mode */
	if (IsSecure)
   1f156:	80 91 69 01 	lds	r24, 0x0169
   1f15a:	88 23       	and	r24, r24
   1f15c:	d9 f0       	breq	.+54     	; 0x1f194 <ProcessBootloaderCommand+0x40>
	{
		/* Don't process command unless it is a READ or chip erase command */
		if (!(((SentCommand.Command == COMMAND_WRITE)             &&
   1f15e:	80 91 6c 01 	lds	r24, 0x016C
   1f162:	84 30       	cpi	r24, 0x04	; 4
   1f164:	49 f4       	brne	.+18     	; 0x1f178 <ProcessBootloaderCommand+0x24>
   1f166:	80 91 6d 01 	lds	r24, 0x016D
   1f16a:	88 23       	and	r24, r24
   1f16c:	39 f4       	brne	.+14     	; 0x1f17c <ProcessBootloaderCommand+0x28>
   1f16e:	80 91 6e 01 	lds	r24, 0x016E
   1f172:	8f 3f       	cpi	r24, 0xFF	; 255
   1f174:	19 f4       	brne	.+6      	; 0x1f17c <ProcessBootloaderCommand+0x28>
   1f176:	0e c0       	rjmp	.+28     	; 0x1f194 <ProcessBootloaderCommand+0x40>
   1f178:	85 30       	cpi	r24, 0x05	; 5
   1f17a:	61 f0       	breq	.+24     	; 0x1f194 <ProcessBootloaderCommand+0x40>
		        IS_TWOBYTE_COMMAND(SentCommand.Data, 0x00, 0xFF)) ||
			   (SentCommand.Command == COMMAND_READ)))
		{
			/* Set the state and status variables to indicate the error */
			DFU_State  = dfuERROR;
   1f17c:	8a e0       	ldi	r24, 0x0A	; 10
   1f17e:	80 93 00 01 	sts	0x0100, r24
			DFU_Status = errWRITE;
   1f182:	83 e0       	ldi	r24, 0x03	; 3
   1f184:	80 93 68 01 	sts	0x0168, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
   1f188:	80 91 eb 00 	lds	r24, 0x00EB
   1f18c:	80 62       	ori	r24, 0x20	; 32
   1f18e:	80 93 eb 00 	sts	0x00EB, r24
   1f192:	e3 c0       	rjmp	.+454    	; 0x1f35a <ProcessBootloaderCommand+0x206>
			return;
		}
	}

	/* Dispatch the required command processing routine based on the command type */
	switch (SentCommand.Command)
   1f194:	80 91 6c 01 	lds	r24, 0x016C
   1f198:	84 30       	cpi	r24, 0x04	; 4
   1f19a:	09 f4       	brne	.+2      	; 0x1f19e <ProcessBootloaderCommand+0x4a>
   1f19c:	5e c0       	rjmp	.+188    	; 0x1f25a <ProcessBootloaderCommand+0x106>
   1f19e:	85 30       	cpi	r24, 0x05	; 5
   1f1a0:	30 f4       	brcc	.+12     	; 0x1f1ae <ProcessBootloaderCommand+0x5a>
   1f1a2:	81 30       	cpi	r24, 0x01	; 1
   1f1a4:	59 f0       	breq	.+22     	; 0x1f1bc <ProcessBootloaderCommand+0x68>
   1f1a6:	83 30       	cpi	r24, 0x03	; 3
   1f1a8:	09 f0       	breq	.+2      	; 0x1f1ac <ProcessBootloaderCommand+0x58>
   1f1aa:	d7 c0       	rjmp	.+430    	; 0x1f35a <ProcessBootloaderCommand+0x206>
   1f1ac:	22 c0       	rjmp	.+68     	; 0x1f1f2 <ProcessBootloaderCommand+0x9e>
   1f1ae:	85 30       	cpi	r24, 0x05	; 5
   1f1b0:	09 f4       	brne	.+2      	; 0x1f1b4 <ProcessBootloaderCommand+0x60>
   1f1b2:	b4 c0       	rjmp	.+360    	; 0x1f31c <ProcessBootloaderCommand+0x1c8>
   1f1b4:	86 30       	cpi	r24, 0x06	; 6
   1f1b6:	09 f0       	breq	.+2      	; 0x1f1ba <ProcessBootloaderCommand+0x66>
   1f1b8:	d0 c0       	rjmp	.+416    	; 0x1f35a <ProcessBootloaderCommand+0x206>
   1f1ba:	c3 c0       	rjmp	.+390    	; 0x1f342 <ProcessBootloaderCommand+0x1ee>
/** Handler for a Memory Program command issued by the host. This routine handles the preparations needed
 *  to write subsequent data from the host into the specified memory.
 */
static void ProcessMemProgCommand(void)
{
	if (IS_ONEBYTE_COMMAND(SentCommand.Data, 0x00) ||                          // Write FLASH command
   1f1bc:	10 91 6d 01 	lds	r17, 0x016D
   1f1c0:	12 30       	cpi	r17, 0x02	; 2
   1f1c2:	08 f0       	brcs	.+2      	; 0x1f1c6 <ProcessBootloaderCommand+0x72>
   1f1c4:	ca c0       	rjmp	.+404    	; 0x1f35a <ProcessBootloaderCommand+0x206>
	    IS_ONEBYTE_COMMAND(SentCommand.Data, 0x01))                            // Write EEPROM command
	{
		/* Load in the start and ending read addresses */
		LoadStartEndAddresses();
   1f1c6:	b4 df       	rcall	.-152    	; 0x1f130 <LoadStartEndAddresses>

		/* If FLASH is being written to, we need to pre-erase the first page to write to */
		if (IS_ONEBYTE_COMMAND(SentCommand.Data, 0x00))
   1f1c8:	11 23       	and	r17, r17
   1f1ca:	89 f4       	brne	.+34     	; 0x1f1ee <ProcessBootloaderCommand+0x9a>
		{
			union
			{
				uint16_t Words[2];
				uint32_t Long;
			} CurrFlashAddress = {.Words = {StartAddr, Flash64KBPage}};
   1f1cc:	80 91 63 01 	lds	r24, 0x0163
   1f1d0:	90 91 64 01 	lds	r25, 0x0164
   1f1d4:	a0 91 67 01 	lds	r26, 0x0167
   1f1d8:	b0 e0       	ldi	r27, 0x00	; 0

			/* Erase the current page's temp buffer */
			boot_page_erase(CurrFlashAddress.Long);
   1f1da:	23 e0       	ldi	r18, 0x03	; 3
   1f1dc:	fc 01       	movw	r30, r24
   1f1de:	a0 93 5b 00 	sts	0x005B, r26
   1f1e2:	20 93 57 00 	sts	0x0057, r18
   1f1e6:	e8 95       	spm
			boot_spm_busy_wait();
   1f1e8:	07 b6       	in	r0, 0x37	; 55
   1f1ea:	00 fc       	sbrc	r0, 0
   1f1ec:	fd cf       	rjmp	.-6      	; 0x1f1e8 <ProcessBootloaderCommand+0x94>
		}

		/* Set the state so that the next DNLOAD requests reads in the firmware */
		DFU_State = dfuDNLOAD_IDLE;
   1f1ee:	85 e0       	ldi	r24, 0x05	; 5
   1f1f0:	08 c0       	rjmp	.+16     	; 0x1f202 <ProcessBootloaderCommand+0xae>
 *  to read subsequent data from the specified memory out to the host, as well as implementing the memory
 *  blank check command.
 */
static void ProcessMemReadCommand(void)
{
	if (IS_ONEBYTE_COMMAND(SentCommand.Data, 0x00) ||                          // Read FLASH command
   1f1f2:	80 91 6d 01 	lds	r24, 0x016D
   1f1f6:	88 23       	and	r24, r24
   1f1f8:	11 f0       	breq	.+4      	; 0x1f1fe <ProcessBootloaderCommand+0xaa>
   1f1fa:	82 30       	cpi	r24, 0x02	; 2
   1f1fc:	29 f4       	brne	.+10     	; 0x1f208 <ProcessBootloaderCommand+0xb4>
        IS_ONEBYTE_COMMAND(SentCommand.Data, 0x02))                            // Read EEPROM command
	{
		/* Load in the start and ending read addresses */
		LoadStartEndAddresses();
   1f1fe:	98 df       	rcall	.-208    	; 0x1f130 <LoadStartEndAddresses>

		/* Set the state so that the next UPLOAD requests read out the firmware */
		DFU_State = dfuUPLOAD_IDLE;
   1f200:	89 e0       	ldi	r24, 0x09	; 9
   1f202:	80 93 00 01 	sts	0x0100, r24
   1f206:	a9 c0       	rjmp	.+338    	; 0x1f35a <ProcessBootloaderCommand+0x206>
	}
	else if (IS_ONEBYTE_COMMAND(SentCommand.Data, 0x01))                       // Blank check FLASH command
   1f208:	81 30       	cpi	r24, 0x01	; 1
   1f20a:	09 f0       	breq	.+2      	; 0x1f20e <ProcessBootloaderCommand+0xba>
   1f20c:	a6 c0       	rjmp	.+332    	; 0x1f35a <ProcessBootloaderCommand+0x206>
   1f20e:	20 e0       	ldi	r18, 0x00	; 0
   1f210:	30 e0       	ldi	r19, 0x00	; 0
   1f212:	40 e0       	ldi	r20, 0x00	; 0
   1f214:	50 e0       	ldi	r21, 0x00	; 0

		while (CurrFlashAddress < BOOT_START_ADDR)
		{
			/* Check if the current byte is not blank */
			#if (FLASHEND > 0xFFFF)
			if (pgm_read_byte_far(CurrFlashAddress) != 0xFF)
   1f216:	4b bf       	out	0x3b, r20	; 59
   1f218:	f9 01       	movw	r30, r18
   1f21a:	87 91       	elpm	r24, Z+
   1f21c:	8f 3f       	cpi	r24, 0xFF	; 255
   1f21e:	81 f0       	breq	.+32     	; 0x1f240 <ProcessBootloaderCommand+0xec>
			#else
			if (pgm_read_byte(CurrFlashAddress) != 0xFF)
			#endif
			{
				/* Save the location of the first non-blank byte for response back to the host */
				Flash64KBPage = (CurrFlashAddress >> 16);
   1f220:	ca 01       	movw	r24, r20
   1f222:	aa 27       	eor	r26, r26
   1f224:	bb 27       	eor	r27, r27
   1f226:	80 93 67 01 	sts	0x0167, r24
				StartAddr     = CurrFlashAddress;
   1f22a:	30 93 64 01 	sts	0x0164, r19
   1f22e:	20 93 63 01 	sts	0x0163, r18

				/* Set state and status variables to the appropriate error values */
				DFU_State  = dfuERROR;
   1f232:	8a e0       	ldi	r24, 0x0A	; 10
   1f234:	80 93 00 01 	sts	0x0100, r24
				DFU_Status = errCHECK_ERASED;
   1f238:	85 e0       	ldi	r24, 0x05	; 5
   1f23a:	80 93 68 01 	sts	0x0168, r24
   1f23e:	8d c0       	rjmp	.+282    	; 0x1f35a <ProcessBootloaderCommand+0x206>

				break;
			}

			CurrFlashAddress++;
   1f240:	2f 5f       	subi	r18, 0xFF	; 255
   1f242:	3f 4f       	sbci	r19, 0xFF	; 255
   1f244:	4f 4f       	sbci	r20, 0xFF	; 255
   1f246:	5f 4f       	sbci	r21, 0xFF	; 255
	}
	else if (IS_ONEBYTE_COMMAND(SentCommand.Data, 0x01))                       // Blank check FLASH command
	{
		uint32_t CurrFlashAddress = 0;

		while (CurrFlashAddress < BOOT_START_ADDR)
   1f248:	20 30       	cpi	r18, 0x00	; 0
   1f24a:	80 ef       	ldi	r24, 0xF0	; 240
   1f24c:	38 07       	cpc	r19, r24
   1f24e:	81 e0       	ldi	r24, 0x01	; 1
   1f250:	48 07       	cpc	r20, r24
   1f252:	80 e0       	ldi	r24, 0x00	; 0
   1f254:	58 07       	cpc	r21, r24
   1f256:	f9 f6       	brne	.-66     	; 0x1f216 <ProcessBootloaderCommand+0xc2>
   1f258:	80 c0       	rjmp	.+256    	; 0x1f35a <ProcessBootloaderCommand+0x206>
/** Handler for a Data Write command issued by the host. This routine handles non-programming commands such as
 *  bootloader exit (both via software jumps and hardware watchdog resets) and flash memory erasure.
 */
static void ProcessWriteCommand(void)
{
	if (IS_ONEBYTE_COMMAND(SentCommand.Data, 0x03))                            // Start application
   1f25a:	80 91 6d 01 	lds	r24, 0x016D
   1f25e:	83 30       	cpi	r24, 0x03	; 3
   1f260:	51 f5       	brne	.+84     	; 0x1f2b6 <ProcessBootloaderCommand+0x162>
	{
		/* Indicate that the bootloader is terminating */
		WaitForExit = true;
   1f262:	81 e0       	ldi	r24, 0x01	; 1
   1f264:	80 93 62 01 	sts	0x0162, r24

		/* Check if data supplied for the Start Program command - no data executes the program */
		if (SentCommand.DataSize)
   1f268:	80 91 72 01 	lds	r24, 0x0172
   1f26c:	90 91 73 01 	lds	r25, 0x0173
   1f270:	89 2b       	or	r24, r25
   1f272:	71 f0       	breq	.+28     	; 0x1f290 <ProcessBootloaderCommand+0x13c>
		{
			if (SentCommand.Data[1] == 0x01)                                   // Start via jump
   1f274:	80 91 6e 01 	lds	r24, 0x016E
   1f278:	81 30       	cpi	r24, 0x01	; 1
   1f27a:	09 f0       	breq	.+2      	; 0x1f27e <ProcessBootloaderCommand+0x12a>
   1f27c:	6e c0       	rjmp	.+220    	; 0x1f35a <ProcessBootloaderCommand+0x206>
			{
				union
				{
					uint8_t  Bytes[2];
					AppPtr_t FuncPtr;
				} Address = {.Bytes = {SentCommand.Data[4], SentCommand.Data[3]}};
   1f27e:	80 91 71 01 	lds	r24, 0x0171
   1f282:	90 91 70 01 	lds	r25, 0x0170

				/* Load in the jump address into the application start address pointer */
				AppStartPtr = Address.FuncPtr;
   1f286:	90 93 6b 01 	sts	0x016B, r25
   1f28a:	80 93 6a 01 	sts	0x016A, r24
   1f28e:	65 c0       	rjmp	.+202    	; 0x1f35a <ProcessBootloaderCommand+0x206>
			}
		}
		else
		{
			if (SentCommand.Data[1] == 0x00)                                   // Start via watchdog
   1f290:	80 91 6e 01 	lds	r24, 0x016E
   1f294:	88 23       	and	r24, r24
   1f296:	61 f4       	brne	.+24     	; 0x1f2b0 <ProcessBootloaderCommand+0x15c>
			{
				/* Start the watchdog to reset the AVR once the communications are finalized */
				wdt_enable(WDTO_250MS);
   1f298:	2c e0       	ldi	r18, 0x0C	; 12
   1f29a:	88 e1       	ldi	r24, 0x18	; 24
   1f29c:	90 e0       	ldi	r25, 0x00	; 0
   1f29e:	0f b6       	in	r0, 0x3f	; 63
   1f2a0:	f8 94       	cli
   1f2a2:	a8 95       	wdr
   1f2a4:	80 93 60 00 	sts	0x0060, r24
   1f2a8:	0f be       	out	0x3f, r0	; 63
   1f2aa:	20 93 60 00 	sts	0x0060, r18
   1f2ae:	55 c0       	rjmp	.+170    	; 0x1f35a <ProcessBootloaderCommand+0x206>
			}
			else                                                               // Start via jump
			{
				/* Set the flag to terminate the bootloader at next opportunity */
				RunBootloader = false;
   1f2b0:	10 92 01 01 	sts	0x0101, r1
   1f2b4:	52 c0       	rjmp	.+164    	; 0x1f35a <ProcessBootloaderCommand+0x206>
			}
		}
	}
	else if (IS_TWOBYTE_COMMAND(SentCommand.Data, 0x00, 0xFF))                 // Erase flash
   1f2b6:	88 23       	and	r24, r24
   1f2b8:	09 f0       	breq	.+2      	; 0x1f2bc <ProcessBootloaderCommand+0x168>
   1f2ba:	4f c0       	rjmp	.+158    	; 0x1f35a <ProcessBootloaderCommand+0x206>
   1f2bc:	80 91 6e 01 	lds	r24, 0x016E
   1f2c0:	8f 3f       	cpi	r24, 0xFF	; 255
   1f2c2:	09 f0       	breq	.+2      	; 0x1f2c6 <ProcessBootloaderCommand+0x172>
   1f2c4:	4a c0       	rjmp	.+148    	; 0x1f35a <ProcessBootloaderCommand+0x206>
   1f2c6:	80 e0       	ldi	r24, 0x00	; 0
   1f2c8:	90 e0       	ldi	r25, 0x00	; 0
   1f2ca:	a0 e0       	ldi	r26, 0x00	; 0
   1f2cc:	b0 e0       	ldi	r27, 0x00	; 0
		uint32_t CurrFlashAddress = 0;

		/* Clear the application section of flash */
		while (CurrFlashAddress < BOOT_START_ADDR)
		{
			boot_page_erase(CurrFlashAddress);
   1f2ce:	33 e0       	ldi	r19, 0x03	; 3
			boot_spm_busy_wait();
			boot_page_write(CurrFlashAddress);
   1f2d0:	25 e0       	ldi	r18, 0x05	; 5
		uint32_t CurrFlashAddress = 0;

		/* Clear the application section of flash */
		while (CurrFlashAddress < BOOT_START_ADDR)
		{
			boot_page_erase(CurrFlashAddress);
   1f2d2:	fc 01       	movw	r30, r24
   1f2d4:	a0 93 5b 00 	sts	0x005B, r26
   1f2d8:	30 93 57 00 	sts	0x0057, r19
   1f2dc:	e8 95       	spm
			boot_spm_busy_wait();
   1f2de:	07 b6       	in	r0, 0x37	; 55
   1f2e0:	00 fc       	sbrc	r0, 0
   1f2e2:	fd cf       	rjmp	.-6      	; 0x1f2de <ProcessBootloaderCommand+0x18a>
			boot_page_write(CurrFlashAddress);
   1f2e4:	fc 01       	movw	r30, r24
   1f2e6:	a0 93 5b 00 	sts	0x005B, r26
   1f2ea:	20 93 57 00 	sts	0x0057, r18
   1f2ee:	e8 95       	spm
			boot_spm_busy_wait();
   1f2f0:	07 b6       	in	r0, 0x37	; 55
   1f2f2:	00 fc       	sbrc	r0, 0
   1f2f4:	fd cf       	rjmp	.-6      	; 0x1f2f0 <ProcessBootloaderCommand+0x19c>

			CurrFlashAddress += SPM_PAGESIZE;
   1f2f6:	80 50       	subi	r24, 0x00	; 0
   1f2f8:	9f 4f       	sbci	r25, 0xFF	; 255
   1f2fa:	af 4f       	sbci	r26, 0xFF	; 255
   1f2fc:	bf 4f       	sbci	r27, 0xFF	; 255
	else if (IS_TWOBYTE_COMMAND(SentCommand.Data, 0x00, 0xFF))                 // Erase flash
	{
		uint32_t CurrFlashAddress = 0;

		/* Clear the application section of flash */
		while (CurrFlashAddress < BOOT_START_ADDR)
   1f2fe:	80 30       	cpi	r24, 0x00	; 0
   1f300:	40 ef       	ldi	r20, 0xF0	; 240
   1f302:	94 07       	cpc	r25, r20
   1f304:	41 e0       	ldi	r20, 0x01	; 1
   1f306:	a4 07       	cpc	r26, r20
   1f308:	40 e0       	ldi	r20, 0x00	; 0
   1f30a:	b4 07       	cpc	r27, r20
   1f30c:	11 f7       	brne	.-60     	; 0x1f2d2 <ProcessBootloaderCommand+0x17e>

			CurrFlashAddress += SPM_PAGESIZE;
		}

		/* Re-enable the RWW section of flash as writing to the flash locks it out */
		boot_rww_enable();
   1f30e:	81 e1       	ldi	r24, 0x11	; 17
   1f310:	80 93 57 00 	sts	0x0057, r24
   1f314:	e8 95       	spm

		/* Memory has been erased, reset the security bit so that programming/reading is allowed */
		IsSecure = false;
   1f316:	10 92 69 01 	sts	0x0169, r1
   1f31a:	1f c0       	rjmp	.+62     	; 0x1f35a <ProcessBootloaderCommand+0x206>
static void ProcessReadCommand(void)
{
	const uint8_t BootloaderInfo[3] = {BOOTLOADER_VERSION, BOOTLOADER_ID_BYTE1, BOOTLOADER_ID_BYTE2};
	const uint8_t SignatureInfo[3]  = {AVR_SIGNATURE_1,    AVR_SIGNATURE_2,     AVR_SIGNATURE_3};

	uint8_t DataIndexToRead = SentCommand.Data[1];
   1f31c:	e0 91 6e 01 	lds	r30, 0x016E

	if (IS_ONEBYTE_COMMAND(SentCommand.Data, 0x00))                         // Read bootloader info
   1f320:	80 91 6d 01 	lds	r24, 0x016D
   1f324:	88 23       	and	r24, r24
   1f326:	21 f4       	brne	.+8      	; 0x1f330 <ProcessBootloaderCommand+0x1dc>
	  ResponseByte = BootloaderInfo[DataIndexToRead];
   1f328:	f0 e0       	ldi	r31, 0x00	; 0
   1f32a:	eb 5f       	subi	r30, 0xFB	; 251
   1f32c:	fe 4f       	sbci	r31, 0xFE	; 254
   1f32e:	05 c0       	rjmp	.+10     	; 0x1f33a <ProcessBootloaderCommand+0x1e6>
	else if (IS_ONEBYTE_COMMAND(SentCommand.Data, 0x01))                    // Read signature byte
   1f330:	81 30       	cpi	r24, 0x01	; 1
   1f332:	99 f4       	brne	.+38     	; 0x1f35a <ProcessBootloaderCommand+0x206>
	  ResponseByte = SignatureInfo[DataIndexToRead - 0x30];
   1f334:	f0 e0       	ldi	r31, 0x00	; 0
   1f336:	ee 52       	subi	r30, 0x2E	; 46
   1f338:	ff 4f       	sbci	r31, 0xFF	; 255
   1f33a:	80 81       	ld	r24, Z
   1f33c:	80 93 74 01 	sts	0x0174, r24
   1f340:	0c c0       	rjmp	.+24     	; 0x1f35a <ProcessBootloaderCommand+0x206>
			break;
		case COMMAND_READ:
			ProcessReadCommand();
			break;
		case COMMAND_CHANGE_BASE_ADDR:
			if (IS_TWOBYTE_COMMAND(SentCommand.Data, 0x03, 0x00))              // Set 64KB flash page command
   1f342:	80 91 6d 01 	lds	r24, 0x016D
   1f346:	83 30       	cpi	r24, 0x03	; 3
   1f348:	41 f4       	brne	.+16     	; 0x1f35a <ProcessBootloaderCommand+0x206>
   1f34a:	80 91 6e 01 	lds	r24, 0x016E
   1f34e:	88 23       	and	r24, r24
   1f350:	21 f4       	brne	.+8      	; 0x1f35a <ProcessBootloaderCommand+0x206>
			  Flash64KBPage = SentCommand.Data[2];
   1f352:	80 91 6f 01 	lds	r24, 0x016F
   1f356:	80 93 67 01 	sts	0x0167, r24

			break;
	}
}
   1f35a:	1f 91       	pop	r17
   1f35c:	08 95       	ret

0001f35e <EVENT_USB_Device_ControlRequest>:
/** Event handler for the USB_ControlRequest event. This is used to catch and process control requests sent to
 *  the device from the USB host before passing along unhandled control requests to the library for processing
 *  internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{	
   1f35e:	8f 92       	push	r8
   1f360:	9f 92       	push	r9
   1f362:	af 92       	push	r10
   1f364:	bf 92       	push	r11
   1f366:	cf 92       	push	r12
   1f368:	df 92       	push	r13
   1f36a:	ef 92       	push	r14
   1f36c:	ff 92       	push	r15
   1f36e:	0f 93       	push	r16
   1f370:	1f 93       	push	r17
   1f372:	cf 93       	push	r28
   1f374:	df 93       	push	r29
	/* Ignore any requests that aren't directed to the DFU interface */
	if ((USB_ControlRequest.bmRequestType & (CONTROL_REQTYPE_TYPE | CONTROL_REQTYPE_RECIPIENT)) !=
   1f376:	80 91 77 01 	lds	r24, 0x0177
   1f37a:	8f 77       	andi	r24, 0x7F	; 127
   1f37c:	81 32       	cpi	r24, 0x21	; 33
   1f37e:	09 f0       	breq	.+2      	; 0x1f382 <EVENT_USB_Device_ControlRequest+0x24>
   1f380:	e9 c1       	rjmp	.+978    	; 0x1f754 <EVENT_USB_Device_ControlRequest+0x3f6>
   1f382:	8b b1       	in	r24, 0x0b	; 11
   1f384:	90 e3       	ldi	r25, 0x30	; 48
   1f386:	89 27       	eor	r24, r25
   1f388:	8b b9       	out	0x0b, r24	; 11

	/* Activity - toggle indicator LEDs */
	LEDs_ToggleLEDs(LEDS_LED1 | LEDS_LED2);

	/* Get the size of the command and data from the wLength value */
	SentCommand.DataSize = USB_ControlRequest.wLength;
   1f38a:	c0 91 7d 01 	lds	r28, 0x017D
   1f38e:	d0 91 7e 01 	lds	r29, 0x017E
   1f392:	d0 93 73 01 	sts	0x0173, r29
   1f396:	c0 93 72 01 	sts	0x0172, r28

	switch (USB_ControlRequest.bRequest)
   1f39a:	80 91 78 01 	lds	r24, 0x0178
   1f39e:	83 30       	cpi	r24, 0x03	; 3
   1f3a0:	09 f4       	brne	.+2      	; 0x1f3a4 <EVENT_USB_Device_ControlRequest+0x46>
   1f3a2:	a2 c1       	rjmp	.+836    	; 0x1f6e8 <EVENT_USB_Device_ControlRequest+0x38a>
   1f3a4:	84 30       	cpi	r24, 0x04	; 4
   1f3a6:	30 f4       	brcc	.+12     	; 0x1f3b4 <EVENT_USB_Device_ControlRequest+0x56>
   1f3a8:	81 30       	cpi	r24, 0x01	; 1
   1f3aa:	71 f0       	breq	.+28     	; 0x1f3c8 <EVENT_USB_Device_ControlRequest+0x6a>
   1f3ac:	82 30       	cpi	r24, 0x02	; 2
   1f3ae:	09 f0       	breq	.+2      	; 0x1f3b2 <EVENT_USB_Device_ControlRequest+0x54>
   1f3b0:	d1 c1       	rjmp	.+930    	; 0x1f754 <EVENT_USB_Device_ControlRequest+0x3f6>
   1f3b2:	06 c1       	rjmp	.+524    	; 0x1f5c0 <EVENT_USB_Device_ControlRequest+0x262>
   1f3b4:	85 30       	cpi	r24, 0x05	; 5
   1f3b6:	09 f4       	brne	.+2      	; 0x1f3ba <EVENT_USB_Device_ControlRequest+0x5c>
   1f3b8:	b5 c1       	rjmp	.+874    	; 0x1f724 <EVENT_USB_Device_ControlRequest+0x3c6>
   1f3ba:	85 30       	cpi	r24, 0x05	; 5
   1f3bc:	08 f4       	brcc	.+2      	; 0x1f3c0 <EVENT_USB_Device_ControlRequest+0x62>
   1f3be:	aa c1       	rjmp	.+852    	; 0x1f714 <EVENT_USB_Device_ControlRequest+0x3b6>
   1f3c0:	86 30       	cpi	r24, 0x06	; 6
   1f3c2:	09 f0       	breq	.+2      	; 0x1f3c6 <EVENT_USB_Device_ControlRequest+0x68>
   1f3c4:	c7 c1       	rjmp	.+910    	; 0x1f754 <EVENT_USB_Device_ControlRequest+0x3f6>
   1f3c6:	bd c1       	rjmp	.+890    	; 0x1f742 <EVENT_USB_Device_ControlRequest+0x3e4>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1f3c8:	80 91 e8 00 	lds	r24, 0x00E8
   1f3cc:	87 7f       	andi	r24, 0xF7	; 247
   1f3ce:	80 93 e8 00 	sts	0x00E8, r24
	{
		case DFU_REQ_DNLOAD:
			Endpoint_ClearSETUP();

			/* Check if bootloader is waiting to terminate */
			if (WaitForExit)
   1f3d2:	80 91 62 01 	lds	r24, 0x0162
   1f3d6:	88 23       	and	r24, r24
   1f3d8:	19 f0       	breq	.+6      	; 0x1f3e0 <EVENT_USB_Device_ControlRequest+0x82>
			{
				/* Bootloader is terminating - process last received command */
				ProcessBootloaderCommand();
   1f3da:	bc de       	rcall	.-648    	; 0x1f154 <ProcessBootloaderCommand>

				/* Indicate that the last command has now been processed - free to exit bootloader */
				WaitForExit = false;
   1f3dc:	10 92 62 01 	sts	0x0162, r1
			}

			/* If the request has a data stage, load it into the command struct */
			if (SentCommand.DataSize)
   1f3e0:	20 97       	sbiw	r28, 0x00	; 0
   1f3e2:	29 f4       	brne	.+10     	; 0x1f3ee <EVENT_USB_Device_ControlRequest+0x90>
   1f3e4:	2d c0       	rjmp	.+90     	; 0x1f440 <EVENT_USB_Device_ControlRequest+0xe2>
			{
				while (!(Endpoint_IsOUTReceived()))
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
   1f3e6:	8e b3       	in	r24, 0x1e	; 30
   1f3e8:	88 23       	and	r24, r24
   1f3ea:	09 f4       	brne	.+2      	; 0x1f3ee <EVENT_USB_Device_ControlRequest+0x90>
   1f3ec:	b3 c1       	rjmp	.+870    	; 0x1f754 <EVENT_USB_Device_ControlRequest+0x3f6>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
   1f3ee:	80 91 e8 00 	lds	r24, 0x00E8
			}

			/* If the request has a data stage, load it into the command struct */
			if (SentCommand.DataSize)
			{
				while (!(Endpoint_IsOUTReceived()))
   1f3f2:	82 ff       	sbrs	r24, 2
   1f3f4:	f8 cf       	rjmp	.-16     	; 0x1f3e6 <EVENT_USB_Device_ControlRequest+0x88>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
   1f3f6:	80 91 f1 00 	lds	r24, 0x00F1
					if (USB_DeviceState == DEVICE_STATE_Unattached)
					  return;
				}

				/* First byte of the data stage is the DNLOAD request's command */
				SentCommand.Command = Endpoint_Read_8();
   1f3fa:	80 93 6c 01 	sts	0x016C, r24

				/* One byte of the data stage is the command, so subtract it from the total data bytes */
				SentCommand.DataSize--;
   1f3fe:	9e 01       	movw	r18, r28
   1f400:	21 50       	subi	r18, 0x01	; 1
   1f402:	30 40       	sbci	r19, 0x00	; 0
   1f404:	30 93 73 01 	sts	0x0173, r19
   1f408:	20 93 72 01 	sts	0x0172, r18
   1f40c:	ed e6       	ldi	r30, 0x6D	; 109
   1f40e:	f1 e0       	ldi	r31, 0x01	; 1
   1f410:	0c c0       	rjmp	.+24     	; 0x1f42a <EVENT_USB_Device_ControlRequest+0xcc>
   1f412:	80 91 f1 00 	lds	r24, 0x00F1

				/* Load in the rest of the data stage as command parameters */
				for (uint8_t DataByte = 0; (DataByte < sizeof(SentCommand.Data)) &&
				     Endpoint_BytesInEndpoint(); DataByte++)
				{
					SentCommand.Data[DataByte] = Endpoint_Read_8();
   1f416:	81 93       	st	Z+, r24
   1f418:	21 50       	subi	r18, 0x01	; 1
   1f41a:	30 40       	sbci	r19, 0x00	; 0

				/* One byte of the data stage is the command, so subtract it from the total data bytes */
				SentCommand.DataSize--;

				/* Load in the rest of the data stage as command parameters */
				for (uint8_t DataByte = 0; (DataByte < sizeof(SentCommand.Data)) &&
   1f41c:	81 e0       	ldi	r24, 0x01	; 1
   1f41e:	e2 37       	cpi	r30, 0x72	; 114
   1f420:	f8 07       	cpc	r31, r24
   1f422:	19 f4       	brne	.+6      	; 0x1f42a <EVENT_USB_Device_ControlRequest+0xcc>
   1f424:	31 83       	std	Z+1, r19	; 0x01
   1f426:	20 83       	st	Z, r18
   1f428:	0a c0       	rjmp	.+20     	; 0x1f43e <EVENT_USB_Device_ControlRequest+0xe0>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
   1f42a:	80 91 f2 00 	lds	r24, 0x00F2
   1f42e:	90 91 f3 00 	lds	r25, 0x00F3
   1f432:	89 2b       	or	r24, r25
   1f434:	71 f7       	brne	.-36     	; 0x1f412 <EVENT_USB_Device_ControlRequest+0xb4>
   1f436:	30 93 73 01 	sts	0x0173, r19
   1f43a:	20 93 72 01 	sts	0x0172, r18
					SentCommand.Data[DataByte] = Endpoint_Read_8();
					SentCommand.DataSize--;
				}

				/* Process the command */
				ProcessBootloaderCommand();
   1f43e:	8a de       	rcall	.-748    	; 0x1f154 <ProcessBootloaderCommand>
			}

			/* Check if currently downloading firmware */
			if (DFU_State == dfuDNLOAD_IDLE)
   1f440:	80 91 00 01 	lds	r24, 0x0100
   1f444:	85 30       	cpi	r24, 0x05	; 5
   1f446:	09 f0       	breq	.+2      	; 0x1f44a <EVENT_USB_Device_ControlRequest+0xec>
   1f448:	b7 c0       	rjmp	.+366    	; 0x1f5b8 <EVENT_USB_Device_ControlRequest+0x25a>
			{
				if (!(SentCommand.DataSize))
   1f44a:	80 91 72 01 	lds	r24, 0x0172
   1f44e:	90 91 73 01 	lds	r25, 0x0173
   1f452:	89 2b       	or	r24, r25
   1f454:	21 f4       	brne	.+8      	; 0x1f45e <EVENT_USB_Device_ControlRequest+0x100>
				{
					DFU_State = dfuIDLE;
   1f456:	82 e0       	ldi	r24, 0x02	; 2
   1f458:	80 93 00 01 	sts	0x0100, r24
   1f45c:	ad c0       	rjmp	.+346    	; 0x1f5b8 <EVENT_USB_Device_ControlRequest+0x25a>
				}
				else
				{
					/* Throw away the filler bytes before the start of the firmware */
					DiscardFillerBytes(DFU_FILLER_BYTES_SIZE);
   1f45e:	8a e1       	ldi	r24, 0x1A	; 26
   1f460:	4b de       	rcall	.-874    	; 0x1f0f8 <DiscardFillerBytes>

					/* Throw away the packet alignment filler bytes before the start of the firmware */
					DiscardFillerBytes(StartAddr % FIXED_CONTROL_ENDPOINT_SIZE);
   1f462:	c0 91 63 01 	lds	r28, 0x0163
   1f466:	d0 91 64 01 	lds	r29, 0x0164
   1f46a:	9e 01       	movw	r18, r28
   1f46c:	2f 71       	andi	r18, 0x1F	; 31
   1f46e:	82 2f       	mov	r24, r18
   1f470:	43 de       	rcall	.-890    	; 0x1f0f8 <DiscardFillerBytes>

					/* Calculate the number of bytes remaining to be written */
					uint16_t BytesRemaining = ((EndAddr - StartAddr) + 1);
   1f472:	a0 90 65 01 	lds	r10, 0x0165
   1f476:	b0 90 66 01 	lds	r11, 0x0166
   1f47a:	08 94       	sec
   1f47c:	a1 1c       	adc	r10, r1
   1f47e:	b1 1c       	adc	r11, r1
   1f480:	85 01       	movw	r16, r10
   1f482:	0c 1b       	sub	r16, r28
   1f484:	1d 0b       	sbc	r17, r29
   1f486:	08 94       	sec
   1f488:	a1 08       	sbc	r10, r1
   1f48a:	b1 08       	sbc	r11, r1

					if (IS_ONEBYTE_COMMAND(SentCommand.Data, 0x00))        // Write flash
   1f48c:	80 91 6d 01 	lds	r24, 0x016D
   1f490:	88 23       	and	r24, r24
   1f492:	09 f0       	breq	.+2      	; 0x1f496 <EVENT_USB_Device_ControlRequest+0x138>
   1f494:	8c c0       	rjmp	.+280    	; 0x1f5ae <EVENT_USB_Device_ControlRequest+0x250>
					{
						/* Calculate the number of words to be written from the number of bytes to be written */
						uint16_t WordsRemaining = (BytesRemaining >> 1);
   1f496:	68 01       	movw	r12, r16
   1f498:	d6 94       	lsr	r13
   1f49a:	c7 94       	ror	r12

						union
						{
							uint16_t Words[2];
							uint32_t Long;
						} CurrFlashAddress                 = {.Words = {StartAddr, Flash64KBPage}};
   1f49c:	ce 01       	movw	r24, r28
   1f49e:	a0 91 67 01 	lds	r26, 0x0167
   1f4a2:	b0 e0       	ldi	r27, 0x00	; 0

						uint32_t CurrFlashPageStartAddress = CurrFlashAddress.Long;
   1f4a4:	7c 01       	movw	r14, r24
   1f4a6:	8d 01       	movw	r16, r26
   1f4a8:	a8 01       	movw	r20, r16
   1f4aa:	97 01       	movw	r18, r14
   1f4ac:	a0 e0       	ldi	r26, 0x00	; 0
									  return;
								}
							}

							/* Write the next word into the current flash page */
							boot_page_fill(CurrFlashAddress.Long, Endpoint_Read_16_LE());
   1f4ae:	88 24       	eor	r8, r8
   1f4b0:	83 94       	inc	r8

							/* See if an entire page has been written to the flash page buffer */
							if ((WordsInFlashPage == (SPM_PAGESIZE >> 1)) || !(WordsRemaining))
							{
								/* Commit the flash page to memory */
								boot_page_write(CurrFlashPageStartAddress);
   1f4b2:	65 e0       	ldi	r22, 0x05	; 5
   1f4b4:	96 2e       	mov	r9, r22
								{
									CurrFlashPageStartAddress = CurrFlashAddress.Long;
									WordsInFlashPage          = 0;

									/* Erase next page's temp buffer */
									boot_page_erase(CurrFlashAddress.Long);
   1f4b6:	b3 e0       	ldi	r27, 0x03	; 3
   1f4b8:	47 c0       	rjmp	.+142    	; 0x1f548 <EVENT_USB_Device_ControlRequest+0x1ea>
   1f4ba:	80 91 f2 00 	lds	r24, 0x00F2
   1f4be:	90 91 f3 00 	lds	r25, 0x00F3
						uint8_t  WordsInFlashPage          = 0;

						while (WordsRemaining--)
						{
							/* Check if endpoint is empty - if so clear it and wait until ready for next packet */
							if (!(Endpoint_BytesInEndpoint()))
   1f4c2:	89 2b       	or	r24, r25
   1f4c4:	71 f4       	brne	.+28     	; 0x1f4e2 <EVENT_USB_Device_ControlRequest+0x184>
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
				#else
					UEINTX &= ~(1 << RXOUTI);
   1f4c6:	80 91 e8 00 	lds	r24, 0x00E8
   1f4ca:	8b 7f       	andi	r24, 0xFB	; 251
   1f4cc:	80 93 e8 00 	sts	0x00E8, r24
   1f4d0:	04 c0       	rjmp	.+8      	; 0x1f4da <EVENT_USB_Device_ControlRequest+0x17c>
							{
								Endpoint_ClearOUT();

								while (!(Endpoint_IsOUTReceived()))
								{
									if (USB_DeviceState == DEVICE_STATE_Unattached)
   1f4d2:	8e b3       	in	r24, 0x1e	; 30
   1f4d4:	88 23       	and	r24, r24
   1f4d6:	09 f4       	brne	.+2      	; 0x1f4da <EVENT_USB_Device_ControlRequest+0x17c>
   1f4d8:	3d c1       	rjmp	.+634    	; 0x1f754 <EVENT_USB_Device_ControlRequest+0x3f6>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
   1f4da:	80 91 e8 00 	lds	r24, 0x00E8
							/* Check if endpoint is empty - if so clear it and wait until ready for next packet */
							if (!(Endpoint_BytesInEndpoint()))
							{
								Endpoint_ClearOUT();

								while (!(Endpoint_IsOUTReceived()))
   1f4de:	82 ff       	sbrs	r24, 2
   1f4e0:	f8 cf       	rjmp	.-16     	; 0x1f4d2 <EVENT_USB_Device_ControlRequest+0x174>
						} CurrFlashAddress                 = {.Words = {StartAddr, Flash64KBPage}};

						uint32_t CurrFlashPageStartAddress = CurrFlashAddress.Long;
						uint8_t  WordsInFlashPage          = 0;

						while (WordsRemaining--)
   1f4e2:	08 94       	sec
   1f4e4:	c1 08       	sbc	r12, r1
   1f4e6:	d1 08       	sbc	r13, r1
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[0] = UEDATX;
   1f4e8:	80 91 f1 00 	lds	r24, 0x00F1
   1f4ec:	68 2f       	mov	r22, r24
				Data.Bytes[1] = UEDATX;
   1f4ee:	80 91 f1 00 	lds	r24, 0x00F1
   1f4f2:	78 2f       	mov	r23, r24
									  return;
								}
							}

							/* Write the next word into the current flash page */
							boot_page_fill(CurrFlashAddress.Long, Endpoint_Read_16_LE());
   1f4f4:	0b 01       	movw	r0, r22
   1f4f6:	f9 01       	movw	r30, r18
   1f4f8:	40 93 5b 00 	sts	0x005B, r20
   1f4fc:	80 92 57 00 	sts	0x0057, r8
   1f500:	e8 95       	spm
   1f502:	11 24       	eor	r1, r1

							/* Adjust counters */
							WordsInFlashPage      += 1;
   1f504:	af 5f       	subi	r26, 0xFF	; 255
   1f506:	2e 5f       	subi	r18, 0xFE	; 254
   1f508:	3f 4f       	sbci	r19, 0xFF	; 255
   1f50a:	4f 4f       	sbci	r20, 0xFF	; 255
   1f50c:	5f 4f       	sbci	r21, 0xFF	; 255
							CurrFlashAddress.Long += 2;

							/* See if an entire page has been written to the flash page buffer */
							if ((WordsInFlashPage == (SPM_PAGESIZE >> 1)) || !(WordsRemaining))
   1f50e:	a0 38       	cpi	r26, 0x80	; 128
   1f510:	19 f0       	breq	.+6      	; 0x1f518 <EVENT_USB_Device_ControlRequest+0x1ba>
   1f512:	c1 14       	cp	r12, r1
   1f514:	d1 04       	cpc	r13, r1
   1f516:	c1 f4       	brne	.+48     	; 0x1f548 <EVENT_USB_Device_ControlRequest+0x1ea>
							{
								/* Commit the flash page to memory */
								boot_page_write(CurrFlashPageStartAddress);
   1f518:	f7 01       	movw	r30, r14
   1f51a:	00 93 5b 00 	sts	0x005B, r16
   1f51e:	90 92 57 00 	sts	0x0057, r9
   1f522:	e8 95       	spm
								boot_spm_busy_wait();
   1f524:	07 b6       	in	r0, 0x37	; 55
   1f526:	00 fc       	sbrc	r0, 0
   1f528:	fd cf       	rjmp	.-6      	; 0x1f524 <EVENT_USB_Device_ControlRequest+0x1c6>

								/* Check if programming incomplete */
								if (WordsRemaining)
   1f52a:	c1 14       	cp	r12, r1
   1f52c:	d1 04       	cpc	r13, r1
   1f52e:	61 f0       	breq	.+24     	; 0x1f548 <EVENT_USB_Device_ControlRequest+0x1ea>
								{
									CurrFlashPageStartAddress = CurrFlashAddress.Long;
									WordsInFlashPage          = 0;

									/* Erase next page's temp buffer */
									boot_page_erase(CurrFlashAddress.Long);
   1f530:	f9 01       	movw	r30, r18
   1f532:	40 93 5b 00 	sts	0x005B, r20
   1f536:	b0 93 57 00 	sts	0x0057, r27
   1f53a:	e8 95       	spm
									boot_spm_busy_wait();
   1f53c:	07 b6       	in	r0, 0x37	; 55
   1f53e:	00 fc       	sbrc	r0, 0
   1f540:	fd cf       	rjmp	.-6      	; 0x1f53c <EVENT_USB_Device_ControlRequest+0x1de>
   1f542:	79 01       	movw	r14, r18
   1f544:	8a 01       	movw	r16, r20
   1f546:	a0 e0       	ldi	r26, 0x00	; 0
						} CurrFlashAddress                 = {.Words = {StartAddr, Flash64KBPage}};

						uint32_t CurrFlashPageStartAddress = CurrFlashAddress.Long;
						uint8_t  WordsInFlashPage          = 0;

						while (WordsRemaining--)
   1f548:	c1 14       	cp	r12, r1
   1f54a:	d1 04       	cpc	r13, r1
   1f54c:	09 f0       	breq	.+2      	; 0x1f550 <EVENT_USB_Device_ControlRequest+0x1f2>
   1f54e:	b5 cf       	rjmp	.-150    	; 0x1f4ba <EVENT_USB_Device_ControlRequest+0x15c>
								}
							}
						}

						/* Once programming complete, start address equals the end address */
						StartAddr = EndAddr;
   1f550:	b0 92 64 01 	sts	0x0164, r11
   1f554:	a0 92 63 01 	sts	0x0163, r10

						/* Re-enable the RWW section of flash */
						boot_rww_enable();
   1f558:	81 e1       	ldi	r24, 0x11	; 17
   1f55a:	80 93 57 00 	sts	0x0057, r24
   1f55e:	e8 95       	spm
   1f560:	29 c0       	rjmp	.+82     	; 0x1f5b4 <EVENT_USB_Device_ControlRequest+0x256>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
   1f562:	80 91 f2 00 	lds	r24, 0x00F2
   1f566:	90 91 f3 00 	lds	r25, 0x00F3
					else                                                   // Write EEPROM
					{
						while (BytesRemaining--)
						{
							/* Check if endpoint is empty - if so clear it and wait until ready for next packet */
							if (!(Endpoint_BytesInEndpoint()))
   1f56a:	89 2b       	or	r24, r25
   1f56c:	71 f4       	brne	.+28     	; 0x1f58a <EVENT_USB_Device_ControlRequest+0x22c>
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
				#else
					UEINTX &= ~(1 << RXOUTI);
   1f56e:	80 91 e8 00 	lds	r24, 0x00E8
   1f572:	8b 7f       	andi	r24, 0xFB	; 251
   1f574:	80 93 e8 00 	sts	0x00E8, r24
   1f578:	04 c0       	rjmp	.+8      	; 0x1f582 <EVENT_USB_Device_ControlRequest+0x224>
							{
								Endpoint_ClearOUT();

								while (!(Endpoint_IsOUTReceived()))
								{
									if (USB_DeviceState == DEVICE_STATE_Unattached)
   1f57a:	8e b3       	in	r24, 0x1e	; 30
   1f57c:	88 23       	and	r24, r24
   1f57e:	09 f4       	brne	.+2      	; 0x1f582 <EVENT_USB_Device_ControlRequest+0x224>
   1f580:	e9 c0       	rjmp	.+466    	; 0x1f754 <EVENT_USB_Device_ControlRequest+0x3f6>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
   1f582:	80 91 e8 00 	lds	r24, 0x00E8
							/* Check if endpoint is empty - if so clear it and wait until ready for next packet */
							if (!(Endpoint_BytesInEndpoint()))
							{
								Endpoint_ClearOUT();

								while (!(Endpoint_IsOUTReceived()))
   1f586:	82 ff       	sbrs	r24, 2
   1f588:	f8 cf       	rjmp	.-16     	; 0x1f57a <EVENT_USB_Device_ControlRequest+0x21c>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
   1f58a:	60 91 f1 00 	lds	r22, 0x00F1
									  return;
								}
							}

							/* Read the byte from the USB interface and write to to the EEPROM */
							eeprom_write_byte((uint8_t*)StartAddr, Endpoint_Read_8());
   1f58e:	80 91 63 01 	lds	r24, 0x0163
   1f592:	90 91 64 01 	lds	r25, 0x0164
   1f596:	c5 d3       	rcall	.+1930   	; 0x1fd22 <__eewr_byte_usb1287>

							/* Adjust counters */
							StartAddr++;
   1f598:	80 91 63 01 	lds	r24, 0x0163
   1f59c:	90 91 64 01 	lds	r25, 0x0164
   1f5a0:	01 96       	adiw	r24, 0x01	; 1
   1f5a2:	90 93 64 01 	sts	0x0164, r25
   1f5a6:	80 93 63 01 	sts	0x0163, r24
   1f5aa:	01 50       	subi	r16, 0x01	; 1
   1f5ac:	10 40       	sbci	r17, 0x00	; 0
						/* Re-enable the RWW section of flash */
						boot_rww_enable();
					}
					else                                                   // Write EEPROM
					{
						while (BytesRemaining--)
   1f5ae:	01 15       	cp	r16, r1
   1f5b0:	11 05       	cpc	r17, r1
   1f5b2:	b9 f6       	brne	.-82     	; 0x1f562 <EVENT_USB_Device_ControlRequest+0x204>
							StartAddr++;
						}
					}

					/* Throw away the currently unused DFU file suffix */
					DiscardFillerBytes(DFU_FILE_SUFFIX_SIZE);
   1f5b4:	80 e1       	ldi	r24, 0x10	; 16
   1f5b6:	a0 dd       	rcall	.-1216   	; 0x1f0f8 <DiscardFillerBytes>
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
				#else
					UEINTX &= ~(1 << RXOUTI);
   1f5b8:	80 91 e8 00 	lds	r24, 0x00E8
   1f5bc:	8b 7f       	andi	r24, 0xFB	; 251
   1f5be:	be c0       	rjmp	.+380    	; 0x1f73c <EVENT_USB_Device_ControlRequest+0x3de>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1f5c0:	80 91 e8 00 	lds	r24, 0x00E8
   1f5c4:	87 7f       	andi	r24, 0xF7	; 247
   1f5c6:	80 93 e8 00 	sts	0x00E8, r24
   1f5ca:	04 c0       	rjmp	.+8      	; 0x1f5d4 <EVENT_USB_Device_ControlRequest+0x276>
		case DFU_REQ_UPLOAD:
			Endpoint_ClearSETUP();

			while (!(Endpoint_IsINReady()))
			{
				if (USB_DeviceState == DEVICE_STATE_Unattached)
   1f5cc:	8e b3       	in	r24, 0x1e	; 30
   1f5ce:	88 23       	and	r24, r24
   1f5d0:	09 f4       	brne	.+2      	; 0x1f5d4 <EVENT_USB_Device_ControlRequest+0x276>
   1f5d2:	c0 c0       	rjmp	.+384    	; 0x1f754 <EVENT_USB_Device_ControlRequest+0x3f6>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
   1f5d4:	80 91 e8 00 	lds	r24, 0x00E8

			break;
		case DFU_REQ_UPLOAD:
			Endpoint_ClearSETUP();

			while (!(Endpoint_IsINReady()))
   1f5d8:	80 ff       	sbrs	r24, 0
   1f5da:	f8 cf       	rjmp	.-16     	; 0x1f5cc <EVENT_USB_Device_ControlRequest+0x26e>
			{
				if (USB_DeviceState == DEVICE_STATE_Unattached)
				  return;
			}

			if (DFU_State != dfuUPLOAD_IDLE)
   1f5dc:	80 91 00 01 	lds	r24, 0x0100
   1f5e0:	89 30       	cpi	r24, 0x09	; 9
   1f5e2:	91 f0       	breq	.+36     	; 0x1f608 <EVENT_USB_Device_ControlRequest+0x2aa>
			{
				if ((DFU_State == dfuERROR) && IS_ONEBYTE_COMMAND(SentCommand.Data, 0x01))       // Blank Check
   1f5e4:	8a 30       	cpi	r24, 0x0A	; 10
   1f5e6:	69 f4       	brne	.+26     	; 0x1f602 <EVENT_USB_Device_ControlRequest+0x2a4>
   1f5e8:	80 91 6d 01 	lds	r24, 0x016D
   1f5ec:	81 30       	cpi	r24, 0x01	; 1
   1f5ee:	49 f4       	brne	.+18     	; 0x1f602 <EVENT_USB_Device_ControlRequest+0x2a4>
				{
					/* Blank checking is performed in the DFU_DNLOAD request - if we get here we've told the host
					   that the memory isn't blank, and the host is requesting the first non-blank address */
					Endpoint_Write_16_LE(StartAddr);
   1f5f0:	80 91 63 01 	lds	r24, 0x0163
   1f5f4:	90 91 64 01 	lds	r25, 0x0164
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
   1f5f8:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
   1f5fc:	90 93 f1 00 	sts	0x00F1, r25
   1f600:	9a c0       	rjmp	.+308    	; 0x1f736 <EVENT_USB_Device_ControlRequest+0x3d8>
				}
				else
				{
					/* Idle state upload - send response to last issued command */
					Endpoint_Write_8(ResponseByte);
   1f602:	80 91 74 01 	lds	r24, 0x0174
   1f606:	95 c0       	rjmp	.+298    	; 0x1f732 <EVENT_USB_Device_ControlRequest+0x3d4>
				}
			}
			else
			{
				/* Determine the number of bytes remaining in the current block */
				uint16_t BytesRemaining = ((EndAddr - StartAddr) + 1);
   1f608:	60 91 65 01 	lds	r22, 0x0165
   1f60c:	70 91 66 01 	lds	r23, 0x0166
   1f610:	20 91 63 01 	lds	r18, 0x0163
   1f614:	30 91 64 01 	lds	r19, 0x0164
   1f618:	6f 5f       	subi	r22, 0xFF	; 255
   1f61a:	7f 4f       	sbci	r23, 0xFF	; 255
   1f61c:	eb 01       	movw	r28, r22
   1f61e:	c2 1b       	sub	r28, r18
   1f620:	d3 0b       	sbc	r29, r19
   1f622:	61 50       	subi	r22, 0x01	; 1
   1f624:	70 40       	sbci	r23, 0x00	; 0

				if (IS_ONEBYTE_COMMAND(SentCommand.Data, 0x00))            // Read FLASH
   1f626:	80 91 6d 01 	lds	r24, 0x016D
   1f62a:	88 23       	and	r24, r24
   1f62c:	89 f5       	brne	.+98     	; 0x1f690 <EVENT_USB_Device_ControlRequest+0x332>
				{
					/* Calculate the number of words to be written from the number of bytes to be written */
					uint16_t WordsRemaining = (BytesRemaining >> 1);
   1f62e:	d6 95       	lsr	r29
   1f630:	c7 95       	ror	r28

					union
					{
						uint16_t Words[2];
						uint32_t Long;
					} CurrFlashAddress = {.Words = {StartAddr, Flash64KBPage}};
   1f632:	c9 01       	movw	r24, r18
   1f634:	a0 91 67 01 	lds	r26, 0x0167
   1f638:	b0 e0       	ldi	r27, 0x00	; 0
   1f63a:	9c 01       	movw	r18, r24
   1f63c:	ad 01       	movw	r20, r26
   1f63e:	21 c0       	rjmp	.+66     	; 0x1f682 <EVENT_USB_Device_ControlRequest+0x324>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
   1f640:	80 91 f2 00 	lds	r24, 0x00F2
   1f644:	90 91 f3 00 	lds	r25, 0x00F3

					while (WordsRemaining--)
					{
						/* Check if endpoint is full - if so clear it and wait until ready for next packet */
						if (Endpoint_BytesInEndpoint() == FIXED_CONTROL_ENDPOINT_SIZE)
   1f648:	80 97       	sbiw	r24, 0x20	; 32
   1f64a:	71 f4       	brne	.+28     	; 0x1f668 <EVENT_USB_Device_ControlRequest+0x30a>
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
				#else
					UEINTX &= ~(1 << TXINI);
   1f64c:	80 91 e8 00 	lds	r24, 0x00E8
   1f650:	8e 7f       	andi	r24, 0xFE	; 254
   1f652:	80 93 e8 00 	sts	0x00E8, r24
   1f656:	04 c0       	rjmp	.+8      	; 0x1f660 <EVENT_USB_Device_ControlRequest+0x302>
						{
							Endpoint_ClearIN();

							while (!(Endpoint_IsINReady()))
							{
								if (USB_DeviceState == DEVICE_STATE_Unattached)
   1f658:	8e b3       	in	r24, 0x1e	; 30
   1f65a:	88 23       	and	r24, r24
   1f65c:	09 f4       	brne	.+2      	; 0x1f660 <EVENT_USB_Device_ControlRequest+0x302>
   1f65e:	7a c0       	rjmp	.+244    	; 0x1f754 <EVENT_USB_Device_ControlRequest+0x3f6>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
   1f660:	80 91 e8 00 	lds	r24, 0x00E8
						/* Check if endpoint is full - if so clear it and wait until ready for next packet */
						if (Endpoint_BytesInEndpoint() == FIXED_CONTROL_ENDPOINT_SIZE)
						{
							Endpoint_ClearIN();

							while (!(Endpoint_IsINReady()))
   1f664:	80 ff       	sbrs	r24, 0
   1f666:	f8 cf       	rjmp	.-16     	; 0x1f658 <EVENT_USB_Device_ControlRequest+0x2fa>
							}
						}

						/* Read the flash word and send it via USB to the host */
						#if (FLASHEND > 0xFFFF)
							Endpoint_Write_16_LE(pgm_read_word_far(CurrFlashAddress.Long));
   1f668:	4b bf       	out	0x3b, r20	; 59
   1f66a:	f9 01       	movw	r30, r18
   1f66c:	87 91       	elpm	r24, Z+
   1f66e:	96 91       	elpm	r25, Z+
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
   1f670:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
   1f674:	90 93 f1 00 	sts	0x00F1, r25
   1f678:	21 97       	sbiw	r28, 0x01	; 1
   1f67a:	2e 5f       	subi	r18, 0xFE	; 254
   1f67c:	3f 4f       	sbci	r19, 0xFF	; 255
   1f67e:	4f 4f       	sbci	r20, 0xFF	; 255
   1f680:	5f 4f       	sbci	r21, 0xFF	; 255
					{
						uint16_t Words[2];
						uint32_t Long;
					} CurrFlashAddress = {.Words = {StartAddr, Flash64KBPage}};

					while (WordsRemaining--)
   1f682:	20 97       	sbiw	r28, 0x00	; 0
   1f684:	e9 f6       	brne	.-70     	; 0x1f640 <EVENT_USB_Device_ControlRequest+0x2e2>
						/* Adjust counters */
						CurrFlashAddress.Long += 2;
					}

					/* Once reading is complete, start address equals the end address */
					StartAddr = EndAddr;
   1f686:	70 93 64 01 	sts	0x0164, r23
   1f68a:	60 93 63 01 	sts	0x0163, r22
   1f68e:	28 c0       	rjmp	.+80     	; 0x1f6e0 <EVENT_USB_Device_ControlRequest+0x382>
				}
				else if (IS_ONEBYTE_COMMAND(SentCommand.Data, 0x02))       // Read EEPROM
   1f690:	82 30       	cpi	r24, 0x02	; 2
   1f692:	31 f5       	brne	.+76     	; 0x1f6e0 <EVENT_USB_Device_ControlRequest+0x382>
   1f694:	23 c0       	rjmp	.+70     	; 0x1f6dc <EVENT_USB_Device_ControlRequest+0x37e>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
   1f696:	80 91 f2 00 	lds	r24, 0x00F2
   1f69a:	90 91 f3 00 	lds	r25, 0x00F3
				{
					while (BytesRemaining--)
					{
						/* Check if endpoint is full - if so clear it and wait until ready for next packet */
						if (Endpoint_BytesInEndpoint() == FIXED_CONTROL_ENDPOINT_SIZE)
   1f69e:	80 97       	sbiw	r24, 0x20	; 32
   1f6a0:	71 f4       	brne	.+28     	; 0x1f6be <EVENT_USB_Device_ControlRequest+0x360>
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
				#else
					UEINTX &= ~(1 << TXINI);
   1f6a2:	80 91 e8 00 	lds	r24, 0x00E8
   1f6a6:	8e 7f       	andi	r24, 0xFE	; 254
   1f6a8:	80 93 e8 00 	sts	0x00E8, r24
   1f6ac:	04 c0       	rjmp	.+8      	; 0x1f6b6 <EVENT_USB_Device_ControlRequest+0x358>
						{
							Endpoint_ClearIN();

							while (!(Endpoint_IsINReady()))
							{
								if (USB_DeviceState == DEVICE_STATE_Unattached)
   1f6ae:	8e b3       	in	r24, 0x1e	; 30
   1f6b0:	88 23       	and	r24, r24
   1f6b2:	09 f4       	brne	.+2      	; 0x1f6b6 <EVENT_USB_Device_ControlRequest+0x358>
   1f6b4:	4f c0       	rjmp	.+158    	; 0x1f754 <EVENT_USB_Device_ControlRequest+0x3f6>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
   1f6b6:	80 91 e8 00 	lds	r24, 0x00E8
						/* Check if endpoint is full - if so clear it and wait until ready for next packet */
						if (Endpoint_BytesInEndpoint() == FIXED_CONTROL_ENDPOINT_SIZE)
						{
							Endpoint_ClearIN();

							while (!(Endpoint_IsINReady()))
   1f6ba:	80 ff       	sbrs	r24, 0
   1f6bc:	f8 cf       	rjmp	.-16     	; 0x1f6ae <EVENT_USB_Device_ControlRequest+0x350>
								  return;
							}
						}

						/* Read the EEPROM byte and send it via USB to the host */
						Endpoint_Write_8(eeprom_read_byte((uint8_t*)StartAddr));
   1f6be:	00 91 63 01 	lds	r16, 0x0163
   1f6c2:	10 91 64 01 	lds	r17, 0x0164
   1f6c6:	c8 01       	movw	r24, r16
   1f6c8:	24 d3       	rcall	.+1608   	; 0x1fd12 <__eerd_byte_usb1287>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
   1f6ca:	80 93 f1 00 	sts	0x00F1, r24

						/* Adjust counters */
						StartAddr++;
   1f6ce:	0f 5f       	subi	r16, 0xFF	; 255
   1f6d0:	1f 4f       	sbci	r17, 0xFF	; 255
   1f6d2:	10 93 64 01 	sts	0x0164, r17
   1f6d6:	00 93 63 01 	sts	0x0163, r16
   1f6da:	21 97       	sbiw	r28, 0x01	; 1
					/* Once reading is complete, start address equals the end address */
					StartAddr = EndAddr;
				}
				else if (IS_ONEBYTE_COMMAND(SentCommand.Data, 0x02))       // Read EEPROM
				{
					while (BytesRemaining--)
   1f6dc:	20 97       	sbiw	r28, 0x00	; 0
   1f6de:	d9 f6       	brne	.-74     	; 0x1f696 <EVENT_USB_Device_ControlRequest+0x338>
						StartAddr++;
					}
				}

				/* Return to idle state */
				DFU_State = dfuIDLE;
   1f6e0:	82 e0       	ldi	r24, 0x02	; 2
   1f6e2:	80 93 00 01 	sts	0x0100, r24
   1f6e6:	27 c0       	rjmp	.+78     	; 0x1f736 <EVENT_USB_Device_ControlRequest+0x3d8>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1f6e8:	80 91 e8 00 	lds	r24, 0x00E8
   1f6ec:	87 7f       	andi	r24, 0xF7	; 247
   1f6ee:	80 93 e8 00 	sts	0x00E8, r24
			break;
		case DFU_REQ_GETSTATUS:
			Endpoint_ClearSETUP();

			/* Write 8-bit status value */
			Endpoint_Write_8(DFU_Status);
   1f6f2:	80 91 68 01 	lds	r24, 0x0168
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
   1f6f6:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
   1f6fa:	10 92 f1 00 	sts	0x00F1, r1
   1f6fe:	10 92 f1 00 	sts	0x00F1, r1
				UEDATX = (Data >> 8);
   1f702:	10 92 f1 00 	sts	0x00F1, r1
			/* Write 24-bit poll timeout value */
			Endpoint_Write_8(0);
			Endpoint_Write_16_LE(0);

			/* Write 8-bit state value */
			Endpoint_Write_8(DFU_State);
   1f706:	80 91 00 01 	lds	r24, 0x0100
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
   1f70a:	80 93 f1 00 	sts	0x00F1, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1f70e:	10 92 f1 00 	sts	0x00F1, r1
   1f712:	11 c0       	rjmp	.+34     	; 0x1f736 <EVENT_USB_Device_ControlRequest+0x3d8>
   1f714:	80 91 e8 00 	lds	r24, 0x00E8
   1f718:	87 7f       	andi	r24, 0xF7	; 247
   1f71a:	80 93 e8 00 	sts	0x00E8, r24
			break;
		case DFU_REQ_CLRSTATUS:
			Endpoint_ClearSETUP();

			/* Reset the status value variable to the default OK status */
			DFU_Status = OK;
   1f71e:	10 92 68 01 	sts	0x0168, r1
   1f722:	17 c0       	rjmp	.+46     	; 0x1f752 <EVENT_USB_Device_ControlRequest+0x3f4>
   1f724:	80 91 e8 00 	lds	r24, 0x00E8
   1f728:	87 7f       	andi	r24, 0xF7	; 247
   1f72a:	80 93 e8 00 	sts	0x00E8, r24
			break;
		case DFU_REQ_GETSTATE:
			Endpoint_ClearSETUP();

			/* Write the current device state to the endpoint */
			Endpoint_Write_8(DFU_State);
   1f72e:	80 91 00 01 	lds	r24, 0x0100
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
   1f732:	80 93 f1 00 	sts	0x00F1, r24
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
				#else
					UEINTX &= ~(1 << TXINI);
   1f736:	80 91 e8 00 	lds	r24, 0x00E8
   1f73a:	8e 7f       	andi	r24, 0xFE	; 254
   1f73c:	80 93 e8 00 	sts	0x00E8, r24
   1f740:	08 c0       	rjmp	.+16     	; 0x1f752 <EVENT_USB_Device_ControlRequest+0x3f4>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1f742:	80 91 e8 00 	lds	r24, 0x00E8
   1f746:	87 7f       	andi	r24, 0xF7	; 247
   1f748:	80 93 e8 00 	sts	0x00E8, r24
			break;
		case DFU_REQ_ABORT:
			Endpoint_ClearSETUP();

			/* Reset the current state variable to the default idle state */
			DFU_State = dfuIDLE;
   1f74c:	82 e0       	ldi	r24, 0x02	; 2
   1f74e:	80 93 00 01 	sts	0x0100, r24

			Endpoint_ClearStatusStage();
   1f752:	86 d0       	rcall	.+268    	; 0x1f860 <Endpoint_ClearStatusStage>
			break;
	}
}
   1f754:	df 91       	pop	r29
   1f756:	cf 91       	pop	r28
   1f758:	1f 91       	pop	r17
   1f75a:	0f 91       	pop	r16
   1f75c:	ff 90       	pop	r15
   1f75e:	ef 90       	pop	r14
   1f760:	df 90       	pop	r13
   1f762:	cf 90       	pop	r12
   1f764:	bf 90       	pop	r11
   1f766:	af 90       	pop	r10
   1f768:	9f 90       	pop	r9
   1f76a:	8f 90       	pop	r8
   1f76c:	08 95       	ret

0001f76e <ResetHardware>:

/** Resets all configured hardware required for the bootloader back to their original states. */
void ResetHardware(void)
{
	/* Shut down the USB subsystem */
	USB_Disable();
   1f76e:	97 d0       	rcall	.+302    	; 0x1f89e <USB_Disable>

	/* Relocate the interrupt vector table back to the application section */
	MCUCR = (1 << IVCE);
   1f770:	81 e0       	ldi	r24, 0x01	; 1
   1f772:	85 bf       	out	0x35, r24	; 53
	MCUCR = 0;
   1f774:	15 be       	out	0x35, r1	; 53
}
   1f776:	08 95       	ret

0001f778 <SetupHardware>:
	AppStartPtr();
}

/** Configures all hardware required for the bootloader. */
void SetupHardware(void)
{
   1f778:	1f 93       	push	r17
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
   1f77a:	84 b7       	in	r24, 0x34	; 52
   1f77c:	87 7f       	andi	r24, 0xF7	; 247
   1f77e:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
   1f780:	88 e1       	ldi	r24, 0x18	; 24
   1f782:	0f b6       	in	r0, 0x3f	; 63
   1f784:	f8 94       	cli
   1f786:	80 93 60 00 	sts	0x0060, r24
   1f78a:	10 92 60 00 	sts	0x0060, r1
   1f78e:	0f be       	out	0x3f, r0	; 63

	/* Disable clock division */
	clock_prescale_set(clock_div_1);
   1f790:	80 e0       	ldi	r24, 0x00	; 0
   1f792:	90 e0       	ldi	r25, 0x00	; 0
   1f794:	20 e8       	ldi	r18, 0x80	; 128
   1f796:	0f b6       	in	r0, 0x3f	; 63
   1f798:	f8 94       	cli
   1f79a:	20 93 61 00 	sts	0x0061, r18
   1f79e:	80 93 61 00 	sts	0x0061, r24
   1f7a2:	0f be       	out	0x3f, r0	; 63

	/* Relocate the interrupt vector table to the bootloader section */
	MCUCR = (1 << IVCE);
   1f7a4:	11 e0       	ldi	r17, 0x01	; 1
   1f7a6:	15 bf       	out	0x35, r17	; 53
	MCUCR = (1 << IVSEL);
   1f7a8:	82 e0       	ldi	r24, 0x02	; 2
   1f7aa:	85 bf       	out	0x35, r24	; 53

	/* Initialize the USB subsystem */
	USB_Init();
   1f7ac:	d4 d0       	rcall	.+424    	; 0x1f956 <USB_Init>

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
   1f7ae:	8a b1       	in	r24, 0x0a	; 10
   1f7b0:	80 6f       	ori	r24, 0xF0	; 240
   1f7b2:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
   1f7b4:	8b b1       	in	r24, 0x0b	; 11
   1f7b6:	8f 70       	andi	r24, 0x0F	; 15
   1f7b8:	8b b9       	out	0x0b, r24	; 11
	LEDs_Init();
	
	/* Bootloader active LED toggle timer initialization */
	TIMSK1 = (1 << TOIE1);
   1f7ba:	10 93 6f 00 	sts	0x006F, r17
	TCCR1B = ((1 << CS11) | (1 << CS10));
   1f7be:	83 e0       	ldi	r24, 0x03	; 3
   1f7c0:	80 93 81 00 	sts	0x0081, r24
}
   1f7c4:	1f 91       	pop	r17
   1f7c6:	08 95       	ret

0001f7c8 <main>:
 *  the loaded application code.
 */
int main(void)
{
	/* Configure hardware required by the bootloader */
	SetupHardware();
   1f7c8:	d7 df       	rcall	.-82     	; 0x1f778 <SetupHardware>
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
   1f7ca:	8b b1       	in	r24, 0x0b	; 11
   1f7cc:	8f 70       	andi	r24, 0x0F	; 15
   1f7ce:	80 61       	ori	r24, 0x10	; 16
   1f7d0:	8b b9       	out	0x0b, r24	; 11

	/* Turn on first LED on the board to indicate that the bootloader has started */
	LEDs_SetAllLEDs(LEDS_LED1);

	/* Enable global interrupts so that the USB stack can function */
	sei();
   1f7d2:	78 94       	sei
   1f7d4:	01 c0       	rjmp	.+2      	; 0x1f7d8 <main+0x10>

	/* Run the USB management task while the bootloader is supposed to be running */
	while (RunBootloader || WaitForExit)
	  USB_USBTask();
   1f7d6:	94 d2       	rcall	.+1320   	; 0x1fd00 <USB_USBTask>

	/* Enable global interrupts so that the USB stack can function */
	sei();

	/* Run the USB management task while the bootloader is supposed to be running */
	while (RunBootloader || WaitForExit)
   1f7d8:	80 91 01 01 	lds	r24, 0x0101
   1f7dc:	88 23       	and	r24, r24
   1f7de:	d9 f7       	brne	.-10     	; 0x1f7d6 <main+0xe>
   1f7e0:	80 91 62 01 	lds	r24, 0x0162
   1f7e4:	88 23       	and	r24, r24
   1f7e6:	b9 f7       	brne	.-18     	; 0x1f7d6 <main+0xe>
	  USB_USBTask();

	/* Reset configured hardware back to their original states for the user application */
	ResetHardware();
   1f7e8:	c2 df       	rcall	.-124    	; 0x1f76e <ResetHardware>

	/* Start the user application */
	AppStartPtr();
   1f7ea:	e0 91 6a 01 	lds	r30, 0x016A
   1f7ee:	f0 91 6b 01 	lds	r31, 0x016B
   1f7f2:	09 95       	icall

0001f7f4 <CALLBACK_USB_GetDescriptor>:
 *  USB host.
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
   1f7f4:	fa 01       	movw	r30, r20
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
   1f7f6:	92 30       	cpi	r25, 0x02	; 2
   1f7f8:	71 f0       	breq	.+28     	; 0x1f816 <CALLBACK_USB_GetDescriptor+0x22>
   1f7fa:	93 30       	cpi	r25, 0x03	; 3
   1f7fc:	89 f0       	breq	.+34     	; 0x1f820 <CALLBACK_USB_GetDescriptor+0x2c>
   1f7fe:	91 30       	cpi	r25, 0x01	; 1
   1f800:	29 f4       	brne	.+10     	; 0x1f80c <CALLBACK_USB_GetDescriptor+0x18>
   1f802:	88 e0       	ldi	r24, 0x08	; 8
   1f804:	91 e0       	ldi	r25, 0x01	; 1
   1f806:	22 e1       	ldi	r18, 0x12	; 18
   1f808:	30 e0       	ldi	r19, 0x00	; 0
   1f80a:	15 c0       	rjmp	.+42     	; 0x1f836 <CALLBACK_USB_GetDescriptor+0x42>
   1f80c:	80 e0       	ldi	r24, 0x00	; 0
   1f80e:	90 e0       	ldi	r25, 0x00	; 0
   1f810:	20 e0       	ldi	r18, 0x00	; 0
   1f812:	30 e0       	ldi	r19, 0x00	; 0
   1f814:	10 c0       	rjmp	.+32     	; 0x1f836 <CALLBACK_USB_GetDescriptor+0x42>
   1f816:	8a e1       	ldi	r24, 0x1A	; 26
   1f818:	91 e0       	ldi	r25, 0x01	; 1
   1f81a:	2b e1       	ldi	r18, 0x1B	; 27
   1f81c:	30 e0       	ldi	r19, 0x00	; 0
   1f81e:	0b c0       	rjmp	.+22     	; 0x1f836 <CALLBACK_USB_GetDescriptor+0x42>
		case DTYPE_Configuration: 
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String: 
			if (!(DescriptorNumber))
   1f820:	88 23       	and	r24, r24
   1f822:	29 f4       	brne	.+10     	; 0x1f82e <CALLBACK_USB_GetDescriptor+0x3a>
   1f824:	85 e3       	ldi	r24, 0x35	; 53
   1f826:	91 e0       	ldi	r25, 0x01	; 1
   1f828:	24 e0       	ldi	r18, 0x04	; 4
   1f82a:	30 e0       	ldi	r19, 0x00	; 0
   1f82c:	04 c0       	rjmp	.+8      	; 0x1f836 <CALLBACK_USB_GetDescriptor+0x42>
   1f82e:	89 e3       	ldi	r24, 0x39	; 57
   1f830:	91 e0       	ldi	r25, 0x01	; 1
   1f832:	26 e2       	ldi	r18, 0x26	; 38
   1f834:	30 e0       	ldi	r19, 0x00	; 0
			}
			
			break;
	}
	
	*DescriptorAddress = Address;
   1f836:	91 83       	std	Z+1, r25	; 0x01
   1f838:	80 83       	st	Z, r24
	return Size;
}
   1f83a:	c9 01       	movw	r24, r18
   1f83c:	08 95       	ret

0001f83e <Endpoint_ConfigureEndpoint_Prv>:
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
   1f83e:	80 91 eb 00 	lds	r24, 0x00EB
   1f842:	81 60       	ori	r24, 0x01	; 1
   1f844:	80 93 eb 00 	sts	0x00EB, r24
{
#if defined(CONTROL_ONLY_DEVICE) || defined(ORDERED_EP_CONFIG)
	Endpoint_SelectEndpoint(Number);
	Endpoint_EnableEndpoint();

	UECFG1X = 0;
   1f848:	10 92 ed 00 	sts	0x00ED, r1
	UECFG0X = UECFG0XData;
   1f84c:	60 93 ec 00 	sts	0x00EC, r22
	UECFG1X = UECFG1XData;
   1f850:	40 93 ed 00 	sts	0x00ED, r20
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
   1f854:	80 91 ee 00 	lds	r24, 0x00EE
	}
	
	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
   1f858:	88 1f       	adc	r24, r24
   1f85a:	88 27       	eor	r24, r24
   1f85c:	88 1f       	adc	r24, r24
   1f85e:	08 95       	ret

0001f860 <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
   1f860:	80 91 77 01 	lds	r24, 0x0177
   1f864:	88 23       	and	r24, r24
   1f866:	8c f4       	brge	.+34     	; 0x1f88a <Endpoint_ClearStatusStage+0x2a>
   1f868:	03 c0       	rjmp	.+6      	; 0x1f870 <Endpoint_ClearStatusStage+0x10>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
   1f86a:	8e b3       	in	r24, 0x1e	; 30
   1f86c:	88 23       	and	r24, r24
   1f86e:	b1 f0       	breq	.+44     	; 0x1f89c <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
   1f870:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
   1f874:	82 ff       	sbrs	r24, 2
   1f876:	f9 cf       	rjmp	.-14     	; 0x1f86a <Endpoint_ClearStatusStage+0xa>
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
				#else
					UEINTX &= ~(1 << RXOUTI);
   1f878:	80 91 e8 00 	lds	r24, 0x00E8
   1f87c:	8b 7f       	andi	r24, 0xFB	; 251
   1f87e:	80 93 e8 00 	sts	0x00E8, r24
   1f882:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
   1f884:	8e b3       	in	r24, 0x1e	; 30
   1f886:	88 23       	and	r24, r24
   1f888:	49 f0       	breq	.+18     	; 0x1f89c <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
   1f88a:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
   1f88e:	80 ff       	sbrs	r24, 0
   1f890:	f9 cf       	rjmp	.-14     	; 0x1f884 <Endpoint_ClearStatusStage+0x24>
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
				#else
					UEINTX &= ~(1 << TXINI);
   1f892:	80 91 e8 00 	lds	r24, 0x00E8
   1f896:	8e 7f       	andi	r24, 0xFE	; 254
   1f898:	80 93 e8 00 	sts	0x00E8, r24
   1f89c:	08 95       	ret

0001f89e <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
   1f89e:	64 d0       	rcall	.+200    	; 0x1f968 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
   1f8a0:	6b d0       	rcall	.+214    	; 0x1f978 <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
   1f8a2:	e0 ee       	ldi	r30, 0xE0	; 224
   1f8a4:	f0 e0       	ldi	r31, 0x00	; 0
   1f8a6:	80 81       	ld	r24, Z
   1f8a8:	81 60       	ori	r24, 0x01	; 1
   1f8aa:	80 83       	st	Z, r24
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON  &= ~(1 << USBE);
   1f8ac:	a8 ed       	ldi	r26, 0xD8	; 216
   1f8ae:	b0 e0       	ldi	r27, 0x00	; 0
   1f8b0:	8c 91       	ld	r24, X
   1f8b2:	8f 77       	andi	r24, 0x7F	; 127
   1f8b4:	8c 93       	st	X, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
   1f8b6:	19 bc       	out	0x29, r1	; 41

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  &= ~(1 << UVREGE);
   1f8b8:	e7 ed       	ldi	r30, 0xD7	; 215
   1f8ba:	f0 e0       	ldi	r31, 0x00	; 0
   1f8bc:	80 81       	ld	r24, Z
   1f8be:	8e 7f       	andi	r24, 0xFE	; 254
   1f8c0:	80 83       	st	Z, r24
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON  &= ~(1 << OTGPADE);
   1f8c2:	8c 91       	ld	r24, X
   1f8c4:	8f 7e       	andi	r24, 0xEF	; 239
   1f8c6:	8c 93       	st	X, r24

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
   1f8c8:	10 92 76 01 	sts	0x0176, r1
}
   1f8cc:	08 95       	ret

0001f8ce <USB_ResetInterface>:

void USB_ResetInterface(void)
{
   1f8ce:	ef 92       	push	r14
   1f8d0:	ff 92       	push	r15
   1f8d2:	0f 93       	push	r16
   1f8d4:	1f 93       	push	r17
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
   1f8d6:	48 d0       	rcall	.+144    	; 0x1f968 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
   1f8d8:	4f d0       	rcall	.+158    	; 0x1f978 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
   1f8da:	08 ed       	ldi	r16, 0xD8	; 216
   1f8dc:	10 e0       	ldi	r17, 0x00	; 0
   1f8de:	f8 01       	movw	r30, r16
   1f8e0:	80 81       	ld	r24, Z
   1f8e2:	8f 77       	andi	r24, 0x7F	; 127
   1f8e4:	80 83       	st	Z, r24
				USBCON |=  (1 << USBE);
   1f8e6:	80 81       	ld	r24, Z
   1f8e8:	80 68       	ori	r24, 0x80	; 128
   1f8ea:	80 83       	st	Z, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
   1f8ec:	80 81       	ld	r24, Z
   1f8ee:	8f 7d       	andi	r24, 0xDF	; 223
   1f8f0:	80 83       	st	Z, r24

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
   1f8f2:	e7 ed       	ldi	r30, 0xD7	; 215
   1f8f4:	f0 e0       	ldi	r31, 0x00	; 0
   1f8f6:	80 81       	ld	r24, Z
   1f8f8:	80 68       	ori	r24, 0x80	; 128
   1f8fa:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
   1f8fc:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
   1f8fe:	1e ba       	out	0x1e, r1	; 30
	USB_Device_ConfigurationNumber  = 0;
   1f900:	10 92 75 01 	sts	0x0175, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
   1f904:	80 ee       	ldi	r24, 0xE0	; 224
   1f906:	e8 2e       	mov	r14, r24
   1f908:	f1 2c       	mov	r15, r1
   1f90a:	f7 01       	movw	r30, r14
   1f90c:	80 81       	ld	r24, Z
   1f90e:	8b 7f       	andi	r24, 0xFB	; 251
   1f910:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
   1f912:	f8 01       	movw	r30, r16
   1f914:	80 81       	ld	r24, Z
   1f916:	81 60       	ori	r24, 0x01	; 1
   1f918:	80 83       	st	Z, r24
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
   1f91a:	80 e0       	ldi	r24, 0x00	; 0
   1f91c:	60 e0       	ldi	r22, 0x00	; 0
   1f91e:	42 e2       	ldi	r20, 0x22	; 34
   1f920:	8e df       	rcall	.-228    	; 0x1f83e <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
   1f922:	e1 ee       	ldi	r30, 0xE1	; 225
   1f924:	f0 e0       	ldi	r31, 0x00	; 0
   1f926:	80 81       	ld	r24, Z
   1f928:	8e 7f       	andi	r24, 0xFE	; 254
   1f92a:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
   1f92c:	e2 ee       	ldi	r30, 0xE2	; 226
   1f92e:	f0 e0       	ldi	r31, 0x00	; 0
   1f930:	80 81       	ld	r24, Z
   1f932:	81 60       	ori	r24, 0x01	; 1
   1f934:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
   1f936:	80 81       	ld	r24, Z
   1f938:	88 60       	ori	r24, 0x08	; 8
   1f93a:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
   1f93c:	f7 01       	movw	r30, r14
   1f93e:	80 81       	ld	r24, Z
   1f940:	8e 7f       	andi	r24, 0xFE	; 254
   1f942:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
   1f944:	f8 01       	movw	r30, r16
   1f946:	80 81       	ld	r24, Z
   1f948:	80 61       	ori	r24, 0x10	; 16
   1f94a:	80 83       	st	Z, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
   1f94c:	1f 91       	pop	r17
   1f94e:	0f 91       	pop	r16
   1f950:	ff 90       	pop	r15
   1f952:	ef 90       	pop	r14
   1f954:	08 95       	ret

0001f956 <USB_Init>:

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
   1f956:	e7 ed       	ldi	r30, 0xD7	; 215
   1f958:	f0 e0       	ldi	r31, 0x00	; 0
   1f95a:	80 81       	ld	r24, Z
   1f95c:	81 60       	ori	r24, 0x01	; 1
   1f95e:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
   1f960:	81 e0       	ldi	r24, 0x01	; 1
   1f962:	80 93 76 01 	sts	0x0176, r24

	USB_ResetInterface();
}
   1f966:	b3 cf       	rjmp	.-154    	; 0x1f8ce <USB_ResetInterface>

0001f968 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
   1f968:	e8 ed       	ldi	r30, 0xD8	; 216
   1f96a:	f0 e0       	ldi	r31, 0x00	; 0
   1f96c:	80 81       	ld	r24, Z
   1f96e:	8c 7f       	andi	r24, 0xFC	; 252
   1f970:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
   1f972:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
   1f976:	08 95       	ret

0001f978 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
   1f978:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
   1f97c:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
   1f980:	08 95       	ret

0001f982 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
   1f982:	1f 92       	push	r1
   1f984:	0f 92       	push	r0
   1f986:	0f b6       	in	r0, 0x3f	; 63
   1f988:	0f 92       	push	r0
   1f98a:	0b b6       	in	r0, 0x3b	; 59
   1f98c:	0f 92       	push	r0
   1f98e:	11 24       	eor	r1, r1
   1f990:	2f 93       	push	r18
   1f992:	3f 93       	push	r19
   1f994:	4f 93       	push	r20
   1f996:	5f 93       	push	r21
   1f998:	6f 93       	push	r22
   1f99a:	7f 93       	push	r23
   1f99c:	8f 93       	push	r24
   1f99e:	9f 93       	push	r25
   1f9a0:	af 93       	push	r26
   1f9a2:	bf 93       	push	r27
   1f9a4:	ef 93       	push	r30
   1f9a6:	ff 93       	push	r31
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
   1f9a8:	80 91 da 00 	lds	r24, 0x00DA
		EVENT_USB_Device_StartOfFrame();
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
   1f9ac:	80 ff       	sbrs	r24, 0
   1f9ae:	1b c0       	rjmp	.+54     	; 0x1f9e6 <__vector_10+0x64>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
   1f9b0:	80 91 d8 00 	lds	r24, 0x00D8
   1f9b4:	80 ff       	sbrs	r24, 0
   1f9b6:	17 c0       	rjmp	.+46     	; 0x1f9e6 <__vector_10+0x64>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
   1f9b8:	80 91 da 00 	lds	r24, 0x00DA
   1f9bc:	8e 7f       	andi	r24, 0xFE	; 254
   1f9be:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
   1f9c2:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
   1f9c6:	80 ff       	sbrs	r24, 0
   1f9c8:	0b c0       	rjmp	.+22     	; 0x1f9e0 <__vector_10+0x5e>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
   1f9ca:	8c e0       	ldi	r24, 0x0C	; 12
   1f9cc:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
   1f9ce:	8e e0       	ldi	r24, 0x0E	; 14
   1f9d0:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
   1f9d2:	09 b4       	in	r0, 0x29	; 41
   1f9d4:	00 fe       	sbrs	r0, 0
   1f9d6:	fd cf       	rjmp	.-6      	; 0x1f9d2 <__vector_10+0x50>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
   1f9d8:	81 e0       	ldi	r24, 0x01	; 1
   1f9da:	8e bb       	out	0x1e, r24	; 30
			EVENT_USB_Device_Connect();
   1f9dc:	90 d1       	rcall	.+800    	; 0x1fcfe <USB_Event_Stub>
   1f9de:	03 c0       	rjmp	.+6      	; 0x1f9e6 <__vector_10+0x64>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
   1f9e0:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
   1f9e2:	1e ba       	out	0x1e, r1	; 30
			EVENT_USB_Device_Disconnect();
   1f9e4:	8c d1       	rcall	.+792    	; 0x1fcfe <USB_Event_Stub>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
   1f9e6:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
   1f9ea:	80 ff       	sbrs	r24, 0
   1f9ec:	17 c0       	rjmp	.+46     	; 0x1fa1c <__vector_10+0x9a>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
   1f9ee:	80 91 e2 00 	lds	r24, 0x00E2
   1f9f2:	80 ff       	sbrs	r24, 0
   1f9f4:	13 c0       	rjmp	.+38     	; 0x1fa1c <__vector_10+0x9a>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
   1f9f6:	80 91 e2 00 	lds	r24, 0x00E2
   1f9fa:	8e 7f       	andi	r24, 0xFE	; 254
   1f9fc:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
   1fa00:	80 91 e2 00 	lds	r24, 0x00E2
   1fa04:	80 61       	ori	r24, 0x10	; 16
   1fa06:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON  |=  (1 << FRZCLK);
   1fa0a:	80 91 d8 00 	lds	r24, 0x00D8
   1fa0e:	80 62       	ori	r24, 0x20	; 32
   1fa10:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
   1fa14:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
   1fa16:	85 e0       	ldi	r24, 0x05	; 5
   1fa18:	8e bb       	out	0x1e, r24	; 30
		EVENT_USB_Device_Suspend();
   1fa1a:	71 d1       	rcall	.+738    	; 0x1fcfe <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
   1fa1c:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
   1fa20:	84 ff       	sbrs	r24, 4
   1fa22:	2c c0       	rjmp	.+88     	; 0x1fa7c <__vector_10+0xfa>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
   1fa24:	80 91 e2 00 	lds	r24, 0x00E2
   1fa28:	84 ff       	sbrs	r24, 4
   1fa2a:	28 c0       	rjmp	.+80     	; 0x1fa7c <__vector_10+0xfa>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
   1fa2c:	8c e0       	ldi	r24, 0x0C	; 12
   1fa2e:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
   1fa30:	8e e0       	ldi	r24, 0x0E	; 14
   1fa32:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
   1fa34:	09 b4       	in	r0, 0x29	; 41
   1fa36:	00 fe       	sbrs	r0, 0
   1fa38:	fd cf       	rjmp	.-6      	; 0x1fa34 <__vector_10+0xb2>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
   1fa3a:	80 91 d8 00 	lds	r24, 0x00D8
   1fa3e:	8f 7d       	andi	r24, 0xDF	; 223
   1fa40:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
   1fa44:	80 91 e1 00 	lds	r24, 0x00E1
   1fa48:	8f 7e       	andi	r24, 0xEF	; 239
   1fa4a:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
   1fa4e:	80 91 e2 00 	lds	r24, 0x00E2
   1fa52:	8f 7e       	andi	r24, 0xEF	; 239
   1fa54:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
   1fa58:	80 91 e2 00 	lds	r24, 0x00E2
   1fa5c:	81 60       	ori	r24, 0x01	; 1
   1fa5e:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
   1fa62:	80 91 75 01 	lds	r24, 0x0175
   1fa66:	88 23       	and	r24, r24
   1fa68:	31 f4       	brne	.+12     	; 0x1fa76 <__vector_10+0xf4>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
   1fa6a:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
   1fa6e:	87 fd       	sbrc	r24, 7
   1fa70:	02 c0       	rjmp	.+4      	; 0x1fa76 <__vector_10+0xf4>
   1fa72:	81 e0       	ldi	r24, 0x01	; 1
   1fa74:	01 c0       	rjmp	.+2      	; 0x1fa78 <__vector_10+0xf6>
   1fa76:	84 e0       	ldi	r24, 0x04	; 4
   1fa78:	8e bb       	out	0x1e, r24	; 30

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
   1fa7a:	41 d1       	rcall	.+642    	; 0x1fcfe <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
   1fa7c:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
   1fa80:	83 ff       	sbrs	r24, 3
   1fa82:	21 c0       	rjmp	.+66     	; 0x1fac6 <__vector_10+0x144>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
   1fa84:	80 91 e2 00 	lds	r24, 0x00E2
   1fa88:	83 ff       	sbrs	r24, 3
   1fa8a:	1d c0       	rjmp	.+58     	; 0x1fac6 <__vector_10+0x144>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
   1fa8c:	80 91 e1 00 	lds	r24, 0x00E1
   1fa90:	87 7f       	andi	r24, 0xF7	; 247
   1fa92:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
   1fa96:	82 e0       	ldi	r24, 0x02	; 2
   1fa98:	8e bb       	out	0x1e, r24	; 30
		USB_Device_ConfigurationNumber = 0;
   1fa9a:	10 92 75 01 	sts	0x0175, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
   1fa9e:	80 91 e1 00 	lds	r24, 0x00E1
   1faa2:	8e 7f       	andi	r24, 0xFE	; 254
   1faa4:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
   1faa8:	80 91 e2 00 	lds	r24, 0x00E2
   1faac:	8e 7f       	andi	r24, 0xFE	; 254
   1faae:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
   1fab2:	80 91 e2 00 	lds	r24, 0x00E2
   1fab6:	80 61       	ori	r24, 0x10	; 16
   1fab8:	80 93 e2 00 	sts	0x00E2, r24
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
   1fabc:	80 e0       	ldi	r24, 0x00	; 0
   1fabe:	60 e0       	ldi	r22, 0x00	; 0
   1fac0:	42 e2       	ldi	r20, 0x22	; 34
   1fac2:	bd de       	rcall	.-646    	; 0x1f83e <Endpoint_ConfigureEndpoint_Prv>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
   1fac4:	1c d1       	rcall	.+568    	; 0x1fcfe <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
   1fac6:	ff 91       	pop	r31
   1fac8:	ef 91       	pop	r30
   1faca:	bf 91       	pop	r27
   1facc:	af 91       	pop	r26
   1face:	9f 91       	pop	r25
   1fad0:	8f 91       	pop	r24
   1fad2:	7f 91       	pop	r23
   1fad4:	6f 91       	pop	r22
   1fad6:	5f 91       	pop	r21
   1fad8:	4f 91       	pop	r20
   1fada:	3f 91       	pop	r19
   1fadc:	2f 91       	pop	r18
   1fade:	0f 90       	pop	r0
   1fae0:	0b be       	out	0x3b, r0	; 59
   1fae2:	0f 90       	pop	r0
   1fae4:	0f be       	out	0x3f, r0	; 63
   1fae6:	0f 90       	pop	r0
   1fae8:	1f 90       	pop	r1
   1faea:	18 95       	reti

0001faec <Endpoint_Write_Control_Stream_LE>:
   1faec:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
   1faee:	40 91 7d 01 	lds	r20, 0x017D
   1faf2:	50 91 7e 01 	lds	r21, 0x017E
   1faf6:	46 17       	cp	r20, r22
   1faf8:	57 07       	cpc	r21, r23
   1fafa:	18 f4       	brcc	.+6      	; 0x1fb02 <Endpoint_Write_Control_Stream_LE+0x16>
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
   1fafc:	f9 01       	movw	r30, r18
   1fafe:	90 e0       	ldi	r25, 0x00	; 0
   1fb00:	3c c0       	rjmp	.+120    	; 0x1fb7a <Endpoint_Write_Control_Stream_LE+0x8e>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
   1fb02:	61 15       	cp	r22, r1
   1fb04:	71 05       	cpc	r23, r1
   1fb06:	11 f0       	breq	.+4      	; 0x1fb0c <Endpoint_Write_Control_Stream_LE+0x20>
   1fb08:	ab 01       	movw	r20, r22
   1fb0a:	f8 cf       	rjmp	.-16     	; 0x1fafc <Endpoint_Write_Control_Stream_LE+0x10>
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
				#else
					UEINTX &= ~(1 << TXINI);
   1fb0c:	80 91 e8 00 	lds	r24, 0x00E8
   1fb10:	8e 7f       	andi	r24, 0xFE	; 254
   1fb12:	80 93 e8 00 	sts	0x00E8, r24
   1fb16:	40 e0       	ldi	r20, 0x00	; 0
   1fb18:	50 e0       	ldi	r21, 0x00	; 0
   1fb1a:	f0 cf       	rjmp	.-32     	; 0x1fafc <Endpoint_Write_Control_Stream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
   1fb1c:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
   1fb1e:	88 23       	and	r24, r24
   1fb20:	e9 f1       	breq	.+122    	; 0x1fb9c <Endpoint_Write_Control_Stream_LE+0xb0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
   1fb22:	85 30       	cpi	r24, 0x05	; 5
   1fb24:	e9 f1       	breq	.+122    	; 0x1fba0 <Endpoint_Write_Control_Stream_LE+0xb4>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
   1fb26:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
   1fb2a:	83 ff       	sbrs	r24, 3
   1fb2c:	02 c0       	rjmp	.+4      	; 0x1fb32 <Endpoint_Write_Control_Stream_LE+0x46>
   1fb2e:	81 e0       	ldi	r24, 0x01	; 1
   1fb30:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
   1fb32:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
   1fb36:	82 fd       	sbrc	r24, 2
   1fb38:	2b c0       	rjmp	.+86     	; 0x1fb90 <Endpoint_Write_Control_Stream_LE+0xa4>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
   1fb3a:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
   1fb3e:	80 ff       	sbrs	r24, 0
   1fb40:	1c c0       	rjmp	.+56     	; 0x1fb7a <Endpoint_Write_Control_Stream_LE+0x8e>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
   1fb42:	20 91 f2 00 	lds	r18, 0x00F2
   1fb46:	30 91 f3 00 	lds	r19, 0x00F3
   1fb4a:	07 c0       	rjmp	.+14     	; 0x1fb5a <Endpoint_Write_Control_Stream_LE+0x6e>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
   1fb4c:	81 91       	ld	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
   1fb4e:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
   1fb52:	41 50       	subi	r20, 0x01	; 1
   1fb54:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
   1fb56:	2f 5f       	subi	r18, 0xFF	; 255
   1fb58:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
   1fb5a:	41 15       	cp	r20, r1
   1fb5c:	51 05       	cpc	r21, r1
   1fb5e:	19 f0       	breq	.+6      	; 0x1fb66 <Endpoint_Write_Control_Stream_LE+0x7a>
   1fb60:	20 32       	cpi	r18, 0x20	; 32
   1fb62:	31 05       	cpc	r19, r1
   1fb64:	98 f3       	brcs	.-26     	; 0x1fb4c <Endpoint_Write_Control_Stream_LE+0x60>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
   1fb66:	90 e0       	ldi	r25, 0x00	; 0
   1fb68:	20 32       	cpi	r18, 0x20	; 32
   1fb6a:	31 05       	cpc	r19, r1
   1fb6c:	09 f4       	brne	.+2      	; 0x1fb70 <Endpoint_Write_Control_Stream_LE+0x84>
   1fb6e:	91 e0       	ldi	r25, 0x01	; 1
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
				#else
					UEINTX &= ~(1 << TXINI);
   1fb70:	80 91 e8 00 	lds	r24, 0x00E8
   1fb74:	8e 7f       	andi	r24, 0xFE	; 254
   1fb76:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
   1fb7a:	41 15       	cp	r20, r1
   1fb7c:	51 05       	cpc	r21, r1
   1fb7e:	71 f6       	brne	.-100    	; 0x1fb1c <Endpoint_Write_Control_Stream_LE+0x30>
   1fb80:	99 23       	and	r25, r25
   1fb82:	61 f6       	brne	.-104    	; 0x1fb1c <Endpoint_Write_Control_Stream_LE+0x30>
   1fb84:	05 c0       	rjmp	.+10     	; 0x1fb90 <Endpoint_Write_Control_Stream_LE+0xa4>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
   1fb86:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
   1fb88:	88 23       	and	r24, r24
   1fb8a:	41 f0       	breq	.+16     	; 0x1fb9c <Endpoint_Write_Control_Stream_LE+0xb0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
   1fb8c:	85 30       	cpi	r24, 0x05	; 5
   1fb8e:	41 f0       	breq	.+16     	; 0x1fba0 <Endpoint_Write_Control_Stream_LE+0xb4>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
   1fb90:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
   1fb94:	82 ff       	sbrs	r24, 2
   1fb96:	f7 cf       	rjmp	.-18     	; 0x1fb86 <Endpoint_Write_Control_Stream_LE+0x9a>
   1fb98:	80 e0       	ldi	r24, 0x00	; 0
   1fb9a:	08 95       	ret
   1fb9c:	82 e0       	ldi	r24, 0x02	; 2
   1fb9e:	08 95       	ret
   1fba0:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
   1fba2:	08 95       	ret

0001fba4 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
   1fba4:	0f 93       	push	r16
   1fba6:	1f 93       	push	r17
   1fba8:	df 93       	push	r29
   1fbaa:	cf 93       	push	r28
   1fbac:	00 d0       	rcall	.+0      	; 0x1fbae <USB_Device_ProcessControlRequest+0xa>
   1fbae:	cd b7       	in	r28, 0x3d	; 61
   1fbb0:	de b7       	in	r29, 0x3e	; 62
   1fbb2:	e7 e7       	ldi	r30, 0x77	; 119
   1fbb4:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
   1fbb6:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
   1fbba:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
   1fbbc:	81 e0       	ldi	r24, 0x01	; 1
   1fbbe:	ef 37       	cpi	r30, 0x7F	; 127
   1fbc0:	f8 07       	cpc	r31, r24
   1fbc2:	c9 f7       	brne	.-14     	; 0x1fbb6 <USB_Device_ProcessControlRequest+0x12>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
   1fbc4:	cc db       	rcall	.-2152   	; 0x1f35e <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
   1fbc6:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
   1fbca:	83 ff       	sbrs	r24, 3
   1fbcc:	83 c0       	rjmp	.+262    	; 0x1fcd4 <USB_Device_ProcessControlRequest+0x130>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
   1fbce:	90 91 77 01 	lds	r25, 0x0177

		switch (USB_ControlRequest.bRequest)
   1fbd2:	80 91 78 01 	lds	r24, 0x0178
   1fbd6:	86 30       	cpi	r24, 0x06	; 6
   1fbd8:	81 f1       	breq	.+96     	; 0x1fc3a <USB_Device_ProcessControlRequest+0x96>
   1fbda:	87 30       	cpi	r24, 0x07	; 7
   1fbdc:	20 f4       	brcc	.+8      	; 0x1fbe6 <USB_Device_ProcessControlRequest+0x42>
   1fbde:	85 30       	cpi	r24, 0x05	; 5
   1fbe0:	09 f0       	breq	.+2      	; 0x1fbe4 <USB_Device_ProcessControlRequest+0x40>
   1fbe2:	78 c0       	rjmp	.+240    	; 0x1fcd4 <USB_Device_ProcessControlRequest+0x130>
   1fbe4:	07 c0       	rjmp	.+14     	; 0x1fbf4 <USB_Device_ProcessControlRequest+0x50>
   1fbe6:	88 30       	cpi	r24, 0x08	; 8
   1fbe8:	09 f4       	brne	.+2      	; 0x1fbec <USB_Device_ProcessControlRequest+0x48>
   1fbea:	47 c0       	rjmp	.+142    	; 0x1fc7a <USB_Device_ProcessControlRequest+0xd6>
   1fbec:	89 30       	cpi	r24, 0x09	; 9
   1fbee:	09 f0       	breq	.+2      	; 0x1fbf2 <USB_Device_ProcessControlRequest+0x4e>
   1fbf0:	71 c0       	rjmp	.+226    	; 0x1fcd4 <USB_Device_ProcessControlRequest+0x130>
   1fbf2:	55 c0       	rjmp	.+170    	; 0x1fc9e <USB_Device_ProcessControlRequest+0xfa>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
   1fbf4:	99 23       	and	r25, r25
   1fbf6:	09 f0       	breq	.+2      	; 0x1fbfa <USB_Device_ProcessControlRequest+0x56>
   1fbf8:	6d c0       	rjmp	.+218    	; 0x1fcd4 <USB_Device_ProcessControlRequest+0x130>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t    DeviceAddress    = (USB_ControlRequest.wValue & 0x7F);
   1fbfa:	10 91 79 01 	lds	r17, 0x0179
   1fbfe:	1f 77       	andi	r17, 0x7F	; 127
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
   1fc00:	0f b7       	in	r16, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
   1fc02:	f8 94       	cli
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1fc04:	80 91 e8 00 	lds	r24, 0x00E8
   1fc08:	87 7f       	andi	r24, 0xF7	; 247
   1fc0a:	80 93 e8 00 	sts	0x00E8, r24
	uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
	GlobalInterruptDisable();
				
	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
   1fc0e:	28 de       	rcall	.-944    	; 0x1f860 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
   1fc10:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
   1fc14:	80 ff       	sbrs	r24, 0
   1fc16:	fc cf       	rjmp	.-8      	; 0x1fc10 <USB_Device_ProcessControlRequest+0x6c>
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				uint8_t Temp = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
   1fc18:	80 91 e3 00 	lds	r24, 0x00E3
   1fc1c:	80 78       	andi	r24, 0x80	; 128
   1fc1e:	81 2b       	or	r24, r17

				UDADDR = Temp;
   1fc20:	80 93 e3 00 	sts	0x00E3, r24
				UDADDR = Temp | (1 << ADDEN);
   1fc24:	80 68       	ori	r24, 0x80	; 128
   1fc26:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_SetDeviceAddress(DeviceAddress);
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
   1fc2a:	11 23       	and	r17, r17
   1fc2c:	11 f4       	brne	.+4      	; 0x1fc32 <USB_Device_ProcessControlRequest+0x8e>
   1fc2e:	82 e0       	ldi	r24, 0x02	; 2
   1fc30:	01 c0       	rjmp	.+2      	; 0x1fc34 <USB_Device_ProcessControlRequest+0x90>
   1fc32:	83 e0       	ldi	r24, 0x03	; 3
   1fc34:	8e bb       	out	0x1e, r24	; 30
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
   1fc36:	0f bf       	out	0x3f, r16	; 63
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;				
				#endif
				
				GCC_MEMORY_BARRIER();
   1fc38:	4d c0       	rjmp	.+154    	; 0x1fcd4 <USB_Device_ProcessControlRequest+0x130>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
   1fc3a:	90 58       	subi	r25, 0x80	; 128
   1fc3c:	92 30       	cpi	r25, 0x02	; 2
   1fc3e:	08 f0       	brcs	.+2      	; 0x1fc42 <USB_Device_ProcessControlRequest+0x9e>
   1fc40:	49 c0       	rjmp	.+146    	; 0x1fcd4 <USB_Device_ProcessControlRequest+0x130>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
   1fc42:	80 91 79 01 	lds	r24, 0x0179
   1fc46:	90 91 7a 01 	lds	r25, 0x017A
   1fc4a:	60 91 7b 01 	lds	r22, 0x017B
   1fc4e:	ae 01       	movw	r20, r28
   1fc50:	4f 5f       	subi	r20, 0xFF	; 255
   1fc52:	5f 4f       	sbci	r21, 0xFF	; 255
   1fc54:	cf dd       	rcall	.-1122   	; 0x1f7f4 <CALLBACK_USB_GetDescriptor>
   1fc56:	bc 01       	movw	r22, r24
   1fc58:	00 97       	sbiw	r24, 0x00	; 0
   1fc5a:	09 f4       	brne	.+2      	; 0x1fc5e <USB_Device_ProcessControlRequest+0xba>
   1fc5c:	3b c0       	rjmp	.+118    	; 0x1fcd4 <USB_Device_ProcessControlRequest+0x130>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1fc5e:	80 91 e8 00 	lds	r24, 0x00E8
   1fc62:	87 7f       	andi	r24, 0xF7	; 247
   1fc64:	80 93 e8 00 	sts	0x00E8, r24
	}

	Endpoint_ClearSETUP();

	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
   1fc68:	89 81       	ldd	r24, Y+1	; 0x01
   1fc6a:	9a 81       	ldd	r25, Y+2	; 0x02
   1fc6c:	3f df       	rcall	.-386    	; 0x1faec <Endpoint_Write_Control_Stream_LE>
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
				#else
					UEINTX &= ~(1 << RXOUTI);
   1fc6e:	80 91 e8 00 	lds	r24, 0x00E8
   1fc72:	8b 7f       	andi	r24, 0xFB	; 251
   1fc74:	80 93 e8 00 	sts	0x00E8, r24
   1fc78:	2d c0       	rjmp	.+90     	; 0x1fcd4 <USB_Device_ProcessControlRequest+0x130>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
   1fc7a:	90 38       	cpi	r25, 0x80	; 128
   1fc7c:	59 f5       	brne	.+86     	; 0x1fcd4 <USB_Device_ProcessControlRequest+0x130>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1fc7e:	80 91 e8 00 	lds	r24, 0x00E8
   1fc82:	87 7f       	andi	r24, 0xF7	; 247
   1fc84:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
   1fc88:	80 91 75 01 	lds	r24, 0x0175
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
   1fc8c:	80 93 f1 00 	sts	0x00F1, r24
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
				#else
					UEINTX &= ~(1 << TXINI);
   1fc90:	80 91 e8 00 	lds	r24, 0x00E8
   1fc94:	8e 7f       	andi	r24, 0xFE	; 254
   1fc96:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
   1fc9a:	e2 dd       	rcall	.-1084   	; 0x1f860 <Endpoint_ClearStatusStage>
   1fc9c:	1b c0       	rjmp	.+54     	; 0x1fcd4 <USB_Device_ProcessControlRequest+0x130>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
   1fc9e:	99 23       	and	r25, r25
   1fca0:	c9 f4       	brne	.+50     	; 0x1fcd4 <USB_Device_ProcessControlRequest+0x130>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
   1fca2:	90 91 79 01 	lds	r25, 0x0179
   1fca6:	92 30       	cpi	r25, 0x02	; 2
   1fca8:	a8 f4       	brcc	.+42     	; 0x1fcd4 <USB_Device_ProcessControlRequest+0x130>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1fcaa:	80 91 e8 00 	lds	r24, 0x00E8
   1fcae:	87 7f       	andi	r24, 0xF7	; 247
   1fcb0:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
   1fcb4:	90 93 75 01 	sts	0x0175, r25

	Endpoint_ClearStatusStage();
   1fcb8:	d3 dd       	rcall	.-1114   	; 0x1f860 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
   1fcba:	80 91 75 01 	lds	r24, 0x0175
   1fcbe:	88 23       	and	r24, r24
   1fcc0:	31 f4       	brne	.+12     	; 0x1fcce <USB_Device_ProcessControlRequest+0x12a>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
   1fcc2:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
   1fcc6:	87 fd       	sbrc	r24, 7
   1fcc8:	02 c0       	rjmp	.+4      	; 0x1fcce <USB_Device_ProcessControlRequest+0x12a>
   1fcca:	81 e0       	ldi	r24, 0x01	; 1
   1fccc:	01 c0       	rjmp	.+2      	; 0x1fcd0 <USB_Device_ProcessControlRequest+0x12c>
   1fcce:	84 e0       	ldi	r24, 0x04	; 4
   1fcd0:	8e bb       	out	0x1e, r24	; 30

	EVENT_USB_Device_ConfigurationChanged();
   1fcd2:	15 d0       	rcall	.+42     	; 0x1fcfe <USB_Event_Stub>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
   1fcd4:	80 91 e8 00 	lds	r24, 0x00E8

				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
   1fcd8:	83 ff       	sbrs	r24, 3
   1fcda:	0a c0       	rjmp	.+20     	; 0x1fcf0 <USB_Device_ProcessControlRequest+0x14c>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
   1fcdc:	80 91 eb 00 	lds	r24, 0x00EB
   1fce0:	80 62       	ori	r24, 0x20	; 32
   1fce2:	80 93 eb 00 	sts	0x00EB, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1fce6:	80 91 e8 00 	lds	r24, 0x00E8
   1fcea:	87 7f       	andi	r24, 0xF7	; 247
   1fcec:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_StallTransaction();
		Endpoint_ClearSETUP();
	}
}
   1fcf0:	0f 90       	pop	r0
   1fcf2:	0f 90       	pop	r0
   1fcf4:	cf 91       	pop	r28
   1fcf6:	df 91       	pop	r29
   1fcf8:	1f 91       	pop	r17
   1fcfa:	0f 91       	pop	r16
   1fcfc:	08 95       	ret

0001fcfe <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
   1fcfe:	08 95       	ret

0001fd00 <USB_USBTask>:
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
   1fd00:	8e b3       	in	r24, 0x1e	; 30
   1fd02:	88 23       	and	r24, r24
   1fd04:	29 f0       	breq	.+10     	; 0x1fd10 <USB_USBTask+0x10>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
   1fd06:	80 91 e8 00 	lds	r24, 0x00E8
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
   1fd0a:	83 ff       	sbrs	r24, 3
   1fd0c:	01 c0       	rjmp	.+2      	; 0x1fd10 <USB_USBTask+0x10>
		  USB_Device_ProcessControlRequest();
   1fd0e:	4a cf       	rjmp	.-364    	; 0x1fba4 <USB_Device_ProcessControlRequest>
   1fd10:	08 95       	ret

0001fd12 <__eerd_byte_usb1287>:
   1fd12:	f9 99       	sbic	0x1f, 1	; 31
   1fd14:	fe cf       	rjmp	.-4      	; 0x1fd12 <__eerd_byte_usb1287>
   1fd16:	92 bd       	out	0x22, r25	; 34
   1fd18:	81 bd       	out	0x21, r24	; 33
   1fd1a:	f8 9a       	sbi	0x1f, 0	; 31
   1fd1c:	99 27       	eor	r25, r25
   1fd1e:	80 b5       	in	r24, 0x20	; 32
   1fd20:	08 95       	ret

0001fd22 <__eewr_byte_usb1287>:
   1fd22:	26 2f       	mov	r18, r22

0001fd24 <__eewr_r18_usb1287>:
   1fd24:	f9 99       	sbic	0x1f, 1	; 31
   1fd26:	fe cf       	rjmp	.-4      	; 0x1fd24 <__eewr_r18_usb1287>
   1fd28:	1f ba       	out	0x1f, r1	; 31
   1fd2a:	92 bd       	out	0x22, r25	; 34
   1fd2c:	81 bd       	out	0x21, r24	; 33
   1fd2e:	20 bd       	out	0x20, r18	; 32
   1fd30:	0f b6       	in	r0, 0x3f	; 63
   1fd32:	f8 94       	cli
   1fd34:	fa 9a       	sbi	0x1f, 2	; 31
   1fd36:	f9 9a       	sbi	0x1f, 1	; 31
   1fd38:	0f be       	out	0x3f, r0	; 63
   1fd3a:	01 96       	adiw	r24, 0x01	; 1
   1fd3c:	08 95       	ret

0001fd3e <_exit>:
   1fd3e:	f8 94       	cli

0001fd40 <__stop_program>:
   1fd40:	ff cf       	rjmp	.-2      	; 0x1fd40 <__stop_program>
