
BootloaderHID.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004a  00800100  0001f7d4  00000868  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007d4  0001f000  0001f000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  0080014a  0080014a  000008b2  2**0
                  ALLOC
  3 .debug_aranges 000002a8  00000000  00000000  000008b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000716  00000000  00000000  00000b5a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000040da  00000000  00000000  00001270  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001085  00000000  00000000  0000534a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000390a  00000000  00000000  000063cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003d0  00000000  00000000  00009cdc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00001d6c  00000000  00000000  0000a0ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00002399  00000000  00000000  0000be18  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000002e8  00000000  00000000  0000e1b1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0001f000 <__vectors>:
	return true;
#endif
}

void Endpoint_ClearEndpoints(void)
{
   1f000:	4b c0       	rjmp	.+150    	; 0x1f098 <__ctors_end>
	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
}
   1f002:	00 00       	nop

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
   1f004:	66 c0       	rjmp	.+204    	; 0x1f0d2 <__bad_interrupt>
   1f006:	00 00       	nop
   1f008:	64 c0       	rjmp	.+200    	; 0x1f0d2 <__bad_interrupt>
   1f00a:	00 00       	nop
   1f00c:	62 c0       	rjmp	.+196    	; 0x1f0d2 <__bad_interrupt>
   1f00e:	00 00       	nop
   1f010:	60 c0       	rjmp	.+192    	; 0x1f0d2 <__bad_interrupt>
   1f012:	00 00       	nop
   1f014:	5e c0       	rjmp	.+188    	; 0x1f0d2 <__bad_interrupt>
   1f016:	00 00       	nop
   1f018:	5c c0       	rjmp	.+184    	; 0x1f0d2 <__bad_interrupt>
   1f01a:	00 00       	nop
   1f01c:	5a c0       	rjmp	.+180    	; 0x1f0d2 <__bad_interrupt>
   1f01e:	00 00       	nop
   1f020:	58 c0       	rjmp	.+176    	; 0x1f0d2 <__bad_interrupt>
   1f022:	00 00       	nop
   1f024:	56 c0       	rjmp	.+172    	; 0x1f0d2 <__bad_interrupt>
   1f026:	00 00       	nop
   1f028:	a1 c1       	rjmp	.+834    	; 0x1f36c <__vector_10>
   1f02a:	00 00       	nop
   1f02c:	52 c0       	rjmp	.+164    	; 0x1f0d2 <__bad_interrupt>
   1f02e:	00 00       	nop
   1f030:	50 c0       	rjmp	.+160    	; 0x1f0d2 <__bad_interrupt>
   1f032:	00 00       	nop
   1f034:	4e c0       	rjmp	.+156    	; 0x1f0d2 <__bad_interrupt>
   1f036:	00 00       	nop
   1f038:	4c c0       	rjmp	.+152    	; 0x1f0d2 <__bad_interrupt>
   1f03a:	00 00       	nop
   1f03c:	4a c0       	rjmp	.+148    	; 0x1f0d2 <__bad_interrupt>
   1f03e:	00 00       	nop
   1f040:	48 c0       	rjmp	.+144    	; 0x1f0d2 <__bad_interrupt>
   1f042:	00 00       	nop
   1f044:	46 c0       	rjmp	.+140    	; 0x1f0d2 <__bad_interrupt>
   1f046:	00 00       	nop
   1f048:	44 c0       	rjmp	.+136    	; 0x1f0d2 <__bad_interrupt>
   1f04a:	00 00       	nop
   1f04c:	42 c0       	rjmp	.+132    	; 0x1f0d2 <__bad_interrupt>
   1f04e:	00 00       	nop
   1f050:	40 c0       	rjmp	.+128    	; 0x1f0d2 <__bad_interrupt>
   1f052:	00 00       	nop
   1f054:	3e c0       	rjmp	.+124    	; 0x1f0d2 <__bad_interrupt>
   1f056:	00 00       	nop
   1f058:	3c c0       	rjmp	.+120    	; 0x1f0d2 <__bad_interrupt>
   1f05a:	00 00       	nop
   1f05c:	3a c0       	rjmp	.+116    	; 0x1f0d2 <__bad_interrupt>
   1f05e:	00 00       	nop
   1f060:	38 c0       	rjmp	.+112    	; 0x1f0d2 <__bad_interrupt>
   1f062:	00 00       	nop
   1f064:	36 c0       	rjmp	.+108    	; 0x1f0d2 <__bad_interrupt>
   1f066:	00 00       	nop
   1f068:	34 c0       	rjmp	.+104    	; 0x1f0d2 <__bad_interrupt>
   1f06a:	00 00       	nop
   1f06c:	32 c0       	rjmp	.+100    	; 0x1f0d2 <__bad_interrupt>
   1f06e:	00 00       	nop
   1f070:	30 c0       	rjmp	.+96     	; 0x1f0d2 <__bad_interrupt>
   1f072:	00 00       	nop
   1f074:	2e c0       	rjmp	.+92     	; 0x1f0d2 <__bad_interrupt>
   1f076:	00 00       	nop
   1f078:	2c c0       	rjmp	.+88     	; 0x1f0d2 <__bad_interrupt>
   1f07a:	00 00       	nop
   1f07c:	2a c0       	rjmp	.+84     	; 0x1f0d2 <__bad_interrupt>
   1f07e:	00 00       	nop
   1f080:	28 c0       	rjmp	.+80     	; 0x1f0d2 <__bad_interrupt>
   1f082:	00 00       	nop
   1f084:	26 c0       	rjmp	.+76     	; 0x1f0d2 <__bad_interrupt>
   1f086:	00 00       	nop
   1f088:	24 c0       	rjmp	.+72     	; 0x1f0d2 <__bad_interrupt>
   1f08a:	00 00       	nop
   1f08c:	22 c0       	rjmp	.+68     	; 0x1f0d2 <__bad_interrupt>
   1f08e:	00 00       	nop
   1f090:	20 c0       	rjmp	.+64     	; 0x1f0d2 <__bad_interrupt>
   1f092:	00 00       	nop
   1f094:	1e c0       	rjmp	.+60     	; 0x1f0d2 <__bad_interrupt>
   1f096:	00 00       	nop

0001f098 <__ctors_end>:
   1f098:	11 24       	eor	r1, r1
   1f09a:	1f be       	out	0x3f, r1	; 63
   1f09c:	cf ef       	ldi	r28, 0xFF	; 255
   1f09e:	d0 e2       	ldi	r29, 0x20	; 32
   1f0a0:	de bf       	out	0x3e, r29	; 62
   1f0a2:	cd bf       	out	0x3d, r28	; 61

0001f0a4 <__do_copy_data>:
   1f0a4:	11 e0       	ldi	r17, 0x01	; 1
   1f0a6:	a0 e0       	ldi	r26, 0x00	; 0
   1f0a8:	b1 e0       	ldi	r27, 0x01	; 1
   1f0aa:	e4 ed       	ldi	r30, 0xD4	; 212
   1f0ac:	f7 ef       	ldi	r31, 0xF7	; 247
   1f0ae:	01 e0       	ldi	r16, 0x01	; 1
   1f0b0:	0b bf       	out	0x3b, r16	; 59
   1f0b2:	02 c0       	rjmp	.+4      	; 0x1f0b8 <__do_copy_data+0x14>
   1f0b4:	07 90       	elpm	r0, Z+
   1f0b6:	0d 92       	st	X+, r0
   1f0b8:	aa 34       	cpi	r26, 0x4A	; 74
   1f0ba:	b1 07       	cpc	r27, r17
   1f0bc:	d9 f7       	brne	.-10     	; 0x1f0b4 <__do_copy_data+0x10>

0001f0be <__do_clear_bss>:
   1f0be:	11 e0       	ldi	r17, 0x01	; 1
   1f0c0:	aa e4       	ldi	r26, 0x4A	; 74
   1f0c2:	b1 e0       	ldi	r27, 0x01	; 1
   1f0c4:	01 c0       	rjmp	.+2      	; 0x1f0c8 <.do_clear_bss_start>

0001f0c6 <.do_clear_bss_loop>:
   1f0c6:	1d 92       	st	X+, r1

0001f0c8 <.do_clear_bss_start>:
   1f0c8:	a4 35       	cpi	r26, 0x54	; 84
   1f0ca:	b1 07       	cpc	r27, r17
   1f0cc:	e1 f7       	brne	.-8      	; 0x1f0c6 <.do_clear_bss_loop>
   1f0ce:	8b d0       	rcall	.+278    	; 0x1f1e6 <main>
   1f0d0:	7f c3       	rjmp	.+1790   	; 0x1f7d0 <_exit>

0001f0d2 <__bad_interrupt>:
   1f0d2:	96 cf       	rjmp	.-212    	; 0x1f000 <__vectors>

0001f0d4 <EVENT_USB_Device_ControlRequest>:
/** Event handler for the USB_ControlRequest event. This is used to catch and process control requests sent to
 *  the device from the USB host before passing along unhandled control requests to the library for processing
 *  internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
   1f0d4:	0f 93       	push	r16
   1f0d6:	1f 93       	push	r17
	/* Ignore any requests that aren't directed to the HID interface */
	if ((USB_ControlRequest.bmRequestType & (CONTROL_REQTYPE_TYPE | CONTROL_REQTYPE_RECIPIENT)) !=
   1f0d8:	80 91 4c 01 	lds	r24, 0x014C
   1f0dc:	8f 77       	andi	r24, 0x7F	; 127
   1f0de:	81 32       	cpi	r24, 0x21	; 33
   1f0e0:	09 f0       	breq	.+2      	; 0x1f0e4 <EVENT_USB_Device_ControlRequest+0x10>
   1f0e2:	6a c0       	rjmp	.+212    	; 0x1f1b8 <EVENT_USB_Device_ControlRequest+0xe4>
	{
		return;
	}

	/* Process HID specific control requests */
	switch (USB_ControlRequest.bRequest)
   1f0e4:	80 91 4d 01 	lds	r24, 0x014D
   1f0e8:	89 30       	cpi	r24, 0x09	; 9
   1f0ea:	09 f0       	breq	.+2      	; 0x1f0ee <EVENT_USB_Device_ControlRequest+0x1a>
   1f0ec:	65 c0       	rjmp	.+202    	; 0x1f1b8 <EVENT_USB_Device_ControlRequest+0xe4>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1f0ee:	80 91 e8 00 	lds	r24, 0x00E8
   1f0f2:	87 7f       	andi	r24, 0xF7	; 247
   1f0f4:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
   1f0f8:	80 91 e8 00 	lds	r24, 0x00E8
	{
		case HID_REQ_SetReport:
			Endpoint_ClearSETUP();
			
			/* Wait until the command has been sent by the host */
			while (!(Endpoint_IsOUTReceived()));
   1f0fc:	82 ff       	sbrs	r24, 2
   1f0fe:	fc cf       	rjmp	.-8      	; 0x1f0f8 <EVENT_USB_Device_ControlRequest+0x24>
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[0] = UEDATX;
   1f100:	80 91 f1 00 	lds	r24, 0x00F1
   1f104:	28 2f       	mov	r18, r24
				Data.Bytes[1] = UEDATX;
   1f106:	80 91 f1 00 	lds	r24, 0x00F1
   1f10a:	38 2f       	mov	r19, r24
		
			/* Read in the write destination address */
			#if (FLASHEND > 0xFFFF)
			uint32_t PageAddress = ((uint32_t)Endpoint_Read_16_LE() << 8);
   1f10c:	40 e0       	ldi	r20, 0x00	; 0
   1f10e:	50 e0       	ldi	r21, 0x00	; 0
			uint16_t PageAddress = Endpoint_Read_16_LE();
			#endif
			
			/* Check if the command is a program page command, or a start application command */
			#if (FLASHEND > 0xFFFF)
			if ((uint16_t)(PageAddress >> 8) == COMMAND_STARTAPPLICATION)
   1f110:	74 2f       	mov	r23, r20
   1f112:	63 2f       	mov	r22, r19
   1f114:	52 2f       	mov	r21, r18
   1f116:	44 27       	eor	r20, r20
   1f118:	2f 5f       	subi	r18, 0xFF	; 255
   1f11a:	3f 4f       	sbci	r19, 0xFF	; 255
   1f11c:	19 f4       	brne	.+6      	; 0x1f124 <EVENT_USB_Device_ControlRequest+0x50>
			#else
			if (PageAddress == COMMAND_STARTAPPLICATION)
			#endif
			{
				RunBootloader = false;
   1f11e:	10 92 00 01 	sts	0x0100, r1
   1f122:	44 c0       	rjmp	.+136    	; 0x1f1ac <EVENT_USB_Device_ControlRequest+0xd8>
			}
			else
			{
				/* Erase the given FLASH page, ready to be programmed */
				boot_page_erase(PageAddress);
   1f124:	83 e0       	ldi	r24, 0x03	; 3
   1f126:	fa 01       	movw	r30, r20
   1f128:	60 93 5b 00 	sts	0x005B, r22
   1f12c:	80 93 57 00 	sts	0x0057, r24
   1f130:	e8 95       	spm
				boot_spm_busy_wait();
   1f132:	07 b6       	in	r0, 0x37	; 55
   1f134:	00 fc       	sbrc	r0, 0
   1f136:	fd cf       	rjmp	.-6      	; 0x1f132 <EVENT_USB_Device_ControlRequest+0x5e>
   1f138:	10 e0       	ldi	r17, 0x00	; 0
						Endpoint_ClearOUT();
						while (!(Endpoint_IsOUTReceived()));
					}

					/* Write the next data word to the FLASH page */
					boot_page_fill(PageAddress + ((uint16_t)PageWord << 1), Endpoint_Read_16_LE());
   1f13a:	01 e0       	ldi	r16, 0x01	; 1
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
   1f13c:	80 91 f2 00 	lds	r24, 0x00F2
   1f140:	90 91 f3 00 	lds	r25, 0x00F3
				
				/* Write each of the FLASH page's bytes in sequence */
				for (uint8_t PageWord = 0; PageWord < (SPM_PAGESIZE / 2); PageWord++)				
				{
					/* Check if endpoint is empty - if so clear it and wait until ready for next packet */
					if (!(Endpoint_BytesInEndpoint()))
   1f144:	89 2b       	or	r24, r25
   1f146:	49 f4       	brne	.+18     	; 0x1f15a <EVENT_USB_Device_ControlRequest+0x86>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
   1f148:	80 91 e8 00 	lds	r24, 0x00E8
   1f14c:	8b 77       	andi	r24, 0x7B	; 123
   1f14e:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
   1f152:	80 91 e8 00 	lds	r24, 0x00E8
					{
						Endpoint_ClearOUT();
						while (!(Endpoint_IsOUTReceived()));
   1f156:	82 ff       	sbrs	r24, 2
   1f158:	fc cf       	rjmp	.-8      	; 0x1f152 <EVENT_USB_Device_ControlRequest+0x7e>
				{
					uint16_t Value;
					uint8_t  Bytes[2];
				} Data;

				Data.Bytes[0] = UEDATX;
   1f15a:	80 91 f1 00 	lds	r24, 0x00F1
   1f15e:	28 2f       	mov	r18, r24
				Data.Bytes[1] = UEDATX;
   1f160:	80 91 f1 00 	lds	r24, 0x00F1
   1f164:	38 2f       	mov	r19, r24
					}

					/* Write the next data word to the FLASH page */
					boot_page_fill(PageAddress + ((uint16_t)PageWord << 1), Endpoint_Read_16_LE());
   1f166:	81 2f       	mov	r24, r17
   1f168:	90 e0       	ldi	r25, 0x00	; 0
   1f16a:	88 0f       	add	r24, r24
   1f16c:	99 1f       	adc	r25, r25
   1f16e:	a0 e0       	ldi	r26, 0x00	; 0
   1f170:	b0 e0       	ldi	r27, 0x00	; 0
   1f172:	84 0f       	add	r24, r20
   1f174:	95 1f       	adc	r25, r21
   1f176:	a6 1f       	adc	r26, r22
   1f178:	b7 1f       	adc	r27, r23
   1f17a:	09 01       	movw	r0, r18
   1f17c:	fc 01       	movw	r30, r24
   1f17e:	a0 93 5b 00 	sts	0x005B, r26
   1f182:	00 93 57 00 	sts	0x0057, r16
   1f186:	e8 95       	spm
   1f188:	11 24       	eor	r1, r1
				/* Erase the given FLASH page, ready to be programmed */
				boot_page_erase(PageAddress);
				boot_spm_busy_wait();
				
				/* Write each of the FLASH page's bytes in sequence */
				for (uint8_t PageWord = 0; PageWord < (SPM_PAGESIZE / 2); PageWord++)				
   1f18a:	1f 5f       	subi	r17, 0xFF	; 255
   1f18c:	10 38       	cpi	r17, 0x80	; 128
   1f18e:	b1 f6       	brne	.-84     	; 0x1f13c <EVENT_USB_Device_ControlRequest+0x68>
					/* Write the next data word to the FLASH page */
					boot_page_fill(PageAddress + ((uint16_t)PageWord << 1), Endpoint_Read_16_LE());
				}

				/* Write the filled FLASH page to memory */
				boot_page_write(PageAddress);
   1f190:	85 e0       	ldi	r24, 0x05	; 5
   1f192:	fa 01       	movw	r30, r20
   1f194:	60 93 5b 00 	sts	0x005B, r22
   1f198:	80 93 57 00 	sts	0x0057, r24
   1f19c:	e8 95       	spm
				boot_spm_busy_wait();
   1f19e:	07 b6       	in	r0, 0x37	; 55
   1f1a0:	00 fc       	sbrc	r0, 0
   1f1a2:	fd cf       	rjmp	.-6      	; 0x1f19e <EVENT_USB_Device_ControlRequest+0xca>

				/* Re-enable RWW section */
				boot_rww_enable();
   1f1a4:	81 e1       	ldi	r24, 0x11	; 17
   1f1a6:	80 93 57 00 	sts	0x0057, r24
   1f1aa:	e8 95       	spm
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
   1f1ac:	80 91 e8 00 	lds	r24, 0x00E8
   1f1b0:	8b 77       	andi	r24, 0x7B	; 123
   1f1b2:	80 93 e8 00 	sts	0x00E8, r24
			}

			Endpoint_ClearOUT();

			Endpoint_ClearStatusStage();
   1f1b6:	61 d0       	rcall	.+194    	; 0x1f27a <Endpoint_ClearStatusStage>
			break;
	}
}
   1f1b8:	1f 91       	pop	r17
   1f1ba:	0f 91       	pop	r16
   1f1bc:	08 95       	ret

0001f1be <EVENT_USB_Device_ConfigurationChanged>:
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
   1f1be:	81 e0       	ldi	r24, 0x01	; 1
   1f1c0:	61 ec       	ldi	r22, 0xC1	; 193
   1f1c2:	42 e3       	ldi	r20, 0x32	; 50
{
	/* Setup HID Report Endpoint */
	Endpoint_ConfigureEndpoint(HID_IN_EPNUM, EP_TYPE_INTERRUPT,
		                       ENDPOINT_DIR_IN, HID_IN_EPSIZE,
	                           ENDPOINT_BANK_SINGLE);
}
   1f1c4:	47 c0       	rjmp	.+142    	; 0x1f254 <Endpoint_ConfigureEndpoint_Prv>

0001f1c6 <SetupHardware>:

/** Configures all hardware required for the bootloader. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
   1f1c6:	84 b7       	in	r24, 0x34	; 52
   1f1c8:	87 7f       	andi	r24, 0xF7	; 247
   1f1ca:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
   1f1cc:	88 e1       	ldi	r24, 0x18	; 24
   1f1ce:	0f b6       	in	r0, 0x3f	; 63
   1f1d0:	f8 94       	cli
   1f1d2:	80 93 60 00 	sts	0x0060, r24
   1f1d6:	10 92 60 00 	sts	0x0060, r1
   1f1da:	0f be       	out	0x3f, r0	; 63

	/* Relocate the interrupt vector table to the bootloader section */
	MCUCR = (1 << IVCE);
   1f1dc:	81 e0       	ldi	r24, 0x01	; 1
   1f1de:	85 bf       	out	0x35, r24	; 53
	MCUCR = (1 << IVSEL);
   1f1e0:	82 e0       	ldi	r24, 0x02	; 2
   1f1e2:	85 bf       	out	0x35, r24	; 53

	/* Initialize USB subsystem */
	USB_Init();
}
   1f1e4:	ad c0       	rjmp	.+346    	; 0x1f340 <USB_Init>

0001f1e6 <main>:
 *  runs the bootloader processing routine until instructed to soft-exit.
 */
int main(void)
{
	/* Setup hardware required for the bootloader */
	SetupHardware();
   1f1e6:	ef df       	rcall	.-34     	; 0x1f1c6 <SetupHardware>
	
	/* Enable global interrupts so that the USB stack can function */
	sei();
   1f1e8:	78 94       	sei
   1f1ea:	01 c0       	rjmp	.+2      	; 0x1f1ee <main+0x8>

	while (RunBootloader)
	  USB_USBTask();
   1f1ec:	df d2       	rcall	.+1470   	; 0x1f7ac <USB_USBTask>
	SetupHardware();
	
	/* Enable global interrupts so that the USB stack can function */
	sei();

	while (RunBootloader)
   1f1ee:	80 91 00 01 	lds	r24, 0x0100
   1f1f2:	88 23       	and	r24, r24
   1f1f4:	d9 f7       	brne	.-10     	; 0x1f1ec <main+0x6>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
   1f1f6:	80 91 e0 00 	lds	r24, 0x00E0
   1f1fa:	81 60       	ori	r24, 0x01	; 1
   1f1fc:	80 93 e0 00 	sts	0x00E0, r24
	
	/* Disconnect from the host - USB interface will be reset later along with the AVR */
	USB_Detach();

	/* Enable the watchdog and force a timeout to reset the AVR */
	wdt_enable(WDTO_250MS);
   1f200:	2c e0       	ldi	r18, 0x0C	; 12
   1f202:	88 e1       	ldi	r24, 0x18	; 24
   1f204:	90 e0       	ldi	r25, 0x00	; 0
   1f206:	0f b6       	in	r0, 0x3f	; 63
   1f208:	f8 94       	cli
   1f20a:	a8 95       	wdr
   1f20c:	80 93 60 00 	sts	0x0060, r24
   1f210:	0f be       	out	0x3f, r0	; 63
   1f212:	20 93 60 00 	sts	0x0060, r18
   1f216:	ff cf       	rjmp	.-2      	; 0x1f216 <main+0x30>

0001f218 <CALLBACK_USB_GetDescriptor>:
 *  USB host.
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
   1f218:	fa 01       	movw	r30, r20

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
	
	/* If/Else If chain compiles slightly smaller than a switch case */
	if (DescriptorType == DTYPE_Device)
   1f21a:	91 30       	cpi	r25, 0x01	; 1
   1f21c:	29 f4       	brne	.+10     	; 0x1f228 <CALLBACK_USB_GetDescriptor+0x10>
   1f21e:	86 e1       	ldi	r24, 0x16	; 22
   1f220:	91 e0       	ldi	r25, 0x01	; 1
   1f222:	22 e1       	ldi	r18, 0x12	; 18
   1f224:	30 e0       	ldi	r19, 0x00	; 0
   1f226:	12 c0       	rjmp	.+36     	; 0x1f24c <CALLBACK_USB_GetDescriptor+0x34>
	{
		Address = &DeviceDescriptor;
		Size    = sizeof(USB_Descriptor_Device_t);	
	}
	else if (DescriptorType == DTYPE_Configuration)
   1f228:	92 30       	cpi	r25, 0x02	; 2
   1f22a:	29 f4       	brne	.+10     	; 0x1f236 <CALLBACK_USB_GetDescriptor+0x1e>
   1f22c:	88 e2       	ldi	r24, 0x28	; 40
   1f22e:	91 e0       	ldi	r25, 0x01	; 1
   1f230:	22 e2       	ldi	r18, 0x22	; 34
   1f232:	30 e0       	ldi	r19, 0x00	; 0
   1f234:	0b c0       	rjmp	.+22     	; 0x1f24c <CALLBACK_USB_GetDescriptor+0x34>
	{
		Address = &ConfigurationDescriptor;
		Size    = sizeof(USB_Descriptor_Configuration_t);	
	}
	else if (DescriptorType == HID_DTYPE_HID)
   1f236:	91 32       	cpi	r25, 0x21	; 33
   1f238:	29 f0       	breq	.+10     	; 0x1f244 <CALLBACK_USB_GetDescriptor+0x2c>
   1f23a:	81 e0       	ldi	r24, 0x01	; 1
   1f23c:	91 e0       	ldi	r25, 0x01	; 1
   1f23e:	25 e1       	ldi	r18, 0x15	; 21
   1f240:	30 e0       	ldi	r19, 0x00	; 0
   1f242:	04 c0       	rjmp	.+8      	; 0x1f24c <CALLBACK_USB_GetDescriptor+0x34>
   1f244:	8a e3       	ldi	r24, 0x3A	; 58
   1f246:	91 e0       	ldi	r25, 0x01	; 1
   1f248:	29 e0       	ldi	r18, 0x09	; 9
   1f24a:	30 e0       	ldi	r19, 0x00	; 0
	{
		Address = &HIDReport;
		Size    = sizeof(HIDReport);
	}

	*DescriptorAddress = Address;
   1f24c:	91 83       	std	Z+1, r25	; 0x01
   1f24e:	80 83       	st	Z, r24
	return Size;
}
   1f250:	c9 01       	movw	r24, r18
   1f252:	08 95       	ret

0001f254 <Endpoint_ConfigureEndpoint_Prv>:
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
   1f254:	80 93 e9 00 	sts	0x00E9, r24
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
   1f258:	80 91 eb 00 	lds	r24, 0x00EB
   1f25c:	81 60       	ori	r24, 0x01	; 1
   1f25e:	80 93 eb 00 	sts	0x00EB, r24
{
#if defined(CONTROL_ONLY_DEVICE) || defined(ORDERED_EP_CONFIG)
	Endpoint_SelectEndpoint(Number);
	Endpoint_EnableEndpoint();

	UECFG1X = 0;
   1f262:	10 92 ed 00 	sts	0x00ED, r1
	UECFG0X = UECFG0XData;
   1f266:	60 93 ec 00 	sts	0x00EC, r22
	UECFG1X = UECFG1XData;
   1f26a:	40 93 ed 00 	sts	0x00ED, r20
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
   1f26e:	80 91 ee 00 	lds	r24, 0x00EE
	}
	
	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
   1f272:	88 1f       	adc	r24, r24
   1f274:	88 27       	eor	r24, r24
   1f276:	88 1f       	adc	r24, r24
   1f278:	08 95       	ret

0001f27a <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
   1f27a:	80 91 4c 01 	lds	r24, 0x014C
   1f27e:	88 23       	and	r24, r24
   1f280:	8c f4       	brge	.+34     	; 0x1f2a4 <Endpoint_ClearStatusStage+0x2a>
   1f282:	03 c0       	rjmp	.+6      	; 0x1f28a <Endpoint_ClearStatusStage+0x10>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
   1f284:	8e b3       	in	r24, 0x1e	; 30
   1f286:	88 23       	and	r24, r24
   1f288:	b1 f0       	breq	.+44     	; 0x1f2b6 <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
   1f28a:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
   1f28e:	82 ff       	sbrs	r24, 2
   1f290:	f9 cf       	rjmp	.-14     	; 0x1f284 <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
   1f292:	80 91 e8 00 	lds	r24, 0x00E8
   1f296:	8b 77       	andi	r24, 0x7B	; 123
   1f298:	80 93 e8 00 	sts	0x00E8, r24
   1f29c:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
   1f29e:	8e b3       	in	r24, 0x1e	; 30
   1f2a0:	88 23       	and	r24, r24
   1f2a2:	49 f0       	breq	.+18     	; 0x1f2b6 <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
   1f2a4:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
   1f2a8:	80 ff       	sbrs	r24, 0
   1f2aa:	f9 cf       	rjmp	.-14     	; 0x1f29e <Endpoint_ClearStatusStage+0x24>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
   1f2ac:	80 91 e8 00 	lds	r24, 0x00E8
   1f2b0:	8e 77       	andi	r24, 0x7E	; 126
   1f2b2:	80 93 e8 00 	sts	0x00E8, r24
   1f2b6:	08 95       	ret

0001f2b8 <USB_ResetInterface>:

void USB_ResetInterface(void)
{
   1f2b8:	ef 92       	push	r14
   1f2ba:	ff 92       	push	r15
   1f2bc:	0f 93       	push	r16
   1f2be:	1f 93       	push	r17
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
   1f2c0:	48 d0       	rcall	.+144    	; 0x1f352 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
   1f2c2:	4f d0       	rcall	.+158    	; 0x1f362 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
   1f2c4:	08 ed       	ldi	r16, 0xD8	; 216
   1f2c6:	10 e0       	ldi	r17, 0x00	; 0
   1f2c8:	f8 01       	movw	r30, r16
   1f2ca:	80 81       	ld	r24, Z
   1f2cc:	8f 77       	andi	r24, 0x7F	; 127
   1f2ce:	80 83       	st	Z, r24
				USBCON |=  (1 << USBE);
   1f2d0:	80 81       	ld	r24, Z
   1f2d2:	80 68       	ori	r24, 0x80	; 128
   1f2d4:	80 83       	st	Z, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
   1f2d6:	80 81       	ld	r24, Z
   1f2d8:	8f 7d       	andi	r24, 0xDF	; 223
   1f2da:	80 83       	st	Z, r24

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
   1f2dc:	e7 ed       	ldi	r30, 0xD7	; 215
   1f2de:	f0 e0       	ldi	r31, 0x00	; 0
   1f2e0:	80 81       	ld	r24, Z
   1f2e2:	80 68       	ori	r24, 0x80	; 128
   1f2e4:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
   1f2e6:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
   1f2e8:	1e ba       	out	0x1e, r1	; 30
	USB_Device_ConfigurationNumber  = 0;
   1f2ea:	10 92 4a 01 	sts	0x014A, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
   1f2ee:	80 ee       	ldi	r24, 0xE0	; 224
   1f2f0:	e8 2e       	mov	r14, r24
   1f2f2:	f1 2c       	mov	r15, r1
   1f2f4:	f7 01       	movw	r30, r14
   1f2f6:	80 81       	ld	r24, Z
   1f2f8:	8b 7f       	andi	r24, 0xFB	; 251
   1f2fa:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
   1f2fc:	f8 01       	movw	r30, r16
   1f2fe:	80 81       	ld	r24, Z
   1f300:	81 60       	ori	r24, 0x01	; 1
   1f302:	80 83       	st	Z, r24
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
   1f304:	80 e0       	ldi	r24, 0x00	; 0
   1f306:	60 e0       	ldi	r22, 0x00	; 0
   1f308:	42 e0       	ldi	r20, 0x02	; 2
   1f30a:	a4 df       	rcall	.-184    	; 0x1f254 <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
   1f30c:	e1 ee       	ldi	r30, 0xE1	; 225
   1f30e:	f0 e0       	ldi	r31, 0x00	; 0
   1f310:	80 81       	ld	r24, Z
   1f312:	8e 7f       	andi	r24, 0xFE	; 254
   1f314:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
   1f316:	e2 ee       	ldi	r30, 0xE2	; 226
   1f318:	f0 e0       	ldi	r31, 0x00	; 0
   1f31a:	80 81       	ld	r24, Z
   1f31c:	81 60       	ori	r24, 0x01	; 1
   1f31e:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
   1f320:	80 81       	ld	r24, Z
   1f322:	88 60       	ori	r24, 0x08	; 8
   1f324:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
   1f326:	f7 01       	movw	r30, r14
   1f328:	80 81       	ld	r24, Z
   1f32a:	8e 7f       	andi	r24, 0xFE	; 254
   1f32c:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
   1f32e:	f8 01       	movw	r30, r16
   1f330:	80 81       	ld	r24, Z
   1f332:	80 61       	ori	r24, 0x10	; 16
   1f334:	80 83       	st	Z, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
   1f336:	1f 91       	pop	r17
   1f338:	0f 91       	pop	r16
   1f33a:	ff 90       	pop	r15
   1f33c:	ef 90       	pop	r14
   1f33e:	08 95       	ret

0001f340 <USB_Init>:

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
   1f340:	e7 ed       	ldi	r30, 0xD7	; 215
   1f342:	f0 e0       	ldi	r31, 0x00	; 0
   1f344:	80 81       	ld	r24, Z
   1f346:	81 60       	ori	r24, 0x01	; 1
   1f348:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
   1f34a:	81 e0       	ldi	r24, 0x01	; 1
   1f34c:	80 93 4b 01 	sts	0x014B, r24

	USB_ResetInterface();
}
   1f350:	b3 cf       	rjmp	.-154    	; 0x1f2b8 <USB_ResetInterface>

0001f352 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
   1f352:	e8 ed       	ldi	r30, 0xD8	; 216
   1f354:	f0 e0       	ldi	r31, 0x00	; 0
   1f356:	80 81       	ld	r24, Z
   1f358:	8c 7f       	andi	r24, 0xFC	; 252
   1f35a:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
   1f35c:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
   1f360:	08 95       	ret

0001f362 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
   1f362:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
   1f366:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
   1f36a:	08 95       	ret

0001f36c <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
   1f36c:	1f 92       	push	r1
   1f36e:	0f 92       	push	r0
   1f370:	0f b6       	in	r0, 0x3f	; 63
   1f372:	0f 92       	push	r0
   1f374:	0b b6       	in	r0, 0x3b	; 59
   1f376:	0f 92       	push	r0
   1f378:	11 24       	eor	r1, r1
   1f37a:	2f 93       	push	r18
   1f37c:	3f 93       	push	r19
   1f37e:	4f 93       	push	r20
   1f380:	5f 93       	push	r21
   1f382:	6f 93       	push	r22
   1f384:	7f 93       	push	r23
   1f386:	8f 93       	push	r24
   1f388:	9f 93       	push	r25
   1f38a:	af 93       	push	r26
   1f38c:	bf 93       	push	r27
   1f38e:	ef 93       	push	r30
   1f390:	ff 93       	push	r31
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
   1f392:	80 91 da 00 	lds	r24, 0x00DA
		EVENT_USB_Device_StartOfFrame();
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
   1f396:	80 ff       	sbrs	r24, 0
   1f398:	1b c0       	rjmp	.+54     	; 0x1f3d0 <__vector_10+0x64>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
   1f39a:	80 91 d8 00 	lds	r24, 0x00D8
   1f39e:	80 ff       	sbrs	r24, 0
   1f3a0:	17 c0       	rjmp	.+46     	; 0x1f3d0 <__vector_10+0x64>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
   1f3a2:	80 91 da 00 	lds	r24, 0x00DA
   1f3a6:	8e 7f       	andi	r24, 0xFE	; 254
   1f3a8:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
   1f3ac:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
   1f3b0:	80 ff       	sbrs	r24, 0
   1f3b2:	0b c0       	rjmp	.+22     	; 0x1f3ca <__vector_10+0x5e>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
   1f3b4:	8c e0       	ldi	r24, 0x0C	; 12
   1f3b6:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
   1f3b8:	8e e0       	ldi	r24, 0x0E	; 14
   1f3ba:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
   1f3bc:	09 b4       	in	r0, 0x29	; 41
   1f3be:	00 fe       	sbrs	r0, 0
   1f3c0:	fd cf       	rjmp	.-6      	; 0x1f3bc <__vector_10+0x50>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
   1f3c2:	81 e0       	ldi	r24, 0x01	; 1
   1f3c4:	8e bb       	out	0x1e, r24	; 30
			EVENT_USB_Device_Connect();
   1f3c6:	f1 d1       	rcall	.+994    	; 0x1f7aa <USB_Event_Stub>
   1f3c8:	03 c0       	rjmp	.+6      	; 0x1f3d0 <__vector_10+0x64>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
   1f3ca:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
   1f3cc:	1e ba       	out	0x1e, r1	; 30
			EVENT_USB_Device_Disconnect();
   1f3ce:	ed d1       	rcall	.+986    	; 0x1f7aa <USB_Event_Stub>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
   1f3d0:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
   1f3d4:	80 ff       	sbrs	r24, 0
   1f3d6:	17 c0       	rjmp	.+46     	; 0x1f406 <__vector_10+0x9a>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
   1f3d8:	80 91 e2 00 	lds	r24, 0x00E2
   1f3dc:	80 ff       	sbrs	r24, 0
   1f3de:	13 c0       	rjmp	.+38     	; 0x1f406 <__vector_10+0x9a>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
   1f3e0:	80 91 e2 00 	lds	r24, 0x00E2
   1f3e4:	8e 7f       	andi	r24, 0xFE	; 254
   1f3e6:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
   1f3ea:	80 91 e2 00 	lds	r24, 0x00E2
   1f3ee:	80 61       	ori	r24, 0x10	; 16
   1f3f0:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON  |=  (1 << FRZCLK);
   1f3f4:	80 91 d8 00 	lds	r24, 0x00D8
   1f3f8:	80 62       	ori	r24, 0x20	; 32
   1f3fa:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
   1f3fe:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
   1f400:	85 e0       	ldi	r24, 0x05	; 5
   1f402:	8e bb       	out	0x1e, r24	; 30
		EVENT_USB_Device_Suspend();
   1f404:	d2 d1       	rcall	.+932    	; 0x1f7aa <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
   1f406:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
   1f40a:	84 ff       	sbrs	r24, 4
   1f40c:	2c c0       	rjmp	.+88     	; 0x1f466 <__vector_10+0xfa>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
   1f40e:	80 91 e2 00 	lds	r24, 0x00E2
   1f412:	84 ff       	sbrs	r24, 4
   1f414:	28 c0       	rjmp	.+80     	; 0x1f466 <__vector_10+0xfa>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
   1f416:	8c e0       	ldi	r24, 0x0C	; 12
   1f418:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
   1f41a:	8e e0       	ldi	r24, 0x0E	; 14
   1f41c:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
   1f41e:	09 b4       	in	r0, 0x29	; 41
   1f420:	00 fe       	sbrs	r0, 0
   1f422:	fd cf       	rjmp	.-6      	; 0x1f41e <__vector_10+0xb2>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
   1f424:	80 91 d8 00 	lds	r24, 0x00D8
   1f428:	8f 7d       	andi	r24, 0xDF	; 223
   1f42a:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
   1f42e:	80 91 e1 00 	lds	r24, 0x00E1
   1f432:	8f 7e       	andi	r24, 0xEF	; 239
   1f434:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
   1f438:	80 91 e2 00 	lds	r24, 0x00E2
   1f43c:	8f 7e       	andi	r24, 0xEF	; 239
   1f43e:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
   1f442:	80 91 e2 00 	lds	r24, 0x00E2
   1f446:	81 60       	ori	r24, 0x01	; 1
   1f448:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
   1f44c:	80 91 4a 01 	lds	r24, 0x014A
   1f450:	88 23       	and	r24, r24
   1f452:	31 f4       	brne	.+12     	; 0x1f460 <__vector_10+0xf4>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
   1f454:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
   1f458:	87 fd       	sbrc	r24, 7
   1f45a:	02 c0       	rjmp	.+4      	; 0x1f460 <__vector_10+0xf4>
   1f45c:	81 e0       	ldi	r24, 0x01	; 1
   1f45e:	01 c0       	rjmp	.+2      	; 0x1f462 <__vector_10+0xf6>
   1f460:	84 e0       	ldi	r24, 0x04	; 4
   1f462:	8e bb       	out	0x1e, r24	; 30

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
   1f464:	a2 d1       	rcall	.+836    	; 0x1f7aa <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
   1f466:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
   1f46a:	83 ff       	sbrs	r24, 3
   1f46c:	21 c0       	rjmp	.+66     	; 0x1f4b0 <__vector_10+0x144>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
   1f46e:	80 91 e2 00 	lds	r24, 0x00E2
   1f472:	83 ff       	sbrs	r24, 3
   1f474:	1d c0       	rjmp	.+58     	; 0x1f4b0 <__vector_10+0x144>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
   1f476:	80 91 e1 00 	lds	r24, 0x00E1
   1f47a:	87 7f       	andi	r24, 0xF7	; 247
   1f47c:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
   1f480:	82 e0       	ldi	r24, 0x02	; 2
   1f482:	8e bb       	out	0x1e, r24	; 30
		USB_Device_ConfigurationNumber = 0;
   1f484:	10 92 4a 01 	sts	0x014A, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
   1f488:	80 91 e1 00 	lds	r24, 0x00E1
   1f48c:	8e 7f       	andi	r24, 0xFE	; 254
   1f48e:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
   1f492:	80 91 e2 00 	lds	r24, 0x00E2
   1f496:	8e 7f       	andi	r24, 0xFE	; 254
   1f498:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
   1f49c:	80 91 e2 00 	lds	r24, 0x00E2
   1f4a0:	80 61       	ori	r24, 0x10	; 16
   1f4a2:	80 93 e2 00 	sts	0x00E2, r24
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
   1f4a6:	80 e0       	ldi	r24, 0x00	; 0
   1f4a8:	60 e0       	ldi	r22, 0x00	; 0
   1f4aa:	42 e0       	ldi	r20, 0x02	; 2
   1f4ac:	d3 de       	rcall	.-602    	; 0x1f254 <Endpoint_ConfigureEndpoint_Prv>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
   1f4ae:	7d d1       	rcall	.+762    	; 0x1f7aa <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
   1f4b0:	ff 91       	pop	r31
   1f4b2:	ef 91       	pop	r30
   1f4b4:	bf 91       	pop	r27
   1f4b6:	af 91       	pop	r26
   1f4b8:	9f 91       	pop	r25
   1f4ba:	8f 91       	pop	r24
   1f4bc:	7f 91       	pop	r23
   1f4be:	6f 91       	pop	r22
   1f4c0:	5f 91       	pop	r21
   1f4c2:	4f 91       	pop	r20
   1f4c4:	3f 91       	pop	r19
   1f4c6:	2f 91       	pop	r18
   1f4c8:	0f 90       	pop	r0
   1f4ca:	0b be       	out	0x3b, r0	; 59
   1f4cc:	0f 90       	pop	r0
   1f4ce:	0f be       	out	0x3f, r0	; 63
   1f4d0:	0f 90       	pop	r0
   1f4d2:	1f 90       	pop	r1
   1f4d4:	18 95       	reti

0001f4d6 <Endpoint_Write_Control_Stream_LE>:
   1f4d6:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
   1f4d8:	40 91 52 01 	lds	r20, 0x0152
   1f4dc:	50 91 53 01 	lds	r21, 0x0153
   1f4e0:	46 17       	cp	r20, r22
   1f4e2:	57 07       	cpc	r21, r23
   1f4e4:	18 f4       	brcc	.+6      	; 0x1f4ec <Endpoint_Write_Control_Stream_LE+0x16>
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
   1f4e6:	f9 01       	movw	r30, r18
   1f4e8:	90 e0       	ldi	r25, 0x00	; 0
   1f4ea:	3c c0       	rjmp	.+120    	; 0x1f564 <Endpoint_Write_Control_Stream_LE+0x8e>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
   1f4ec:	61 15       	cp	r22, r1
   1f4ee:	71 05       	cpc	r23, r1
   1f4f0:	11 f0       	breq	.+4      	; 0x1f4f6 <Endpoint_Write_Control_Stream_LE+0x20>
   1f4f2:	ab 01       	movw	r20, r22
   1f4f4:	f8 cf       	rjmp	.-16     	; 0x1f4e6 <Endpoint_Write_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
   1f4f6:	80 91 e8 00 	lds	r24, 0x00E8
   1f4fa:	8e 77       	andi	r24, 0x7E	; 126
   1f4fc:	80 93 e8 00 	sts	0x00E8, r24
   1f500:	40 e0       	ldi	r20, 0x00	; 0
   1f502:	50 e0       	ldi	r21, 0x00	; 0
   1f504:	f0 cf       	rjmp	.-32     	; 0x1f4e6 <Endpoint_Write_Control_Stream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
   1f506:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
   1f508:	88 23       	and	r24, r24
   1f50a:	e9 f1       	breq	.+122    	; 0x1f586 <Endpoint_Write_Control_Stream_LE+0xb0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
   1f50c:	85 30       	cpi	r24, 0x05	; 5
   1f50e:	e9 f1       	breq	.+122    	; 0x1f58a <Endpoint_Write_Control_Stream_LE+0xb4>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
   1f510:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
   1f514:	83 ff       	sbrs	r24, 3
   1f516:	02 c0       	rjmp	.+4      	; 0x1f51c <Endpoint_Write_Control_Stream_LE+0x46>
   1f518:	81 e0       	ldi	r24, 0x01	; 1
   1f51a:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
   1f51c:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
   1f520:	82 fd       	sbrc	r24, 2
   1f522:	2b c0       	rjmp	.+86     	; 0x1f57a <Endpoint_Write_Control_Stream_LE+0xa4>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
   1f524:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
   1f528:	80 ff       	sbrs	r24, 0
   1f52a:	1c c0       	rjmp	.+56     	; 0x1f564 <Endpoint_Write_Control_Stream_LE+0x8e>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
   1f52c:	20 91 f2 00 	lds	r18, 0x00F2
   1f530:	30 91 f3 00 	lds	r19, 0x00F3
   1f534:	07 c0       	rjmp	.+14     	; 0x1f544 <Endpoint_Write_Control_Stream_LE+0x6e>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
   1f536:	81 91       	ld	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
   1f538:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
   1f53c:	41 50       	subi	r20, 0x01	; 1
   1f53e:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
   1f540:	2f 5f       	subi	r18, 0xFF	; 255
   1f542:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
   1f544:	41 15       	cp	r20, r1
   1f546:	51 05       	cpc	r21, r1
   1f548:	19 f0       	breq	.+6      	; 0x1f550 <Endpoint_Write_Control_Stream_LE+0x7a>
   1f54a:	28 30       	cpi	r18, 0x08	; 8
   1f54c:	31 05       	cpc	r19, r1
   1f54e:	98 f3       	brcs	.-26     	; 0x1f536 <Endpoint_Write_Control_Stream_LE+0x60>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
   1f550:	90 e0       	ldi	r25, 0x00	; 0
   1f552:	28 30       	cpi	r18, 0x08	; 8
   1f554:	31 05       	cpc	r19, r1
   1f556:	09 f4       	brne	.+2      	; 0x1f55a <Endpoint_Write_Control_Stream_LE+0x84>
   1f558:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
   1f55a:	80 91 e8 00 	lds	r24, 0x00E8
   1f55e:	8e 77       	andi	r24, 0x7E	; 126
   1f560:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
   1f564:	41 15       	cp	r20, r1
   1f566:	51 05       	cpc	r21, r1
   1f568:	71 f6       	brne	.-100    	; 0x1f506 <Endpoint_Write_Control_Stream_LE+0x30>
   1f56a:	99 23       	and	r25, r25
   1f56c:	61 f6       	brne	.-104    	; 0x1f506 <Endpoint_Write_Control_Stream_LE+0x30>
   1f56e:	05 c0       	rjmp	.+10     	; 0x1f57a <Endpoint_Write_Control_Stream_LE+0xa4>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
   1f570:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
   1f572:	88 23       	and	r24, r24
   1f574:	41 f0       	breq	.+16     	; 0x1f586 <Endpoint_Write_Control_Stream_LE+0xb0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
   1f576:	85 30       	cpi	r24, 0x05	; 5
   1f578:	41 f0       	breq	.+16     	; 0x1f58a <Endpoint_Write_Control_Stream_LE+0xb4>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
   1f57a:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
   1f57e:	82 ff       	sbrs	r24, 2
   1f580:	f7 cf       	rjmp	.-18     	; 0x1f570 <Endpoint_Write_Control_Stream_LE+0x9a>
   1f582:	80 e0       	ldi	r24, 0x00	; 0
   1f584:	08 95       	ret
   1f586:	82 e0       	ldi	r24, 0x02	; 2
   1f588:	08 95       	ret
   1f58a:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
   1f58c:	08 95       	ret

0001f58e <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
   1f58e:	0f 93       	push	r16
   1f590:	1f 93       	push	r17
   1f592:	df 93       	push	r29
   1f594:	cf 93       	push	r28
   1f596:	00 d0       	rcall	.+0      	; 0x1f598 <USB_Device_ProcessControlRequest+0xa>
   1f598:	cd b7       	in	r28, 0x3d	; 61
   1f59a:	de b7       	in	r29, 0x3e	; 62
   1f59c:	ec e4       	ldi	r30, 0x4C	; 76
   1f59e:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
   1f5a0:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
   1f5a4:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
   1f5a6:	81 e0       	ldi	r24, 0x01	; 1
   1f5a8:	e4 35       	cpi	r30, 0x54	; 84
   1f5aa:	f8 07       	cpc	r31, r24
   1f5ac:	c9 f7       	brne	.-14     	; 0x1f5a0 <USB_Device_ProcessControlRequest+0x12>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
   1f5ae:	92 dd       	rcall	.-1244   	; 0x1f0d4 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
   1f5b0:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
   1f5b4:	83 ff       	sbrs	r24, 3
   1f5b6:	e4 c0       	rjmp	.+456    	; 0x1f780 <USB_Device_ProcessControlRequest+0x1f2>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
   1f5b8:	80 91 4c 01 	lds	r24, 0x014C

		switch (USB_ControlRequest.bRequest)
   1f5bc:	90 91 4d 01 	lds	r25, 0x014D
   1f5c0:	95 30       	cpi	r25, 0x05	; 5
   1f5c2:	09 f4       	brne	.+2      	; 0x1f5c6 <USB_Device_ProcessControlRequest+0x38>
   1f5c4:	6d c0       	rjmp	.+218    	; 0x1f6a0 <USB_Device_ProcessControlRequest+0x112>
   1f5c6:	96 30       	cpi	r25, 0x06	; 6
   1f5c8:	40 f4       	brcc	.+16     	; 0x1f5da <USB_Device_ProcessControlRequest+0x4c>
   1f5ca:	91 30       	cpi	r25, 0x01	; 1
   1f5cc:	81 f1       	breq	.+96     	; 0x1f62e <USB_Device_ProcessControlRequest+0xa0>
   1f5ce:	91 30       	cpi	r25, 0x01	; 1
   1f5d0:	70 f0       	brcs	.+28     	; 0x1f5ee <USB_Device_ProcessControlRequest+0x60>
   1f5d2:	93 30       	cpi	r25, 0x03	; 3
   1f5d4:	09 f0       	breq	.+2      	; 0x1f5d8 <USB_Device_ProcessControlRequest+0x4a>
   1f5d6:	d4 c0       	rjmp	.+424    	; 0x1f780 <USB_Device_ProcessControlRequest+0x1f2>
   1f5d8:	2a c0       	rjmp	.+84     	; 0x1f62e <USB_Device_ProcessControlRequest+0xa0>
   1f5da:	98 30       	cpi	r25, 0x08	; 8
   1f5dc:	09 f4       	brne	.+2      	; 0x1f5e0 <USB_Device_ProcessControlRequest+0x52>
   1f5de:	a3 c0       	rjmp	.+326    	; 0x1f726 <USB_Device_ProcessControlRequest+0x198>
   1f5e0:	99 30       	cpi	r25, 0x09	; 9
   1f5e2:	09 f4       	brne	.+2      	; 0x1f5e6 <USB_Device_ProcessControlRequest+0x58>
   1f5e4:	b2 c0       	rjmp	.+356    	; 0x1f74a <USB_Device_ProcessControlRequest+0x1bc>
   1f5e6:	96 30       	cpi	r25, 0x06	; 6
   1f5e8:	09 f0       	breq	.+2      	; 0x1f5ec <USB_Device_ProcessControlRequest+0x5e>
   1f5ea:	ca c0       	rjmp	.+404    	; 0x1f780 <USB_Device_ProcessControlRequest+0x1f2>
   1f5ec:	7c c0       	rjmp	.+248    	; 0x1f6e6 <USB_Device_ProcessControlRequest+0x158>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
   1f5ee:	80 38       	cpi	r24, 0x80	; 128
   1f5f0:	09 f4       	brne	.+2      	; 0x1f5f4 <USB_Device_ProcessControlRequest+0x66>
   1f5f2:	c6 c0       	rjmp	.+396    	; 0x1f780 <USB_Device_ProcessControlRequest+0x1f2>
   1f5f4:	82 38       	cpi	r24, 0x82	; 130
   1f5f6:	09 f0       	breq	.+2      	; 0x1f5fa <USB_Device_ProcessControlRequest+0x6c>
   1f5f8:	c3 c0       	rjmp	.+390    	; 0x1f780 <USB_Device_ProcessControlRequest+0x1f2>
			#endif
			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
   1f5fa:	80 91 50 01 	lds	r24, 0x0150
   1f5fe:	87 70       	andi	r24, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
   1f600:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
   1f604:	80 91 eb 00 	lds	r24, 0x00EB
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
   1f608:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1f60c:	20 91 e8 00 	lds	r18, 0x00E8
   1f610:	27 7f       	andi	r18, 0xF7	; 247
   1f612:	20 93 e8 00 	sts	0x00E8, r18
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
   1f616:	90 e0       	ldi	r25, 0x00	; 0
   1f618:	25 e0       	ldi	r18, 0x05	; 5
   1f61a:	96 95       	lsr	r25
   1f61c:	87 95       	ror	r24
   1f61e:	2a 95       	dec	r18
   1f620:	e1 f7       	brne	.-8      	; 0x1f61a <USB_Device_ProcessControlRequest+0x8c>
   1f622:	81 70       	andi	r24, 0x01	; 1
   1f624:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
   1f628:	10 92 f1 00 	sts	0x00F1, r1
   1f62c:	87 c0       	rjmp	.+270    	; 0x1f73c <USB_Device_ProcessControlRequest+0x1ae>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
   1f62e:	88 23       	and	r24, r24
   1f630:	19 f0       	breq	.+6      	; 0x1f638 <USB_Device_ProcessControlRequest+0xaa>
   1f632:	82 30       	cpi	r24, 0x02	; 2
   1f634:	09 f0       	breq	.+2      	; 0x1f638 <USB_Device_ProcessControlRequest+0xaa>
   1f636:	a4 c0       	rjmp	.+328    	; 0x1f780 <USB_Device_ProcessControlRequest+0x1f2>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
   1f638:	8f 71       	andi	r24, 0x1F	; 31
   1f63a:	82 30       	cpi	r24, 0x02	; 2
   1f63c:	09 f0       	breq	.+2      	; 0x1f640 <USB_Device_ProcessControlRequest+0xb2>
   1f63e:	a0 c0       	rjmp	.+320    	; 0x1f780 <USB_Device_ProcessControlRequest+0x1f2>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
   1f640:	80 91 4e 01 	lds	r24, 0x014E
   1f644:	88 23       	and	r24, r24
   1f646:	31 f5       	brne	.+76     	; 0x1f694 <USB_Device_ProcessControlRequest+0x106>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
   1f648:	20 91 50 01 	lds	r18, 0x0150
   1f64c:	27 70       	andi	r18, 0x07	; 7

				if (EndpointIndex == ENDPOINT_CONTROLEP)
   1f64e:	09 f4       	brne	.+2      	; 0x1f652 <USB_Device_ProcessControlRequest+0xc4>
   1f650:	97 c0       	rjmp	.+302    	; 0x1f780 <USB_Device_ProcessControlRequest+0x1f2>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
   1f652:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
   1f656:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
   1f65a:	80 ff       	sbrs	r24, 0
   1f65c:	1b c0       	rjmp	.+54     	; 0x1f694 <USB_Device_ProcessControlRequest+0x106>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
   1f65e:	93 30       	cpi	r25, 0x03	; 3
   1f660:	21 f4       	brne	.+8      	; 0x1f66a <USB_Device_ProcessControlRequest+0xdc>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
   1f662:	80 91 eb 00 	lds	r24, 0x00EB
   1f666:	80 62       	ori	r24, 0x20	; 32
   1f668:	13 c0       	rjmp	.+38     	; 0x1f690 <USB_Device_ProcessControlRequest+0x102>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
   1f66a:	80 91 eb 00 	lds	r24, 0x00EB
   1f66e:	80 61       	ori	r24, 0x10	; 16
   1f670:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
   1f674:	81 e0       	ldi	r24, 0x01	; 1
   1f676:	90 e0       	ldi	r25, 0x00	; 0
   1f678:	02 c0       	rjmp	.+4      	; 0x1f67e <USB_Device_ProcessControlRequest+0xf0>
   1f67a:	88 0f       	add	r24, r24
   1f67c:	99 1f       	adc	r25, r25
   1f67e:	2a 95       	dec	r18
   1f680:	e2 f7       	brpl	.-8      	; 0x1f67a <USB_Device_ProcessControlRequest+0xec>
   1f682:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
   1f686:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
   1f68a:	80 91 eb 00 	lds	r24, 0x00EB
   1f68e:	88 60       	ori	r24, 0x08	; 8
   1f690:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
   1f694:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1f698:	80 91 e8 00 	lds	r24, 0x00E8
   1f69c:	87 7f       	andi	r24, 0xF7	; 247
   1f69e:	51 c0       	rjmp	.+162    	; 0x1f742 <USB_Device_ProcessControlRequest+0x1b4>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
   1f6a0:	88 23       	and	r24, r24
   1f6a2:	09 f0       	breq	.+2      	; 0x1f6a6 <USB_Device_ProcessControlRequest+0x118>
   1f6a4:	6d c0       	rjmp	.+218    	; 0x1f780 <USB_Device_ProcessControlRequest+0x1f2>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t    DeviceAddress    = (USB_ControlRequest.wValue & 0x7F);
   1f6a6:	10 91 4e 01 	lds	r17, 0x014E
   1f6aa:	1f 77       	andi	r17, 0x7F	; 127
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
   1f6ac:	0f b7       	in	r16, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
   1f6ae:	f8 94       	cli
   1f6b0:	80 91 e8 00 	lds	r24, 0x00E8
   1f6b4:	87 7f       	andi	r24, 0xF7	; 247
   1f6b6:	80 93 e8 00 	sts	0x00E8, r24
	uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
	GlobalInterruptDisable();
				
	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
   1f6ba:	df dd       	rcall	.-1090   	; 0x1f27a <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
   1f6bc:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
   1f6c0:	80 ff       	sbrs	r24, 0
   1f6c2:	fc cf       	rjmp	.-8      	; 0x1f6bc <USB_Device_ProcessControlRequest+0x12e>
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				uint8_t Temp = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
   1f6c4:	80 91 e3 00 	lds	r24, 0x00E3
   1f6c8:	80 78       	andi	r24, 0x80	; 128
   1f6ca:	81 2b       	or	r24, r17

				UDADDR = Temp;
   1f6cc:	80 93 e3 00 	sts	0x00E3, r24
				UDADDR = Temp | (1 << ADDEN);
   1f6d0:	80 68       	ori	r24, 0x80	; 128
   1f6d2:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_SetDeviceAddress(DeviceAddress);
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
   1f6d6:	11 23       	and	r17, r17
   1f6d8:	11 f4       	brne	.+4      	; 0x1f6de <USB_Device_ProcessControlRequest+0x150>
   1f6da:	82 e0       	ldi	r24, 0x02	; 2
   1f6dc:	01 c0       	rjmp	.+2      	; 0x1f6e0 <USB_Device_ProcessControlRequest+0x152>
   1f6de:	83 e0       	ldi	r24, 0x03	; 3
   1f6e0:	8e bb       	out	0x1e, r24	; 30
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
   1f6e2:	0f bf       	out	0x3f, r16	; 63
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;				
				#endif
				
				GCC_MEMORY_BARRIER();
   1f6e4:	4d c0       	rjmp	.+154    	; 0x1f780 <USB_Device_ProcessControlRequest+0x1f2>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
   1f6e6:	80 58       	subi	r24, 0x80	; 128
   1f6e8:	82 30       	cpi	r24, 0x02	; 2
   1f6ea:	08 f0       	brcs	.+2      	; 0x1f6ee <USB_Device_ProcessControlRequest+0x160>
   1f6ec:	49 c0       	rjmp	.+146    	; 0x1f780 <USB_Device_ProcessControlRequest+0x1f2>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
   1f6ee:	80 91 4e 01 	lds	r24, 0x014E
   1f6f2:	90 91 4f 01 	lds	r25, 0x014F
   1f6f6:	60 91 50 01 	lds	r22, 0x0150
   1f6fa:	ae 01       	movw	r20, r28
   1f6fc:	4f 5f       	subi	r20, 0xFF	; 255
   1f6fe:	5f 4f       	sbci	r21, 0xFF	; 255
   1f700:	8b dd       	rcall	.-1258   	; 0x1f218 <CALLBACK_USB_GetDescriptor>
   1f702:	bc 01       	movw	r22, r24
   1f704:	00 97       	sbiw	r24, 0x00	; 0
   1f706:	09 f4       	brne	.+2      	; 0x1f70a <USB_Device_ProcessControlRequest+0x17c>
   1f708:	3b c0       	rjmp	.+118    	; 0x1f780 <USB_Device_ProcessControlRequest+0x1f2>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1f70a:	80 91 e8 00 	lds	r24, 0x00E8
   1f70e:	87 7f       	andi	r24, 0xF7	; 247
   1f710:	80 93 e8 00 	sts	0x00E8, r24
	}

	Endpoint_ClearSETUP();

	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
   1f714:	89 81       	ldd	r24, Y+1	; 0x01
   1f716:	9a 81       	ldd	r25, Y+2	; 0x02
   1f718:	de de       	rcall	.-580    	; 0x1f4d6 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
   1f71a:	80 91 e8 00 	lds	r24, 0x00E8
   1f71e:	8b 77       	andi	r24, 0x7B	; 123
   1f720:	80 93 e8 00 	sts	0x00E8, r24
   1f724:	2d c0       	rjmp	.+90     	; 0x1f780 <USB_Device_ProcessControlRequest+0x1f2>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
   1f726:	80 38       	cpi	r24, 0x80	; 128
   1f728:	59 f5       	brne	.+86     	; 0x1f780 <USB_Device_ProcessControlRequest+0x1f2>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1f72a:	80 91 e8 00 	lds	r24, 0x00E8
   1f72e:	87 7f       	andi	r24, 0xF7	; 247
   1f730:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
   1f734:	80 91 4a 01 	lds	r24, 0x014A
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
   1f738:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
   1f73c:	80 91 e8 00 	lds	r24, 0x00E8
   1f740:	8e 77       	andi	r24, 0x7E	; 126
   1f742:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
   1f746:	99 dd       	rcall	.-1230   	; 0x1f27a <Endpoint_ClearStatusStage>
   1f748:	1b c0       	rjmp	.+54     	; 0x1f780 <USB_Device_ProcessControlRequest+0x1f2>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
   1f74a:	88 23       	and	r24, r24
   1f74c:	c9 f4       	brne	.+50     	; 0x1f780 <USB_Device_ProcessControlRequest+0x1f2>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
   1f74e:	90 91 4e 01 	lds	r25, 0x014E
   1f752:	92 30       	cpi	r25, 0x02	; 2
   1f754:	a8 f4       	brcc	.+42     	; 0x1f780 <USB_Device_ProcessControlRequest+0x1f2>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1f756:	80 91 e8 00 	lds	r24, 0x00E8
   1f75a:	87 7f       	andi	r24, 0xF7	; 247
   1f75c:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
   1f760:	90 93 4a 01 	sts	0x014A, r25

	Endpoint_ClearStatusStage();
   1f764:	8a dd       	rcall	.-1260   	; 0x1f27a <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
   1f766:	80 91 4a 01 	lds	r24, 0x014A
   1f76a:	88 23       	and	r24, r24
   1f76c:	31 f4       	brne	.+12     	; 0x1f77a <USB_Device_ProcessControlRequest+0x1ec>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
   1f76e:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
   1f772:	87 fd       	sbrc	r24, 7
   1f774:	02 c0       	rjmp	.+4      	; 0x1f77a <USB_Device_ProcessControlRequest+0x1ec>
   1f776:	81 e0       	ldi	r24, 0x01	; 1
   1f778:	01 c0       	rjmp	.+2      	; 0x1f77c <USB_Device_ProcessControlRequest+0x1ee>
   1f77a:	84 e0       	ldi	r24, 0x04	; 4
   1f77c:	8e bb       	out	0x1e, r24	; 30

	EVENT_USB_Device_ConfigurationChanged();
   1f77e:	1f dd       	rcall	.-1474   	; 0x1f1be <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
   1f780:	80 91 e8 00 	lds	r24, 0x00E8

				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
   1f784:	83 ff       	sbrs	r24, 3
   1f786:	0a c0       	rjmp	.+20     	; 0x1f79c <USB_Device_ProcessControlRequest+0x20e>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
   1f788:	80 91 eb 00 	lds	r24, 0x00EB
   1f78c:	80 62       	ori	r24, 0x20	; 32
   1f78e:	80 93 eb 00 	sts	0x00EB, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1f792:	80 91 e8 00 	lds	r24, 0x00E8
   1f796:	87 7f       	andi	r24, 0xF7	; 247
   1f798:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_StallTransaction();
		Endpoint_ClearSETUP();
	}
}
   1f79c:	0f 90       	pop	r0
   1f79e:	0f 90       	pop	r0
   1f7a0:	cf 91       	pop	r28
   1f7a2:	df 91       	pop	r29
   1f7a4:	1f 91       	pop	r17
   1f7a6:	0f 91       	pop	r16
   1f7a8:	08 95       	ret

0001f7aa <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
   1f7aa:	08 95       	ret

0001f7ac <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
   1f7ac:	1f 93       	push	r17
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
   1f7ae:	8e b3       	in	r24, 0x1e	; 30
   1f7b0:	88 23       	and	r24, r24
   1f7b2:	61 f0       	breq	.+24     	; 0x1f7cc <USB_USBTask+0x20>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
   1f7b4:	10 91 e9 00 	lds	r17, 0x00E9
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
   1f7b8:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
   1f7bc:	80 91 e8 00 	lds	r24, 0x00E8
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
   1f7c0:	83 ff       	sbrs	r24, 3
   1f7c2:	01 c0       	rjmp	.+2      	; 0x1f7c6 <USB_USBTask+0x1a>
		  USB_Device_ProcessControlRequest();
   1f7c4:	e4 de       	rcall	.-568    	; 0x1f58e <USB_Device_ProcessControlRequest>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
   1f7c6:	17 70       	andi	r17, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
   1f7c8:	10 93 e9 00 	sts	0x00E9, r17
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
   1f7cc:	1f 91       	pop	r17
   1f7ce:	08 95       	ret

0001f7d0 <_exit>:
   1f7d0:	f8 94       	cli

0001f7d2 <__stop_program>:
   1f7d2:	ff cf       	rjmp	.-2      	; 0x1f7d2 <__stop_program>
