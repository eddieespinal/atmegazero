
PrinterHost.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000046  00800100  00001b94  00001c28  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001b94  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000022  00800146  00800146  00001c6e  2**0
                  ALLOC
  3 .debug_aranges 000006c8  00000000  00000000  00001c6e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000f91  00000000  00000000  00002336  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000b754  00000000  00000000  000032c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000027e9  00000000  00000000  0000ea1b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00007d5f  00000000  00000000  00011204  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000b10  00000000  00000000  00018f64  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000456a  00000000  00000000  00019a74  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000576b  00000000  00000000  0001dfde  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000798  00000000  00000000  00023749  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
		Pipe_DisablePipe();
	}
}

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
       0:	65 c1       	rjmp	.+714    	; 0x2cc <__ctors_end>
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
       2:	00 00       	nop
{
	USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, AfterType);

	if (*BytesRem)
	  USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, Type);
}
       4:	81 c1       	rjmp	.+770    	; 0x308 <__bad_interrupt>

	return USB_Host_SendControlRequest(FeatureStatus);
}

uint8_t USB_Host_ClearEndpointStall(const uint8_t EndpointAddress)
{
       6:	00 00       	nop

	return ErrorCode;
}

uint16_t PRNT_Host_BytesReceived(USB_ClassInfo_PRNT_Host_t* const PRNTInterfaceInfo)
{
       8:	7f c1       	rjmp	.+766    	; 0x308 <__bad_interrupt>

	return Serial_ReceiveByte();
}

int Serial_getchar_Blocking(FILE *Stream)
{
       a:	00 00       	nop
       c:	7d c1       	rjmp	.+762    	; 0x308 <__bad_interrupt>
       e:	00 00       	nop
      10:	7b c1       	rjmp	.+758    	; 0x308 <__bad_interrupt>
      12:	00 00       	nop
      14:	79 c1       	rjmp	.+754    	; 0x308 <__bad_interrupt>
      16:	00 00       	nop
      18:	77 c1       	rjmp	.+750    	; 0x308 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	75 c1       	rjmp	.+746    	; 0x308 <__bad_interrupt>
      1e:	00 00       	nop
      20:	73 c1       	rjmp	.+742    	; 0x308 <__bad_interrupt>
      22:	00 00       	nop
      24:	71 c1       	rjmp	.+738    	; 0x308 <__bad_interrupt>
      26:	00 00       	nop
      28:	e8 c5       	rjmp	.+3024   	; 0xbfa <__vector_10>
      2a:	00 00       	nop
      2c:	6d c1       	rjmp	.+730    	; 0x308 <__bad_interrupt>
      2e:	00 00       	nop
      30:	6b c1       	rjmp	.+726    	; 0x308 <__bad_interrupt>
      32:	00 00       	nop
      34:	69 c1       	rjmp	.+722    	; 0x308 <__bad_interrupt>
      36:	00 00       	nop
      38:	67 c1       	rjmp	.+718    	; 0x308 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	65 c1       	rjmp	.+714    	; 0x308 <__bad_interrupt>
      3e:	00 00       	nop
      40:	63 c1       	rjmp	.+710    	; 0x308 <__bad_interrupt>
      42:	00 00       	nop
      44:	61 c1       	rjmp	.+706    	; 0x308 <__bad_interrupt>
      46:	00 00       	nop
      48:	5f c1       	rjmp	.+702    	; 0x308 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	5d c1       	rjmp	.+698    	; 0x308 <__bad_interrupt>
      4e:	00 00       	nop
      50:	5b c1       	rjmp	.+694    	; 0x308 <__bad_interrupt>
      52:	00 00       	nop
      54:	59 c1       	rjmp	.+690    	; 0x308 <__bad_interrupt>
      56:	00 00       	nop
      58:	57 c1       	rjmp	.+686    	; 0x308 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	55 c1       	rjmp	.+682    	; 0x308 <__bad_interrupt>
      5e:	00 00       	nop
      60:	53 c1       	rjmp	.+678    	; 0x308 <__bad_interrupt>
      62:	00 00       	nop
      64:	51 c1       	rjmp	.+674    	; 0x308 <__bad_interrupt>
      66:	00 00       	nop
      68:	4f c1       	rjmp	.+670    	; 0x308 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	4d c1       	rjmp	.+666    	; 0x308 <__bad_interrupt>
      6e:	00 00       	nop
      70:	4b c1       	rjmp	.+662    	; 0x308 <__bad_interrupt>
      72:	00 00       	nop
      74:	49 c1       	rjmp	.+658    	; 0x308 <__bad_interrupt>
      76:	00 00       	nop
      78:	47 c1       	rjmp	.+654    	; 0x308 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	45 c1       	rjmp	.+650    	; 0x308 <__bad_interrupt>
      7e:	00 00       	nop
      80:	43 c1       	rjmp	.+646    	; 0x308 <__bad_interrupt>
      82:	00 00       	nop
      84:	41 c1       	rjmp	.+642    	; 0x308 <__bad_interrupt>
      86:	00 00       	nop
      88:	3f c1       	rjmp	.+638    	; 0x308 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	3d c1       	rjmp	.+634    	; 0x308 <__bad_interrupt>
      8e:	00 00       	nop
      90:	3b c1       	rjmp	.+630    	; 0x308 <__bad_interrupt>
      92:	00 00       	nop
      94:	39 c1       	rjmp	.+626    	; 0x308 <__bad_interrupt>
      96:	00 00       	nop

00000098 <__c.4576>:
      98:	1b 5b 33 31 6d 44 65 76 20 45 6e 75 6d 20 45 72     .[31mDev Enum Er
      a8:	72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     ror.. -- Error C
      b8:	6f 64 65 20 25 64 0d 0a 20 2d 2d 20 53 75 62 20     ode %d.. -- Sub 
      c8:	45 72 72 6f 72 20 43 6f 64 65 20 25 64 0d 0a 20     Error Code %d.. 
      d8:	2d 2d 20 49 6e 20 53 74 61 74 65 20 25 64 0d 0a     -- In State %d..
      e8:	1b 5b 33 37 6d 00                                   .[37m.

000000ee <__c.4568>:
      ee:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
      fe:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 
     10e:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

0000011d <__c.4558>:
     11d:	50 72 69 6e 74 65 72 20 44 65 76 69 63 65 20 45     Printer Device E
     12d:	6e 75 6d 65 72 61 74 65 64 2e 0d 0a 00              numerated....

0000013a <__c.4556>:
     13a:	45 72 72 6f 72 20 53 65 74 74 69 6e 67 20 42 69     Error Setting Bi
     14a:	64 69 72 65 63 74 69 6f 6e 61 6c 20 4d 6f 64 65     directional Mode
     15a:	2e 0d 0a 00                                         ....

0000015e <__c.4554>:
     15e:	45 72 72 6f 72 20 53 65 74 74 69 6e 67 20 44 65     Error Setting De
     16e:	76 69 63 65 20 43 6f 6e 66 69 67 75 72 61 74 69     vice Configurati
     17e:	6f 6e 2e 0d 0a 00                                   on....

00000184 <__c.4552>:
     184:	41 74 74 61 63 68 65 64 20 44 65 76 69 63 65 20     Attached Device 
     194:	4e 6f 74 20 61 20 56 61 6c 69 64 20 50 72 69 6e     Not a Valid Prin
     1a4:	74 65 72 20 43 6c 61 73 73 20 44 65 76 69 63 65     ter Class Device
     1b4:	2e 0d 0a 00                                         ....

000001b8 <__c.4550>:
     1b8:	45 72 72 6f 72 20 52 65 74 72 69 65 76 69 6e 67     Error Retrieving
     1c8:	20 43 6f 6e 66 69 67 75 72 61 74 69 6f 6e 20 44      Configuration D
     1d8:	65 73 63 72 69 70 74 6f 72 2e 0d 0a 00              escriptor....

000001e5 <__c.4543>:
     1e5:	0d 0a 44 65 76 69 63 65 20 55 6e 61 74 74 61 63     ..Device Unattac
     1f5:	68 65 64 2e 0d 0a 00                                hed....

000001fc <__c.4538>:
     1fc:	44 65 76 69 63 65 20 41 74 74 61 63 68 65 64 2e     Device Attached.
     20c:	0d 0a 00                                            ...

0000020f <__c.4530>:
     20f:	54 65 73 74 20 50 61 67 65 20 53 65 6e 74 2e 0d     Test Page Sent..
     21f:	0a 00                                               ..

00000221 <__c.4528>:
     221:	45 72 72 6f 72 20 53 65 6e 64 69 6e 67 20 50 61     Error Sending Pa
     231:	67 65 20 44 61 74 61 2e 0d 0a 00                    ge Data....

0000023c <__c.4526>:
     23c:	53 65 6e 64 69 6e 67 20 54 65 73 74 20 50 61 67     Sending Test Pag
     24c:	65 20 28 25 64 20 62 79 74 65 73 29 2e 2e 2e 0d     e (%d bytes)....
     25c:	0a 00                                               ..

0000025e <__c.4522>:
     25e:	44 65 76 69 63 65 20 49 44 3a 20 25 73 2e 0d 0a     Device ID: %s...
     26e:	00                                                  .

0000026f <__c.4520>:
     26f:	45 72 72 6f 72 20 47 65 74 74 69 6e 67 20 44 65     Error Getting De
     27f:	76 69 63 65 20 49 44 2e 0d 0a 00                    vice ID....

0000028a <__c.4517>:
     28a:	52 65 74 72 69 65 76 69 6e 67 20 44 65 76 69 63     Retrieving Devic
     29a:	65 20 49 44 2e 2e 2e 0d 0a 00                       e ID......

000002a4 <__c.4503>:
     2a4:	1b 5b 33 36 6d 50 72 69 6e 74 65 72 20 48 6f 73     .[36mPrinter Hos
     2b4:	74 20 44 65 6d 6f 20 72 75 6e 6e 69 6e 67 2e 0d     t Demo running..
     2c4:	0a 1b 5b 33 37 6d 00 00                             ..[37m..

000002cc <__ctors_end>:
     2cc:	11 24       	eor	r1, r1
     2ce:	1f be       	out	0x3f, r1	; 63
     2d0:	cf ef       	ldi	r28, 0xFF	; 255
     2d2:	d0 e2       	ldi	r29, 0x20	; 32
     2d4:	de bf       	out	0x3e, r29	; 62
     2d6:	cd bf       	out	0x3d, r28	; 61

000002d8 <__do_copy_data>:
     2d8:	11 e0       	ldi	r17, 0x01	; 1
     2da:	a0 e0       	ldi	r26, 0x00	; 0
     2dc:	b1 e0       	ldi	r27, 0x01	; 1
     2de:	e4 e9       	ldi	r30, 0x94	; 148
     2e0:	fb e1       	ldi	r31, 0x1B	; 27
     2e2:	00 e0       	ldi	r16, 0x00	; 0
     2e4:	0b bf       	out	0x3b, r16	; 59
     2e6:	02 c0       	rjmp	.+4      	; 0x2ec <__do_copy_data+0x14>
     2e8:	07 90       	elpm	r0, Z+
     2ea:	0d 92       	st	X+, r0
     2ec:	a6 34       	cpi	r26, 0x46	; 70
     2ee:	b1 07       	cpc	r27, r17
     2f0:	d9 f7       	brne	.-10     	; 0x2e8 <__do_copy_data+0x10>

000002f2 <__do_clear_bss>:
     2f2:	11 e0       	ldi	r17, 0x01	; 1
     2f4:	a6 e4       	ldi	r26, 0x46	; 70
     2f6:	b1 e0       	ldi	r27, 0x01	; 1
     2f8:	01 c0       	rjmp	.+2      	; 0x2fc <.do_clear_bss_start>

000002fa <.do_clear_bss_loop>:
     2fa:	1d 92       	st	X+, r1

000002fc <.do_clear_bss_start>:
     2fc:	a8 36       	cpi	r26, 0x68	; 104
     2fe:	b1 07       	cpc	r27, r17
     300:	e1 f7       	brne	.-8      	; 0x2fa <.do_clear_bss_loop>
     302:	85 d1       	rcall	.+778    	; 0x60e <main>
     304:	0c 94 c8 0d 	jmp	0x1b90	; 0x1b90 <_exit>

00000308 <__bad_interrupt>:
     308:	7b ce       	rjmp	.-778    	; 0x0 <__vectors>

0000030a <EVENT_USB_Host_DeviceEnumerationFailed>:
 *  enumerating an attached USB device.
 */
void EVENT_USB_Host_DeviceEnumerationFailed(const uint8_t ErrorCode,
                                            const uint8_t SubErrorCode)
{
	printf_P(PSTR(ESC_FG_RED "Dev Enum Error\r\n"
     30a:	90 91 53 01 	lds	r25, 0x0153
     30e:	2d b7       	in	r18, 0x3d	; 61
     310:	3e b7       	in	r19, 0x3e	; 62
     312:	28 50       	subi	r18, 0x08	; 8
     314:	30 40       	sbci	r19, 0x00	; 0
     316:	0f b6       	in	r0, 0x3f	; 63
     318:	f8 94       	cli
     31a:	3e bf       	out	0x3e, r19	; 62
     31c:	0f be       	out	0x3f, r0	; 63
     31e:	2d bf       	out	0x3d, r18	; 61
     320:	ed b7       	in	r30, 0x3d	; 61
     322:	fe b7       	in	r31, 0x3e	; 62
     324:	31 96       	adiw	r30, 0x01	; 1
     326:	28 e9       	ldi	r18, 0x98	; 152
     328:	30 e0       	ldi	r19, 0x00	; 0
     32a:	ad b7       	in	r26, 0x3d	; 61
     32c:	be b7       	in	r27, 0x3e	; 62
     32e:	12 96       	adiw	r26, 0x02	; 2
     330:	3c 93       	st	X, r19
     332:	2e 93       	st	-X, r18
     334:	11 97       	sbiw	r26, 0x01	; 1
     336:	82 83       	std	Z+2, r24	; 0x02
     338:	13 82       	std	Z+3, r1	; 0x03
     33a:	64 83       	std	Z+4, r22	; 0x04
     33c:	15 82       	std	Z+5, r1	; 0x05
     33e:	96 83       	std	Z+6, r25	; 0x06
     340:	17 82       	std	Z+7, r1	; 0x07
     342:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <printf_P>
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     346:	8b b1       	in	r24, 0x0b	; 11
     348:	8f 70       	andi	r24, 0x0F	; 15
     34a:	80 69       	ori	r24, 0x90	; 144
     34c:	8b b9       	out	0x0b, r24	; 11
     34e:	2d b7       	in	r18, 0x3d	; 61
     350:	3e b7       	in	r19, 0x3e	; 62
     352:	28 5f       	subi	r18, 0xF8	; 248
     354:	3f 4f       	sbci	r19, 0xFF	; 255
     356:	0f b6       	in	r0, 0x3f	; 63
     358:	f8 94       	cli
     35a:	3e bf       	out	0x3e, r19	; 62
     35c:	0f be       	out	0x3f, r0	; 63
     35e:	2d bf       	out	0x3d, r18	; 61
	                         " -- Error Code %d\r\n"
	                         " -- Sub Error Code %d\r\n"
	                         " -- In State %d\r\n" ESC_FG_WHITE), ErrorCode, SubErrorCode, USB_HostState);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
}
     360:	08 95       	ret

00000362 <EVENT_USB_Host_HostError>:
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
}

/** Event handler for the USB_HostError event. This indicates that a hardware error occurred while in host mode. */
void EVENT_USB_Host_HostError(const uint8_t ErrorCode)
{
     362:	1f 93       	push	r17
     364:	18 2f       	mov	r17, r24
	USB_Disable();
     366:	24 d4       	rcall	.+2120   	; 0xbb0 <USB_Disable>

	printf_P(PSTR(ESC_FG_RED "Host Mode Error\r\n"
     368:	00 d0       	rcall	.+0      	; 0x36a <EVENT_USB_Host_HostError+0x8>
     36a:	00 d0       	rcall	.+0      	; 0x36c <EVENT_USB_Host_HostError+0xa>
     36c:	ed b7       	in	r30, 0x3d	; 61
     36e:	fe b7       	in	r31, 0x3e	; 62
     370:	31 96       	adiw	r30, 0x01	; 1
     372:	8e ee       	ldi	r24, 0xEE	; 238
     374:	90 e0       	ldi	r25, 0x00	; 0
     376:	ad b7       	in	r26, 0x3d	; 61
     378:	be b7       	in	r27, 0x3e	; 62
     37a:	12 96       	adiw	r26, 0x02	; 2
     37c:	9c 93       	st	X, r25
     37e:	8e 93       	st	-X, r24
     380:	11 97       	sbiw	r26, 0x01	; 1
     382:	12 83       	std	Z+2, r17	; 0x02
     384:	13 82       	std	Z+3, r1	; 0x03
     386:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <printf_P>
     38a:	8b b1       	in	r24, 0x0b	; 11
     38c:	8f 70       	andi	r24, 0x0F	; 15
     38e:	80 69       	ori	r24, 0x90	; 144
     390:	8b b9       	out	0x0b, r24	; 11
     392:	0f 90       	pop	r0
     394:	0f 90       	pop	r0
     396:	0f 90       	pop	r0
     398:	0f 90       	pop	r0
     39a:	ff cf       	rjmp	.-2      	; 0x39a <EVENT_USB_Host_HostError+0x38>

0000039c <EVENT_USB_Host_DeviceUnattached>:
/** Event handler for the USB_DeviceUnattached event. This indicates that a device has been removed from the host, and
 *  stops the library USB task management process.
 */
void EVENT_USB_Host_DeviceUnattached(void)
{
	puts_P(PSTR("\r\nDevice Unattached.\r\n"));
     39c:	85 ee       	ldi	r24, 0xE5	; 229
     39e:	91 e0       	ldi	r25, 0x01	; 1
     3a0:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <puts_P>
     3a4:	8b b1       	in	r24, 0x0b	; 11
     3a6:	8f 70       	andi	r24, 0x0F	; 15
     3a8:	80 61       	ori	r24, 0x10	; 16
     3aa:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
}
     3ac:	08 95       	ret

000003ae <EVENT_USB_Host_DeviceAttached>:
/** Event handler for the USB_DeviceAttached event. This indicates that a device has been attached to the host, and
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Host_DeviceAttached(void)
{
	puts_P(PSTR("Device Attached.\r\n"));
     3ae:	8c ef       	ldi	r24, 0xFC	; 252
     3b0:	91 e0       	ldi	r25, 0x01	; 1
     3b2:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <puts_P>
     3b6:	8b b1       	in	r24, 0x0b	; 11
     3b8:	8f 70       	andi	r24, 0x0F	; 15
     3ba:	80 6a       	ori	r24, 0xA0	; 160
     3bc:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
}
     3be:	08 95       	ret

000003c0 <EVENT_USB_Host_DeviceEnumerationComplete>:

/** Event handler for the USB_DeviceEnumerationComplete event. This indicates that a device has been successfully
 *  enumerated by the host and is now ready to be used by the application.
 */
void EVENT_USB_Host_DeviceEnumerationComplete(void)
{
     3c0:	0f 93       	push	r16
     3c2:	1f 93       	push	r17
     3c4:	df 93       	push	r29
     3c6:	cf 93       	push	r28
     3c8:	cd b7       	in	r28, 0x3d	; 61
     3ca:	de b7       	in	r29, 0x3e	; 62
     3cc:	c2 50       	subi	r28, 0x02	; 2
     3ce:	d2 40       	sbci	r29, 0x02	; 2
     3d0:	0f b6       	in	r0, 0x3f	; 63
     3d2:	f8 94       	cli
     3d4:	de bf       	out	0x3e, r29	; 62
     3d6:	0f be       	out	0x3f, r0	; 63
     3d8:	cd bf       	out	0x3d, r28	; 61
     3da:	8b b1       	in	r24, 0x0b	; 11
     3dc:	8f 70       	andi	r24, 0x0F	; 15
     3de:	80 6a       	ori	r24, 0xA0	; 160
     3e0:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);

	uint16_t ConfigDescriptorSize;
	uint8_t  ConfigDescriptorData[512];

	if (USB_Host_GetDeviceConfigDescriptor(1, &ConfigDescriptorSize, ConfigDescriptorData,
     3e2:	8e 01       	movw	r16, r28
     3e4:	0d 5f       	subi	r16, 0xFD	; 253
     3e6:	1f 4f       	sbci	r17, 0xFF	; 255
     3e8:	81 e0       	ldi	r24, 0x01	; 1
     3ea:	be 01       	movw	r22, r28
     3ec:	6f 5f       	subi	r22, 0xFF	; 255
     3ee:	7f 4f       	sbci	r23, 0xFF	; 255
     3f0:	a8 01       	movw	r20, r16
     3f2:	20 e0       	ldi	r18, 0x00	; 0
     3f4:	32 e0       	ldi	r19, 0x02	; 2
     3f6:	2f d5       	rcall	.+2654   	; 0xe56 <USB_Host_GetDeviceConfigDescriptor>
     3f8:	88 23       	and	r24, r24
     3fa:	19 f0       	breq	.+6      	; 0x402 <EVENT_USB_Host_DeviceEnumerationComplete+0x42>
	                                       sizeof(ConfigDescriptorData)) != HOST_GETCONFIG_Successful)
	{
		puts_P(PSTR("Error Retrieving Configuration Descriptor.\r\n"));
     3fc:	88 eb       	ldi	r24, 0xB8	; 184
     3fe:	91 e0       	ldi	r25, 0x01	; 1
     400:	11 c0       	rjmp	.+34     	; 0x424 <EVENT_USB_Host_DeviceEnumerationComplete+0x64>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (PRNT_Host_ConfigurePipes(&Printer_PRNT_Interface,
     402:	69 81       	ldd	r22, Y+1	; 0x01
     404:	7a 81       	ldd	r23, Y+2	; 0x02
     406:	89 e2       	ldi	r24, 0x29	; 41
     408:	91 e0       	ldi	r25, 0x01	; 1
     40a:	a8 01       	movw	r20, r16
     40c:	e9 d7       	rcall	.+4050   	; 0x13e0 <PRNT_Host_ConfigurePipes>
     40e:	88 23       	and	r24, r24
     410:	19 f0       	breq	.+6      	; 0x418 <EVENT_USB_Host_DeviceEnumerationComplete+0x58>
	                             ConfigDescriptorSize, ConfigDescriptorData) != PRNT_ENUMERROR_NoError)
	{
		puts_P(PSTR("Attached Device Not a Valid Printer Class Device.\r\n"));
     412:	84 e8       	ldi	r24, 0x84	; 132
     414:	91 e0       	ldi	r25, 0x01	; 1
     416:	06 c0       	rjmp	.+12     	; 0x424 <EVENT_USB_Host_DeviceEnumerationComplete+0x64>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (USB_Host_SetDeviceConfiguration(1) != HOST_SENDCONTROL_Successful)
     418:	81 e0       	ldi	r24, 0x01	; 1
     41a:	bf d6       	rcall	.+3454   	; 0x119a <USB_Host_SetDeviceConfiguration>
     41c:	88 23       	and	r24, r24
     41e:	41 f0       	breq	.+16     	; 0x430 <EVENT_USB_Host_DeviceEnumerationComplete+0x70>
	{
		puts_P(PSTR("Error Setting Device Configuration.\r\n"));
     420:	8e e5       	ldi	r24, 0x5E	; 94
     422:	91 e0       	ldi	r25, 0x01	; 1
     424:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <puts_P>
     428:	8b b1       	in	r24, 0x0b	; 11
     42a:	8f 70       	andi	r24, 0x0F	; 15
     42c:	80 69       	ori	r24, 0x90	; 144
     42e:	17 c0       	rjmp	.+46     	; 0x45e <EVENT_USB_Host_DeviceEnumerationComplete+0x9e>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (PRNT_Host_SetBidirectionalMode(&Printer_PRNT_Interface) != HOST_SENDCONTROL_Successful)
     430:	89 e2       	ldi	r24, 0x29	; 41
     432:	91 e0       	ldi	r25, 0x01	; 1
     434:	cd d7       	rcall	.+3994   	; 0x13d0 <PRNT_Host_SetBidirectionalMode>
     436:	88 23       	and	r24, r24
     438:	59 f0       	breq	.+22     	; 0x450 <EVENT_USB_Host_DeviceEnumerationComplete+0x90>
	{
		puts_P(PSTR("Error Setting Bidirectional Mode.\r\n"));
     43a:	8a e3       	ldi	r24, 0x3A	; 58
     43c:	91 e0       	ldi	r25, 0x01	; 1
     43e:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <puts_P>
     442:	8b b1       	in	r24, 0x0b	; 11
     444:	8f 70       	andi	r24, 0x0F	; 15
     446:	80 69       	ori	r24, 0x90	; 144
     448:	8b b9       	out	0x0b, r24	; 11
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		USB_Host_SetDeviceConfiguration(0);
     44a:	80 e0       	ldi	r24, 0x00	; 0
     44c:	a6 d6       	rcall	.+3404   	; 0x119a <USB_Host_SetDeviceConfiguration>
     44e:	08 c0       	rjmp	.+16     	; 0x460 <EVENT_USB_Host_DeviceEnumerationComplete+0xa0>
		return;
	}

	puts_P(PSTR("Printer Device Enumerated.\r\n"));
     450:	8d e1       	ldi	r24, 0x1D	; 29
     452:	91 e0       	ldi	r25, 0x01	; 1
     454:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <puts_P>
     458:	8b b1       	in	r24, 0x0b	; 11
     45a:	8f 70       	andi	r24, 0x0F	; 15
     45c:	80 66       	ori	r24, 0x60	; 96
     45e:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
}
     460:	ce 5f       	subi	r28, 0xFE	; 254
     462:	dd 4f       	sbci	r29, 0xFD	; 253
     464:	0f b6       	in	r0, 0x3f	; 63
     466:	f8 94       	cli
     468:	de bf       	out	0x3e, r29	; 62
     46a:	0f be       	out	0x3f, r0	; 63
     46c:	cd bf       	out	0x3d, r28	; 61
     46e:	cf 91       	pop	r28
     470:	df 91       	pop	r29
     472:	1f 91       	pop	r17
     474:	0f 91       	pop	r16
     476:	08 95       	ret

00000478 <PrinterHost_Task>:

/** Task to manage an enumerated USB printer once connected, to display device
 *  information and print a test PCL page.
 */
void PrinterHost_Task(void)
{
     478:	ef 92       	push	r14
     47a:	ff 92       	push	r15
     47c:	0f 93       	push	r16
     47e:	1f 93       	push	r17
     480:	df 93       	push	r29
     482:	cf 93       	push	r28
     484:	cd b7       	in	r28, 0x3d	; 61
     486:	de b7       	in	r29, 0x3e	; 62
     488:	c5 55       	subi	r28, 0x55	; 85
     48a:	d1 40       	sbci	r29, 0x01	; 1
     48c:	0f b6       	in	r0, 0x3f	; 63
     48e:	f8 94       	cli
     490:	de bf       	out	0x3e, r29	; 62
     492:	0f be       	out	0x3f, r0	; 63
     494:	cd bf       	out	0x3d, r28	; 61
	if (USB_HostState != HOST_STATE_Configured)
     496:	80 91 53 01 	lds	r24, 0x0153
     49a:	8b 30       	cpi	r24, 0x0B	; 11
     49c:	09 f0       	breq	.+2      	; 0x4a0 <PrinterHost_Task+0x28>
     49e:	5f c0       	rjmp	.+190    	; 0x55e <PrinterHost_Task+0xe6>
     4a0:	8b b1       	in	r24, 0x0b	; 11
     4a2:	8f 70       	andi	r24, 0x0F	; 15
     4a4:	80 62       	ori	r24, 0x20	; 32
     4a6:	8b b9       	out	0x0b, r24	; 11
	  return;

	LEDs_SetAllLEDs(LEDMASK_USB_BUSY);

	puts_P(PSTR("Retrieving Device ID...\r\n"));
     4a8:	8a e8       	ldi	r24, 0x8A	; 138
     4aa:	92 e0       	ldi	r25, 0x02	; 2
     4ac:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <puts_P>

	char DeviceIDString[300];
	if (PRNT_Host_GetDeviceID(&Printer_PRNT_Interface, DeviceIDString,
     4b0:	8e 01       	movw	r16, r28
     4b2:	06 5d       	subi	r16, 0xD6	; 214
     4b4:	1f 4f       	sbci	r17, 0xFF	; 255
     4b6:	89 e2       	ldi	r24, 0x29	; 41
     4b8:	91 e0       	ldi	r25, 0x01	; 1
     4ba:	b8 01       	movw	r22, r16
     4bc:	4c e2       	ldi	r20, 0x2C	; 44
     4be:	51 e0       	ldi	r21, 0x01	; 1
     4c0:	c4 d6       	rcall	.+3464   	; 0x124a <PRNT_Host_GetDeviceID>
     4c2:	88 23       	and	r24, r24
     4c4:	19 f0       	breq	.+6      	; 0x4cc <PrinterHost_Task+0x54>
	                          sizeof(DeviceIDString)) != HOST_SENDCONTROL_Successful)
	{
		puts_P(PSTR("Error Getting Device ID.\r\n"));
     4c6:	8f e6       	ldi	r24, 0x6F	; 111
     4c8:	92 e0       	ldi	r25, 0x02	; 2
     4ca:	39 c0       	rjmp	.+114    	; 0x53e <PrinterHost_Task+0xc6>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		USB_Host_SetDeviceConfiguration(0);
		return;
	}

	printf_P(PSTR("Device ID: %s.\r\n"), DeviceIDString);
     4cc:	00 d0       	rcall	.+0      	; 0x4ce <PrinterHost_Task+0x56>
     4ce:	00 d0       	rcall	.+0      	; 0x4d0 <PrinterHost_Task+0x58>
     4d0:	8e e5       	ldi	r24, 0x5E	; 94
     4d2:	92 e0       	ldi	r25, 0x02	; 2
     4d4:	ed b7       	in	r30, 0x3d	; 61
     4d6:	fe b7       	in	r31, 0x3e	; 62
     4d8:	92 83       	std	Z+2, r25	; 0x02
     4da:	81 83       	std	Z+1, r24	; 0x01
     4dc:	14 83       	std	Z+4, r17	; 0x04
     4de:	03 83       	std	Z+3, r16	; 0x03
     4e0:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <printf_P>

	char     TestPageData[] = "\033%-12345X\033E" "LUFA PCL Test Page" "\033E\033%-12345X";
     4e4:	de 01       	movw	r26, r28
     4e6:	11 96       	adiw	r26, 0x01	; 1
     4e8:	e0 e0       	ldi	r30, 0x00	; 0
     4ea:	f1 e0       	ldi	r31, 0x01	; 1
     4ec:	89 e2       	ldi	r24, 0x29	; 41
     4ee:	01 90       	ld	r0, Z+
     4f0:	0d 92       	st	X+, r0
     4f2:	81 50       	subi	r24, 0x01	; 1
     4f4:	e1 f7       	brne	.-8      	; 0x4ee <PrinterHost_Task+0x76>
	uint16_t TestPageLength = strlen(TestPageData);
     4f6:	7e 01       	movw	r14, r28
     4f8:	08 94       	sec
     4fa:	e1 1c       	adc	r14, r1
     4fc:	f1 1c       	adc	r15, r1
     4fe:	f7 01       	movw	r30, r14
     500:	01 90       	ld	r0, Z+
     502:	00 20       	and	r0, r0
     504:	e9 f7       	brne	.-6      	; 0x500 <PrinterHost_Task+0x88>
     506:	8f 01       	movw	r16, r30
     508:	01 50       	subi	r16, 0x01	; 1
     50a:	10 40       	sbci	r17, 0x00	; 0
     50c:	0e 19       	sub	r16, r14
     50e:	1f 09       	sbc	r17, r15

	printf_P(PSTR("Sending Test Page (%d bytes)...\r\n"), TestPageLength);
     510:	8c e3       	ldi	r24, 0x3C	; 60
     512:	92 e0       	ldi	r25, 0x02	; 2
     514:	ed b7       	in	r30, 0x3d	; 61
     516:	fe b7       	in	r31, 0x3e	; 62
     518:	92 83       	std	Z+2, r25	; 0x02
     51a:	81 83       	std	Z+1, r24	; 0x01
     51c:	14 83       	std	Z+4, r17	; 0x04
     51e:	03 83       	std	Z+3, r16	; 0x03
     520:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <printf_P>

	if (PRNT_Host_SendData(&Printer_PRNT_Interface, &TestPageData, TestPageLength) != PIPE_RWSTREAM_NoError)
     524:	0f 90       	pop	r0
     526:	0f 90       	pop	r0
     528:	0f 90       	pop	r0
     52a:	0f 90       	pop	r0
     52c:	89 e2       	ldi	r24, 0x29	; 41
     52e:	91 e0       	ldi	r25, 0x01	; 1
     530:	b7 01       	movw	r22, r14
     532:	a8 01       	movw	r20, r16
     534:	ea d6       	rcall	.+3540   	; 0x130a <PRNT_Host_SendData>
     536:	88 23       	and	r24, r24
     538:	41 f0       	breq	.+16     	; 0x54a <PrinterHost_Task+0xd2>
	{
		puts_P(PSTR("Error Sending Page Data.\r\n"));
     53a:	81 e2       	ldi	r24, 0x21	; 33
     53c:	92 e0       	ldi	r25, 0x02	; 2
     53e:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <puts_P>
     542:	8b b1       	in	r24, 0x0b	; 11
     544:	8f 70       	andi	r24, 0x0F	; 15
     546:	80 69       	ori	r24, 0x90	; 144
     548:	07 c0       	rjmp	.+14     	; 0x558 <PrinterHost_Task+0xe0>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		USB_Host_SetDeviceConfiguration(0);
		return;
	}

	puts_P(PSTR("Test Page Sent.\r\n"));
     54a:	8f e0       	ldi	r24, 0x0F	; 15
     54c:	92 e0       	ldi	r25, 0x02	; 2
     54e:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <puts_P>
     552:	8b b1       	in	r24, 0x0b	; 11
     554:	8f 70       	andi	r24, 0x0F	; 15
     556:	80 66       	ori	r24, 0x60	; 96
     558:	8b b9       	out	0x0b, r24	; 11

	LEDs_SetAllLEDs(LEDMASK_USB_READY);
	USB_Host_SetDeviceConfiguration(0);
     55a:	80 e0       	ldi	r24, 0x00	; 0
     55c:	1e d6       	rcall	.+3132   	; 0x119a <USB_Host_SetDeviceConfiguration>
}
     55e:	cb 5a       	subi	r28, 0xAB	; 171
     560:	de 4f       	sbci	r29, 0xFE	; 254
     562:	0f b6       	in	r0, 0x3f	; 63
     564:	f8 94       	cli
     566:	de bf       	out	0x3e, r29	; 62
     568:	0f be       	out	0x3f, r0	; 63
     56a:	cd bf       	out	0x3d, r28	; 61
     56c:	cf 91       	pop	r28
     56e:	df 91       	pop	r29
     570:	1f 91       	pop	r17
     572:	0f 91       	pop	r16
     574:	ff 90       	pop	r15
     576:	ef 90       	pop	r14
     578:	08 95       	ret

0000057a <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     57a:	84 b7       	in	r24, 0x34	; 52
     57c:	87 7f       	andi	r24, 0xF7	; 247
     57e:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     580:	38 e1       	ldi	r19, 0x18	; 24
     582:	0f b6       	in	r0, 0x3f	; 63
     584:	f8 94       	cli
     586:	30 93 60 00 	sts	0x0060, r19
     58a:	10 92 60 00 	sts	0x0060, r1
     58e:	0f be       	out	0x3f, r0	; 63

	/* Disable clock division */
	clock_prescale_set(clock_div_1);
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	20 e8       	ldi	r18, 0x80	; 128
     596:	0f b6       	in	r0, 0x3f	; 63
     598:	f8 94       	cli
     59a:	20 93 61 00 	sts	0x0061, r18
     59e:	80 93 61 00 	sts	0x0061, r24
     5a2:	0f be       	out	0x3f, r0	; 63
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     5a4:	83 e3       	ldi	r24, 0x33	; 51
     5a6:	90 e0       	ldi	r25, 0x00	; 0
     5a8:	90 93 cd 00 	sts	0x00CD, r25
     5ac:	80 93 cc 00 	sts	0x00CC, r24

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     5b0:	86 e0       	ldi	r24, 0x06	; 6
     5b2:	80 93 ca 00 	sts	0x00CA, r24
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     5b6:	10 92 c8 00 	sts	0x00C8, r1
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     5ba:	30 93 c9 00 	sts	0x00C9, r19

				DDRD  |= (1 << 3);
     5be:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     5c0:	5a 9a       	sbi	0x0b, 2	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     5c2:	8a b1       	in	r24, 0x0a	; 10
     5c4:	80 6f       	ori	r24, 0xF0	; 240
     5c6:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     5c8:	8b b1       	in	r24, 0x0b	; 11
     5ca:	8f 70       	andi	r24, 0x0F	; 15
     5cc:	8b b9       	out	0x0b, r24	; 11

	/* Hardware Initialization */
	Serial_Init(9600, false);
	LEDs_Init();
	USB_Init();
     5ce:	e7 d2       	rcall	.+1486   	; 0xb9e <USB_Init>
			static inline void Serial_CreateStream(FILE* Stream)
			{
				if (!(Stream))
				{
					Stream = &USARTSerialStream;
					stdin  = Stream;
     5d0:	e4 e5       	ldi	r30, 0x54	; 84
     5d2:	f1 e0       	ldi	r31, 0x01	; 1
     5d4:	f0 93 63 01 	sts	0x0163, r31
     5d8:	e0 93 62 01 	sts	0x0162, r30
					stdout = Stream;
     5dc:	f0 93 65 01 	sts	0x0165, r31
     5e0:	e0 93 64 01 	sts	0x0164, r30
				}
			
				*Stream = (FILE)FDEV_SETUP_STREAM(Serial_putchar, Serial_getchar, _FDEV_SETUP_RW);
     5e4:	8e e0       	ldi	r24, 0x0E	; 14
     5e6:	df 01       	movw	r26, r30
     5e8:	1d 92       	st	X+, r1
     5ea:	8a 95       	dec	r24
     5ec:	e9 f7       	brne	.-6      	; 0x5e8 <SetupHardware+0x6e>
     5ee:	83 e0       	ldi	r24, 0x03	; 3
     5f0:	80 93 57 01 	sts	0x0157, r24
     5f4:	80 ea       	ldi	r24, 0xA0	; 160
     5f6:	9a e0       	ldi	r25, 0x0A	; 10
     5f8:	90 93 5d 01 	sts	0x015D, r25
     5fc:	80 93 5c 01 	sts	0x015C, r24
     600:	8a ea       	ldi	r24, 0xAA	; 170
     602:	9a e0       	ldi	r25, 0x0A	; 10
     604:	90 93 5f 01 	sts	0x015F, r25
     608:	80 93 5e 01 	sts	0x015E, r24

	/* Create a stdio stream for the serial port for stdin and stdout */
	Serial_CreateStream(NULL);
}
     60c:	08 95       	ret

0000060e <main>:
/** Main program entry point. This routine configures the hardware required by the application, then
 *  enters a loop to run the application tasks in sequence.
 */
int main(void)
{
	SetupHardware();
     60e:	b5 df       	rcall	.-150    	; 0x57a <SetupHardware>

	puts_P(PSTR(ESC_FG_CYAN "Printer Host Demo running.\r\n" ESC_FG_WHITE));
     610:	84 ea       	ldi	r24, 0xA4	; 164
     612:	92 e0       	ldi	r25, 0x02	; 2
     614:	ef d7       	rcall	.+4062   	; 0x15f4 <puts_P>
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     616:	8b b1       	in	r24, 0x0b	; 11
     618:	8f 70       	andi	r24, 0x0F	; 15
     61a:	80 61       	ori	r24, 0x10	; 16
     61c:	8b b9       	out	0x0b, r24	; 11

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
	sei();
     61e:	78 94       	sei

	for (;;)
	{
		PrinterHost_Task();
     620:	2b df       	rcall	.-426    	; 0x478 <PrinterHost_Task>

		PRNT_Host_USBTask(&Printer_PRNT_Interface);
     622:	89 e2       	ldi	r24, 0x29	; 41
     624:	91 e0       	ldi	r25, 0x01	; 1
     626:	c9 d6       	rcall	.+3474   	; 0x13ba <PRNT_Host_USBTask>
		USB_USBTask();
     628:	dd d5       	rcall	.+3002   	; 0x11e4 <USB_USBTask>
     62a:	fa cf       	rjmp	.-12     	; 0x620 <main+0x12>

0000062c <USB_Host_WaitMS>:
		USB_ResetInterface();
	}
}

uint8_t USB_Host_WaitMS(uint8_t MS)
{
     62c:	98 2f       	mov	r25, r24
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     62e:	20 91 9e 00 	lds	r18, 0x009E
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     632:	30 91 a0 00 	lds	r19, 0x00A0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     636:	80 91 a0 00 	lds	r24, 0x00A0
     63a:	8f 7d       	andi	r24, 0xDF	; 223
     63c:	80 93 a0 00 	sts	0x00A0, r24
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     640:	80 91 9f 00 	lds	r24, 0x009F
     644:	8f 7d       	andi	r24, 0xDF	; 223
     646:	80 93 9f 00 	sts	0x009F, r24
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     64a:	80 91 9e 00 	lds	r24, 0x009E
     64e:	81 60       	ori	r24, 0x01	; 1
     650:	80 93 9e 00 	sts	0x009E, r24
     654:	28 c0       	rjmp	.+80     	; 0x6a6 <USB_Host_WaitMS+0x7a>
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     656:	80 91 9f 00 	lds	r24, 0x009F

	USB_Host_ResumeBus();

	while (MS)
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     65a:	85 ff       	sbrs	r24, 5
     65c:	06 c0       	rjmp	.+12     	; 0x66a <USB_Host_WaitMS+0x3e>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     65e:	80 91 9f 00 	lds	r24, 0x009F
     662:	8f 7d       	andi	r24, 0xDF	; 223
     664:	80 93 9f 00 	sts	0x009F, r24
		{
			USB_INT_Clear(USB_INT_HSOFI);
			MS--;
     668:	91 50       	subi	r25, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
     66a:	80 91 53 01 	lds	r24, 0x0153
     66e:	81 30       	cpi	r24, 0x01	; 1
     670:	11 f4       	brne	.+4      	; 0x676 <USB_Host_WaitMS+0x4a>
     672:	91 e0       	ldi	r25, 0x01	; 1
     674:	1a c0       	rjmp	.+52     	; 0x6aa <USB_Host_WaitMS+0x7e>
			 *  \return Boolean \c true if an error has occurred on the selected pipe, \c false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
     676:	80 91 a6 00 	lds	r24, 0x00A6
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError() == true)
     67a:	84 ff       	sbrs	r24, 4
     67c:	09 c0       	rjmp	.+18     	; 0x690 <USB_Host_WaitMS+0x64>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     67e:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
     682:	80 91 a6 00 	lds	r24, 0x00A6
     686:	8f 7e       	andi	r24, 0xEF	; 239
     688:	80 93 a6 00 	sts	0x00A6, r24
     68c:	92 e0       	ldi	r25, 0x02	; 2
     68e:	0d c0       	rjmp	.+26     	; 0x6aa <USB_Host_WaitMS+0x7e>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     690:	80 91 a6 00 	lds	r24, 0x00A6
			ErrorCode = HOST_WAITERROR_PipeError;

			break;
		}

		if (Pipe_IsStalled() == true)
     694:	81 ff       	sbrs	r24, 1
     696:	07 c0       	rjmp	.+14     	; 0x6a6 <USB_Host_WaitMS+0x7a>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
     698:	80 91 a6 00 	lds	r24, 0x00A6
     69c:	8d 7f       	andi	r24, 0xFD	; 253
     69e:	80 93 a6 00 	sts	0x00A6, r24
     6a2:	93 e0       	ldi	r25, 0x03	; 3
     6a4:	02 c0       	rjmp	.+4      	; 0x6aa <USB_Host_WaitMS+0x7e>
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     6a6:	99 23       	and	r25, r25
     6a8:	b1 f6       	brne	.-84     	; 0x656 <USB_Host_WaitMS+0x2a>

			break;
		}
	}

	if (BusSuspended)
     6aa:	20 fd       	sbrc	r18, 0
     6ac:	05 c0       	rjmp	.+10     	; 0x6b8 <USB_Host_WaitMS+0x8c>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     6ae:	80 91 9e 00 	lds	r24, 0x009E
     6b2:	8e 7f       	andi	r24, 0xFE	; 254
     6b4:	80 93 9e 00 	sts	0x009E, r24
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
     6b8:	35 ff       	sbrs	r19, 5
     6ba:	05 c0       	rjmp	.+10     	; 0x6c6 <USB_Host_WaitMS+0x9a>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     6bc:	80 91 a0 00 	lds	r24, 0x00A0
     6c0:	80 62       	ori	r24, 0x20	; 32
     6c2:	80 93 a0 00 	sts	0x00A0, r24
	  USB_INT_Enable(USB_INT_HSOFI);

	return ErrorCode;
}
     6c6:	89 2f       	mov	r24, r25
     6c8:	08 95       	ret

000006ca <USB_Host_ResetDevice>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     6ca:	60 91 9e 00 	lds	r22, 0x009E
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     6ce:	80 91 a0 00 	lds	r24, 0x00A0
     6d2:	8d 7f       	andi	r24, 0xFD	; 253
     6d4:	80 93 a0 00 	sts	0x00A0, r24
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
     6d8:	80 91 9e 00 	lds	r24, 0x009E
     6dc:	82 60       	ori	r24, 0x02	; 2
     6de:	80 93 9e 00 	sts	0x009E, r24
			 *  \return Boolean \c true if no bus reset is currently being sent, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
     6e2:	80 91 9e 00 	lds	r24, 0x009E
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
     6e6:	81 fd       	sbrc	r24, 1
     6e8:	fc cf       	rjmp	.-8      	; 0x6e2 <USB_Host_ResetDevice+0x18>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     6ea:	80 91 9e 00 	lds	r24, 0x009E
     6ee:	81 60       	ori	r24, 0x01	; 1
     6f0:	80 93 9e 00 	sts	0x009E, r24
	USB_Host_ResumeBus();
	
	USB_Host_ConfigurationNumber = 0;
     6f4:	10 92 49 01 	sts	0x0149, r1
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     6f8:	30 91 a0 00 	lds	r19, 0x00A0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     6fc:	80 91 a0 00 	lds	r24, 0x00A0
     700:	8f 7d       	andi	r24, 0xDF	; 223
     702:	80 93 a0 00 	sts	0x00A0, r24
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     706:	80 91 9f 00 	lds	r24, 0x009F
     70a:	8f 7d       	andi	r24, 0xDF	; 223
     70c:	80 93 9f 00 	sts	0x009F, r24
     710:	2a e0       	ldi	r18, 0x0A	; 10
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     712:	40 ed       	ldi	r20, 0xD0	; 208
     714:	57 e0       	ldi	r21, 0x07	; 7
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     716:	80 91 9f 00 	lds	r24, 0x009F
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     71a:	85 ff       	sbrs	r24, 5
     71c:	0b c0       	rjmp	.+22     	; 0x734 <USB_Host_ResetDevice+0x6a>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     71e:	80 91 9f 00 	lds	r24, 0x009F
     722:	8f 7d       	andi	r24, 0xDF	; 223
     724:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     728:	80 91 9f 00 	lds	r24, 0x009F
     72c:	8d 7f       	andi	r24, 0xFD	; 253
     72e:	80 93 9f 00 	sts	0x009F, r24
     732:	05 c0       	rjmp	.+10     	; 0x73e <USB_Host_ResetDevice+0x74>
     734:	ca 01       	movw	r24, r20
     736:	01 97       	sbiw	r24, 0x01	; 1
     738:	f1 f7       	brne	.-4      	; 0x736 <USB_Host_ResetDevice+0x6c>
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
     73a:	21 50       	subi	r18, 0x01	; 1
     73c:	61 f7       	brne	.-40     	; 0x716 <USB_Host_ResetDevice+0x4c>
		}

		Delay_MS(1);
	}

	if (HSOFIEnabled)
     73e:	35 ff       	sbrs	r19, 5
     740:	05 c0       	rjmp	.+10     	; 0x74c <USB_Host_ResetDevice+0x82>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     742:	80 91 a0 00 	lds	r24, 0x00A0
     746:	80 62       	ori	r24, 0x20	; 32
     748:	80 93 a0 00 	sts	0x00A0, r24
	  USB_INT_Enable(USB_INT_HSOFI);

	if (BusSuspended)
     74c:	60 fd       	sbrc	r22, 0
     74e:	05 c0       	rjmp	.+10     	; 0x75a <USB_Host_ResetDevice+0x90>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     750:	80 91 9e 00 	lds	r24, 0x009E
     754:	8e 7f       	andi	r24, 0xFE	; 254
     756:	80 93 9e 00 	sts	0x009E, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     75a:	80 91 a0 00 	lds	r24, 0x00A0
     75e:	82 60       	ori	r24, 0x02	; 2
     760:	80 93 a0 00 	sts	0x00A0, r24
	  USB_Host_SuspendBus();

	USB_INT_Enable(USB_INT_DDISCI);
}
     764:	08 95       	ret

00000766 <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "../Host.h"

void USB_Host_ProcessNextHostState(void)
{
     766:	ef 92       	push	r14
     768:	0f 93       	push	r16
     76a:	1f 93       	push	r17
     76c:	df 93       	push	r29
     76e:	cf 93       	push	r28
     770:	cd b7       	in	r28, 0x3d	; 61
     772:	de b7       	in	r29, 0x3e	; 62
     774:	28 97       	sbiw	r28, 0x08	; 8
     776:	0f b6       	in	r0, 0x3f	; 63
     778:	f8 94       	cli
     77a:	de bf       	out	0x3e, r29	; 62
     77c:	0f be       	out	0x3f, r0	; 63
     77e:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
     780:	80 91 53 01 	lds	r24, 0x0153
     784:	85 30       	cpi	r24, 0x05	; 5
     786:	09 f4       	brne	.+2      	; 0x78a <USB_Host_ProcessNextHostState+0x24>
     788:	94 c0       	rjmp	.+296    	; 0x8b2 <USB_Host_ProcessNextHostState+0x14c>
     78a:	86 30       	cpi	r24, 0x06	; 6
     78c:	68 f4       	brcc	.+26     	; 0x7a8 <USB_Host_ProcessNextHostState+0x42>
     78e:	82 30       	cpi	r24, 0x02	; 2
     790:	b9 f1       	breq	.+110    	; 0x800 <USB_Host_ProcessNextHostState+0x9a>
     792:	83 30       	cpi	r24, 0x03	; 3
     794:	18 f4       	brcc	.+6      	; 0x79c <USB_Host_ProcessNextHostState+0x36>
     796:	88 23       	and	r24, r24
     798:	a1 f0       	breq	.+40     	; 0x7c2 <USB_Host_ProcessNextHostState+0x5c>
     79a:	04 c1       	rjmp	.+520    	; 0x9a4 <USB_Host_ProcessNextHostState+0x23e>
     79c:	83 30       	cpi	r24, 0x03	; 3
     79e:	d1 f1       	breq	.+116    	; 0x814 <USB_Host_ProcessNextHostState+0xae>
     7a0:	84 30       	cpi	r24, 0x04	; 4
     7a2:	09 f0       	breq	.+2      	; 0x7a6 <USB_Host_ProcessNextHostState+0x40>
     7a4:	ff c0       	rjmp	.+510    	; 0x9a4 <USB_Host_ProcessNextHostState+0x23e>
     7a6:	5d c0       	rjmp	.+186    	; 0x862 <USB_Host_ProcessNextHostState+0xfc>
     7a8:	87 30       	cpi	r24, 0x07	; 7
     7aa:	09 f4       	brne	.+2      	; 0x7ae <USB_Host_ProcessNextHostState+0x48>
     7ac:	9b c0       	rjmp	.+310    	; 0x8e4 <USB_Host_ProcessNextHostState+0x17e>
     7ae:	87 30       	cpi	r24, 0x07	; 7
     7b0:	08 f4       	brcc	.+2      	; 0x7b4 <USB_Host_ProcessNextHostState+0x4e>
     7b2:	8a c0       	rjmp	.+276    	; 0x8c8 <USB_Host_ProcessNextHostState+0x162>
     7b4:	88 30       	cpi	r24, 0x08	; 8
     7b6:	09 f4       	brne	.+2      	; 0x7ba <USB_Host_ProcessNextHostState+0x54>
     7b8:	b3 c0       	rjmp	.+358    	; 0x920 <USB_Host_ProcessNextHostState+0x1ba>
     7ba:	89 30       	cpi	r24, 0x09	; 9
     7bc:	09 f0       	breq	.+2      	; 0x7c0 <USB_Host_ProcessNextHostState+0x5a>
     7be:	f2 c0       	rjmp	.+484    	; 0x9a4 <USB_Host_ProcessNextHostState+0x23e>
     7c0:	d7 c0       	rjmp	.+430    	; 0x970 <USB_Host_ProcessNextHostState+0x20a>
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
     7c2:	00 91 47 01 	lds	r16, 0x0147
     7c6:	10 91 48 01 	lds	r17, 0x0148
     7ca:	01 15       	cp	r16, r1
     7cc:	11 05       	cpc	r17, r1
     7ce:	09 f4       	brne	.+2      	; 0x7d2 <USB_Host_ProcessNextHostState+0x6c>
     7d0:	e9 c0       	rjmp	.+466    	; 0x9a4 <USB_Host_ProcessNextHostState+0x23e>
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     7d2:	81 e0       	ldi	r24, 0x01	; 1
     7d4:	2b df       	rcall	.-426    	; 0x62c <USB_Host_WaitMS>
     7d6:	68 2f       	mov	r22, r24
     7d8:	88 23       	and	r24, r24
     7da:	31 f0       	breq	.+12     	; 0x7e8 <USB_Host_ProcessNextHostState+0x82>
				{
					USB_HostState = PostWaitState;
     7dc:	80 91 46 01 	lds	r24, 0x0146
     7e0:	80 93 53 01 	sts	0x0153, r24
     7e4:	91 e0       	ldi	r25, 0x01	; 1
     7e6:	da c0       	rjmp	.+436    	; 0x99c <USB_Host_ProcessNextHostState+0x236>
					ErrorCode     = HOST_ENUMERROR_WaitStage;
					break;
				}

				if (!(--WaitMSRemaining))
     7e8:	c8 01       	movw	r24, r16
     7ea:	01 97       	sbiw	r24, 0x01	; 1
     7ec:	90 93 48 01 	sts	0x0148, r25
     7f0:	80 93 47 01 	sts	0x0147, r24
     7f4:	89 2b       	or	r24, r25
     7f6:	09 f0       	breq	.+2      	; 0x7fa <USB_Host_ProcessNextHostState+0x94>
     7f8:	d5 c0       	rjmp	.+426    	; 0x9a4 <USB_Host_ProcessNextHostState+0x23e>
				  USB_HostState = PostWaitState;
     7fa:	80 91 46 01 	lds	r24, 0x0146
     7fe:	07 c0       	rjmp	.+14     	; 0x80e <USB_Host_ProcessNextHostState+0xa8>
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
     800:	88 ee       	ldi	r24, 0xE8	; 232
     802:	93 e0       	ldi	r25, 0x03	; 3
     804:	90 93 48 01 	sts	0x0148, r25
     808:	80 93 47 01 	sts	0x0147, r24

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
     80c:	83 e0       	ldi	r24, 0x03	; 3
     80e:	80 93 53 01 	sts	0x0153, r24
     812:	c8 c0       	rjmp	.+400    	; 0x9a4 <USB_Host_ProcessNextHostState+0x23e>
			break;
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
     814:	80 91 47 01 	lds	r24, 0x0147
     818:	90 91 48 01 	lds	r25, 0x0148
     81c:	01 97       	sbiw	r24, 0x01	; 1
     81e:	90 93 48 01 	sts	0x0148, r25
     822:	80 93 47 01 	sts	0x0147, r24
     826:	01 96       	adiw	r24, 0x01	; 1
     828:	29 f0       	breq	.+10     	; 0x834 <USB_Host_ProcessNextHostState+0xce>
     82a:	80 ed       	ldi	r24, 0xD0	; 208
     82c:	97 e0       	ldi	r25, 0x07	; 7
     82e:	01 97       	sbiw	r24, 0x01	; 1
     830:	f1 f7       	brne	.-4      	; 0x82e <USB_Host_ProcessNextHostState+0xc8>
     832:	b8 c0       	rjmp	.+368    	; 0x9a4 <USB_Host_ProcessNextHostState+0x23e>
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
     834:	77 98       	cbi	0x0e, 7	; 14

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     836:	80 91 d8 00 	lds	r24, 0x00D8
     83a:	80 61       	ori	r24, 0x10	; 16
     83c:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
     840:	80 91 dd 00 	lds	r24, 0x00DD
     844:	8b 7f       	andi	r24, 0xFB	; 251
     846:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON |=  (1 << UVCONE);
     84a:	80 91 d7 00 	lds	r24, 0x00D7
     84e:	80 61       	ori	r24, 0x10	; 16
     850:	80 93 d7 00 	sts	0x00D7, r24
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
     854:	80 91 dd 00 	lds	r24, 0x00DD
     858:	82 60       	ori	r24, 0x02	; 2
     85a:	80 93 dd 00 	sts	0x00DD, r24

				USB_OTGPAD_On();
				USB_Host_VBUS_Auto_Enable();
				USB_Host_VBUS_Auto_On();

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
     85e:	84 e0       	ldi	r24, 0x04	; 4
     860:	d6 cf       	rjmp	.-84     	; 0x80e <USB_Host_ProcessNextHostState+0xa8>
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
     862:	80 91 9f 00 	lds	r24, 0x009F
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
     866:	80 ff       	sbrs	r24, 0
     868:	9d c0       	rjmp	.+314    	; 0x9a4 <USB_Host_ProcessNextHostState+0x23e>
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     86a:	80 91 9f 00 	lds	r24, 0x009F
     86e:	8e 7f       	andi	r24, 0xFE	; 254
     870:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     874:	80 91 9f 00 	lds	r24, 0x009F
     878:	8d 7f       	andi	r24, 0xFD	; 253
     87a:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     87e:	80 91 df 00 	lds	r24, 0x00DF
     882:	8d 7f       	andi	r24, 0xFD	; 253
     884:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
     888:	80 91 de 00 	lds	r24, 0x00DE
     88c:	82 60       	ori	r24, 0x02	; 2
     88e:	80 93 de 00 	sts	0x00DE, r24
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     892:	80 91 9e 00 	lds	r24, 0x009E
     896:	81 60       	ori	r24, 0x01	; 1
     898:	80 93 9e 00 	sts	0x009E, r24

				USB_INT_Clear(USB_INT_VBERRI);
				USB_INT_Enable(USB_INT_VBERRI);

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
     89c:	ed d0       	rcall	.+474    	; 0xa78 <Pipe_ClearPipes>

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
     89e:	10 92 53 01 	sts	0x0153, r1
     8a2:	84 e6       	ldi	r24, 0x64	; 100
     8a4:	90 e0       	ldi	r25, 0x00	; 0
     8a6:	90 93 48 01 	sts	0x0148, r25
     8aa:	80 93 47 01 	sts	0x0147, r24
     8ae:	85 e0       	ldi	r24, 0x05	; 5
     8b0:	5c c0       	rjmp	.+184    	; 0x96a <USB_Host_ProcessNextHostState+0x204>
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
     8b2:	0b df       	rcall	.-490    	; 0x6ca <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
     8b4:	10 92 53 01 	sts	0x0153, r1
     8b8:	88 ec       	ldi	r24, 0xC8	; 200
     8ba:	90 e0       	ldi	r25, 0x00	; 0
     8bc:	90 93 48 01 	sts	0x0148, r25
     8c0:	80 93 47 01 	sts	0x0147, r24
     8c4:	86 e0       	ldi	r24, 0x06	; 6
     8c6:	51 c0       	rjmp	.+162    	; 0x96a <USB_Host_ProcessNextHostState+0x204>
			break;
		case HOST_STATE_Powered_ConfigPipe:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
     8c8:	80 e0       	ldi	r24, 0x00	; 0
     8ca:	60 e0       	ldi	r22, 0x00	; 0
     8cc:	40 e0       	ldi	r20, 0x00	; 0
     8ce:	20 e0       	ldi	r18, 0x00	; 0
     8d0:	00 e4       	ldi	r16, 0x40	; 64
     8d2:	10 e0       	ldi	r17, 0x00	; 0
     8d4:	ee 24       	eor	r14, r14
     8d6:	72 d0       	rcall	.+228    	; 0x9bc <Pipe_ConfigurePipe>
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     8d8:	80 91 ac 00 	lds	r24, 0x00AC
							   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
							   PIPE_CONTROLPIPE_DEFAULT_SIZE, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
     8dc:	87 ff       	sbrs	r24, 7
     8de:	5c c0       	rjmp	.+184    	; 0x998 <USB_Host_ProcessNextHostState+0x232>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
     8e0:	87 e0       	ldi	r24, 0x07	; 7
     8e2:	95 cf       	rjmp	.-214    	; 0x80e <USB_Host_ProcessNextHostState+0xa8>
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
     8e4:	ab e4       	ldi	r26, 0x4B	; 75
     8e6:	b1 e0       	ldi	r27, 0x01	; 1
     8e8:	ec e3       	ldi	r30, 0x3C	; 60
     8ea:	f1 e0       	ldi	r31, 0x01	; 1
     8ec:	88 e0       	ldi	r24, 0x08	; 8
     8ee:	01 90       	ld	r0, Z+
     8f0:	0d 92       	st	X+, r0
     8f2:	81 50       	subi	r24, 0x01	; 1
     8f4:	e1 f7       	brne	.-8      	; 0x8ee <USB_Host_ProcessNextHostState+0x188>
					.wLength       = 8,
				};

			uint8_t DataBuffer[8];

			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
     8f6:	ce 01       	movw	r24, r28
     8f8:	01 96       	adiw	r24, 0x01	; 1
     8fa:	31 d3       	rcall	.+1634   	; 0xf5e <USB_Host_SendControlRequest>
     8fc:	68 2f       	mov	r22, r24
     8fe:	88 23       	and	r24, r24
     900:	09 f0       	breq	.+2      	; 0x904 <USB_Host_ProcessNextHostState+0x19e>
     902:	48 c0       	rjmp	.+144    	; 0x994 <USB_Host_ProcessNextHostState+0x22e>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_Host_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
     904:	88 85       	ldd	r24, Y+8	; 0x08
     906:	80 93 44 01 	sts	0x0144, r24

			USB_Host_ResetDevice();
     90a:	df de       	rcall	.-578    	; 0x6ca <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
     90c:	10 92 53 01 	sts	0x0153, r1
     910:	88 ec       	ldi	r24, 0xC8	; 200
     912:	90 e0       	ldi	r25, 0x00	; 0
     914:	90 93 48 01 	sts	0x0148, r25
     918:	80 93 47 01 	sts	0x0147, r24
     91c:	88 e0       	ldi	r24, 0x08	; 8
     91e:	25 c0       	rjmp	.+74     	; 0x96a <USB_Host_ProcessNextHostState+0x204>
			break;
		case HOST_STATE_Default_PostReset:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
     920:	00 91 44 01 	lds	r16, 0x0144
     924:	80 e0       	ldi	r24, 0x00	; 0
     926:	60 e0       	ldi	r22, 0x00	; 0
     928:	40 e0       	ldi	r20, 0x00	; 0
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	10 e0       	ldi	r17, 0x00	; 0
     92e:	ee 24       	eor	r14, r14
     930:	45 d0       	rcall	.+138    	; 0x9bc <Pipe_ConfigurePipe>
     932:	80 91 ac 00 	lds	r24, 0x00AC
			                   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
			                   USB_Host_ControlPipeSize, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
     936:	87 ff       	sbrs	r24, 7
     938:	2f c0       	rjmp	.+94     	; 0x998 <USB_Host_ProcessNextHostState+0x232>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
     93a:	ab e4       	ldi	r26, 0x4B	; 75
     93c:	b1 e0       	ldi	r27, 0x01	; 1
     93e:	e4 e3       	ldi	r30, 0x34	; 52
     940:	f1 e0       	ldi	r31, 0x01	; 1
     942:	88 e0       	ldi	r24, 0x08	; 8
     944:	01 90       	ld	r0, Z+
     946:	0d 92       	st	X+, r0
     948:	81 50       	subi	r24, 0x01	; 1
     94a:	e1 f7       	brne	.-8      	; 0x944 <USB_Host_ProcessNextHostState+0x1de>
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
     94c:	80 e0       	ldi	r24, 0x00	; 0
     94e:	90 e0       	ldi	r25, 0x00	; 0
     950:	06 d3       	rcall	.+1548   	; 0xf5e <USB_Host_SendControlRequest>
     952:	68 2f       	mov	r22, r24
     954:	88 23       	and	r24, r24
     956:	f1 f4       	brne	.+60     	; 0x994 <USB_Host_ProcessNextHostState+0x22e>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
     958:	10 92 53 01 	sts	0x0153, r1
     95c:	84 e6       	ldi	r24, 0x64	; 100
     95e:	90 e0       	ldi	r25, 0x00	; 0
     960:	90 93 48 01 	sts	0x0148, r25
     964:	80 93 47 01 	sts	0x0147, r24
     968:	89 e0       	ldi	r24, 0x09	; 9
     96a:	80 93 46 01 	sts	0x0146, r24
     96e:	1a c0       	rjmp	.+52     	; 0x9a4 <USB_Host_ProcessNextHostState+0x23e>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
     970:	81 e0       	ldi	r24, 0x01	; 1
     972:	80 93 a1 00 	sts	0x00A1, r24
			break;
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			USB_HostState = HOST_STATE_Addressed;
     976:	8a e0       	ldi	r24, 0x0A	; 10
     978:	80 93 53 01 	sts	0x0153, r24

			EVENT_USB_Host_DeviceEnumerationComplete();
     97c:	21 dd       	rcall	.-1470   	; 0x3c0 <EVENT_USB_Host_DeviceEnumerationComplete>
     97e:	12 c0       	rjmp	.+36     	; 0x9a4 <USB_Host_ProcessNextHostState+0x23e>
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
     980:	89 2f       	mov	r24, r25
     982:	c3 dc       	rcall	.-1658   	; 0x30a <EVENT_USB_Host_DeviceEnumerationFailed>
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     984:	80 91 dd 00 	lds	r24, 0x00DD
     988:	81 60       	ori	r24, 0x01	; 1
     98a:	80 93 dd 00 	sts	0x00DD, r24

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
     98e:	06 dd       	rcall	.-1524   	; 0x39c <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     990:	b6 d0       	rcall	.+364    	; 0xafe <USB_ResetInterface>
     992:	08 c0       	rjmp	.+16     	; 0x9a4 <USB_Host_ProcessNextHostState+0x23e>
	}
}
     994:	93 e0       	ldi	r25, 0x03	; 3
     996:	02 c0       	rjmp	.+4      	; 0x99c <USB_Host_ProcessNextHostState+0x236>
     998:	94 e0       	ldi	r25, 0x04	; 4
     99a:	60 e0       	ldi	r22, 0x00	; 0

			EVENT_USB_Host_DeviceEnumerationComplete();
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
     99c:	80 91 53 01 	lds	r24, 0x0153
     9a0:	81 30       	cpi	r24, 0x01	; 1
     9a2:	71 f7       	brne	.-36     	; 0x980 <USB_Host_ProcessNextHostState+0x21a>

		EVENT_USB_Host_DeviceUnattached();

		USB_ResetInterface();
	}
}
     9a4:	28 96       	adiw	r28, 0x08	; 8
     9a6:	0f b6       	in	r0, 0x3f	; 63
     9a8:	f8 94       	cli
     9aa:	de bf       	out	0x3e, r29	; 62
     9ac:	0f be       	out	0x3f, r0	; 63
     9ae:	cd bf       	out	0x3d, r28	; 61
     9b0:	cf 91       	pop	r28
     9b2:	df 91       	pop	r29
     9b4:	1f 91       	pop	r17
     9b6:	0f 91       	pop	r16
     9b8:	ef 90       	pop	r14
     9ba:	08 95       	ret

000009bc <Pipe_ConfigurePipe>:
                        const uint8_t Type,
                        const uint8_t Token,
                        const uint8_t EndpointNumber,
                        const uint16_t Size,
                        const uint8_t Banks)
{
     9bc:	ef 92       	push	r14
     9be:	0f 93       	push	r16
     9c0:	1f 93       	push	r17
     9c2:	e8 2f       	mov	r30, r24
     9c4:	7e 2d       	mov	r23, r14

		Pipe_SelectPipe(PNum);
		
		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
     9c6:	62 95       	swap	r22
     9c8:	66 0f       	add	r22, r22
     9ca:	66 0f       	add	r22, r22
     9cc:	60 7c       	andi	r22, 0xC0	; 192
     9ce:	64 2b       	or	r22, r20
     9d0:	2f 70       	andi	r18, 0x0F	; 15
     9d2:	62 2b       	or	r22, r18
     9d4:	38 2f       	mov	r19, r24
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     9d6:	72 60       	ori	r23, 0x02	; 2
     9d8:	45 c0       	rjmp	.+138    	; 0xa64 <Pipe_ConfigurePipe+0xa8>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     9da:	30 93 a7 00 	sts	0x00A7, r19
		uint8_t UPCFG2XTemp;
		uint8_t UPIENXTemp;

		Pipe_SelectPipe(PNum);
		
		if (PNum == Number)
     9de:	3e 17       	cp	r19, r30
     9e0:	a1 f4       	brne	.+40     	; 0xa0a <Pipe_ConfigurePipe+0x4e>
     9e2:	88 e0       	ldi	r24, 0x08	; 8
     9e4:	90 e0       	ldi	r25, 0x00	; 0
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	03 c0       	rjmp	.+6      	; 0x9f0 <Pipe_ConfigurePipe+0x34>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
				{
					MaskVal++;
     9ea:	2f 5f       	subi	r18, 0xFF	; 255
					CheckBytes <<= 1;
     9ec:	88 0f       	add	r24, r24
     9ee:	99 1f       	adc	r25, r25
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
     9f0:	80 17       	cp	r24, r16
     9f2:	91 07       	cpc	r25, r17
     9f4:	10 f4       	brcc	.+4      	; 0x9fa <Pipe_ConfigurePipe+0x3e>
     9f6:	25 30       	cpi	r18, 0x05	; 5
     9f8:	c1 f7       	brne	.-16     	; 0x9ea <Pipe_ConfigurePipe+0x2e>
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     9fa:	92 2f       	mov	r25, r18
     9fc:	92 95       	swap	r25
     9fe:	90 7f       	andi	r25, 0xF0	; 240
     a00:	97 2b       	or	r25, r23
     a02:	56 2f       	mov	r21, r22
     a04:	40 e0       	ldi	r20, 0x00	; 0
     a06:	20 e0       	ldi	r18, 0x00	; 0
     a08:	08 c0       	rjmp	.+16     	; 0xa1a <Pipe_ConfigurePipe+0x5e>
			UPCFG2XTemp = 0;
			UPIENXTemp  = 0;
		}
		else
		{
			UPCFG0XTemp = UPCFG0X;
     a0a:	50 91 aa 00 	lds	r21, 0x00AA
			UPCFG1XTemp = UPCFG1X;
     a0e:	90 91 ab 00 	lds	r25, 0x00AB
			UPCFG2XTemp = UPCFG2X;
     a12:	40 91 ad 00 	lds	r20, 0x00AD
			UPIENXTemp  = UPIENX;
     a16:	20 91 ae 00 	lds	r18, 0x00AE
		}

		if (!(UPCFG1XTemp & (1 << ALLOC)))
     a1a:	91 ff       	sbrs	r25, 1
     a1c:	22 c0       	rjmp	.+68     	; 0xa62 <Pipe_ConfigurePipe+0xa6>
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     a1e:	80 91 a9 00 	lds	r24, 0x00A9
     a22:	8e 7f       	andi	r24, 0xFE	; 254
     a24:	80 93 a9 00 	sts	0x00A9, r24
		  continue;
		  
		Pipe_DisablePipe();
		UPCFG1X &= ~(1 << ALLOC);
     a28:	80 91 ab 00 	lds	r24, 0x00AB
     a2c:	8d 7f       	andi	r24, 0xFD	; 253
     a2e:	80 93 ab 00 	sts	0x00AB, r24
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
     a32:	80 91 a9 00 	lds	r24, 0x00A9
     a36:	81 60       	ori	r24, 0x01	; 1
     a38:	80 93 a9 00 	sts	0x00A9, r24

		Pipe_EnablePipe();
		UPCFG0X = UPCFG0XTemp;
     a3c:	50 93 aa 00 	sts	0x00AA, r21
		UPCFG1X = UPCFG1XTemp;
     a40:	90 93 ab 00 	sts	0x00AB, r25
		UPCFG2X = UPCFG2XTemp;
     a44:	40 93 ad 00 	sts	0x00AD, r20
		UPIENX  = UPIENXTemp;
     a48:	20 93 ae 00 	sts	0x00AE, r18

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
     a4c:	80 91 a9 00 	lds	r24, 0x00A9
     a50:	80 62       	ori	r24, 0x20	; 32
     a52:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     a56:	80 91 ac 00 	lds	r24, 0x00AC

		Pipe_SetInfiniteINRequests();
	
		if (!(Pipe_IsConfigured()))
     a5a:	87 fd       	sbrc	r24, 7
     a5c:	02 c0       	rjmp	.+4      	; 0xa62 <Pipe_ConfigurePipe+0xa6>
     a5e:	80 e0       	ldi	r24, 0x00	; 0
     a60:	07 c0       	rjmp	.+14     	; 0xa70 <Pipe_ConfigurePipe+0xb4>

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else	
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
     a62:	3f 5f       	subi	r19, 0xFF	; 255
     a64:	37 30       	cpi	r19, 0x07	; 7
     a66:	08 f4       	brcc	.+2      	; 0xa6a <Pipe_ConfigurePipe+0xae>
     a68:	b8 cf       	rjmp	.-144    	; 0x9da <Pipe_ConfigurePipe+0x1e>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     a6a:	e0 93 a7 00 	sts	0x00A7, r30
     a6e:	81 e0       	ldi	r24, 0x01	; 1
	}
		
	Pipe_SelectPipe(Number);	
	return true;
#endif
}
     a70:	1f 91       	pop	r17
     a72:	0f 91       	pop	r16
     a74:	ef 90       	pop	r14
     a76:	08 95       	ret

00000a78 <Pipe_ClearPipes>:

void Pipe_ClearPipes(void)
{
	UPINT = 0;
     a78:	10 92 f8 00 	sts	0x00F8, r1
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	90 93 a7 00 	sts	0x00A7, r25

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
     a82:	10 92 ae 00 	sts	0x00AE, r1
		UPINTX  = 0;
     a86:	10 92 a6 00 	sts	0x00A6, r1
		UPCFG1X = 0;
     a8a:	10 92 ab 00 	sts	0x00AB, r1
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     a8e:	80 91 a9 00 	lds	r24, 0x00A9
     a92:	8e 7f       	andi	r24, 0xFE	; 254
     a94:	80 93 a9 00 	sts	0x00A9, r24

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     a98:	9f 5f       	subi	r25, 0xFF	; 255
     a9a:	97 30       	cpi	r25, 0x07	; 7
     a9c:	81 f7       	brne	.-32     	; 0xa7e <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
     a9e:	08 95       	ret

00000aa0 <Pipe_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
     aa0:	40 91 a2 00 	lds	r20, 0x00A2
     aa4:	50 91 a3 00 	lds	r21, 0x00A3
     aa8:	24 e6       	ldi	r18, 0x64	; 100
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
     aaa:	80 91 aa 00 	lds	r24, 0x00AA

	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
     aae:	80 73       	andi	r24, 0x30	; 48
     ab0:	80 31       	cpi	r24, 0x10	; 16
     ab2:	29 f4       	brne	.+10     	; 0xabe <Pipe_WaitUntilReady+0x1e>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     ab4:	80 91 a6 00 	lds	r24, 0x00A6
		{
			if (Pipe_IsINReceived())
     ab8:	80 ff       	sbrs	r24, 0
     aba:	05 c0       	rjmp	.+10     	; 0xac6 <Pipe_WaitUntilReady+0x26>
     abc:	1e c0       	rjmp	.+60     	; 0xafa <Pipe_WaitUntilReady+0x5a>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     abe:	80 91 a6 00 	lds	r24, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
     ac2:	82 fd       	sbrc	r24, 2
     ac4:	1a c0       	rjmp	.+52     	; 0xafa <Pipe_WaitUntilReady+0x5a>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     ac6:	80 91 a6 00 	lds	r24, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
     aca:	81 ff       	sbrs	r24, 1
     acc:	02 c0       	rjmp	.+4      	; 0xad2 <Pipe_WaitUntilReady+0x32>
     ace:	81 e0       	ldi	r24, 0x01	; 1
     ad0:	08 95       	ret
		  return PIPE_READYWAIT_PipeStalled;
		else if (USB_HostState == HOST_STATE_Unattached)
     ad2:	80 91 53 01 	lds	r24, 0x0153
     ad6:	81 30       	cpi	r24, 0x01	; 1
     ad8:	11 f4       	brne	.+4      	; 0xade <Pipe_WaitUntilReady+0x3e>
     ada:	82 e0       	ldi	r24, 0x02	; 2
     adc:	08 95       	ret
     ade:	80 91 a2 00 	lds	r24, 0x00A2
     ae2:	90 91 a3 00 	lds	r25, 0x00A3
		  return PIPE_READYWAIT_DeviceDisconnected;

		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     ae6:	84 17       	cp	r24, r20
     ae8:	95 07       	cpc	r25, r21
     aea:	f9 f2       	breq	.-66     	; 0xaaa <Pipe_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     aec:	22 23       	and	r18, r18
     aee:	11 f4       	brne	.+4      	; 0xaf4 <Pipe_WaitUntilReady+0x54>
     af0:	83 e0       	ldi	r24, 0x03	; 3
     af2:	08 95       	ret
     af4:	21 50       	subi	r18, 0x01	; 1
     af6:	ac 01       	movw	r20, r24
     af8:	d8 cf       	rjmp	.-80     	; 0xaaa <Pipe_WaitUntilReady+0xa>
     afa:	80 e0       	ldi	r24, 0x00	; 0
			  return PIPE_READYWAIT_Timeout;
		}
	}
}
     afc:	08 95       	ret

00000afe <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     afe:	70 d0       	rcall	.+224    	; 0xbe0 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     b00:	77 d0       	rcall	.+238    	; 0xbf0 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     b02:	80 91 d8 00 	lds	r24, 0x00D8
     b06:	8f 77       	andi	r24, 0x7F	; 127
     b08:	80 93 d8 00 	sts	0x00D8, r24
				USBCON |=  (1 << USBE);
     b0c:	80 91 d8 00 	lds	r24, 0x00D8
     b10:	80 68       	ori	r24, 0x80	; 128
     b12:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
     b16:	80 91 d8 00 	lds	r24, 0x00D8
     b1a:	8f 7d       	andi	r24, 0xDF	; 223
     b1c:	80 93 d8 00 	sts	0x00D8, r24
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
     b20:	80 91 d7 00 	lds	r24, 0x00D7
     b24:	8f 77       	andi	r24, 0x7F	; 127
     b26:	80 93 d7 00 	sts	0x00D7, r24

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     b2a:	8c e0       	ldi	r24, 0x0C	; 12
     b2c:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     b2e:	8e e0       	ldi	r24, 0x0E	; 14
     b30:	89 bd       	out	0x29, r24	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_CAN_BE_HOST)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));		
     b32:	09 b4       	in	r0, 0x29	; 41
     b34:	00 fe       	sbrs	r0, 0
     b36:	fd cf       	rjmp	.-6      	; 0xb32 <USB_ResetInterface+0x34>
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState                = HOST_STATE_Unattached;
     b38:	81 e0       	ldi	r24, 0x01	; 1
     b3a:	80 93 53 01 	sts	0x0153, r24
	USB_Host_ConfigurationNumber = 0;
     b3e:	10 92 49 01 	sts	0x0149, r1
	USB_Host_ControlPipeSize     = PIPE_CONTROLPIPE_DEFAULT_SIZE;
     b42:	80 e4       	ldi	r24, 0x40	; 64
     b44:	80 93 44 01 	sts	0x0144, r24
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
     b48:	80 91 d8 00 	lds	r24, 0x00D8
     b4c:	80 64       	ori	r24, 0x40	; 64
     b4e:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     b52:	80 91 dd 00 	lds	r24, 0x00DD
     b56:	81 60       	ori	r24, 0x01	; 1
     b58:	80 93 dd 00 	sts	0x00DD, r24
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
     b5c:	80 91 dd 00 	lds	r24, 0x00DD
     b60:	84 60       	ori	r24, 0x04	; 4
     b62:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON &= ~(1 << UVCONE);
     b66:	80 91 d7 00 	lds	r24, 0x00D7
     b6a:	8f 7e       	andi	r24, 0xEF	; 239
     b6c:	80 93 d7 00 	sts	0x00D7, r24

				DDRE   |=  (1 << 7);
     b70:	6f 9a       	sbi	0x0d, 7	; 13
			}

			static inline void USB_Host_VBUS_Manual_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_On(void)
			{
				PORTE  |=  (1 << 7);
     b72:	77 9a       	sbi	0x0e, 7	; 14
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN |= (1 << SRPE);						
     b74:	80 91 de 00 	lds	r24, 0x00DE
     b78:	81 60       	ori	r24, 0x01	; 1
     b7a:	80 93 de 00 	sts	0x00DE, r24
						break;
					case USB_INT_RSTI:
						UHIEN  |= (1 << RSTE);
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
     b7e:	80 91 de 00 	lds	r24, 0x00DE
     b82:	84 60       	ori	r24, 0x04	; 4
     b84:	80 93 de 00 	sts	0x00DE, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     b88:	80 91 e0 00 	lds	r24, 0x00E0
     b8c:	8e 7f       	andi	r24, 0xFE	; 254
     b8e:	80 93 e0 00 	sts	0x00E0, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     b92:	80 91 d8 00 	lds	r24, 0x00D8
     b96:	80 61       	ori	r24, 0x10	; 16
     b98:	80 93 d8 00 	sts	0x00D8, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     b9c:	08 95       	ret

00000b9e <USB_Init>:

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
     b9e:	e7 ed       	ldi	r30, 0xD7	; 215
     ba0:	f0 e0       	ldi	r31, 0x00	; 0
     ba2:	80 81       	ld	r24, Z
     ba4:	81 60       	ori	r24, 0x01	; 1
     ba6:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     ba8:	81 e0       	ldi	r24, 0x01	; 1
     baa:	80 93 4a 01 	sts	0x014A, r24

	USB_ResetInterface();
}
     bae:	a7 cf       	rjmp	.-178    	; 0xafe <USB_ResetInterface>

00000bb0 <USB_Disable>:

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
     bb0:	17 d0       	rcall	.+46     	; 0xbe0 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     bb2:	1e d0       	rcall	.+60     	; 0xbf0 <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
     bb4:	e0 ee       	ldi	r30, 0xE0	; 224
     bb6:	f0 e0       	ldi	r31, 0x00	; 0
     bb8:	80 81       	ld	r24, Z
     bba:	81 60       	ori	r24, 0x01	; 1
     bbc:	80 83       	st	Z, r24
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON  &= ~(1 << USBE);
     bbe:	a8 ed       	ldi	r26, 0xD8	; 216
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	8c 91       	ld	r24, X
     bc4:	8f 77       	andi	r24, 0x7F	; 127
     bc6:	8c 93       	st	X, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     bc8:	19 bc       	out	0x29, r1	; 41

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  &= ~(1 << UVREGE);
     bca:	e7 ed       	ldi	r30, 0xD7	; 215
     bcc:	f0 e0       	ldi	r31, 0x00	; 0
     bce:	80 81       	ld	r24, Z
     bd0:	8e 7f       	andi	r24, 0xFE	; 254
     bd2:	80 83       	st	Z, r24
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON  &= ~(1 << OTGPADE);
     bd4:	8c 91       	ld	r24, X
     bd6:	8f 7e       	andi	r24, 0xEF	; 239
     bd8:	8c 93       	st	X, r24

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
     bda:	10 92 4a 01 	sts	0x014A, r1
}
     bde:	08 95       	ret

00000be0 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     be0:	e8 ed       	ldi	r30, 0xD8	; 216
     be2:	f0 e0       	ldi	r31, 0x00	; 0
     be4:	80 81       	ld	r24, Z
     be6:	8c 7f       	andi	r24, 0xFC	; 252
     be8:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
     bea:	10 92 a0 00 	sts	0x00A0, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
	#endif
}
     bee:	08 95       	ret

00000bf0 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     bf0:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_BOTH)
	OTGINT = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
     bf4:	10 92 9f 00 	sts	0x009F, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
	#endif
}
     bf8:	08 95       	ret

00000bfa <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
     bfa:	1f 92       	push	r1
     bfc:	0f 92       	push	r0
     bfe:	0f b6       	in	r0, 0x3f	; 63
     c00:	0f 92       	push	r0
     c02:	0b b6       	in	r0, 0x3b	; 59
     c04:	0f 92       	push	r0
     c06:	11 24       	eor	r1, r1
     c08:	2f 93       	push	r18
     c0a:	3f 93       	push	r19
     c0c:	4f 93       	push	r20
     c0e:	5f 93       	push	r21
     c10:	6f 93       	push	r22
     c12:	7f 93       	push	r23
     c14:	8f 93       	push	r24
     c16:	9f 93       	push	r25
     c18:	af 93       	push	r26
     c1a:	bf 93       	push	r27
     c1c:	ef 93       	push	r30
     c1e:	ff 93       	push	r31
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     c20:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	#if defined(USB_CAN_BE_HOST)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
     c24:	85 ff       	sbrs	r24, 5
     c26:	0a c0       	rjmp	.+20     	; 0xc3c <__vector_10+0x42>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     c28:	80 91 a0 00 	lds	r24, 0x00A0
     c2c:	85 ff       	sbrs	r24, 5
     c2e:	06 c0       	rjmp	.+12     	; 0xc3c <__vector_10+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     c30:	80 91 9f 00 	lds	r24, 0x009F
     c34:	8f 7d       	andi	r24, 0xDF	; 223
     c36:	80 93 9f 00 	sts	0x009F, r24
	{
		USB_INT_Clear(USB_INT_HSOFI);

		EVENT_USB_Host_StartOfFrame();
     c3a:	67 d1       	rcall	.+718    	; 0xf0a <USB_Event_Stub>
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
     c3c:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
     c40:	81 ff       	sbrs	r24, 1
     c42:	15 c0       	rjmp	.+42     	; 0xc6e <__vector_10+0x74>
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
					case USB_INT_DCONNI:
						return (UHIEN  & (1 << DCONNE));
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
     c44:	80 91 a0 00 	lds	r24, 0x00A0
     c48:	81 ff       	sbrs	r24, 1
     c4a:	11 c0       	rjmp	.+34     	; 0xc6e <__vector_10+0x74>
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     c4c:	80 91 9f 00 	lds	r24, 0x009F
     c50:	8d 7f       	andi	r24, 0xFD	; 253
     c52:	80 93 9f 00 	sts	0x009F, r24
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     c56:	80 91 9f 00 	lds	r24, 0x009F
     c5a:	8e 7f       	andi	r24, 0xFE	; 254
     c5c:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     c60:	80 91 a0 00 	lds	r24, 0x00A0
     c64:	8d 7f       	andi	r24, 0xFD	; 253
     c66:	80 93 a0 00 	sts	0x00A0, r24
	{
		USB_INT_Clear(USB_INT_DDISCI);
		USB_INT_Clear(USB_INT_DCONNI);
		USB_INT_Disable(USB_INT_DDISCI);

		EVENT_USB_Host_DeviceUnattached();
     c6a:	98 db       	rcall	.-2256   	; 0x39c <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     c6c:	48 df       	rcall	.-368    	; 0xafe <USB_ResetInterface>
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
     c6e:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
     c72:	81 ff       	sbrs	r24, 1
     c74:	15 c0       	rjmp	.+42     	; 0xca0 <__vector_10+0xa6>
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
     c76:	80 91 de 00 	lds	r24, 0x00DE
     c7a:	81 ff       	sbrs	r24, 1
     c7c:	11 c0       	rjmp	.+34     	; 0xca0 <__vector_10+0xa6>
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     c7e:	80 91 df 00 	lds	r24, 0x00DF
     c82:	8d 7f       	andi	r24, 0xFD	; 253
     c84:	80 93 df 00 	sts	0x00DF, r24
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
     c88:	77 98       	cbi	0x0e, 7	; 14
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     c8a:	80 91 dd 00 	lds	r24, 0x00DD
     c8e:	81 60       	ori	r24, 0x01	; 1
     c90:	80 93 dd 00 	sts	0x00DD, r24
		USB_INT_Clear(USB_INT_VBERRI);

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
     c94:	80 e0       	ldi	r24, 0x00	; 0
     c96:	65 db       	rcall	.-2358   	; 0x362 <EVENT_USB_Host_HostError>
		EVENT_USB_Host_DeviceUnattached();
     c98:	81 db       	rcall	.-2302   	; 0x39c <EVENT_USB_Host_DeviceUnattached>

		USB_HostState = HOST_STATE_Unattached;
     c9a:	81 e0       	ldi	r24, 0x01	; 1
     c9c:	80 93 53 01 	sts	0x0153, r24
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
					case USB_INT_SRPI:
						return (OTGINT & (1 << SRPI));
     ca0:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
     ca4:	80 ff       	sbrs	r24, 0
     ca6:	17 c0       	rjmp	.+46     	; 0xcd6 <__vector_10+0xdc>
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
					case USB_INT_SRPI:
						return (OTGIEN & (1 << SRPE));
     ca8:	80 91 de 00 	lds	r24, 0x00DE
     cac:	80 ff       	sbrs	r24, 0
     cae:	13 c0       	rjmp	.+38     	; 0xcd6 <__vector_10+0xdc>
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
						break;
					case USB_INT_SRPI:
						OTGINT &= ~(1 << SRPI);
     cb0:	80 91 df 00 	lds	r24, 0x00DF
     cb4:	8e 7f       	andi	r24, 0xFE	; 254
     cb6:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_VBERRI:
						OTGIEN &= ~(1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN &= ~(1 << SRPE);						
     cba:	80 91 de 00 	lds	r24, 0x00DE
     cbe:	8e 7f       	andi	r24, 0xFE	; 254
     cc0:	80 93 de 00 	sts	0x00DE, r24
	{
		USB_INT_Clear(USB_INT_SRPI);
		USB_INT_Disable(USB_INT_SRPI);

		EVENT_USB_Host_DeviceAttached();
     cc4:	74 db       	rcall	.-2328   	; 0x3ae <EVENT_USB_Host_DeviceAttached>
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     cc6:	80 91 a0 00 	lds	r24, 0x00A0
     cca:	82 60       	ori	r24, 0x02	; 2
     ccc:	80 93 a0 00 	sts	0x00A0, r24

		USB_INT_Enable(USB_INT_DDISCI);

		USB_HostState = HOST_STATE_Powered;
     cd0:	82 e0       	ldi	r24, 0x02	; 2
     cd2:	80 93 53 01 	sts	0x0153, r24
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
     cd6:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
     cda:	82 ff       	sbrs	r24, 2
     cdc:	0e c0       	rjmp	.+28     	; 0xcfa <__vector_10+0x100>
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
     cde:	80 91 de 00 	lds	r24, 0x00DE
     ce2:	82 ff       	sbrs	r24, 2
     ce4:	0a c0       	rjmp	.+20     	; 0xcfa <__vector_10+0x100>
						break;
					case USB_INT_RSTI:
						UHINT  &= ~(1 << RSTI);
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
     ce6:	80 91 df 00 	lds	r24, 0x00DF
     cea:	8b 7f       	andi	r24, 0xFB	; 251
     cec:	80 93 df 00 	sts	0x00DF, r24
	{
		USB_INT_Clear(USB_INT_BCERRI);

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
     cf0:	82 e0       	ldi	r24, 0x02	; 2
     cf2:	60 e0       	ldi	r22, 0x00	; 0
     cf4:	0a db       	rcall	.-2540   	; 0x30a <EVENT_USB_Host_DeviceEnumerationFailed>
		EVENT_USB_Host_DeviceUnattached();
     cf6:	52 db       	rcall	.-2396   	; 0x39c <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     cf8:	02 df       	rcall	.-508    	; 0xafe <USB_ResetInterface>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     cfa:	ff 91       	pop	r31
     cfc:	ef 91       	pop	r30
     cfe:	bf 91       	pop	r27
     d00:	af 91       	pop	r26
     d02:	9f 91       	pop	r25
     d04:	8f 91       	pop	r24
     d06:	7f 91       	pop	r23
     d08:	6f 91       	pop	r22
     d0a:	5f 91       	pop	r21
     d0c:	4f 91       	pop	r20
     d0e:	3f 91       	pop	r19
     d10:	2f 91       	pop	r18
     d12:	0f 90       	pop	r0
     d14:	0b be       	out	0x3b, r0	; 59
     d16:	0f 90       	pop	r0
     d18:	0f be       	out	0x3f, r0	; 63
     d1a:	0f 90       	pop	r0
     d1c:	1f 90       	pop	r1
     d1e:	18 95       	reti

00000d20 <Pipe_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     d20:	bf 92       	push	r11
     d22:	cf 92       	push	r12
     d24:	df 92       	push	r13
     d26:	ef 92       	push	r14
     d28:	ff 92       	push	r15
     d2a:	0f 93       	push	r16
     d2c:	1f 93       	push	r17
     d2e:	cf 93       	push	r28
     d30:	df 93       	push	r29
     d32:	18 2f       	mov	r17, r24
     d34:	09 2f       	mov	r16, r25
     d36:	7b 01       	movw	r14, r22
     d38:	6a 01       	movw	r12, r20
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     d3a:	80 91 aa 00 	lds	r24, 0x00AA
     d3e:	8f 7c       	andi	r24, 0xCF	; 207
     d40:	80 62       	ori	r24, 0x20	; 32
     d42:	80 93 aa 00 	sts	0x00AA, r24
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
     d46:	ac de       	rcall	.-680    	; 0xaa0 <Pipe_WaitUntilReady>
     d48:	b8 2e       	mov	r11, r24
     d4a:	88 23       	and	r24, r24
     d4c:	a9 f5       	brne	.+106    	; 0xdb8 <Pipe_Write_Stream_LE+0x98>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     d4e:	81 2f       	mov	r24, r17
     d50:	90 2f       	mov	r25, r16
     d52:	9c 01       	movw	r18, r24
     d54:	e9 01       	movw	r28, r18
	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
     d56:	c1 14       	cp	r12, r1
     d58:	d1 04       	cpc	r13, r1
     d5a:	39 f0       	breq	.+14     	; 0xd6a <Pipe_Write_Stream_LE+0x4a>
	{
		Length -= *BytesProcessed;
     d5c:	f6 01       	movw	r30, r12
     d5e:	80 81       	ld	r24, Z
     d60:	91 81       	ldd	r25, Z+1	; 0x01
     d62:	e8 1a       	sub	r14, r24
     d64:	f9 0a       	sbc	r15, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     d66:	c8 0f       	add	r28, r24
     d68:	d9 1f       	adc	r29, r25
     d6a:	00 e0       	ldi	r16, 0x00	; 0
     d6c:	10 e0       	ldi	r17, 0x00	; 0
     d6e:	21 c0       	rjmp	.+66     	; 0xdb2 <Pipe_Write_Stream_LE+0x92>
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
     d70:	80 91 a6 00 	lds	r24, 0x00A6
	}
	
	while (Length)
	{
		if (!(Pipe_IsReadWriteAllowed()))
     d74:	85 fd       	sbrc	r24, 5
     d76:	15 c0       	rjmp	.+42     	; 0xda2 <Pipe_Write_Stream_LE+0x82>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
     d78:	80 91 a6 00 	lds	r24, 0x00A6
     d7c:	8b 77       	andi	r24, 0x7B	; 123
     d7e:	80 93 a6 00 	sts	0x00A6, r24
		{
			TEMPLATE_CLEAR_PIPE();

			if (BytesProcessed != NULL)
     d82:	c1 14       	cp	r12, r1
     d84:	d1 04       	cpc	r13, r1
     d86:	49 f0       	breq	.+18     	; 0xd9a <Pipe_Write_Stream_LE+0x7a>
			{
				*BytesProcessed += BytesInTransfer;
     d88:	f6 01       	movw	r30, r12
     d8a:	80 81       	ld	r24, Z
     d8c:	91 81       	ldd	r25, Z+1	; 0x01
     d8e:	80 0f       	add	r24, r16
     d90:	91 1f       	adc	r25, r17
     d92:	91 83       	std	Z+1, r25	; 0x01
     d94:	80 83       	st	Z, r24
     d96:	84 e0       	ldi	r24, 0x04	; 4
     d98:	10 c0       	rjmp	.+32     	; 0xdba <Pipe_Write_Stream_LE+0x9a>
				return PIPE_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
     d9a:	82 de       	rcall	.-764    	; 0xaa0 <Pipe_WaitUntilReady>
     d9c:	88 23       	and	r24, r24
     d9e:	49 f0       	breq	.+18     	; 0xdb2 <Pipe_Write_Stream_LE+0x92>
     da0:	0c c0       	rjmp	.+24     	; 0xdba <Pipe_Write_Stream_LE+0x9a>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
     da2:	89 91       	ld	r24, Y+
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
     da4:	80 93 af 00 	sts	0x00AF, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
     da8:	08 94       	sec
     daa:	e1 08       	sbc	r14, r1
     dac:	f1 08       	sbc	r15, r1
			BytesInTransfer++;
     dae:	0f 5f       	subi	r16, 0xFF	; 255
     db0:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}
	
	while (Length)
     db2:	e1 14       	cp	r14, r1
     db4:	f1 04       	cpc	r15, r1
     db6:	e1 f6       	brne	.-72     	; 0xd70 <Pipe_Write_Stream_LE+0x50>
     db8:	8b 2d       	mov	r24, r11
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
     dba:	df 91       	pop	r29
     dbc:	cf 91       	pop	r28
     dbe:	1f 91       	pop	r17
     dc0:	0f 91       	pop	r16
     dc2:	ff 90       	pop	r15
     dc4:	ef 90       	pop	r14
     dc6:	df 90       	pop	r13
     dc8:	cf 90       	pop	r12
     dca:	bf 90       	pop	r11
     dcc:	08 95       	ret

00000dce <USB_GetNextDescriptorComp>:

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
     dce:	af 92       	push	r10
     dd0:	bf 92       	push	r11
     dd2:	cf 92       	push	r12
     dd4:	df 92       	push	r13
     dd6:	ef 92       	push	r14
     dd8:	ff 92       	push	r15
     dda:	0f 93       	push	r16
     ddc:	1f 93       	push	r17
     dde:	cf 93       	push	r28
     de0:	df 93       	push	r29
     de2:	7c 01       	movw	r14, r24
     de4:	eb 01       	movw	r28, r22
     de6:	6a 01       	movw	r12, r20
     de8:	24 c0       	rjmp	.+72     	; 0xe32 <USB_GetNextDescriptorComp+0x64>
	uint8_t ErrorCode;

	while (*BytesRem)
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
     dea:	e8 81       	ld	r30, Y
     dec:	f9 81       	ldd	r31, Y+1	; 0x01
     dee:	be 2e       	mov	r11, r30
     df0:	af 2e       	mov	r10, r31
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc)
			{
				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;
     df2:	80 81       	ld	r24, Z
     df4:	90 e0       	ldi	r25, 0x00	; 0
     df6:	98 01       	movw	r18, r16
     df8:	80 17       	cp	r24, r16
     dfa:	91 07       	cpc	r25, r17
     dfc:	08 f4       	brcc	.+2      	; 0xe00 <USB_GetNextDescriptorComp+0x32>
     dfe:	9c 01       	movw	r18, r24
				
				if (*BytesRem < CurrDescriptorSize)
				  CurrDescriptorSize = *BytesRem;

				*CurrConfigLoc  = (void*)((uintptr_t)*CurrConfigLoc + CurrDescriptorSize);
     e00:	e2 0f       	add	r30, r18
     e02:	f3 1f       	adc	r31, r19
     e04:	f9 83       	std	Y+1, r31	; 0x01
     e06:	e8 83       	st	Y, r30
				*BytesRem      -= CurrDescriptorSize;
     e08:	f7 01       	movw	r30, r14
     e0a:	80 81       	ld	r24, Z
     e0c:	91 81       	ldd	r25, Z+1	; 0x01
     e0e:	82 1b       	sub	r24, r18
     e10:	93 0b       	sbc	r25, r19
     e12:	91 83       	std	Z+1, r25	; 0x01
     e14:	80 83       	st	Z, r24
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
     e16:	88 81       	ld	r24, Y
     e18:	99 81       	ldd	r25, Y+1	; 0x01
     e1a:	f6 01       	movw	r30, r12
     e1c:	09 95       	icall
     e1e:	82 30       	cpi	r24, 0x02	; 2
     e20:	41 f0       	breq	.+16     	; 0xe32 <USB_GetNextDescriptorComp+0x64>
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
     e22:	81 30       	cpi	r24, 0x01	; 1
     e24:	69 f4       	brne	.+26     	; 0xe40 <USB_GetNextDescriptorComp+0x72>
			{
				*CurrConfigLoc = PrevDescLoc;
     e26:	b8 82       	st	Y, r11
     e28:	a9 82       	std	Y+1, r10	; 0x01
				*BytesRem      = PrevBytesRem;
     e2a:	f7 01       	movw	r30, r14
     e2c:	11 83       	std	Z+1, r17	; 0x01
     e2e:	00 83       	st	Z, r16
     e30:	07 c0       	rjmp	.+14     	; 0xe40 <USB_GetNextDescriptorComp+0x72>
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
	uint8_t ErrorCode;

	while (*BytesRem)
     e32:	f7 01       	movw	r30, r14
     e34:	00 81       	ld	r16, Z
     e36:	11 81       	ldd	r17, Z+1	; 0x01
     e38:	01 15       	cp	r16, r1
     e3a:	11 05       	cpc	r17, r1
     e3c:	b1 f6       	brne	.-84     	; 0xdea <USB_GetNextDescriptorComp+0x1c>
     e3e:	82 e0       	ldi	r24, 0x02	; 2
			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
}
     e40:	df 91       	pop	r29
     e42:	cf 91       	pop	r28
     e44:	1f 91       	pop	r17
     e46:	0f 91       	pop	r16
     e48:	ff 90       	pop	r15
     e4a:	ef 90       	pop	r14
     e4c:	df 90       	pop	r13
     e4e:	cf 90       	pop	r12
     e50:	bf 90       	pop	r11
     e52:	af 90       	pop	r10
     e54:	08 95       	ret

00000e56 <USB_Host_GetDeviceConfigDescriptor>:
#if defined(USB_CAN_BE_HOST)
uint8_t USB_Host_GetDeviceConfigDescriptor(const uint8_t ConfigNumber,
                                           uint16_t* const ConfigSizePtr,
                                           void* const BufferPtr,
                                           const uint16_t BufferSize)
{
     e56:	cf 92       	push	r12
     e58:	df 92       	push	r13
     e5a:	ef 92       	push	r14
     e5c:	ff 92       	push	r15
     e5e:	0f 93       	push	r16
     e60:	1f 93       	push	r17
     e62:	df 93       	push	r29
     e64:	cf 93       	push	r28
     e66:	cd b7       	in	r28, 0x3d	; 61
     e68:	de b7       	in	r29, 0x3e	; 62
     e6a:	29 97       	sbiw	r28, 0x09	; 9
     e6c:	0f b6       	in	r0, 0x3f	; 63
     e6e:	f8 94       	cli
     e70:	de bf       	out	0x3e, r29	; 62
     e72:	0f be       	out	0x3f, r0	; 63
     e74:	cd bf       	out	0x3d, r28	; 61
     e76:	6b 01       	movw	r12, r22
     e78:	8a 01       	movw	r16, r20
     e7a:	79 01       	movw	r14, r18
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
     e7c:	90 e8       	ldi	r25, 0x80	; 128
     e7e:	90 93 4b 01 	sts	0x014B, r25
     e82:	96 e0       	ldi	r25, 0x06	; 6
     e84:	90 93 4c 01 	sts	0x014C, r25
     e88:	90 e0       	ldi	r25, 0x00	; 0
     e8a:	01 97       	sbiw	r24, 0x01	; 1
     e8c:	92 60       	ori	r25, 0x02	; 2
     e8e:	90 93 4e 01 	sts	0x014E, r25
     e92:	80 93 4d 01 	sts	0x014D, r24
     e96:	10 92 50 01 	sts	0x0150, r1
     e9a:	10 92 4f 01 	sts	0x014F, r1
     e9e:	89 e0       	ldi	r24, 0x09	; 9
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	90 93 52 01 	sts	0x0152, r25
     ea6:	80 93 51 01 	sts	0x0151, r24
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     eaa:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = sizeof(USB_Descriptor_Configuration_Header_t),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(ConfigHeader)) != HOST_SENDCONTROL_Successful)
     eae:	ce 01       	movw	r24, r28
     eb0:	01 96       	adiw	r24, 0x01	; 1
     eb2:	55 d0       	rcall	.+170    	; 0xf5e <USB_Host_SendControlRequest>
     eb4:	28 2f       	mov	r18, r24
     eb6:	88 23       	and	r24, r24
     eb8:	c1 f4       	brne	.+48     	; 0xeea <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);
     eba:	8b 81       	ldd	r24, Y+3	; 0x03
     ebc:	9c 81       	ldd	r25, Y+4	; 0x04
     ebe:	f6 01       	movw	r30, r12
     ec0:	91 83       	std	Z+1, r25	; 0x01
     ec2:	80 83       	st	Z, r24

	if (*ConfigSizePtr > BufferSize)
     ec4:	e8 16       	cp	r14, r24
     ec6:	f9 06       	cpc	r15, r25
     ec8:	10 f4       	brcc	.+4      	; 0xece <USB_Host_GetDeviceConfigDescriptor+0x78>
     eca:	25 e0       	ldi	r18, 0x05	; 5
     ecc:	0e c0       	rjmp	.+28     	; 0xeea <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return HOST_GETCONFIG_BuffOverflow;

	USB_ControlRequest.wLength = *ConfigSizePtr;
     ece:	90 93 52 01 	sts	0x0152, r25
     ed2:	80 93 51 01 	sts	0x0151, r24

	if ((ErrorCode = USB_Host_SendControlRequest(BufferPtr)) != HOST_SENDCONTROL_Successful)
     ed6:	c8 01       	movw	r24, r16
     ed8:	42 d0       	rcall	.+132    	; 0xf5e <USB_Host_SendControlRequest>
     eda:	28 2f       	mov	r18, r24
     edc:	88 23       	and	r24, r24
     ede:	29 f4       	brne	.+10     	; 0xeea <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
     ee0:	f8 01       	movw	r30, r16
     ee2:	81 81       	ldd	r24, Z+1	; 0x01
     ee4:	82 30       	cpi	r24, 0x02	; 2
     ee6:	09 f0       	breq	.+2      	; 0xeea <USB_Host_GetDeviceConfigDescriptor+0x94>
     ee8:	26 e0       	ldi	r18, 0x06	; 6
	  return HOST_GETCONFIG_InvalidData;

	return HOST_GETCONFIG_Successful;
}
     eea:	82 2f       	mov	r24, r18
     eec:	29 96       	adiw	r28, 0x09	; 9
     eee:	0f b6       	in	r0, 0x3f	; 63
     ef0:	f8 94       	cli
     ef2:	de bf       	out	0x3e, r29	; 62
     ef4:	0f be       	out	0x3f, r0	; 63
     ef6:	cd bf       	out	0x3d, r28	; 61
     ef8:	cf 91       	pop	r28
     efa:	df 91       	pop	r29
     efc:	1f 91       	pop	r17
     efe:	0f 91       	pop	r16
     f00:	ff 90       	pop	r15
     f02:	ef 90       	pop	r14
     f04:	df 90       	pop	r13
     f06:	cf 90       	pop	r12
     f08:	08 95       	ret

00000f0a <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
     f0a:	08 95       	ret

00000f0c <USB_Host_WaitForIOS>:

	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
     f0c:	1f 93       	push	r17
     f0e:	cf 93       	push	r28
     f10:	df 93       	push	r29
     f12:	18 2f       	mov	r17, r24
     f14:	c8 ee       	ldi	r28, 0xE8	; 232
     f16:	d3 e0       	ldi	r29, 0x03	; 3
     f18:	09 c0       	rjmp	.+18     	; 0xf2c <USB_Host_WaitForIOS+0x20>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     f1a:	81 e0       	ldi	r24, 0x01	; 1
     f1c:	87 db       	rcall	.-2290   	; 0x62c <USB_Host_WaitMS>
     f1e:	88 23       	and	r24, r24
     f20:	d1 f4       	brne	.+52     	; 0xf56 <USB_Host_WaitForIOS+0x4a>
		  return ErrorCode;

		if (!(TimeoutCounter--))
     f22:	20 97       	sbiw	r28, 0x00	; 0
     f24:	11 f4       	brne	.+4      	; 0xf2a <USB_Host_WaitForIOS+0x1e>
     f26:	84 e0       	ldi	r24, 0x04	; 4
     f28:	16 c0       	rjmp	.+44     	; 0xf56 <USB_Host_WaitForIOS+0x4a>
     f2a:	21 97       	sbiw	r28, 0x01	; 1
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
     f2c:	11 23       	and	r17, r17
     f2e:	29 f4       	brne	.+10     	; 0xf3a <USB_Host_WaitForIOS+0x2e>
			 *  \return Boolean \c true if the current pipe is ready for a SETUP packet, \c false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
     f30:	80 91 a6 00 	lds	r24, 0x00A6
     f34:	83 ff       	sbrs	r24, 3
     f36:	f1 cf       	rjmp	.-30     	; 0xf1a <USB_Host_WaitForIOS+0xe>
     f38:	0d c0       	rjmp	.+26     	; 0xf54 <USB_Host_WaitForIOS+0x48>
     f3a:	11 30       	cpi	r17, 0x01	; 1
     f3c:	29 f4       	brne	.+10     	; 0xf48 <USB_Host_WaitForIOS+0x3c>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     f3e:	80 91 a6 00 	lds	r24, 0x00A6
     f42:	80 ff       	sbrs	r24, 0
     f44:	ea cf       	rjmp	.-44     	; 0xf1a <USB_Host_WaitForIOS+0xe>
     f46:	06 c0       	rjmp	.+12     	; 0xf54 <USB_Host_WaitForIOS+0x48>
     f48:	12 30       	cpi	r17, 0x02	; 2
     f4a:	39 f7       	brne	.-50     	; 0xf1a <USB_Host_WaitForIOS+0xe>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     f4c:	80 91 a6 00 	lds	r24, 0x00A6
     f50:	82 ff       	sbrs	r24, 2
     f52:	e3 cf       	rjmp	.-58     	; 0xf1a <USB_Host_WaitForIOS+0xe>
     f54:	80 e0       	ldi	r24, 0x00	; 0
		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
}
     f56:	df 91       	pop	r29
     f58:	cf 91       	pop	r28
     f5a:	1f 91       	pop	r17
     f5c:	08 95       	ret

00000f5e <USB_Host_SendControlRequest>:
#include "HostStandardReq.h"

uint8_t USB_Host_ConfigurationNumber;

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
     f5e:	ff 92       	push	r15
     f60:	0f 93       	push	r16
     f62:	1f 93       	push	r17
     f64:	cf 93       	push	r28
     f66:	df 93       	push	r29
     f68:	18 2f       	mov	r17, r24
     f6a:	09 2f       	mov	r16, r25
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     f6c:	f0 90 9e 00 	lds	r15, 0x009E
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
	bool     BusSuspended = USB_Host_IsBusSuspended();
	uint8_t  ReturnStatus = HOST_SENDCONTROL_Successful;
	uint16_t DataLen      = USB_ControlRequest.wLength;
     f70:	c0 91 51 01 	lds	r28, 0x0151
     f74:	d0 91 52 01 	lds	r29, 0x0152
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     f78:	80 91 9e 00 	lds	r24, 0x009E
     f7c:	81 60       	ori	r24, 0x01	; 1
     f7e:	80 93 9e 00 	sts	0x009E, r24

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     f82:	81 e0       	ldi	r24, 0x01	; 1
     f84:	53 db       	rcall	.-2394   	; 0x62c <USB_Host_WaitMS>
     f86:	98 2f       	mov	r25, r24
     f88:	88 23       	and	r24, r24
     f8a:	09 f0       	breq	.+2      	; 0xf8e <USB_Host_SendControlRequest+0x30>
     f8c:	d7 c0       	rjmp	.+430    	; 0x113c <USB_Host_SendControlRequest+0x1de>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     f8e:	80 91 aa 00 	lds	r24, 0x00AA
     f92:	8f 7c       	andi	r24, 0xCF	; 207
     f94:	80 93 aa 00 	sts	0x00AA, r24

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     f98:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
     f9c:	80 91 a6 00 	lds	r24, 0x00A6
     fa0:	8f 7e       	andi	r24, 0xEF	; 239
     fa2:	80 93 a6 00 	sts	0x00A6, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     fa6:	80 91 a9 00 	lds	r24, 0x00A9
     faa:	8f 7b       	andi	r24, 0xBF	; 191
     fac:	80 93 a9 00 	sts	0x00A9, r24
     fb0:	eb e4       	ldi	r30, 0x4B	; 75
     fb2:	f1 e0       	ldi	r31, 0x01	; 1
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
	  Pipe_Write_8(*(HeaderStream++));	
     fb4:	81 91       	ld	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
     fb6:	80 93 af 00 	sts	0x00AF, r24
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
     fba:	81 e0       	ldi	r24, 0x01	; 1
     fbc:	e3 35       	cpi	r30, 0x53	; 83
     fbe:	f8 07       	cpc	r31, r24
     fc0:	c9 f7       	brne	.-14     	; 0xfb4 <USB_Host_SendControlRequest+0x56>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
     fc2:	80 91 a6 00 	lds	r24, 0x00A6
     fc6:	87 77       	andi	r24, 0x77	; 119
     fc8:	80 93 a6 00 	sts	0x00A6, r24
	  Pipe_Write_8(*(HeaderStream++));	
	#endif
	
	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
     fcc:	80 e0       	ldi	r24, 0x00	; 0
     fce:	9e df       	rcall	.-196    	; 0xf0c <USB_Host_WaitForIOS>
     fd0:	98 2f       	mov	r25, r24
     fd2:	88 23       	and	r24, r24
     fd4:	09 f0       	breq	.+2      	; 0xfd8 <USB_Host_SendControlRequest+0x7a>
     fd6:	b2 c0       	rjmp	.+356    	; 0x113c <USB_Host_SendControlRequest+0x1de>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     fd8:	80 91 a9 00 	lds	r24, 0x00A9
     fdc:	80 64       	ori	r24, 0x40	; 64
     fde:	80 93 a9 00 	sts	0x00A9, r24
	  goto End_Of_Control_Send;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     fe2:	81 e0       	ldi	r24, 0x01	; 1
     fe4:	23 db       	rcall	.-2490   	; 0x62c <USB_Host_WaitMS>
     fe6:	98 2f       	mov	r25, r24
     fe8:	88 23       	and	r24, r24
     fea:	09 f0       	breq	.+2      	; 0xfee <USB_Host_SendControlRequest+0x90>
     fec:	a7 c0       	rjmp	.+334    	; 0x113c <USB_Host_SendControlRequest+0x1de>

uint8_t USB_Host_ConfigurationNumber;

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
     fee:	21 2f       	mov	r18, r17
     ff0:	30 2f       	mov	r19, r16
     ff2:	c9 01       	movw	r24, r18
     ff4:	8c 01       	movw	r16, r24
	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
	  goto End_Of_Control_Send;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
     ff6:	80 91 4b 01 	lds	r24, 0x014B
     ffa:	87 ff       	sbrs	r24, 7
     ffc:	52 c0       	rjmp	.+164    	; 0x10a2 <USB_Host_SendControlRequest+0x144>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     ffe:	80 91 aa 00 	lds	r24, 0x00AA
    1002:	8f 7c       	andi	r24, 0xCF	; 207
    1004:	80 61       	ori	r24, 0x10	; 16
    1006:	80 93 aa 00 	sts	0x00AA, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
    100a:	01 15       	cp	r16, r1
    100c:	11 05       	cpc	r17, r1
    100e:	69 f5       	brne	.+90     	; 0x106a <USB_Host_SendControlRequest+0x10c>
    1010:	2e c0       	rjmp	.+92     	; 0x106e <USB_Host_SendControlRequest+0x110>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1012:	80 91 a9 00 	lds	r24, 0x00A9
    1016:	8f 7b       	andi	r24, 0xBF	; 191
    1018:	80 93 a9 00 	sts	0x00A9, r24
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    101c:	81 e0       	ldi	r24, 0x01	; 1
    101e:	76 df       	rcall	.-276    	; 0xf0c <USB_Host_WaitForIOS>
    1020:	98 2f       	mov	r25, r24
    1022:	88 23       	and	r24, r24
    1024:	09 f0       	breq	.+2      	; 0x1028 <USB_Host_SendControlRequest+0xca>
    1026:	8a c0       	rjmp	.+276    	; 0x113c <USB_Host_SendControlRequest+0x1de>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1028:	80 91 f6 00 	lds	r24, 0x00F6
    102c:	90 91 f7 00 	lds	r25, 0x00F7
				  goto End_Of_Control_Send;

				if (!(Pipe_BytesInPipe()))
    1030:	89 2b       	or	r24, r25
    1032:	49 f4       	brne	.+18     	; 0x1046 <USB_Host_SendControlRequest+0xe8>
    1034:	c0 e0       	ldi	r28, 0x00	; 0
    1036:	d0 e0       	ldi	r29, 0x00	; 0
    1038:	06 c0       	rjmp	.+12     	; 0x1046 <USB_Host_SendControlRequest+0xe8>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    103a:	80 91 af 00 	lds	r24, 0x00AF
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
				{
					*(DataStream++) = Pipe_Read_8();
    103e:	f8 01       	movw	r30, r16
    1040:	81 93       	st	Z+, r24
    1042:	8f 01       	movw	r16, r30
					DataLen--;
    1044:	21 97       	sbiw	r28, 0x01	; 1
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1046:	80 91 f6 00 	lds	r24, 0x00F6
    104a:	90 91 f7 00 	lds	r25, 0x00F7
				  goto End_Of_Control_Send;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
    104e:	89 2b       	or	r24, r25
    1050:	11 f0       	breq	.+4      	; 0x1056 <USB_Host_SendControlRequest+0xf8>
    1052:	20 97       	sbiw	r28, 0x00	; 0
    1054:	91 f7       	brne	.-28     	; 0x103a <USB_Host_SendControlRequest+0xdc>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1056:	80 91 a9 00 	lds	r24, 0x00A9
    105a:	80 64       	ori	r24, 0x40	; 64
    105c:	80 93 a9 00 	sts	0x00A9, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1060:	80 91 a6 00 	lds	r24, 0x00A6
    1064:	8e 77       	andi	r24, 0x7E	; 126
    1066:	80 93 a6 00 	sts	0x00A6, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
    106a:	20 97       	sbiw	r28, 0x00	; 0
    106c:	91 f6       	brne	.-92     	; 0x1012 <USB_Host_SendControlRequest+0xb4>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    106e:	80 91 aa 00 	lds	r24, 0x00AA
    1072:	8f 7c       	andi	r24, 0xCF	; 207
    1074:	80 62       	ori	r24, 0x20	; 32
    1076:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    107a:	80 91 a9 00 	lds	r24, 0x00A9
    107e:	8f 7b       	andi	r24, 0xBF	; 191
    1080:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1084:	82 e0       	ldi	r24, 0x02	; 2
    1086:	42 df       	rcall	.-380    	; 0xf0c <USB_Host_WaitForIOS>
    1088:	98 2f       	mov	r25, r24
    108a:	88 23       	and	r24, r24
    108c:	09 f0       	breq	.+2      	; 0x1090 <USB_Host_SendControlRequest+0x132>
    108e:	56 c0       	rjmp	.+172    	; 0x113c <USB_Host_SendControlRequest+0x1de>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1090:	80 91 a6 00 	lds	r24, 0x00A6
    1094:	8b 77       	andi	r24, 0x7B	; 123
    1096:	80 93 a6 00 	sts	0x00A6, r24
		  goto End_Of_Control_Send;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    109a:	82 e0       	ldi	r24, 0x02	; 2
    109c:	37 df       	rcall	.-402    	; 0xf0c <USB_Host_WaitForIOS>
    109e:	98 2f       	mov	r25, r24
    10a0:	4d c0       	rjmp	.+154    	; 0x113c <USB_Host_SendControlRequest+0x1de>
		  goto End_Of_Control_Send;
	}
	else
	{
		if (DataStream != NULL)
    10a2:	01 15       	cp	r16, r1
    10a4:	11 05       	cpc	r17, r1
    10a6:	a9 f1       	breq	.+106    	; 0x1112 <USB_Host_SendControlRequest+0x1b4>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    10a8:	80 91 aa 00 	lds	r24, 0x00AA
    10ac:	8f 7c       	andi	r24, 0xCF	; 207
    10ae:	80 62       	ori	r24, 0x20	; 32
    10b0:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    10b4:	80 91 a9 00 	lds	r24, 0x00A9
    10b8:	8f 7b       	andi	r24, 0xBF	; 191
    10ba:	80 93 a9 00 	sts	0x00A9, r24
    10be:	1d c0       	rjmp	.+58     	; 0x10fa <USB_Host_SendControlRequest+0x19c>
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    10c0:	82 e0       	ldi	r24, 0x02	; 2
    10c2:	24 df       	rcall	.-440    	; 0xf0c <USB_Host_WaitForIOS>
    10c4:	98 2f       	mov	r25, r24
    10c6:	88 23       	and	r24, r24
    10c8:	c9 f5       	brne	.+114    	; 0x113c <USB_Host_SendControlRequest+0x1de>
				  goto End_Of_Control_Send;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    10ca:	80 91 44 01 	lds	r24, 0x0144
    10ce:	28 2f       	mov	r18, r24
    10d0:	30 e0       	ldi	r19, 0x00	; 0
    10d2:	07 c0       	rjmp	.+14     	; 0x10e2 <USB_Host_SendControlRequest+0x184>
				{
					Pipe_Write_8(*(DataStream++));
    10d4:	f8 01       	movw	r30, r16
    10d6:	81 91       	ld	r24, Z+
    10d8:	8f 01       	movw	r16, r30
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    10da:	80 93 af 00 	sts	0x00AF, r24
					DataLen--;
    10de:	21 97       	sbiw	r28, 0x01	; 1
			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
				  goto End_Of_Control_Send;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    10e0:	39 f0       	breq	.+14     	; 0x10f0 <USB_Host_SendControlRequest+0x192>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    10e2:	80 91 f6 00 	lds	r24, 0x00F6
    10e6:	90 91 f7 00 	lds	r25, 0x00F7
    10ea:	82 17       	cp	r24, r18
    10ec:	93 07       	cpc	r25, r19
    10ee:	90 f3       	brcs	.-28     	; 0x10d4 <USB_Host_SendControlRequest+0x176>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    10f0:	80 91 a6 00 	lds	r24, 0x00A6
    10f4:	8b 77       	andi	r24, 0x7B	; 123
    10f6:	80 93 a6 00 	sts	0x00A6, r24
		if (DataStream != NULL)
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
    10fa:	20 97       	sbiw	r28, 0x00	; 0
    10fc:	09 f7       	brne	.-62     	; 0x10c0 <USB_Host_SendControlRequest+0x162>
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    10fe:	82 e0       	ldi	r24, 0x02	; 2
    1100:	05 df       	rcall	.-502    	; 0xf0c <USB_Host_WaitForIOS>
    1102:	98 2f       	mov	r25, r24
    1104:	88 23       	and	r24, r24
    1106:	d1 f4       	brne	.+52     	; 0x113c <USB_Host_SendControlRequest+0x1de>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1108:	80 91 a9 00 	lds	r24, 0x00A9
    110c:	80 64       	ori	r24, 0x40	; 64
    110e:	80 93 a9 00 	sts	0x00A9, r24
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1112:	80 91 aa 00 	lds	r24, 0x00AA
    1116:	8f 7c       	andi	r24, 0xCF	; 207
    1118:	80 61       	ori	r24, 0x10	; 16
    111a:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    111e:	80 91 a9 00 	lds	r24, 0x00A9
    1122:	8f 7b       	andi	r24, 0xBF	; 191
    1124:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    1128:	81 e0       	ldi	r24, 0x01	; 1
    112a:	f0 de       	rcall	.-544    	; 0xf0c <USB_Host_WaitForIOS>
    112c:	98 2f       	mov	r25, r24
    112e:	88 23       	and	r24, r24
    1130:	29 f4       	brne	.+10     	; 0x113c <USB_Host_SendControlRequest+0x1de>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1132:	80 91 a6 00 	lds	r24, 0x00A6
    1136:	8e 77       	andi	r24, 0x7E	; 126
    1138:	80 93 a6 00 	sts	0x00A6, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    113c:	80 91 a9 00 	lds	r24, 0x00A9
    1140:	80 64       	ori	r24, 0x40	; 64
    1142:	80 93 a9 00 	sts	0x00A9, r24
	}

End_Of_Control_Send:
	Pipe_Freeze();

	if (BusSuspended)
    1146:	f0 fc       	sbrc	r15, 0
    1148:	05 c0       	rjmp	.+10     	; 0x1154 <USB_Host_SendControlRequest+0x1f6>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    114a:	80 91 9e 00 	lds	r24, 0x009E
    114e:	8e 7f       	andi	r24, 0xFE	; 254
    1150:	80 93 9e 00 	sts	0x009E, r24
			 *  \param[in] PipeNumber  Index of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t PipeNumber)
			{
				UPRST = (1 << PipeNumber);
    1154:	81 e0       	ldi	r24, 0x01	; 1
    1156:	80 93 a8 00 	sts	0x00A8, r24
				UPRST = 0;
    115a:	10 92 a8 00 	sts	0x00A8, r1
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
    115e:	89 2f       	mov	r24, r25
    1160:	df 91       	pop	r29
    1162:	cf 91       	pop	r28
    1164:	1f 91       	pop	r17
    1166:	0f 91       	pop	r16
    1168:	ff 90       	pop	r15
    116a:	08 95       	ret

0000116c <USB_Host_SetInterfaceAltSetting>:
}

uint8_t USB_Host_SetInterfaceAltSetting(const uint8_t InterfaceIndex,
                                        const uint8_t AltSetting)
{
	USB_ControlRequest = (USB_Request_Header_t)
    116c:	eb e4       	ldi	r30, 0x4B	; 75
    116e:	f1 e0       	ldi	r31, 0x01	; 1
    1170:	91 e0       	ldi	r25, 0x01	; 1
    1172:	90 93 4b 01 	sts	0x014B, r25
    1176:	9b e0       	ldi	r25, 0x0B	; 11
    1178:	90 93 4c 01 	sts	0x014C, r25
    117c:	60 93 4d 01 	sts	0x014D, r22
    1180:	13 82       	std	Z+3, r1	; 0x03
    1182:	80 93 4f 01 	sts	0x014F, r24
    1186:	15 82       	std	Z+5, r1	; 0x05
    1188:	10 92 52 01 	sts	0x0152, r1
    118c:	10 92 51 01 	sts	0x0151, r1
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1190:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	return USB_Host_SendControlRequest(NULL);
    1194:	80 e0       	ldi	r24, 0x00	; 0
    1196:	90 e0       	ldi	r25, 0x00	; 0
}
    1198:	e2 ce       	rjmp	.-572    	; 0xf5e <USB_Host_SendControlRequest>

0000119a <USB_Host_SetDeviceConfiguration>:

	return HOST_SENDCONTROL_Successful;
}

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
    119a:	1f 93       	push	r17
    119c:	18 2f       	mov	r17, r24
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
    119e:	10 92 4b 01 	sts	0x014B, r1
    11a2:	89 e0       	ldi	r24, 0x09	; 9
    11a4:	80 93 4c 01 	sts	0x014C, r24
    11a8:	10 93 4d 01 	sts	0x014D, r17
    11ac:	10 92 4e 01 	sts	0x014E, r1
    11b0:	10 92 50 01 	sts	0x0150, r1
    11b4:	10 92 4f 01 	sts	0x014F, r1
    11b8:	10 92 52 01 	sts	0x0152, r1
    11bc:	10 92 51 01 	sts	0x0151, r1
    11c0:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);
	
	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) == HOST_SENDCONTROL_Successful)
    11c4:	80 e0       	ldi	r24, 0x00	; 0
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	ca de       	rcall	.-620    	; 0xf5e <USB_Host_SendControlRequest>
    11ca:	88 23       	and	r24, r24
    11cc:	49 f4       	brne	.+18     	; 0x11e0 <USB_Host_SetDeviceConfiguration+0x46>
	{
		USB_Host_ConfigurationNumber = ConfigNumber;
    11ce:	10 93 49 01 	sts	0x0149, r17
		USB_HostState                = (ConfigNumber) ? HOST_STATE_Configured : HOST_STATE_Addressed;
    11d2:	11 23       	and	r17, r17
    11d4:	11 f4       	brne	.+4      	; 0x11da <USB_Host_SetDeviceConfiguration+0x40>
    11d6:	9a e0       	ldi	r25, 0x0A	; 10
    11d8:	01 c0       	rjmp	.+2      	; 0x11dc <USB_Host_SetDeviceConfiguration+0x42>
    11da:	9b e0       	ldi	r25, 0x0B	; 11
    11dc:	90 93 53 01 	sts	0x0153, r25
	}

	return ErrorCode;
}
    11e0:	1f 91       	pop	r17
    11e2:	08 95       	ret

000011e4 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    11e4:	ff 92       	push	r15
    11e6:	0f 93       	push	r16
    11e8:	1f 93       	push	r17
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
    11ea:	07 ea       	ldi	r16, 0xA7	; 167
    11ec:	10 e0       	ldi	r17, 0x00	; 0
    11ee:	f8 01       	movw	r30, r16
    11f0:	f0 80       	ld	r15, Z
    11f2:	f7 e0       	ldi	r31, 0x07	; 7
    11f4:	ff 22       	and	r15, r31
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    11f6:	f8 01       	movw	r30, r16
    11f8:	10 82       	st	Z, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    11fa:	b5 da       	rcall	.-2710   	; 0x766 <USB_Host_ProcessNextHostState>
    11fc:	f8 01       	movw	r30, r16
    11fe:	f0 82       	st	Z, r15
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
    1200:	1f 91       	pop	r17
    1202:	0f 91       	pop	r16
    1204:	ff 90       	pop	r15
    1206:	08 95       	ret

00001208 <DCOMP_PRNT_Host_NextPRNTInterface>:

	return PRNT_ENUMERROR_NoError;
}

static uint8_t DCOMP_PRNT_Host_NextPRNTInterface(void* CurrentDescriptor)
{
    1208:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
    120a:	81 81       	ldd	r24, Z+1	; 0x01
    120c:	84 30       	cpi	r24, 0x04	; 4
    120e:	59 f4       	brne	.+22     	; 0x1226 <DCOMP_PRNT_Host_NextPRNTInterface+0x1e>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		if ((Interface->Class    == PRNT_CSCP_PrinterClass)    &&
    1210:	85 81       	ldd	r24, Z+5	; 0x05
    1212:	87 30       	cpi	r24, 0x07	; 7
    1214:	41 f4       	brne	.+16     	; 0x1226 <DCOMP_PRNT_Host_NextPRNTInterface+0x1e>
    1216:	86 81       	ldd	r24, Z+6	; 0x06
    1218:	81 30       	cpi	r24, 0x01	; 1
    121a:	29 f4       	brne	.+10     	; 0x1226 <DCOMP_PRNT_Host_NextPRNTInterface+0x1e>
    121c:	87 81       	ldd	r24, Z+7	; 0x07
    121e:	82 30       	cpi	r24, 0x02	; 2
    1220:	11 f4       	brne	.+4      	; 0x1226 <DCOMP_PRNT_Host_NextPRNTInterface+0x1e>
    1222:	80 e0       	ldi	r24, 0x00	; 0
    1224:	08 95       	ret
    1226:	82 e0       	ldi	r24, 0x02	; 2
			return DESCRIPTOR_SEARCH_Found;
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    1228:	08 95       	ret

0000122a <DCOMP_PRNT_Host_NextPRNTInterfaceEndpoint>:

static uint8_t DCOMP_PRNT_Host_NextPRNTInterfaceEndpoint(void* CurrentDescriptor)
{
    122a:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Endpoint)
    122c:	81 81       	ldd	r24, Z+1	; 0x01
    122e:	85 30       	cpi	r24, 0x05	; 5
    1230:	31 f4       	brne	.+12     	; 0x123e <DCOMP_PRNT_Host_NextPRNTInterfaceEndpoint+0x14>
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		uint8_t EndpointType = (Endpoint->Attributes & EP_TYPE_MASK);

		if (EndpointType == EP_TYPE_BULK)
    1232:	83 81       	ldd	r24, Z+3	; 0x03
    1234:	83 70       	andi	r24, 0x03	; 3
    1236:	82 30       	cpi	r24, 0x02	; 2
    1238:	31 f4       	brne	.+12     	; 0x1246 <DCOMP_PRNT_Host_NextPRNTInterfaceEndpoint+0x1c>
    123a:	80 e0       	ldi	r24, 0x00	; 0
    123c:	08 95       	ret
		  return DESCRIPTOR_SEARCH_Found;
	}
	else if (Header->Type == DTYPE_Interface)
    123e:	84 30       	cpi	r24, 0x04	; 4
    1240:	11 f4       	brne	.+4      	; 0x1246 <DCOMP_PRNT_Host_NextPRNTInterfaceEndpoint+0x1c>
    1242:	81 e0       	ldi	r24, 0x01	; 1
    1244:	08 95       	ret
    1246:	82 e0       	ldi	r24, 0x02	; 2
	{
		return DESCRIPTOR_SEARCH_Fail;
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    1248:	08 95       	ret

0000124a <PRNT_Host_GetDeviceID>:
}

uint8_t PRNT_Host_GetDeviceID(USB_ClassInfo_PRNT_Host_t* const PRNTInterfaceInfo,
                              char* const DeviceIDString,
                              const uint16_t BufferSize)
{
    124a:	cf 92       	push	r12
    124c:	df 92       	push	r13
    124e:	ff 92       	push	r15
    1250:	0f 93       	push	r16
    1252:	1f 93       	push	r17
    1254:	df 93       	push	r29
    1256:	cf 93       	push	r28
    1258:	00 d0       	rcall	.+0      	; 0x125a <PRNT_Host_GetDeviceID+0x10>
    125a:	cd b7       	in	r28, 0x3d	; 61
    125c:	de b7       	in	r29, 0x3e	; 62
    125e:	8b 01       	movw	r16, r22
    1260:	6a 01       	movw	r12, r20
	uint8_t  ErrorCode = HOST_SENDCONTROL_Successful;
	uint16_t DeviceIDStringLength = 0;
    1262:	1a 82       	std	Y+2, r1	; 0x02
    1264:	19 82       	std	Y+1, r1	; 0x01

	USB_ControlRequest = (USB_Request_Header_t)
    1266:	fc 01       	movw	r30, r24
    1268:	95 81       	ldd	r25, Z+5	; 0x05
    126a:	81 ea       	ldi	r24, 0xA1	; 161
    126c:	80 93 4b 01 	sts	0x014B, r24
    1270:	10 92 4c 01 	sts	0x014C, r1
    1274:	10 92 4e 01 	sts	0x014E, r1
    1278:	10 92 4d 01 	sts	0x014D, r1
    127c:	90 93 4f 01 	sts	0x014F, r25
    1280:	10 92 50 01 	sts	0x0150, r1
    1284:	82 e0       	ldi	r24, 0x02	; 2
    1286:	90 e0       	ldi	r25, 0x00	; 0
    1288:	90 93 52 01 	sts	0x0152, r25
    128c:	80 93 51 01 	sts	0x0151, r24
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1290:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = sizeof(DeviceIDStringLength),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(&DeviceIDStringLength)) != HOST_SENDCONTROL_Successful)
    1294:	ce 01       	movw	r24, r28
    1296:	01 96       	adiw	r24, 0x01	; 1
    1298:	62 de       	rcall	.-828    	; 0xf5e <USB_Host_SendControlRequest>
    129a:	f8 2e       	mov	r15, r24
    129c:	88 23       	and	r24, r24
    129e:	51 f5       	brne	.+84     	; 0x12f4 <PRNT_Host_GetDeviceID+0xaa>
	  return ErrorCode;

	if (!(DeviceIDStringLength))
    12a0:	29 81       	ldd	r18, Y+1	; 0x01
    12a2:	3a 81       	ldd	r19, Y+2	; 0x02
    12a4:	21 15       	cp	r18, r1
    12a6:	31 05       	cpc	r19, r1
    12a8:	19 f1       	breq	.+70     	; 0x12f0 <PRNT_Host_GetDeviceID+0xa6>

				Temp = Data.Bytes[0];
				Data.Bytes[0] = Data.Bytes[1];
				Data.Bytes[1] = Temp;

				return Data.Word;
    12aa:	83 2f       	mov	r24, r19
    12ac:	92 2f       	mov	r25, r18
	{
		DeviceIDString[0] = 0x00;
		return HOST_SENDCONTROL_Successful;
	}

	DeviceIDStringLength = be16_to_cpu(DeviceIDStringLength);
    12ae:	9a 83       	std	Y+2, r25	; 0x02
    12b0:	89 83       	std	Y+1, r24	; 0x01

	if (DeviceIDStringLength > BufferSize)
    12b2:	c8 16       	cp	r12, r24
    12b4:	d9 06       	cpc	r13, r25
    12b6:	10 f4       	brcc	.+4      	; 0x12bc <PRNT_Host_GetDeviceID+0x72>
	  DeviceIDStringLength = BufferSize;
    12b8:	da 82       	std	Y+2, r13	; 0x02
    12ba:	c9 82       	std	Y+1, r12	; 0x01

	USB_ControlRequest.wLength = DeviceIDStringLength;
    12bc:	89 81       	ldd	r24, Y+1	; 0x01
    12be:	9a 81       	ldd	r25, Y+2	; 0x02
    12c0:	90 93 52 01 	sts	0x0152, r25
    12c4:	80 93 51 01 	sts	0x0151, r24

	if ((ErrorCode = USB_Host_SendControlRequest(DeviceIDString)) != HOST_SENDCONTROL_Successful)
    12c8:	c8 01       	movw	r24, r16
    12ca:	49 de       	rcall	.-878    	; 0xf5e <USB_Host_SendControlRequest>
    12cc:	f8 2e       	mov	r15, r24
    12ce:	88 23       	and	r24, r24
    12d0:	89 f4       	brne	.+34     	; 0x12f4 <PRNT_Host_GetDeviceID+0xaa>
	  return ErrorCode;

	memmove(&DeviceIDString[0], &DeviceIDString[2], DeviceIDStringLength - 2);
    12d2:	b8 01       	movw	r22, r16
    12d4:	6e 5f       	subi	r22, 0xFE	; 254
    12d6:	7f 4f       	sbci	r23, 0xFF	; 255
    12d8:	49 81       	ldd	r20, Y+1	; 0x01
    12da:	5a 81       	ldd	r21, Y+2	; 0x02
    12dc:	42 50       	subi	r20, 0x02	; 2
    12de:	50 40       	sbci	r21, 0x00	; 0
    12e0:	c8 01       	movw	r24, r16
    12e2:	55 d1       	rcall	.+682    	; 0x158e <memmove>

	DeviceIDString[DeviceIDStringLength - 2] = 0x00;
    12e4:	89 81       	ldd	r24, Y+1	; 0x01
    12e6:	9a 81       	ldd	r25, Y+2	; 0x02
    12e8:	08 0f       	add	r16, r24
    12ea:	19 1f       	adc	r17, r25
    12ec:	02 50       	subi	r16, 0x02	; 2
    12ee:	10 40       	sbci	r17, 0x00	; 0
    12f0:	f8 01       	movw	r30, r16
    12f2:	10 82       	st	Z, r1

	return HOST_SENDCONTROL_Successful;
}
    12f4:	8f 2d       	mov	r24, r15
    12f6:	0f 90       	pop	r0
    12f8:	0f 90       	pop	r0
    12fa:	cf 91       	pop	r28
    12fc:	df 91       	pop	r29
    12fe:	1f 91       	pop	r17
    1300:	0f 91       	pop	r16
    1302:	ff 90       	pop	r15
    1304:	df 90       	pop	r13
    1306:	cf 90       	pop	r12
    1308:	08 95       	ret

0000130a <PRNT_Host_SendData>:
}

uint8_t PRNT_Host_SendData(USB_ClassInfo_PRNT_Host_t* const PRNTInterfaceInfo,
                           void* Buffer,
                           const uint16_t Length)
{
    130a:	fc 01       	movw	r30, r24
	uint8_t ErrorCode;

	if ((USB_HostState != HOST_STATE_Configured) || !(PRNTInterfaceInfo->State.IsActive))
    130c:	80 91 53 01 	lds	r24, 0x0153
    1310:	8b 30       	cpi	r24, 0x0B	; 11
    1312:	01 f5       	brne	.+64     	; 0x1354 <PRNT_Host_SendData+0x4a>
    1314:	84 81       	ldd	r24, Z+4	; 0x04
    1316:	88 23       	and	r24, r24
    1318:	e9 f0       	breq	.+58     	; 0x1354 <PRNT_Host_SendData+0x4a>
	  return PIPE_RWSTREAM_DeviceDisconnected;

	Pipe_SelectPipe(PRNTInterfaceInfo->Config.DataOUTPipeNumber);
    131a:	82 81       	ldd	r24, Z+2	; 0x02
    131c:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1320:	80 91 a9 00 	lds	r24, 0x00A9
    1324:	8f 7b       	andi	r24, 0xBF	; 191
    1326:	80 93 a9 00 	sts	0x00A9, r24
	Pipe_Unfreeze();

	if ((ErrorCode = Pipe_Write_Stream_LE(Buffer, Length, NULL)) != PIPE_RWSTREAM_NoError)
    132a:	cb 01       	movw	r24, r22
    132c:	ba 01       	movw	r22, r20
    132e:	40 e0       	ldi	r20, 0x00	; 0
    1330:	50 e0       	ldi	r21, 0x00	; 0
    1332:	f6 dc       	rcall	.-1556   	; 0xd20 <Pipe_Write_Stream_LE>
    1334:	98 2f       	mov	r25, r24
    1336:	88 23       	and	r24, r24
    1338:	71 f4       	brne	.+28     	; 0x1356 <PRNT_Host_SendData+0x4c>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    133a:	80 91 a6 00 	lds	r24, 0x00A6
    133e:	8b 77       	andi	r24, 0x7B	; 123
    1340:	80 93 a6 00 	sts	0x00A6, r24
	  return ErrorCode;

	Pipe_ClearOUT();

	ErrorCode = Pipe_WaitUntilReady();
    1344:	ad db       	rcall	.-2214   	; 0xaa0 <Pipe_WaitUntilReady>
    1346:	98 2f       	mov	r25, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1348:	80 91 a9 00 	lds	r24, 0x00A9
    134c:	80 64       	ori	r24, 0x40	; 64
    134e:	80 93 a9 00 	sts	0x00A9, r24
    1352:	01 c0       	rjmp	.+2      	; 0x1356 <PRNT_Host_SendData+0x4c>

	Pipe_Freeze();

	return ErrorCode;
    1354:	92 e0       	ldi	r25, 0x02	; 2
}
    1356:	89 2f       	mov	r24, r25
    1358:	08 95       	ret

0000135a <PRNT_Host_Flush>:
	Pipe_SelectPipe(PIPE_CONTROLPIPE);
	return USB_Host_SendControlRequest(NULL);
}

uint8_t PRNT_Host_Flush(USB_ClassInfo_PRNT_Host_t* const PRNTInterfaceInfo)
{
    135a:	fc 01       	movw	r30, r24
	if ((USB_HostState != HOST_STATE_Configured) || !(PRNTInterfaceInfo->State.IsActive))
    135c:	80 91 53 01 	lds	r24, 0x0153
    1360:	8b 30       	cpi	r24, 0x0B	; 11
    1362:	49 f5       	brne	.+82     	; 0x13b6 <PRNT_Host_Flush+0x5c>
    1364:	84 81       	ldd	r24, Z+4	; 0x04
    1366:	88 23       	and	r24, r24
    1368:	31 f1       	breq	.+76     	; 0x13b6 <PRNT_Host_Flush+0x5c>
	  return PIPE_READYWAIT_DeviceDisconnected;

	uint8_t ErrorCode;

	Pipe_SelectPipe(PRNTInterfaceInfo->Config.DataOUTPipeNumber);
    136a:	82 81       	ldd	r24, Z+2	; 0x02
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    136c:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1370:	80 91 a9 00 	lds	r24, 0x00A9
    1374:	8f 7b       	andi	r24, 0xBF	; 191
    1376:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    137a:	80 91 f6 00 	lds	r24, 0x00F6
    137e:	90 91 f7 00 	lds	r25, 0x00F7
	Pipe_Unfreeze();

	if (!(Pipe_BytesInPipe()))
    1382:	89 2b       	or	r24, r25
    1384:	b1 f0       	breq	.+44     	; 0x13b2 <PRNT_Host_Flush+0x58>
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
    1386:	90 91 a6 00 	lds	r25, 0x00A6
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    138a:	80 91 a6 00 	lds	r24, 0x00A6
    138e:	8b 77       	andi	r24, 0x7B	; 123
    1390:	80 93 a6 00 	sts	0x00A6, r24

	bool BankFull = !(Pipe_IsReadWriteAllowed());

	Pipe_ClearOUT();

	if (BankFull)
    1394:	95 fd       	sbrc	r25, 5
    1396:	08 c0       	rjmp	.+16     	; 0x13a8 <PRNT_Host_Flush+0x4e>
	{
		if ((ErrorCode = Pipe_WaitUntilReady()) != PIPE_READYWAIT_NoError)
    1398:	83 db       	rcall	.-2298   	; 0xaa0 <Pipe_WaitUntilReady>
    139a:	88 23       	and	r24, r24
    139c:	69 f4       	brne	.+26     	; 0x13b8 <PRNT_Host_Flush+0x5e>
    139e:	80 91 a6 00 	lds	r24, 0x00A6
    13a2:	8b 77       	andi	r24, 0x7B	; 123
    13a4:	80 93 a6 00 	sts	0x00A6, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    13a8:	80 91 a9 00 	lds	r24, 0x00A9
    13ac:	80 64       	ori	r24, 0x40	; 64
    13ae:	80 93 a9 00 	sts	0x00A9, r24
    13b2:	80 e0       	ldi	r24, 0x00	; 0
    13b4:	08 95       	ret
		Pipe_ClearOUT();
	}

	Pipe_Freeze();

	return PIPE_READYWAIT_NoError;
    13b6:	82 e0       	ldi	r24, 0x02	; 2
}
    13b8:	08 95       	ret

000013ba <PRNT_Host_USBTask>:

	return DESCRIPTOR_SEARCH_NotFound;
}

void PRNT_Host_USBTask(USB_ClassInfo_PRNT_Host_t* const PRNTInterfaceInfo)
{
    13ba:	fc 01       	movw	r30, r24
	if ((USB_HostState != HOST_STATE_Configured) || !(PRNTInterfaceInfo->State.IsActive))
    13bc:	80 91 53 01 	lds	r24, 0x0153
    13c0:	8b 30       	cpi	r24, 0x0B	; 11
    13c2:	29 f4       	brne	.+10     	; 0x13ce <PRNT_Host_USBTask+0x14>
    13c4:	84 81       	ldd	r24, Z+4	; 0x04
    13c6:	88 23       	and	r24, r24
    13c8:	11 f0       	breq	.+4      	; 0x13ce <PRNT_Host_USBTask+0x14>
	  return;

	#if !defined(NO_CLASS_DRIVER_AUTOFLUSH)
	PRNT_Host_Flush(PRNTInterfaceInfo);
    13ca:	cf 01       	movw	r24, r30
    13cc:	c6 cf       	rjmp	.-116    	; 0x135a <PRNT_Host_Flush>
    13ce:	08 95       	ret

000013d0 <PRNT_Host_SetBidirectionalMode>:
	#endif
}

uint8_t PRNT_Host_SetBidirectionalMode(USB_ClassInfo_PRNT_Host_t* const PRNTInterfaceInfo)
{
    13d0:	fc 01       	movw	r30, r24
	if (PRNTInterfaceInfo->State.AlternateSetting)
    13d2:	66 81       	ldd	r22, Z+6	; 0x06
    13d4:	66 23       	and	r22, r22
    13d6:	11 f4       	brne	.+4      	; 0x13dc <PRNT_Host_SetBidirectionalMode+0xc>
    13d8:	80 e0       	ldi	r24, 0x00	; 0
    13da:	08 95       	ret
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_SetInterfaceAltSetting(PRNTInterfaceInfo->State.InterfaceNumber,
    13dc:	85 81       	ldd	r24, Z+5	; 0x05
			return ErrorCode;
		}
	}

	return HOST_SENDCONTROL_Successful;
}
    13de:	c6 ce       	rjmp	.-628    	; 0x116c <USB_Host_SetInterfaceAltSetting>

000013e0 <PRNT_Host_ConfigurePipes>:
#include "Printer.h"

uint8_t PRNT_Host_ConfigurePipes(USB_ClassInfo_PRNT_Host_t* const PRNTInterfaceInfo,
                                 uint16_t ConfigDescriptorSize,
							     void* ConfigDescriptorData)
{
    13e0:	6f 92       	push	r6
    13e2:	7f 92       	push	r7
    13e4:	8f 92       	push	r8
    13e6:	9f 92       	push	r9
    13e8:	af 92       	push	r10
    13ea:	bf 92       	push	r11
    13ec:	cf 92       	push	r12
    13ee:	df 92       	push	r13
    13f0:	ef 92       	push	r14
    13f2:	ff 92       	push	r15
    13f4:	0f 93       	push	r16
    13f6:	1f 93       	push	r17
    13f8:	df 93       	push	r29
    13fa:	cf 93       	push	r28
    13fc:	00 d0       	rcall	.+0      	; 0x13fe <PRNT_Host_ConfigurePipes+0x1e>
    13fe:	00 d0       	rcall	.+0      	; 0x1400 <PRNT_Host_ConfigurePipes+0x20>
    1400:	0f 92       	push	r0
    1402:	cd b7       	in	r28, 0x3d	; 61
    1404:	de b7       	in	r29, 0x3e	; 62
    1406:	6c 01       	movw	r12, r24
    1408:	7a 83       	std	Y+2, r23	; 0x02
    140a:	69 83       	std	Y+1, r22	; 0x01
    140c:	5c 83       	std	Y+4, r21	; 0x04
    140e:	4b 83       	std	Y+3, r20	; 0x03
	USB_Descriptor_Endpoint_t*  DataINEndpoint   = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint  = NULL;
	USB_Descriptor_Interface_t* PrinterInterface = NULL;

	memset(&PRNTInterfaceInfo->State, 0x00, sizeof(PRNTInterfaceInfo->State));
    1410:	04 96       	adiw	r24, 0x04	; 4
    1412:	fc 01       	movw	r30, r24
    1414:	87 e0       	ldi	r24, 0x07	; 7
    1416:	df 01       	movw	r26, r30
    1418:	1d 92       	st	X+, r1
    141a:	8a 95       	dec	r24
    141c:	e9 f7       	brne	.-6      	; 0x1418 <PRNT_Host_ConfigurePipes+0x38>

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
    141e:	eb 81       	ldd	r30, Y+3	; 0x03
    1420:	fc 81       	ldd	r31, Y+4	; 0x04
    1422:	81 81       	ldd	r24, Z+1	; 0x01
    1424:	82 30       	cpi	r24, 0x02	; 2
    1426:	11 f0       	breq	.+4      	; 0x142c <PRNT_Host_ConfigurePipes+0x4c>
    1428:	81 e0       	ldi	r24, 0x01	; 1
    142a:	76 c0       	rjmp	.+236    	; 0x1518 <PRNT_Host_ConfigurePipes+0x138>
    142c:	66 24       	eor	r6, r6
    142e:	77 24       	eor	r7, r7
    1430:	88 24       	eor	r8, r8
    1432:	99 24       	eor	r9, r9
    1434:	aa 24       	eor	r10, r10
    1436:	bb 24       	eor	r11, r11
	  return PRNT_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		if (!(PrinterInterface) ||
    1438:	83 e0       	ldi	r24, 0x03	; 3
    143a:	e8 2e       	mov	r14, r24
    143c:	f1 2c       	mov	r15, r1
    143e:	ec 0e       	add	r14, r28
    1440:	fd 1e       	adc	r15, r29
    1442:	8e 01       	movw	r16, r28
    1444:	0f 5f       	subi	r16, 0xFF	; 255
    1446:	1f 4f       	sbci	r17, 0xFF	; 255
    1448:	61 14       	cp	r6, r1
    144a:	71 04       	cpc	r7, r1
    144c:	39 f0       	breq	.+14     	; 0x145c <PRNT_Host_ConfigurePipes+0x7c>
    144e:	c8 01       	movw	r24, r16
    1450:	b7 01       	movw	r22, r14
    1452:	45 e1       	ldi	r20, 0x15	; 21
    1454:	59 e0       	ldi	r21, 0x09	; 9
    1456:	bb dc       	rcall	.-1674   	; 0xdce <USB_GetNextDescriptorComp>
    1458:	88 23       	and	r24, r24
    145a:	81 f0       	breq	.+32     	; 0x147c <PRNT_Host_ConfigurePipes+0x9c>
		    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
		                              DCOMP_PRNT_Host_NextPRNTInterfaceEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    145c:	c8 01       	movw	r24, r16
    145e:	b7 01       	movw	r22, r14
    1460:	44 e0       	ldi	r20, 0x04	; 4
    1462:	59 e0       	ldi	r21, 0x09	; 9
    1464:	b4 dc       	rcall	.-1688   	; 0xdce <USB_GetNextDescriptorComp>
    1466:	88 23       	and	r24, r24
    1468:	11 f0       	breq	.+4      	; 0x146e <PRNT_Host_ConfigurePipes+0x8e>
    146a:	82 e0       	ldi	r24, 0x02	; 2
    146c:	55 c0       	rjmp	.+170    	; 0x1518 <PRNT_Host_ConfigurePipes+0x138>
			                              DCOMP_PRNT_Host_NextPRNTInterface) != DESCRIPTOR_SEARCH_COMP_Found)
			{
				return PRNT_ENUMERROR_NoCompatibleInterfaceFound;
			}

			PrinterInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);
    146e:	6b 80       	ldd	r6, Y+3	; 0x03
    1470:	7c 80       	ldd	r7, Y+4	; 0x04
    1472:	aa 24       	eor	r10, r10
    1474:	bb 24       	eor	r11, r11
    1476:	88 24       	eor	r8, r8
    1478:	99 24       	eor	r9, r9
    147a:	e6 cf       	rjmp	.-52     	; 0x1448 <PRNT_Host_ConfigurePipes+0x68>
			DataOUTEndpoint = NULL;

			continue;
		}

		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Endpoint_t);
    147c:	eb 81       	ldd	r30, Y+3	; 0x03
    147e:	fc 81       	ldd	r31, Y+4	; 0x04

		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
    1480:	82 81       	ldd	r24, Z+2	; 0x02
    1482:	87 fd       	sbrc	r24, 7
    1484:	02 c0       	rjmp	.+4      	; 0x148a <PRNT_Host_ConfigurePipes+0xaa>
    1486:	5f 01       	movw	r10, r30
    1488:	01 c0       	rjmp	.+2      	; 0x148c <PRNT_Host_ConfigurePipes+0xac>
    148a:	4f 01       	movw	r8, r30
	memset(&PRNTInterfaceInfo->State, 0x00, sizeof(PRNTInterfaceInfo->State));

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return PRNT_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
    148c:	81 14       	cp	r8, r1
    148e:	91 04       	cpc	r9, r1
    1490:	d9 f2       	breq	.-74     	; 0x1448 <PRNT_Host_ConfigurePipes+0x68>
    1492:	a1 14       	cp	r10, r1
    1494:	b1 04       	cpc	r11, r1
    1496:	c1 f2       	breq	.-80     	; 0x1448 <PRNT_Host_ConfigurePipes+0x68>
    1498:	91 e0       	ldi	r25, 0x01	; 1
		uint8_t  Type;
		uint8_t  Token;
		uint8_t  EndpointAddress;
		bool     DoubleBanked;

		if (PipeNum == PRNTInterfaceInfo->Config.DataINPipeNumber)
    149a:	f6 01       	movw	r30, r12
    149c:	80 81       	ld	r24, Z
    149e:	98 17       	cp	r25, r24
    14a0:	61 f4       	brne	.+24     	; 0x14ba <PRNT_Host_ConfigurePipes+0xda>
		{
			Size            = le16_to_cpu(DataINEndpoint->EndpointSize);
    14a2:	d4 01       	movw	r26, r8
    14a4:	14 96       	adiw	r26, 0x04	; 4
    14a6:	0d 91       	ld	r16, X+
    14a8:	1c 91       	ld	r17, X
    14aa:	15 97       	sbiw	r26, 0x05	; 5
			EndpointAddress = DataINEndpoint->EndpointAddress;
    14ac:	12 96       	adiw	r26, 0x02	; 2
    14ae:	2c 91       	ld	r18, X
			Token           = PIPE_TOKEN_IN;
			Type            = EP_TYPE_BULK;
			DoubleBanked    = PRNTInterfaceInfo->Config.DataINPipeDoubleBank;
    14b0:	81 81       	ldd	r24, Z+1	; 0x01

			PRNTInterfaceInfo->State.DataINPipeSize = DataINEndpoint->EndpointSize;
    14b2:	10 87       	std	Z+8, r17	; 0x08
    14b4:	07 83       	std	Z+7, r16	; 0x07
    14b6:	40 e1       	ldi	r20, 0x10	; 16
    14b8:	0f c0       	rjmp	.+30     	; 0x14d8 <PRNT_Host_ConfigurePipes+0xf8>
		}
		else if (PipeNum == PRNTInterfaceInfo->Config.DataOUTPipeNumber)
    14ba:	f6 01       	movw	r30, r12
    14bc:	82 81       	ldd	r24, Z+2	; 0x02
    14be:	98 17       	cp	r25, r24
    14c0:	d1 f4       	brne	.+52     	; 0x14f6 <PRNT_Host_ConfigurePipes+0x116>
		{
			Size            = le16_to_cpu(DataOUTEndpoint->EndpointSize);
    14c2:	d5 01       	movw	r26, r10
    14c4:	14 96       	adiw	r26, 0x04	; 4
    14c6:	0d 91       	ld	r16, X+
    14c8:	1c 91       	ld	r17, X
    14ca:	15 97       	sbiw	r26, 0x05	; 5
			EndpointAddress = DataOUTEndpoint->EndpointAddress;
    14cc:	12 96       	adiw	r26, 0x02	; 2
    14ce:	2c 91       	ld	r18, X
			Token           = PIPE_TOKEN_OUT;
			Type            = EP_TYPE_BULK;
			DoubleBanked    = PRNTInterfaceInfo->Config.DataOUTPipeDoubleBank;
    14d0:	83 81       	ldd	r24, Z+3	; 0x03

			PRNTInterfaceInfo->State.DataOUTPipeSize = DataOUTEndpoint->EndpointSize;
    14d2:	12 87       	std	Z+10, r17	; 0x0a
    14d4:	01 87       	std	Z+9, r16	; 0x09
    14d6:	40 e2       	ldi	r20, 0x20	; 32
		else
		{
			continue;
		}

		if (!(Pipe_ConfigurePipe(PipeNum, Type, Token, EndpointAddress, Size,
    14d8:	88 23       	and	r24, r24
    14da:	11 f4       	brne	.+4      	; 0x14e0 <PRNT_Host_ConfigurePipes+0x100>
    14dc:	30 e0       	ldi	r19, 0x00	; 0
    14de:	01 c0       	rjmp	.+2      	; 0x14e2 <PRNT_Host_ConfigurePipes+0x102>
    14e0:	34 e0       	ldi	r19, 0x04	; 4
    14e2:	89 2f       	mov	r24, r25
    14e4:	62 e0       	ldi	r22, 0x02	; 2
    14e6:	e3 2e       	mov	r14, r19
    14e8:	9d 83       	std	Y+5, r25	; 0x05
    14ea:	68 da       	rcall	.-2864   	; 0x9bc <Pipe_ConfigurePipe>
    14ec:	9d 81       	ldd	r25, Y+5	; 0x05
    14ee:	88 23       	and	r24, r24
    14f0:	11 f4       	brne	.+4      	; 0x14f6 <PRNT_Host_ConfigurePipes+0x116>
    14f2:	83 e0       	ldi	r24, 0x03	; 3
    14f4:	11 c0       	rjmp	.+34     	; 0x1518 <PRNT_Host_ConfigurePipes+0x138>
		  DataINEndpoint  = EndpointData;
		else
		  DataOUTEndpoint = EndpointData;
	}

	for (uint8_t PipeNum = 1; PipeNum < PIPE_TOTAL_PIPES; PipeNum++)
    14f6:	9f 5f       	subi	r25, 0xFF	; 255
    14f8:	97 30       	cpi	r25, 0x07	; 7
    14fa:	79 f6       	brne	.-98     	; 0x149a <PRNT_Host_ConfigurePipes+0xba>
		{
			return PRNT_ENUMERROR_PipeConfigurationFailed;
		}
	}

	PRNTInterfaceInfo->State.InterfaceNumber  = PrinterInterface->InterfaceNumber;
    14fc:	f3 01       	movw	r30, r6
    14fe:	82 81       	ldd	r24, Z+2	; 0x02
    1500:	d6 01       	movw	r26, r12
    1502:	15 96       	adiw	r26, 0x05	; 5
    1504:	8c 93       	st	X, r24
    1506:	15 97       	sbiw	r26, 0x05	; 5
	PRNTInterfaceInfo->State.AlternateSetting = PrinterInterface->AlternateSetting;
    1508:	83 81       	ldd	r24, Z+3	; 0x03
    150a:	16 96       	adiw	r26, 0x06	; 6
    150c:	8c 93       	st	X, r24
    150e:	16 97       	sbiw	r26, 0x06	; 6
	PRNTInterfaceInfo->State.IsActive = true;
    1510:	81 e0       	ldi	r24, 0x01	; 1
    1512:	14 96       	adiw	r26, 0x04	; 4
    1514:	8c 93       	st	X, r24
    1516:	80 e0       	ldi	r24, 0x00	; 0

	return PRNT_ENUMERROR_NoError;
}
    1518:	0f 90       	pop	r0
    151a:	0f 90       	pop	r0
    151c:	0f 90       	pop	r0
    151e:	0f 90       	pop	r0
    1520:	0f 90       	pop	r0
    1522:	cf 91       	pop	r28
    1524:	df 91       	pop	r29
    1526:	1f 91       	pop	r17
    1528:	0f 91       	pop	r16
    152a:	ff 90       	pop	r15
    152c:	ef 90       	pop	r14
    152e:	df 90       	pop	r13
    1530:	cf 90       	pop	r12
    1532:	bf 90       	pop	r11
    1534:	af 90       	pop	r10
    1536:	9f 90       	pop	r9
    1538:	8f 90       	pop	r8
    153a:	7f 90       	pop	r7
    153c:	6f 90       	pop	r6
    153e:	08 95       	ret

00001540 <Serial_putchar>:

FILE USARTSerialStream;

int Serial_putchar(char DataByte,
                   FILE *Stream)
{
    1540:	98 2f       	mov	r25, r24
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
    1542:	80 91 c8 00 	lds	r24, 0x00C8
    1546:	85 ff       	sbrs	r24, 5
    1548:	fc cf       	rjmp	.-8      	; 0x1542 <Serial_putchar+0x2>
				UDR1 = DataByte;
    154a:	90 93 ce 00 	sts	0x00CE, r25
	(void)Stream;

	Serial_SendByte(DataByte);
	return 0;
}
    154e:	80 e0       	ldi	r24, 0x00	; 0
    1550:	90 e0       	ldi	r25, 0x00	; 0
    1552:	08 95       	ret

00001554 <Serial_getchar>:
			 *  \return Boolean \c true if a character has been received, \c false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    1554:	80 91 c8 00 	lds	r24, 0x00C8

int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    1558:	87 fd       	sbrc	r24, 7
    155a:	03 c0       	rjmp	.+6      	; 0x1562 <Serial_getchar+0xe>
    155c:	2e ef       	ldi	r18, 0xFE	; 254
    155e:	3f ef       	ldi	r19, 0xFF	; 255
    1560:	0b c0       	rjmp	.+22     	; 0x1578 <Serial_getchar+0x24>
    1562:	80 91 c8 00 	lds	r24, 0x00C8
			 *  \return Next byte received from the USART, or a negative value if no byte has been received.
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
    1566:	87 fd       	sbrc	r24, 7
    1568:	03 c0       	rjmp	.+6      	; 0x1570 <Serial_getchar+0x1c>
    156a:	2f ef       	ldi	r18, 0xFF	; 255
    156c:	3f ef       	ldi	r19, 0xFF	; 255
    156e:	04 c0       	rjmp	.+8      	; 0x1578 <Serial_getchar+0x24>
				  return -1;
				
				return UDR1;
    1570:	80 91 ce 00 	lds	r24, 0x00CE
    1574:	28 2f       	mov	r18, r24
    1576:	30 e0       	ldi	r19, 0x00	; 0
	  return _FDEV_EOF;

	return Serial_ReceiveByte();
}
    1578:	c9 01       	movw	r24, r18
    157a:	08 95       	ret

0000157c <memcpy>:
    157c:	fb 01       	movw	r30, r22
    157e:	dc 01       	movw	r26, r24
    1580:	02 c0       	rjmp	.+4      	; 0x1586 <memcpy+0xa>
    1582:	01 90       	ld	r0, Z+
    1584:	0d 92       	st	X+, r0
    1586:	41 50       	subi	r20, 0x01	; 1
    1588:	50 40       	sbci	r21, 0x00	; 0
    158a:	d8 f7       	brcc	.-10     	; 0x1582 <memcpy+0x6>
    158c:	08 95       	ret

0000158e <memmove>:
    158e:	68 17       	cp	r22, r24
    1590:	79 07       	cpc	r23, r25
    1592:	68 f4       	brcc	.+26     	; 0x15ae <memmove+0x20>
    1594:	fb 01       	movw	r30, r22
    1596:	dc 01       	movw	r26, r24
    1598:	e4 0f       	add	r30, r20
    159a:	f5 1f       	adc	r31, r21
    159c:	a4 0f       	add	r26, r20
    159e:	b5 1f       	adc	r27, r21
    15a0:	02 c0       	rjmp	.+4      	; 0x15a6 <memmove+0x18>
    15a2:	02 90       	ld	r0, -Z
    15a4:	0e 92       	st	-X, r0
    15a6:	41 50       	subi	r20, 0x01	; 1
    15a8:	50 40       	sbci	r21, 0x00	; 0
    15aa:	d8 f7       	brcc	.-10     	; 0x15a2 <memmove+0x14>
    15ac:	08 95       	ret
    15ae:	e6 cf       	rjmp	.-52     	; 0x157c <memcpy>

000015b0 <printf_P>:
    15b0:	df 93       	push	r29
    15b2:	cf 93       	push	r28
    15b4:	cd b7       	in	r28, 0x3d	; 61
    15b6:	de b7       	in	r29, 0x3e	; 62
    15b8:	fe 01       	movw	r30, r28
    15ba:	35 96       	adiw	r30, 0x05	; 5
    15bc:	61 91       	ld	r22, Z+
    15be:	71 91       	ld	r23, Z+
    15c0:	a0 91 64 01 	lds	r26, 0x0164
    15c4:	b0 91 65 01 	lds	r27, 0x0165
    15c8:	13 96       	adiw	r26, 0x03	; 3
    15ca:	8c 91       	ld	r24, X
    15cc:	13 97       	sbiw	r26, 0x03	; 3
    15ce:	88 60       	ori	r24, 0x08	; 8
    15d0:	13 96       	adiw	r26, 0x03	; 3
    15d2:	8c 93       	st	X, r24
    15d4:	80 91 64 01 	lds	r24, 0x0164
    15d8:	90 91 65 01 	lds	r25, 0x0165
    15dc:	af 01       	movw	r20, r30
    15de:	3f d0       	rcall	.+126    	; 0x165e <vfprintf>
    15e0:	e0 91 64 01 	lds	r30, 0x0164
    15e4:	f0 91 65 01 	lds	r31, 0x0165
    15e8:	23 81       	ldd	r18, Z+3	; 0x03
    15ea:	27 7f       	andi	r18, 0xF7	; 247
    15ec:	23 83       	std	Z+3, r18	; 0x03
    15ee:	cf 91       	pop	r28
    15f0:	df 91       	pop	r29
    15f2:	08 95       	ret

000015f4 <puts_P>:
    15f4:	0f 93       	push	r16
    15f6:	1f 93       	push	r17
    15f8:	cf 93       	push	r28
    15fa:	df 93       	push	r29
    15fc:	ec 01       	movw	r28, r24
    15fe:	e0 91 64 01 	lds	r30, 0x0164
    1602:	f0 91 65 01 	lds	r31, 0x0165
    1606:	83 81       	ldd	r24, Z+3	; 0x03
    1608:	81 ff       	sbrs	r24, 1
    160a:	21 c0       	rjmp	.+66     	; 0x164e <puts_P+0x5a>
    160c:	00 e0       	ldi	r16, 0x00	; 0
    160e:	10 e0       	ldi	r17, 0x00	; 0
    1610:	0e c0       	rjmp	.+28     	; 0x162e <puts_P+0x3a>
    1612:	e0 91 64 01 	lds	r30, 0x0164
    1616:	f0 91 65 01 	lds	r31, 0x0165
    161a:	20 85       	ldd	r18, Z+8	; 0x08
    161c:	31 85       	ldd	r19, Z+9	; 0x09
    161e:	bf 01       	movw	r22, r30
    1620:	f9 01       	movw	r30, r18
    1622:	09 95       	icall
    1624:	89 2b       	or	r24, r25
    1626:	11 f0       	breq	.+4      	; 0x162c <puts_P+0x38>
    1628:	0f ef       	ldi	r16, 0xFF	; 255
    162a:	1f ef       	ldi	r17, 0xFF	; 255
    162c:	21 96       	adiw	r28, 0x01	; 1
    162e:	fe 01       	movw	r30, r28
    1630:	84 91       	lpm	r24, Z+
    1632:	88 23       	and	r24, r24
    1634:	71 f7       	brne	.-36     	; 0x1612 <puts_P+0x1e>
    1636:	e0 91 64 01 	lds	r30, 0x0164
    163a:	f0 91 65 01 	lds	r31, 0x0165
    163e:	20 85       	ldd	r18, Z+8	; 0x08
    1640:	31 85       	ldd	r19, Z+9	; 0x09
    1642:	8a e0       	ldi	r24, 0x0A	; 10
    1644:	bf 01       	movw	r22, r30
    1646:	f9 01       	movw	r30, r18
    1648:	09 95       	icall
    164a:	89 2b       	or	r24, r25
    164c:	11 f0       	breq	.+4      	; 0x1652 <puts_P+0x5e>
    164e:	0f ef       	ldi	r16, 0xFF	; 255
    1650:	1f ef       	ldi	r17, 0xFF	; 255
    1652:	c8 01       	movw	r24, r16
    1654:	df 91       	pop	r29
    1656:	cf 91       	pop	r28
    1658:	1f 91       	pop	r17
    165a:	0f 91       	pop	r16
    165c:	08 95       	ret

0000165e <vfprintf>:
    165e:	2f 92       	push	r2
    1660:	3f 92       	push	r3
    1662:	4f 92       	push	r4
    1664:	5f 92       	push	r5
    1666:	6f 92       	push	r6
    1668:	7f 92       	push	r7
    166a:	8f 92       	push	r8
    166c:	9f 92       	push	r9
    166e:	af 92       	push	r10
    1670:	bf 92       	push	r11
    1672:	cf 92       	push	r12
    1674:	df 92       	push	r13
    1676:	ef 92       	push	r14
    1678:	ff 92       	push	r15
    167a:	0f 93       	push	r16
    167c:	1f 93       	push	r17
    167e:	df 93       	push	r29
    1680:	cf 93       	push	r28
    1682:	cd b7       	in	r28, 0x3d	; 61
    1684:	de b7       	in	r29, 0x3e	; 62
    1686:	2b 97       	sbiw	r28, 0x0b	; 11
    1688:	0f b6       	in	r0, 0x3f	; 63
    168a:	f8 94       	cli
    168c:	de bf       	out	0x3e, r29	; 62
    168e:	0f be       	out	0x3f, r0	; 63
    1690:	cd bf       	out	0x3d, r28	; 61
    1692:	3c 01       	movw	r6, r24
    1694:	2b 01       	movw	r4, r22
    1696:	5a 01       	movw	r10, r20
    1698:	fc 01       	movw	r30, r24
    169a:	17 82       	std	Z+7, r1	; 0x07
    169c:	16 82       	std	Z+6, r1	; 0x06
    169e:	83 81       	ldd	r24, Z+3	; 0x03
    16a0:	81 fd       	sbrc	r24, 1
    16a2:	03 c0       	rjmp	.+6      	; 0x16aa <vfprintf+0x4c>
    16a4:	6f ef       	ldi	r22, 0xFF	; 255
    16a6:	7f ef       	ldi	r23, 0xFF	; 255
    16a8:	b9 c1       	rjmp	.+882    	; 0x1a1c <vfprintf+0x3be>
    16aa:	9a e0       	ldi	r25, 0x0A	; 10
    16ac:	89 2e       	mov	r8, r25
    16ae:	1e 01       	movw	r2, r28
    16b0:	08 94       	sec
    16b2:	21 1c       	adc	r2, r1
    16b4:	31 1c       	adc	r3, r1
    16b6:	f3 01       	movw	r30, r6
    16b8:	23 81       	ldd	r18, Z+3	; 0x03
    16ba:	f2 01       	movw	r30, r4
    16bc:	23 fd       	sbrc	r18, 3
    16be:	85 91       	lpm	r24, Z+
    16c0:	23 ff       	sbrs	r18, 3
    16c2:	81 91       	ld	r24, Z+
    16c4:	2f 01       	movw	r4, r30
    16c6:	88 23       	and	r24, r24
    16c8:	09 f4       	brne	.+2      	; 0x16cc <vfprintf+0x6e>
    16ca:	a5 c1       	rjmp	.+842    	; 0x1a16 <vfprintf+0x3b8>
    16cc:	85 32       	cpi	r24, 0x25	; 37
    16ce:	39 f4       	brne	.+14     	; 0x16de <vfprintf+0x80>
    16d0:	23 fd       	sbrc	r18, 3
    16d2:	85 91       	lpm	r24, Z+
    16d4:	23 ff       	sbrs	r18, 3
    16d6:	81 91       	ld	r24, Z+
    16d8:	2f 01       	movw	r4, r30
    16da:	85 32       	cpi	r24, 0x25	; 37
    16dc:	21 f4       	brne	.+8      	; 0x16e6 <vfprintf+0x88>
    16de:	90 e0       	ldi	r25, 0x00	; 0
    16e0:	b3 01       	movw	r22, r6
    16e2:	cc d1       	rcall	.+920    	; 0x1a7c <fputc>
    16e4:	e8 cf       	rjmp	.-48     	; 0x16b6 <vfprintf+0x58>
    16e6:	98 2f       	mov	r25, r24
    16e8:	ff 24       	eor	r15, r15
    16ea:	ee 24       	eor	r14, r14
    16ec:	99 24       	eor	r9, r9
    16ee:	ff e1       	ldi	r31, 0x1F	; 31
    16f0:	ff 15       	cp	r31, r15
    16f2:	d0 f0       	brcs	.+52     	; 0x1728 <vfprintf+0xca>
    16f4:	9b 32       	cpi	r25, 0x2B	; 43
    16f6:	69 f0       	breq	.+26     	; 0x1712 <vfprintf+0xb4>
    16f8:	9c 32       	cpi	r25, 0x2C	; 44
    16fa:	28 f4       	brcc	.+10     	; 0x1706 <vfprintf+0xa8>
    16fc:	90 32       	cpi	r25, 0x20	; 32
    16fe:	59 f0       	breq	.+22     	; 0x1716 <vfprintf+0xb8>
    1700:	93 32       	cpi	r25, 0x23	; 35
    1702:	91 f4       	brne	.+36     	; 0x1728 <vfprintf+0xca>
    1704:	0e c0       	rjmp	.+28     	; 0x1722 <vfprintf+0xc4>
    1706:	9d 32       	cpi	r25, 0x2D	; 45
    1708:	49 f0       	breq	.+18     	; 0x171c <vfprintf+0xbe>
    170a:	90 33       	cpi	r25, 0x30	; 48
    170c:	69 f4       	brne	.+26     	; 0x1728 <vfprintf+0xca>
    170e:	41 e0       	ldi	r20, 0x01	; 1
    1710:	24 c0       	rjmp	.+72     	; 0x175a <vfprintf+0xfc>
    1712:	52 e0       	ldi	r21, 0x02	; 2
    1714:	f5 2a       	or	r15, r21
    1716:	84 e0       	ldi	r24, 0x04	; 4
    1718:	f8 2a       	or	r15, r24
    171a:	28 c0       	rjmp	.+80     	; 0x176c <vfprintf+0x10e>
    171c:	98 e0       	ldi	r25, 0x08	; 8
    171e:	f9 2a       	or	r15, r25
    1720:	25 c0       	rjmp	.+74     	; 0x176c <vfprintf+0x10e>
    1722:	e0 e1       	ldi	r30, 0x10	; 16
    1724:	fe 2a       	or	r15, r30
    1726:	22 c0       	rjmp	.+68     	; 0x176c <vfprintf+0x10e>
    1728:	f7 fc       	sbrc	r15, 7
    172a:	29 c0       	rjmp	.+82     	; 0x177e <vfprintf+0x120>
    172c:	89 2f       	mov	r24, r25
    172e:	80 53       	subi	r24, 0x30	; 48
    1730:	8a 30       	cpi	r24, 0x0A	; 10
    1732:	70 f4       	brcc	.+28     	; 0x1750 <vfprintf+0xf2>
    1734:	f6 fe       	sbrs	r15, 6
    1736:	05 c0       	rjmp	.+10     	; 0x1742 <vfprintf+0xe4>
    1738:	98 9c       	mul	r9, r8
    173a:	90 2c       	mov	r9, r0
    173c:	11 24       	eor	r1, r1
    173e:	98 0e       	add	r9, r24
    1740:	15 c0       	rjmp	.+42     	; 0x176c <vfprintf+0x10e>
    1742:	e8 9c       	mul	r14, r8
    1744:	e0 2c       	mov	r14, r0
    1746:	11 24       	eor	r1, r1
    1748:	e8 0e       	add	r14, r24
    174a:	f0 e2       	ldi	r31, 0x20	; 32
    174c:	ff 2a       	or	r15, r31
    174e:	0e c0       	rjmp	.+28     	; 0x176c <vfprintf+0x10e>
    1750:	9e 32       	cpi	r25, 0x2E	; 46
    1752:	29 f4       	brne	.+10     	; 0x175e <vfprintf+0x100>
    1754:	f6 fc       	sbrc	r15, 6
    1756:	5f c1       	rjmp	.+702    	; 0x1a16 <vfprintf+0x3b8>
    1758:	40 e4       	ldi	r20, 0x40	; 64
    175a:	f4 2a       	or	r15, r20
    175c:	07 c0       	rjmp	.+14     	; 0x176c <vfprintf+0x10e>
    175e:	9c 36       	cpi	r25, 0x6C	; 108
    1760:	19 f4       	brne	.+6      	; 0x1768 <vfprintf+0x10a>
    1762:	50 e8       	ldi	r21, 0x80	; 128
    1764:	f5 2a       	or	r15, r21
    1766:	02 c0       	rjmp	.+4      	; 0x176c <vfprintf+0x10e>
    1768:	98 36       	cpi	r25, 0x68	; 104
    176a:	49 f4       	brne	.+18     	; 0x177e <vfprintf+0x120>
    176c:	f2 01       	movw	r30, r4
    176e:	23 fd       	sbrc	r18, 3
    1770:	95 91       	lpm	r25, Z+
    1772:	23 ff       	sbrs	r18, 3
    1774:	91 91       	ld	r25, Z+
    1776:	2f 01       	movw	r4, r30
    1778:	99 23       	and	r25, r25
    177a:	09 f0       	breq	.+2      	; 0x177e <vfprintf+0x120>
    177c:	b8 cf       	rjmp	.-144    	; 0x16ee <vfprintf+0x90>
    177e:	89 2f       	mov	r24, r25
    1780:	85 54       	subi	r24, 0x45	; 69
    1782:	83 30       	cpi	r24, 0x03	; 3
    1784:	18 f0       	brcs	.+6      	; 0x178c <vfprintf+0x12e>
    1786:	80 52       	subi	r24, 0x20	; 32
    1788:	83 30       	cpi	r24, 0x03	; 3
    178a:	38 f4       	brcc	.+14     	; 0x179a <vfprintf+0x13c>
    178c:	44 e0       	ldi	r20, 0x04	; 4
    178e:	50 e0       	ldi	r21, 0x00	; 0
    1790:	a4 0e       	add	r10, r20
    1792:	b5 1e       	adc	r11, r21
    1794:	5f e3       	ldi	r21, 0x3F	; 63
    1796:	59 83       	std	Y+1, r21	; 0x01
    1798:	0f c0       	rjmp	.+30     	; 0x17b8 <vfprintf+0x15a>
    179a:	93 36       	cpi	r25, 0x63	; 99
    179c:	31 f0       	breq	.+12     	; 0x17aa <vfprintf+0x14c>
    179e:	93 37       	cpi	r25, 0x73	; 115
    17a0:	79 f0       	breq	.+30     	; 0x17c0 <vfprintf+0x162>
    17a2:	93 35       	cpi	r25, 0x53	; 83
    17a4:	09 f0       	breq	.+2      	; 0x17a8 <vfprintf+0x14a>
    17a6:	52 c0       	rjmp	.+164    	; 0x184c <vfprintf+0x1ee>
    17a8:	1f c0       	rjmp	.+62     	; 0x17e8 <vfprintf+0x18a>
    17aa:	f5 01       	movw	r30, r10
    17ac:	80 81       	ld	r24, Z
    17ae:	89 83       	std	Y+1, r24	; 0x01
    17b0:	42 e0       	ldi	r20, 0x02	; 2
    17b2:	50 e0       	ldi	r21, 0x00	; 0
    17b4:	a4 0e       	add	r10, r20
    17b6:	b5 1e       	adc	r11, r21
    17b8:	61 01       	movw	r12, r2
    17ba:	01 e0       	ldi	r16, 0x01	; 1
    17bc:	10 e0       	ldi	r17, 0x00	; 0
    17be:	11 c0       	rjmp	.+34     	; 0x17e2 <vfprintf+0x184>
    17c0:	f5 01       	movw	r30, r10
    17c2:	c0 80       	ld	r12, Z
    17c4:	d1 80       	ldd	r13, Z+1	; 0x01
    17c6:	f6 fc       	sbrc	r15, 6
    17c8:	03 c0       	rjmp	.+6      	; 0x17d0 <vfprintf+0x172>
    17ca:	6f ef       	ldi	r22, 0xFF	; 255
    17cc:	7f ef       	ldi	r23, 0xFF	; 255
    17ce:	02 c0       	rjmp	.+4      	; 0x17d4 <vfprintf+0x176>
    17d0:	69 2d       	mov	r22, r9
    17d2:	70 e0       	ldi	r23, 0x00	; 0
    17d4:	42 e0       	ldi	r20, 0x02	; 2
    17d6:	50 e0       	ldi	r21, 0x00	; 0
    17d8:	a4 0e       	add	r10, r20
    17da:	b5 1e       	adc	r11, r21
    17dc:	c6 01       	movw	r24, r12
    17de:	43 d1       	rcall	.+646    	; 0x1a66 <strnlen>
    17e0:	8c 01       	movw	r16, r24
    17e2:	5f e7       	ldi	r21, 0x7F	; 127
    17e4:	f5 22       	and	r15, r21
    17e6:	13 c0       	rjmp	.+38     	; 0x180e <vfprintf+0x1b0>
    17e8:	f5 01       	movw	r30, r10
    17ea:	c0 80       	ld	r12, Z
    17ec:	d1 80       	ldd	r13, Z+1	; 0x01
    17ee:	f6 fc       	sbrc	r15, 6
    17f0:	03 c0       	rjmp	.+6      	; 0x17f8 <vfprintf+0x19a>
    17f2:	6f ef       	ldi	r22, 0xFF	; 255
    17f4:	7f ef       	ldi	r23, 0xFF	; 255
    17f6:	02 c0       	rjmp	.+4      	; 0x17fc <vfprintf+0x19e>
    17f8:	69 2d       	mov	r22, r9
    17fa:	70 e0       	ldi	r23, 0x00	; 0
    17fc:	42 e0       	ldi	r20, 0x02	; 2
    17fe:	50 e0       	ldi	r21, 0x00	; 0
    1800:	a4 0e       	add	r10, r20
    1802:	b5 1e       	adc	r11, r21
    1804:	c6 01       	movw	r24, r12
    1806:	24 d1       	rcall	.+584    	; 0x1a50 <strnlen_P>
    1808:	8c 01       	movw	r16, r24
    180a:	50 e8       	ldi	r21, 0x80	; 128
    180c:	f5 2a       	or	r15, r21
    180e:	f3 fe       	sbrs	r15, 3
    1810:	06 c0       	rjmp	.+12     	; 0x181e <vfprintf+0x1c0>
    1812:	18 c0       	rjmp	.+48     	; 0x1844 <vfprintf+0x1e6>
    1814:	80 e2       	ldi	r24, 0x20	; 32
    1816:	90 e0       	ldi	r25, 0x00	; 0
    1818:	b3 01       	movw	r22, r6
    181a:	30 d1       	rcall	.+608    	; 0x1a7c <fputc>
    181c:	ea 94       	dec	r14
    181e:	8e 2d       	mov	r24, r14
    1820:	90 e0       	ldi	r25, 0x00	; 0
    1822:	08 17       	cp	r16, r24
    1824:	19 07       	cpc	r17, r25
    1826:	b0 f3       	brcs	.-20     	; 0x1814 <vfprintf+0x1b6>
    1828:	0d c0       	rjmp	.+26     	; 0x1844 <vfprintf+0x1e6>
    182a:	f6 01       	movw	r30, r12
    182c:	f7 fc       	sbrc	r15, 7
    182e:	85 91       	lpm	r24, Z+
    1830:	f7 fe       	sbrs	r15, 7
    1832:	81 91       	ld	r24, Z+
    1834:	6f 01       	movw	r12, r30
    1836:	90 e0       	ldi	r25, 0x00	; 0
    1838:	b3 01       	movw	r22, r6
    183a:	20 d1       	rcall	.+576    	; 0x1a7c <fputc>
    183c:	e1 10       	cpse	r14, r1
    183e:	ea 94       	dec	r14
    1840:	01 50       	subi	r16, 0x01	; 1
    1842:	10 40       	sbci	r17, 0x00	; 0
    1844:	01 15       	cp	r16, r1
    1846:	11 05       	cpc	r17, r1
    1848:	81 f7       	brne	.-32     	; 0x182a <vfprintf+0x1cc>
    184a:	e2 c0       	rjmp	.+452    	; 0x1a10 <vfprintf+0x3b2>
    184c:	94 36       	cpi	r25, 0x64	; 100
    184e:	11 f0       	breq	.+4      	; 0x1854 <vfprintf+0x1f6>
    1850:	99 36       	cpi	r25, 0x69	; 105
    1852:	61 f5       	brne	.+88     	; 0x18ac <vfprintf+0x24e>
    1854:	f7 fe       	sbrs	r15, 7
    1856:	08 c0       	rjmp	.+16     	; 0x1868 <vfprintf+0x20a>
    1858:	f5 01       	movw	r30, r10
    185a:	20 81       	ld	r18, Z
    185c:	31 81       	ldd	r19, Z+1	; 0x01
    185e:	42 81       	ldd	r20, Z+2	; 0x02
    1860:	53 81       	ldd	r21, Z+3	; 0x03
    1862:	84 e0       	ldi	r24, 0x04	; 4
    1864:	90 e0       	ldi	r25, 0x00	; 0
    1866:	0a c0       	rjmp	.+20     	; 0x187c <vfprintf+0x21e>
    1868:	f5 01       	movw	r30, r10
    186a:	80 81       	ld	r24, Z
    186c:	91 81       	ldd	r25, Z+1	; 0x01
    186e:	9c 01       	movw	r18, r24
    1870:	44 27       	eor	r20, r20
    1872:	37 fd       	sbrc	r19, 7
    1874:	40 95       	com	r20
    1876:	54 2f       	mov	r21, r20
    1878:	82 e0       	ldi	r24, 0x02	; 2
    187a:	90 e0       	ldi	r25, 0x00	; 0
    187c:	a8 0e       	add	r10, r24
    187e:	b9 1e       	adc	r11, r25
    1880:	9f e6       	ldi	r25, 0x6F	; 111
    1882:	f9 22       	and	r15, r25
    1884:	57 ff       	sbrs	r21, 7
    1886:	09 c0       	rjmp	.+18     	; 0x189a <vfprintf+0x23c>
    1888:	50 95       	com	r21
    188a:	40 95       	com	r20
    188c:	30 95       	com	r19
    188e:	21 95       	neg	r18
    1890:	3f 4f       	sbci	r19, 0xFF	; 255
    1892:	4f 4f       	sbci	r20, 0xFF	; 255
    1894:	5f 4f       	sbci	r21, 0xFF	; 255
    1896:	e0 e8       	ldi	r30, 0x80	; 128
    1898:	fe 2a       	or	r15, r30
    189a:	ca 01       	movw	r24, r20
    189c:	b9 01       	movw	r22, r18
    189e:	a1 01       	movw	r20, r2
    18a0:	2a e0       	ldi	r18, 0x0A	; 10
    18a2:	30 e0       	ldi	r19, 0x00	; 0
    18a4:	17 d1       	rcall	.+558    	; 0x1ad4 <__ultoa_invert>
    18a6:	d8 2e       	mov	r13, r24
    18a8:	d2 18       	sub	r13, r2
    18aa:	3f c0       	rjmp	.+126    	; 0x192a <vfprintf+0x2cc>
    18ac:	95 37       	cpi	r25, 0x75	; 117
    18ae:	29 f4       	brne	.+10     	; 0x18ba <vfprintf+0x25c>
    18b0:	1f 2d       	mov	r17, r15
    18b2:	1f 7e       	andi	r17, 0xEF	; 239
    18b4:	2a e0       	ldi	r18, 0x0A	; 10
    18b6:	30 e0       	ldi	r19, 0x00	; 0
    18b8:	1d c0       	rjmp	.+58     	; 0x18f4 <vfprintf+0x296>
    18ba:	1f 2d       	mov	r17, r15
    18bc:	19 7f       	andi	r17, 0xF9	; 249
    18be:	9f 36       	cpi	r25, 0x6F	; 111
    18c0:	61 f0       	breq	.+24     	; 0x18da <vfprintf+0x27c>
    18c2:	90 37       	cpi	r25, 0x70	; 112
    18c4:	20 f4       	brcc	.+8      	; 0x18ce <vfprintf+0x270>
    18c6:	98 35       	cpi	r25, 0x58	; 88
    18c8:	09 f0       	breq	.+2      	; 0x18cc <vfprintf+0x26e>
    18ca:	a5 c0       	rjmp	.+330    	; 0x1a16 <vfprintf+0x3b8>
    18cc:	0f c0       	rjmp	.+30     	; 0x18ec <vfprintf+0x28e>
    18ce:	90 37       	cpi	r25, 0x70	; 112
    18d0:	39 f0       	breq	.+14     	; 0x18e0 <vfprintf+0x282>
    18d2:	98 37       	cpi	r25, 0x78	; 120
    18d4:	09 f0       	breq	.+2      	; 0x18d8 <vfprintf+0x27a>
    18d6:	9f c0       	rjmp	.+318    	; 0x1a16 <vfprintf+0x3b8>
    18d8:	04 c0       	rjmp	.+8      	; 0x18e2 <vfprintf+0x284>
    18da:	28 e0       	ldi	r18, 0x08	; 8
    18dc:	30 e0       	ldi	r19, 0x00	; 0
    18de:	0a c0       	rjmp	.+20     	; 0x18f4 <vfprintf+0x296>
    18e0:	10 61       	ori	r17, 0x10	; 16
    18e2:	14 fd       	sbrc	r17, 4
    18e4:	14 60       	ori	r17, 0x04	; 4
    18e6:	20 e1       	ldi	r18, 0x10	; 16
    18e8:	30 e0       	ldi	r19, 0x00	; 0
    18ea:	04 c0       	rjmp	.+8      	; 0x18f4 <vfprintf+0x296>
    18ec:	14 fd       	sbrc	r17, 4
    18ee:	16 60       	ori	r17, 0x06	; 6
    18f0:	20 e1       	ldi	r18, 0x10	; 16
    18f2:	32 e0       	ldi	r19, 0x02	; 2
    18f4:	17 ff       	sbrs	r17, 7
    18f6:	08 c0       	rjmp	.+16     	; 0x1908 <vfprintf+0x2aa>
    18f8:	f5 01       	movw	r30, r10
    18fa:	60 81       	ld	r22, Z
    18fc:	71 81       	ldd	r23, Z+1	; 0x01
    18fe:	82 81       	ldd	r24, Z+2	; 0x02
    1900:	93 81       	ldd	r25, Z+3	; 0x03
    1902:	44 e0       	ldi	r20, 0x04	; 4
    1904:	50 e0       	ldi	r21, 0x00	; 0
    1906:	08 c0       	rjmp	.+16     	; 0x1918 <vfprintf+0x2ba>
    1908:	f5 01       	movw	r30, r10
    190a:	80 81       	ld	r24, Z
    190c:	91 81       	ldd	r25, Z+1	; 0x01
    190e:	bc 01       	movw	r22, r24
    1910:	80 e0       	ldi	r24, 0x00	; 0
    1912:	90 e0       	ldi	r25, 0x00	; 0
    1914:	42 e0       	ldi	r20, 0x02	; 2
    1916:	50 e0       	ldi	r21, 0x00	; 0
    1918:	a4 0e       	add	r10, r20
    191a:	b5 1e       	adc	r11, r21
    191c:	a1 01       	movw	r20, r2
    191e:	da d0       	rcall	.+436    	; 0x1ad4 <__ultoa_invert>
    1920:	d8 2e       	mov	r13, r24
    1922:	d2 18       	sub	r13, r2
    1924:	8f e7       	ldi	r24, 0x7F	; 127
    1926:	f8 2e       	mov	r15, r24
    1928:	f1 22       	and	r15, r17
    192a:	f6 fe       	sbrs	r15, 6
    192c:	0b c0       	rjmp	.+22     	; 0x1944 <vfprintf+0x2e6>
    192e:	5e ef       	ldi	r21, 0xFE	; 254
    1930:	f5 22       	and	r15, r21
    1932:	d9 14       	cp	r13, r9
    1934:	38 f4       	brcc	.+14     	; 0x1944 <vfprintf+0x2e6>
    1936:	f4 fe       	sbrs	r15, 4
    1938:	07 c0       	rjmp	.+14     	; 0x1948 <vfprintf+0x2ea>
    193a:	f2 fc       	sbrc	r15, 2
    193c:	05 c0       	rjmp	.+10     	; 0x1948 <vfprintf+0x2ea>
    193e:	8f ee       	ldi	r24, 0xEF	; 239
    1940:	f8 22       	and	r15, r24
    1942:	02 c0       	rjmp	.+4      	; 0x1948 <vfprintf+0x2ea>
    1944:	1d 2d       	mov	r17, r13
    1946:	01 c0       	rjmp	.+2      	; 0x194a <vfprintf+0x2ec>
    1948:	19 2d       	mov	r17, r9
    194a:	f4 fe       	sbrs	r15, 4
    194c:	0d c0       	rjmp	.+26     	; 0x1968 <vfprintf+0x30a>
    194e:	fe 01       	movw	r30, r28
    1950:	ed 0d       	add	r30, r13
    1952:	f1 1d       	adc	r31, r1
    1954:	80 81       	ld	r24, Z
    1956:	80 33       	cpi	r24, 0x30	; 48
    1958:	19 f4       	brne	.+6      	; 0x1960 <vfprintf+0x302>
    195a:	99 ee       	ldi	r25, 0xE9	; 233
    195c:	f9 22       	and	r15, r25
    195e:	08 c0       	rjmp	.+16     	; 0x1970 <vfprintf+0x312>
    1960:	1f 5f       	subi	r17, 0xFF	; 255
    1962:	f2 fe       	sbrs	r15, 2
    1964:	05 c0       	rjmp	.+10     	; 0x1970 <vfprintf+0x312>
    1966:	03 c0       	rjmp	.+6      	; 0x196e <vfprintf+0x310>
    1968:	8f 2d       	mov	r24, r15
    196a:	86 78       	andi	r24, 0x86	; 134
    196c:	09 f0       	breq	.+2      	; 0x1970 <vfprintf+0x312>
    196e:	1f 5f       	subi	r17, 0xFF	; 255
    1970:	0f 2d       	mov	r16, r15
    1972:	f3 fc       	sbrc	r15, 3
    1974:	13 c0       	rjmp	.+38     	; 0x199c <vfprintf+0x33e>
    1976:	f0 fe       	sbrs	r15, 0
    1978:	0e c0       	rjmp	.+28     	; 0x1996 <vfprintf+0x338>
    197a:	1e 15       	cp	r17, r14
    197c:	10 f0       	brcs	.+4      	; 0x1982 <vfprintf+0x324>
    197e:	9d 2c       	mov	r9, r13
    1980:	0a c0       	rjmp	.+20     	; 0x1996 <vfprintf+0x338>
    1982:	9d 2c       	mov	r9, r13
    1984:	9e 0c       	add	r9, r14
    1986:	91 1a       	sub	r9, r17
    1988:	1e 2d       	mov	r17, r14
    198a:	05 c0       	rjmp	.+10     	; 0x1996 <vfprintf+0x338>
    198c:	80 e2       	ldi	r24, 0x20	; 32
    198e:	90 e0       	ldi	r25, 0x00	; 0
    1990:	b3 01       	movw	r22, r6
    1992:	74 d0       	rcall	.+232    	; 0x1a7c <fputc>
    1994:	1f 5f       	subi	r17, 0xFF	; 255
    1996:	1e 15       	cp	r17, r14
    1998:	c8 f3       	brcs	.-14     	; 0x198c <vfprintf+0x32e>
    199a:	04 c0       	rjmp	.+8      	; 0x19a4 <vfprintf+0x346>
    199c:	1e 15       	cp	r17, r14
    199e:	10 f4       	brcc	.+4      	; 0x19a4 <vfprintf+0x346>
    19a0:	e1 1a       	sub	r14, r17
    19a2:	01 c0       	rjmp	.+2      	; 0x19a6 <vfprintf+0x348>
    19a4:	ee 24       	eor	r14, r14
    19a6:	04 ff       	sbrs	r16, 4
    19a8:	0e c0       	rjmp	.+28     	; 0x19c6 <vfprintf+0x368>
    19aa:	80 e3       	ldi	r24, 0x30	; 48
    19ac:	90 e0       	ldi	r25, 0x00	; 0
    19ae:	b3 01       	movw	r22, r6
    19b0:	65 d0       	rcall	.+202    	; 0x1a7c <fputc>
    19b2:	02 ff       	sbrs	r16, 2
    19b4:	1b c0       	rjmp	.+54     	; 0x19ec <vfprintf+0x38e>
    19b6:	01 fd       	sbrc	r16, 1
    19b8:	03 c0       	rjmp	.+6      	; 0x19c0 <vfprintf+0x362>
    19ba:	88 e7       	ldi	r24, 0x78	; 120
    19bc:	90 e0       	ldi	r25, 0x00	; 0
    19be:	0e c0       	rjmp	.+28     	; 0x19dc <vfprintf+0x37e>
    19c0:	88 e5       	ldi	r24, 0x58	; 88
    19c2:	90 e0       	ldi	r25, 0x00	; 0
    19c4:	0b c0       	rjmp	.+22     	; 0x19dc <vfprintf+0x37e>
    19c6:	80 2f       	mov	r24, r16
    19c8:	86 78       	andi	r24, 0x86	; 134
    19ca:	81 f0       	breq	.+32     	; 0x19ec <vfprintf+0x38e>
    19cc:	01 ff       	sbrs	r16, 1
    19ce:	02 c0       	rjmp	.+4      	; 0x19d4 <vfprintf+0x376>
    19d0:	8b e2       	ldi	r24, 0x2B	; 43
    19d2:	01 c0       	rjmp	.+2      	; 0x19d6 <vfprintf+0x378>
    19d4:	80 e2       	ldi	r24, 0x20	; 32
    19d6:	f7 fc       	sbrc	r15, 7
    19d8:	8d e2       	ldi	r24, 0x2D	; 45
    19da:	90 e0       	ldi	r25, 0x00	; 0
    19dc:	b3 01       	movw	r22, r6
    19de:	4e d0       	rcall	.+156    	; 0x1a7c <fputc>
    19e0:	05 c0       	rjmp	.+10     	; 0x19ec <vfprintf+0x38e>
    19e2:	80 e3       	ldi	r24, 0x30	; 48
    19e4:	90 e0       	ldi	r25, 0x00	; 0
    19e6:	b3 01       	movw	r22, r6
    19e8:	49 d0       	rcall	.+146    	; 0x1a7c <fputc>
    19ea:	9a 94       	dec	r9
    19ec:	d9 14       	cp	r13, r9
    19ee:	c8 f3       	brcs	.-14     	; 0x19e2 <vfprintf+0x384>
    19f0:	da 94       	dec	r13
    19f2:	f1 01       	movw	r30, r2
    19f4:	ed 0d       	add	r30, r13
    19f6:	f1 1d       	adc	r31, r1
    19f8:	80 81       	ld	r24, Z
    19fa:	90 e0       	ldi	r25, 0x00	; 0
    19fc:	b3 01       	movw	r22, r6
    19fe:	3e d0       	rcall	.+124    	; 0x1a7c <fputc>
    1a00:	dd 20       	and	r13, r13
    1a02:	b1 f7       	brne	.-20     	; 0x19f0 <vfprintf+0x392>
    1a04:	05 c0       	rjmp	.+10     	; 0x1a10 <vfprintf+0x3b2>
    1a06:	80 e2       	ldi	r24, 0x20	; 32
    1a08:	90 e0       	ldi	r25, 0x00	; 0
    1a0a:	b3 01       	movw	r22, r6
    1a0c:	37 d0       	rcall	.+110    	; 0x1a7c <fputc>
    1a0e:	ea 94       	dec	r14
    1a10:	ee 20       	and	r14, r14
    1a12:	c9 f7       	brne	.-14     	; 0x1a06 <vfprintf+0x3a8>
    1a14:	50 ce       	rjmp	.-864    	; 0x16b6 <vfprintf+0x58>
    1a16:	f3 01       	movw	r30, r6
    1a18:	66 81       	ldd	r22, Z+6	; 0x06
    1a1a:	77 81       	ldd	r23, Z+7	; 0x07
    1a1c:	cb 01       	movw	r24, r22
    1a1e:	2b 96       	adiw	r28, 0x0b	; 11
    1a20:	0f b6       	in	r0, 0x3f	; 63
    1a22:	f8 94       	cli
    1a24:	de bf       	out	0x3e, r29	; 62
    1a26:	0f be       	out	0x3f, r0	; 63
    1a28:	cd bf       	out	0x3d, r28	; 61
    1a2a:	cf 91       	pop	r28
    1a2c:	df 91       	pop	r29
    1a2e:	1f 91       	pop	r17
    1a30:	0f 91       	pop	r16
    1a32:	ff 90       	pop	r15
    1a34:	ef 90       	pop	r14
    1a36:	df 90       	pop	r13
    1a38:	cf 90       	pop	r12
    1a3a:	bf 90       	pop	r11
    1a3c:	af 90       	pop	r10
    1a3e:	9f 90       	pop	r9
    1a40:	8f 90       	pop	r8
    1a42:	7f 90       	pop	r7
    1a44:	6f 90       	pop	r6
    1a46:	5f 90       	pop	r5
    1a48:	4f 90       	pop	r4
    1a4a:	3f 90       	pop	r3
    1a4c:	2f 90       	pop	r2
    1a4e:	08 95       	ret

00001a50 <strnlen_P>:
    1a50:	fc 01       	movw	r30, r24
    1a52:	05 90       	lpm	r0, Z+
    1a54:	61 50       	subi	r22, 0x01	; 1
    1a56:	70 40       	sbci	r23, 0x00	; 0
    1a58:	01 10       	cpse	r0, r1
    1a5a:	d8 f7       	brcc	.-10     	; 0x1a52 <strnlen_P+0x2>
    1a5c:	80 95       	com	r24
    1a5e:	90 95       	com	r25
    1a60:	8e 0f       	add	r24, r30
    1a62:	9f 1f       	adc	r25, r31
    1a64:	08 95       	ret

00001a66 <strnlen>:
    1a66:	fc 01       	movw	r30, r24
    1a68:	61 50       	subi	r22, 0x01	; 1
    1a6a:	70 40       	sbci	r23, 0x00	; 0
    1a6c:	01 90       	ld	r0, Z+
    1a6e:	01 10       	cpse	r0, r1
    1a70:	d8 f7       	brcc	.-10     	; 0x1a68 <strnlen+0x2>
    1a72:	80 95       	com	r24
    1a74:	90 95       	com	r25
    1a76:	8e 0f       	add	r24, r30
    1a78:	9f 1f       	adc	r25, r31
    1a7a:	08 95       	ret

00001a7c <fputc>:
    1a7c:	0f 93       	push	r16
    1a7e:	1f 93       	push	r17
    1a80:	cf 93       	push	r28
    1a82:	df 93       	push	r29
    1a84:	8c 01       	movw	r16, r24
    1a86:	eb 01       	movw	r28, r22
    1a88:	8b 81       	ldd	r24, Y+3	; 0x03
    1a8a:	81 ff       	sbrs	r24, 1
    1a8c:	1b c0       	rjmp	.+54     	; 0x1ac4 <fputc+0x48>
    1a8e:	82 ff       	sbrs	r24, 2
    1a90:	0d c0       	rjmp	.+26     	; 0x1aac <fputc+0x30>
    1a92:	2e 81       	ldd	r18, Y+6	; 0x06
    1a94:	3f 81       	ldd	r19, Y+7	; 0x07
    1a96:	8c 81       	ldd	r24, Y+4	; 0x04
    1a98:	9d 81       	ldd	r25, Y+5	; 0x05
    1a9a:	28 17       	cp	r18, r24
    1a9c:	39 07       	cpc	r19, r25
    1a9e:	64 f4       	brge	.+24     	; 0x1ab8 <fputc+0x3c>
    1aa0:	e8 81       	ld	r30, Y
    1aa2:	f9 81       	ldd	r31, Y+1	; 0x01
    1aa4:	01 93       	st	Z+, r16
    1aa6:	f9 83       	std	Y+1, r31	; 0x01
    1aa8:	e8 83       	st	Y, r30
    1aaa:	06 c0       	rjmp	.+12     	; 0x1ab8 <fputc+0x3c>
    1aac:	e8 85       	ldd	r30, Y+8	; 0x08
    1aae:	f9 85       	ldd	r31, Y+9	; 0x09
    1ab0:	80 2f       	mov	r24, r16
    1ab2:	09 95       	icall
    1ab4:	89 2b       	or	r24, r25
    1ab6:	31 f4       	brne	.+12     	; 0x1ac4 <fputc+0x48>
    1ab8:	8e 81       	ldd	r24, Y+6	; 0x06
    1aba:	9f 81       	ldd	r25, Y+7	; 0x07
    1abc:	01 96       	adiw	r24, 0x01	; 1
    1abe:	9f 83       	std	Y+7, r25	; 0x07
    1ac0:	8e 83       	std	Y+6, r24	; 0x06
    1ac2:	02 c0       	rjmp	.+4      	; 0x1ac8 <fputc+0x4c>
    1ac4:	0f ef       	ldi	r16, 0xFF	; 255
    1ac6:	1f ef       	ldi	r17, 0xFF	; 255
    1ac8:	c8 01       	movw	r24, r16
    1aca:	df 91       	pop	r29
    1acc:	cf 91       	pop	r28
    1ace:	1f 91       	pop	r17
    1ad0:	0f 91       	pop	r16
    1ad2:	08 95       	ret

00001ad4 <__ultoa_invert>:
    1ad4:	fa 01       	movw	r30, r20
    1ad6:	aa 27       	eor	r26, r26
    1ad8:	28 30       	cpi	r18, 0x08	; 8
    1ada:	51 f1       	breq	.+84     	; 0x1b30 <__ultoa_invert+0x5c>
    1adc:	20 31       	cpi	r18, 0x10	; 16
    1ade:	81 f1       	breq	.+96     	; 0x1b40 <__ultoa_invert+0x6c>
    1ae0:	e8 94       	clt
    1ae2:	6f 93       	push	r22
    1ae4:	6e 7f       	andi	r22, 0xFE	; 254
    1ae6:	6e 5f       	subi	r22, 0xFE	; 254
    1ae8:	7f 4f       	sbci	r23, 0xFF	; 255
    1aea:	8f 4f       	sbci	r24, 0xFF	; 255
    1aec:	9f 4f       	sbci	r25, 0xFF	; 255
    1aee:	af 4f       	sbci	r26, 0xFF	; 255
    1af0:	b1 e0       	ldi	r27, 0x01	; 1
    1af2:	3e d0       	rcall	.+124    	; 0x1b70 <__ultoa_invert+0x9c>
    1af4:	b4 e0       	ldi	r27, 0x04	; 4
    1af6:	3c d0       	rcall	.+120    	; 0x1b70 <__ultoa_invert+0x9c>
    1af8:	67 0f       	add	r22, r23
    1afa:	78 1f       	adc	r23, r24
    1afc:	89 1f       	adc	r24, r25
    1afe:	9a 1f       	adc	r25, r26
    1b00:	a1 1d       	adc	r26, r1
    1b02:	68 0f       	add	r22, r24
    1b04:	79 1f       	adc	r23, r25
    1b06:	8a 1f       	adc	r24, r26
    1b08:	91 1d       	adc	r25, r1
    1b0a:	a1 1d       	adc	r26, r1
    1b0c:	6a 0f       	add	r22, r26
    1b0e:	71 1d       	adc	r23, r1
    1b10:	81 1d       	adc	r24, r1
    1b12:	91 1d       	adc	r25, r1
    1b14:	a1 1d       	adc	r26, r1
    1b16:	20 d0       	rcall	.+64     	; 0x1b58 <__ultoa_invert+0x84>
    1b18:	09 f4       	brne	.+2      	; 0x1b1c <__ultoa_invert+0x48>
    1b1a:	68 94       	set
    1b1c:	3f 91       	pop	r19
    1b1e:	2a e0       	ldi	r18, 0x0A	; 10
    1b20:	26 9f       	mul	r18, r22
    1b22:	11 24       	eor	r1, r1
    1b24:	30 19       	sub	r19, r0
    1b26:	30 5d       	subi	r19, 0xD0	; 208
    1b28:	31 93       	st	Z+, r19
    1b2a:	de f6       	brtc	.-74     	; 0x1ae2 <__ultoa_invert+0xe>
    1b2c:	cf 01       	movw	r24, r30
    1b2e:	08 95       	ret
    1b30:	46 2f       	mov	r20, r22
    1b32:	47 70       	andi	r20, 0x07	; 7
    1b34:	40 5d       	subi	r20, 0xD0	; 208
    1b36:	41 93       	st	Z+, r20
    1b38:	b3 e0       	ldi	r27, 0x03	; 3
    1b3a:	0f d0       	rcall	.+30     	; 0x1b5a <__ultoa_invert+0x86>
    1b3c:	c9 f7       	brne	.-14     	; 0x1b30 <__ultoa_invert+0x5c>
    1b3e:	f6 cf       	rjmp	.-20     	; 0x1b2c <__ultoa_invert+0x58>
    1b40:	46 2f       	mov	r20, r22
    1b42:	4f 70       	andi	r20, 0x0F	; 15
    1b44:	40 5d       	subi	r20, 0xD0	; 208
    1b46:	4a 33       	cpi	r20, 0x3A	; 58
    1b48:	18 f0       	brcs	.+6      	; 0x1b50 <__ultoa_invert+0x7c>
    1b4a:	49 5d       	subi	r20, 0xD9	; 217
    1b4c:	31 fd       	sbrc	r19, 1
    1b4e:	40 52       	subi	r20, 0x20	; 32
    1b50:	41 93       	st	Z+, r20
    1b52:	02 d0       	rcall	.+4      	; 0x1b58 <__ultoa_invert+0x84>
    1b54:	a9 f7       	brne	.-22     	; 0x1b40 <__ultoa_invert+0x6c>
    1b56:	ea cf       	rjmp	.-44     	; 0x1b2c <__ultoa_invert+0x58>
    1b58:	b4 e0       	ldi	r27, 0x04	; 4
    1b5a:	a6 95       	lsr	r26
    1b5c:	97 95       	ror	r25
    1b5e:	87 95       	ror	r24
    1b60:	77 95       	ror	r23
    1b62:	67 95       	ror	r22
    1b64:	ba 95       	dec	r27
    1b66:	c9 f7       	brne	.-14     	; 0x1b5a <__ultoa_invert+0x86>
    1b68:	00 97       	sbiw	r24, 0x00	; 0
    1b6a:	61 05       	cpc	r22, r1
    1b6c:	71 05       	cpc	r23, r1
    1b6e:	08 95       	ret
    1b70:	9b 01       	movw	r18, r22
    1b72:	ac 01       	movw	r20, r24
    1b74:	0a 2e       	mov	r0, r26
    1b76:	06 94       	lsr	r0
    1b78:	57 95       	ror	r21
    1b7a:	47 95       	ror	r20
    1b7c:	37 95       	ror	r19
    1b7e:	27 95       	ror	r18
    1b80:	ba 95       	dec	r27
    1b82:	c9 f7       	brne	.-14     	; 0x1b76 <__ultoa_invert+0xa2>
    1b84:	62 0f       	add	r22, r18
    1b86:	73 1f       	adc	r23, r19
    1b88:	84 1f       	adc	r24, r20
    1b8a:	95 1f       	adc	r25, r21
    1b8c:	a0 1d       	adc	r26, r0
    1b8e:	08 95       	ret

00001b90 <_exit>:
    1b90:	f8 94       	cli

00001b92 <__stop_program>:
    1b92:	ff cf       	rjmp	.-2      	; 0x1b92 <__stop_program>
