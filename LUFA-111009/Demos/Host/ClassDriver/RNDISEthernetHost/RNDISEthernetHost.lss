
RNDISEthernetHost.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000034  00800100  000020da  0000216e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000020da  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000422  00800134  00800134  000021a2  2**0
                  ALLOC
  3 .debug_aranges 000006c8  00000000  00000000  000021a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000f91  00000000  00000000  0000286a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000b79b  00000000  00000000  000037fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000027f8  00000000  00000000  0000ef96  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00007d46  00000000  00000000  0001178e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000b10  00000000  00000000  000194d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00004587  00000000  00000000  00019fe4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000057b7  00000000  00000000  0001e56b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000798  00000000  00000000  00023d22  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
       0:	65 c1       	rjmp	.+714    	; 0x2cc <__ctors_end>
{
	USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, AfterType);

	if (*BytesRem)
	  USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, Type);
}
       2:	00 00       	nop
	return USB_Host_SendControlRequest(NULL);
}

uint8_t USB_Host_SetInterfaceAltSetting(const uint8_t InterfaceIndex,
                                        const uint8_t AltSetting)
{
       4:	81 c1       	rjmp	.+770    	; 0x308 <__bad_interrupt>
}

uint8_t RNDIS_Host_SendPacket(USB_ClassInfo_RNDIS_Host_t* const RNDISInterfaceInfo,
                              void* Buffer,
                              const uint16_t PacketLength)
{
       6:	00 00       	nop

	return Serial_ReceiveByte();
}

int Serial_getchar_Blocking(FILE *Stream)
{
       8:	7f c1       	rjmp	.+766    	; 0x308 <__bad_interrupt>
       a:	00 00       	nop
       c:	7d c1       	rjmp	.+762    	; 0x308 <__bad_interrupt>
       e:	00 00       	nop
      10:	7b c1       	rjmp	.+758    	; 0x308 <__bad_interrupt>
      12:	00 00       	nop
      14:	79 c1       	rjmp	.+754    	; 0x308 <__bad_interrupt>
      16:	00 00       	nop
      18:	77 c1       	rjmp	.+750    	; 0x308 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	75 c1       	rjmp	.+746    	; 0x308 <__bad_interrupt>
      1e:	00 00       	nop
      20:	73 c1       	rjmp	.+742    	; 0x308 <__bad_interrupt>
      22:	00 00       	nop
      24:	71 c1       	rjmp	.+738    	; 0x308 <__bad_interrupt>
      26:	00 00       	nop
      28:	5e c6       	rjmp	.+3260   	; 0xce6 <__vector_10>
      2a:	00 00       	nop
      2c:	6d c1       	rjmp	.+730    	; 0x308 <__bad_interrupt>
      2e:	00 00       	nop
      30:	6b c1       	rjmp	.+726    	; 0x308 <__bad_interrupt>
      32:	00 00       	nop
      34:	69 c1       	rjmp	.+722    	; 0x308 <__bad_interrupt>
      36:	00 00       	nop
      38:	67 c1       	rjmp	.+718    	; 0x308 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	65 c1       	rjmp	.+714    	; 0x308 <__bad_interrupt>
      3e:	00 00       	nop
      40:	63 c1       	rjmp	.+710    	; 0x308 <__bad_interrupt>
      42:	00 00       	nop
      44:	61 c1       	rjmp	.+706    	; 0x308 <__bad_interrupt>
      46:	00 00       	nop
      48:	5f c1       	rjmp	.+702    	; 0x308 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	5d c1       	rjmp	.+698    	; 0x308 <__bad_interrupt>
      4e:	00 00       	nop
      50:	5b c1       	rjmp	.+694    	; 0x308 <__bad_interrupt>
      52:	00 00       	nop
      54:	59 c1       	rjmp	.+690    	; 0x308 <__bad_interrupt>
      56:	00 00       	nop
      58:	57 c1       	rjmp	.+686    	; 0x308 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	55 c1       	rjmp	.+682    	; 0x308 <__bad_interrupt>
      5e:	00 00       	nop
      60:	53 c1       	rjmp	.+678    	; 0x308 <__bad_interrupt>
      62:	00 00       	nop
      64:	51 c1       	rjmp	.+674    	; 0x308 <__bad_interrupt>
      66:	00 00       	nop
      68:	4f c1       	rjmp	.+670    	; 0x308 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	4d c1       	rjmp	.+666    	; 0x308 <__bad_interrupt>
      6e:	00 00       	nop
      70:	4b c1       	rjmp	.+662    	; 0x308 <__bad_interrupt>
      72:	00 00       	nop
      74:	49 c1       	rjmp	.+658    	; 0x308 <__bad_interrupt>
      76:	00 00       	nop
      78:	47 c1       	rjmp	.+654    	; 0x308 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	45 c1       	rjmp	.+650    	; 0x308 <__bad_interrupt>
      7e:	00 00       	nop
      80:	43 c1       	rjmp	.+646    	; 0x308 <__bad_interrupt>
      82:	00 00       	nop
      84:	41 c1       	rjmp	.+642    	; 0x308 <__bad_interrupt>
      86:	00 00       	nop
      88:	3f c1       	rjmp	.+638    	; 0x308 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	3d c1       	rjmp	.+634    	; 0x308 <__bad_interrupt>
      8e:	00 00       	nop
      90:	3b c1       	rjmp	.+630    	; 0x308 <__bad_interrupt>
      92:	00 00       	nop
      94:	39 c1       	rjmp	.+626    	; 0x308 <__bad_interrupt>
      96:	00 00       	nop

00000098 <__c.4588>:
      98:	1b 5b 33 31 6d 44 65 76 20 45 6e 75 6d 20 45 72     .[31mDev Enum Er
      a8:	72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     ror.. -- Error C
      b8:	6f 64 65 20 25 64 0d 0a 20 2d 2d 20 53 75 62 20     ode %d.. -- Sub 
      c8:	45 72 72 6f 72 20 43 6f 64 65 20 25 64 0d 0a 20     Error Code %d.. 
      d8:	2d 2d 20 49 6e 20 53 74 61 74 65 20 25 64 0d 0a     -- In State %d..
      e8:	1b 5b 33 37 6d 00                                   .[37m.

000000ee <__c.4580>:
      ee:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
      fe:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 
     10e:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

0000011d <__c.4566>:
     11d:	52 4e 44 49 53 20 44 65 76 69 63 65 20 45 6e 75     RNDIS Device Enu
     12d:	6d 65 72 61 74 65 64 2e 0d 0a 00                    merated....

00000138 <__c.4564>:
     138:	44 65 76 69 63 65 20 56 65 6e 64 6f 72 20 49 44     Device Vendor ID
     148:	3a 20 30 78 25 30 38 6c 58 0d 0a 00                 : 0x%08lX...

00000154 <__c.4562>:
     154:	45 72 72 6f 72 20 47 65 74 74 69 6e 67 20 56 65     Error Getting Ve
     164:	6e 64 6f 72 20 49 44 2e 0d 0a 00                    ndor ID....

0000016f <__c.4559>:
     16f:	45 72 72 6f 72 20 53 65 74 74 69 6e 67 20 44 65     Error Setting De
     17f:	76 69 63 65 20 50 61 63 6b 65 74 20 46 69 6c 74     vice Packet Filt
     18f:	65 72 2e 0d 0a 00                                   er....

00000195 <__c.4556>:
     195:	44 65 76 69 63 65 20 4d 61 78 20 54 72 61 6e 73     Device Max Trans
     1a5:	66 65 72 20 53 69 7a 65 3a 20 25 6c 75 20 62 79     fer Size: %lu by
     1b5:	74 65 73 2e 0d 0a 00                                tes....

000001bc <__c.4554>:
     1bc:	45 72 72 6f 72 20 49 6e 69 74 69 61 6c 69 7a 69     Error Initializi
     1cc:	6e 67 20 44 65 76 69 63 65 2e 0d 0a 00              ng Device....

000001d9 <__c.4552>:
     1d9:	45 72 72 6f 72 20 53 65 74 74 69 6e 67 20 44 65     Error Setting De
     1e9:	76 69 63 65 20 43 6f 6e 66 69 67 75 72 61 74 69     vice Configurati
     1f9:	6f 6e 2e 0d 0a 00                                   on....

000001ff <__c.4550>:
     1ff:	41 74 74 61 63 68 65 64 20 44 65 76 69 63 65 20     Attached Device 
     20f:	4e 6f 74 20 61 20 56 61 6c 69 64 20 52 4e 44 49     Not a Valid RNDI
     21f:	53 20 43 6c 61 73 73 20 44 65 76 69 63 65 2e 0d     S Class Device..
     22f:	0a 00                                               ..

00000231 <__c.4548>:
     231:	45 72 72 6f 72 20 52 65 74 72 69 65 76 69 6e 67     Error Retrieving
     241:	20 43 6f 6e 66 69 67 75 72 61 74 69 6f 6e 20 44      Configuration D
     251:	65 73 63 72 69 70 74 6f 72 2e 0d 0a 00              escriptor....

0000025e <__c.4541>:
     25e:	0d 0a 44 65 76 69 63 65 20 55 6e 61 74 74 61 63     ..Device Unattac
     26e:	68 65 64 2e 0d 0a 00                                hed....

00000275 <__c.4536>:
     275:	44 65 76 69 63 65 20 41 74 74 61 63 68 65 64 2e     Device Attached.
     285:	0d 0a 00                                            ...

00000288 <__c.4518>:
     288:	0d 0a 0d 0a 00                                      .....

0000028d <__c.4512>:
     28d:	2a 2a 2a 50 41 43 4b 45 54 20 28 53 69 7a 65 20     ***PACKET (Size 
     29d:	25 64 29 2a 2a 2a 0d 0a 00                          %d)***...

000002a6 <__c.4504>:
     2a6:	1b 5b 33 36 6d 52 4e 44 49 53 20 48 6f 73 74 20     .[36mRNDIS Host 
     2b6:	44 65 6d 6f 20 72 75 6e 6e 69 6e 67 2e 0d 0a 1b     Demo running....
     2c6:	5b 33 37 6d 00 00                                   [37m..

000002cc <__ctors_end>:
     2cc:	11 24       	eor	r1, r1
     2ce:	1f be       	out	0x3f, r1	; 63
     2d0:	cf ef       	ldi	r28, 0xFF	; 255
     2d2:	d0 e2       	ldi	r29, 0x20	; 32
     2d4:	de bf       	out	0x3e, r29	; 62
     2d6:	cd bf       	out	0x3d, r28	; 61

000002d8 <__do_copy_data>:
     2d8:	11 e0       	ldi	r17, 0x01	; 1
     2da:	a0 e0       	ldi	r26, 0x00	; 0
     2dc:	b1 e0       	ldi	r27, 0x01	; 1
     2de:	ea ed       	ldi	r30, 0xDA	; 218
     2e0:	f0 e2       	ldi	r31, 0x20	; 32
     2e2:	00 e0       	ldi	r16, 0x00	; 0
     2e4:	0b bf       	out	0x3b, r16	; 59
     2e6:	02 c0       	rjmp	.+4      	; 0x2ec <__do_copy_data+0x14>
     2e8:	07 90       	elpm	r0, Z+
     2ea:	0d 92       	st	X+, r0
     2ec:	a4 33       	cpi	r26, 0x34	; 52
     2ee:	b1 07       	cpc	r27, r17
     2f0:	d9 f7       	brne	.-10     	; 0x2e8 <__do_copy_data+0x10>

000002f2 <__do_clear_bss>:
     2f2:	15 e0       	ldi	r17, 0x05	; 5
     2f4:	a4 e3       	ldi	r26, 0x34	; 52
     2f6:	b1 e0       	ldi	r27, 0x01	; 1
     2f8:	01 c0       	rjmp	.+2      	; 0x2fc <.do_clear_bss_start>

000002fa <.do_clear_bss_loop>:
     2fa:	1d 92       	st	X+, r1

000002fc <.do_clear_bss_start>:
     2fc:	a6 35       	cpi	r26, 0x56	; 86
     2fe:	b1 07       	cpc	r27, r17
     300:	e1 f7       	brne	.-8      	; 0x2fa <.do_clear_bss_loop>
     302:	db d1       	rcall	.+950    	; 0x6ba <main>
     304:	0c 94 6b 10 	jmp	0x20d6	; 0x20d6 <_exit>

00000308 <__bad_interrupt>:
     308:	7b ce       	rjmp	.-778    	; 0x0 <__vectors>

0000030a <EVENT_USB_Host_DeviceEnumerationFailed>:
 *  enumerating an attached USB device.
 */
void EVENT_USB_Host_DeviceEnumerationFailed(const uint8_t ErrorCode,
                                            const uint8_t SubErrorCode)
{
	printf_P(PSTR(ESC_FG_RED "Dev Enum Error\r\n"
     30a:	90 91 41 05 	lds	r25, 0x0541
     30e:	2d b7       	in	r18, 0x3d	; 61
     310:	3e b7       	in	r19, 0x3e	; 62
     312:	28 50       	subi	r18, 0x08	; 8
     314:	30 40       	sbci	r19, 0x00	; 0
     316:	0f b6       	in	r0, 0x3f	; 63
     318:	f8 94       	cli
     31a:	3e bf       	out	0x3e, r19	; 62
     31c:	0f be       	out	0x3f, r0	; 63
     31e:	2d bf       	out	0x3d, r18	; 61
     320:	ed b7       	in	r30, 0x3d	; 61
     322:	fe b7       	in	r31, 0x3e	; 62
     324:	31 96       	adiw	r30, 0x01	; 1
     326:	28 e9       	ldi	r18, 0x98	; 152
     328:	30 e0       	ldi	r19, 0x00	; 0
     32a:	ad b7       	in	r26, 0x3d	; 61
     32c:	be b7       	in	r27, 0x3e	; 62
     32e:	12 96       	adiw	r26, 0x02	; 2
     330:	3c 93       	st	X, r19
     332:	2e 93       	st	-X, r18
     334:	11 97       	sbiw	r26, 0x01	; 1
     336:	82 83       	std	Z+2, r24	; 0x02
     338:	13 82       	std	Z+3, r1	; 0x03
     33a:	64 83       	std	Z+4, r22	; 0x04
     33c:	15 82       	std	Z+5, r1	; 0x05
     33e:	96 83       	std	Z+6, r25	; 0x06
     340:	17 82       	std	Z+7, r1	; 0x07
     342:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <printf_P>
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     346:	8b b1       	in	r24, 0x0b	; 11
     348:	8f 70       	andi	r24, 0x0F	; 15
     34a:	80 69       	ori	r24, 0x90	; 144
     34c:	8b b9       	out	0x0b, r24	; 11
     34e:	2d b7       	in	r18, 0x3d	; 61
     350:	3e b7       	in	r19, 0x3e	; 62
     352:	28 5f       	subi	r18, 0xF8	; 248
     354:	3f 4f       	sbci	r19, 0xFF	; 255
     356:	0f b6       	in	r0, 0x3f	; 63
     358:	f8 94       	cli
     35a:	3e bf       	out	0x3e, r19	; 62
     35c:	0f be       	out	0x3f, r0	; 63
     35e:	2d bf       	out	0x3d, r18	; 61
	                         " -- Error Code %d\r\n"
	                         " -- Sub Error Code %d\r\n"
	                         " -- In State %d\r\n" ESC_FG_WHITE), ErrorCode, SubErrorCode, USB_HostState);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
}
     360:	08 95       	ret

00000362 <EVENT_USB_Host_HostError>:
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
}

/** Event handler for the USB_HostError event. This indicates that a hardware error occurred while in host mode. */
void EVENT_USB_Host_HostError(const uint8_t ErrorCode)
{
     362:	1f 93       	push	r17
     364:	18 2f       	mov	r17, r24
	USB_Disable();
     366:	9a d4       	rcall	.+2356   	; 0xc9c <USB_Disable>

	printf_P(PSTR(ESC_FG_RED "Host Mode Error\r\n"
     368:	00 d0       	rcall	.+0      	; 0x36a <EVENT_USB_Host_HostError+0x8>
     36a:	00 d0       	rcall	.+0      	; 0x36c <EVENT_USB_Host_HostError+0xa>
     36c:	ed b7       	in	r30, 0x3d	; 61
     36e:	fe b7       	in	r31, 0x3e	; 62
     370:	31 96       	adiw	r30, 0x01	; 1
     372:	8e ee       	ldi	r24, 0xEE	; 238
     374:	90 e0       	ldi	r25, 0x00	; 0
     376:	ad b7       	in	r26, 0x3d	; 61
     378:	be b7       	in	r27, 0x3e	; 62
     37a:	12 96       	adiw	r26, 0x02	; 2
     37c:	9c 93       	st	X, r25
     37e:	8e 93       	st	-X, r24
     380:	11 97       	sbiw	r26, 0x01	; 1
     382:	12 83       	std	Z+2, r17	; 0x02
     384:	13 82       	std	Z+3, r1	; 0x03
     386:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <printf_P>
     38a:	8b b1       	in	r24, 0x0b	; 11
     38c:	8f 70       	andi	r24, 0x0F	; 15
     38e:	80 69       	ori	r24, 0x90	; 144
     390:	8b b9       	out	0x0b, r24	; 11
     392:	0f 90       	pop	r0
     394:	0f 90       	pop	r0
     396:	0f 90       	pop	r0
     398:	0f 90       	pop	r0
     39a:	ff cf       	rjmp	.-2      	; 0x39a <EVENT_USB_Host_HostError+0x38>

0000039c <EVENT_USB_Host_DeviceUnattached>:
/** Event handler for the USB_DeviceUnattached event. This indicates that a device has been removed from the host, and
 *  stops the library USB task management process.
 */
void EVENT_USB_Host_DeviceUnattached(void)
{
	puts_P(PSTR("\r\nDevice Unattached.\r\n"));
     39c:	8e e5       	ldi	r24, 0x5E	; 94
     39e:	92 e0       	ldi	r25, 0x02	; 2
     3a0:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <puts_P>
     3a4:	8b b1       	in	r24, 0x0b	; 11
     3a6:	8f 70       	andi	r24, 0x0F	; 15
     3a8:	80 61       	ori	r24, 0x10	; 16
     3aa:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
}
     3ac:	08 95       	ret

000003ae <EVENT_USB_Host_DeviceAttached>:
/** Event handler for the USB_DeviceAttached event. This indicates that a device has been attached to the host, and
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Host_DeviceAttached(void)
{
	puts_P(PSTR("Device Attached.\r\n"));
     3ae:	85 e7       	ldi	r24, 0x75	; 117
     3b0:	92 e0       	ldi	r25, 0x02	; 2
     3b2:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <puts_P>
     3b6:	8b b1       	in	r24, 0x0b	; 11
     3b8:	8f 70       	andi	r24, 0x0F	; 15
     3ba:	80 6a       	ori	r24, 0xA0	; 160
     3bc:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
}
     3be:	08 95       	ret

000003c0 <EVENT_USB_Host_DeviceEnumerationComplete>:

/** Event handler for the USB_DeviceEnumerationComplete event. This indicates that a device has been successfully
 *  enumerated by the host and is now ready to be used by the application.
 */
void EVENT_USB_Host_DeviceEnumerationComplete(void)
{
     3c0:	0f 93       	push	r16
     3c2:	1f 93       	push	r17
     3c4:	df 93       	push	r29
     3c6:	cf 93       	push	r28
     3c8:	cd b7       	in	r28, 0x3d	; 61
     3ca:	de b7       	in	r29, 0x3e	; 62
     3cc:	ca 50       	subi	r28, 0x0A	; 10
     3ce:	d2 40       	sbci	r29, 0x02	; 2
     3d0:	0f b6       	in	r0, 0x3f	; 63
     3d2:	f8 94       	cli
     3d4:	de bf       	out	0x3e, r29	; 62
     3d6:	0f be       	out	0x3f, r0	; 63
     3d8:	cd bf       	out	0x3d, r28	; 61
     3da:	8b b1       	in	r24, 0x0b	; 11
     3dc:	8f 70       	andi	r24, 0x0F	; 15
     3de:	80 6a       	ori	r24, 0xA0	; 160
     3e0:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);

	uint16_t ConfigDescriptorSize;
	uint8_t  ConfigDescriptorData[512];

	if (USB_Host_GetDeviceConfigDescriptor(1, &ConfigDescriptorSize, ConfigDescriptorData,
     3e2:	8e 01       	movw	r16, r28
     3e4:	05 5f       	subi	r16, 0xF5	; 245
     3e6:	1f 4f       	sbci	r17, 0xFF	; 255
     3e8:	81 e0       	ldi	r24, 0x01	; 1
     3ea:	be 01       	movw	r22, r28
     3ec:	6f 5f       	subi	r22, 0xFF	; 255
     3ee:	7f 4f       	sbci	r23, 0xFF	; 255
     3f0:	a8 01       	movw	r20, r16
     3f2:	20 e0       	ldi	r18, 0x00	; 0
     3f4:	32 e0       	ldi	r19, 0x02	; 2
     3f6:	ed d5       	rcall	.+3034   	; 0xfd2 <USB_Host_GetDeviceConfigDescriptor>
     3f8:	88 23       	and	r24, r24
     3fa:	19 f0       	breq	.+6      	; 0x402 <EVENT_USB_Host_DeviceEnumerationComplete+0x42>
	                                       sizeof(ConfigDescriptorData)) != HOST_GETCONFIG_Successful)
	{
		puts_P(PSTR("Error Retrieving Configuration Descriptor.\r\n"));
     3fc:	81 e3       	ldi	r24, 0x31	; 49
     3fe:	92 e0       	ldi	r25, 0x02	; 2
     400:	12 c0       	rjmp	.+36     	; 0x426 <EVENT_USB_Host_DeviceEnumerationComplete+0x66>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (RNDIS_Host_ConfigurePipes(&Ethernet_RNDIS_Interface,
     402:	69 81       	ldd	r22, Y+1	; 0x01
     404:	7a 81       	ldd	r23, Y+2	; 0x02
     406:	88 e0       	ldi	r24, 0x08	; 8
     408:	91 e0       	ldi	r25, 0x01	; 1
     40a:	a8 01       	movw	r20, r16
     40c:	0e 94 4d 0c 	call	0x189a	; 0x189a <RNDIS_Host_ConfigurePipes>
     410:	88 23       	and	r24, r24
     412:	19 f0       	breq	.+6      	; 0x41a <EVENT_USB_Host_DeviceEnumerationComplete+0x5a>
	                              ConfigDescriptorSize, ConfigDescriptorData) != RNDIS_ENUMERROR_NoError)
	{
		puts_P(PSTR("Attached Device Not a Valid RNDIS Class Device.\r\n"));
     414:	8f ef       	ldi	r24, 0xFF	; 255
     416:	91 e0       	ldi	r25, 0x01	; 1
     418:	06 c0       	rjmp	.+12     	; 0x426 <EVENT_USB_Host_DeviceEnumerationComplete+0x66>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (USB_Host_SetDeviceConfiguration(1) != HOST_SENDCONTROL_Successful)
     41a:	81 e0       	ldi	r24, 0x01	; 1
     41c:	65 d7       	rcall	.+3786   	; 0x12e8 <USB_Host_SetDeviceConfiguration>
     41e:	88 23       	and	r24, r24
     420:	41 f0       	breq	.+16     	; 0x432 <EVENT_USB_Host_DeviceEnumerationComplete+0x72>
	{
		puts_P(PSTR("Error Setting Device Configuration.\r\n"));
     422:	89 ed       	ldi	r24, 0xD9	; 217
     424:	91 e0       	ldi	r25, 0x01	; 1
     426:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <puts_P>
     42a:	8b b1       	in	r24, 0x0b	; 11
     42c:	8f 70       	andi	r24, 0x0F	; 15
     42e:	80 69       	ori	r24, 0x90	; 144
     430:	7e c0       	rjmp	.+252    	; 0x52e <EVENT_USB_Host_DeviceEnumerationComplete+0x16e>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (RNDIS_Host_InitializeDevice(&Ethernet_RNDIS_Interface) != HOST_SENDCONTROL_Successful)
     432:	88 e0       	ldi	r24, 0x08	; 8
     434:	91 e0       	ldi	r25, 0x01	; 1
     436:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <RNDIS_Host_InitializeDevice>
     43a:	88 23       	and	r24, r24
     43c:	19 f0       	breq	.+6      	; 0x444 <EVENT_USB_Host_DeviceEnumerationComplete+0x84>
	{
		puts_P(PSTR("Error Initializing Device.\r\n"));
     43e:	8c eb       	ldi	r24, 0xBC	; 188
     440:	91 e0       	ldi	r25, 0x01	; 1
     442:	4a c0       	rjmp	.+148    	; 0x4d8 <EVENT_USB_Host_DeviceEnumerationComplete+0x118>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		USB_Host_SetDeviceConfiguration(0);
		return;
	}

	printf_P(PSTR("Device Max Transfer Size: %lu bytes.\r\n"), Ethernet_RNDIS_Interface.State.DeviceMaxPacketSize);
     444:	00 d0       	rcall	.+0      	; 0x446 <EVENT_USB_Host_DeviceEnumerationComplete+0x86>
     446:	00 d0       	rcall	.+0      	; 0x448 <EVENT_USB_Host_DeviceEnumerationComplete+0x88>
     448:	00 d0       	rcall	.+0      	; 0x44a <EVENT_USB_Host_DeviceEnumerationComplete+0x8a>
     44a:	85 e9       	ldi	r24, 0x95	; 149
     44c:	91 e0       	ldi	r25, 0x01	; 1
     44e:	ed b7       	in	r30, 0x3d	; 61
     450:	fe b7       	in	r31, 0x3e	; 62
     452:	92 83       	std	Z+2, r25	; 0x02
     454:	81 83       	std	Z+1, r24	; 0x01
     456:	80 91 1a 01 	lds	r24, 0x011A
     45a:	90 91 1b 01 	lds	r25, 0x011B
     45e:	a0 91 1c 01 	lds	r26, 0x011C
     462:	b0 91 1d 01 	lds	r27, 0x011D
     466:	83 83       	std	Z+3, r24	; 0x03
     468:	94 83       	std	Z+4, r25	; 0x04
     46a:	a5 83       	std	Z+5, r26	; 0x05
     46c:	b6 83       	std	Z+6, r27	; 0x06
     46e:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <printf_P>

	uint32_t PacketFilter = (REMOTE_NDIS_PACKET_DIRECTED | REMOTE_NDIS_PACKET_BROADCAST | REMOTE_NDIS_PACKET_ALL_MULTICAST);
     472:	8d e0       	ldi	r24, 0x0D	; 13
     474:	90 e0       	ldi	r25, 0x00	; 0
     476:	a0 e0       	ldi	r26, 0x00	; 0
     478:	b0 e0       	ldi	r27, 0x00	; 0
     47a:	8b 83       	std	Y+3, r24	; 0x03
     47c:	9c 83       	std	Y+4, r25	; 0x04
     47e:	ad 83       	std	Y+5, r26	; 0x05
     480:	be 83       	std	Y+6, r27	; 0x06
	if (RNDIS_Host_SetRNDISProperty(&Ethernet_RNDIS_Interface, OID_GEN_CURRENT_PACKET_FILTER,
     482:	8d b7       	in	r24, 0x3d	; 61
     484:	9e b7       	in	r25, 0x3e	; 62
     486:	06 96       	adiw	r24, 0x06	; 6
     488:	0f b6       	in	r0, 0x3f	; 63
     48a:	f8 94       	cli
     48c:	9e bf       	out	0x3e, r25	; 62
     48e:	0f be       	out	0x3f, r0	; 63
     490:	8d bf       	out	0x3d, r24	; 61
     492:	88 e0       	ldi	r24, 0x08	; 8
     494:	91 e0       	ldi	r25, 0x01	; 1
     496:	4e e0       	ldi	r20, 0x0E	; 14
     498:	51 e0       	ldi	r21, 0x01	; 1
     49a:	61 e0       	ldi	r22, 0x01	; 1
     49c:	70 e0       	ldi	r23, 0x00	; 0
     49e:	9e 01       	movw	r18, r28
     4a0:	2d 5f       	subi	r18, 0xFD	; 253
     4a2:	3f 4f       	sbci	r19, 0xFF	; 255
     4a4:	04 e0       	ldi	r16, 0x04	; 4
     4a6:	10 e0       	ldi	r17, 0x00	; 0
     4a8:	0e 94 2f 0b 	call	0x165e	; 0x165e <RNDIS_Host_SetRNDISProperty>
     4ac:	88 23       	and	r24, r24
     4ae:	19 f0       	breq	.+6      	; 0x4b6 <EVENT_USB_Host_DeviceEnumerationComplete+0xf6>
	                                &PacketFilter, sizeof(PacketFilter)) != HOST_SENDCONTROL_Successful)
	{
		puts_P(PSTR("Error Setting Device Packet Filter.\r\n"));
     4b0:	8f e6       	ldi	r24, 0x6F	; 111
     4b2:	91 e0       	ldi	r25, 0x01	; 1
     4b4:	11 c0       	rjmp	.+34     	; 0x4d8 <EVENT_USB_Host_DeviceEnumerationComplete+0x118>
		USB_Host_SetDeviceConfiguration(0);
		return;
	}

	uint32_t VendorID;
	if (RNDIS_Host_QueryRNDISProperty(&Ethernet_RNDIS_Interface, OID_GEN_VENDOR_ID,
     4b6:	88 e0       	ldi	r24, 0x08	; 8
     4b8:	91 e0       	ldi	r25, 0x01	; 1
     4ba:	4c e0       	ldi	r20, 0x0C	; 12
     4bc:	51 e0       	ldi	r21, 0x01	; 1
     4be:	61 e0       	ldi	r22, 0x01	; 1
     4c0:	70 e0       	ldi	r23, 0x00	; 0
     4c2:	9e 01       	movw	r18, r28
     4c4:	29 5f       	subi	r18, 0xF9	; 249
     4c6:	3f 4f       	sbci	r19, 0xFF	; 255
     4c8:	04 e0       	ldi	r16, 0x04	; 4
     4ca:	10 e0       	ldi	r17, 0x00	; 0
     4cc:	0e 94 8d 0a 	call	0x151a	; 0x151a <RNDIS_Host_QueryRNDISProperty>
     4d0:	88 23       	and	r24, r24
     4d2:	59 f0       	breq	.+22     	; 0x4ea <EVENT_USB_Host_DeviceEnumerationComplete+0x12a>
	                                  &VendorID, sizeof(VendorID)) != HOST_SENDCONTROL_Successful)
	{
		puts_P(PSTR("Error Getting Vendor ID.\r\n"));
     4d4:	84 e5       	ldi	r24, 0x54	; 84
     4d6:	91 e0       	ldi	r25, 0x01	; 1
     4d8:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <puts_P>
     4dc:	8b b1       	in	r24, 0x0b	; 11
     4de:	8f 70       	andi	r24, 0x0F	; 15
     4e0:	80 69       	ori	r24, 0x90	; 144
     4e2:	8b b9       	out	0x0b, r24	; 11

		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		USB_Host_SetDeviceConfiguration(0);
     4e4:	80 e0       	ldi	r24, 0x00	; 0
     4e6:	00 d7       	rcall	.+3584   	; 0x12e8 <USB_Host_SetDeviceConfiguration>
     4e8:	23 c0       	rjmp	.+70     	; 0x530 <EVENT_USB_Host_DeviceEnumerationComplete+0x170>
		return;
	}

	printf_P(PSTR("Device Vendor ID: 0x%08lX\r\n"), VendorID);
     4ea:	00 d0       	rcall	.+0      	; 0x4ec <EVENT_USB_Host_DeviceEnumerationComplete+0x12c>
     4ec:	00 d0       	rcall	.+0      	; 0x4ee <EVENT_USB_Host_DeviceEnumerationComplete+0x12e>
     4ee:	00 d0       	rcall	.+0      	; 0x4f0 <EVENT_USB_Host_DeviceEnumerationComplete+0x130>
     4f0:	88 e3       	ldi	r24, 0x38	; 56
     4f2:	91 e0       	ldi	r25, 0x01	; 1
     4f4:	ed b7       	in	r30, 0x3d	; 61
     4f6:	fe b7       	in	r31, 0x3e	; 62
     4f8:	92 83       	std	Z+2, r25	; 0x02
     4fa:	81 83       	std	Z+1, r24	; 0x01
     4fc:	8f 81       	ldd	r24, Y+7	; 0x07
     4fe:	98 85       	ldd	r25, Y+8	; 0x08
     500:	a9 85       	ldd	r26, Y+9	; 0x09
     502:	ba 85       	ldd	r27, Y+10	; 0x0a
     504:	83 83       	std	Z+3, r24	; 0x03
     506:	94 83       	std	Z+4, r25	; 0x04
     508:	a5 83       	std	Z+5, r26	; 0x05
     50a:	b6 83       	std	Z+6, r27	; 0x06
     50c:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <printf_P>

	puts_P(PSTR("RNDIS Device Enumerated.\r\n"));
     510:	8d b7       	in	r24, 0x3d	; 61
     512:	9e b7       	in	r25, 0x3e	; 62
     514:	06 96       	adiw	r24, 0x06	; 6
     516:	0f b6       	in	r0, 0x3f	; 63
     518:	f8 94       	cli
     51a:	9e bf       	out	0x3e, r25	; 62
     51c:	0f be       	out	0x3f, r0	; 63
     51e:	8d bf       	out	0x3d, r24	; 61
     520:	8d e1       	ldi	r24, 0x1D	; 29
     522:	91 e0       	ldi	r25, 0x01	; 1
     524:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <puts_P>
     528:	8b b1       	in	r24, 0x0b	; 11
     52a:	8f 70       	andi	r24, 0x0F	; 15
     52c:	80 66       	ori	r24, 0x60	; 96
     52e:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
}
     530:	c6 5f       	subi	r28, 0xF6	; 246
     532:	dd 4f       	sbci	r29, 0xFD	; 253
     534:	0f b6       	in	r0, 0x3f	; 63
     536:	f8 94       	cli
     538:	de bf       	out	0x3e, r29	; 62
     53a:	0f be       	out	0x3f, r0	; 63
     53c:	cd bf       	out	0x3d, r28	; 61
     53e:	cf 91       	pop	r28
     540:	df 91       	pop	r29
     542:	1f 91       	pop	r17
     544:	0f 91       	pop	r16
     546:	08 95       	ret

00000548 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     548:	84 b7       	in	r24, 0x34	; 52
     54a:	87 7f       	andi	r24, 0xF7	; 247
     54c:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     54e:	38 e1       	ldi	r19, 0x18	; 24
     550:	0f b6       	in	r0, 0x3f	; 63
     552:	f8 94       	cli
     554:	30 93 60 00 	sts	0x0060, r19
     558:	10 92 60 00 	sts	0x0060, r1
     55c:	0f be       	out	0x3f, r0	; 63

	/* Disable clock division */
	clock_prescale_set(clock_div_1);
     55e:	80 e0       	ldi	r24, 0x00	; 0
     560:	90 e0       	ldi	r25, 0x00	; 0
     562:	20 e8       	ldi	r18, 0x80	; 128
     564:	0f b6       	in	r0, 0x3f	; 63
     566:	f8 94       	cli
     568:	20 93 61 00 	sts	0x0061, r18
     56c:	80 93 61 00 	sts	0x0061, r24
     570:	0f be       	out	0x3f, r0	; 63
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     572:	83 e3       	ldi	r24, 0x33	; 51
     574:	90 e0       	ldi	r25, 0x00	; 0
     576:	90 93 cd 00 	sts	0x00CD, r25
     57a:	80 93 cc 00 	sts	0x00CC, r24

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     57e:	86 e0       	ldi	r24, 0x06	; 6
     580:	80 93 ca 00 	sts	0x00CA, r24
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     584:	10 92 c8 00 	sts	0x00C8, r1
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     588:	30 93 c9 00 	sts	0x00C9, r19

				DDRD  |= (1 << 3);
     58c:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     58e:	5a 9a       	sbi	0x0b, 2	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     590:	8a b1       	in	r24, 0x0a	; 10
     592:	80 6f       	ori	r24, 0xF0	; 240
     594:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     596:	8b b1       	in	r24, 0x0b	; 11
     598:	8f 70       	andi	r24, 0x0F	; 15
     59a:	8b b9       	out	0x0b, r24	; 11

	/* Hardware Initialization */
	Serial_Init(9600, false);
	LEDs_Init();
	USB_Init();
     59c:	76 d3       	rcall	.+1772   	; 0xc8a <USB_Init>
			static inline void Serial_CreateStream(FILE* Stream)
			{
				if (!(Stream))
				{
					Stream = &USARTSerialStream;
					stdin  = Stream;
     59e:	e2 e4       	ldi	r30, 0x42	; 66
     5a0:	f5 e0       	ldi	r31, 0x05	; 5
     5a2:	f0 93 51 05 	sts	0x0551, r31
     5a6:	e0 93 50 05 	sts	0x0550, r30
					stdout = Stream;
     5aa:	f0 93 53 05 	sts	0x0553, r31
     5ae:	e0 93 52 05 	sts	0x0552, r30
				}
			
				*Stream = (FILE)FDEV_SETUP_STREAM(Serial_putchar, Serial_getchar, _FDEV_SETUP_RW);
     5b2:	8e e0       	ldi	r24, 0x0E	; 14
     5b4:	df 01       	movw	r26, r30
     5b6:	1d 92       	st	X+, r1
     5b8:	8a 95       	dec	r24
     5ba:	e9 f7       	brne	.-6      	; 0x5b6 <SetupHardware+0x6e>
     5bc:	83 e0       	ldi	r24, 0x03	; 3
     5be:	80 93 45 05 	sts	0x0545, r24
     5c2:	83 e4       	ldi	r24, 0x43	; 67
     5c4:	9d e0       	ldi	r25, 0x0D	; 13
     5c6:	90 93 4b 05 	sts	0x054B, r25
     5ca:	80 93 4a 05 	sts	0x054A, r24
     5ce:	8d e4       	ldi	r24, 0x4D	; 77
     5d0:	9d e0       	ldi	r25, 0x0D	; 13
     5d2:	90 93 4d 05 	sts	0x054D, r25
     5d6:	80 93 4c 05 	sts	0x054C, r24

	/* Create a stdio stream for the serial port for stdin and stdout */
	Serial_CreateStream(NULL);
}
     5da:	08 95       	ret

000005dc <RNDISHost_Task>:

/** Task to manage an enumerated USB RNDIS device once connected, to display device
 *  received data packets.
 */
void RNDISHost_Task(void)
{
     5dc:	ef 92       	push	r14
     5de:	ff 92       	push	r15
     5e0:	0f 93       	push	r16
     5e2:	1f 93       	push	r17
     5e4:	df 93       	push	r29
     5e6:	cf 93       	push	r28
     5e8:	00 d0       	rcall	.+0      	; 0x5ea <RNDISHost_Task+0xe>
     5ea:	cd b7       	in	r28, 0x3d	; 61
     5ec:	de b7       	in	r29, 0x3e	; 62
	if (USB_HostState != HOST_STATE_Configured)
     5ee:	80 91 41 05 	lds	r24, 0x0541
     5f2:	8b 30       	cpi	r24, 0x0B	; 11
     5f4:	09 f0       	breq	.+2      	; 0x5f8 <RNDISHost_Task+0x1c>
     5f6:	58 c0       	rjmp	.+176    	; 0x6a8 <RNDISHost_Task+0xcc>
	  return;

	if (RNDIS_Host_IsPacketReceived(&Ethernet_RNDIS_Interface))
     5f8:	88 e0       	ldi	r24, 0x08	; 8
     5fa:	91 e0       	ldi	r25, 0x01	; 1
     5fc:	cb d6       	rcall	.+3478   	; 0x1394 <RNDIS_Host_IsPacketReceived>
     5fe:	88 23       	and	r24, r24
     600:	09 f4       	brne	.+2      	; 0x604 <RNDISHost_Task+0x28>
     602:	52 c0       	rjmp	.+164    	; 0x6a8 <RNDISHost_Task+0xcc>
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     604:	8b b1       	in	r24, 0x0b	; 11
     606:	8f 70       	andi	r24, 0x0F	; 15
     608:	80 62       	ori	r24, 0x20	; 32
     60a:	8b b9       	out	0x0b, r24	; 11
	{
		LEDs_SetAllLEDs(LEDMASK_USB_BUSY);

		uint16_t PacketLength;
		RNDIS_Host_ReadPacket(&Ethernet_RNDIS_Interface, &PacketBuffer, &PacketLength);
     60c:	88 e0       	ldi	r24, 0x08	; 8
     60e:	91 e0       	ldi	r25, 0x01	; 1
     610:	64 e3       	ldi	r22, 0x34	; 52
     612:	71 e0       	ldi	r23, 0x01	; 1
     614:	ae 01       	movw	r20, r28
     616:	4f 5f       	subi	r20, 0xFF	; 255
     618:	5f 4f       	sbci	r21, 0xFF	; 255
     61a:	d8 d6       	rcall	.+3504   	; 0x13cc <RNDIS_Host_ReadPacket>

		printf_P(PSTR("***PACKET (Size %d)***\r\n"), PacketLength);
     61c:	00 d0       	rcall	.+0      	; 0x61e <RNDISHost_Task+0x42>
     61e:	00 d0       	rcall	.+0      	; 0x620 <RNDISHost_Task+0x44>
     620:	8d e8       	ldi	r24, 0x8D	; 141
     622:	92 e0       	ldi	r25, 0x02	; 2
     624:	ed b7       	in	r30, 0x3d	; 61
     626:	fe b7       	in	r31, 0x3e	; 62
     628:	92 83       	std	Z+2, r25	; 0x02
     62a:	81 83       	std	Z+1, r24	; 0x01
     62c:	89 81       	ldd	r24, Y+1	; 0x01
     62e:	9a 81       	ldd	r25, Y+2	; 0x02
     630:	94 83       	std	Z+4, r25	; 0x04
     632:	83 83       	std	Z+3, r24	; 0x03
     634:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <printf_P>
     638:	00 e0       	ldi	r16, 0x00	; 0
     63a:	10 e0       	ldi	r17, 0x00	; 0
     63c:	0f 90       	pop	r0
     63e:	0f 90       	pop	r0
     640:	0f 90       	pop	r0
     642:	0f 90       	pop	r0

		for (uint16_t i = 0; i < PacketLength; i++)
		  printf("0x%02x ", PacketBuffer[i]);
     644:	80 e0       	ldi	r24, 0x00	; 0
     646:	e8 2e       	mov	r14, r24
     648:	81 e0       	ldi	r24, 0x01	; 1
     64a:	f8 2e       	mov	r15, r24
     64c:	19 c0       	rjmp	.+50     	; 0x680 <RNDISHost_Task+0xa4>
     64e:	00 d0       	rcall	.+0      	; 0x650 <RNDISHost_Task+0x74>
     650:	00 d0       	rcall	.+0      	; 0x652 <RNDISHost_Task+0x76>
     652:	ed b7       	in	r30, 0x3d	; 61
     654:	fe b7       	in	r31, 0x3e	; 62
     656:	f2 82       	std	Z+2, r15	; 0x02
     658:	e1 82       	std	Z+1, r14	; 0x01
     65a:	f8 01       	movw	r30, r16
     65c:	ec 5c       	subi	r30, 0xCC	; 204
     65e:	fe 4f       	sbci	r31, 0xFE	; 254
     660:	80 81       	ld	r24, Z
     662:	99 27       	eor	r25, r25
     664:	87 fd       	sbrc	r24, 7
     666:	90 95       	com	r25
     668:	ed b7       	in	r30, 0x3d	; 61
     66a:	fe b7       	in	r31, 0x3e	; 62
     66c:	94 83       	std	Z+4, r25	; 0x04
     66e:	83 83       	std	Z+3, r24	; 0x03
     670:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <printf>
		uint16_t PacketLength;
		RNDIS_Host_ReadPacket(&Ethernet_RNDIS_Interface, &PacketBuffer, &PacketLength);

		printf_P(PSTR("***PACKET (Size %d)***\r\n"), PacketLength);

		for (uint16_t i = 0; i < PacketLength; i++)
     674:	0f 5f       	subi	r16, 0xFF	; 255
     676:	1f 4f       	sbci	r17, 0xFF	; 255
     678:	0f 90       	pop	r0
     67a:	0f 90       	pop	r0
     67c:	0f 90       	pop	r0
     67e:	0f 90       	pop	r0
     680:	89 81       	ldd	r24, Y+1	; 0x01
     682:	9a 81       	ldd	r25, Y+2	; 0x02
     684:	08 17       	cp	r16, r24
     686:	19 07       	cpc	r17, r25
     688:	10 f3       	brcs	.-60     	; 0x64e <RNDISHost_Task+0x72>
		  printf("0x%02x ", PacketBuffer[i]);

		printf_P(PSTR("\r\n\r\n"));
     68a:	00 d0       	rcall	.+0      	; 0x68c <RNDISHost_Task+0xb0>
     68c:	88 e8       	ldi	r24, 0x88	; 136
     68e:	92 e0       	ldi	r25, 0x02	; 2
     690:	ed b7       	in	r30, 0x3d	; 61
     692:	fe b7       	in	r31, 0x3e	; 62
     694:	92 83       	std	Z+2, r25	; 0x02
     696:	81 83       	std	Z+1, r24	; 0x01
     698:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <printf_P>
     69c:	8b b1       	in	r24, 0x0b	; 11
     69e:	8f 70       	andi	r24, 0x0F	; 15
     6a0:	80 66       	ori	r24, 0x60	; 96
     6a2:	8b b9       	out	0x0b, r24	; 11
     6a4:	0f 90       	pop	r0
     6a6:	0f 90       	pop	r0

		LEDs_SetAllLEDs(LEDMASK_USB_READY);
	}
}
     6a8:	0f 90       	pop	r0
     6aa:	0f 90       	pop	r0
     6ac:	cf 91       	pop	r28
     6ae:	df 91       	pop	r29
     6b0:	1f 91       	pop	r17
     6b2:	0f 91       	pop	r16
     6b4:	ff 90       	pop	r15
     6b6:	ef 90       	pop	r14
     6b8:	08 95       	ret

000006ba <main>:
/** Main program entry point. This routine configures the hardware required by the application, then
 *  enters a loop to run the application tasks in sequence.
 */
int main(void)
{
	SetupHardware();
     6ba:	46 df       	rcall	.-372    	; 0x548 <SetupHardware>

	puts_P(PSTR(ESC_FG_CYAN "RNDIS Host Demo running.\r\n" ESC_FG_WHITE));
     6bc:	86 ea       	ldi	r24, 0xA6	; 166
     6be:	92 e0       	ldi	r25, 0x02	; 2
     6c0:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <puts_P>
     6c4:	8b b1       	in	r24, 0x0b	; 11
     6c6:	8f 70       	andi	r24, 0x0F	; 15
     6c8:	80 61       	ori	r24, 0x10	; 16
     6ca:	8b b9       	out	0x0b, r24	; 11

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
	sei();
     6cc:	78 94       	sei

	for (;;)
	{
		RNDISHost_Task();
     6ce:	86 df       	rcall	.-244    	; 0x5dc <RNDISHost_Task>

		RNDIS_Host_USBTask(&Ethernet_RNDIS_Interface);
		USB_USBTask();
     6d0:	30 d6       	rcall	.+3168   	; 0x1332 <USB_USBTask>
     6d2:	fd cf       	rjmp	.-6      	; 0x6ce <main+0x14>

000006d4 <USB_Host_WaitMS>:
		USB_ResetInterface();
	}
}

uint8_t USB_Host_WaitMS(uint8_t MS)
{
     6d4:	98 2f       	mov	r25, r24
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     6d6:	20 91 9e 00 	lds	r18, 0x009E
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     6da:	30 91 a0 00 	lds	r19, 0x00A0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     6de:	80 91 a0 00 	lds	r24, 0x00A0
     6e2:	8f 7d       	andi	r24, 0xDF	; 223
     6e4:	80 93 a0 00 	sts	0x00A0, r24
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     6e8:	80 91 9f 00 	lds	r24, 0x009F
     6ec:	8f 7d       	andi	r24, 0xDF	; 223
     6ee:	80 93 9f 00 	sts	0x009F, r24
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     6f2:	80 91 9e 00 	lds	r24, 0x009E
     6f6:	81 60       	ori	r24, 0x01	; 1
     6f8:	80 93 9e 00 	sts	0x009E, r24
     6fc:	28 c0       	rjmp	.+80     	; 0x74e <USB_Host_WaitMS+0x7a>
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     6fe:	80 91 9f 00 	lds	r24, 0x009F

	USB_Host_ResumeBus();

	while (MS)
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     702:	85 ff       	sbrs	r24, 5
     704:	06 c0       	rjmp	.+12     	; 0x712 <USB_Host_WaitMS+0x3e>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     706:	80 91 9f 00 	lds	r24, 0x009F
     70a:	8f 7d       	andi	r24, 0xDF	; 223
     70c:	80 93 9f 00 	sts	0x009F, r24
		{
			USB_INT_Clear(USB_INT_HSOFI);
			MS--;
     710:	91 50       	subi	r25, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
     712:	80 91 41 05 	lds	r24, 0x0541
     716:	81 30       	cpi	r24, 0x01	; 1
     718:	11 f4       	brne	.+4      	; 0x71e <USB_Host_WaitMS+0x4a>
     71a:	91 e0       	ldi	r25, 0x01	; 1
     71c:	1a c0       	rjmp	.+52     	; 0x752 <USB_Host_WaitMS+0x7e>
			 *  \return Boolean \c true if an error has occurred on the selected pipe, \c false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
     71e:	80 91 a6 00 	lds	r24, 0x00A6
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError() == true)
     722:	84 ff       	sbrs	r24, 4
     724:	09 c0       	rjmp	.+18     	; 0x738 <USB_Host_WaitMS+0x64>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     726:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
     72a:	80 91 a6 00 	lds	r24, 0x00A6
     72e:	8f 7e       	andi	r24, 0xEF	; 239
     730:	80 93 a6 00 	sts	0x00A6, r24
     734:	92 e0       	ldi	r25, 0x02	; 2
     736:	0d c0       	rjmp	.+26     	; 0x752 <USB_Host_WaitMS+0x7e>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     738:	80 91 a6 00 	lds	r24, 0x00A6
			ErrorCode = HOST_WAITERROR_PipeError;

			break;
		}

		if (Pipe_IsStalled() == true)
     73c:	81 ff       	sbrs	r24, 1
     73e:	07 c0       	rjmp	.+14     	; 0x74e <USB_Host_WaitMS+0x7a>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
     740:	80 91 a6 00 	lds	r24, 0x00A6
     744:	8d 7f       	andi	r24, 0xFD	; 253
     746:	80 93 a6 00 	sts	0x00A6, r24
     74a:	93 e0       	ldi	r25, 0x03	; 3
     74c:	02 c0       	rjmp	.+4      	; 0x752 <USB_Host_WaitMS+0x7e>
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     74e:	99 23       	and	r25, r25
     750:	b1 f6       	brne	.-84     	; 0x6fe <USB_Host_WaitMS+0x2a>

			break;
		}
	}

	if (BusSuspended)
     752:	20 fd       	sbrc	r18, 0
     754:	05 c0       	rjmp	.+10     	; 0x760 <USB_Host_WaitMS+0x8c>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     756:	80 91 9e 00 	lds	r24, 0x009E
     75a:	8e 7f       	andi	r24, 0xFE	; 254
     75c:	80 93 9e 00 	sts	0x009E, r24
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
     760:	35 ff       	sbrs	r19, 5
     762:	05 c0       	rjmp	.+10     	; 0x76e <USB_Host_WaitMS+0x9a>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     764:	80 91 a0 00 	lds	r24, 0x00A0
     768:	80 62       	ori	r24, 0x20	; 32
     76a:	80 93 a0 00 	sts	0x00A0, r24
	  USB_INT_Enable(USB_INT_HSOFI);

	return ErrorCode;
}
     76e:	89 2f       	mov	r24, r25
     770:	08 95       	ret

00000772 <USB_Host_ResetDevice>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     772:	60 91 9e 00 	lds	r22, 0x009E
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     776:	80 91 a0 00 	lds	r24, 0x00A0
     77a:	8d 7f       	andi	r24, 0xFD	; 253
     77c:	80 93 a0 00 	sts	0x00A0, r24
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
     780:	80 91 9e 00 	lds	r24, 0x009E
     784:	82 60       	ori	r24, 0x02	; 2
     786:	80 93 9e 00 	sts	0x009E, r24
			 *  \return Boolean \c true if no bus reset is currently being sent, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
     78a:	80 91 9e 00 	lds	r24, 0x009E
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
     78e:	81 fd       	sbrc	r24, 1
     790:	fc cf       	rjmp	.-8      	; 0x78a <USB_Host_ResetDevice+0x18>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     792:	80 91 9e 00 	lds	r24, 0x009E
     796:	81 60       	ori	r24, 0x01	; 1
     798:	80 93 9e 00 	sts	0x009E, r24
	USB_Host_ResumeBus();
	
	USB_Host_ConfigurationNumber = 0;
     79c:	10 92 37 05 	sts	0x0537, r1
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     7a0:	30 91 a0 00 	lds	r19, 0x00A0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     7a4:	80 91 a0 00 	lds	r24, 0x00A0
     7a8:	8f 7d       	andi	r24, 0xDF	; 223
     7aa:	80 93 a0 00 	sts	0x00A0, r24
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     7ae:	80 91 9f 00 	lds	r24, 0x009F
     7b2:	8f 7d       	andi	r24, 0xDF	; 223
     7b4:	80 93 9f 00 	sts	0x009F, r24
     7b8:	2a e0       	ldi	r18, 0x0A	; 10
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     7ba:	40 ed       	ldi	r20, 0xD0	; 208
     7bc:	57 e0       	ldi	r21, 0x07	; 7
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     7be:	80 91 9f 00 	lds	r24, 0x009F
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     7c2:	85 ff       	sbrs	r24, 5
     7c4:	0b c0       	rjmp	.+22     	; 0x7dc <USB_Host_ResetDevice+0x6a>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     7c6:	80 91 9f 00 	lds	r24, 0x009F
     7ca:	8f 7d       	andi	r24, 0xDF	; 223
     7cc:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     7d0:	80 91 9f 00 	lds	r24, 0x009F
     7d4:	8d 7f       	andi	r24, 0xFD	; 253
     7d6:	80 93 9f 00 	sts	0x009F, r24
     7da:	05 c0       	rjmp	.+10     	; 0x7e6 <USB_Host_ResetDevice+0x74>
     7dc:	ca 01       	movw	r24, r20
     7de:	01 97       	sbiw	r24, 0x01	; 1
     7e0:	f1 f7       	brne	.-4      	; 0x7de <USB_Host_ResetDevice+0x6c>
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
     7e2:	21 50       	subi	r18, 0x01	; 1
     7e4:	61 f7       	brne	.-40     	; 0x7be <USB_Host_ResetDevice+0x4c>
		}

		Delay_MS(1);
	}

	if (HSOFIEnabled)
     7e6:	35 ff       	sbrs	r19, 5
     7e8:	05 c0       	rjmp	.+10     	; 0x7f4 <USB_Host_ResetDevice+0x82>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     7ea:	80 91 a0 00 	lds	r24, 0x00A0
     7ee:	80 62       	ori	r24, 0x20	; 32
     7f0:	80 93 a0 00 	sts	0x00A0, r24
	  USB_INT_Enable(USB_INT_HSOFI);

	if (BusSuspended)
     7f4:	60 fd       	sbrc	r22, 0
     7f6:	05 c0       	rjmp	.+10     	; 0x802 <USB_Host_ResetDevice+0x90>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     7f8:	80 91 9e 00 	lds	r24, 0x009E
     7fc:	8e 7f       	andi	r24, 0xFE	; 254
     7fe:	80 93 9e 00 	sts	0x009E, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     802:	80 91 a0 00 	lds	r24, 0x00A0
     806:	82 60       	ori	r24, 0x02	; 2
     808:	80 93 a0 00 	sts	0x00A0, r24
	  USB_Host_SuspendBus();

	USB_INT_Enable(USB_INT_DDISCI);
}
     80c:	08 95       	ret

0000080e <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "../Host.h"

void USB_Host_ProcessNextHostState(void)
{
     80e:	ef 92       	push	r14
     810:	0f 93       	push	r16
     812:	1f 93       	push	r17
     814:	df 93       	push	r29
     816:	cf 93       	push	r28
     818:	cd b7       	in	r28, 0x3d	; 61
     81a:	de b7       	in	r29, 0x3e	; 62
     81c:	28 97       	sbiw	r28, 0x08	; 8
     81e:	0f b6       	in	r0, 0x3f	; 63
     820:	f8 94       	cli
     822:	de bf       	out	0x3e, r29	; 62
     824:	0f be       	out	0x3f, r0	; 63
     826:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
     828:	80 91 41 05 	lds	r24, 0x0541
     82c:	85 30       	cpi	r24, 0x05	; 5
     82e:	09 f4       	brne	.+2      	; 0x832 <USB_Host_ProcessNextHostState+0x24>
     830:	94 c0       	rjmp	.+296    	; 0x95a <USB_Host_ProcessNextHostState+0x14c>
     832:	86 30       	cpi	r24, 0x06	; 6
     834:	68 f4       	brcc	.+26     	; 0x850 <USB_Host_ProcessNextHostState+0x42>
     836:	82 30       	cpi	r24, 0x02	; 2
     838:	b9 f1       	breq	.+110    	; 0x8a8 <USB_Host_ProcessNextHostState+0x9a>
     83a:	83 30       	cpi	r24, 0x03	; 3
     83c:	18 f4       	brcc	.+6      	; 0x844 <USB_Host_ProcessNextHostState+0x36>
     83e:	88 23       	and	r24, r24
     840:	a1 f0       	breq	.+40     	; 0x86a <USB_Host_ProcessNextHostState+0x5c>
     842:	04 c1       	rjmp	.+520    	; 0xa4c <USB_Host_ProcessNextHostState+0x23e>
     844:	83 30       	cpi	r24, 0x03	; 3
     846:	d1 f1       	breq	.+116    	; 0x8bc <USB_Host_ProcessNextHostState+0xae>
     848:	84 30       	cpi	r24, 0x04	; 4
     84a:	09 f0       	breq	.+2      	; 0x84e <USB_Host_ProcessNextHostState+0x40>
     84c:	ff c0       	rjmp	.+510    	; 0xa4c <USB_Host_ProcessNextHostState+0x23e>
     84e:	5d c0       	rjmp	.+186    	; 0x90a <USB_Host_ProcessNextHostState+0xfc>
     850:	87 30       	cpi	r24, 0x07	; 7
     852:	09 f4       	brne	.+2      	; 0x856 <USB_Host_ProcessNextHostState+0x48>
     854:	9b c0       	rjmp	.+310    	; 0x98c <USB_Host_ProcessNextHostState+0x17e>
     856:	87 30       	cpi	r24, 0x07	; 7
     858:	08 f4       	brcc	.+2      	; 0x85c <USB_Host_ProcessNextHostState+0x4e>
     85a:	8a c0       	rjmp	.+276    	; 0x970 <USB_Host_ProcessNextHostState+0x162>
     85c:	88 30       	cpi	r24, 0x08	; 8
     85e:	09 f4       	brne	.+2      	; 0x862 <USB_Host_ProcessNextHostState+0x54>
     860:	b3 c0       	rjmp	.+358    	; 0x9c8 <USB_Host_ProcessNextHostState+0x1ba>
     862:	89 30       	cpi	r24, 0x09	; 9
     864:	09 f0       	breq	.+2      	; 0x868 <USB_Host_ProcessNextHostState+0x5a>
     866:	f2 c0       	rjmp	.+484    	; 0xa4c <USB_Host_ProcessNextHostState+0x23e>
     868:	d7 c0       	rjmp	.+430    	; 0xa18 <USB_Host_ProcessNextHostState+0x20a>
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
     86a:	00 91 35 05 	lds	r16, 0x0535
     86e:	10 91 36 05 	lds	r17, 0x0536
     872:	01 15       	cp	r16, r1
     874:	11 05       	cpc	r17, r1
     876:	09 f4       	brne	.+2      	; 0x87a <USB_Host_ProcessNextHostState+0x6c>
     878:	e9 c0       	rjmp	.+466    	; 0xa4c <USB_Host_ProcessNextHostState+0x23e>
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     87a:	81 e0       	ldi	r24, 0x01	; 1
     87c:	2b df       	rcall	.-426    	; 0x6d4 <USB_Host_WaitMS>
     87e:	68 2f       	mov	r22, r24
     880:	88 23       	and	r24, r24
     882:	31 f0       	breq	.+12     	; 0x890 <USB_Host_ProcessNextHostState+0x82>
				{
					USB_HostState = PostWaitState;
     884:	80 91 34 05 	lds	r24, 0x0534
     888:	80 93 41 05 	sts	0x0541, r24
     88c:	91 e0       	ldi	r25, 0x01	; 1
     88e:	da c0       	rjmp	.+436    	; 0xa44 <USB_Host_ProcessNextHostState+0x236>
					ErrorCode     = HOST_ENUMERROR_WaitStage;
					break;
				}

				if (!(--WaitMSRemaining))
     890:	c8 01       	movw	r24, r16
     892:	01 97       	sbiw	r24, 0x01	; 1
     894:	90 93 36 05 	sts	0x0536, r25
     898:	80 93 35 05 	sts	0x0535, r24
     89c:	89 2b       	or	r24, r25
     89e:	09 f0       	breq	.+2      	; 0x8a2 <USB_Host_ProcessNextHostState+0x94>
     8a0:	d5 c0       	rjmp	.+426    	; 0xa4c <USB_Host_ProcessNextHostState+0x23e>
				  USB_HostState = PostWaitState;
     8a2:	80 91 34 05 	lds	r24, 0x0534
     8a6:	07 c0       	rjmp	.+14     	; 0x8b6 <USB_Host_ProcessNextHostState+0xa8>
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
     8a8:	88 ee       	ldi	r24, 0xE8	; 232
     8aa:	93 e0       	ldi	r25, 0x03	; 3
     8ac:	90 93 36 05 	sts	0x0536, r25
     8b0:	80 93 35 05 	sts	0x0535, r24

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
     8b4:	83 e0       	ldi	r24, 0x03	; 3
     8b6:	80 93 41 05 	sts	0x0541, r24
     8ba:	c8 c0       	rjmp	.+400    	; 0xa4c <USB_Host_ProcessNextHostState+0x23e>
			break;
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
     8bc:	80 91 35 05 	lds	r24, 0x0535
     8c0:	90 91 36 05 	lds	r25, 0x0536
     8c4:	01 97       	sbiw	r24, 0x01	; 1
     8c6:	90 93 36 05 	sts	0x0536, r25
     8ca:	80 93 35 05 	sts	0x0535, r24
     8ce:	01 96       	adiw	r24, 0x01	; 1
     8d0:	29 f0       	breq	.+10     	; 0x8dc <USB_Host_ProcessNextHostState+0xce>
     8d2:	80 ed       	ldi	r24, 0xD0	; 208
     8d4:	97 e0       	ldi	r25, 0x07	; 7
     8d6:	01 97       	sbiw	r24, 0x01	; 1
     8d8:	f1 f7       	brne	.-4      	; 0x8d6 <USB_Host_ProcessNextHostState+0xc8>
     8da:	b8 c0       	rjmp	.+368    	; 0xa4c <USB_Host_ProcessNextHostState+0x23e>
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
     8dc:	77 98       	cbi	0x0e, 7	; 14

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     8de:	80 91 d8 00 	lds	r24, 0x00D8
     8e2:	80 61       	ori	r24, 0x10	; 16
     8e4:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
     8e8:	80 91 dd 00 	lds	r24, 0x00DD
     8ec:	8b 7f       	andi	r24, 0xFB	; 251
     8ee:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON |=  (1 << UVCONE);
     8f2:	80 91 d7 00 	lds	r24, 0x00D7
     8f6:	80 61       	ori	r24, 0x10	; 16
     8f8:	80 93 d7 00 	sts	0x00D7, r24
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
     8fc:	80 91 dd 00 	lds	r24, 0x00DD
     900:	82 60       	ori	r24, 0x02	; 2
     902:	80 93 dd 00 	sts	0x00DD, r24

				USB_OTGPAD_On();
				USB_Host_VBUS_Auto_Enable();
				USB_Host_VBUS_Auto_On();

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
     906:	84 e0       	ldi	r24, 0x04	; 4
     908:	d6 cf       	rjmp	.-84     	; 0x8b6 <USB_Host_ProcessNextHostState+0xa8>
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
     90a:	80 91 9f 00 	lds	r24, 0x009F
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
     90e:	80 ff       	sbrs	r24, 0
     910:	9d c0       	rjmp	.+314    	; 0xa4c <USB_Host_ProcessNextHostState+0x23e>
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     912:	80 91 9f 00 	lds	r24, 0x009F
     916:	8e 7f       	andi	r24, 0xFE	; 254
     918:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     91c:	80 91 9f 00 	lds	r24, 0x009F
     920:	8d 7f       	andi	r24, 0xFD	; 253
     922:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     926:	80 91 df 00 	lds	r24, 0x00DF
     92a:	8d 7f       	andi	r24, 0xFD	; 253
     92c:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
     930:	80 91 de 00 	lds	r24, 0x00DE
     934:	82 60       	ori	r24, 0x02	; 2
     936:	80 93 de 00 	sts	0x00DE, r24
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     93a:	80 91 9e 00 	lds	r24, 0x009E
     93e:	81 60       	ori	r24, 0x01	; 1
     940:	80 93 9e 00 	sts	0x009E, r24

				USB_INT_Clear(USB_INT_VBERRI);
				USB_INT_Enable(USB_INT_VBERRI);

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
     944:	ed d0       	rcall	.+474    	; 0xb20 <Pipe_ClearPipes>

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
     946:	10 92 41 05 	sts	0x0541, r1
     94a:	84 e6       	ldi	r24, 0x64	; 100
     94c:	90 e0       	ldi	r25, 0x00	; 0
     94e:	90 93 36 05 	sts	0x0536, r25
     952:	80 93 35 05 	sts	0x0535, r24
     956:	85 e0       	ldi	r24, 0x05	; 5
     958:	5c c0       	rjmp	.+184    	; 0xa12 <USB_Host_ProcessNextHostState+0x204>
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
     95a:	0b df       	rcall	.-490    	; 0x772 <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
     95c:	10 92 41 05 	sts	0x0541, r1
     960:	88 ec       	ldi	r24, 0xC8	; 200
     962:	90 e0       	ldi	r25, 0x00	; 0
     964:	90 93 36 05 	sts	0x0536, r25
     968:	80 93 35 05 	sts	0x0535, r24
     96c:	86 e0       	ldi	r24, 0x06	; 6
     96e:	51 c0       	rjmp	.+162    	; 0xa12 <USB_Host_ProcessNextHostState+0x204>
			break;
		case HOST_STATE_Powered_ConfigPipe:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
     970:	80 e0       	ldi	r24, 0x00	; 0
     972:	60 e0       	ldi	r22, 0x00	; 0
     974:	40 e0       	ldi	r20, 0x00	; 0
     976:	20 e0       	ldi	r18, 0x00	; 0
     978:	00 e4       	ldi	r16, 0x40	; 64
     97a:	10 e0       	ldi	r17, 0x00	; 0
     97c:	ee 24       	eor	r14, r14
     97e:	72 d0       	rcall	.+228    	; 0xa64 <Pipe_ConfigurePipe>
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     980:	80 91 ac 00 	lds	r24, 0x00AC
							   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
							   PIPE_CONTROLPIPE_DEFAULT_SIZE, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
     984:	87 ff       	sbrs	r24, 7
     986:	5c c0       	rjmp	.+184    	; 0xa40 <USB_Host_ProcessNextHostState+0x232>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
     988:	87 e0       	ldi	r24, 0x07	; 7
     98a:	95 cf       	rjmp	.-214    	; 0x8b6 <USB_Host_ProcessNextHostState+0xa8>
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
     98c:	a9 e3       	ldi	r26, 0x39	; 57
     98e:	b5 e0       	ldi	r27, 0x05	; 5
     990:	ea e2       	ldi	r30, 0x2A	; 42
     992:	f1 e0       	ldi	r31, 0x01	; 1
     994:	88 e0       	ldi	r24, 0x08	; 8
     996:	01 90       	ld	r0, Z+
     998:	0d 92       	st	X+, r0
     99a:	81 50       	subi	r24, 0x01	; 1
     99c:	e1 f7       	brne	.-8      	; 0x996 <USB_Host_ProcessNextHostState+0x188>
					.wLength       = 8,
				};

			uint8_t DataBuffer[8];

			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
     99e:	ce 01       	movw	r24, r28
     9a0:	01 96       	adiw	r24, 0x01	; 1
     9a2:	9b d3       	rcall	.+1846   	; 0x10da <USB_Host_SendControlRequest>
     9a4:	68 2f       	mov	r22, r24
     9a6:	88 23       	and	r24, r24
     9a8:	09 f0       	breq	.+2      	; 0x9ac <USB_Host_ProcessNextHostState+0x19e>
     9aa:	48 c0       	rjmp	.+144    	; 0xa3c <USB_Host_ProcessNextHostState+0x22e>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_Host_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
     9ac:	88 85       	ldd	r24, Y+8	; 0x08
     9ae:	80 93 32 01 	sts	0x0132, r24

			USB_Host_ResetDevice();
     9b2:	df de       	rcall	.-578    	; 0x772 <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
     9b4:	10 92 41 05 	sts	0x0541, r1
     9b8:	88 ec       	ldi	r24, 0xC8	; 200
     9ba:	90 e0       	ldi	r25, 0x00	; 0
     9bc:	90 93 36 05 	sts	0x0536, r25
     9c0:	80 93 35 05 	sts	0x0535, r24
     9c4:	88 e0       	ldi	r24, 0x08	; 8
     9c6:	25 c0       	rjmp	.+74     	; 0xa12 <USB_Host_ProcessNextHostState+0x204>
			break;
		case HOST_STATE_Default_PostReset:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
     9c8:	00 91 32 01 	lds	r16, 0x0132
     9cc:	80 e0       	ldi	r24, 0x00	; 0
     9ce:	60 e0       	ldi	r22, 0x00	; 0
     9d0:	40 e0       	ldi	r20, 0x00	; 0
     9d2:	20 e0       	ldi	r18, 0x00	; 0
     9d4:	10 e0       	ldi	r17, 0x00	; 0
     9d6:	ee 24       	eor	r14, r14
     9d8:	45 d0       	rcall	.+138    	; 0xa64 <Pipe_ConfigurePipe>
     9da:	80 91 ac 00 	lds	r24, 0x00AC
			                   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
			                   USB_Host_ControlPipeSize, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
     9de:	87 ff       	sbrs	r24, 7
     9e0:	2f c0       	rjmp	.+94     	; 0xa40 <USB_Host_ProcessNextHostState+0x232>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
     9e2:	a9 e3       	ldi	r26, 0x39	; 57
     9e4:	b5 e0       	ldi	r27, 0x05	; 5
     9e6:	e2 e2       	ldi	r30, 0x22	; 34
     9e8:	f1 e0       	ldi	r31, 0x01	; 1
     9ea:	88 e0       	ldi	r24, 0x08	; 8
     9ec:	01 90       	ld	r0, Z+
     9ee:	0d 92       	st	X+, r0
     9f0:	81 50       	subi	r24, 0x01	; 1
     9f2:	e1 f7       	brne	.-8      	; 0x9ec <USB_Host_ProcessNextHostState+0x1de>
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
     9f4:	80 e0       	ldi	r24, 0x00	; 0
     9f6:	90 e0       	ldi	r25, 0x00	; 0
     9f8:	70 d3       	rcall	.+1760   	; 0x10da <USB_Host_SendControlRequest>
     9fa:	68 2f       	mov	r22, r24
     9fc:	88 23       	and	r24, r24
     9fe:	f1 f4       	brne	.+60     	; 0xa3c <USB_Host_ProcessNextHostState+0x22e>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
     a00:	10 92 41 05 	sts	0x0541, r1
     a04:	84 e6       	ldi	r24, 0x64	; 100
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	90 93 36 05 	sts	0x0536, r25
     a0c:	80 93 35 05 	sts	0x0535, r24
     a10:	89 e0       	ldi	r24, 0x09	; 9
     a12:	80 93 34 05 	sts	0x0534, r24
     a16:	1a c0       	rjmp	.+52     	; 0xa4c <USB_Host_ProcessNextHostState+0x23e>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
     a18:	81 e0       	ldi	r24, 0x01	; 1
     a1a:	80 93 a1 00 	sts	0x00A1, r24
			break;
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			USB_HostState = HOST_STATE_Addressed;
     a1e:	8a e0       	ldi	r24, 0x0A	; 10
     a20:	80 93 41 05 	sts	0x0541, r24

			EVENT_USB_Host_DeviceEnumerationComplete();
     a24:	cd dc       	rcall	.-1638   	; 0x3c0 <EVENT_USB_Host_DeviceEnumerationComplete>
     a26:	12 c0       	rjmp	.+36     	; 0xa4c <USB_Host_ProcessNextHostState+0x23e>
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
     a28:	89 2f       	mov	r24, r25
     a2a:	6f dc       	rcall	.-1826   	; 0x30a <EVENT_USB_Host_DeviceEnumerationFailed>
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     a2c:	80 91 dd 00 	lds	r24, 0x00DD
     a30:	81 60       	ori	r24, 0x01	; 1
     a32:	80 93 dd 00 	sts	0x00DD, r24

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
     a36:	b2 dc       	rcall	.-1692   	; 0x39c <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     a38:	d8 d0       	rcall	.+432    	; 0xbea <USB_ResetInterface>
     a3a:	08 c0       	rjmp	.+16     	; 0xa4c <USB_Host_ProcessNextHostState+0x23e>
	}
}
     a3c:	93 e0       	ldi	r25, 0x03	; 3
     a3e:	02 c0       	rjmp	.+4      	; 0xa44 <USB_Host_ProcessNextHostState+0x236>
     a40:	94 e0       	ldi	r25, 0x04	; 4
     a42:	60 e0       	ldi	r22, 0x00	; 0

			EVENT_USB_Host_DeviceEnumerationComplete();
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
     a44:	80 91 41 05 	lds	r24, 0x0541
     a48:	81 30       	cpi	r24, 0x01	; 1
     a4a:	71 f7       	brne	.-36     	; 0xa28 <USB_Host_ProcessNextHostState+0x21a>

		EVENT_USB_Host_DeviceUnattached();

		USB_ResetInterface();
	}
}
     a4c:	28 96       	adiw	r28, 0x08	; 8
     a4e:	0f b6       	in	r0, 0x3f	; 63
     a50:	f8 94       	cli
     a52:	de bf       	out	0x3e, r29	; 62
     a54:	0f be       	out	0x3f, r0	; 63
     a56:	cd bf       	out	0x3d, r28	; 61
     a58:	cf 91       	pop	r28
     a5a:	df 91       	pop	r29
     a5c:	1f 91       	pop	r17
     a5e:	0f 91       	pop	r16
     a60:	ef 90       	pop	r14
     a62:	08 95       	ret

00000a64 <Pipe_ConfigurePipe>:
                        const uint8_t Type,
                        const uint8_t Token,
                        const uint8_t EndpointNumber,
                        const uint16_t Size,
                        const uint8_t Banks)
{
     a64:	ef 92       	push	r14
     a66:	0f 93       	push	r16
     a68:	1f 93       	push	r17
     a6a:	e8 2f       	mov	r30, r24
     a6c:	7e 2d       	mov	r23, r14

		Pipe_SelectPipe(PNum);
		
		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
     a6e:	62 95       	swap	r22
     a70:	66 0f       	add	r22, r22
     a72:	66 0f       	add	r22, r22
     a74:	60 7c       	andi	r22, 0xC0	; 192
     a76:	64 2b       	or	r22, r20
     a78:	2f 70       	andi	r18, 0x0F	; 15
     a7a:	62 2b       	or	r22, r18
     a7c:	38 2f       	mov	r19, r24
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     a7e:	72 60       	ori	r23, 0x02	; 2
     a80:	45 c0       	rjmp	.+138    	; 0xb0c <Pipe_ConfigurePipe+0xa8>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     a82:	30 93 a7 00 	sts	0x00A7, r19
		uint8_t UPCFG2XTemp;
		uint8_t UPIENXTemp;

		Pipe_SelectPipe(PNum);
		
		if (PNum == Number)
     a86:	3e 17       	cp	r19, r30
     a88:	a1 f4       	brne	.+40     	; 0xab2 <Pipe_ConfigurePipe+0x4e>
     a8a:	88 e0       	ldi	r24, 0x08	; 8
     a8c:	90 e0       	ldi	r25, 0x00	; 0
     a8e:	20 e0       	ldi	r18, 0x00	; 0
     a90:	03 c0       	rjmp	.+6      	; 0xa98 <Pipe_ConfigurePipe+0x34>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
				{
					MaskVal++;
     a92:	2f 5f       	subi	r18, 0xFF	; 255
					CheckBytes <<= 1;
     a94:	88 0f       	add	r24, r24
     a96:	99 1f       	adc	r25, r25
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
     a98:	80 17       	cp	r24, r16
     a9a:	91 07       	cpc	r25, r17
     a9c:	10 f4       	brcc	.+4      	; 0xaa2 <Pipe_ConfigurePipe+0x3e>
     a9e:	25 30       	cpi	r18, 0x05	; 5
     aa0:	c1 f7       	brne	.-16     	; 0xa92 <Pipe_ConfigurePipe+0x2e>
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     aa2:	92 2f       	mov	r25, r18
     aa4:	92 95       	swap	r25
     aa6:	90 7f       	andi	r25, 0xF0	; 240
     aa8:	97 2b       	or	r25, r23
     aaa:	56 2f       	mov	r21, r22
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	20 e0       	ldi	r18, 0x00	; 0
     ab0:	08 c0       	rjmp	.+16     	; 0xac2 <Pipe_ConfigurePipe+0x5e>
			UPCFG2XTemp = 0;
			UPIENXTemp  = 0;
		}
		else
		{
			UPCFG0XTemp = UPCFG0X;
     ab2:	50 91 aa 00 	lds	r21, 0x00AA
			UPCFG1XTemp = UPCFG1X;
     ab6:	90 91 ab 00 	lds	r25, 0x00AB
			UPCFG2XTemp = UPCFG2X;
     aba:	40 91 ad 00 	lds	r20, 0x00AD
			UPIENXTemp  = UPIENX;
     abe:	20 91 ae 00 	lds	r18, 0x00AE
		}

		if (!(UPCFG1XTemp & (1 << ALLOC)))
     ac2:	91 ff       	sbrs	r25, 1
     ac4:	22 c0       	rjmp	.+68     	; 0xb0a <Pipe_ConfigurePipe+0xa6>
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     ac6:	80 91 a9 00 	lds	r24, 0x00A9
     aca:	8e 7f       	andi	r24, 0xFE	; 254
     acc:	80 93 a9 00 	sts	0x00A9, r24
		  continue;
		  
		Pipe_DisablePipe();
		UPCFG1X &= ~(1 << ALLOC);
     ad0:	80 91 ab 00 	lds	r24, 0x00AB
     ad4:	8d 7f       	andi	r24, 0xFD	; 253
     ad6:	80 93 ab 00 	sts	0x00AB, r24
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
     ada:	80 91 a9 00 	lds	r24, 0x00A9
     ade:	81 60       	ori	r24, 0x01	; 1
     ae0:	80 93 a9 00 	sts	0x00A9, r24

		Pipe_EnablePipe();
		UPCFG0X = UPCFG0XTemp;
     ae4:	50 93 aa 00 	sts	0x00AA, r21
		UPCFG1X = UPCFG1XTemp;
     ae8:	90 93 ab 00 	sts	0x00AB, r25
		UPCFG2X = UPCFG2XTemp;
     aec:	40 93 ad 00 	sts	0x00AD, r20
		UPIENX  = UPIENXTemp;
     af0:	20 93 ae 00 	sts	0x00AE, r18

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
     af4:	80 91 a9 00 	lds	r24, 0x00A9
     af8:	80 62       	ori	r24, 0x20	; 32
     afa:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     afe:	80 91 ac 00 	lds	r24, 0x00AC

		Pipe_SetInfiniteINRequests();
	
		if (!(Pipe_IsConfigured()))
     b02:	87 fd       	sbrc	r24, 7
     b04:	02 c0       	rjmp	.+4      	; 0xb0a <Pipe_ConfigurePipe+0xa6>
     b06:	80 e0       	ldi	r24, 0x00	; 0
     b08:	07 c0       	rjmp	.+14     	; 0xb18 <Pipe_ConfigurePipe+0xb4>

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else	
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
     b0a:	3f 5f       	subi	r19, 0xFF	; 255
     b0c:	37 30       	cpi	r19, 0x07	; 7
     b0e:	08 f4       	brcc	.+2      	; 0xb12 <Pipe_ConfigurePipe+0xae>
     b10:	b8 cf       	rjmp	.-144    	; 0xa82 <Pipe_ConfigurePipe+0x1e>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     b12:	e0 93 a7 00 	sts	0x00A7, r30
     b16:	81 e0       	ldi	r24, 0x01	; 1
	}
		
	Pipe_SelectPipe(Number);	
	return true;
#endif
}
     b18:	1f 91       	pop	r17
     b1a:	0f 91       	pop	r16
     b1c:	ef 90       	pop	r14
     b1e:	08 95       	ret

00000b20 <Pipe_ClearPipes>:

void Pipe_ClearPipes(void)
{
	UPINT = 0;
     b20:	10 92 f8 00 	sts	0x00F8, r1
     b24:	90 e0       	ldi	r25, 0x00	; 0
     b26:	90 93 a7 00 	sts	0x00A7, r25

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
     b2a:	10 92 ae 00 	sts	0x00AE, r1
		UPINTX  = 0;
     b2e:	10 92 a6 00 	sts	0x00A6, r1
		UPCFG1X = 0;
     b32:	10 92 ab 00 	sts	0x00AB, r1
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     b36:	80 91 a9 00 	lds	r24, 0x00A9
     b3a:	8e 7f       	andi	r24, 0xFE	; 254
     b3c:	80 93 a9 00 	sts	0x00A9, r24

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     b40:	9f 5f       	subi	r25, 0xFF	; 255
     b42:	97 30       	cpi	r25, 0x07	; 7
     b44:	81 f7       	brne	.-32     	; 0xb26 <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
     b46:	08 95       	ret

00000b48 <Pipe_IsEndpointBound>:

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
     b48:	48 2f       	mov	r20, r24
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
     b4a:	30 91 a7 00 	lds	r19, 0x00A7
     b4e:	20 e0       	ldi	r18, 0x00	; 0
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     b50:	20 93 a7 00 	sts	0x00A7, r18
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     b54:	80 91 ac 00 	lds	r24, 0x00AC

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
	{
		Pipe_SelectPipe(PNum);

		if (!(Pipe_IsConfigured()))
     b58:	87 ff       	sbrs	r24, 7
     b5a:	10 c0       	rjmp	.+32     	; 0xb7c <Pipe_IsEndpointBound+0x34>
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				return (((UPCFG0X >> PEPNUM0) & PIPE_EPNUM_MASK) |
     b5c:	90 91 aa 00 	lds	r25, 0x00AA
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
     b60:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				return (((UPCFG0X >> PEPNUM0) & PIPE_EPNUM_MASK) |
     b64:	80 73       	andi	r24, 0x30	; 48
     b66:	80 31       	cpi	r24, 0x10	; 16
     b68:	11 f0       	breq	.+4      	; 0xb6e <Pipe_IsEndpointBound+0x26>
     b6a:	80 e0       	ldi	r24, 0x00	; 0
     b6c:	01 c0       	rjmp	.+2      	; 0xb70 <Pipe_IsEndpointBound+0x28>
     b6e:	80 e8       	ldi	r24, 0x80	; 128
		  continue;

		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
     b70:	9f 70       	andi	r25, 0x0F	; 15
     b72:	89 2b       	or	r24, r25
     b74:	84 17       	cp	r24, r20
     b76:	11 f4       	brne	.+4      	; 0xb7c <Pipe_IsEndpointBound+0x34>
     b78:	81 e0       	ldi	r24, 0x01	; 1
     b7a:	08 95       	ret

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
	uint8_t PrevPipeNumber = Pipe_GetCurrentPipe();

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     b7c:	2f 5f       	subi	r18, 0xFF	; 255
     b7e:	27 30       	cpi	r18, 0x07	; 7
     b80:	39 f7       	brne	.-50     	; 0xb50 <Pipe_IsEndpointBound+0x8>
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
     b82:	37 70       	andi	r19, 0x07	; 7
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     b84:	30 93 a7 00 	sts	0x00A7, r19
     b88:	80 e0       	ldi	r24, 0x00	; 0
		  return true;
	}

	Pipe_SelectPipe(PrevPipeNumber);
	return false;
}
     b8a:	08 95       	ret

00000b8c <Pipe_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
     b8c:	40 91 a2 00 	lds	r20, 0x00A2
     b90:	50 91 a3 00 	lds	r21, 0x00A3
     b94:	24 e6       	ldi	r18, 0x64	; 100
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
     b96:	80 91 aa 00 	lds	r24, 0x00AA

	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
     b9a:	80 73       	andi	r24, 0x30	; 48
     b9c:	80 31       	cpi	r24, 0x10	; 16
     b9e:	29 f4       	brne	.+10     	; 0xbaa <Pipe_WaitUntilReady+0x1e>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     ba0:	80 91 a6 00 	lds	r24, 0x00A6
		{
			if (Pipe_IsINReceived())
     ba4:	80 ff       	sbrs	r24, 0
     ba6:	05 c0       	rjmp	.+10     	; 0xbb2 <Pipe_WaitUntilReady+0x26>
     ba8:	1e c0       	rjmp	.+60     	; 0xbe6 <Pipe_WaitUntilReady+0x5a>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     baa:	80 91 a6 00 	lds	r24, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
     bae:	82 fd       	sbrc	r24, 2
     bb0:	1a c0       	rjmp	.+52     	; 0xbe6 <Pipe_WaitUntilReady+0x5a>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     bb2:	80 91 a6 00 	lds	r24, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
     bb6:	81 ff       	sbrs	r24, 1
     bb8:	02 c0       	rjmp	.+4      	; 0xbbe <Pipe_WaitUntilReady+0x32>
     bba:	81 e0       	ldi	r24, 0x01	; 1
     bbc:	08 95       	ret
		  return PIPE_READYWAIT_PipeStalled;
		else if (USB_HostState == HOST_STATE_Unattached)
     bbe:	80 91 41 05 	lds	r24, 0x0541
     bc2:	81 30       	cpi	r24, 0x01	; 1
     bc4:	11 f4       	brne	.+4      	; 0xbca <Pipe_WaitUntilReady+0x3e>
     bc6:	82 e0       	ldi	r24, 0x02	; 2
     bc8:	08 95       	ret
     bca:	80 91 a2 00 	lds	r24, 0x00A2
     bce:	90 91 a3 00 	lds	r25, 0x00A3
		  return PIPE_READYWAIT_DeviceDisconnected;

		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     bd2:	84 17       	cp	r24, r20
     bd4:	95 07       	cpc	r25, r21
     bd6:	f9 f2       	breq	.-66     	; 0xb96 <Pipe_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     bd8:	22 23       	and	r18, r18
     bda:	11 f4       	brne	.+4      	; 0xbe0 <Pipe_WaitUntilReady+0x54>
     bdc:	83 e0       	ldi	r24, 0x03	; 3
     bde:	08 95       	ret
     be0:	21 50       	subi	r18, 0x01	; 1
     be2:	ac 01       	movw	r20, r24
     be4:	d8 cf       	rjmp	.-80     	; 0xb96 <Pipe_WaitUntilReady+0xa>
     be6:	80 e0       	ldi	r24, 0x00	; 0
			  return PIPE_READYWAIT_Timeout;
		}
	}
}
     be8:	08 95       	ret

00000bea <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     bea:	70 d0       	rcall	.+224    	; 0xccc <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     bec:	77 d0       	rcall	.+238    	; 0xcdc <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     bee:	80 91 d8 00 	lds	r24, 0x00D8
     bf2:	8f 77       	andi	r24, 0x7F	; 127
     bf4:	80 93 d8 00 	sts	0x00D8, r24
				USBCON |=  (1 << USBE);
     bf8:	80 91 d8 00 	lds	r24, 0x00D8
     bfc:	80 68       	ori	r24, 0x80	; 128
     bfe:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
     c02:	80 91 d8 00 	lds	r24, 0x00D8
     c06:	8f 7d       	andi	r24, 0xDF	; 223
     c08:	80 93 d8 00 	sts	0x00D8, r24
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
     c0c:	80 91 d7 00 	lds	r24, 0x00D7
     c10:	8f 77       	andi	r24, 0x7F	; 127
     c12:	80 93 d7 00 	sts	0x00D7, r24

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     c16:	8c e0       	ldi	r24, 0x0C	; 12
     c18:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     c1a:	8e e0       	ldi	r24, 0x0E	; 14
     c1c:	89 bd       	out	0x29, r24	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_CAN_BE_HOST)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));		
     c1e:	09 b4       	in	r0, 0x29	; 41
     c20:	00 fe       	sbrs	r0, 0
     c22:	fd cf       	rjmp	.-6      	; 0xc1e <USB_ResetInterface+0x34>
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState                = HOST_STATE_Unattached;
     c24:	81 e0       	ldi	r24, 0x01	; 1
     c26:	80 93 41 05 	sts	0x0541, r24
	USB_Host_ConfigurationNumber = 0;
     c2a:	10 92 37 05 	sts	0x0537, r1
	USB_Host_ControlPipeSize     = PIPE_CONTROLPIPE_DEFAULT_SIZE;
     c2e:	80 e4       	ldi	r24, 0x40	; 64
     c30:	80 93 32 01 	sts	0x0132, r24
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
     c34:	80 91 d8 00 	lds	r24, 0x00D8
     c38:	80 64       	ori	r24, 0x40	; 64
     c3a:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     c3e:	80 91 dd 00 	lds	r24, 0x00DD
     c42:	81 60       	ori	r24, 0x01	; 1
     c44:	80 93 dd 00 	sts	0x00DD, r24
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
     c48:	80 91 dd 00 	lds	r24, 0x00DD
     c4c:	84 60       	ori	r24, 0x04	; 4
     c4e:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON &= ~(1 << UVCONE);
     c52:	80 91 d7 00 	lds	r24, 0x00D7
     c56:	8f 7e       	andi	r24, 0xEF	; 239
     c58:	80 93 d7 00 	sts	0x00D7, r24

				DDRE   |=  (1 << 7);
     c5c:	6f 9a       	sbi	0x0d, 7	; 13
			}

			static inline void USB_Host_VBUS_Manual_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_On(void)
			{
				PORTE  |=  (1 << 7);
     c5e:	77 9a       	sbi	0x0e, 7	; 14
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN |= (1 << SRPE);						
     c60:	80 91 de 00 	lds	r24, 0x00DE
     c64:	81 60       	ori	r24, 0x01	; 1
     c66:	80 93 de 00 	sts	0x00DE, r24
						break;
					case USB_INT_RSTI:
						UHIEN  |= (1 << RSTE);
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
     c6a:	80 91 de 00 	lds	r24, 0x00DE
     c6e:	84 60       	ori	r24, 0x04	; 4
     c70:	80 93 de 00 	sts	0x00DE, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     c74:	80 91 e0 00 	lds	r24, 0x00E0
     c78:	8e 7f       	andi	r24, 0xFE	; 254
     c7a:	80 93 e0 00 	sts	0x00E0, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     c7e:	80 91 d8 00 	lds	r24, 0x00D8
     c82:	80 61       	ori	r24, 0x10	; 16
     c84:	80 93 d8 00 	sts	0x00D8, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     c88:	08 95       	ret

00000c8a <USB_Init>:

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
     c8a:	e7 ed       	ldi	r30, 0xD7	; 215
     c8c:	f0 e0       	ldi	r31, 0x00	; 0
     c8e:	80 81       	ld	r24, Z
     c90:	81 60       	ori	r24, 0x01	; 1
     c92:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     c94:	81 e0       	ldi	r24, 0x01	; 1
     c96:	80 93 38 05 	sts	0x0538, r24

	USB_ResetInterface();
}
     c9a:	a7 cf       	rjmp	.-178    	; 0xbea <USB_ResetInterface>

00000c9c <USB_Disable>:

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
     c9c:	17 d0       	rcall	.+46     	; 0xccc <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     c9e:	1e d0       	rcall	.+60     	; 0xcdc <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
     ca0:	e0 ee       	ldi	r30, 0xE0	; 224
     ca2:	f0 e0       	ldi	r31, 0x00	; 0
     ca4:	80 81       	ld	r24, Z
     ca6:	81 60       	ori	r24, 0x01	; 1
     ca8:	80 83       	st	Z, r24
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON  &= ~(1 << USBE);
     caa:	a8 ed       	ldi	r26, 0xD8	; 216
     cac:	b0 e0       	ldi	r27, 0x00	; 0
     cae:	8c 91       	ld	r24, X
     cb0:	8f 77       	andi	r24, 0x7F	; 127
     cb2:	8c 93       	st	X, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     cb4:	19 bc       	out	0x29, r1	; 41

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  &= ~(1 << UVREGE);
     cb6:	e7 ed       	ldi	r30, 0xD7	; 215
     cb8:	f0 e0       	ldi	r31, 0x00	; 0
     cba:	80 81       	ld	r24, Z
     cbc:	8e 7f       	andi	r24, 0xFE	; 254
     cbe:	80 83       	st	Z, r24
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON  &= ~(1 << OTGPADE);
     cc0:	8c 91       	ld	r24, X
     cc2:	8f 7e       	andi	r24, 0xEF	; 239
     cc4:	8c 93       	st	X, r24

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
     cc6:	10 92 38 05 	sts	0x0538, r1
}
     cca:	08 95       	ret

00000ccc <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     ccc:	e8 ed       	ldi	r30, 0xD8	; 216
     cce:	f0 e0       	ldi	r31, 0x00	; 0
     cd0:	80 81       	ld	r24, Z
     cd2:	8c 7f       	andi	r24, 0xFC	; 252
     cd4:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
     cd6:	10 92 a0 00 	sts	0x00A0, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
	#endif
}
     cda:	08 95       	ret

00000cdc <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     cdc:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_BOTH)
	OTGINT = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
     ce0:	10 92 9f 00 	sts	0x009F, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
	#endif
}
     ce4:	08 95       	ret

00000ce6 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
     ce6:	1f 92       	push	r1
     ce8:	0f 92       	push	r0
     cea:	0f b6       	in	r0, 0x3f	; 63
     cec:	0f 92       	push	r0
     cee:	0b b6       	in	r0, 0x3b	; 59
     cf0:	0f 92       	push	r0
     cf2:	11 24       	eor	r1, r1
     cf4:	2f 93       	push	r18
     cf6:	3f 93       	push	r19
     cf8:	4f 93       	push	r20
     cfa:	5f 93       	push	r21
     cfc:	6f 93       	push	r22
     cfe:	7f 93       	push	r23
     d00:	8f 93       	push	r24
     d02:	9f 93       	push	r25
     d04:	af 93       	push	r26
     d06:	bf 93       	push	r27
     d08:	ef 93       	push	r30
     d0a:	ff 93       	push	r31
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     d0c:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	#if defined(USB_CAN_BE_HOST)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
     d10:	85 ff       	sbrs	r24, 5
     d12:	0a c0       	rjmp	.+20     	; 0xd28 <__vector_10+0x42>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     d14:	80 91 a0 00 	lds	r24, 0x00A0
     d18:	85 ff       	sbrs	r24, 5
     d1a:	06 c0       	rjmp	.+12     	; 0xd28 <__vector_10+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     d1c:	80 91 9f 00 	lds	r24, 0x009F
     d20:	8f 7d       	andi	r24, 0xDF	; 223
     d22:	80 93 9f 00 	sts	0x009F, r24
	{
		USB_INT_Clear(USB_INT_HSOFI);

		EVENT_USB_Host_StartOfFrame();
     d26:	af d1       	rcall	.+862    	; 0x1086 <USB_Event_Stub>
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
     d28:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
     d2c:	81 ff       	sbrs	r24, 1
     d2e:	15 c0       	rjmp	.+42     	; 0xd5a <__vector_10+0x74>
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
					case USB_INT_DCONNI:
						return (UHIEN  & (1 << DCONNE));
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
     d30:	80 91 a0 00 	lds	r24, 0x00A0
     d34:	81 ff       	sbrs	r24, 1
     d36:	11 c0       	rjmp	.+34     	; 0xd5a <__vector_10+0x74>
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     d38:	80 91 9f 00 	lds	r24, 0x009F
     d3c:	8d 7f       	andi	r24, 0xFD	; 253
     d3e:	80 93 9f 00 	sts	0x009F, r24
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     d42:	80 91 9f 00 	lds	r24, 0x009F
     d46:	8e 7f       	andi	r24, 0xFE	; 254
     d48:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     d4c:	80 91 a0 00 	lds	r24, 0x00A0
     d50:	8d 7f       	andi	r24, 0xFD	; 253
     d52:	80 93 a0 00 	sts	0x00A0, r24
	{
		USB_INT_Clear(USB_INT_DDISCI);
		USB_INT_Clear(USB_INT_DCONNI);
		USB_INT_Disable(USB_INT_DDISCI);

		EVENT_USB_Host_DeviceUnattached();
     d56:	22 db       	rcall	.-2492   	; 0x39c <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     d58:	48 df       	rcall	.-368    	; 0xbea <USB_ResetInterface>
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
     d5a:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
     d5e:	81 ff       	sbrs	r24, 1
     d60:	15 c0       	rjmp	.+42     	; 0xd8c <__vector_10+0xa6>
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
     d62:	80 91 de 00 	lds	r24, 0x00DE
     d66:	81 ff       	sbrs	r24, 1
     d68:	11 c0       	rjmp	.+34     	; 0xd8c <__vector_10+0xa6>
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     d6a:	80 91 df 00 	lds	r24, 0x00DF
     d6e:	8d 7f       	andi	r24, 0xFD	; 253
     d70:	80 93 df 00 	sts	0x00DF, r24
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
     d74:	77 98       	cbi	0x0e, 7	; 14
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     d76:	80 91 dd 00 	lds	r24, 0x00DD
     d7a:	81 60       	ori	r24, 0x01	; 1
     d7c:	80 93 dd 00 	sts	0x00DD, r24
		USB_INT_Clear(USB_INT_VBERRI);

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
     d80:	80 e0       	ldi	r24, 0x00	; 0
     d82:	ef da       	rcall	.-2594   	; 0x362 <EVENT_USB_Host_HostError>
		EVENT_USB_Host_DeviceUnattached();
     d84:	0b db       	rcall	.-2538   	; 0x39c <EVENT_USB_Host_DeviceUnattached>

		USB_HostState = HOST_STATE_Unattached;
     d86:	81 e0       	ldi	r24, 0x01	; 1
     d88:	80 93 41 05 	sts	0x0541, r24
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
					case USB_INT_SRPI:
						return (OTGINT & (1 << SRPI));
     d8c:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
     d90:	80 ff       	sbrs	r24, 0
     d92:	17 c0       	rjmp	.+46     	; 0xdc2 <__vector_10+0xdc>
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
					case USB_INT_SRPI:
						return (OTGIEN & (1 << SRPE));
     d94:	80 91 de 00 	lds	r24, 0x00DE
     d98:	80 ff       	sbrs	r24, 0
     d9a:	13 c0       	rjmp	.+38     	; 0xdc2 <__vector_10+0xdc>
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
						break;
					case USB_INT_SRPI:
						OTGINT &= ~(1 << SRPI);
     d9c:	80 91 df 00 	lds	r24, 0x00DF
     da0:	8e 7f       	andi	r24, 0xFE	; 254
     da2:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_VBERRI:
						OTGIEN &= ~(1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN &= ~(1 << SRPE);						
     da6:	80 91 de 00 	lds	r24, 0x00DE
     daa:	8e 7f       	andi	r24, 0xFE	; 254
     dac:	80 93 de 00 	sts	0x00DE, r24
	{
		USB_INT_Clear(USB_INT_SRPI);
		USB_INT_Disable(USB_INT_SRPI);

		EVENT_USB_Host_DeviceAttached();
     db0:	fe da       	rcall	.-2564   	; 0x3ae <EVENT_USB_Host_DeviceAttached>
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     db2:	80 91 a0 00 	lds	r24, 0x00A0
     db6:	82 60       	ori	r24, 0x02	; 2
     db8:	80 93 a0 00 	sts	0x00A0, r24

		USB_INT_Enable(USB_INT_DDISCI);

		USB_HostState = HOST_STATE_Powered;
     dbc:	82 e0       	ldi	r24, 0x02	; 2
     dbe:	80 93 41 05 	sts	0x0541, r24
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
     dc2:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
     dc6:	82 ff       	sbrs	r24, 2
     dc8:	0e c0       	rjmp	.+28     	; 0xde6 <__vector_10+0x100>
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
     dca:	80 91 de 00 	lds	r24, 0x00DE
     dce:	82 ff       	sbrs	r24, 2
     dd0:	0a c0       	rjmp	.+20     	; 0xde6 <__vector_10+0x100>
						break;
					case USB_INT_RSTI:
						UHINT  &= ~(1 << RSTI);
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
     dd2:	80 91 df 00 	lds	r24, 0x00DF
     dd6:	8b 7f       	andi	r24, 0xFB	; 251
     dd8:	80 93 df 00 	sts	0x00DF, r24
	{
		USB_INT_Clear(USB_INT_BCERRI);

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
     ddc:	82 e0       	ldi	r24, 0x02	; 2
     dde:	60 e0       	ldi	r22, 0x00	; 0
     de0:	94 da       	rcall	.-2776   	; 0x30a <EVENT_USB_Host_DeviceEnumerationFailed>
		EVENT_USB_Host_DeviceUnattached();
     de2:	dc da       	rcall	.-2632   	; 0x39c <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     de4:	02 df       	rcall	.-508    	; 0xbea <USB_ResetInterface>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     de6:	ff 91       	pop	r31
     de8:	ef 91       	pop	r30
     dea:	bf 91       	pop	r27
     dec:	af 91       	pop	r26
     dee:	9f 91       	pop	r25
     df0:	8f 91       	pop	r24
     df2:	7f 91       	pop	r23
     df4:	6f 91       	pop	r22
     df6:	5f 91       	pop	r21
     df8:	4f 91       	pop	r20
     dfa:	3f 91       	pop	r19
     dfc:	2f 91       	pop	r18
     dfe:	0f 90       	pop	r0
     e00:	0b be       	out	0x3b, r0	; 59
     e02:	0f 90       	pop	r0
     e04:	0f be       	out	0x3f, r0	; 63
     e06:	0f 90       	pop	r0
     e08:	1f 90       	pop	r1
     e0a:	18 95       	reti

00000e0c <Pipe_Read_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     e0c:	bf 92       	push	r11
     e0e:	cf 92       	push	r12
     e10:	df 92       	push	r13
     e12:	ef 92       	push	r14
     e14:	ff 92       	push	r15
     e16:	0f 93       	push	r16
     e18:	1f 93       	push	r17
     e1a:	cf 93       	push	r28
     e1c:	df 93       	push	r29
     e1e:	18 2f       	mov	r17, r24
     e20:	09 2f       	mov	r16, r25
     e22:	7b 01       	movw	r14, r22
     e24:	6a 01       	movw	r12, r20
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     e26:	80 91 aa 00 	lds	r24, 0x00AA
     e2a:	8f 7c       	andi	r24, 0xCF	; 207
     e2c:	80 61       	ori	r24, 0x10	; 16
     e2e:	80 93 aa 00 	sts	0x00AA, r24
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
     e32:	ac de       	rcall	.-680    	; 0xb8c <Pipe_WaitUntilReady>
     e34:	b8 2e       	mov	r11, r24
     e36:	88 23       	and	r24, r24
     e38:	a9 f5       	brne	.+106    	; 0xea4 <Pipe_Read_Stream_LE+0x98>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     e3a:	81 2f       	mov	r24, r17
     e3c:	90 2f       	mov	r25, r16
     e3e:	9c 01       	movw	r18, r24
     e40:	e9 01       	movw	r28, r18
	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
     e42:	c1 14       	cp	r12, r1
     e44:	d1 04       	cpc	r13, r1
     e46:	39 f0       	breq	.+14     	; 0xe56 <Pipe_Read_Stream_LE+0x4a>
	{
		Length -= *BytesProcessed;
     e48:	f6 01       	movw	r30, r12
     e4a:	80 81       	ld	r24, Z
     e4c:	91 81       	ldd	r25, Z+1	; 0x01
     e4e:	e8 1a       	sub	r14, r24
     e50:	f9 0a       	sbc	r15, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     e52:	c8 0f       	add	r28, r24
     e54:	d9 1f       	adc	r29, r25
     e56:	00 e0       	ldi	r16, 0x00	; 0
     e58:	10 e0       	ldi	r17, 0x00	; 0
     e5a:	21 c0       	rjmp	.+66     	; 0xe9e <Pipe_Read_Stream_LE+0x92>
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
     e5c:	80 91 a6 00 	lds	r24, 0x00A6
	}
	
	while (Length)
	{
		if (!(Pipe_IsReadWriteAllowed()))
     e60:	85 fd       	sbrc	r24, 5
     e62:	15 c0       	rjmp	.+42     	; 0xe8e <Pipe_Read_Stream_LE+0x82>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     e64:	80 91 a6 00 	lds	r24, 0x00A6
     e68:	8e 77       	andi	r24, 0x7E	; 126
     e6a:	80 93 a6 00 	sts	0x00A6, r24
		{
			TEMPLATE_CLEAR_PIPE();

			if (BytesProcessed != NULL)
     e6e:	c1 14       	cp	r12, r1
     e70:	d1 04       	cpc	r13, r1
     e72:	49 f0       	breq	.+18     	; 0xe86 <Pipe_Read_Stream_LE+0x7a>
			{
				*BytesProcessed += BytesInTransfer;
     e74:	f6 01       	movw	r30, r12
     e76:	80 81       	ld	r24, Z
     e78:	91 81       	ldd	r25, Z+1	; 0x01
     e7a:	80 0f       	add	r24, r16
     e7c:	91 1f       	adc	r25, r17
     e7e:	91 83       	std	Z+1, r25	; 0x01
     e80:	80 83       	st	Z, r24
     e82:	84 e0       	ldi	r24, 0x04	; 4
     e84:	10 c0       	rjmp	.+32     	; 0xea6 <Pipe_Read_Stream_LE+0x9a>
				return PIPE_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
     e86:	82 de       	rcall	.-764    	; 0xb8c <Pipe_WaitUntilReady>
     e88:	88 23       	and	r24, r24
     e8a:	49 f0       	breq	.+18     	; 0xe9e <Pipe_Read_Stream_LE+0x92>
     e8c:	0c c0       	rjmp	.+24     	; 0xea6 <Pipe_Read_Stream_LE+0x9a>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
     e8e:	80 91 af 00 	lds	r24, 0x00AF
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
     e92:	89 93       	st	Y+, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
     e94:	08 94       	sec
     e96:	e1 08       	sbc	r14, r1
     e98:	f1 08       	sbc	r15, r1
			BytesInTransfer++;
     e9a:	0f 5f       	subi	r16, 0xFF	; 255
     e9c:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}
	
	while (Length)
     e9e:	e1 14       	cp	r14, r1
     ea0:	f1 04       	cpc	r15, r1
     ea2:	e1 f6       	brne	.-72     	; 0xe5c <Pipe_Read_Stream_LE+0x50>
     ea4:	8b 2d       	mov	r24, r11
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
     ea6:	df 91       	pop	r29
     ea8:	cf 91       	pop	r28
     eaa:	1f 91       	pop	r17
     eac:	0f 91       	pop	r16
     eae:	ff 90       	pop	r15
     eb0:	ef 90       	pop	r14
     eb2:	df 90       	pop	r13
     eb4:	cf 90       	pop	r12
     eb6:	bf 90       	pop	r11
     eb8:	08 95       	ret

00000eba <Pipe_Discard_Stream>:

#include "PipeStream_AVR8.h"

uint8_t Pipe_Discard_Stream(uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     eba:	df 92       	push	r13
     ebc:	ef 92       	push	r14
     ebe:	ff 92       	push	r15
     ec0:	0f 93       	push	r16
     ec2:	1f 93       	push	r17
     ec4:	cf 93       	push	r28
     ec6:	df 93       	push	r29
     ec8:	8c 01       	movw	r16, r24
     eca:	7b 01       	movw	r14, r22
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     ecc:	80 91 aa 00 	lds	r24, 0x00AA
     ed0:	8f 7c       	andi	r24, 0xCF	; 207
     ed2:	80 61       	ori	r24, 0x10	; 16
     ed4:	80 93 aa 00 	sts	0x00AA, r24
	uint8_t  ErrorCode;
	uint16_t BytesInTransfer = 0;
	
	Pipe_SetPipeToken(PIPE_TOKEN_IN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
     ed8:	59 de       	rcall	.-846    	; 0xb8c <Pipe_WaitUntilReady>
     eda:	d8 2e       	mov	r13, r24
     edc:	88 23       	and	r24, r24
     ede:	61 f5       	brne	.+88     	; 0xf38 <Pipe_Discard_Stream+0x7e>
	  return ErrorCode;

	if (BytesProcessed != NULL)
     ee0:	e1 14       	cp	r14, r1
     ee2:	f1 04       	cpc	r15, r1
     ee4:	29 f0       	breq	.+10     	; 0xef0 <Pipe_Discard_Stream+0x36>
	  Length -= *BytesProcessed;
     ee6:	f7 01       	movw	r30, r14
     ee8:	80 81       	ld	r24, Z
     eea:	91 81       	ldd	r25, Z+1	; 0x01
     eec:	08 1b       	sub	r16, r24
     eee:	19 0b       	sbc	r17, r25
     ef0:	c0 e0       	ldi	r28, 0x00	; 0
     ef2:	d0 e0       	ldi	r29, 0x00	; 0
     ef4:	1e c0       	rjmp	.+60     	; 0xf32 <Pipe_Discard_Stream+0x78>
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
     ef6:	80 91 a6 00 	lds	r24, 0x00A6

	while (Length)
	{
		if (!(Pipe_IsReadWriteAllowed()))
     efa:	85 fd       	sbrc	r24, 5
     efc:	15 c0       	rjmp	.+42     	; 0xf28 <Pipe_Discard_Stream+0x6e>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     efe:	80 91 a6 00 	lds	r24, 0x00A6
     f02:	8e 77       	andi	r24, 0x7E	; 126
     f04:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearIN();
				
			if (BytesProcessed != NULL)
     f08:	e1 14       	cp	r14, r1
     f0a:	f1 04       	cpc	r15, r1
     f0c:	49 f0       	breq	.+18     	; 0xf20 <Pipe_Discard_Stream+0x66>
			{
				*BytesProcessed += BytesInTransfer;
     f0e:	f7 01       	movw	r30, r14
     f10:	80 81       	ld	r24, Z
     f12:	91 81       	ldd	r25, Z+1	; 0x01
     f14:	8c 0f       	add	r24, r28
     f16:	9d 1f       	adc	r25, r29
     f18:	91 83       	std	Z+1, r25	; 0x01
     f1a:	80 83       	st	Z, r24
     f1c:	84 e0       	ldi	r24, 0x04	; 4
     f1e:	0d c0       	rjmp	.+26     	; 0xf3a <Pipe_Discard_Stream+0x80>
				return PIPE_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
     f20:	35 de       	rcall	.-918    	; 0xb8c <Pipe_WaitUntilReady>
     f22:	88 23       	and	r24, r24
     f24:	31 f0       	breq	.+12     	; 0xf32 <Pipe_Discard_Stream+0x78>
     f26:	09 c0       	rjmp	.+18     	; 0xf3a <Pipe_Discard_Stream+0x80>
			static inline void Pipe_Discard_8(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Discard_8(void)
			{
				uint8_t Dummy;

				Dummy = UPDATX;
     f28:	80 91 af 00 	lds	r24, 0x00AF
		}
		else
		{
			Pipe_Discard_8();
			
			Length--;
     f2c:	01 50       	subi	r16, 0x01	; 1
     f2e:	10 40       	sbci	r17, 0x00	; 0
			BytesInTransfer++;
     f30:	21 96       	adiw	r28, 0x01	; 1
	  return ErrorCode;

	if (BytesProcessed != NULL)
	  Length -= *BytesProcessed;

	while (Length)
     f32:	01 15       	cp	r16, r1
     f34:	11 05       	cpc	r17, r1
     f36:	f9 f6       	brne	.-66     	; 0xef6 <Pipe_Discard_Stream+0x3c>
     f38:	8d 2d       	mov	r24, r13
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
     f3a:	df 91       	pop	r29
     f3c:	cf 91       	pop	r28
     f3e:	1f 91       	pop	r17
     f40:	0f 91       	pop	r16
     f42:	ff 90       	pop	r15
     f44:	ef 90       	pop	r14
     f46:	df 90       	pop	r13
     f48:	08 95       	ret

00000f4a <USB_GetNextDescriptorComp>:

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
     f4a:	af 92       	push	r10
     f4c:	bf 92       	push	r11
     f4e:	cf 92       	push	r12
     f50:	df 92       	push	r13
     f52:	ef 92       	push	r14
     f54:	ff 92       	push	r15
     f56:	0f 93       	push	r16
     f58:	1f 93       	push	r17
     f5a:	cf 93       	push	r28
     f5c:	df 93       	push	r29
     f5e:	7c 01       	movw	r14, r24
     f60:	eb 01       	movw	r28, r22
     f62:	6a 01       	movw	r12, r20
     f64:	24 c0       	rjmp	.+72     	; 0xfae <USB_GetNextDescriptorComp+0x64>
	uint8_t ErrorCode;

	while (*BytesRem)
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
     f66:	e8 81       	ld	r30, Y
     f68:	f9 81       	ldd	r31, Y+1	; 0x01
     f6a:	be 2e       	mov	r11, r30
     f6c:	af 2e       	mov	r10, r31
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc)
			{
				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;
     f6e:	80 81       	ld	r24, Z
     f70:	90 e0       	ldi	r25, 0x00	; 0
     f72:	98 01       	movw	r18, r16
     f74:	80 17       	cp	r24, r16
     f76:	91 07       	cpc	r25, r17
     f78:	08 f4       	brcc	.+2      	; 0xf7c <USB_GetNextDescriptorComp+0x32>
     f7a:	9c 01       	movw	r18, r24
				
				if (*BytesRem < CurrDescriptorSize)
				  CurrDescriptorSize = *BytesRem;

				*CurrConfigLoc  = (void*)((uintptr_t)*CurrConfigLoc + CurrDescriptorSize);
     f7c:	e2 0f       	add	r30, r18
     f7e:	f3 1f       	adc	r31, r19
     f80:	f9 83       	std	Y+1, r31	; 0x01
     f82:	e8 83       	st	Y, r30
				*BytesRem      -= CurrDescriptorSize;
     f84:	f7 01       	movw	r30, r14
     f86:	80 81       	ld	r24, Z
     f88:	91 81       	ldd	r25, Z+1	; 0x01
     f8a:	82 1b       	sub	r24, r18
     f8c:	93 0b       	sbc	r25, r19
     f8e:	91 83       	std	Z+1, r25	; 0x01
     f90:	80 83       	st	Z, r24
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
     f92:	88 81       	ld	r24, Y
     f94:	99 81       	ldd	r25, Y+1	; 0x01
     f96:	f6 01       	movw	r30, r12
     f98:	09 95       	icall
     f9a:	82 30       	cpi	r24, 0x02	; 2
     f9c:	41 f0       	breq	.+16     	; 0xfae <USB_GetNextDescriptorComp+0x64>
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
     f9e:	81 30       	cpi	r24, 0x01	; 1
     fa0:	69 f4       	brne	.+26     	; 0xfbc <USB_GetNextDescriptorComp+0x72>
			{
				*CurrConfigLoc = PrevDescLoc;
     fa2:	b8 82       	st	Y, r11
     fa4:	a9 82       	std	Y+1, r10	; 0x01
				*BytesRem      = PrevBytesRem;
     fa6:	f7 01       	movw	r30, r14
     fa8:	11 83       	std	Z+1, r17	; 0x01
     faa:	00 83       	st	Z, r16
     fac:	07 c0       	rjmp	.+14     	; 0xfbc <USB_GetNextDescriptorComp+0x72>
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
	uint8_t ErrorCode;

	while (*BytesRem)
     fae:	f7 01       	movw	r30, r14
     fb0:	00 81       	ld	r16, Z
     fb2:	11 81       	ldd	r17, Z+1	; 0x01
     fb4:	01 15       	cp	r16, r1
     fb6:	11 05       	cpc	r17, r1
     fb8:	b1 f6       	brne	.-84     	; 0xf66 <USB_GetNextDescriptorComp+0x1c>
     fba:	82 e0       	ldi	r24, 0x02	; 2
			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
}
     fbc:	df 91       	pop	r29
     fbe:	cf 91       	pop	r28
     fc0:	1f 91       	pop	r17
     fc2:	0f 91       	pop	r16
     fc4:	ff 90       	pop	r15
     fc6:	ef 90       	pop	r14
     fc8:	df 90       	pop	r13
     fca:	cf 90       	pop	r12
     fcc:	bf 90       	pop	r11
     fce:	af 90       	pop	r10
     fd0:	08 95       	ret

00000fd2 <USB_Host_GetDeviceConfigDescriptor>:
#if defined(USB_CAN_BE_HOST)
uint8_t USB_Host_GetDeviceConfigDescriptor(const uint8_t ConfigNumber,
                                           uint16_t* const ConfigSizePtr,
                                           void* const BufferPtr,
                                           const uint16_t BufferSize)
{
     fd2:	cf 92       	push	r12
     fd4:	df 92       	push	r13
     fd6:	ef 92       	push	r14
     fd8:	ff 92       	push	r15
     fda:	0f 93       	push	r16
     fdc:	1f 93       	push	r17
     fde:	df 93       	push	r29
     fe0:	cf 93       	push	r28
     fe2:	cd b7       	in	r28, 0x3d	; 61
     fe4:	de b7       	in	r29, 0x3e	; 62
     fe6:	29 97       	sbiw	r28, 0x09	; 9
     fe8:	0f b6       	in	r0, 0x3f	; 63
     fea:	f8 94       	cli
     fec:	de bf       	out	0x3e, r29	; 62
     fee:	0f be       	out	0x3f, r0	; 63
     ff0:	cd bf       	out	0x3d, r28	; 61
     ff2:	6b 01       	movw	r12, r22
     ff4:	8a 01       	movw	r16, r20
     ff6:	79 01       	movw	r14, r18
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
     ff8:	90 e8       	ldi	r25, 0x80	; 128
     ffa:	90 93 39 05 	sts	0x0539, r25
     ffe:	96 e0       	ldi	r25, 0x06	; 6
    1000:	90 93 3a 05 	sts	0x053A, r25
    1004:	90 e0       	ldi	r25, 0x00	; 0
    1006:	01 97       	sbiw	r24, 0x01	; 1
    1008:	92 60       	ori	r25, 0x02	; 2
    100a:	90 93 3c 05 	sts	0x053C, r25
    100e:	80 93 3b 05 	sts	0x053B, r24
    1012:	10 92 3e 05 	sts	0x053E, r1
    1016:	10 92 3d 05 	sts	0x053D, r1
    101a:	89 e0       	ldi	r24, 0x09	; 9
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	90 93 40 05 	sts	0x0540, r25
    1022:	80 93 3f 05 	sts	0x053F, r24
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1026:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = sizeof(USB_Descriptor_Configuration_Header_t),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(ConfigHeader)) != HOST_SENDCONTROL_Successful)
    102a:	ce 01       	movw	r24, r28
    102c:	01 96       	adiw	r24, 0x01	; 1
    102e:	55 d0       	rcall	.+170    	; 0x10da <USB_Host_SendControlRequest>
    1030:	28 2f       	mov	r18, r24
    1032:	88 23       	and	r24, r24
    1034:	c1 f4       	brne	.+48     	; 0x1066 <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);
    1036:	8b 81       	ldd	r24, Y+3	; 0x03
    1038:	9c 81       	ldd	r25, Y+4	; 0x04
    103a:	f6 01       	movw	r30, r12
    103c:	91 83       	std	Z+1, r25	; 0x01
    103e:	80 83       	st	Z, r24

	if (*ConfigSizePtr > BufferSize)
    1040:	e8 16       	cp	r14, r24
    1042:	f9 06       	cpc	r15, r25
    1044:	10 f4       	brcc	.+4      	; 0x104a <USB_Host_GetDeviceConfigDescriptor+0x78>
    1046:	25 e0       	ldi	r18, 0x05	; 5
    1048:	0e c0       	rjmp	.+28     	; 0x1066 <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return HOST_GETCONFIG_BuffOverflow;

	USB_ControlRequest.wLength = *ConfigSizePtr;
    104a:	90 93 40 05 	sts	0x0540, r25
    104e:	80 93 3f 05 	sts	0x053F, r24

	if ((ErrorCode = USB_Host_SendControlRequest(BufferPtr)) != HOST_SENDCONTROL_Successful)
    1052:	c8 01       	movw	r24, r16
    1054:	42 d0       	rcall	.+132    	; 0x10da <USB_Host_SendControlRequest>
    1056:	28 2f       	mov	r18, r24
    1058:	88 23       	and	r24, r24
    105a:	29 f4       	brne	.+10     	; 0x1066 <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
    105c:	f8 01       	movw	r30, r16
    105e:	81 81       	ldd	r24, Z+1	; 0x01
    1060:	82 30       	cpi	r24, 0x02	; 2
    1062:	09 f0       	breq	.+2      	; 0x1066 <USB_Host_GetDeviceConfigDescriptor+0x94>
    1064:	26 e0       	ldi	r18, 0x06	; 6
	  return HOST_GETCONFIG_InvalidData;

	return HOST_GETCONFIG_Successful;
}
    1066:	82 2f       	mov	r24, r18
    1068:	29 96       	adiw	r28, 0x09	; 9
    106a:	0f b6       	in	r0, 0x3f	; 63
    106c:	f8 94       	cli
    106e:	de bf       	out	0x3e, r29	; 62
    1070:	0f be       	out	0x3f, r0	; 63
    1072:	cd bf       	out	0x3d, r28	; 61
    1074:	cf 91       	pop	r28
    1076:	df 91       	pop	r29
    1078:	1f 91       	pop	r17
    107a:	0f 91       	pop	r16
    107c:	ff 90       	pop	r15
    107e:	ef 90       	pop	r14
    1080:	df 90       	pop	r13
    1082:	cf 90       	pop	r12
    1084:	08 95       	ret

00001086 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
    1086:	08 95       	ret

00001088 <USB_Host_WaitForIOS>:

	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
    1088:	1f 93       	push	r17
    108a:	cf 93       	push	r28
    108c:	df 93       	push	r29
    108e:	18 2f       	mov	r17, r24
    1090:	c8 ee       	ldi	r28, 0xE8	; 232
    1092:	d3 e0       	ldi	r29, 0x03	; 3
    1094:	09 c0       	rjmp	.+18     	; 0x10a8 <USB_Host_WaitForIOS+0x20>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1096:	81 e0       	ldi	r24, 0x01	; 1
    1098:	1d db       	rcall	.-2502   	; 0x6d4 <USB_Host_WaitMS>
    109a:	88 23       	and	r24, r24
    109c:	d1 f4       	brne	.+52     	; 0x10d2 <USB_Host_WaitForIOS+0x4a>
		  return ErrorCode;

		if (!(TimeoutCounter--))
    109e:	20 97       	sbiw	r28, 0x00	; 0
    10a0:	11 f4       	brne	.+4      	; 0x10a6 <USB_Host_WaitForIOS+0x1e>
    10a2:	84 e0       	ldi	r24, 0x04	; 4
    10a4:	16 c0       	rjmp	.+44     	; 0x10d2 <USB_Host_WaitForIOS+0x4a>
    10a6:	21 97       	sbiw	r28, 0x01	; 1
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    10a8:	11 23       	and	r17, r17
    10aa:	29 f4       	brne	.+10     	; 0x10b6 <USB_Host_WaitForIOS+0x2e>
			 *  \return Boolean \c true if the current pipe is ready for a SETUP packet, \c false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
    10ac:	80 91 a6 00 	lds	r24, 0x00A6
    10b0:	83 ff       	sbrs	r24, 3
    10b2:	f1 cf       	rjmp	.-30     	; 0x1096 <USB_Host_WaitForIOS+0xe>
    10b4:	0d c0       	rjmp	.+26     	; 0x10d0 <USB_Host_WaitForIOS+0x48>
    10b6:	11 30       	cpi	r17, 0x01	; 1
    10b8:	29 f4       	brne	.+10     	; 0x10c4 <USB_Host_WaitForIOS+0x3c>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    10ba:	80 91 a6 00 	lds	r24, 0x00A6
    10be:	80 ff       	sbrs	r24, 0
    10c0:	ea cf       	rjmp	.-44     	; 0x1096 <USB_Host_WaitForIOS+0xe>
    10c2:	06 c0       	rjmp	.+12     	; 0x10d0 <USB_Host_WaitForIOS+0x48>
    10c4:	12 30       	cpi	r17, 0x02	; 2
    10c6:	39 f7       	brne	.-50     	; 0x1096 <USB_Host_WaitForIOS+0xe>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
    10c8:	80 91 a6 00 	lds	r24, 0x00A6
    10cc:	82 ff       	sbrs	r24, 2
    10ce:	e3 cf       	rjmp	.-58     	; 0x1096 <USB_Host_WaitForIOS+0xe>
    10d0:	80 e0       	ldi	r24, 0x00	; 0
		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
}
    10d2:	df 91       	pop	r29
    10d4:	cf 91       	pop	r28
    10d6:	1f 91       	pop	r17
    10d8:	08 95       	ret

000010da <USB_Host_SendControlRequest>:
#include "HostStandardReq.h"

uint8_t USB_Host_ConfigurationNumber;

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
    10da:	ff 92       	push	r15
    10dc:	0f 93       	push	r16
    10de:	1f 93       	push	r17
    10e0:	cf 93       	push	r28
    10e2:	df 93       	push	r29
    10e4:	18 2f       	mov	r17, r24
    10e6:	09 2f       	mov	r16, r25
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
    10e8:	f0 90 9e 00 	lds	r15, 0x009E
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
	bool     BusSuspended = USB_Host_IsBusSuspended();
	uint8_t  ReturnStatus = HOST_SENDCONTROL_Successful;
	uint16_t DataLen      = USB_ControlRequest.wLength;
    10ec:	c0 91 3f 05 	lds	r28, 0x053F
    10f0:	d0 91 40 05 	lds	r29, 0x0540
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    10f4:	80 91 9e 00 	lds	r24, 0x009E
    10f8:	81 60       	ori	r24, 0x01	; 1
    10fa:	80 93 9e 00 	sts	0x009E, r24

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    10fe:	81 e0       	ldi	r24, 0x01	; 1
    1100:	e9 da       	rcall	.-2606   	; 0x6d4 <USB_Host_WaitMS>
    1102:	98 2f       	mov	r25, r24
    1104:	88 23       	and	r24, r24
    1106:	09 f0       	breq	.+2      	; 0x110a <USB_Host_SendControlRequest+0x30>
    1108:	d7 c0       	rjmp	.+430    	; 0x12b8 <USB_Host_SendControlRequest+0x1de>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    110a:	80 91 aa 00 	lds	r24, 0x00AA
    110e:	8f 7c       	andi	r24, 0xCF	; 207
    1110:	80 93 aa 00 	sts	0x00AA, r24

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
    1114:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
    1118:	80 91 a6 00 	lds	r24, 0x00A6
    111c:	8f 7e       	andi	r24, 0xEF	; 239
    111e:	80 93 a6 00 	sts	0x00A6, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1122:	80 91 a9 00 	lds	r24, 0x00A9
    1126:	8f 7b       	andi	r24, 0xBF	; 191
    1128:	80 93 a9 00 	sts	0x00A9, r24
    112c:	e9 e3       	ldi	r30, 0x39	; 57
    112e:	f5 e0       	ldi	r31, 0x05	; 5
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
	  Pipe_Write_8(*(HeaderStream++));	
    1130:	81 91       	ld	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    1132:	80 93 af 00 	sts	0x00AF, r24
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
    1136:	85 e0       	ldi	r24, 0x05	; 5
    1138:	e1 34       	cpi	r30, 0x41	; 65
    113a:	f8 07       	cpc	r31, r24
    113c:	c9 f7       	brne	.-14     	; 0x1130 <USB_Host_SendControlRequest+0x56>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
    113e:	80 91 a6 00 	lds	r24, 0x00A6
    1142:	87 77       	andi	r24, 0x77	; 119
    1144:	80 93 a6 00 	sts	0x00A6, r24
	  Pipe_Write_8(*(HeaderStream++));	
	#endif
	
	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
    1148:	80 e0       	ldi	r24, 0x00	; 0
    114a:	9e df       	rcall	.-196    	; 0x1088 <USB_Host_WaitForIOS>
    114c:	98 2f       	mov	r25, r24
    114e:	88 23       	and	r24, r24
    1150:	09 f0       	breq	.+2      	; 0x1154 <USB_Host_SendControlRequest+0x7a>
    1152:	b2 c0       	rjmp	.+356    	; 0x12b8 <USB_Host_SendControlRequest+0x1de>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1154:	80 91 a9 00 	lds	r24, 0x00A9
    1158:	80 64       	ori	r24, 0x40	; 64
    115a:	80 93 a9 00 	sts	0x00A9, r24
	  goto End_Of_Control_Send;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    115e:	81 e0       	ldi	r24, 0x01	; 1
    1160:	b9 da       	rcall	.-2702   	; 0x6d4 <USB_Host_WaitMS>
    1162:	98 2f       	mov	r25, r24
    1164:	88 23       	and	r24, r24
    1166:	09 f0       	breq	.+2      	; 0x116a <USB_Host_SendControlRequest+0x90>
    1168:	a7 c0       	rjmp	.+334    	; 0x12b8 <USB_Host_SendControlRequest+0x1de>

uint8_t USB_Host_ConfigurationNumber;

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
    116a:	21 2f       	mov	r18, r17
    116c:	30 2f       	mov	r19, r16
    116e:	c9 01       	movw	r24, r18
    1170:	8c 01       	movw	r16, r24
	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
	  goto End_Of_Control_Send;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
    1172:	80 91 39 05 	lds	r24, 0x0539
    1176:	87 ff       	sbrs	r24, 7
    1178:	52 c0       	rjmp	.+164    	; 0x121e <USB_Host_SendControlRequest+0x144>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    117a:	80 91 aa 00 	lds	r24, 0x00AA
    117e:	8f 7c       	andi	r24, 0xCF	; 207
    1180:	80 61       	ori	r24, 0x10	; 16
    1182:	80 93 aa 00 	sts	0x00AA, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
    1186:	01 15       	cp	r16, r1
    1188:	11 05       	cpc	r17, r1
    118a:	69 f5       	brne	.+90     	; 0x11e6 <USB_Host_SendControlRequest+0x10c>
    118c:	2e c0       	rjmp	.+92     	; 0x11ea <USB_Host_SendControlRequest+0x110>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    118e:	80 91 a9 00 	lds	r24, 0x00A9
    1192:	8f 7b       	andi	r24, 0xBF	; 191
    1194:	80 93 a9 00 	sts	0x00A9, r24
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    1198:	81 e0       	ldi	r24, 0x01	; 1
    119a:	76 df       	rcall	.-276    	; 0x1088 <USB_Host_WaitForIOS>
    119c:	98 2f       	mov	r25, r24
    119e:	88 23       	and	r24, r24
    11a0:	09 f0       	breq	.+2      	; 0x11a4 <USB_Host_SendControlRequest+0xca>
    11a2:	8a c0       	rjmp	.+276    	; 0x12b8 <USB_Host_SendControlRequest+0x1de>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    11a4:	80 91 f6 00 	lds	r24, 0x00F6
    11a8:	90 91 f7 00 	lds	r25, 0x00F7
				  goto End_Of_Control_Send;

				if (!(Pipe_BytesInPipe()))
    11ac:	89 2b       	or	r24, r25
    11ae:	49 f4       	brne	.+18     	; 0x11c2 <USB_Host_SendControlRequest+0xe8>
    11b0:	c0 e0       	ldi	r28, 0x00	; 0
    11b2:	d0 e0       	ldi	r29, 0x00	; 0
    11b4:	06 c0       	rjmp	.+12     	; 0x11c2 <USB_Host_SendControlRequest+0xe8>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    11b6:	80 91 af 00 	lds	r24, 0x00AF
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
				{
					*(DataStream++) = Pipe_Read_8();
    11ba:	f8 01       	movw	r30, r16
    11bc:	81 93       	st	Z+, r24
    11be:	8f 01       	movw	r16, r30
					DataLen--;
    11c0:	21 97       	sbiw	r28, 0x01	; 1
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    11c2:	80 91 f6 00 	lds	r24, 0x00F6
    11c6:	90 91 f7 00 	lds	r25, 0x00F7
				  goto End_Of_Control_Send;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
    11ca:	89 2b       	or	r24, r25
    11cc:	11 f0       	breq	.+4      	; 0x11d2 <USB_Host_SendControlRequest+0xf8>
    11ce:	20 97       	sbiw	r28, 0x00	; 0
    11d0:	91 f7       	brne	.-28     	; 0x11b6 <USB_Host_SendControlRequest+0xdc>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    11d2:	80 91 a9 00 	lds	r24, 0x00A9
    11d6:	80 64       	ori	r24, 0x40	; 64
    11d8:	80 93 a9 00 	sts	0x00A9, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    11dc:	80 91 a6 00 	lds	r24, 0x00A6
    11e0:	8e 77       	andi	r24, 0x7E	; 126
    11e2:	80 93 a6 00 	sts	0x00A6, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
    11e6:	20 97       	sbiw	r28, 0x00	; 0
    11e8:	91 f6       	brne	.-92     	; 0x118e <USB_Host_SendControlRequest+0xb4>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    11ea:	80 91 aa 00 	lds	r24, 0x00AA
    11ee:	8f 7c       	andi	r24, 0xCF	; 207
    11f0:	80 62       	ori	r24, 0x20	; 32
    11f2:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    11f6:	80 91 a9 00 	lds	r24, 0x00A9
    11fa:	8f 7b       	andi	r24, 0xBF	; 191
    11fc:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1200:	82 e0       	ldi	r24, 0x02	; 2
    1202:	42 df       	rcall	.-380    	; 0x1088 <USB_Host_WaitForIOS>
    1204:	98 2f       	mov	r25, r24
    1206:	88 23       	and	r24, r24
    1208:	09 f0       	breq	.+2      	; 0x120c <USB_Host_SendControlRequest+0x132>
    120a:	56 c0       	rjmp	.+172    	; 0x12b8 <USB_Host_SendControlRequest+0x1de>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    120c:	80 91 a6 00 	lds	r24, 0x00A6
    1210:	8b 77       	andi	r24, 0x7B	; 123
    1212:	80 93 a6 00 	sts	0x00A6, r24
		  goto End_Of_Control_Send;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1216:	82 e0       	ldi	r24, 0x02	; 2
    1218:	37 df       	rcall	.-402    	; 0x1088 <USB_Host_WaitForIOS>
    121a:	98 2f       	mov	r25, r24
    121c:	4d c0       	rjmp	.+154    	; 0x12b8 <USB_Host_SendControlRequest+0x1de>
		  goto End_Of_Control_Send;
	}
	else
	{
		if (DataStream != NULL)
    121e:	01 15       	cp	r16, r1
    1220:	11 05       	cpc	r17, r1
    1222:	a9 f1       	breq	.+106    	; 0x128e <USB_Host_SendControlRequest+0x1b4>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1224:	80 91 aa 00 	lds	r24, 0x00AA
    1228:	8f 7c       	andi	r24, 0xCF	; 207
    122a:	80 62       	ori	r24, 0x20	; 32
    122c:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1230:	80 91 a9 00 	lds	r24, 0x00A9
    1234:	8f 7b       	andi	r24, 0xBF	; 191
    1236:	80 93 a9 00 	sts	0x00A9, r24
    123a:	1d c0       	rjmp	.+58     	; 0x1276 <USB_Host_SendControlRequest+0x19c>
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    123c:	82 e0       	ldi	r24, 0x02	; 2
    123e:	24 df       	rcall	.-440    	; 0x1088 <USB_Host_WaitForIOS>
    1240:	98 2f       	mov	r25, r24
    1242:	88 23       	and	r24, r24
    1244:	c9 f5       	brne	.+114    	; 0x12b8 <USB_Host_SendControlRequest+0x1de>
				  goto End_Of_Control_Send;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    1246:	80 91 32 01 	lds	r24, 0x0132
    124a:	28 2f       	mov	r18, r24
    124c:	30 e0       	ldi	r19, 0x00	; 0
    124e:	07 c0       	rjmp	.+14     	; 0x125e <USB_Host_SendControlRequest+0x184>
				{
					Pipe_Write_8(*(DataStream++));
    1250:	f8 01       	movw	r30, r16
    1252:	81 91       	ld	r24, Z+
    1254:	8f 01       	movw	r16, r30
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    1256:	80 93 af 00 	sts	0x00AF, r24
					DataLen--;
    125a:	21 97       	sbiw	r28, 0x01	; 1
			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
				  goto End_Of_Control_Send;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    125c:	39 f0       	breq	.+14     	; 0x126c <USB_Host_SendControlRequest+0x192>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    125e:	80 91 f6 00 	lds	r24, 0x00F6
    1262:	90 91 f7 00 	lds	r25, 0x00F7
    1266:	82 17       	cp	r24, r18
    1268:	93 07       	cpc	r25, r19
    126a:	90 f3       	brcs	.-28     	; 0x1250 <USB_Host_SendControlRequest+0x176>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    126c:	80 91 a6 00 	lds	r24, 0x00A6
    1270:	8b 77       	andi	r24, 0x7B	; 123
    1272:	80 93 a6 00 	sts	0x00A6, r24
		if (DataStream != NULL)
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
    1276:	20 97       	sbiw	r28, 0x00	; 0
    1278:	09 f7       	brne	.-62     	; 0x123c <USB_Host_SendControlRequest+0x162>
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    127a:	82 e0       	ldi	r24, 0x02	; 2
    127c:	05 df       	rcall	.-502    	; 0x1088 <USB_Host_WaitForIOS>
    127e:	98 2f       	mov	r25, r24
    1280:	88 23       	and	r24, r24
    1282:	d1 f4       	brne	.+52     	; 0x12b8 <USB_Host_SendControlRequest+0x1de>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1284:	80 91 a9 00 	lds	r24, 0x00A9
    1288:	80 64       	ori	r24, 0x40	; 64
    128a:	80 93 a9 00 	sts	0x00A9, r24
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    128e:	80 91 aa 00 	lds	r24, 0x00AA
    1292:	8f 7c       	andi	r24, 0xCF	; 207
    1294:	80 61       	ori	r24, 0x10	; 16
    1296:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    129a:	80 91 a9 00 	lds	r24, 0x00A9
    129e:	8f 7b       	andi	r24, 0xBF	; 191
    12a0:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    12a4:	81 e0       	ldi	r24, 0x01	; 1
    12a6:	f0 de       	rcall	.-544    	; 0x1088 <USB_Host_WaitForIOS>
    12a8:	98 2f       	mov	r25, r24
    12aa:	88 23       	and	r24, r24
    12ac:	29 f4       	brne	.+10     	; 0x12b8 <USB_Host_SendControlRequest+0x1de>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    12ae:	80 91 a6 00 	lds	r24, 0x00A6
    12b2:	8e 77       	andi	r24, 0x7E	; 126
    12b4:	80 93 a6 00 	sts	0x00A6, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    12b8:	80 91 a9 00 	lds	r24, 0x00A9
    12bc:	80 64       	ori	r24, 0x40	; 64
    12be:	80 93 a9 00 	sts	0x00A9, r24
	}

End_Of_Control_Send:
	Pipe_Freeze();

	if (BusSuspended)
    12c2:	f0 fc       	sbrc	r15, 0
    12c4:	05 c0       	rjmp	.+10     	; 0x12d0 <USB_Host_SendControlRequest+0x1f6>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    12c6:	80 91 9e 00 	lds	r24, 0x009E
    12ca:	8e 7f       	andi	r24, 0xFE	; 254
    12cc:	80 93 9e 00 	sts	0x009E, r24
			 *  \param[in] PipeNumber  Index of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t PipeNumber)
			{
				UPRST = (1 << PipeNumber);
    12d0:	81 e0       	ldi	r24, 0x01	; 1
    12d2:	80 93 a8 00 	sts	0x00A8, r24
				UPRST = 0;
    12d6:	10 92 a8 00 	sts	0x00A8, r1
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
    12da:	89 2f       	mov	r24, r25
    12dc:	df 91       	pop	r29
    12de:	cf 91       	pop	r28
    12e0:	1f 91       	pop	r17
    12e2:	0f 91       	pop	r16
    12e4:	ff 90       	pop	r15
    12e6:	08 95       	ret

000012e8 <USB_Host_SetDeviceConfiguration>:

	return HOST_SENDCONTROL_Successful;
}

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
    12e8:	1f 93       	push	r17
    12ea:	18 2f       	mov	r17, r24
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
    12ec:	10 92 39 05 	sts	0x0539, r1
    12f0:	89 e0       	ldi	r24, 0x09	; 9
    12f2:	80 93 3a 05 	sts	0x053A, r24
    12f6:	10 93 3b 05 	sts	0x053B, r17
    12fa:	10 92 3c 05 	sts	0x053C, r1
    12fe:	10 92 3e 05 	sts	0x053E, r1
    1302:	10 92 3d 05 	sts	0x053D, r1
    1306:	10 92 40 05 	sts	0x0540, r1
    130a:	10 92 3f 05 	sts	0x053F, r1
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    130e:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);
	
	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) == HOST_SENDCONTROL_Successful)
    1312:	80 e0       	ldi	r24, 0x00	; 0
    1314:	90 e0       	ldi	r25, 0x00	; 0
    1316:	e1 de       	rcall	.-574    	; 0x10da <USB_Host_SendControlRequest>
    1318:	88 23       	and	r24, r24
    131a:	49 f4       	brne	.+18     	; 0x132e <USB_Host_SetDeviceConfiguration+0x46>
	{
		USB_Host_ConfigurationNumber = ConfigNumber;
    131c:	10 93 37 05 	sts	0x0537, r17
		USB_HostState                = (ConfigNumber) ? HOST_STATE_Configured : HOST_STATE_Addressed;
    1320:	11 23       	and	r17, r17
    1322:	11 f4       	brne	.+4      	; 0x1328 <USB_Host_SetDeviceConfiguration+0x40>
    1324:	9a e0       	ldi	r25, 0x0A	; 10
    1326:	01 c0       	rjmp	.+2      	; 0x132a <USB_Host_SetDeviceConfiguration+0x42>
    1328:	9b e0       	ldi	r25, 0x0B	; 11
    132a:	90 93 41 05 	sts	0x0541, r25
	}

	return ErrorCode;
}
    132e:	1f 91       	pop	r17
    1330:	08 95       	ret

00001332 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    1332:	ff 92       	push	r15
    1334:	0f 93       	push	r16
    1336:	1f 93       	push	r17
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
    1338:	07 ea       	ldi	r16, 0xA7	; 167
    133a:	10 e0       	ldi	r17, 0x00	; 0
    133c:	f8 01       	movw	r30, r16
    133e:	f0 80       	ld	r15, Z
    1340:	f7 e0       	ldi	r31, 0x07	; 7
    1342:	ff 22       	and	r15, r31
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1344:	f8 01       	movw	r30, r16
    1346:	10 82       	st	Z, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    1348:	62 da       	rcall	.-2876   	; 0x80e <USB_Host_ProcessNextHostState>
    134a:	f8 01       	movw	r30, r16
    134c:	f0 82       	st	Z, r15
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
    134e:	1f 91       	pop	r17
    1350:	0f 91       	pop	r16
    1352:	ff 90       	pop	r15
    1354:	08 95       	ret

00001356 <DCOMP_RNDIS_Host_NextRNDISControlInterface>:

	return RNDIS_ENUMERROR_NoError;
}

static uint8_t DCOMP_RNDIS_Host_NextRNDISControlInterface(void* const CurrentDescriptor)
{
    1356:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
    1358:	81 81       	ldd	r24, Z+1	; 0x01
    135a:	84 30       	cpi	r24, 0x04	; 4
    135c:	59 f4       	brne	.+22     	; 0x1374 <DCOMP_RNDIS_Host_NextRNDISControlInterface+0x1e>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		if ((Interface->Class    == CDC_CSCP_CDCClass)    &&
    135e:	85 81       	ldd	r24, Z+5	; 0x05
    1360:	82 30       	cpi	r24, 0x02	; 2
    1362:	41 f4       	brne	.+16     	; 0x1374 <DCOMP_RNDIS_Host_NextRNDISControlInterface+0x1e>
    1364:	86 81       	ldd	r24, Z+6	; 0x06
    1366:	82 30       	cpi	r24, 0x02	; 2
    1368:	29 f4       	brne	.+10     	; 0x1374 <DCOMP_RNDIS_Host_NextRNDISControlInterface+0x1e>
    136a:	87 81       	ldd	r24, Z+7	; 0x07
    136c:	8f 3f       	cpi	r24, 0xFF	; 255
    136e:	11 f4       	brne	.+4      	; 0x1374 <DCOMP_RNDIS_Host_NextRNDISControlInterface+0x1e>
    1370:	80 e0       	ldi	r24, 0x00	; 0
    1372:	08 95       	ret
    1374:	82 e0       	ldi	r24, 0x02	; 2
			return DESCRIPTOR_SEARCH_Found;
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    1376:	08 95       	ret

00001378 <DCOMP_RNDIS_Host_NextRNDISDataInterface>:

static uint8_t DCOMP_RNDIS_Host_NextRNDISDataInterface(void* const CurrentDescriptor)
{
    1378:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
    137a:	81 81       	ldd	r24, Z+1	; 0x01
    137c:	84 30       	cpi	r24, 0x04	; 4
    137e:	41 f4       	brne	.+16     	; 0x1390 <DCOMP_RNDIS_Host_NextRNDISDataInterface+0x18>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor,
		                                                         USB_Descriptor_Interface_t);

		if ((Interface->Class    == CDC_CSCP_CDCDataClass)   &&
    1380:	85 81       	ldd	r24, Z+5	; 0x05
    1382:	8a 30       	cpi	r24, 0x0A	; 10
    1384:	29 f4       	brne	.+10     	; 0x1390 <DCOMP_RNDIS_Host_NextRNDISDataInterface+0x18>
    1386:	86 81       	ldd	r24, Z+6	; 0x06
    1388:	88 23       	and	r24, r24
    138a:	11 f4       	brne	.+4      	; 0x1390 <DCOMP_RNDIS_Host_NextRNDISDataInterface+0x18>
    138c:	87 81       	ldd	r24, Z+7	; 0x07
    138e:	81 11       	cpse	r24, r1
    1390:	82 e0       	ldi	r24, 0x02	; 2
			return DESCRIPTOR_SEARCH_Found;
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    1392:	08 95       	ret

00001394 <RNDIS_Host_IsPacketReceived>:

	return HOST_SENDCONTROL_Successful;
}

bool RNDIS_Host_IsPacketReceived(USB_ClassInfo_RNDIS_Host_t* const RNDISInterfaceInfo)
{
    1394:	fc 01       	movw	r30, r24
	bool PacketWaiting;

	if ((USB_HostState != HOST_STATE_Configured) || !(RNDISInterfaceInfo->State.IsActive))
    1396:	80 91 41 05 	lds	r24, 0x0541
    139a:	8b 30       	cpi	r24, 0x0B	; 11
    139c:	a1 f4       	brne	.+40     	; 0x13c6 <RNDIS_Host_IsPacketReceived+0x32>
    139e:	82 85       	ldd	r24, Z+10	; 0x0a
    13a0:	88 23       	and	r24, r24
    13a2:	89 f0       	breq	.+34     	; 0x13c6 <RNDIS_Host_IsPacketReceived+0x32>
	  return false;

	Pipe_SelectPipe(RNDISInterfaceInfo->Config.DataINPipeNumber);
    13a4:	80 81       	ld	r24, Z
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    13a6:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    13aa:	80 91 a9 00 	lds	r24, 0x00A9
    13ae:	8f 7b       	andi	r24, 0xBF	; 191
    13b0:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    13b4:	90 91 a6 00 	lds	r25, 0x00A6
    13b8:	91 70       	andi	r25, 0x01	; 1

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    13ba:	80 91 a9 00 	lds	r24, 0x00A9
    13be:	80 64       	ori	r24, 0x40	; 64
    13c0:	80 93 a9 00 	sts	0x00A9, r24
    13c4:	01 c0       	rjmp	.+2      	; 0x13c8 <RNDIS_Host_IsPacketReceived+0x34>

	Pipe_Unfreeze();
	PacketWaiting = Pipe_IsINReceived();
	Pipe_Freeze();

	return PacketWaiting;
    13c6:	90 e0       	ldi	r25, 0x00	; 0
}
    13c8:	89 2f       	mov	r24, r25
    13ca:	08 95       	ret

000013cc <RNDIS_Host_ReadPacket>:

uint8_t RNDIS_Host_ReadPacket(USB_ClassInfo_RNDIS_Host_t* const RNDISInterfaceInfo,
                              void* Buffer,
                              uint16_t* const PacketLength)
{
    13cc:	cf 92       	push	r12
    13ce:	df 92       	push	r13
    13d0:	ff 92       	push	r15
    13d2:	0f 93       	push	r16
    13d4:	1f 93       	push	r17
    13d6:	df 93       	push	r29
    13d8:	cf 93       	push	r28
    13da:	cd b7       	in	r28, 0x3d	; 61
    13dc:	de b7       	in	r29, 0x3e	; 62
    13de:	ac 97       	sbiw	r28, 0x2c	; 44
    13e0:	0f b6       	in	r0, 0x3f	; 63
    13e2:	f8 94       	cli
    13e4:	de bf       	out	0x3e, r29	; 62
    13e6:	0f be       	out	0x3f, r0	; 63
    13e8:	cd bf       	out	0x3d, r28	; 61
    13ea:	fc 01       	movw	r30, r24
    13ec:	6b 01       	movw	r12, r22
    13ee:	8a 01       	movw	r16, r20
	uint8_t ErrorCode;

	if ((USB_HostState != HOST_STATE_Configured) || !(RNDISInterfaceInfo->State.IsActive))
    13f0:	80 91 41 05 	lds	r24, 0x0541
    13f4:	8b 30       	cpi	r24, 0x0B	; 11
    13f6:	09 f0       	breq	.+2      	; 0x13fa <RNDIS_Host_ReadPacket+0x2e>
    13f8:	50 c0       	rjmp	.+160    	; 0x149a <RNDIS_Host_ReadPacket+0xce>
    13fa:	82 85       	ldd	r24, Z+10	; 0x0a
    13fc:	88 23       	and	r24, r24
    13fe:	09 f4       	brne	.+2      	; 0x1402 <RNDIS_Host_ReadPacket+0x36>
    1400:	4c c0       	rjmp	.+152    	; 0x149a <RNDIS_Host_ReadPacket+0xce>
	  return PIPE_READYWAIT_DeviceDisconnected;

	Pipe_SelectPipe(RNDISInterfaceInfo->Config.DataINPipeNumber);
    1402:	80 81       	ld	r24, Z
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1404:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1408:	80 91 a9 00 	lds	r24, 0x00A9
    140c:	8f 7b       	andi	r24, 0xBF	; 191
    140e:	80 93 a9 00 	sts	0x00A9, r24
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
    1412:	80 91 a6 00 	lds	r24, 0x00A6
	Pipe_Unfreeze();

	if (!(Pipe_IsReadWriteAllowed()))
    1416:	85 fd       	sbrc	r24, 5
    1418:	13 c0       	rjmp	.+38     	; 0x1440 <RNDIS_Host_ReadPacket+0x74>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    141a:	80 91 a6 00 	lds	r24, 0x00A6
	{
		if (Pipe_IsINReceived())
    141e:	80 ff       	sbrs	r24, 0
    1420:	05 c0       	rjmp	.+10     	; 0x142c <RNDIS_Host_ReadPacket+0x60>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1422:	80 91 a6 00 	lds	r24, 0x00A6
    1426:	8e 77       	andi	r24, 0x7E	; 126
    1428:	80 93 a6 00 	sts	0x00A6, r24
		  Pipe_ClearIN();

		*PacketLength = 0;
    142c:	f8 01       	movw	r30, r16
    142e:	11 82       	std	Z+1, r1	; 0x01
    1430:	10 82       	st	Z, r1

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1432:	80 91 a9 00 	lds	r24, 0x00A9
    1436:	80 64       	ori	r24, 0x40	; 64
    1438:	80 93 a9 00 	sts	0x00A9, r24
    143c:	ff 24       	eor	r15, r15
    143e:	2f c0       	rjmp	.+94     	; 0x149e <RNDIS_Host_ReadPacket+0xd2>
		return PIPE_RWSTREAM_NoError;
	}

	RNDIS_Packet_Message_t DeviceMessage;

	if ((ErrorCode = Pipe_Read_Stream_LE(&DeviceMessage, sizeof(RNDIS_Packet_Message_t),
    1440:	ce 01       	movw	r24, r28
    1442:	01 96       	adiw	r24, 0x01	; 1
    1444:	6c e2       	ldi	r22, 0x2C	; 44
    1446:	70 e0       	ldi	r23, 0x00	; 0
    1448:	40 e0       	ldi	r20, 0x00	; 0
    144a:	50 e0       	ldi	r21, 0x00	; 0
    144c:	df dc       	rcall	.-1602   	; 0xe0c <Pipe_Read_Stream_LE>
    144e:	f8 2e       	mov	r15, r24
    1450:	88 23       	and	r24, r24
    1452:	29 f5       	brne	.+74     	; 0x149e <RNDIS_Host_ReadPacket+0xd2>
	                                     NULL)) != PIPE_RWSTREAM_NoError)
	{
		return ErrorCode;
	}

	*PacketLength = (uint16_t)le32_to_cpu(DeviceMessage.DataLength);
    1454:	8d 85       	ldd	r24, Y+13	; 0x0d
    1456:	9e 85       	ldd	r25, Y+14	; 0x0e
    1458:	f8 01       	movw	r30, r16
    145a:	91 83       	std	Z+1, r25	; 0x01
    145c:	80 83       	st	Z, r24

	Pipe_Discard_Stream(DeviceMessage.DataOffset -
    145e:	89 85       	ldd	r24, Y+9	; 0x09
    1460:	9a 85       	ldd	r25, Y+10	; 0x0a
    1462:	84 97       	sbiw	r24, 0x24	; 36
    1464:	60 e0       	ldi	r22, 0x00	; 0
    1466:	70 e0       	ldi	r23, 0x00	; 0
    1468:	28 dd       	rcall	.-1456   	; 0xeba <Pipe_Discard_Stream>
	                    (sizeof(RNDIS_Packet_Message_t) - sizeof(RNDIS_Message_Header_t)),
	                    NULL);

	Pipe_Read_Stream_LE(Buffer, *PacketLength, NULL);
    146a:	f8 01       	movw	r30, r16
    146c:	60 81       	ld	r22, Z
    146e:	71 81       	ldd	r23, Z+1	; 0x01
    1470:	c6 01       	movw	r24, r12
    1472:	40 e0       	ldi	r20, 0x00	; 0
    1474:	50 e0       	ldi	r21, 0x00	; 0
    1476:	ca dc       	rcall	.-1644   	; 0xe0c <Pipe_Read_Stream_LE>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1478:	80 91 f6 00 	lds	r24, 0x00F6
    147c:	90 91 f7 00 	lds	r25, 0x00F7

	if (!(Pipe_BytesInPipe()))
    1480:	89 2b       	or	r24, r25
    1482:	29 f4       	brne	.+10     	; 0x148e <RNDIS_Host_ReadPacket+0xc2>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1484:	80 91 a6 00 	lds	r24, 0x00A6
    1488:	8e 77       	andi	r24, 0x7E	; 126
    148a:	80 93 a6 00 	sts	0x00A6, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    148e:	80 91 a9 00 	lds	r24, 0x00A9
    1492:	80 64       	ori	r24, 0x40	; 64
    1494:	80 93 a9 00 	sts	0x00A9, r24
    1498:	02 c0       	rjmp	.+4      	; 0x149e <RNDIS_Host_ReadPacket+0xd2>
	  Pipe_ClearIN();

	Pipe_Freeze();

	return PIPE_RWSTREAM_NoError;
    149a:	92 e0       	ldi	r25, 0x02	; 2
    149c:	f9 2e       	mov	r15, r25
}
    149e:	8f 2d       	mov	r24, r15
    14a0:	ac 96       	adiw	r28, 0x2c	; 44
    14a2:	0f b6       	in	r0, 0x3f	; 63
    14a4:	f8 94       	cli
    14a6:	de bf       	out	0x3e, r29	; 62
    14a8:	0f be       	out	0x3f, r0	; 63
    14aa:	cd bf       	out	0x3d, r28	; 61
    14ac:	cf 91       	pop	r28
    14ae:	df 91       	pop	r29
    14b0:	1f 91       	pop	r17
    14b2:	0f 91       	pop	r16
    14b4:	ff 90       	pop	r15
    14b6:	df 90       	pop	r13
    14b8:	cf 90       	pop	r12
    14ba:	08 95       	ret

000014bc <RNDIS_SendEncapsulatedCommand>:

static uint8_t RNDIS_SendEncapsulatedCommand(USB_ClassInfo_RNDIS_Host_t* const RNDISInterfaceInfo,
                                             void* Buffer,
                                             const uint16_t Length)
{
	USB_ControlRequest = (USB_Request_Header_t)
    14bc:	fc 01       	movw	r30, r24
    14be:	93 85       	ldd	r25, Z+11	; 0x0b
    14c0:	81 e2       	ldi	r24, 0x21	; 33
    14c2:	80 93 39 05 	sts	0x0539, r24
    14c6:	10 92 3a 05 	sts	0x053A, r1
    14ca:	10 92 3c 05 	sts	0x053C, r1
    14ce:	10 92 3b 05 	sts	0x053B, r1
    14d2:	90 93 3d 05 	sts	0x053D, r25
    14d6:	10 92 3e 05 	sts	0x053E, r1
    14da:	50 93 40 05 	sts	0x0540, r21
    14de:	40 93 3f 05 	sts	0x053F, r20
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    14e2:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = Length,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);
	
	return USB_Host_SendControlRequest(Buffer);
    14e6:	cb 01       	movw	r24, r22
}
    14e8:	f8 cd       	rjmp	.-1040   	; 0x10da <USB_Host_SendControlRequest>

000014ea <RNDIS_GetEncapsulatedResponse>:

static uint8_t RNDIS_GetEncapsulatedResponse(USB_ClassInfo_RNDIS_Host_t* const RNDISInterfaceInfo,
                                             void* Buffer,
                                             const uint16_t Length)
{
	USB_ControlRequest = (USB_Request_Header_t)
    14ea:	fc 01       	movw	r30, r24
    14ec:	93 85       	ldd	r25, Z+11	; 0x0b
    14ee:	81 ea       	ldi	r24, 0xA1	; 161
    14f0:	80 93 39 05 	sts	0x0539, r24
    14f4:	81 e0       	ldi	r24, 0x01	; 1
    14f6:	80 93 3a 05 	sts	0x053A, r24
    14fa:	10 92 3c 05 	sts	0x053C, r1
    14fe:	10 92 3b 05 	sts	0x053B, r1
    1502:	90 93 3d 05 	sts	0x053D, r25
    1506:	10 92 3e 05 	sts	0x053E, r1
    150a:	50 93 40 05 	sts	0x0540, r21
    150e:	40 93 3f 05 	sts	0x053F, r20
    1512:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = Length,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);
	
	return USB_Host_SendControlRequest(Buffer);
    1516:	cb 01       	movw	r24, r22
}
    1518:	e0 cd       	rjmp	.-1088   	; 0x10da <USB_Host_SendControlRequest>

0000151a <RNDIS_Host_QueryRNDISProperty>:

uint8_t RNDIS_Host_QueryRNDISProperty(USB_ClassInfo_RNDIS_Host_t* const RNDISInterfaceInfo,
                                      const uint32_t Oid,
                                      void* Buffer,
                                      const uint16_t MaxLength)
{
    151a:	4f 92       	push	r4
    151c:	5f 92       	push	r5
    151e:	6f 92       	push	r6
    1520:	7f 92       	push	r7
    1522:	8f 92       	push	r8
    1524:	9f 92       	push	r9
    1526:	af 92       	push	r10
    1528:	bf 92       	push	r11
    152a:	cf 92       	push	r12
    152c:	df 92       	push	r13
    152e:	ef 92       	push	r14
    1530:	ff 92       	push	r15
    1532:	0f 93       	push	r16
    1534:	1f 93       	push	r17
    1536:	df 93       	push	r29
    1538:	cf 93       	push	r28
    153a:	cd b7       	in	r28, 0x3d	; 61
    153c:	de b7       	in	r29, 0x3e	; 62
    153e:	6c 97       	sbiw	r28, 0x1c	; 28
    1540:	0f b6       	in	r0, 0x3f	; 63
    1542:	f8 94       	cli
    1544:	de bf       	out	0x3e, r29	; 62
    1546:	0f be       	out	0x3f, r0	; 63
    1548:	cd bf       	out	0x3d, r28	; 61
    154a:	7c 01       	movw	r14, r24
    154c:	52 2e       	mov	r5, r18
    154e:	43 2e       	mov	r4, r19
    1550:	58 01       	movw	r10, r16
	  return RNDIS_ERROR_LOGICAL_CMD_FAILED;

	memcpy(Buffer, &QueryMessageResponseData.ContiguousBuffer, MaxLength);

	return HOST_SENDCONTROL_Successful;
}
    1552:	6d b6       	in	r6, 0x3d	; 61
    1554:	7e b6       	in	r7, 0x3e	; 62

	struct
	{
		RNDIS_Query_Complete_t QueryMessageResponse;
		uint8_t                ContiguousBuffer[MaxLength];
	} QueryMessageResponseData;
    1556:	28 e1       	ldi	r18, 0x18	; 24
    1558:	82 2e       	mov	r8, r18
    155a:	91 2c       	mov	r9, r1
    155c:	80 0e       	add	r8, r16
    155e:	91 1e       	adc	r9, r17
    1560:	8d b7       	in	r24, 0x3d	; 61
    1562:	9e b7       	in	r25, 0x3e	; 62
    1564:	88 19       	sub	r24, r8
    1566:	99 09       	sbc	r25, r9
    1568:	0f b6       	in	r0, 0x3f	; 63
    156a:	f8 94       	cli
    156c:	9e bf       	out	0x3e, r25	; 62
    156e:	0f be       	out	0x3f, r0	; 63
    1570:	8d bf       	out	0x3d, r24	; 61
    1572:	cd b6       	in	r12, 0x3d	; 61
    1574:	de b6       	in	r13, 0x3e	; 62
    1576:	08 94       	sec
    1578:	c1 1c       	adc	r12, r1
    157a:	d1 1c       	adc	r13, r1

	QueryMessage.MessageType    = CPU_TO_LE32(REMOTE_NDIS_QUERY_MSG);
    157c:	84 e0       	ldi	r24, 0x04	; 4
    157e:	90 e0       	ldi	r25, 0x00	; 0
    1580:	a0 e0       	ldi	r26, 0x00	; 0
    1582:	b0 e0       	ldi	r27, 0x00	; 0
    1584:	89 83       	std	Y+1, r24	; 0x01
    1586:	9a 83       	std	Y+2, r25	; 0x02
    1588:	ab 83       	std	Y+3, r26	; 0x03
    158a:	bc 83       	std	Y+4, r27	; 0x04
	QueryMessage.MessageLength  = CPU_TO_LE32(sizeof(RNDIS_Query_Message_t));
    158c:	8c e1       	ldi	r24, 0x1C	; 28
    158e:	90 e0       	ldi	r25, 0x00	; 0
    1590:	a0 e0       	ldi	r26, 0x00	; 0
    1592:	b0 e0       	ldi	r27, 0x00	; 0
    1594:	8d 83       	std	Y+5, r24	; 0x05
    1596:	9e 83       	std	Y+6, r25	; 0x06
    1598:	af 83       	std	Y+7, r26	; 0x07
    159a:	b8 87       	std	Y+8, r27	; 0x08
	QueryMessage.RequestId      = cpu_to_le32(RNDISInterfaceInfo->State.RequestID++);
    159c:	f7 01       	movw	r30, r14
    159e:	86 89       	ldd	r24, Z+22	; 0x16
    15a0:	97 89       	ldd	r25, Z+23	; 0x17
    15a2:	a0 8d       	ldd	r26, Z+24	; 0x18
    15a4:	b1 8d       	ldd	r27, Z+25	; 0x19
    15a6:	89 87       	std	Y+9, r24	; 0x09
    15a8:	9a 87       	std	Y+10, r25	; 0x0a
    15aa:	ab 87       	std	Y+11, r26	; 0x0b
    15ac:	bc 87       	std	Y+12, r27	; 0x0c
    15ae:	01 96       	adiw	r24, 0x01	; 1
    15b0:	a1 1d       	adc	r26, r1
    15b2:	b1 1d       	adc	r27, r1
    15b4:	86 8b       	std	Z+22, r24	; 0x16
    15b6:	97 8b       	std	Z+23, r25	; 0x17
    15b8:	a0 8f       	std	Z+24, r26	; 0x18
    15ba:	b1 8f       	std	Z+25, r27	; 0x19

	QueryMessage.Oid            = cpu_to_le32(Oid);
    15bc:	4d 87       	std	Y+13, r20	; 0x0d
    15be:	5e 87       	std	Y+14, r21	; 0x0e
    15c0:	6f 87       	std	Y+15, r22	; 0x0f
    15c2:	78 8b       	std	Y+16, r23	; 0x10
	QueryMessage.InformationBufferLength = CPU_TO_LE32(0);
    15c4:	19 8a       	std	Y+17, r1	; 0x11
    15c6:	1a 8a       	std	Y+18, r1	; 0x12
    15c8:	1b 8a       	std	Y+19, r1	; 0x13
    15ca:	1c 8a       	std	Y+20, r1	; 0x14
	QueryMessage.InformationBufferOffset = CPU_TO_LE32(0);
    15cc:	1d 8a       	std	Y+21, r1	; 0x15
    15ce:	1e 8a       	std	Y+22, r1	; 0x16
    15d0:	1f 8a       	std	Y+23, r1	; 0x17
    15d2:	18 8e       	std	Y+24, r1	; 0x18
	QueryMessage.DeviceVcHandle = CPU_TO_LE32(0);
    15d4:	19 8e       	std	Y+25, r1	; 0x19
    15d6:	1a 8e       	std	Y+26, r1	; 0x1a
    15d8:	1b 8e       	std	Y+27, r1	; 0x1b
    15da:	1c 8e       	std	Y+28, r1	; 0x1c

	if ((ErrorCode = RNDIS_SendEncapsulatedCommand(RNDISInterfaceInfo, &QueryMessage,
    15dc:	c7 01       	movw	r24, r14
    15de:	be 01       	movw	r22, r28
    15e0:	6f 5f       	subi	r22, 0xFF	; 255
    15e2:	7f 4f       	sbci	r23, 0xFF	; 255
    15e4:	4c e1       	ldi	r20, 0x1C	; 28
    15e6:	50 e0       	ldi	r21, 0x00	; 0
    15e8:	69 df       	rcall	.-302    	; 0x14bc <RNDIS_SendEncapsulatedCommand>
    15ea:	18 2f       	mov	r17, r24
    15ec:	88 23       	and	r24, r24
    15ee:	d1 f4       	brne	.+52     	; 0x1624 <RNDIS_Host_QueryRNDISProperty+0x10a>
	                                               sizeof(RNDIS_Query_Message_t))) != HOST_SENDCONTROL_Successful)
	{
		return ErrorCode;
	}

	if ((ErrorCode = RNDIS_GetEncapsulatedResponse(RNDISInterfaceInfo, &QueryMessageResponseData,
    15f0:	c7 01       	movw	r24, r14
    15f2:	b6 01       	movw	r22, r12
    15f4:	a4 01       	movw	r20, r8
    15f6:	79 df       	rcall	.-270    	; 0x14ea <RNDIS_GetEncapsulatedResponse>
    15f8:	18 2f       	mov	r17, r24
    15fa:	88 23       	and	r24, r24
    15fc:	99 f4       	brne	.+38     	; 0x1624 <RNDIS_Host_QueryRNDISProperty+0x10a>
	                                               sizeof(QueryMessageResponseData))) != HOST_SENDCONTROL_Successful)
	{
		return ErrorCode;
	}

	if (QueryMessageResponseData.QueryMessageResponse.Status != CPU_TO_LE32(REMOTE_NDIS_STATUS_SUCCESS))
    15fe:	f6 01       	movw	r30, r12
    1600:	84 85       	ldd	r24, Z+12	; 0x0c
    1602:	95 85       	ldd	r25, Z+13	; 0x0d
    1604:	a6 85       	ldd	r26, Z+14	; 0x0e
    1606:	b7 85       	ldd	r27, Z+15	; 0x0f
    1608:	00 97       	sbiw	r24, 0x00	; 0
    160a:	a1 05       	cpc	r26, r1
    160c:	b1 05       	cpc	r27, r1
    160e:	11 f0       	breq	.+4      	; 0x1614 <RNDIS_Host_QueryRNDISProperty+0xfa>
    1610:	10 e8       	ldi	r17, 0x80	; 128
    1612:	08 c0       	rjmp	.+16     	; 0x1624 <RNDIS_Host_QueryRNDISProperty+0x10a>
	  return RNDIS_ERROR_LOGICAL_CMD_FAILED;

	memcpy(Buffer, &QueryMessageResponseData.ContiguousBuffer, MaxLength);
    1614:	96 01       	movw	r18, r12
    1616:	28 5e       	subi	r18, 0xE8	; 232
    1618:	3f 4f       	sbci	r19, 0xFF	; 255
    161a:	85 2d       	mov	r24, r5
    161c:	94 2d       	mov	r25, r4
    161e:	b9 01       	movw	r22, r18
    1620:	a5 01       	movw	r20, r10
    1622:	4f d2       	rcall	.+1182   	; 0x1ac2 <memcpy>

	return HOST_SENDCONTROL_Successful;
}
    1624:	81 2f       	mov	r24, r17
    1626:	0f b6       	in	r0, 0x3f	; 63
    1628:	f8 94       	cli
    162a:	7e be       	out	0x3e, r7	; 62
    162c:	0f be       	out	0x3f, r0	; 63
    162e:	6d be       	out	0x3d, r6	; 61
    1630:	6c 96       	adiw	r28, 0x1c	; 28
    1632:	0f b6       	in	r0, 0x3f	; 63
    1634:	f8 94       	cli
    1636:	de bf       	out	0x3e, r29	; 62
    1638:	0f be       	out	0x3f, r0	; 63
    163a:	cd bf       	out	0x3d, r28	; 61
    163c:	cf 91       	pop	r28
    163e:	df 91       	pop	r29
    1640:	1f 91       	pop	r17
    1642:	0f 91       	pop	r16
    1644:	ff 90       	pop	r15
    1646:	ef 90       	pop	r14
    1648:	df 90       	pop	r13
    164a:	cf 90       	pop	r12
    164c:	bf 90       	pop	r11
    164e:	af 90       	pop	r10
    1650:	9f 90       	pop	r9
    1652:	8f 90       	pop	r8
    1654:	7f 90       	pop	r7
    1656:	6f 90       	pop	r6
    1658:	5f 90       	pop	r5
    165a:	4f 90       	pop	r4
    165c:	08 95       	ret

0000165e <RNDIS_Host_SetRNDISProperty>:

uint8_t RNDIS_Host_SetRNDISProperty(USB_ClassInfo_RNDIS_Host_t* const RNDISInterfaceInfo,
                                    const uint32_t Oid,
                                    void* Buffer,
                                    const uint16_t Length)
{
    165e:	6f 92       	push	r6
    1660:	7f 92       	push	r7
    1662:	8f 92       	push	r8
    1664:	9f 92       	push	r9
    1666:	af 92       	push	r10
    1668:	bf 92       	push	r11
    166a:	cf 92       	push	r12
    166c:	df 92       	push	r13
    166e:	ef 92       	push	r14
    1670:	ff 92       	push	r15
    1672:	0f 93       	push	r16
    1674:	1f 93       	push	r17
    1676:	df 93       	push	r29
    1678:	cf 93       	push	r28
    167a:	cd b7       	in	r28, 0x3d	; 61
    167c:	de b7       	in	r29, 0x3e	; 62
    167e:	60 97       	sbiw	r28, 0x10	; 16
    1680:	0f b6       	in	r0, 0x3f	; 63
    1682:	f8 94       	cli
    1684:	de bf       	out	0x3e, r29	; 62
    1686:	0f be       	out	0x3f, r0	; 63
    1688:	cd bf       	out	0x3d, r28	; 61
    168a:	4c 01       	movw	r8, r24

	if (SetMessageResponse.Status != CPU_TO_LE32(REMOTE_NDIS_STATUS_SUCCESS))
	  return RNDIS_ERROR_LOGICAL_CMD_FAILED;

	return HOST_SENDCONTROL_Successful;
}
    168c:	6d b6       	in	r6, 0x3d	; 61
    168e:	7e b6       	in	r7, 0x3e	; 62

	struct
	{
		RNDIS_Set_Message_t SetMessage;
		uint8_t             ContiguousBuffer[Length];
	} SetMessageData;
    1690:	ec e1       	ldi	r30, 0x1C	; 28
    1692:	ce 2e       	mov	r12, r30
    1694:	d1 2c       	mov	r13, r1
    1696:	c0 0e       	add	r12, r16
    1698:	d1 1e       	adc	r13, r17
    169a:	8d b7       	in	r24, 0x3d	; 61
    169c:	9e b7       	in	r25, 0x3e	; 62
    169e:	8c 19       	sub	r24, r12
    16a0:	9d 09       	sbc	r25, r13
    16a2:	0f b6       	in	r0, 0x3f	; 63
    16a4:	f8 94       	cli
    16a6:	9e bf       	out	0x3e, r25	; 62
    16a8:	0f be       	out	0x3f, r0	; 63
    16aa:	8d bf       	out	0x3d, r24	; 61
    16ac:	ad b6       	in	r10, 0x3d	; 61
    16ae:	be b6       	in	r11, 0x3e	; 62
    16b0:	08 94       	sec
    16b2:	a1 1c       	adc	r10, r1
    16b4:	b1 1c       	adc	r11, r1

	RNDIS_Set_Complete_t SetMessageResponse;

	SetMessageData.SetMessage.MessageType    = CPU_TO_LE32(REMOTE_NDIS_SET_MSG);
    16b6:	85 e0       	ldi	r24, 0x05	; 5
    16b8:	90 e0       	ldi	r25, 0x00	; 0
    16ba:	a0 e0       	ldi	r26, 0x00	; 0
    16bc:	b0 e0       	ldi	r27, 0x00	; 0
    16be:	ed b7       	in	r30, 0x3d	; 61
    16c0:	fe b7       	in	r31, 0x3e	; 62
    16c2:	81 83       	std	Z+1, r24	; 0x01
    16c4:	92 83       	std	Z+2, r25	; 0x02
    16c6:	a3 83       	std	Z+3, r26	; 0x03
    16c8:	b4 83       	std	Z+4, r27	; 0x04
	SetMessageData.SetMessage.MessageLength  = cpu_to_le32(sizeof(RNDIS_Set_Message_t) + Length);
    16ca:	ee 24       	eor	r14, r14
    16cc:	ff 24       	eor	r15, r15
    16ce:	f5 01       	movw	r30, r10
    16d0:	c4 82       	std	Z+4, r12	; 0x04
    16d2:	d5 82       	std	Z+5, r13	; 0x05
    16d4:	e6 82       	std	Z+6, r14	; 0x06
    16d6:	f7 82       	std	Z+7, r15	; 0x07
	SetMessageData.SetMessage.RequestId      = cpu_to_le32(RNDISInterfaceInfo->State.RequestID++);
    16d8:	f4 01       	movw	r30, r8
    16da:	86 89       	ldd	r24, Z+22	; 0x16
    16dc:	97 89       	ldd	r25, Z+23	; 0x17
    16de:	a0 8d       	ldd	r26, Z+24	; 0x18
    16e0:	b1 8d       	ldd	r27, Z+25	; 0x19
    16e2:	f5 01       	movw	r30, r10
    16e4:	80 87       	std	Z+8, r24	; 0x08
    16e6:	91 87       	std	Z+9, r25	; 0x09
    16e8:	a2 87       	std	Z+10, r26	; 0x0a
    16ea:	b3 87       	std	Z+11, r27	; 0x0b
    16ec:	01 96       	adiw	r24, 0x01	; 1
    16ee:	a1 1d       	adc	r26, r1
    16f0:	b1 1d       	adc	r27, r1
    16f2:	f4 01       	movw	r30, r8
    16f4:	86 8b       	std	Z+22, r24	; 0x16
    16f6:	97 8b       	std	Z+23, r25	; 0x17
    16f8:	a0 8f       	std	Z+24, r26	; 0x18
    16fa:	b1 8f       	std	Z+25, r27	; 0x19

	SetMessageData.SetMessage.Oid            = cpu_to_le32(Oid);
    16fc:	f5 01       	movw	r30, r10
    16fe:	44 87       	std	Z+12, r20	; 0x0c
    1700:	55 87       	std	Z+13, r21	; 0x0d
    1702:	66 87       	std	Z+14, r22	; 0x0e
    1704:	77 87       	std	Z+15, r23	; 0x0f
	SetMessageData.SetMessage.InformationBufferLength = cpu_to_le32(Length);
    1706:	c8 01       	movw	r24, r16
    1708:	a0 e0       	ldi	r26, 0x00	; 0
    170a:	b0 e0       	ldi	r27, 0x00	; 0
    170c:	80 8b       	std	Z+16, r24	; 0x10
    170e:	91 8b       	std	Z+17, r25	; 0x11
    1710:	a2 8b       	std	Z+18, r26	; 0x12
    1712:	b3 8b       	std	Z+19, r27	; 0x13
	SetMessageData.SetMessage.InformationBufferOffset = CPU_TO_LE32(sizeof(RNDIS_Set_Message_t) - sizeof(RNDIS_Message_Header_t));
    1714:	84 e1       	ldi	r24, 0x14	; 20
    1716:	90 e0       	ldi	r25, 0x00	; 0
    1718:	a0 e0       	ldi	r26, 0x00	; 0
    171a:	b0 e0       	ldi	r27, 0x00	; 0
    171c:	84 8b       	std	Z+20, r24	; 0x14
    171e:	95 8b       	std	Z+21, r25	; 0x15
    1720:	a6 8b       	std	Z+22, r26	; 0x16
    1722:	b7 8b       	std	Z+23, r27	; 0x17
	SetMessageData.SetMessage.DeviceVcHandle = CPU_TO_LE32(0);
    1724:	10 8e       	std	Z+24, r1	; 0x18
    1726:	11 8e       	std	Z+25, r1	; 0x19
    1728:	12 8e       	std	Z+26, r1	; 0x1a
    172a:	13 8e       	std	Z+27, r1	; 0x1b

	memcpy(&SetMessageData.ContiguousBuffer, Buffer, Length);
    172c:	4d b7       	in	r20, 0x3d	; 61
    172e:	5e b7       	in	r21, 0x3e	; 62
    1730:	43 5e       	subi	r20, 0xE3	; 227
    1732:	5f 4f       	sbci	r21, 0xFF	; 255
    1734:	ca 01       	movw	r24, r20
    1736:	b9 01       	movw	r22, r18
    1738:	a8 01       	movw	r20, r16
    173a:	c3 d1       	rcall	.+902    	; 0x1ac2 <memcpy>

	if ((ErrorCode = RNDIS_SendEncapsulatedCommand(RNDISInterfaceInfo, &SetMessageData,
    173c:	f5 01       	movw	r30, r10
    173e:	44 81       	ldd	r20, Z+4	; 0x04
    1740:	55 81       	ldd	r21, Z+5	; 0x05
    1742:	c4 01       	movw	r24, r8
    1744:	b5 01       	movw	r22, r10
    1746:	ba de       	rcall	.-652    	; 0x14bc <RNDIS_SendEncapsulatedCommand>
    1748:	28 2f       	mov	r18, r24
    174a:	88 23       	and	r24, r24
    174c:	99 f4       	brne	.+38     	; 0x1774 <RNDIS_Host_SetRNDISProperty+0x116>
	                                               SetMessageData.SetMessage.MessageLength)) != HOST_SENDCONTROL_Successful)
	{
		return ErrorCode;
	}

	if ((ErrorCode = RNDIS_GetEncapsulatedResponse(RNDISInterfaceInfo, &SetMessageResponse,
    174e:	c4 01       	movw	r24, r8
    1750:	be 01       	movw	r22, r28
    1752:	6f 5f       	subi	r22, 0xFF	; 255
    1754:	7f 4f       	sbci	r23, 0xFF	; 255
    1756:	40 e1       	ldi	r20, 0x10	; 16
    1758:	50 e0       	ldi	r21, 0x00	; 0
    175a:	c7 de       	rcall	.-626    	; 0x14ea <RNDIS_GetEncapsulatedResponse>
    175c:	28 2f       	mov	r18, r24
    175e:	88 23       	and	r24, r24
    1760:	49 f4       	brne	.+18     	; 0x1774 <RNDIS_Host_SetRNDISProperty+0x116>
	                                               sizeof(RNDIS_Set_Complete_t))) != HOST_SENDCONTROL_Successful)
	{
		return ErrorCode;
	}

	if (SetMessageResponse.Status != CPU_TO_LE32(REMOTE_NDIS_STATUS_SUCCESS))
    1762:	8d 85       	ldd	r24, Y+13	; 0x0d
    1764:	9e 85       	ldd	r25, Y+14	; 0x0e
    1766:	af 85       	ldd	r26, Y+15	; 0x0f
    1768:	b8 89       	ldd	r27, Y+16	; 0x10
    176a:	00 97       	sbiw	r24, 0x00	; 0
    176c:	a1 05       	cpc	r26, r1
    176e:	b1 05       	cpc	r27, r1
    1770:	09 f0       	breq	.+2      	; 0x1774 <RNDIS_Host_SetRNDISProperty+0x116>
    1772:	20 e8       	ldi	r18, 0x80	; 128
	  return RNDIS_ERROR_LOGICAL_CMD_FAILED;

	return HOST_SENDCONTROL_Successful;
}
    1774:	82 2f       	mov	r24, r18
    1776:	0f b6       	in	r0, 0x3f	; 63
    1778:	f8 94       	cli
    177a:	7e be       	out	0x3e, r7	; 62
    177c:	0f be       	out	0x3f, r0	; 63
    177e:	6d be       	out	0x3d, r6	; 61
    1780:	60 96       	adiw	r28, 0x10	; 16
    1782:	0f b6       	in	r0, 0x3f	; 63
    1784:	f8 94       	cli
    1786:	de bf       	out	0x3e, r29	; 62
    1788:	0f be       	out	0x3f, r0	; 63
    178a:	cd bf       	out	0x3d, r28	; 61
    178c:	cf 91       	pop	r28
    178e:	df 91       	pop	r29
    1790:	1f 91       	pop	r17
    1792:	0f 91       	pop	r16
    1794:	ff 90       	pop	r15
    1796:	ef 90       	pop	r14
    1798:	df 90       	pop	r13
    179a:	cf 90       	pop	r12
    179c:	bf 90       	pop	r11
    179e:	af 90       	pop	r10
    17a0:	9f 90       	pop	r9
    17a2:	8f 90       	pop	r8
    17a4:	7f 90       	pop	r7
    17a6:	6f 90       	pop	r6
    17a8:	08 95       	ret

000017aa <RNDIS_Host_InitializeDevice>:

	return HOST_SENDCONTROL_Successful;
}

uint8_t RNDIS_Host_InitializeDevice(USB_ClassInfo_RNDIS_Host_t* const RNDISInterfaceInfo)
{
    17aa:	0f 93       	push	r16
    17ac:	1f 93       	push	r17
    17ae:	df 93       	push	r29
    17b0:	cf 93       	push	r28
    17b2:	cd b7       	in	r28, 0x3d	; 61
    17b4:	de b7       	in	r29, 0x3e	; 62
    17b6:	cc 54       	subi	r28, 0x4C	; 76
    17b8:	d0 40       	sbci	r29, 0x00	; 0
    17ba:	0f b6       	in	r0, 0x3f	; 63
    17bc:	f8 94       	cli
    17be:	de bf       	out	0x3e, r29	; 62
    17c0:	0f be       	out	0x3f, r0	; 63
    17c2:	cd bf       	out	0x3d, r28	; 61
    17c4:	8c 01       	movw	r16, r24
	uint8_t ErrorCode;

	RNDIS_Initialize_Message_t  InitMessage;
	RNDIS_Initialize_Complete_t InitMessageResponse;

	InitMessage.MessageType     = CPU_TO_LE32(REMOTE_NDIS_INITIALIZE_MSG);
    17c6:	82 e0       	ldi	r24, 0x02	; 2
    17c8:	90 e0       	ldi	r25, 0x00	; 0
    17ca:	a0 e0       	ldi	r26, 0x00	; 0
    17cc:	b0 e0       	ldi	r27, 0x00	; 0
    17ce:	89 83       	std	Y+1, r24	; 0x01
    17d0:	9a 83       	std	Y+2, r25	; 0x02
    17d2:	ab 83       	std	Y+3, r26	; 0x03
    17d4:	bc 83       	std	Y+4, r27	; 0x04
	InitMessage.MessageLength   = CPU_TO_LE32(sizeof(RNDIS_Initialize_Message_t));
    17d6:	88 e1       	ldi	r24, 0x18	; 24
    17d8:	90 e0       	ldi	r25, 0x00	; 0
    17da:	a0 e0       	ldi	r26, 0x00	; 0
    17dc:	b0 e0       	ldi	r27, 0x00	; 0
    17de:	8d 83       	std	Y+5, r24	; 0x05
    17e0:	9e 83       	std	Y+6, r25	; 0x06
    17e2:	af 83       	std	Y+7, r26	; 0x07
    17e4:	b8 87       	std	Y+8, r27	; 0x08
	InitMessage.RequestId       = cpu_to_le32(RNDISInterfaceInfo->State.RequestID++);
    17e6:	f8 01       	movw	r30, r16
    17e8:	86 89       	ldd	r24, Z+22	; 0x16
    17ea:	97 89       	ldd	r25, Z+23	; 0x17
    17ec:	a0 8d       	ldd	r26, Z+24	; 0x18
    17ee:	b1 8d       	ldd	r27, Z+25	; 0x19
    17f0:	89 87       	std	Y+9, r24	; 0x09
    17f2:	9a 87       	std	Y+10, r25	; 0x0a
    17f4:	ab 87       	std	Y+11, r26	; 0x0b
    17f6:	bc 87       	std	Y+12, r27	; 0x0c
    17f8:	01 96       	adiw	r24, 0x01	; 1
    17fa:	a1 1d       	adc	r26, r1
    17fc:	b1 1d       	adc	r27, r1
    17fe:	86 8b       	std	Z+22, r24	; 0x16
    1800:	97 8b       	std	Z+23, r25	; 0x17
    1802:	a0 8f       	std	Z+24, r26	; 0x18
    1804:	b1 8f       	std	Z+25, r27	; 0x19

	InitMessage.MajorVersion    = CPU_TO_LE32(REMOTE_NDIS_VERSION_MAJOR);
    1806:	81 e0       	ldi	r24, 0x01	; 1
    1808:	90 e0       	ldi	r25, 0x00	; 0
    180a:	a0 e0       	ldi	r26, 0x00	; 0
    180c:	b0 e0       	ldi	r27, 0x00	; 0
    180e:	8d 87       	std	Y+13, r24	; 0x0d
    1810:	9e 87       	std	Y+14, r25	; 0x0e
    1812:	af 87       	std	Y+15, r26	; 0x0f
    1814:	b8 8b       	std	Y+16, r27	; 0x10
	InitMessage.MinorVersion    = CPU_TO_LE32(REMOTE_NDIS_VERSION_MINOR);
    1816:	19 8a       	std	Y+17, r1	; 0x11
    1818:	1a 8a       	std	Y+18, r1	; 0x12
    181a:	1b 8a       	std	Y+19, r1	; 0x13
    181c:	1c 8a       	std	Y+20, r1	; 0x14
	InitMessage.MaxTransferSize = cpu_to_le32(RNDISInterfaceInfo->Config.HostMaxPacketSize);
    181e:	86 81       	ldd	r24, Z+6	; 0x06
    1820:	97 81       	ldd	r25, Z+7	; 0x07
    1822:	a0 85       	ldd	r26, Z+8	; 0x08
    1824:	b1 85       	ldd	r27, Z+9	; 0x09
    1826:	8d 8b       	std	Y+21, r24	; 0x15
    1828:	9e 8b       	std	Y+22, r25	; 0x16
    182a:	af 8b       	std	Y+23, r26	; 0x17
    182c:	b8 8f       	std	Y+24, r27	; 0x18

	if ((ErrorCode = RNDIS_SendEncapsulatedCommand(RNDISInterfaceInfo, &InitMessage,
    182e:	c8 01       	movw	r24, r16
    1830:	be 01       	movw	r22, r28
    1832:	6f 5f       	subi	r22, 0xFF	; 255
    1834:	7f 4f       	sbci	r23, 0xFF	; 255
    1836:	48 e1       	ldi	r20, 0x18	; 24
    1838:	50 e0       	ldi	r21, 0x00	; 0
    183a:	40 de       	rcall	.-896    	; 0x14bc <RNDIS_SendEncapsulatedCommand>
    183c:	28 2f       	mov	r18, r24
    183e:	88 23       	and	r24, r24
    1840:	f9 f4       	brne	.+62     	; 0x1880 <RNDIS_Host_InitializeDevice+0xd6>
	                                               sizeof(RNDIS_Initialize_Message_t))) != HOST_SENDCONTROL_Successful)
	{
		return ErrorCode;
	}

	if ((ErrorCode = RNDIS_GetEncapsulatedResponse(RNDISInterfaceInfo, &InitMessageResponse,
    1842:	c8 01       	movw	r24, r16
    1844:	be 01       	movw	r22, r28
    1846:	67 5e       	subi	r22, 0xE7	; 231
    1848:	7f 4f       	sbci	r23, 0xFF	; 255
    184a:	44 e3       	ldi	r20, 0x34	; 52
    184c:	50 e0       	ldi	r21, 0x00	; 0
    184e:	4d de       	rcall	.-870    	; 0x14ea <RNDIS_GetEncapsulatedResponse>
    1850:	28 2f       	mov	r18, r24
    1852:	88 23       	and	r24, r24
    1854:	a9 f4       	brne	.+42     	; 0x1880 <RNDIS_Host_InitializeDevice+0xd6>
	                                               sizeof(RNDIS_Initialize_Complete_t))) != HOST_SENDCONTROL_Successful)
	{
		return ErrorCode;
	}

	if (InitMessageResponse.Status != CPU_TO_LE32(REMOTE_NDIS_STATUS_SUCCESS))
    1856:	8d a1       	ldd	r24, Y+37	; 0x25
    1858:	9e a1       	ldd	r25, Y+38	; 0x26
    185a:	af a1       	ldd	r26, Y+39	; 0x27
    185c:	b8 a5       	ldd	r27, Y+40	; 0x28
    185e:	00 97       	sbiw	r24, 0x00	; 0
    1860:	a1 05       	cpc	r26, r1
    1862:	b1 05       	cpc	r27, r1
    1864:	11 f0       	breq	.+4      	; 0x186a <RNDIS_Host_InitializeDevice+0xc0>
    1866:	20 e8       	ldi	r18, 0x80	; 128
    1868:	0b c0       	rjmp	.+22     	; 0x1880 <RNDIS_Host_InitializeDevice+0xd6>
	  return RNDIS_ERROR_LOGICAL_CMD_FAILED;

	RNDISInterfaceInfo->State.DeviceMaxPacketSize = le32_to_cpu(InitMessageResponse.MaxTransferSize);
    186a:	fe 01       	movw	r30, r28
    186c:	fd 96       	adiw	r30, 0x3d	; 61
    186e:	80 81       	ld	r24, Z
    1870:	91 81       	ldd	r25, Z+1	; 0x01
    1872:	a2 81       	ldd	r26, Z+2	; 0x02
    1874:	b3 81       	ldd	r27, Z+3	; 0x03
    1876:	f8 01       	movw	r30, r16
    1878:	82 8b       	std	Z+18, r24	; 0x12
    187a:	93 8b       	std	Z+19, r25	; 0x13
    187c:	a4 8b       	std	Z+20, r26	; 0x14
    187e:	b5 8b       	std	Z+21, r27	; 0x15

	return HOST_SENDCONTROL_Successful;
}
    1880:	82 2f       	mov	r24, r18
    1882:	c4 5b       	subi	r28, 0xB4	; 180
    1884:	df 4f       	sbci	r29, 0xFF	; 255
    1886:	0f b6       	in	r0, 0x3f	; 63
    1888:	f8 94       	cli
    188a:	de bf       	out	0x3e, r29	; 62
    188c:	0f be       	out	0x3f, r0	; 63
    188e:	cd bf       	out	0x3d, r28	; 61
    1890:	cf 91       	pop	r28
    1892:	df 91       	pop	r29
    1894:	1f 91       	pop	r17
    1896:	0f 91       	pop	r16
    1898:	08 95       	ret

0000189a <RNDIS_Host_ConfigurePipes>:
#include "RNDIS.h"

uint8_t RNDIS_Host_ConfigurePipes(USB_ClassInfo_RNDIS_Host_t* const RNDISInterfaceInfo,
                                  uint16_t ConfigDescriptorSize,
                                  void* ConfigDescriptorData)
{
    189a:	4f 92       	push	r4
    189c:	5f 92       	push	r5
    189e:	6f 92       	push	r6
    18a0:	7f 92       	push	r7
    18a2:	8f 92       	push	r8
    18a4:	9f 92       	push	r9
    18a6:	af 92       	push	r10
    18a8:	bf 92       	push	r11
    18aa:	cf 92       	push	r12
    18ac:	df 92       	push	r13
    18ae:	ef 92       	push	r14
    18b0:	ff 92       	push	r15
    18b2:	0f 93       	push	r16
    18b4:	1f 93       	push	r17
    18b6:	df 93       	push	r29
    18b8:	cf 93       	push	r28
    18ba:	00 d0       	rcall	.+0      	; 0x18bc <RNDIS_Host_ConfigurePipes+0x22>
    18bc:	00 d0       	rcall	.+0      	; 0x18be <RNDIS_Host_ConfigurePipes+0x24>
    18be:	0f 92       	push	r0
    18c0:	cd b7       	in	r28, 0x3d	; 61
    18c2:	de b7       	in	r29, 0x3e	; 62
    18c4:	6c 01       	movw	r12, r24
    18c6:	7a 83       	std	Y+2, r23	; 0x02
    18c8:	69 83       	std	Y+1, r22	; 0x01
    18ca:	5c 83       	std	Y+4, r21	; 0x04
    18cc:	4b 83       	std	Y+3, r20	; 0x03
	USB_Descriptor_Endpoint_t*  DataINEndpoint        = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint       = NULL;
	USB_Descriptor_Endpoint_t*  NotificationEndpoint  = NULL;
	USB_Descriptor_Interface_t* RNDISControlInterface = NULL;

	memset(&RNDISInterfaceInfo->State, 0x00, sizeof(RNDISInterfaceInfo->State));
    18ce:	0a 96       	adiw	r24, 0x0a	; 10
    18d0:	fc 01       	movw	r30, r24
    18d2:	80 e1       	ldi	r24, 0x10	; 16
    18d4:	df 01       	movw	r26, r30
    18d6:	1d 92       	st	X+, r1
    18d8:	8a 95       	dec	r24
    18da:	e9 f7       	brne	.-6      	; 0x18d6 <RNDIS_Host_ConfigurePipes+0x3c>

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
    18dc:	eb 81       	ldd	r30, Y+3	; 0x03
    18de:	fc 81       	ldd	r31, Y+4	; 0x04
    18e0:	81 81       	ldd	r24, Z+1	; 0x01
    18e2:	82 30       	cpi	r24, 0x02	; 2
    18e4:	11 f0       	breq	.+4      	; 0x18ea <RNDIS_Host_ConfigurePipes+0x50>
    18e6:	81 e0       	ldi	r24, 0x01	; 1
    18e8:	a4 c0       	rjmp	.+328    	; 0x1a32 <RNDIS_Host_ConfigurePipes+0x198>
	  return RNDIS_ENUMERROR_InvalidConfigDescriptor;

	RNDISControlInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);
    18ea:	2f 01       	movw	r4, r30
    18ec:	66 24       	eor	r6, r6
    18ee:	77 24       	eor	r7, r7
    18f0:	88 24       	eor	r8, r8
    18f2:	99 24       	eor	r9, r9
    18f4:	aa 24       	eor	r10, r10
    18f6:	bb 24       	eor	r11, r11

	while (!(DataINEndpoint) || !(DataOUTEndpoint) || !(NotificationEndpoint))
	{
		if (!(RNDISControlInterface) ||
    18f8:	f3 e0       	ldi	r31, 0x03	; 3
    18fa:	ef 2e       	mov	r14, r31
    18fc:	f1 2c       	mov	r15, r1
    18fe:	ec 0e       	add	r14, r28
    1900:	fd 1e       	adc	r15, r29
    1902:	8e 01       	movw	r16, r28
    1904:	0f 5f       	subi	r16, 0xFF	; 255
    1906:	1f 4f       	sbci	r17, 0xFF	; 255
    1908:	04 c0       	rjmp	.+8      	; 0x1912 <RNDIS_Host_ConfigurePipes+0x78>
	memset(&RNDISInterfaceInfo->State, 0x00, sizeof(RNDISInterfaceInfo->State));

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return RNDIS_ENUMERROR_InvalidConfigDescriptor;

	RNDISControlInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);
    190a:	88 24       	eor	r8, r8
    190c:	99 24       	eor	r9, r9
    190e:	66 24       	eor	r6, r6
    1910:	77 24       	eor	r7, r7

	while (!(DataINEndpoint) || !(DataOUTEndpoint) || !(NotificationEndpoint))
	{
		if (!(RNDISControlInterface) ||
    1912:	41 14       	cp	r4, r1
    1914:	51 04       	cpc	r5, r1
    1916:	39 f0       	breq	.+14     	; 0x1926 <RNDIS_Host_ConfigurePipes+0x8c>
    1918:	c8 01       	movw	r24, r16
    191a:	b7 01       	movw	r22, r14
    191c:	4f e2       	ldi	r20, 0x2F	; 47
    191e:	5d e0       	ldi	r21, 0x0D	; 13
    1920:	14 db       	rcall	.-2520   	; 0xf4a <USB_GetNextDescriptorComp>
    1922:	88 23       	and	r24, r24
    1924:	b1 f0       	breq	.+44     	; 0x1952 <RNDIS_Host_ConfigurePipes+0xb8>
		    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
		                              DCOMP_RNDIS_Host_NextRNDISInterfaceEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			if (NotificationEndpoint)
    1926:	a1 14       	cp	r10, r1
    1928:	b1 04       	cpc	r11, r1
    192a:	41 f0       	breq	.+16     	; 0x193c <RNDIS_Host_ConfigurePipes+0xa2>
			{
				if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    192c:	c8 01       	movw	r24, r16
    192e:	b7 01       	movw	r22, r14
    1930:	4c eb       	ldi	r20, 0xBC	; 188
    1932:	59 e0       	ldi	r21, 0x09	; 9
    1934:	0a db       	rcall	.-2540   	; 0xf4a <USB_GetNextDescriptorComp>
    1936:	88 23       	and	r24, r24
    1938:	41 f3       	breq	.-48     	; 0x190a <RNDIS_Host_ConfigurePipes+0x70>
    193a:	7a c0       	rjmp	.+244    	; 0x1a30 <RNDIS_Host_ConfigurePipes+0x196>
				DataINEndpoint  = NULL;
				DataOUTEndpoint = NULL;
			}
			else
			{
				if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    193c:	c8 01       	movw	r24, r16
    193e:	b7 01       	movw	r22, r14
    1940:	4b ea       	ldi	r20, 0xAB	; 171
    1942:	59 e0       	ldi	r21, 0x09	; 9
    1944:	02 db       	rcall	.-2556   	; 0xf4a <USB_GetNextDescriptorComp>
    1946:	88 23       	and	r24, r24
    1948:	09 f0       	breq	.+2      	; 0x194c <RNDIS_Host_ConfigurePipes+0xb2>
    194a:	72 c0       	rjmp	.+228    	; 0x1a30 <RNDIS_Host_ConfigurePipes+0x196>
											  DCOMP_RNDIS_Host_NextRNDISControlInterface) != DESCRIPTOR_SEARCH_COMP_Found)
				{
					return RNDIS_ENUMERROR_NoCompatibleInterfaceFound;
				}

				RNDISControlInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);
    194c:	4b 80       	ldd	r4, Y+3	; 0x03
    194e:	5c 80       	ldd	r5, Y+4	; 0x04
    1950:	0e c0       	rjmp	.+28     	; 0x196e <RNDIS_Host_ConfigurePipes+0xd4>
			}

			continue;
		}

		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Endpoint_t);
    1952:	eb 81       	ldd	r30, Y+3	; 0x03
    1954:	fc 81       	ldd	r31, Y+4	; 0x04

		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
    1956:	82 81       	ldd	r24, Z+2	; 0x02
    1958:	87 fd       	sbrc	r24, 7
    195a:	02 c0       	rjmp	.+4      	; 0x1960 <RNDIS_Host_ConfigurePipes+0xc6>
    195c:	4f 01       	movw	r8, r30
    195e:	07 c0       	rjmp	.+14     	; 0x196e <RNDIS_Host_ConfigurePipes+0xd4>
		{
			if ((EndpointData->Attributes & EP_TYPE_MASK) == EP_TYPE_INTERRUPT)
    1960:	83 81       	ldd	r24, Z+3	; 0x03
    1962:	83 70       	andi	r24, 0x03	; 3
    1964:	83 30       	cpi	r24, 0x03	; 3
    1966:	11 f0       	breq	.+4      	; 0x196c <RNDIS_Host_ConfigurePipes+0xd2>
    1968:	3f 01       	movw	r6, r30
    196a:	01 c0       	rjmp	.+2      	; 0x196e <RNDIS_Host_ConfigurePipes+0xd4>
    196c:	5f 01       	movw	r10, r30
	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return RNDIS_ENUMERROR_InvalidConfigDescriptor;

	RNDISControlInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);

	while (!(DataINEndpoint) || !(DataOUTEndpoint) || !(NotificationEndpoint))
    196e:	61 14       	cp	r6, r1
    1970:	71 04       	cpc	r7, r1
    1972:	79 f2       	breq	.-98     	; 0x1912 <RNDIS_Host_ConfigurePipes+0x78>
    1974:	81 14       	cp	r8, r1
    1976:	91 04       	cpc	r9, r1
    1978:	61 f2       	breq	.-104    	; 0x1912 <RNDIS_Host_ConfigurePipes+0x78>
    197a:	a1 14       	cp	r10, r1
    197c:	b1 04       	cpc	r11, r1
    197e:	49 f2       	breq	.-110    	; 0x1912 <RNDIS_Host_ConfigurePipes+0x78>
    1980:	91 e0       	ldi	r25, 0x01	; 1
		uint8_t  Token;
		uint8_t  EndpointAddress;
		uint8_t  InterruptPeriod;
		bool     DoubleBanked;

		if (PipeNum == RNDISInterfaceInfo->Config.DataINPipeNumber)
    1982:	f6 01       	movw	r30, r12
    1984:	80 81       	ld	r24, Z
    1986:	98 17       	cp	r25, r24
    1988:	69 f4       	brne	.+26     	; 0x19a4 <RNDIS_Host_ConfigurePipes+0x10a>
		{
			Size            = le16_to_cpu(DataINEndpoint->EndpointSize);
    198a:	d3 01       	movw	r26, r6
    198c:	14 96       	adiw	r26, 0x04	; 4
    198e:	0d 91       	ld	r16, X+
    1990:	1c 91       	ld	r17, X
    1992:	15 97       	sbiw	r26, 0x05	; 5
			EndpointAddress = DataINEndpoint->EndpointAddress;
    1994:	12 96       	adiw	r26, 0x02	; 2
    1996:	2c 91       	ld	r18, X
			Token           = PIPE_TOKEN_IN;
			Type            = EP_TYPE_BULK;
			DoubleBanked    = RNDISInterfaceInfo->Config.DataINPipeDoubleBank;
    1998:	81 81       	ldd	r24, Z+1	; 0x01
			InterruptPeriod = 0;

			RNDISInterfaceInfo->State.DataINPipeSize = DataINEndpoint->EndpointSize;
    199a:	15 87       	std	Z+13, r17	; 0x0d
    199c:	04 87       	std	Z+12, r16	; 0x0c
    199e:	62 e0       	ldi	r22, 0x02	; 2
    19a0:	40 e1       	ldi	r20, 0x10	; 16
    19a2:	10 c0       	rjmp	.+32     	; 0x19c4 <RNDIS_Host_ConfigurePipes+0x12a>
		}
		else if (PipeNum == RNDISInterfaceInfo->Config.DataOUTPipeNumber)
    19a4:	f6 01       	movw	r30, r12
    19a6:	82 81       	ldd	r24, Z+2	; 0x02
    19a8:	98 17       	cp	r25, r24
    19aa:	71 f4       	brne	.+28     	; 0x19c8 <RNDIS_Host_ConfigurePipes+0x12e>
		{
			Size            = le16_to_cpu(DataOUTEndpoint->EndpointSize);
    19ac:	d4 01       	movw	r26, r8
    19ae:	14 96       	adiw	r26, 0x04	; 4
    19b0:	0d 91       	ld	r16, X+
    19b2:	1c 91       	ld	r17, X
    19b4:	15 97       	sbiw	r26, 0x05	; 5
			EndpointAddress = DataOUTEndpoint->EndpointAddress;
    19b6:	12 96       	adiw	r26, 0x02	; 2
    19b8:	2c 91       	ld	r18, X
			Token           = PIPE_TOKEN_OUT;
			Type            = EP_TYPE_BULK;
			DoubleBanked    = RNDISInterfaceInfo->Config.DataOUTPipeDoubleBank;
    19ba:	83 81       	ldd	r24, Z+3	; 0x03
			InterruptPeriod = 0;

			RNDISInterfaceInfo->State.DataOUTPipeSize = DataOUTEndpoint->EndpointSize;
    19bc:	17 87       	std	Z+15, r17	; 0x0f
    19be:	06 87       	std	Z+14, r16	; 0x0e
    19c0:	62 e0       	ldi	r22, 0x02	; 2
    19c2:	40 e2       	ldi	r20, 0x20	; 32
    19c4:	ff 24       	eor	r15, r15
    19c6:	13 c0       	rjmp	.+38     	; 0x19ee <RNDIS_Host_ConfigurePipes+0x154>
		}
		else if (PipeNum == RNDISInterfaceInfo->Config.NotificationPipeNumber)
    19c8:	f6 01       	movw	r30, r12
    19ca:	84 81       	ldd	r24, Z+4	; 0x04
    19cc:	98 17       	cp	r25, r24
    19ce:	09 f5       	brne	.+66     	; 0x1a12 <RNDIS_Host_ConfigurePipes+0x178>
		{
			Size            = le16_to_cpu(NotificationEndpoint->EndpointSize);
    19d0:	d5 01       	movw	r26, r10
    19d2:	14 96       	adiw	r26, 0x04	; 4
    19d4:	0d 91       	ld	r16, X+
    19d6:	1c 91       	ld	r17, X
    19d8:	15 97       	sbiw	r26, 0x05	; 5
			EndpointAddress = NotificationEndpoint->EndpointAddress;
    19da:	12 96       	adiw	r26, 0x02	; 2
    19dc:	2c 91       	ld	r18, X
    19de:	12 97       	sbiw	r26, 0x02	; 2
			Token           = PIPE_TOKEN_IN;
			Type            = EP_TYPE_INTERRUPT;
			DoubleBanked    = RNDISInterfaceInfo->Config.NotificationPipeDoubleBank;
    19e0:	85 81       	ldd	r24, Z+5	; 0x05
			InterruptPeriod = NotificationEndpoint->PollingIntervalMS;
    19e2:	16 96       	adiw	r26, 0x06	; 6
    19e4:	fc 90       	ld	r15, X

			RNDISInterfaceInfo->State.NotificationPipeSize = NotificationEndpoint->EndpointSize;
    19e6:	11 8b       	std	Z+17, r17	; 0x11
    19e8:	00 8b       	std	Z+16, r16	; 0x10
    19ea:	63 e0       	ldi	r22, 0x03	; 3
    19ec:	40 e1       	ldi	r20, 0x10	; 16
		else
		{
			continue;
		}
		
		if (!(Pipe_ConfigurePipe(PipeNum, Type, Token, EndpointAddress, Size,
    19ee:	88 23       	and	r24, r24
    19f0:	11 f4       	brne	.+4      	; 0x19f6 <RNDIS_Host_ConfigurePipes+0x15c>
    19f2:	30 e0       	ldi	r19, 0x00	; 0
    19f4:	01 c0       	rjmp	.+2      	; 0x19f8 <RNDIS_Host_ConfigurePipes+0x15e>
    19f6:	34 e0       	ldi	r19, 0x04	; 4
    19f8:	89 2f       	mov	r24, r25
    19fa:	e3 2e       	mov	r14, r19
    19fc:	9d 83       	std	Y+5, r25	; 0x05
    19fe:	32 d8       	rcall	.-3996   	; 0xa64 <Pipe_ConfigurePipe>
    1a00:	9d 81       	ldd	r25, Y+5	; 0x05
    1a02:	88 23       	and	r24, r24
    1a04:	11 f4       	brne	.+4      	; 0x1a0a <RNDIS_Host_ConfigurePipes+0x170>
    1a06:	83 e0       	ldi	r24, 0x03	; 3
    1a08:	14 c0       	rjmp	.+40     	; 0x1a32 <RNDIS_Host_ConfigurePipes+0x198>
		                         DoubleBanked ? PIPE_BANK_DOUBLE : PIPE_BANK_SINGLE)))
		{
			return CDC_ENUMERROR_PipeConfigurationFailed;
		}
		
		if (InterruptPeriod)
    1a0a:	ff 20       	and	r15, r15
    1a0c:	11 f0       	breq	.+4      	; 0x1a12 <RNDIS_Host_ConfigurePipes+0x178>
			 *  \param[in] Milliseconds  Number of milliseconds between each pipe poll.
			 */
			static inline void Pipe_SetInterruptPeriod(const uint8_t Milliseconds) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInterruptPeriod(const uint8_t Milliseconds)
			{
				UPCFG2X = Milliseconds;
    1a0e:	f0 92 ad 00 	sts	0x00AD, r15
		{
			DataOUTEndpoint = EndpointData;
		}
	}

	for (uint8_t PipeNum = 1; PipeNum < PIPE_TOTAL_PIPES; PipeNum++)
    1a12:	9f 5f       	subi	r25, 0xFF	; 255
    1a14:	97 30       	cpi	r25, 0x07	; 7
    1a16:	09 f0       	breq	.+2      	; 0x1a1a <RNDIS_Host_ConfigurePipes+0x180>
    1a18:	b4 cf       	rjmp	.-152    	; 0x1982 <RNDIS_Host_ConfigurePipes+0xe8>
		
		if (InterruptPeriod)
		  Pipe_SetInterruptPeriod(InterruptPeriod);
	}

	RNDISInterfaceInfo->State.ControlInterfaceNumber = RNDISControlInterface->InterfaceNumber;
    1a1a:	f2 01       	movw	r30, r4
    1a1c:	82 81       	ldd	r24, Z+2	; 0x02
    1a1e:	d6 01       	movw	r26, r12
    1a20:	1b 96       	adiw	r26, 0x0b	; 11
    1a22:	8c 93       	st	X, r24
    1a24:	1b 97       	sbiw	r26, 0x0b	; 11
	RNDISInterfaceInfo->State.IsActive = true;
    1a26:	81 e0       	ldi	r24, 0x01	; 1
    1a28:	1a 96       	adiw	r26, 0x0a	; 10
    1a2a:	8c 93       	st	X, r24
    1a2c:	80 e0       	ldi	r24, 0x00	; 0
    1a2e:	01 c0       	rjmp	.+2      	; 0x1a32 <RNDIS_Host_ConfigurePipes+0x198>

	return RNDIS_ENUMERROR_NoError;
    1a30:	82 e0       	ldi	r24, 0x02	; 2
}
    1a32:	0f 90       	pop	r0
    1a34:	0f 90       	pop	r0
    1a36:	0f 90       	pop	r0
    1a38:	0f 90       	pop	r0
    1a3a:	0f 90       	pop	r0
    1a3c:	cf 91       	pop	r28
    1a3e:	df 91       	pop	r29
    1a40:	1f 91       	pop	r17
    1a42:	0f 91       	pop	r16
    1a44:	ff 90       	pop	r15
    1a46:	ef 90       	pop	r14
    1a48:	df 90       	pop	r13
    1a4a:	cf 90       	pop	r12
    1a4c:	bf 90       	pop	r11
    1a4e:	af 90       	pop	r10
    1a50:	9f 90       	pop	r9
    1a52:	8f 90       	pop	r8
    1a54:	7f 90       	pop	r7
    1a56:	6f 90       	pop	r6
    1a58:	5f 90       	pop	r5
    1a5a:	4f 90       	pop	r4
    1a5c:	08 95       	ret

00001a5e <DCOMP_RNDIS_Host_NextRNDISInterfaceEndpoint>:

	return DESCRIPTOR_SEARCH_NotFound;
}

static uint8_t DCOMP_RNDIS_Host_NextRNDISInterfaceEndpoint(void* const CurrentDescriptor)
{
    1a5e:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Endpoint)
    1a60:	81 81       	ldd	r24, Z+1	; 0x01
    1a62:	85 30       	cpi	r24, 0x05	; 5
    1a64:	51 f4       	brne	.+20     	; 0x1a7a <DCOMP_RNDIS_Host_NextRNDISInterfaceEndpoint+0x1c>
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		uint8_t EndpointType = (Endpoint->Attributes & EP_TYPE_MASK);

		if (((EndpointType == EP_TYPE_BULK) || (EndpointType == EP_TYPE_INTERRUPT)) &&
    1a66:	83 81       	ldd	r24, Z+3	; 0x03
    1a68:	83 70       	andi	r24, 0x03	; 3
    1a6a:	82 50       	subi	r24, 0x02	; 2
    1a6c:	82 30       	cpi	r24, 0x02	; 2
    1a6e:	48 f4       	brcc	.+18     	; 0x1a82 <DCOMP_RNDIS_Host_NextRNDISInterfaceEndpoint+0x24>
    1a70:	82 81       	ldd	r24, Z+2	; 0x02
    1a72:	6a d8       	rcall	.-3884   	; 0xb48 <Pipe_IsEndpointBound>
    1a74:	88 23       	and	r24, r24
    1a76:	29 f4       	brne	.+10     	; 0x1a82 <DCOMP_RNDIS_Host_NextRNDISInterfaceEndpoint+0x24>
    1a78:	08 95       	ret
		    !(Pipe_IsEndpointBound(Endpoint->EndpointAddress)))
		{
			return DESCRIPTOR_SEARCH_Found;
		}
	}
	else if (Header->Type == DTYPE_Interface)
    1a7a:	84 30       	cpi	r24, 0x04	; 4
    1a7c:	11 f4       	brne	.+4      	; 0x1a82 <DCOMP_RNDIS_Host_NextRNDISInterfaceEndpoint+0x24>
    1a7e:	81 e0       	ldi	r24, 0x01	; 1
    1a80:	08 95       	ret
    1a82:	82 e0       	ldi	r24, 0x02	; 2
	{
		return DESCRIPTOR_SEARCH_Fail;
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    1a84:	08 95       	ret

00001a86 <Serial_putchar>:

FILE USARTSerialStream;

int Serial_putchar(char DataByte,
                   FILE *Stream)
{
    1a86:	98 2f       	mov	r25, r24
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
    1a88:	80 91 c8 00 	lds	r24, 0x00C8
    1a8c:	85 ff       	sbrs	r24, 5
    1a8e:	fc cf       	rjmp	.-8      	; 0x1a88 <Serial_putchar+0x2>
				UDR1 = DataByte;
    1a90:	90 93 ce 00 	sts	0x00CE, r25
	(void)Stream;

	Serial_SendByte(DataByte);
	return 0;
}
    1a94:	80 e0       	ldi	r24, 0x00	; 0
    1a96:	90 e0       	ldi	r25, 0x00	; 0
    1a98:	08 95       	ret

00001a9a <Serial_getchar>:
			 *  \return Boolean \c true if a character has been received, \c false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    1a9a:	80 91 c8 00 	lds	r24, 0x00C8

int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    1a9e:	87 fd       	sbrc	r24, 7
    1aa0:	03 c0       	rjmp	.+6      	; 0x1aa8 <Serial_getchar+0xe>
    1aa2:	2e ef       	ldi	r18, 0xFE	; 254
    1aa4:	3f ef       	ldi	r19, 0xFF	; 255
    1aa6:	0b c0       	rjmp	.+22     	; 0x1abe <Serial_getchar+0x24>
    1aa8:	80 91 c8 00 	lds	r24, 0x00C8
			 *  \return Next byte received from the USART, or a negative value if no byte has been received.
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
    1aac:	87 fd       	sbrc	r24, 7
    1aae:	03 c0       	rjmp	.+6      	; 0x1ab6 <Serial_getchar+0x1c>
    1ab0:	2f ef       	ldi	r18, 0xFF	; 255
    1ab2:	3f ef       	ldi	r19, 0xFF	; 255
    1ab4:	04 c0       	rjmp	.+8      	; 0x1abe <Serial_getchar+0x24>
				  return -1;
				
				return UDR1;
    1ab6:	80 91 ce 00 	lds	r24, 0x00CE
    1aba:	28 2f       	mov	r18, r24
    1abc:	30 e0       	ldi	r19, 0x00	; 0
	  return _FDEV_EOF;

	return Serial_ReceiveByte();
}
    1abe:	c9 01       	movw	r24, r18
    1ac0:	08 95       	ret

00001ac2 <memcpy>:
    1ac2:	fb 01       	movw	r30, r22
    1ac4:	dc 01       	movw	r26, r24
    1ac6:	02 c0       	rjmp	.+4      	; 0x1acc <memcpy+0xa>
    1ac8:	01 90       	ld	r0, Z+
    1aca:	0d 92       	st	X+, r0
    1acc:	41 50       	subi	r20, 0x01	; 1
    1ace:	50 40       	sbci	r21, 0x00	; 0
    1ad0:	d8 f7       	brcc	.-10     	; 0x1ac8 <memcpy+0x6>
    1ad2:	08 95       	ret

00001ad4 <printf>:
    1ad4:	df 93       	push	r29
    1ad6:	cf 93       	push	r28
    1ad8:	cd b7       	in	r28, 0x3d	; 61
    1ada:	de b7       	in	r29, 0x3e	; 62
    1adc:	fe 01       	movw	r30, r28
    1ade:	35 96       	adiw	r30, 0x05	; 5
    1ae0:	61 91       	ld	r22, Z+
    1ae2:	71 91       	ld	r23, Z+
    1ae4:	80 91 52 05 	lds	r24, 0x0552
    1ae8:	90 91 53 05 	lds	r25, 0x0553
    1aec:	af 01       	movw	r20, r30
    1aee:	5a d0       	rcall	.+180    	; 0x1ba4 <vfprintf>
    1af0:	cf 91       	pop	r28
    1af2:	df 91       	pop	r29
    1af4:	08 95       	ret

00001af6 <printf_P>:
    1af6:	df 93       	push	r29
    1af8:	cf 93       	push	r28
    1afa:	cd b7       	in	r28, 0x3d	; 61
    1afc:	de b7       	in	r29, 0x3e	; 62
    1afe:	fe 01       	movw	r30, r28
    1b00:	35 96       	adiw	r30, 0x05	; 5
    1b02:	61 91       	ld	r22, Z+
    1b04:	71 91       	ld	r23, Z+
    1b06:	a0 91 52 05 	lds	r26, 0x0552
    1b0a:	b0 91 53 05 	lds	r27, 0x0553
    1b0e:	13 96       	adiw	r26, 0x03	; 3
    1b10:	8c 91       	ld	r24, X
    1b12:	13 97       	sbiw	r26, 0x03	; 3
    1b14:	88 60       	ori	r24, 0x08	; 8
    1b16:	13 96       	adiw	r26, 0x03	; 3
    1b18:	8c 93       	st	X, r24
    1b1a:	80 91 52 05 	lds	r24, 0x0552
    1b1e:	90 91 53 05 	lds	r25, 0x0553
    1b22:	af 01       	movw	r20, r30
    1b24:	3f d0       	rcall	.+126    	; 0x1ba4 <vfprintf>
    1b26:	e0 91 52 05 	lds	r30, 0x0552
    1b2a:	f0 91 53 05 	lds	r31, 0x0553
    1b2e:	23 81       	ldd	r18, Z+3	; 0x03
    1b30:	27 7f       	andi	r18, 0xF7	; 247
    1b32:	23 83       	std	Z+3, r18	; 0x03
    1b34:	cf 91       	pop	r28
    1b36:	df 91       	pop	r29
    1b38:	08 95       	ret

00001b3a <puts_P>:
    1b3a:	0f 93       	push	r16
    1b3c:	1f 93       	push	r17
    1b3e:	cf 93       	push	r28
    1b40:	df 93       	push	r29
    1b42:	ec 01       	movw	r28, r24
    1b44:	e0 91 52 05 	lds	r30, 0x0552
    1b48:	f0 91 53 05 	lds	r31, 0x0553
    1b4c:	83 81       	ldd	r24, Z+3	; 0x03
    1b4e:	81 ff       	sbrs	r24, 1
    1b50:	21 c0       	rjmp	.+66     	; 0x1b94 <puts_P+0x5a>
    1b52:	00 e0       	ldi	r16, 0x00	; 0
    1b54:	10 e0       	ldi	r17, 0x00	; 0
    1b56:	0e c0       	rjmp	.+28     	; 0x1b74 <puts_P+0x3a>
    1b58:	e0 91 52 05 	lds	r30, 0x0552
    1b5c:	f0 91 53 05 	lds	r31, 0x0553
    1b60:	20 85       	ldd	r18, Z+8	; 0x08
    1b62:	31 85       	ldd	r19, Z+9	; 0x09
    1b64:	bf 01       	movw	r22, r30
    1b66:	f9 01       	movw	r30, r18
    1b68:	09 95       	icall
    1b6a:	89 2b       	or	r24, r25
    1b6c:	11 f0       	breq	.+4      	; 0x1b72 <puts_P+0x38>
    1b6e:	0f ef       	ldi	r16, 0xFF	; 255
    1b70:	1f ef       	ldi	r17, 0xFF	; 255
    1b72:	21 96       	adiw	r28, 0x01	; 1
    1b74:	fe 01       	movw	r30, r28
    1b76:	84 91       	lpm	r24, Z+
    1b78:	88 23       	and	r24, r24
    1b7a:	71 f7       	brne	.-36     	; 0x1b58 <puts_P+0x1e>
    1b7c:	e0 91 52 05 	lds	r30, 0x0552
    1b80:	f0 91 53 05 	lds	r31, 0x0553
    1b84:	20 85       	ldd	r18, Z+8	; 0x08
    1b86:	31 85       	ldd	r19, Z+9	; 0x09
    1b88:	8a e0       	ldi	r24, 0x0A	; 10
    1b8a:	bf 01       	movw	r22, r30
    1b8c:	f9 01       	movw	r30, r18
    1b8e:	09 95       	icall
    1b90:	89 2b       	or	r24, r25
    1b92:	11 f0       	breq	.+4      	; 0x1b98 <puts_P+0x5e>
    1b94:	0f ef       	ldi	r16, 0xFF	; 255
    1b96:	1f ef       	ldi	r17, 0xFF	; 255
    1b98:	c8 01       	movw	r24, r16
    1b9a:	df 91       	pop	r29
    1b9c:	cf 91       	pop	r28
    1b9e:	1f 91       	pop	r17
    1ba0:	0f 91       	pop	r16
    1ba2:	08 95       	ret

00001ba4 <vfprintf>:
    1ba4:	2f 92       	push	r2
    1ba6:	3f 92       	push	r3
    1ba8:	4f 92       	push	r4
    1baa:	5f 92       	push	r5
    1bac:	6f 92       	push	r6
    1bae:	7f 92       	push	r7
    1bb0:	8f 92       	push	r8
    1bb2:	9f 92       	push	r9
    1bb4:	af 92       	push	r10
    1bb6:	bf 92       	push	r11
    1bb8:	cf 92       	push	r12
    1bba:	df 92       	push	r13
    1bbc:	ef 92       	push	r14
    1bbe:	ff 92       	push	r15
    1bc0:	0f 93       	push	r16
    1bc2:	1f 93       	push	r17
    1bc4:	df 93       	push	r29
    1bc6:	cf 93       	push	r28
    1bc8:	cd b7       	in	r28, 0x3d	; 61
    1bca:	de b7       	in	r29, 0x3e	; 62
    1bcc:	2b 97       	sbiw	r28, 0x0b	; 11
    1bce:	0f b6       	in	r0, 0x3f	; 63
    1bd0:	f8 94       	cli
    1bd2:	de bf       	out	0x3e, r29	; 62
    1bd4:	0f be       	out	0x3f, r0	; 63
    1bd6:	cd bf       	out	0x3d, r28	; 61
    1bd8:	3c 01       	movw	r6, r24
    1bda:	2b 01       	movw	r4, r22
    1bdc:	5a 01       	movw	r10, r20
    1bde:	fc 01       	movw	r30, r24
    1be0:	17 82       	std	Z+7, r1	; 0x07
    1be2:	16 82       	std	Z+6, r1	; 0x06
    1be4:	83 81       	ldd	r24, Z+3	; 0x03
    1be6:	81 fd       	sbrc	r24, 1
    1be8:	03 c0       	rjmp	.+6      	; 0x1bf0 <vfprintf+0x4c>
    1bea:	6f ef       	ldi	r22, 0xFF	; 255
    1bec:	7f ef       	ldi	r23, 0xFF	; 255
    1bee:	b9 c1       	rjmp	.+882    	; 0x1f62 <vfprintf+0x3be>
    1bf0:	9a e0       	ldi	r25, 0x0A	; 10
    1bf2:	89 2e       	mov	r8, r25
    1bf4:	1e 01       	movw	r2, r28
    1bf6:	08 94       	sec
    1bf8:	21 1c       	adc	r2, r1
    1bfa:	31 1c       	adc	r3, r1
    1bfc:	f3 01       	movw	r30, r6
    1bfe:	23 81       	ldd	r18, Z+3	; 0x03
    1c00:	f2 01       	movw	r30, r4
    1c02:	23 fd       	sbrc	r18, 3
    1c04:	85 91       	lpm	r24, Z+
    1c06:	23 ff       	sbrs	r18, 3
    1c08:	81 91       	ld	r24, Z+
    1c0a:	2f 01       	movw	r4, r30
    1c0c:	88 23       	and	r24, r24
    1c0e:	09 f4       	brne	.+2      	; 0x1c12 <vfprintf+0x6e>
    1c10:	a5 c1       	rjmp	.+842    	; 0x1f5c <vfprintf+0x3b8>
    1c12:	85 32       	cpi	r24, 0x25	; 37
    1c14:	39 f4       	brne	.+14     	; 0x1c24 <vfprintf+0x80>
    1c16:	23 fd       	sbrc	r18, 3
    1c18:	85 91       	lpm	r24, Z+
    1c1a:	23 ff       	sbrs	r18, 3
    1c1c:	81 91       	ld	r24, Z+
    1c1e:	2f 01       	movw	r4, r30
    1c20:	85 32       	cpi	r24, 0x25	; 37
    1c22:	21 f4       	brne	.+8      	; 0x1c2c <vfprintf+0x88>
    1c24:	90 e0       	ldi	r25, 0x00	; 0
    1c26:	b3 01       	movw	r22, r6
    1c28:	cc d1       	rcall	.+920    	; 0x1fc2 <fputc>
    1c2a:	e8 cf       	rjmp	.-48     	; 0x1bfc <vfprintf+0x58>
    1c2c:	98 2f       	mov	r25, r24
    1c2e:	ff 24       	eor	r15, r15
    1c30:	ee 24       	eor	r14, r14
    1c32:	99 24       	eor	r9, r9
    1c34:	ff e1       	ldi	r31, 0x1F	; 31
    1c36:	ff 15       	cp	r31, r15
    1c38:	d0 f0       	brcs	.+52     	; 0x1c6e <vfprintf+0xca>
    1c3a:	9b 32       	cpi	r25, 0x2B	; 43
    1c3c:	69 f0       	breq	.+26     	; 0x1c58 <vfprintf+0xb4>
    1c3e:	9c 32       	cpi	r25, 0x2C	; 44
    1c40:	28 f4       	brcc	.+10     	; 0x1c4c <vfprintf+0xa8>
    1c42:	90 32       	cpi	r25, 0x20	; 32
    1c44:	59 f0       	breq	.+22     	; 0x1c5c <vfprintf+0xb8>
    1c46:	93 32       	cpi	r25, 0x23	; 35
    1c48:	91 f4       	brne	.+36     	; 0x1c6e <vfprintf+0xca>
    1c4a:	0e c0       	rjmp	.+28     	; 0x1c68 <vfprintf+0xc4>
    1c4c:	9d 32       	cpi	r25, 0x2D	; 45
    1c4e:	49 f0       	breq	.+18     	; 0x1c62 <vfprintf+0xbe>
    1c50:	90 33       	cpi	r25, 0x30	; 48
    1c52:	69 f4       	brne	.+26     	; 0x1c6e <vfprintf+0xca>
    1c54:	41 e0       	ldi	r20, 0x01	; 1
    1c56:	24 c0       	rjmp	.+72     	; 0x1ca0 <vfprintf+0xfc>
    1c58:	52 e0       	ldi	r21, 0x02	; 2
    1c5a:	f5 2a       	or	r15, r21
    1c5c:	84 e0       	ldi	r24, 0x04	; 4
    1c5e:	f8 2a       	or	r15, r24
    1c60:	28 c0       	rjmp	.+80     	; 0x1cb2 <vfprintf+0x10e>
    1c62:	98 e0       	ldi	r25, 0x08	; 8
    1c64:	f9 2a       	or	r15, r25
    1c66:	25 c0       	rjmp	.+74     	; 0x1cb2 <vfprintf+0x10e>
    1c68:	e0 e1       	ldi	r30, 0x10	; 16
    1c6a:	fe 2a       	or	r15, r30
    1c6c:	22 c0       	rjmp	.+68     	; 0x1cb2 <vfprintf+0x10e>
    1c6e:	f7 fc       	sbrc	r15, 7
    1c70:	29 c0       	rjmp	.+82     	; 0x1cc4 <vfprintf+0x120>
    1c72:	89 2f       	mov	r24, r25
    1c74:	80 53       	subi	r24, 0x30	; 48
    1c76:	8a 30       	cpi	r24, 0x0A	; 10
    1c78:	70 f4       	brcc	.+28     	; 0x1c96 <vfprintf+0xf2>
    1c7a:	f6 fe       	sbrs	r15, 6
    1c7c:	05 c0       	rjmp	.+10     	; 0x1c88 <vfprintf+0xe4>
    1c7e:	98 9c       	mul	r9, r8
    1c80:	90 2c       	mov	r9, r0
    1c82:	11 24       	eor	r1, r1
    1c84:	98 0e       	add	r9, r24
    1c86:	15 c0       	rjmp	.+42     	; 0x1cb2 <vfprintf+0x10e>
    1c88:	e8 9c       	mul	r14, r8
    1c8a:	e0 2c       	mov	r14, r0
    1c8c:	11 24       	eor	r1, r1
    1c8e:	e8 0e       	add	r14, r24
    1c90:	f0 e2       	ldi	r31, 0x20	; 32
    1c92:	ff 2a       	or	r15, r31
    1c94:	0e c0       	rjmp	.+28     	; 0x1cb2 <vfprintf+0x10e>
    1c96:	9e 32       	cpi	r25, 0x2E	; 46
    1c98:	29 f4       	brne	.+10     	; 0x1ca4 <vfprintf+0x100>
    1c9a:	f6 fc       	sbrc	r15, 6
    1c9c:	5f c1       	rjmp	.+702    	; 0x1f5c <vfprintf+0x3b8>
    1c9e:	40 e4       	ldi	r20, 0x40	; 64
    1ca0:	f4 2a       	or	r15, r20
    1ca2:	07 c0       	rjmp	.+14     	; 0x1cb2 <vfprintf+0x10e>
    1ca4:	9c 36       	cpi	r25, 0x6C	; 108
    1ca6:	19 f4       	brne	.+6      	; 0x1cae <vfprintf+0x10a>
    1ca8:	50 e8       	ldi	r21, 0x80	; 128
    1caa:	f5 2a       	or	r15, r21
    1cac:	02 c0       	rjmp	.+4      	; 0x1cb2 <vfprintf+0x10e>
    1cae:	98 36       	cpi	r25, 0x68	; 104
    1cb0:	49 f4       	brne	.+18     	; 0x1cc4 <vfprintf+0x120>
    1cb2:	f2 01       	movw	r30, r4
    1cb4:	23 fd       	sbrc	r18, 3
    1cb6:	95 91       	lpm	r25, Z+
    1cb8:	23 ff       	sbrs	r18, 3
    1cba:	91 91       	ld	r25, Z+
    1cbc:	2f 01       	movw	r4, r30
    1cbe:	99 23       	and	r25, r25
    1cc0:	09 f0       	breq	.+2      	; 0x1cc4 <vfprintf+0x120>
    1cc2:	b8 cf       	rjmp	.-144    	; 0x1c34 <vfprintf+0x90>
    1cc4:	89 2f       	mov	r24, r25
    1cc6:	85 54       	subi	r24, 0x45	; 69
    1cc8:	83 30       	cpi	r24, 0x03	; 3
    1cca:	18 f0       	brcs	.+6      	; 0x1cd2 <vfprintf+0x12e>
    1ccc:	80 52       	subi	r24, 0x20	; 32
    1cce:	83 30       	cpi	r24, 0x03	; 3
    1cd0:	38 f4       	brcc	.+14     	; 0x1ce0 <vfprintf+0x13c>
    1cd2:	44 e0       	ldi	r20, 0x04	; 4
    1cd4:	50 e0       	ldi	r21, 0x00	; 0
    1cd6:	a4 0e       	add	r10, r20
    1cd8:	b5 1e       	adc	r11, r21
    1cda:	5f e3       	ldi	r21, 0x3F	; 63
    1cdc:	59 83       	std	Y+1, r21	; 0x01
    1cde:	0f c0       	rjmp	.+30     	; 0x1cfe <vfprintf+0x15a>
    1ce0:	93 36       	cpi	r25, 0x63	; 99
    1ce2:	31 f0       	breq	.+12     	; 0x1cf0 <vfprintf+0x14c>
    1ce4:	93 37       	cpi	r25, 0x73	; 115
    1ce6:	79 f0       	breq	.+30     	; 0x1d06 <vfprintf+0x162>
    1ce8:	93 35       	cpi	r25, 0x53	; 83
    1cea:	09 f0       	breq	.+2      	; 0x1cee <vfprintf+0x14a>
    1cec:	52 c0       	rjmp	.+164    	; 0x1d92 <vfprintf+0x1ee>
    1cee:	1f c0       	rjmp	.+62     	; 0x1d2e <vfprintf+0x18a>
    1cf0:	f5 01       	movw	r30, r10
    1cf2:	80 81       	ld	r24, Z
    1cf4:	89 83       	std	Y+1, r24	; 0x01
    1cf6:	42 e0       	ldi	r20, 0x02	; 2
    1cf8:	50 e0       	ldi	r21, 0x00	; 0
    1cfa:	a4 0e       	add	r10, r20
    1cfc:	b5 1e       	adc	r11, r21
    1cfe:	61 01       	movw	r12, r2
    1d00:	01 e0       	ldi	r16, 0x01	; 1
    1d02:	10 e0       	ldi	r17, 0x00	; 0
    1d04:	11 c0       	rjmp	.+34     	; 0x1d28 <vfprintf+0x184>
    1d06:	f5 01       	movw	r30, r10
    1d08:	c0 80       	ld	r12, Z
    1d0a:	d1 80       	ldd	r13, Z+1	; 0x01
    1d0c:	f6 fc       	sbrc	r15, 6
    1d0e:	03 c0       	rjmp	.+6      	; 0x1d16 <vfprintf+0x172>
    1d10:	6f ef       	ldi	r22, 0xFF	; 255
    1d12:	7f ef       	ldi	r23, 0xFF	; 255
    1d14:	02 c0       	rjmp	.+4      	; 0x1d1a <vfprintf+0x176>
    1d16:	69 2d       	mov	r22, r9
    1d18:	70 e0       	ldi	r23, 0x00	; 0
    1d1a:	42 e0       	ldi	r20, 0x02	; 2
    1d1c:	50 e0       	ldi	r21, 0x00	; 0
    1d1e:	a4 0e       	add	r10, r20
    1d20:	b5 1e       	adc	r11, r21
    1d22:	c6 01       	movw	r24, r12
    1d24:	43 d1       	rcall	.+646    	; 0x1fac <strnlen>
    1d26:	8c 01       	movw	r16, r24
    1d28:	5f e7       	ldi	r21, 0x7F	; 127
    1d2a:	f5 22       	and	r15, r21
    1d2c:	13 c0       	rjmp	.+38     	; 0x1d54 <vfprintf+0x1b0>
    1d2e:	f5 01       	movw	r30, r10
    1d30:	c0 80       	ld	r12, Z
    1d32:	d1 80       	ldd	r13, Z+1	; 0x01
    1d34:	f6 fc       	sbrc	r15, 6
    1d36:	03 c0       	rjmp	.+6      	; 0x1d3e <vfprintf+0x19a>
    1d38:	6f ef       	ldi	r22, 0xFF	; 255
    1d3a:	7f ef       	ldi	r23, 0xFF	; 255
    1d3c:	02 c0       	rjmp	.+4      	; 0x1d42 <vfprintf+0x19e>
    1d3e:	69 2d       	mov	r22, r9
    1d40:	70 e0       	ldi	r23, 0x00	; 0
    1d42:	42 e0       	ldi	r20, 0x02	; 2
    1d44:	50 e0       	ldi	r21, 0x00	; 0
    1d46:	a4 0e       	add	r10, r20
    1d48:	b5 1e       	adc	r11, r21
    1d4a:	c6 01       	movw	r24, r12
    1d4c:	24 d1       	rcall	.+584    	; 0x1f96 <strnlen_P>
    1d4e:	8c 01       	movw	r16, r24
    1d50:	50 e8       	ldi	r21, 0x80	; 128
    1d52:	f5 2a       	or	r15, r21
    1d54:	f3 fe       	sbrs	r15, 3
    1d56:	06 c0       	rjmp	.+12     	; 0x1d64 <vfprintf+0x1c0>
    1d58:	18 c0       	rjmp	.+48     	; 0x1d8a <vfprintf+0x1e6>
    1d5a:	80 e2       	ldi	r24, 0x20	; 32
    1d5c:	90 e0       	ldi	r25, 0x00	; 0
    1d5e:	b3 01       	movw	r22, r6
    1d60:	30 d1       	rcall	.+608    	; 0x1fc2 <fputc>
    1d62:	ea 94       	dec	r14
    1d64:	8e 2d       	mov	r24, r14
    1d66:	90 e0       	ldi	r25, 0x00	; 0
    1d68:	08 17       	cp	r16, r24
    1d6a:	19 07       	cpc	r17, r25
    1d6c:	b0 f3       	brcs	.-20     	; 0x1d5a <vfprintf+0x1b6>
    1d6e:	0d c0       	rjmp	.+26     	; 0x1d8a <vfprintf+0x1e6>
    1d70:	f6 01       	movw	r30, r12
    1d72:	f7 fc       	sbrc	r15, 7
    1d74:	85 91       	lpm	r24, Z+
    1d76:	f7 fe       	sbrs	r15, 7
    1d78:	81 91       	ld	r24, Z+
    1d7a:	6f 01       	movw	r12, r30
    1d7c:	90 e0       	ldi	r25, 0x00	; 0
    1d7e:	b3 01       	movw	r22, r6
    1d80:	20 d1       	rcall	.+576    	; 0x1fc2 <fputc>
    1d82:	e1 10       	cpse	r14, r1
    1d84:	ea 94       	dec	r14
    1d86:	01 50       	subi	r16, 0x01	; 1
    1d88:	10 40       	sbci	r17, 0x00	; 0
    1d8a:	01 15       	cp	r16, r1
    1d8c:	11 05       	cpc	r17, r1
    1d8e:	81 f7       	brne	.-32     	; 0x1d70 <vfprintf+0x1cc>
    1d90:	e2 c0       	rjmp	.+452    	; 0x1f56 <vfprintf+0x3b2>
    1d92:	94 36       	cpi	r25, 0x64	; 100
    1d94:	11 f0       	breq	.+4      	; 0x1d9a <vfprintf+0x1f6>
    1d96:	99 36       	cpi	r25, 0x69	; 105
    1d98:	61 f5       	brne	.+88     	; 0x1df2 <vfprintf+0x24e>
    1d9a:	f7 fe       	sbrs	r15, 7
    1d9c:	08 c0       	rjmp	.+16     	; 0x1dae <vfprintf+0x20a>
    1d9e:	f5 01       	movw	r30, r10
    1da0:	20 81       	ld	r18, Z
    1da2:	31 81       	ldd	r19, Z+1	; 0x01
    1da4:	42 81       	ldd	r20, Z+2	; 0x02
    1da6:	53 81       	ldd	r21, Z+3	; 0x03
    1da8:	84 e0       	ldi	r24, 0x04	; 4
    1daa:	90 e0       	ldi	r25, 0x00	; 0
    1dac:	0a c0       	rjmp	.+20     	; 0x1dc2 <vfprintf+0x21e>
    1dae:	f5 01       	movw	r30, r10
    1db0:	80 81       	ld	r24, Z
    1db2:	91 81       	ldd	r25, Z+1	; 0x01
    1db4:	9c 01       	movw	r18, r24
    1db6:	44 27       	eor	r20, r20
    1db8:	37 fd       	sbrc	r19, 7
    1dba:	40 95       	com	r20
    1dbc:	54 2f       	mov	r21, r20
    1dbe:	82 e0       	ldi	r24, 0x02	; 2
    1dc0:	90 e0       	ldi	r25, 0x00	; 0
    1dc2:	a8 0e       	add	r10, r24
    1dc4:	b9 1e       	adc	r11, r25
    1dc6:	9f e6       	ldi	r25, 0x6F	; 111
    1dc8:	f9 22       	and	r15, r25
    1dca:	57 ff       	sbrs	r21, 7
    1dcc:	09 c0       	rjmp	.+18     	; 0x1de0 <vfprintf+0x23c>
    1dce:	50 95       	com	r21
    1dd0:	40 95       	com	r20
    1dd2:	30 95       	com	r19
    1dd4:	21 95       	neg	r18
    1dd6:	3f 4f       	sbci	r19, 0xFF	; 255
    1dd8:	4f 4f       	sbci	r20, 0xFF	; 255
    1dda:	5f 4f       	sbci	r21, 0xFF	; 255
    1ddc:	e0 e8       	ldi	r30, 0x80	; 128
    1dde:	fe 2a       	or	r15, r30
    1de0:	ca 01       	movw	r24, r20
    1de2:	b9 01       	movw	r22, r18
    1de4:	a1 01       	movw	r20, r2
    1de6:	2a e0       	ldi	r18, 0x0A	; 10
    1de8:	30 e0       	ldi	r19, 0x00	; 0
    1dea:	17 d1       	rcall	.+558    	; 0x201a <__ultoa_invert>
    1dec:	d8 2e       	mov	r13, r24
    1dee:	d2 18       	sub	r13, r2
    1df0:	3f c0       	rjmp	.+126    	; 0x1e70 <vfprintf+0x2cc>
    1df2:	95 37       	cpi	r25, 0x75	; 117
    1df4:	29 f4       	brne	.+10     	; 0x1e00 <vfprintf+0x25c>
    1df6:	1f 2d       	mov	r17, r15
    1df8:	1f 7e       	andi	r17, 0xEF	; 239
    1dfa:	2a e0       	ldi	r18, 0x0A	; 10
    1dfc:	30 e0       	ldi	r19, 0x00	; 0
    1dfe:	1d c0       	rjmp	.+58     	; 0x1e3a <vfprintf+0x296>
    1e00:	1f 2d       	mov	r17, r15
    1e02:	19 7f       	andi	r17, 0xF9	; 249
    1e04:	9f 36       	cpi	r25, 0x6F	; 111
    1e06:	61 f0       	breq	.+24     	; 0x1e20 <vfprintf+0x27c>
    1e08:	90 37       	cpi	r25, 0x70	; 112
    1e0a:	20 f4       	brcc	.+8      	; 0x1e14 <vfprintf+0x270>
    1e0c:	98 35       	cpi	r25, 0x58	; 88
    1e0e:	09 f0       	breq	.+2      	; 0x1e12 <vfprintf+0x26e>
    1e10:	a5 c0       	rjmp	.+330    	; 0x1f5c <vfprintf+0x3b8>
    1e12:	0f c0       	rjmp	.+30     	; 0x1e32 <vfprintf+0x28e>
    1e14:	90 37       	cpi	r25, 0x70	; 112
    1e16:	39 f0       	breq	.+14     	; 0x1e26 <vfprintf+0x282>
    1e18:	98 37       	cpi	r25, 0x78	; 120
    1e1a:	09 f0       	breq	.+2      	; 0x1e1e <vfprintf+0x27a>
    1e1c:	9f c0       	rjmp	.+318    	; 0x1f5c <vfprintf+0x3b8>
    1e1e:	04 c0       	rjmp	.+8      	; 0x1e28 <vfprintf+0x284>
    1e20:	28 e0       	ldi	r18, 0x08	; 8
    1e22:	30 e0       	ldi	r19, 0x00	; 0
    1e24:	0a c0       	rjmp	.+20     	; 0x1e3a <vfprintf+0x296>
    1e26:	10 61       	ori	r17, 0x10	; 16
    1e28:	14 fd       	sbrc	r17, 4
    1e2a:	14 60       	ori	r17, 0x04	; 4
    1e2c:	20 e1       	ldi	r18, 0x10	; 16
    1e2e:	30 e0       	ldi	r19, 0x00	; 0
    1e30:	04 c0       	rjmp	.+8      	; 0x1e3a <vfprintf+0x296>
    1e32:	14 fd       	sbrc	r17, 4
    1e34:	16 60       	ori	r17, 0x06	; 6
    1e36:	20 e1       	ldi	r18, 0x10	; 16
    1e38:	32 e0       	ldi	r19, 0x02	; 2
    1e3a:	17 ff       	sbrs	r17, 7
    1e3c:	08 c0       	rjmp	.+16     	; 0x1e4e <vfprintf+0x2aa>
    1e3e:	f5 01       	movw	r30, r10
    1e40:	60 81       	ld	r22, Z
    1e42:	71 81       	ldd	r23, Z+1	; 0x01
    1e44:	82 81       	ldd	r24, Z+2	; 0x02
    1e46:	93 81       	ldd	r25, Z+3	; 0x03
    1e48:	44 e0       	ldi	r20, 0x04	; 4
    1e4a:	50 e0       	ldi	r21, 0x00	; 0
    1e4c:	08 c0       	rjmp	.+16     	; 0x1e5e <vfprintf+0x2ba>
    1e4e:	f5 01       	movw	r30, r10
    1e50:	80 81       	ld	r24, Z
    1e52:	91 81       	ldd	r25, Z+1	; 0x01
    1e54:	bc 01       	movw	r22, r24
    1e56:	80 e0       	ldi	r24, 0x00	; 0
    1e58:	90 e0       	ldi	r25, 0x00	; 0
    1e5a:	42 e0       	ldi	r20, 0x02	; 2
    1e5c:	50 e0       	ldi	r21, 0x00	; 0
    1e5e:	a4 0e       	add	r10, r20
    1e60:	b5 1e       	adc	r11, r21
    1e62:	a1 01       	movw	r20, r2
    1e64:	da d0       	rcall	.+436    	; 0x201a <__ultoa_invert>
    1e66:	d8 2e       	mov	r13, r24
    1e68:	d2 18       	sub	r13, r2
    1e6a:	8f e7       	ldi	r24, 0x7F	; 127
    1e6c:	f8 2e       	mov	r15, r24
    1e6e:	f1 22       	and	r15, r17
    1e70:	f6 fe       	sbrs	r15, 6
    1e72:	0b c0       	rjmp	.+22     	; 0x1e8a <vfprintf+0x2e6>
    1e74:	5e ef       	ldi	r21, 0xFE	; 254
    1e76:	f5 22       	and	r15, r21
    1e78:	d9 14       	cp	r13, r9
    1e7a:	38 f4       	brcc	.+14     	; 0x1e8a <vfprintf+0x2e6>
    1e7c:	f4 fe       	sbrs	r15, 4
    1e7e:	07 c0       	rjmp	.+14     	; 0x1e8e <vfprintf+0x2ea>
    1e80:	f2 fc       	sbrc	r15, 2
    1e82:	05 c0       	rjmp	.+10     	; 0x1e8e <vfprintf+0x2ea>
    1e84:	8f ee       	ldi	r24, 0xEF	; 239
    1e86:	f8 22       	and	r15, r24
    1e88:	02 c0       	rjmp	.+4      	; 0x1e8e <vfprintf+0x2ea>
    1e8a:	1d 2d       	mov	r17, r13
    1e8c:	01 c0       	rjmp	.+2      	; 0x1e90 <vfprintf+0x2ec>
    1e8e:	19 2d       	mov	r17, r9
    1e90:	f4 fe       	sbrs	r15, 4
    1e92:	0d c0       	rjmp	.+26     	; 0x1eae <vfprintf+0x30a>
    1e94:	fe 01       	movw	r30, r28
    1e96:	ed 0d       	add	r30, r13
    1e98:	f1 1d       	adc	r31, r1
    1e9a:	80 81       	ld	r24, Z
    1e9c:	80 33       	cpi	r24, 0x30	; 48
    1e9e:	19 f4       	brne	.+6      	; 0x1ea6 <vfprintf+0x302>
    1ea0:	99 ee       	ldi	r25, 0xE9	; 233
    1ea2:	f9 22       	and	r15, r25
    1ea4:	08 c0       	rjmp	.+16     	; 0x1eb6 <vfprintf+0x312>
    1ea6:	1f 5f       	subi	r17, 0xFF	; 255
    1ea8:	f2 fe       	sbrs	r15, 2
    1eaa:	05 c0       	rjmp	.+10     	; 0x1eb6 <vfprintf+0x312>
    1eac:	03 c0       	rjmp	.+6      	; 0x1eb4 <vfprintf+0x310>
    1eae:	8f 2d       	mov	r24, r15
    1eb0:	86 78       	andi	r24, 0x86	; 134
    1eb2:	09 f0       	breq	.+2      	; 0x1eb6 <vfprintf+0x312>
    1eb4:	1f 5f       	subi	r17, 0xFF	; 255
    1eb6:	0f 2d       	mov	r16, r15
    1eb8:	f3 fc       	sbrc	r15, 3
    1eba:	13 c0       	rjmp	.+38     	; 0x1ee2 <vfprintf+0x33e>
    1ebc:	f0 fe       	sbrs	r15, 0
    1ebe:	0e c0       	rjmp	.+28     	; 0x1edc <vfprintf+0x338>
    1ec0:	1e 15       	cp	r17, r14
    1ec2:	10 f0       	brcs	.+4      	; 0x1ec8 <vfprintf+0x324>
    1ec4:	9d 2c       	mov	r9, r13
    1ec6:	0a c0       	rjmp	.+20     	; 0x1edc <vfprintf+0x338>
    1ec8:	9d 2c       	mov	r9, r13
    1eca:	9e 0c       	add	r9, r14
    1ecc:	91 1a       	sub	r9, r17
    1ece:	1e 2d       	mov	r17, r14
    1ed0:	05 c0       	rjmp	.+10     	; 0x1edc <vfprintf+0x338>
    1ed2:	80 e2       	ldi	r24, 0x20	; 32
    1ed4:	90 e0       	ldi	r25, 0x00	; 0
    1ed6:	b3 01       	movw	r22, r6
    1ed8:	74 d0       	rcall	.+232    	; 0x1fc2 <fputc>
    1eda:	1f 5f       	subi	r17, 0xFF	; 255
    1edc:	1e 15       	cp	r17, r14
    1ede:	c8 f3       	brcs	.-14     	; 0x1ed2 <vfprintf+0x32e>
    1ee0:	04 c0       	rjmp	.+8      	; 0x1eea <vfprintf+0x346>
    1ee2:	1e 15       	cp	r17, r14
    1ee4:	10 f4       	brcc	.+4      	; 0x1eea <vfprintf+0x346>
    1ee6:	e1 1a       	sub	r14, r17
    1ee8:	01 c0       	rjmp	.+2      	; 0x1eec <vfprintf+0x348>
    1eea:	ee 24       	eor	r14, r14
    1eec:	04 ff       	sbrs	r16, 4
    1eee:	0e c0       	rjmp	.+28     	; 0x1f0c <vfprintf+0x368>
    1ef0:	80 e3       	ldi	r24, 0x30	; 48
    1ef2:	90 e0       	ldi	r25, 0x00	; 0
    1ef4:	b3 01       	movw	r22, r6
    1ef6:	65 d0       	rcall	.+202    	; 0x1fc2 <fputc>
    1ef8:	02 ff       	sbrs	r16, 2
    1efa:	1b c0       	rjmp	.+54     	; 0x1f32 <vfprintf+0x38e>
    1efc:	01 fd       	sbrc	r16, 1
    1efe:	03 c0       	rjmp	.+6      	; 0x1f06 <vfprintf+0x362>
    1f00:	88 e7       	ldi	r24, 0x78	; 120
    1f02:	90 e0       	ldi	r25, 0x00	; 0
    1f04:	0e c0       	rjmp	.+28     	; 0x1f22 <vfprintf+0x37e>
    1f06:	88 e5       	ldi	r24, 0x58	; 88
    1f08:	90 e0       	ldi	r25, 0x00	; 0
    1f0a:	0b c0       	rjmp	.+22     	; 0x1f22 <vfprintf+0x37e>
    1f0c:	80 2f       	mov	r24, r16
    1f0e:	86 78       	andi	r24, 0x86	; 134
    1f10:	81 f0       	breq	.+32     	; 0x1f32 <vfprintf+0x38e>
    1f12:	01 ff       	sbrs	r16, 1
    1f14:	02 c0       	rjmp	.+4      	; 0x1f1a <vfprintf+0x376>
    1f16:	8b e2       	ldi	r24, 0x2B	; 43
    1f18:	01 c0       	rjmp	.+2      	; 0x1f1c <vfprintf+0x378>
    1f1a:	80 e2       	ldi	r24, 0x20	; 32
    1f1c:	f7 fc       	sbrc	r15, 7
    1f1e:	8d e2       	ldi	r24, 0x2D	; 45
    1f20:	90 e0       	ldi	r25, 0x00	; 0
    1f22:	b3 01       	movw	r22, r6
    1f24:	4e d0       	rcall	.+156    	; 0x1fc2 <fputc>
    1f26:	05 c0       	rjmp	.+10     	; 0x1f32 <vfprintf+0x38e>
    1f28:	80 e3       	ldi	r24, 0x30	; 48
    1f2a:	90 e0       	ldi	r25, 0x00	; 0
    1f2c:	b3 01       	movw	r22, r6
    1f2e:	49 d0       	rcall	.+146    	; 0x1fc2 <fputc>
    1f30:	9a 94       	dec	r9
    1f32:	d9 14       	cp	r13, r9
    1f34:	c8 f3       	brcs	.-14     	; 0x1f28 <vfprintf+0x384>
    1f36:	da 94       	dec	r13
    1f38:	f1 01       	movw	r30, r2
    1f3a:	ed 0d       	add	r30, r13
    1f3c:	f1 1d       	adc	r31, r1
    1f3e:	80 81       	ld	r24, Z
    1f40:	90 e0       	ldi	r25, 0x00	; 0
    1f42:	b3 01       	movw	r22, r6
    1f44:	3e d0       	rcall	.+124    	; 0x1fc2 <fputc>
    1f46:	dd 20       	and	r13, r13
    1f48:	b1 f7       	brne	.-20     	; 0x1f36 <vfprintf+0x392>
    1f4a:	05 c0       	rjmp	.+10     	; 0x1f56 <vfprintf+0x3b2>
    1f4c:	80 e2       	ldi	r24, 0x20	; 32
    1f4e:	90 e0       	ldi	r25, 0x00	; 0
    1f50:	b3 01       	movw	r22, r6
    1f52:	37 d0       	rcall	.+110    	; 0x1fc2 <fputc>
    1f54:	ea 94       	dec	r14
    1f56:	ee 20       	and	r14, r14
    1f58:	c9 f7       	brne	.-14     	; 0x1f4c <vfprintf+0x3a8>
    1f5a:	50 ce       	rjmp	.-864    	; 0x1bfc <vfprintf+0x58>
    1f5c:	f3 01       	movw	r30, r6
    1f5e:	66 81       	ldd	r22, Z+6	; 0x06
    1f60:	77 81       	ldd	r23, Z+7	; 0x07
    1f62:	cb 01       	movw	r24, r22
    1f64:	2b 96       	adiw	r28, 0x0b	; 11
    1f66:	0f b6       	in	r0, 0x3f	; 63
    1f68:	f8 94       	cli
    1f6a:	de bf       	out	0x3e, r29	; 62
    1f6c:	0f be       	out	0x3f, r0	; 63
    1f6e:	cd bf       	out	0x3d, r28	; 61
    1f70:	cf 91       	pop	r28
    1f72:	df 91       	pop	r29
    1f74:	1f 91       	pop	r17
    1f76:	0f 91       	pop	r16
    1f78:	ff 90       	pop	r15
    1f7a:	ef 90       	pop	r14
    1f7c:	df 90       	pop	r13
    1f7e:	cf 90       	pop	r12
    1f80:	bf 90       	pop	r11
    1f82:	af 90       	pop	r10
    1f84:	9f 90       	pop	r9
    1f86:	8f 90       	pop	r8
    1f88:	7f 90       	pop	r7
    1f8a:	6f 90       	pop	r6
    1f8c:	5f 90       	pop	r5
    1f8e:	4f 90       	pop	r4
    1f90:	3f 90       	pop	r3
    1f92:	2f 90       	pop	r2
    1f94:	08 95       	ret

00001f96 <strnlen_P>:
    1f96:	fc 01       	movw	r30, r24
    1f98:	05 90       	lpm	r0, Z+
    1f9a:	61 50       	subi	r22, 0x01	; 1
    1f9c:	70 40       	sbci	r23, 0x00	; 0
    1f9e:	01 10       	cpse	r0, r1
    1fa0:	d8 f7       	brcc	.-10     	; 0x1f98 <strnlen_P+0x2>
    1fa2:	80 95       	com	r24
    1fa4:	90 95       	com	r25
    1fa6:	8e 0f       	add	r24, r30
    1fa8:	9f 1f       	adc	r25, r31
    1faa:	08 95       	ret

00001fac <strnlen>:
    1fac:	fc 01       	movw	r30, r24
    1fae:	61 50       	subi	r22, 0x01	; 1
    1fb0:	70 40       	sbci	r23, 0x00	; 0
    1fb2:	01 90       	ld	r0, Z+
    1fb4:	01 10       	cpse	r0, r1
    1fb6:	d8 f7       	brcc	.-10     	; 0x1fae <strnlen+0x2>
    1fb8:	80 95       	com	r24
    1fba:	90 95       	com	r25
    1fbc:	8e 0f       	add	r24, r30
    1fbe:	9f 1f       	adc	r25, r31
    1fc0:	08 95       	ret

00001fc2 <fputc>:
    1fc2:	0f 93       	push	r16
    1fc4:	1f 93       	push	r17
    1fc6:	cf 93       	push	r28
    1fc8:	df 93       	push	r29
    1fca:	8c 01       	movw	r16, r24
    1fcc:	eb 01       	movw	r28, r22
    1fce:	8b 81       	ldd	r24, Y+3	; 0x03
    1fd0:	81 ff       	sbrs	r24, 1
    1fd2:	1b c0       	rjmp	.+54     	; 0x200a <fputc+0x48>
    1fd4:	82 ff       	sbrs	r24, 2
    1fd6:	0d c0       	rjmp	.+26     	; 0x1ff2 <fputc+0x30>
    1fd8:	2e 81       	ldd	r18, Y+6	; 0x06
    1fda:	3f 81       	ldd	r19, Y+7	; 0x07
    1fdc:	8c 81       	ldd	r24, Y+4	; 0x04
    1fde:	9d 81       	ldd	r25, Y+5	; 0x05
    1fe0:	28 17       	cp	r18, r24
    1fe2:	39 07       	cpc	r19, r25
    1fe4:	64 f4       	brge	.+24     	; 0x1ffe <fputc+0x3c>
    1fe6:	e8 81       	ld	r30, Y
    1fe8:	f9 81       	ldd	r31, Y+1	; 0x01
    1fea:	01 93       	st	Z+, r16
    1fec:	f9 83       	std	Y+1, r31	; 0x01
    1fee:	e8 83       	st	Y, r30
    1ff0:	06 c0       	rjmp	.+12     	; 0x1ffe <fputc+0x3c>
    1ff2:	e8 85       	ldd	r30, Y+8	; 0x08
    1ff4:	f9 85       	ldd	r31, Y+9	; 0x09
    1ff6:	80 2f       	mov	r24, r16
    1ff8:	09 95       	icall
    1ffa:	89 2b       	or	r24, r25
    1ffc:	31 f4       	brne	.+12     	; 0x200a <fputc+0x48>
    1ffe:	8e 81       	ldd	r24, Y+6	; 0x06
    2000:	9f 81       	ldd	r25, Y+7	; 0x07
    2002:	01 96       	adiw	r24, 0x01	; 1
    2004:	9f 83       	std	Y+7, r25	; 0x07
    2006:	8e 83       	std	Y+6, r24	; 0x06
    2008:	02 c0       	rjmp	.+4      	; 0x200e <fputc+0x4c>
    200a:	0f ef       	ldi	r16, 0xFF	; 255
    200c:	1f ef       	ldi	r17, 0xFF	; 255
    200e:	c8 01       	movw	r24, r16
    2010:	df 91       	pop	r29
    2012:	cf 91       	pop	r28
    2014:	1f 91       	pop	r17
    2016:	0f 91       	pop	r16
    2018:	08 95       	ret

0000201a <__ultoa_invert>:
    201a:	fa 01       	movw	r30, r20
    201c:	aa 27       	eor	r26, r26
    201e:	28 30       	cpi	r18, 0x08	; 8
    2020:	51 f1       	breq	.+84     	; 0x2076 <__ultoa_invert+0x5c>
    2022:	20 31       	cpi	r18, 0x10	; 16
    2024:	81 f1       	breq	.+96     	; 0x2086 <__ultoa_invert+0x6c>
    2026:	e8 94       	clt
    2028:	6f 93       	push	r22
    202a:	6e 7f       	andi	r22, 0xFE	; 254
    202c:	6e 5f       	subi	r22, 0xFE	; 254
    202e:	7f 4f       	sbci	r23, 0xFF	; 255
    2030:	8f 4f       	sbci	r24, 0xFF	; 255
    2032:	9f 4f       	sbci	r25, 0xFF	; 255
    2034:	af 4f       	sbci	r26, 0xFF	; 255
    2036:	b1 e0       	ldi	r27, 0x01	; 1
    2038:	3e d0       	rcall	.+124    	; 0x20b6 <__ultoa_invert+0x9c>
    203a:	b4 e0       	ldi	r27, 0x04	; 4
    203c:	3c d0       	rcall	.+120    	; 0x20b6 <__ultoa_invert+0x9c>
    203e:	67 0f       	add	r22, r23
    2040:	78 1f       	adc	r23, r24
    2042:	89 1f       	adc	r24, r25
    2044:	9a 1f       	adc	r25, r26
    2046:	a1 1d       	adc	r26, r1
    2048:	68 0f       	add	r22, r24
    204a:	79 1f       	adc	r23, r25
    204c:	8a 1f       	adc	r24, r26
    204e:	91 1d       	adc	r25, r1
    2050:	a1 1d       	adc	r26, r1
    2052:	6a 0f       	add	r22, r26
    2054:	71 1d       	adc	r23, r1
    2056:	81 1d       	adc	r24, r1
    2058:	91 1d       	adc	r25, r1
    205a:	a1 1d       	adc	r26, r1
    205c:	20 d0       	rcall	.+64     	; 0x209e <__ultoa_invert+0x84>
    205e:	09 f4       	brne	.+2      	; 0x2062 <__ultoa_invert+0x48>
    2060:	68 94       	set
    2062:	3f 91       	pop	r19
    2064:	2a e0       	ldi	r18, 0x0A	; 10
    2066:	26 9f       	mul	r18, r22
    2068:	11 24       	eor	r1, r1
    206a:	30 19       	sub	r19, r0
    206c:	30 5d       	subi	r19, 0xD0	; 208
    206e:	31 93       	st	Z+, r19
    2070:	de f6       	brtc	.-74     	; 0x2028 <__ultoa_invert+0xe>
    2072:	cf 01       	movw	r24, r30
    2074:	08 95       	ret
    2076:	46 2f       	mov	r20, r22
    2078:	47 70       	andi	r20, 0x07	; 7
    207a:	40 5d       	subi	r20, 0xD0	; 208
    207c:	41 93       	st	Z+, r20
    207e:	b3 e0       	ldi	r27, 0x03	; 3
    2080:	0f d0       	rcall	.+30     	; 0x20a0 <__ultoa_invert+0x86>
    2082:	c9 f7       	brne	.-14     	; 0x2076 <__ultoa_invert+0x5c>
    2084:	f6 cf       	rjmp	.-20     	; 0x2072 <__ultoa_invert+0x58>
    2086:	46 2f       	mov	r20, r22
    2088:	4f 70       	andi	r20, 0x0F	; 15
    208a:	40 5d       	subi	r20, 0xD0	; 208
    208c:	4a 33       	cpi	r20, 0x3A	; 58
    208e:	18 f0       	brcs	.+6      	; 0x2096 <__ultoa_invert+0x7c>
    2090:	49 5d       	subi	r20, 0xD9	; 217
    2092:	31 fd       	sbrc	r19, 1
    2094:	40 52       	subi	r20, 0x20	; 32
    2096:	41 93       	st	Z+, r20
    2098:	02 d0       	rcall	.+4      	; 0x209e <__ultoa_invert+0x84>
    209a:	a9 f7       	brne	.-22     	; 0x2086 <__ultoa_invert+0x6c>
    209c:	ea cf       	rjmp	.-44     	; 0x2072 <__ultoa_invert+0x58>
    209e:	b4 e0       	ldi	r27, 0x04	; 4
    20a0:	a6 95       	lsr	r26
    20a2:	97 95       	ror	r25
    20a4:	87 95       	ror	r24
    20a6:	77 95       	ror	r23
    20a8:	67 95       	ror	r22
    20aa:	ba 95       	dec	r27
    20ac:	c9 f7       	brne	.-14     	; 0x20a0 <__ultoa_invert+0x86>
    20ae:	00 97       	sbiw	r24, 0x00	; 0
    20b0:	61 05       	cpc	r22, r1
    20b2:	71 05       	cpc	r23, r1
    20b4:	08 95       	ret
    20b6:	9b 01       	movw	r18, r22
    20b8:	ac 01       	movw	r20, r24
    20ba:	0a 2e       	mov	r0, r26
    20bc:	06 94       	lsr	r0
    20be:	57 95       	ror	r21
    20c0:	47 95       	ror	r20
    20c2:	37 95       	ror	r19
    20c4:	27 95       	ror	r18
    20c6:	ba 95       	dec	r27
    20c8:	c9 f7       	brne	.-14     	; 0x20bc <__ultoa_invert+0xa2>
    20ca:	62 0f       	add	r22, r18
    20cc:	73 1f       	adc	r23, r19
    20ce:	84 1f       	adc	r24, r20
    20d0:	95 1f       	adc	r25, r21
    20d2:	a0 1d       	adc	r26, r0
    20d4:	08 95       	ret

000020d6 <_exit>:
    20d6:	f8 94       	cli

000020d8 <__stop_program>:
    20d8:	ff cf       	rjmp	.-2      	; 0x20d8 <__stop_program>
