
KeyboardHostWithParser.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000024  00800100  00002568  000025fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002568  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003fb  00800124  00800124  00002620  2**0
                  ALLOC
  3 .debug_aranges 000006d0  00000000  00000000  00002620  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000fbd  00000000  00000000  00002cf0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000b9f0  00000000  00000000  00003cad  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000028ac  00000000  00000000  0000f69d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00007e05  00000000  00000000  00011f49  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000b20  00000000  00000000  00019d50  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000045e8  00000000  00000000  0001a870  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00005809  00000000  00000000  0001ee58  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000007a0  00000000  00000000  00024661  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
       0:	1f c1       	rjmp	.+574    	; 0x240 <__ctors_end>
{
	USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, AfterType);

	if (*BytesRem)
	  USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, Type);
}
       2:	00 00       	nop
	return USB_Host_SendControlRequest(NULL);
}

uint8_t USB_Host_SetInterfaceAltSetting(const uint8_t InterfaceIndex,
                                        const uint8_t AltSetting)
{
       4:	3b c1       	rjmp	.+630    	; 0x27c <__bad_interrupt>
	return true;
}

void USB_SetHIDReportItemInfo(uint8_t* ReportData,
                              HID_ReportItem_t* const ReportItem)
{
       6:	00 00       	nop
	return HOST_SENDCONTROL_Successful;
}

uint8_t HID_Host_SetIdlePeriod(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo,
                               const uint16_t MS)
{
       8:	39 c1       	rjmp	.+626    	; 0x27c <__bad_interrupt>

	return Serial_ReceiveByte();
}

int Serial_getchar_Blocking(FILE *Stream)
{
       a:	00 00       	nop
       c:	37 c1       	rjmp	.+622    	; 0x27c <__bad_interrupt>
       e:	00 00       	nop
      10:	35 c1       	rjmp	.+618    	; 0x27c <__bad_interrupt>
      12:	00 00       	nop
      14:	33 c1       	rjmp	.+614    	; 0x27c <__bad_interrupt>
      16:	00 00       	nop
      18:	31 c1       	rjmp	.+610    	; 0x27c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	2f c1       	rjmp	.+606    	; 0x27c <__bad_interrupt>
      1e:	00 00       	nop
      20:	2d c1       	rjmp	.+602    	; 0x27c <__bad_interrupt>
      22:	00 00       	nop
      24:	2b c1       	rjmp	.+598    	; 0x27c <__bad_interrupt>
      26:	00 00       	nop
      28:	ed c5       	rjmp	.+3034   	; 0xc04 <__vector_10>
      2a:	00 00       	nop
      2c:	27 c1       	rjmp	.+590    	; 0x27c <__bad_interrupt>
      2e:	00 00       	nop
      30:	25 c1       	rjmp	.+586    	; 0x27c <__bad_interrupt>
      32:	00 00       	nop
      34:	23 c1       	rjmp	.+582    	; 0x27c <__bad_interrupt>
      36:	00 00       	nop
      38:	21 c1       	rjmp	.+578    	; 0x27c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	1f c1       	rjmp	.+574    	; 0x27c <__bad_interrupt>
      3e:	00 00       	nop
      40:	1d c1       	rjmp	.+570    	; 0x27c <__bad_interrupt>
      42:	00 00       	nop
      44:	1b c1       	rjmp	.+566    	; 0x27c <__bad_interrupt>
      46:	00 00       	nop
      48:	19 c1       	rjmp	.+562    	; 0x27c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	17 c1       	rjmp	.+558    	; 0x27c <__bad_interrupt>
      4e:	00 00       	nop
      50:	15 c1       	rjmp	.+554    	; 0x27c <__bad_interrupt>
      52:	00 00       	nop
      54:	13 c1       	rjmp	.+550    	; 0x27c <__bad_interrupt>
      56:	00 00       	nop
      58:	11 c1       	rjmp	.+546    	; 0x27c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0f c1       	rjmp	.+542    	; 0x27c <__bad_interrupt>
      5e:	00 00       	nop
      60:	0d c1       	rjmp	.+538    	; 0x27c <__bad_interrupt>
      62:	00 00       	nop
      64:	0b c1       	rjmp	.+534    	; 0x27c <__bad_interrupt>
      66:	00 00       	nop
      68:	09 c1       	rjmp	.+530    	; 0x27c <__bad_interrupt>
      6a:	00 00       	nop
      6c:	07 c1       	rjmp	.+526    	; 0x27c <__bad_interrupt>
      6e:	00 00       	nop
      70:	05 c1       	rjmp	.+522    	; 0x27c <__bad_interrupt>
      72:	00 00       	nop
      74:	03 c1       	rjmp	.+518    	; 0x27c <__bad_interrupt>
      76:	00 00       	nop
      78:	01 c1       	rjmp	.+514    	; 0x27c <__bad_interrupt>
      7a:	00 00       	nop
      7c:	ff c0       	rjmp	.+510    	; 0x27c <__bad_interrupt>
      7e:	00 00       	nop
      80:	fd c0       	rjmp	.+506    	; 0x27c <__bad_interrupt>
      82:	00 00       	nop
      84:	fb c0       	rjmp	.+502    	; 0x27c <__bad_interrupt>
      86:	00 00       	nop
      88:	f9 c0       	rjmp	.+498    	; 0x27c <__bad_interrupt>
      8a:	00 00       	nop
      8c:	f7 c0       	rjmp	.+494    	; 0x27c <__bad_interrupt>
      8e:	00 00       	nop
      90:	f5 c0       	rjmp	.+490    	; 0x27c <__bad_interrupt>
      92:	00 00       	nop
      94:	f3 c0       	rjmp	.+486    	; 0x27c <__bad_interrupt>
      96:	00 00       	nop

00000098 <__c.4597>:
      98:	1b 5b 33 31 6d 44 65 76 20 45 6e 75 6d 20 45 72     .[31mDev Enum Er
      a8:	72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     ror.. -- Error C
      b8:	6f 64 65 20 25 64 0d 0a 20 2d 2d 20 53 75 62 20     ode %d.. -- Sub 
      c8:	45 72 72 6f 72 20 43 6f 64 65 20 25 64 0d 0a 20     Error Code %d.. 
      d8:	2d 2d 20 49 6e 20 53 74 61 74 65 20 25 64 0d 0a     -- In State %d..
      e8:	1b 5b 33 37 6d 00                                   .[37m.

000000ee <__c.4589>:
      ee:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
      fe:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 
     10e:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

0000011d <__c.4579>:
     11d:	4b 65 79 62 6f 61 72 64 20 45 6e 75 6d 65 72 61     Keyboard Enumera
     12d:	74 65 64 2e 0d 0a 00                                ted....

00000134 <__c.4577>:
     134:	45 72 72 6f 72 20 53 65 74 74 69 6e 67 20 52 65     Error Setting Re
     144:	70 6f 72 74 20 50 72 6f 74 6f 63 6f 6c 20 4d 6f     port Protocol Mo
     154:	64 65 20 6f 72 20 4e 6f 74 20 61 20 56 61 6c 69     de or Not a Vali
     164:	64 20 4b 65 79 62 6f 61 72 64 2e 0d 0a 00           d Keyboard....

00000172 <__c.4575>:
     172:	45 72 72 6f 72 20 53 65 74 74 69 6e 67 20 44 65     Error Setting De
     182:	76 69 63 65 20 43 6f 6e 66 69 67 75 72 61 74 69     vice Configurati
     192:	6f 6e 2e 0d 0a 00                                   on....

00000198 <__c.4573>:
     198:	41 74 74 61 63 68 65 64 20 44 65 76 69 63 65 20     Attached Device 
     1a8:	4e 6f 74 20 61 20 56 61 6c 69 64 20 4b 65 79 62     Not a Valid Keyb
     1b8:	6f 61 72 64 2e 0d 0a 00                             oard....

000001c0 <__c.4571>:
     1c0:	45 72 72 6f 72 20 52 65 74 72 69 65 76 69 6e 67     Error Retrieving
     1d0:	20 43 6f 6e 66 69 67 75 72 61 74 69 6f 6e 20 44      Configuration D
     1e0:	65 73 63 72 69 70 74 6f 72 2e 0d 0a 00              escriptor....

000001ed <__c.4564>:
     1ed:	0d 0a 44 65 76 69 63 65 20 55 6e 61 74 74 61 63     ..Device Unattac
     1fd:	68 65 64 2e 0d 0a 00                                hed....

00000204 <__c.4559>:
     204:	44 65 76 69 63 65 20 41 74 74 61 63 68 65 64 2e     Device Attached.
     214:	0d 0a 00                                            ...

00000217 <__c.4506>:
     217:	1b 5b 33 36 6d 4b 65 79 62 6f 61 72 64 20 48 6f     .[36mKeyboard Ho
     227:	73 74 20 44 65 6d 6f 20 72 75 6e 6e 69 6e 67 2e     st Demo running.
     237:	0d 0a 1b 5b 33 37 6d 00 00                          ...[37m..

00000240 <__ctors_end>:
     240:	11 24       	eor	r1, r1
     242:	1f be       	out	0x3f, r1	; 63
     244:	cf ef       	ldi	r28, 0xFF	; 255
     246:	d0 e2       	ldi	r29, 0x20	; 32
     248:	de bf       	out	0x3e, r29	; 62
     24a:	cd bf       	out	0x3d, r28	; 61

0000024c <__do_copy_data>:
     24c:	11 e0       	ldi	r17, 0x01	; 1
     24e:	a0 e0       	ldi	r26, 0x00	; 0
     250:	b1 e0       	ldi	r27, 0x01	; 1
     252:	e8 e6       	ldi	r30, 0x68	; 104
     254:	f5 e2       	ldi	r31, 0x25	; 37
     256:	00 e0       	ldi	r16, 0x00	; 0
     258:	0b bf       	out	0x3b, r16	; 59
     25a:	02 c0       	rjmp	.+4      	; 0x260 <__do_copy_data+0x14>
     25c:	07 90       	elpm	r0, Z+
     25e:	0d 92       	st	X+, r0
     260:	a4 32       	cpi	r26, 0x24	; 36
     262:	b1 07       	cpc	r27, r17
     264:	d9 f7       	brne	.-10     	; 0x25c <__do_copy_data+0x10>

00000266 <__do_clear_bss>:
     266:	15 e0       	ldi	r17, 0x05	; 5
     268:	a4 e2       	ldi	r26, 0x24	; 36
     26a:	b1 e0       	ldi	r27, 0x01	; 1
     26c:	01 c0       	rjmp	.+2      	; 0x270 <.do_clear_bss_start>

0000026e <.do_clear_bss_loop>:
     26e:	1d 92       	st	X+, r1

00000270 <.do_clear_bss_start>:
     270:	af 31       	cpi	r26, 0x1F	; 31
     272:	b1 07       	cpc	r27, r17
     274:	e1 f7       	brne	.-8      	; 0x26e <.do_clear_bss_loop>
     276:	b0 d1       	rcall	.+864    	; 0x5d8 <main>
     278:	0c 94 b2 12 	jmp	0x2564	; 0x2564 <_exit>

0000027c <__bad_interrupt>:
     27c:	c1 ce       	rjmp	.-638    	; 0x0 <__vectors>

0000027e <CALLBACK_HIDParser_FilterHIDReportItem>:
 *  \param[in] CurrentItem  Pointer to the item the HID report parser is currently working with
 *
 *  \return Boolean true if the item should be stored into the HID report structure, false if it should be discarded
 */
bool CALLBACK_HIDParser_FilterHIDReportItem(HID_ReportItem_t* const CurrentItem)
{
     27e:	20 e0       	ldi	r18, 0x00	; 0
     280:	fc 01       	movw	r30, r24
     282:	81 85       	ldd	r24, Z+9	; 0x09
     284:	92 85       	ldd	r25, Z+10	; 0x0a
     286:	07 97       	sbiw	r24, 0x07	; 7
     288:	09 f4       	brne	.+2      	; 0x28c <CALLBACK_HIDParser_FilterHIDReportItem+0xe>
     28a:	21 e0       	ldi	r18, 0x01	; 1
	/* Check the attributes of the current item - see if we are interested in it or not;
	 * only store KEYBOARD usage page items into the Processed HID Report structure to
	 * save RAM and ignore the rest
	 */
	return (CurrentItem->Attributes.Usage.Page == USAGE_PAGE_KEYBOARD);
}
     28c:	82 2f       	mov	r24, r18
     28e:	08 95       	ret

00000290 <EVENT_USB_Host_DeviceEnumerationFailed>:
 *  enumerating an attached USB device.
 */
void EVENT_USB_Host_DeviceEnumerationFailed(const uint8_t ErrorCode,
                                            const uint8_t SubErrorCode)
{
	printf_P(PSTR(ESC_FG_RED "Dev Enum Error\r\n"
     290:	90 91 0a 05 	lds	r25, 0x050A
     294:	2d b7       	in	r18, 0x3d	; 61
     296:	3e b7       	in	r19, 0x3e	; 62
     298:	28 50       	subi	r18, 0x08	; 8
     29a:	30 40       	sbci	r19, 0x00	; 0
     29c:	0f b6       	in	r0, 0x3f	; 63
     29e:	f8 94       	cli
     2a0:	3e bf       	out	0x3e, r19	; 62
     2a2:	0f be       	out	0x3f, r0	; 63
     2a4:	2d bf       	out	0x3d, r18	; 61
     2a6:	ed b7       	in	r30, 0x3d	; 61
     2a8:	fe b7       	in	r31, 0x3e	; 62
     2aa:	31 96       	adiw	r30, 0x01	; 1
     2ac:	28 e9       	ldi	r18, 0x98	; 152
     2ae:	30 e0       	ldi	r19, 0x00	; 0
     2b0:	ad b7       	in	r26, 0x3d	; 61
     2b2:	be b7       	in	r27, 0x3e	; 62
     2b4:	12 96       	adiw	r26, 0x02	; 2
     2b6:	3c 93       	st	X, r19
     2b8:	2e 93       	st	-X, r18
     2ba:	11 97       	sbiw	r26, 0x01	; 1
     2bc:	82 83       	std	Z+2, r24	; 0x02
     2be:	13 82       	std	Z+3, r1	; 0x03
     2c0:	64 83       	std	Z+4, r22	; 0x04
     2c2:	15 82       	std	Z+5, r1	; 0x05
     2c4:	96 83       	std	Z+6, r25	; 0x06
     2c6:	17 82       	std	Z+7, r1	; 0x07
     2c8:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <printf_P>
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     2cc:	8b b1       	in	r24, 0x0b	; 11
     2ce:	8f 70       	andi	r24, 0x0F	; 15
     2d0:	80 69       	ori	r24, 0x90	; 144
     2d2:	8b b9       	out	0x0b, r24	; 11
     2d4:	2d b7       	in	r18, 0x3d	; 61
     2d6:	3e b7       	in	r19, 0x3e	; 62
     2d8:	28 5f       	subi	r18, 0xF8	; 248
     2da:	3f 4f       	sbci	r19, 0xFF	; 255
     2dc:	0f b6       	in	r0, 0x3f	; 63
     2de:	f8 94       	cli
     2e0:	3e bf       	out	0x3e, r19	; 62
     2e2:	0f be       	out	0x3f, r0	; 63
     2e4:	2d bf       	out	0x3d, r18	; 61
	                         " -- Error Code %d\r\n"
	                         " -- Sub Error Code %d\r\n"
	                         " -- In State %d\r\n" ESC_FG_WHITE), ErrorCode, SubErrorCode, USB_HostState);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
}
     2e6:	08 95       	ret

000002e8 <EVENT_USB_Host_HostError>:
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
}

/** Event handler for the USB_HostError event. This indicates that a hardware error occurred while in host mode. */
void EVENT_USB_Host_HostError(const uint8_t ErrorCode)
{
     2e8:	1f 93       	push	r17
     2ea:	18 2f       	mov	r17, r24
	USB_Disable();
     2ec:	66 d4       	rcall	.+2252   	; 0xbba <USB_Disable>

	printf_P(PSTR(ESC_FG_RED "Host Mode Error\r\n"
     2ee:	00 d0       	rcall	.+0      	; 0x2f0 <EVENT_USB_Host_HostError+0x8>
     2f0:	00 d0       	rcall	.+0      	; 0x2f2 <EVENT_USB_Host_HostError+0xa>
     2f2:	ed b7       	in	r30, 0x3d	; 61
     2f4:	fe b7       	in	r31, 0x3e	; 62
     2f6:	31 96       	adiw	r30, 0x01	; 1
     2f8:	8e ee       	ldi	r24, 0xEE	; 238
     2fa:	90 e0       	ldi	r25, 0x00	; 0
     2fc:	ad b7       	in	r26, 0x3d	; 61
     2fe:	be b7       	in	r27, 0x3e	; 62
     300:	12 96       	adiw	r26, 0x02	; 2
     302:	9c 93       	st	X, r25
     304:	8e 93       	st	-X, r24
     306:	11 97       	sbiw	r26, 0x01	; 1
     308:	12 83       	std	Z+2, r17	; 0x02
     30a:	13 82       	std	Z+3, r1	; 0x03
     30c:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <printf_P>
     310:	8b b1       	in	r24, 0x0b	; 11
     312:	8f 70       	andi	r24, 0x0F	; 15
     314:	80 69       	ori	r24, 0x90	; 144
     316:	8b b9       	out	0x0b, r24	; 11
     318:	0f 90       	pop	r0
     31a:	0f 90       	pop	r0
     31c:	0f 90       	pop	r0
     31e:	0f 90       	pop	r0
     320:	ff cf       	rjmp	.-2      	; 0x320 <EVENT_USB_Host_HostError+0x38>

00000322 <EVENT_USB_Host_DeviceUnattached>:
/** Event handler for the USB_DeviceUnattached event. This indicates that a device has been removed from the host, and
 *  stops the library USB task management process.
 */
void EVENT_USB_Host_DeviceUnattached(void)
{
	puts_P(PSTR("\r\nDevice Unattached.\r\n"));
     322:	8d ee       	ldi	r24, 0xED	; 237
     324:	91 e0       	ldi	r25, 0x01	; 1
     326:	0e 94 10 10 	call	0x2020	; 0x2020 <puts_P>
     32a:	8b b1       	in	r24, 0x0b	; 11
     32c:	8f 70       	andi	r24, 0x0F	; 15
     32e:	80 61       	ori	r24, 0x10	; 16
     330:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
}
     332:	08 95       	ret

00000334 <EVENT_USB_Host_DeviceAttached>:
/** Event handler for the USB_DeviceAttached event. This indicates that a device has been attached to the host, and
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Host_DeviceAttached(void)
{
	puts_P(PSTR("Device Attached.\r\n"));
     334:	84 e0       	ldi	r24, 0x04	; 4
     336:	92 e0       	ldi	r25, 0x02	; 2
     338:	0e 94 10 10 	call	0x2020	; 0x2020 <puts_P>
     33c:	8b b1       	in	r24, 0x0b	; 11
     33e:	8f 70       	andi	r24, 0x0F	; 15
     340:	80 6a       	ori	r24, 0xA0	; 160
     342:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
}
     344:	08 95       	ret

00000346 <EVENT_USB_Host_DeviceEnumerationComplete>:

/** Event handler for the USB_DeviceEnumerationComplete event. This indicates that a device has been successfully
 *  enumerated by the host and is now ready to be used by the application.
 */
void EVENT_USB_Host_DeviceEnumerationComplete(void)
{
     346:	0f 93       	push	r16
     348:	1f 93       	push	r17
     34a:	df 93       	push	r29
     34c:	cf 93       	push	r28
     34e:	cd b7       	in	r28, 0x3d	; 61
     350:	de b7       	in	r29, 0x3e	; 62
     352:	c2 50       	subi	r28, 0x02	; 2
     354:	d2 40       	sbci	r29, 0x02	; 2
     356:	0f b6       	in	r0, 0x3f	; 63
     358:	f8 94       	cli
     35a:	de bf       	out	0x3e, r29	; 62
     35c:	0f be       	out	0x3f, r0	; 63
     35e:	cd bf       	out	0x3d, r28	; 61
     360:	8b b1       	in	r24, 0x0b	; 11
     362:	8f 70       	andi	r24, 0x0F	; 15
     364:	80 6a       	ori	r24, 0xA0	; 160
     366:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);

	uint16_t ConfigDescriptorSize;
	uint8_t  ConfigDescriptorData[512];

	if (USB_Host_GetDeviceConfigDescriptor(1, &ConfigDescriptorSize, ConfigDescriptorData,
     368:	8e 01       	movw	r16, r28
     36a:	0d 5f       	subi	r16, 0xFD	; 253
     36c:	1f 4f       	sbci	r17, 0xFF	; 255
     36e:	81 e0       	ldi	r24, 0x01	; 1
     370:	be 01       	movw	r22, r28
     372:	6f 5f       	subi	r22, 0xFF	; 255
     374:	7f 4f       	sbci	r23, 0xFF	; 255
     376:	a8 01       	movw	r20, r16
     378:	20 e0       	ldi	r18, 0x00	; 0
     37a:	32 e0       	ldi	r19, 0x02	; 2
     37c:	71 d5       	rcall	.+2786   	; 0xe60 <USB_Host_GetDeviceConfigDescriptor>
     37e:	88 23       	and	r24, r24
     380:	19 f0       	breq	.+6      	; 0x388 <EVENT_USB_Host_DeviceEnumerationComplete+0x42>
	                                       sizeof(ConfigDescriptorData)) != HOST_GETCONFIG_Successful)
	{
		puts_P(PSTR("Error Retrieving Configuration Descriptor.\r\n"));
     382:	80 ec       	ldi	r24, 0xC0	; 192
     384:	91 e0       	ldi	r25, 0x01	; 1
     386:	12 c0       	rjmp	.+36     	; 0x3ac <EVENT_USB_Host_DeviceEnumerationComplete+0x66>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (HID_Host_ConfigurePipes(&Keyboard_HID_Interface,
     388:	69 81       	ldd	r22, Y+1	; 0x01
     38a:	7a 81       	ldd	r23, Y+2	; 0x02
     38c:	80 e0       	ldi	r24, 0x00	; 0
     38e:	91 e0       	ldi	r25, 0x01	; 1
     390:	a8 01       	movw	r20, r16
     392:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <HID_Host_ConfigurePipes>
     396:	88 23       	and	r24, r24
     398:	19 f0       	breq	.+6      	; 0x3a0 <EVENT_USB_Host_DeviceEnumerationComplete+0x5a>
	                            ConfigDescriptorSize, ConfigDescriptorData) != HID_ENUMERROR_NoError)
	{
		puts_P(PSTR("Attached Device Not a Valid Keyboard.\r\n"));
     39a:	88 e9       	ldi	r24, 0x98	; 152
     39c:	91 e0       	ldi	r25, 0x01	; 1
     39e:	06 c0       	rjmp	.+12     	; 0x3ac <EVENT_USB_Host_DeviceEnumerationComplete+0x66>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (USB_Host_SetDeviceConfiguration(1) != HOST_SENDCONTROL_Successful)
     3a0:	81 e0       	ldi	r24, 0x01	; 1
     3a2:	e9 d6       	rcall	.+3538   	; 0x1176 <USB_Host_SetDeviceConfiguration>
     3a4:	88 23       	and	r24, r24
     3a6:	41 f0       	breq	.+16     	; 0x3b8 <EVENT_USB_Host_DeviceEnumerationComplete+0x72>
	{
		puts_P(PSTR("Error Setting Device Configuration.\r\n"));
     3a8:	82 e7       	ldi	r24, 0x72	; 114
     3aa:	91 e0       	ldi	r25, 0x01	; 1
     3ac:	0e 94 10 10 	call	0x2020	; 0x2020 <puts_P>
     3b0:	8b b1       	in	r24, 0x0b	; 11
     3b2:	8f 70       	andi	r24, 0x0F	; 15
     3b4:	80 69       	ori	r24, 0x90	; 144
     3b6:	18 c0       	rjmp	.+48     	; 0x3e8 <EVENT_USB_Host_DeviceEnumerationComplete+0xa2>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (HID_Host_SetReportProtocol(&Keyboard_HID_Interface) != 0)
     3b8:	80 e0       	ldi	r24, 0x00	; 0
     3ba:	91 e0       	ldi	r25, 0x01	; 1
     3bc:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <HID_Host_SetReportProtocol>
     3c0:	88 23       	and	r24, r24
     3c2:	59 f0       	breq	.+22     	; 0x3da <EVENT_USB_Host_DeviceEnumerationComplete+0x94>
	{
		puts_P(PSTR("Error Setting Report Protocol Mode or Not a Valid Keyboard.\r\n"));
     3c4:	84 e3       	ldi	r24, 0x34	; 52
     3c6:	91 e0       	ldi	r25, 0x01	; 1
     3c8:	0e 94 10 10 	call	0x2020	; 0x2020 <puts_P>
     3cc:	8b b1       	in	r24, 0x0b	; 11
     3ce:	8f 70       	andi	r24, 0x0F	; 15
     3d0:	80 69       	ori	r24, 0x90	; 144
     3d2:	8b b9       	out	0x0b, r24	; 11
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		USB_Host_SetDeviceConfiguration(0);
     3d4:	80 e0       	ldi	r24, 0x00	; 0
     3d6:	cf d6       	rcall	.+3486   	; 0x1176 <USB_Host_SetDeviceConfiguration>
     3d8:	08 c0       	rjmp	.+16     	; 0x3ea <EVENT_USB_Host_DeviceEnumerationComplete+0xa4>
		return;
	}

	puts_P(PSTR("Keyboard Enumerated.\r\n"));
     3da:	8d e1       	ldi	r24, 0x1D	; 29
     3dc:	91 e0       	ldi	r25, 0x01	; 1
     3de:	0e 94 10 10 	call	0x2020	; 0x2020 <puts_P>
     3e2:	8b b1       	in	r24, 0x0b	; 11
     3e4:	8f 70       	andi	r24, 0x0F	; 15
     3e6:	80 66       	ori	r24, 0x60	; 96
     3e8:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
}
     3ea:	ce 5f       	subi	r28, 0xFE	; 254
     3ec:	dd 4f       	sbci	r29, 0xFD	; 253
     3ee:	0f b6       	in	r0, 0x3f	; 63
     3f0:	f8 94       	cli
     3f2:	de bf       	out	0x3e, r29	; 62
     3f4:	0f be       	out	0x3f, r0	; 63
     3f6:	cd bf       	out	0x3d, r28	; 61
     3f8:	cf 91       	pop	r28
     3fa:	df 91       	pop	r29
     3fc:	1f 91       	pop	r17
     3fe:	0f 91       	pop	r16
     400:	08 95       	ret

00000402 <KeyboardHost_Task>:

/** Task to manage an enumerated USB keyboard once connected, to display key state
 *  data as it is received.
 */
void KeyboardHost_Task(void)
{
     402:	8f 92       	push	r8
     404:	9f 92       	push	r9
     406:	af 92       	push	r10
     408:	bf 92       	push	r11
     40a:	cf 92       	push	r12
     40c:	df 92       	push	r13
     40e:	ef 92       	push	r14
     410:	ff 92       	push	r15
     412:	0f 93       	push	r16
     414:	1f 93       	push	r17
     416:	df 93       	push	r29
     418:	cf 93       	push	r28
     41a:	cd b7       	in	r28, 0x3d	; 61
     41c:	de b7       	in	r29, 0x3e	; 62
				/* Once a scan-code is found, stop scanning through the report items */
				break;
			}
		}
	}
}
     41e:	ad b6       	in	r10, 0x3d	; 61
     420:	be b6       	in	r11, 0x3e	; 62
/** Task to manage an enumerated USB keyboard once connected, to display key state
 *  data as it is received.
 */
void KeyboardHost_Task(void)
{
	if (USB_HostState != HOST_STATE_Configured)
     422:	80 91 0a 05 	lds	r24, 0x050A
     426:	8b 30       	cpi	r24, 0x0B	; 11
     428:	09 f0       	breq	.+2      	; 0x42c <KeyboardHost_Task+0x2a>
     42a:	7a c0       	rjmp	.+244    	; 0x520 <KeyboardHost_Task+0x11e>
	  return;
	
	if (HID_Host_IsReportReceived(&Keyboard_HID_Interface))
     42c:	80 e0       	ldi	r24, 0x00	; 0
     42e:	91 e0       	ldi	r25, 0x01	; 1
     430:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <HID_Host_IsReportReceived>
     434:	88 23       	and	r24, r24
     436:	09 f4       	brne	.+2      	; 0x43a <KeyboardHost_Task+0x38>
     438:	73 c0       	rjmp	.+230    	; 0x520 <KeyboardHost_Task+0x11e>
     43a:	9d b6       	in	r9, 0x3d	; 61
     43c:	8e b6       	in	r8, 0x3e	; 62
	{
		uint8_t KeyboardReport[Keyboard_HID_Interface.State.LargestReportSize];
     43e:	80 91 12 01 	lds	r24, 0x0112
     442:	2d b7       	in	r18, 0x3d	; 61
     444:	3e b7       	in	r19, 0x3e	; 62
     446:	28 1b       	sub	r18, r24
     448:	31 09       	sbc	r19, r1
     44a:	0f b6       	in	r0, 0x3f	; 63
     44c:	f8 94       	cli
     44e:	3e bf       	out	0x3e, r19	; 62
     450:	0f be       	out	0x3f, r0	; 63
     452:	2d bf       	out	0x3d, r18	; 61
     454:	0d b7       	in	r16, 0x3d	; 61
     456:	1e b7       	in	r17, 0x3e	; 62
     458:	0f 5f       	subi	r16, 0xFF	; 255
     45a:	1f 4f       	sbci	r17, 0xFF	; 255
		HID_Host_ReceiveReport(&Keyboard_HID_Interface, &KeyboardReport);
     45c:	80 e0       	ldi	r24, 0x00	; 0
     45e:	91 e0       	ldi	r25, 0x01	; 1
     460:	b8 01       	movw	r22, r16
     462:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <HID_Host_ReceiveReport>
		for (uint8_t ReportNumber = 0; ReportNumber < HIDReportInfo.TotalReportItems; ReportNumber++)
		{
			HID_ReportItem_t* ReportItem = &HIDReportInfo.ReportItems[ReportNumber];

			/* Update the report item value if it is contained within the current report */
			if (!(USB_GetHIDReportItemInfo(KeyboardReport, ReportItem)))
     466:	d0 2e       	mov	r13, r16
     468:	e1 2e       	mov	r14, r17
     46a:	ff 24       	eor	r15, r15
		uint8_t KeyboardReport[Keyboard_HID_Interface.State.LargestReportSize];
		HID_Host_ReceiveReport(&Keyboard_HID_Interface, &KeyboardReport);

		for (uint8_t ReportNumber = 0; ReportNumber < HIDReportInfo.TotalReportItems; ReportNumber++)
		{
			HID_ReportItem_t* ReportItem = &HIDReportInfo.ReportItems[ReportNumber];
     46c:	8a e2       	ldi	r24, 0x2A	; 42
     46e:	c8 2e       	mov	r12, r24
     470:	47 c0       	rjmp	.+142    	; 0x500 <KeyboardHost_Task+0xfe>
     472:	fc 9c       	mul	r15, r12
     474:	80 01       	movw	r16, r0
     476:	11 24       	eor	r1, r1
     478:	0b 5d       	subi	r16, 0xDB	; 219
     47a:	1e 4f       	sbci	r17, 0xFE	; 254

			/* Update the report item value if it is contained within the current report */
			if (!(USB_GetHIDReportItemInfo(KeyboardReport, ReportItem)))
     47c:	8d 2d       	mov	r24, r13
     47e:	9e 2d       	mov	r25, r14
     480:	b8 01       	movw	r22, r16
     482:	b0 d6       	rcall	.+3424   	; 0x11e4 <USB_GetHIDReportItemInfo>
     484:	88 23       	and	r24, r24
     486:	d9 f1       	breq	.+118    	; 0x4fe <KeyboardHost_Task+0xfc>
			  continue;

			/* Determine what report item is being tested, process updated value as needed */
			if ((ReportItem->Attributes.Usage.Page      == USAGE_PAGE_KEYBOARD) &&
     488:	f8 01       	movw	r30, r16
     48a:	81 85       	ldd	r24, Z+9	; 0x09
     48c:	92 85       	ldd	r25, Z+10	; 0x0a
     48e:	07 97       	sbiw	r24, 0x07	; 7
     490:	b1 f5       	brne	.+108    	; 0x4fe <KeyboardHost_Task+0xfc>
     492:	80 85       	ldd	r24, Z+8	; 0x08
     494:	88 30       	cpi	r24, 0x08	; 8
     496:	99 f5       	brne	.+102    	; 0x4fe <KeyboardHost_Task+0xfc>
     498:	86 89       	ldd	r24, Z+22	; 0x16
     49a:	97 89       	ldd	r25, Z+23	; 0x17
     49c:	a0 8d       	ldd	r26, Z+24	; 0x18
     49e:	b1 8d       	ldd	r27, Z+25	; 0x19
     4a0:	02 97       	sbiw	r24, 0x02	; 2
     4a2:	a1 05       	cpc	r26, r1
     4a4:	b1 05       	cpc	r27, r1
     4a6:	58 f1       	brcs	.+86     	; 0x4fe <KeyboardHost_Task+0xfc>
     4a8:	82 81       	ldd	r24, Z+2	; 0x02
     4aa:	88 23       	and	r24, r24
     4ac:	41 f5       	brne	.+80     	; 0x4fe <KeyboardHost_Task+0xfc>
				(ReportItem->Attributes.BitSize         == 8)                   &&
				(ReportItem->Attributes.Logical.Maximum > 1)                    &&
				(ReportItem->ItemType                   == HID_REPORT_ITEM_In))
			{
				/* Key code is an unsigned char in length, cast to the appropriate type */
				uint8_t KeyCode = (uint8_t)ReportItem->Value;
     4ae:	62 a1       	ldd	r22, Z+34	; 0x22

				/* If scan-code is non-zero, a key is being pressed */
				if (KeyCode)
     4b0:	66 23       	and	r22, r22
     4b2:	59 f1       	breq	.+86     	; 0x50a <KeyboardHost_Task+0x108>
				PORTD = ((PORTD & ~LEDMask) | ActiveMask);
			}

			static inline void LEDs_ToggleLEDs(const uint8_t LEDMask)
			{
				PORTD ^= LEDMask;
     4b4:	8b b1       	in	r24, 0x0b	; 11
     4b6:	90 e2       	ldi	r25, 0x20	; 32
     4b8:	89 27       	eor	r24, r25
     4ba:	8b b9       	out	0x0b, r24	; 11
					LEDs_ToggleLEDs(LEDS_LED2);

					char PressedKey = 0;

					/* Convert scan-code to printable character if alphanumeric */
					if ((KeyCode >= HID_KEYBOARD_SC_A) && (KeyCode <= HID_KEYBOARD_SC_Z))
     4bc:	86 2f       	mov	r24, r22
     4be:	84 50       	subi	r24, 0x04	; 4
     4c0:	8a 31       	cpi	r24, 0x1A	; 26
     4c2:	10 f4       	brcc	.+4      	; 0x4c8 <KeyboardHost_Task+0xc6>
					{
						PressedKey = (KeyCode - HID_KEYBOARD_SC_A) + 'A';
     4c4:	8f 5b       	subi	r24, 0xBF	; 191
     4c6:	11 c0       	rjmp	.+34     	; 0x4ea <KeyboardHost_Task+0xe8>
					}
					else if ((KeyCode >= HID_KEYBOARD_SC_1_AND_EXCLAMATION) &
     4c8:	86 2f       	mov	r24, r22
     4ca:	8e 51       	subi	r24, 0x1E	; 30
     4cc:	89 30       	cpi	r24, 0x09	; 9
     4ce:	10 f4       	brcc	.+4      	; 0x4d4 <KeyboardHost_Task+0xd2>
							 (KeyCode  < HID_KEYBOARD_SC_0_AND_CLOSING_PARENTHESIS))
					{
						PressedKey = (KeyCode - HID_KEYBOARD_SC_1_AND_EXCLAMATION) + '1';
     4d0:	8f 5c       	subi	r24, 0xCF	; 207
     4d2:	0b c0       	rjmp	.+22     	; 0x4ea <KeyboardHost_Task+0xe8>
					}
					else if (KeyCode == HID_KEYBOARD_SC_0_AND_CLOSING_PARENTHESIS)
     4d4:	67 32       	cpi	r22, 0x27	; 39
     4d6:	11 f4       	brne	.+4      	; 0x4dc <KeyboardHost_Task+0xda>
     4d8:	80 e3       	ldi	r24, 0x30	; 48
     4da:	09 c0       	rjmp	.+18     	; 0x4ee <KeyboardHost_Task+0xec>
					{
						PressedKey = '0';
					}
					else if (KeyCode == HID_KEYBOARD_SC_SPACE)
     4dc:	6c 32       	cpi	r22, 0x2C	; 44
     4de:	11 f4       	brne	.+4      	; 0x4e4 <KeyboardHost_Task+0xe2>
     4e0:	80 e2       	ldi	r24, 0x20	; 32
     4e2:	05 c0       	rjmp	.+10     	; 0x4ee <KeyboardHost_Task+0xec>
					{
						PressedKey = ' ';
					}
					else if (KeyCode == HID_KEYBOARD_SC_ENTER)
     4e4:	68 32       	cpi	r22, 0x28	; 40
     4e6:	89 f4       	brne	.+34     	; 0x50a <KeyboardHost_Task+0x108>
     4e8:	19 c0       	rjmp	.+50     	; 0x51c <KeyboardHost_Task+0x11a>
					{
						PressedKey = '\n';
					}

					/* Print the pressed key character out through the serial port if valid */
					if (PressedKey)
     4ea:	88 23       	and	r24, r24
     4ec:	71 f0       	breq	.+28     	; 0x50a <KeyboardHost_Task+0x108>
					  putchar(PressedKey);
     4ee:	60 91 1b 05 	lds	r22, 0x051B
     4f2:	70 91 1c 05 	lds	r23, 0x051C
     4f6:	90 e0       	ldi	r25, 0x00	; 0
     4f8:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <fputc>
     4fc:	06 c0       	rjmp	.+12     	; 0x50a <KeyboardHost_Task+0x108>
	if (HID_Host_IsReportReceived(&Keyboard_HID_Interface))
	{
		uint8_t KeyboardReport[Keyboard_HID_Interface.State.LargestReportSize];
		HID_Host_ReceiveReport(&Keyboard_HID_Interface, &KeyboardReport);

		for (uint8_t ReportNumber = 0; ReportNumber < HIDReportInfo.TotalReportItems; ReportNumber++)
     4fe:	f3 94       	inc	r15
     500:	80 91 24 01 	lds	r24, 0x0124
     504:	f8 16       	cp	r15, r24
     506:	08 f4       	brcc	.+2      	; 0x50a <KeyboardHost_Task+0x108>
     508:	b4 cf       	rjmp	.-152    	; 0x472 <KeyboardHost_Task+0x70>
     50a:	89 2d       	mov	r24, r9
     50c:	98 2d       	mov	r25, r8
     50e:	9c 01       	movw	r18, r24
     510:	0f b6       	in	r0, 0x3f	; 63
     512:	f8 94       	cli
     514:	3e bf       	out	0x3e, r19	; 62
     516:	0f be       	out	0x3f, r0	; 63
     518:	2d bf       	out	0x3d, r18	; 61
     51a:	02 c0       	rjmp	.+4      	; 0x520 <KeyboardHost_Task+0x11e>
     51c:	8a e0       	ldi	r24, 0x0A	; 10
     51e:	e7 cf       	rjmp	.-50     	; 0x4ee <KeyboardHost_Task+0xec>
				/* Once a scan-code is found, stop scanning through the report items */
				break;
			}
		}
	}
}
     520:	0f b6       	in	r0, 0x3f	; 63
     522:	f8 94       	cli
     524:	be be       	out	0x3e, r11	; 62
     526:	0f be       	out	0x3f, r0	; 63
     528:	ad be       	out	0x3d, r10	; 61
     52a:	cf 91       	pop	r28
     52c:	df 91       	pop	r29
     52e:	1f 91       	pop	r17
     530:	0f 91       	pop	r16
     532:	ff 90       	pop	r15
     534:	ef 90       	pop	r14
     536:	df 90       	pop	r13
     538:	cf 90       	pop	r12
     53a:	bf 90       	pop	r11
     53c:	af 90       	pop	r10
     53e:	9f 90       	pop	r9
     540:	8f 90       	pop	r8
     542:	08 95       	ret

00000544 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     544:	84 b7       	in	r24, 0x34	; 52
     546:	87 7f       	andi	r24, 0xF7	; 247
     548:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     54a:	38 e1       	ldi	r19, 0x18	; 24
     54c:	0f b6       	in	r0, 0x3f	; 63
     54e:	f8 94       	cli
     550:	30 93 60 00 	sts	0x0060, r19
     554:	10 92 60 00 	sts	0x0060, r1
     558:	0f be       	out	0x3f, r0	; 63

	/* Disable clock division */
	clock_prescale_set(clock_div_1);
     55a:	80 e0       	ldi	r24, 0x00	; 0
     55c:	90 e0       	ldi	r25, 0x00	; 0
     55e:	20 e8       	ldi	r18, 0x80	; 128
     560:	0f b6       	in	r0, 0x3f	; 63
     562:	f8 94       	cli
     564:	20 93 61 00 	sts	0x0061, r18
     568:	80 93 61 00 	sts	0x0061, r24
     56c:	0f be       	out	0x3f, r0	; 63
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     56e:	83 e3       	ldi	r24, 0x33	; 51
     570:	90 e0       	ldi	r25, 0x00	; 0
     572:	90 93 cd 00 	sts	0x00CD, r25
     576:	80 93 cc 00 	sts	0x00CC, r24

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     57a:	86 e0       	ldi	r24, 0x06	; 6
     57c:	80 93 ca 00 	sts	0x00CA, r24
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     580:	10 92 c8 00 	sts	0x00C8, r1
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     584:	30 93 c9 00 	sts	0x00C9, r19

				DDRD  |= (1 << 3);
     588:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     58a:	5a 9a       	sbi	0x0b, 2	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     58c:	8a b1       	in	r24, 0x0a	; 10
     58e:	80 6f       	ori	r24, 0xF0	; 240
     590:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     592:	8b b1       	in	r24, 0x0b	; 11
     594:	8f 70       	andi	r24, 0x0F	; 15
     596:	8b b9       	out	0x0b, r24	; 11

	/* Hardware Initialization */
	Serial_Init(9600, false);
	LEDs_Init();
	USB_Init();
     598:	07 d3       	rcall	.+1550   	; 0xba8 <USB_Init>
			static inline void Serial_CreateStream(FILE* Stream)
			{
				if (!(Stream))
				{
					Stream = &USARTSerialStream;
					stdin  = Stream;
     59a:	eb e0       	ldi	r30, 0x0B	; 11
     59c:	f5 e0       	ldi	r31, 0x05	; 5
     59e:	f0 93 1a 05 	sts	0x051A, r31
     5a2:	e0 93 19 05 	sts	0x0519, r30
					stdout = Stream;
     5a6:	f0 93 1c 05 	sts	0x051C, r31
     5aa:	e0 93 1b 05 	sts	0x051B, r30
				}
			
				*Stream = (FILE)FDEV_SETUP_STREAM(Serial_putchar, Serial_getchar, _FDEV_SETUP_RW);
     5ae:	8e e0       	ldi	r24, 0x0E	; 14
     5b0:	df 01       	movw	r26, r30
     5b2:	1d 92       	st	X+, r1
     5b4:	8a 95       	dec	r24
     5b6:	e9 f7       	brne	.-6      	; 0x5b2 <SetupHardware+0x6e>
     5b8:	83 e0       	ldi	r24, 0x03	; 3
     5ba:	80 93 0e 05 	sts	0x050E, r24
     5be:	84 ea       	ldi	r24, 0xA4	; 164
     5c0:	9f e0       	ldi	r25, 0x0F	; 15
     5c2:	90 93 14 05 	sts	0x0514, r25
     5c6:	80 93 13 05 	sts	0x0513, r24
     5ca:	8e ea       	ldi	r24, 0xAE	; 174
     5cc:	9f e0       	ldi	r25, 0x0F	; 15
     5ce:	90 93 16 05 	sts	0x0516, r25
     5d2:	80 93 15 05 	sts	0x0515, r24

	/* Create a stdio stream for the serial port for stdin and stdout */
	Serial_CreateStream(NULL);
}
     5d6:	08 95       	ret

000005d8 <main>:
/** Main program entry point. This routine configures the hardware required by the application, then
 *  enters a loop to run the application tasks in sequence.
 */
int main(void)
{
	SetupHardware();
     5d8:	b5 df       	rcall	.-150    	; 0x544 <SetupHardware>

	puts_P(PSTR(ESC_FG_CYAN "Keyboard Host Demo running.\r\n" ESC_FG_WHITE));
     5da:	87 e1       	ldi	r24, 0x17	; 23
     5dc:	92 e0       	ldi	r25, 0x02	; 2
     5de:	0e 94 10 10 	call	0x2020	; 0x2020 <puts_P>
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     5e2:	8b b1       	in	r24, 0x0b	; 11
     5e4:	8f 70       	andi	r24, 0x0F	; 15
     5e6:	80 61       	ori	r24, 0x10	; 16
     5e8:	8b b9       	out	0x0b, r24	; 11

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
	sei();
     5ea:	78 94       	sei

	for (;;)
	{
		KeyboardHost_Task();
     5ec:	0a df       	rcall	.-492    	; 0x402 <KeyboardHost_Task>

		HID_Host_USBTask(&Keyboard_HID_Interface);
		USB_USBTask();
     5ee:	e8 d5       	rcall	.+3024   	; 0x11c0 <USB_USBTask>
     5f0:	fd cf       	rjmp	.-6      	; 0x5ec <main+0x14>

000005f2 <USB_Host_WaitMS>:
		USB_ResetInterface();
	}
}

uint8_t USB_Host_WaitMS(uint8_t MS)
{
     5f2:	98 2f       	mov	r25, r24
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     5f4:	20 91 9e 00 	lds	r18, 0x009E
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     5f8:	30 91 a0 00 	lds	r19, 0x00A0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     5fc:	80 91 a0 00 	lds	r24, 0x00A0
     600:	8f 7d       	andi	r24, 0xDF	; 223
     602:	80 93 a0 00 	sts	0x00A0, r24
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     606:	80 91 9f 00 	lds	r24, 0x009F
     60a:	8f 7d       	andi	r24, 0xDF	; 223
     60c:	80 93 9f 00 	sts	0x009F, r24
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     610:	80 91 9e 00 	lds	r24, 0x009E
     614:	81 60       	ori	r24, 0x01	; 1
     616:	80 93 9e 00 	sts	0x009E, r24
     61a:	28 c0       	rjmp	.+80     	; 0x66c <USB_Host_WaitMS+0x7a>
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     61c:	80 91 9f 00 	lds	r24, 0x009F

	USB_Host_ResumeBus();

	while (MS)
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     620:	85 ff       	sbrs	r24, 5
     622:	06 c0       	rjmp	.+12     	; 0x630 <USB_Host_WaitMS+0x3e>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     624:	80 91 9f 00 	lds	r24, 0x009F
     628:	8f 7d       	andi	r24, 0xDF	; 223
     62a:	80 93 9f 00 	sts	0x009F, r24
		{
			USB_INT_Clear(USB_INT_HSOFI);
			MS--;
     62e:	91 50       	subi	r25, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
     630:	80 91 0a 05 	lds	r24, 0x050A
     634:	81 30       	cpi	r24, 0x01	; 1
     636:	11 f4       	brne	.+4      	; 0x63c <USB_Host_WaitMS+0x4a>
     638:	91 e0       	ldi	r25, 0x01	; 1
     63a:	1a c0       	rjmp	.+52     	; 0x670 <USB_Host_WaitMS+0x7e>
			 *  \return Boolean \c true if an error has occurred on the selected pipe, \c false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
     63c:	80 91 a6 00 	lds	r24, 0x00A6
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError() == true)
     640:	84 ff       	sbrs	r24, 4
     642:	09 c0       	rjmp	.+18     	; 0x656 <USB_Host_WaitMS+0x64>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     644:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
     648:	80 91 a6 00 	lds	r24, 0x00A6
     64c:	8f 7e       	andi	r24, 0xEF	; 239
     64e:	80 93 a6 00 	sts	0x00A6, r24
     652:	92 e0       	ldi	r25, 0x02	; 2
     654:	0d c0       	rjmp	.+26     	; 0x670 <USB_Host_WaitMS+0x7e>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     656:	80 91 a6 00 	lds	r24, 0x00A6
			ErrorCode = HOST_WAITERROR_PipeError;

			break;
		}

		if (Pipe_IsStalled() == true)
     65a:	81 ff       	sbrs	r24, 1
     65c:	07 c0       	rjmp	.+14     	; 0x66c <USB_Host_WaitMS+0x7a>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
     65e:	80 91 a6 00 	lds	r24, 0x00A6
     662:	8d 7f       	andi	r24, 0xFD	; 253
     664:	80 93 a6 00 	sts	0x00A6, r24
     668:	93 e0       	ldi	r25, 0x03	; 3
     66a:	02 c0       	rjmp	.+4      	; 0x670 <USB_Host_WaitMS+0x7e>
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     66c:	99 23       	and	r25, r25
     66e:	b1 f6       	brne	.-84     	; 0x61c <USB_Host_WaitMS+0x2a>

			break;
		}
	}

	if (BusSuspended)
     670:	20 fd       	sbrc	r18, 0
     672:	05 c0       	rjmp	.+10     	; 0x67e <USB_Host_WaitMS+0x8c>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     674:	80 91 9e 00 	lds	r24, 0x009E
     678:	8e 7f       	andi	r24, 0xFE	; 254
     67a:	80 93 9e 00 	sts	0x009E, r24
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
     67e:	35 ff       	sbrs	r19, 5
     680:	05 c0       	rjmp	.+10     	; 0x68c <USB_Host_WaitMS+0x9a>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     682:	80 91 a0 00 	lds	r24, 0x00A0
     686:	80 62       	ori	r24, 0x20	; 32
     688:	80 93 a0 00 	sts	0x00A0, r24
	  USB_INT_Enable(USB_INT_HSOFI);

	return ErrorCode;
}
     68c:	89 2f       	mov	r24, r25
     68e:	08 95       	ret

00000690 <USB_Host_ResetDevice>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     690:	60 91 9e 00 	lds	r22, 0x009E
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     694:	80 91 a0 00 	lds	r24, 0x00A0
     698:	8d 7f       	andi	r24, 0xFD	; 253
     69a:	80 93 a0 00 	sts	0x00A0, r24
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
     69e:	80 91 9e 00 	lds	r24, 0x009E
     6a2:	82 60       	ori	r24, 0x02	; 2
     6a4:	80 93 9e 00 	sts	0x009E, r24
			 *  \return Boolean \c true if no bus reset is currently being sent, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
     6a8:	80 91 9e 00 	lds	r24, 0x009E
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
     6ac:	81 fd       	sbrc	r24, 1
     6ae:	fc cf       	rjmp	.-8      	; 0x6a8 <USB_Host_ResetDevice+0x18>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     6b0:	80 91 9e 00 	lds	r24, 0x009E
     6b4:	81 60       	ori	r24, 0x01	; 1
     6b6:	80 93 9e 00 	sts	0x009E, r24
	USB_Host_ResumeBus();
	
	USB_Host_ConfigurationNumber = 0;
     6ba:	10 92 00 05 	sts	0x0500, r1
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     6be:	30 91 a0 00 	lds	r19, 0x00A0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     6c2:	80 91 a0 00 	lds	r24, 0x00A0
     6c6:	8f 7d       	andi	r24, 0xDF	; 223
     6c8:	80 93 a0 00 	sts	0x00A0, r24
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     6cc:	80 91 9f 00 	lds	r24, 0x009F
     6d0:	8f 7d       	andi	r24, 0xDF	; 223
     6d2:	80 93 9f 00 	sts	0x009F, r24
     6d6:	2a e0       	ldi	r18, 0x0A	; 10
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     6d8:	40 ed       	ldi	r20, 0xD0	; 208
     6da:	57 e0       	ldi	r21, 0x07	; 7
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     6dc:	80 91 9f 00 	lds	r24, 0x009F
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     6e0:	85 ff       	sbrs	r24, 5
     6e2:	0b c0       	rjmp	.+22     	; 0x6fa <USB_Host_ResetDevice+0x6a>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     6e4:	80 91 9f 00 	lds	r24, 0x009F
     6e8:	8f 7d       	andi	r24, 0xDF	; 223
     6ea:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     6ee:	80 91 9f 00 	lds	r24, 0x009F
     6f2:	8d 7f       	andi	r24, 0xFD	; 253
     6f4:	80 93 9f 00 	sts	0x009F, r24
     6f8:	05 c0       	rjmp	.+10     	; 0x704 <USB_Host_ResetDevice+0x74>
     6fa:	ca 01       	movw	r24, r20
     6fc:	01 97       	sbiw	r24, 0x01	; 1
     6fe:	f1 f7       	brne	.-4      	; 0x6fc <USB_Host_ResetDevice+0x6c>
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
     700:	21 50       	subi	r18, 0x01	; 1
     702:	61 f7       	brne	.-40     	; 0x6dc <USB_Host_ResetDevice+0x4c>
		}

		Delay_MS(1);
	}

	if (HSOFIEnabled)
     704:	35 ff       	sbrs	r19, 5
     706:	05 c0       	rjmp	.+10     	; 0x712 <USB_Host_ResetDevice+0x82>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     708:	80 91 a0 00 	lds	r24, 0x00A0
     70c:	80 62       	ori	r24, 0x20	; 32
     70e:	80 93 a0 00 	sts	0x00A0, r24
	  USB_INT_Enable(USB_INT_HSOFI);

	if (BusSuspended)
     712:	60 fd       	sbrc	r22, 0
     714:	05 c0       	rjmp	.+10     	; 0x720 <USB_Host_ResetDevice+0x90>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     716:	80 91 9e 00 	lds	r24, 0x009E
     71a:	8e 7f       	andi	r24, 0xFE	; 254
     71c:	80 93 9e 00 	sts	0x009E, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     720:	80 91 a0 00 	lds	r24, 0x00A0
     724:	82 60       	ori	r24, 0x02	; 2
     726:	80 93 a0 00 	sts	0x00A0, r24
	  USB_Host_SuspendBus();

	USB_INT_Enable(USB_INT_DDISCI);
}
     72a:	08 95       	ret

0000072c <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "../Host.h"

void USB_Host_ProcessNextHostState(void)
{
     72c:	ef 92       	push	r14
     72e:	0f 93       	push	r16
     730:	1f 93       	push	r17
     732:	df 93       	push	r29
     734:	cf 93       	push	r28
     736:	cd b7       	in	r28, 0x3d	; 61
     738:	de b7       	in	r29, 0x3e	; 62
     73a:	28 97       	sbiw	r28, 0x08	; 8
     73c:	0f b6       	in	r0, 0x3f	; 63
     73e:	f8 94       	cli
     740:	de bf       	out	0x3e, r29	; 62
     742:	0f be       	out	0x3f, r0	; 63
     744:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
     746:	80 91 0a 05 	lds	r24, 0x050A
     74a:	85 30       	cpi	r24, 0x05	; 5
     74c:	09 f4       	brne	.+2      	; 0x750 <USB_Host_ProcessNextHostState+0x24>
     74e:	94 c0       	rjmp	.+296    	; 0x878 <USB_Host_ProcessNextHostState+0x14c>
     750:	86 30       	cpi	r24, 0x06	; 6
     752:	68 f4       	brcc	.+26     	; 0x76e <USB_Host_ProcessNextHostState+0x42>
     754:	82 30       	cpi	r24, 0x02	; 2
     756:	b9 f1       	breq	.+110    	; 0x7c6 <USB_Host_ProcessNextHostState+0x9a>
     758:	83 30       	cpi	r24, 0x03	; 3
     75a:	18 f4       	brcc	.+6      	; 0x762 <USB_Host_ProcessNextHostState+0x36>
     75c:	88 23       	and	r24, r24
     75e:	a1 f0       	breq	.+40     	; 0x788 <USB_Host_ProcessNextHostState+0x5c>
     760:	04 c1       	rjmp	.+520    	; 0x96a <USB_Host_ProcessNextHostState+0x23e>
     762:	83 30       	cpi	r24, 0x03	; 3
     764:	d1 f1       	breq	.+116    	; 0x7da <USB_Host_ProcessNextHostState+0xae>
     766:	84 30       	cpi	r24, 0x04	; 4
     768:	09 f0       	breq	.+2      	; 0x76c <USB_Host_ProcessNextHostState+0x40>
     76a:	ff c0       	rjmp	.+510    	; 0x96a <USB_Host_ProcessNextHostState+0x23e>
     76c:	5d c0       	rjmp	.+186    	; 0x828 <USB_Host_ProcessNextHostState+0xfc>
     76e:	87 30       	cpi	r24, 0x07	; 7
     770:	09 f4       	brne	.+2      	; 0x774 <USB_Host_ProcessNextHostState+0x48>
     772:	9b c0       	rjmp	.+310    	; 0x8aa <USB_Host_ProcessNextHostState+0x17e>
     774:	87 30       	cpi	r24, 0x07	; 7
     776:	08 f4       	brcc	.+2      	; 0x77a <USB_Host_ProcessNextHostState+0x4e>
     778:	8a c0       	rjmp	.+276    	; 0x88e <USB_Host_ProcessNextHostState+0x162>
     77a:	88 30       	cpi	r24, 0x08	; 8
     77c:	09 f4       	brne	.+2      	; 0x780 <USB_Host_ProcessNextHostState+0x54>
     77e:	b3 c0       	rjmp	.+358    	; 0x8e6 <USB_Host_ProcessNextHostState+0x1ba>
     780:	89 30       	cpi	r24, 0x09	; 9
     782:	09 f0       	breq	.+2      	; 0x786 <USB_Host_ProcessNextHostState+0x5a>
     784:	f2 c0       	rjmp	.+484    	; 0x96a <USB_Host_ProcessNextHostState+0x23e>
     786:	d7 c0       	rjmp	.+430    	; 0x936 <USB_Host_ProcessNextHostState+0x20a>
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
     788:	00 91 fe 04 	lds	r16, 0x04FE
     78c:	10 91 ff 04 	lds	r17, 0x04FF
     790:	01 15       	cp	r16, r1
     792:	11 05       	cpc	r17, r1
     794:	09 f4       	brne	.+2      	; 0x798 <USB_Host_ProcessNextHostState+0x6c>
     796:	e9 c0       	rjmp	.+466    	; 0x96a <USB_Host_ProcessNextHostState+0x23e>
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     798:	81 e0       	ldi	r24, 0x01	; 1
     79a:	2b df       	rcall	.-426    	; 0x5f2 <USB_Host_WaitMS>
     79c:	68 2f       	mov	r22, r24
     79e:	88 23       	and	r24, r24
     7a0:	31 f0       	breq	.+12     	; 0x7ae <USB_Host_ProcessNextHostState+0x82>
				{
					USB_HostState = PostWaitState;
     7a2:	80 91 fd 04 	lds	r24, 0x04FD
     7a6:	80 93 0a 05 	sts	0x050A, r24
     7aa:	91 e0       	ldi	r25, 0x01	; 1
     7ac:	da c0       	rjmp	.+436    	; 0x962 <USB_Host_ProcessNextHostState+0x236>
					ErrorCode     = HOST_ENUMERROR_WaitStage;
					break;
				}

				if (!(--WaitMSRemaining))
     7ae:	c8 01       	movw	r24, r16
     7b0:	01 97       	sbiw	r24, 0x01	; 1
     7b2:	90 93 ff 04 	sts	0x04FF, r25
     7b6:	80 93 fe 04 	sts	0x04FE, r24
     7ba:	89 2b       	or	r24, r25
     7bc:	09 f0       	breq	.+2      	; 0x7c0 <USB_Host_ProcessNextHostState+0x94>
     7be:	d5 c0       	rjmp	.+426    	; 0x96a <USB_Host_ProcessNextHostState+0x23e>
				  USB_HostState = PostWaitState;
     7c0:	80 91 fd 04 	lds	r24, 0x04FD
     7c4:	07 c0       	rjmp	.+14     	; 0x7d4 <USB_Host_ProcessNextHostState+0xa8>
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
     7c6:	88 ee       	ldi	r24, 0xE8	; 232
     7c8:	93 e0       	ldi	r25, 0x03	; 3
     7ca:	90 93 ff 04 	sts	0x04FF, r25
     7ce:	80 93 fe 04 	sts	0x04FE, r24

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
     7d2:	83 e0       	ldi	r24, 0x03	; 3
     7d4:	80 93 0a 05 	sts	0x050A, r24
     7d8:	c8 c0       	rjmp	.+400    	; 0x96a <USB_Host_ProcessNextHostState+0x23e>
			break;
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
     7da:	80 91 fe 04 	lds	r24, 0x04FE
     7de:	90 91 ff 04 	lds	r25, 0x04FF
     7e2:	01 97       	sbiw	r24, 0x01	; 1
     7e4:	90 93 ff 04 	sts	0x04FF, r25
     7e8:	80 93 fe 04 	sts	0x04FE, r24
     7ec:	01 96       	adiw	r24, 0x01	; 1
     7ee:	29 f0       	breq	.+10     	; 0x7fa <USB_Host_ProcessNextHostState+0xce>
     7f0:	80 ed       	ldi	r24, 0xD0	; 208
     7f2:	97 e0       	ldi	r25, 0x07	; 7
     7f4:	01 97       	sbiw	r24, 0x01	; 1
     7f6:	f1 f7       	brne	.-4      	; 0x7f4 <USB_Host_ProcessNextHostState+0xc8>
     7f8:	b8 c0       	rjmp	.+368    	; 0x96a <USB_Host_ProcessNextHostState+0x23e>
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
     7fa:	77 98       	cbi	0x0e, 7	; 14

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     7fc:	80 91 d8 00 	lds	r24, 0x00D8
     800:	80 61       	ori	r24, 0x10	; 16
     802:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
     806:	80 91 dd 00 	lds	r24, 0x00DD
     80a:	8b 7f       	andi	r24, 0xFB	; 251
     80c:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON |=  (1 << UVCONE);
     810:	80 91 d7 00 	lds	r24, 0x00D7
     814:	80 61       	ori	r24, 0x10	; 16
     816:	80 93 d7 00 	sts	0x00D7, r24
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
     81a:	80 91 dd 00 	lds	r24, 0x00DD
     81e:	82 60       	ori	r24, 0x02	; 2
     820:	80 93 dd 00 	sts	0x00DD, r24

				USB_OTGPAD_On();
				USB_Host_VBUS_Auto_Enable();
				USB_Host_VBUS_Auto_On();

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
     824:	84 e0       	ldi	r24, 0x04	; 4
     826:	d6 cf       	rjmp	.-84     	; 0x7d4 <USB_Host_ProcessNextHostState+0xa8>
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
     828:	80 91 9f 00 	lds	r24, 0x009F
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
     82c:	80 ff       	sbrs	r24, 0
     82e:	9d c0       	rjmp	.+314    	; 0x96a <USB_Host_ProcessNextHostState+0x23e>
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     830:	80 91 9f 00 	lds	r24, 0x009F
     834:	8e 7f       	andi	r24, 0xFE	; 254
     836:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     83a:	80 91 9f 00 	lds	r24, 0x009F
     83e:	8d 7f       	andi	r24, 0xFD	; 253
     840:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     844:	80 91 df 00 	lds	r24, 0x00DF
     848:	8d 7f       	andi	r24, 0xFD	; 253
     84a:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
     84e:	80 91 de 00 	lds	r24, 0x00DE
     852:	82 60       	ori	r24, 0x02	; 2
     854:	80 93 de 00 	sts	0x00DE, r24
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     858:	80 91 9e 00 	lds	r24, 0x009E
     85c:	81 60       	ori	r24, 0x01	; 1
     85e:	80 93 9e 00 	sts	0x009E, r24

				USB_INT_Clear(USB_INT_VBERRI);
				USB_INT_Enable(USB_INT_VBERRI);

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
     862:	ed d0       	rcall	.+474    	; 0xa3e <Pipe_ClearPipes>

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
     864:	10 92 0a 05 	sts	0x050A, r1
     868:	84 e6       	ldi	r24, 0x64	; 100
     86a:	90 e0       	ldi	r25, 0x00	; 0
     86c:	90 93 ff 04 	sts	0x04FF, r25
     870:	80 93 fe 04 	sts	0x04FE, r24
     874:	85 e0       	ldi	r24, 0x05	; 5
     876:	5c c0       	rjmp	.+184    	; 0x930 <USB_Host_ProcessNextHostState+0x204>
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
     878:	0b df       	rcall	.-490    	; 0x690 <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
     87a:	10 92 0a 05 	sts	0x050A, r1
     87e:	88 ec       	ldi	r24, 0xC8	; 200
     880:	90 e0       	ldi	r25, 0x00	; 0
     882:	90 93 ff 04 	sts	0x04FF, r25
     886:	80 93 fe 04 	sts	0x04FE, r24
     88a:	86 e0       	ldi	r24, 0x06	; 6
     88c:	51 c0       	rjmp	.+162    	; 0x930 <USB_Host_ProcessNextHostState+0x204>
			break;
		case HOST_STATE_Powered_ConfigPipe:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
     88e:	80 e0       	ldi	r24, 0x00	; 0
     890:	60 e0       	ldi	r22, 0x00	; 0
     892:	40 e0       	ldi	r20, 0x00	; 0
     894:	20 e0       	ldi	r18, 0x00	; 0
     896:	00 e4       	ldi	r16, 0x40	; 64
     898:	10 e0       	ldi	r17, 0x00	; 0
     89a:	ee 24       	eor	r14, r14
     89c:	72 d0       	rcall	.+228    	; 0x982 <Pipe_ConfigurePipe>
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     89e:	80 91 ac 00 	lds	r24, 0x00AC
							   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
							   PIPE_CONTROLPIPE_DEFAULT_SIZE, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
     8a2:	87 ff       	sbrs	r24, 7
     8a4:	5c c0       	rjmp	.+184    	; 0x95e <USB_Host_ProcessNextHostState+0x232>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
     8a6:	87 e0       	ldi	r24, 0x07	; 7
     8a8:	95 cf       	rjmp	.-214    	; 0x7d4 <USB_Host_ProcessNextHostState+0xa8>
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
     8aa:	a2 e0       	ldi	r26, 0x02	; 2
     8ac:	b5 e0       	ldi	r27, 0x05	; 5
     8ae:	eb e1       	ldi	r30, 0x1B	; 27
     8b0:	f1 e0       	ldi	r31, 0x01	; 1
     8b2:	88 e0       	ldi	r24, 0x08	; 8
     8b4:	01 90       	ld	r0, Z+
     8b6:	0d 92       	st	X+, r0
     8b8:	81 50       	subi	r24, 0x01	; 1
     8ba:	e1 f7       	brne	.-8      	; 0x8b4 <USB_Host_ProcessNextHostState+0x188>
					.wLength       = 8,
				};

			uint8_t DataBuffer[8];

			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
     8bc:	ce 01       	movw	r24, r28
     8be:	01 96       	adiw	r24, 0x01	; 1
     8c0:	53 d3       	rcall	.+1702   	; 0xf68 <USB_Host_SendControlRequest>
     8c2:	68 2f       	mov	r22, r24
     8c4:	88 23       	and	r24, r24
     8c6:	09 f0       	breq	.+2      	; 0x8ca <USB_Host_ProcessNextHostState+0x19e>
     8c8:	48 c0       	rjmp	.+144    	; 0x95a <USB_Host_ProcessNextHostState+0x22e>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_Host_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
     8ca:	88 85       	ldd	r24, Y+8	; 0x08
     8cc:	80 93 23 01 	sts	0x0123, r24

			USB_Host_ResetDevice();
     8d0:	df de       	rcall	.-578    	; 0x690 <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
     8d2:	10 92 0a 05 	sts	0x050A, r1
     8d6:	88 ec       	ldi	r24, 0xC8	; 200
     8d8:	90 e0       	ldi	r25, 0x00	; 0
     8da:	90 93 ff 04 	sts	0x04FF, r25
     8de:	80 93 fe 04 	sts	0x04FE, r24
     8e2:	88 e0       	ldi	r24, 0x08	; 8
     8e4:	25 c0       	rjmp	.+74     	; 0x930 <USB_Host_ProcessNextHostState+0x204>
			break;
		case HOST_STATE_Default_PostReset:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
     8e6:	00 91 23 01 	lds	r16, 0x0123
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	60 e0       	ldi	r22, 0x00	; 0
     8ee:	40 e0       	ldi	r20, 0x00	; 0
     8f0:	20 e0       	ldi	r18, 0x00	; 0
     8f2:	10 e0       	ldi	r17, 0x00	; 0
     8f4:	ee 24       	eor	r14, r14
     8f6:	45 d0       	rcall	.+138    	; 0x982 <Pipe_ConfigurePipe>
     8f8:	80 91 ac 00 	lds	r24, 0x00AC
			                   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
			                   USB_Host_ControlPipeSize, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
     8fc:	87 ff       	sbrs	r24, 7
     8fe:	2f c0       	rjmp	.+94     	; 0x95e <USB_Host_ProcessNextHostState+0x232>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
     900:	a2 e0       	ldi	r26, 0x02	; 2
     902:	b5 e0       	ldi	r27, 0x05	; 5
     904:	e3 e1       	ldi	r30, 0x13	; 19
     906:	f1 e0       	ldi	r31, 0x01	; 1
     908:	88 e0       	ldi	r24, 0x08	; 8
     90a:	01 90       	ld	r0, Z+
     90c:	0d 92       	st	X+, r0
     90e:	81 50       	subi	r24, 0x01	; 1
     910:	e1 f7       	brne	.-8      	; 0x90a <USB_Host_ProcessNextHostState+0x1de>
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
     912:	80 e0       	ldi	r24, 0x00	; 0
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	28 d3       	rcall	.+1616   	; 0xf68 <USB_Host_SendControlRequest>
     918:	68 2f       	mov	r22, r24
     91a:	88 23       	and	r24, r24
     91c:	f1 f4       	brne	.+60     	; 0x95a <USB_Host_ProcessNextHostState+0x22e>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
     91e:	10 92 0a 05 	sts	0x050A, r1
     922:	84 e6       	ldi	r24, 0x64	; 100
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	90 93 ff 04 	sts	0x04FF, r25
     92a:	80 93 fe 04 	sts	0x04FE, r24
     92e:	89 e0       	ldi	r24, 0x09	; 9
     930:	80 93 fd 04 	sts	0x04FD, r24
     934:	1a c0       	rjmp	.+52     	; 0x96a <USB_Host_ProcessNextHostState+0x23e>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
     936:	81 e0       	ldi	r24, 0x01	; 1
     938:	80 93 a1 00 	sts	0x00A1, r24
			break;
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			USB_HostState = HOST_STATE_Addressed;
     93c:	8a e0       	ldi	r24, 0x0A	; 10
     93e:	80 93 0a 05 	sts	0x050A, r24

			EVENT_USB_Host_DeviceEnumerationComplete();
     942:	01 dd       	rcall	.-1534   	; 0x346 <EVENT_USB_Host_DeviceEnumerationComplete>
     944:	12 c0       	rjmp	.+36     	; 0x96a <USB_Host_ProcessNextHostState+0x23e>
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
     946:	89 2f       	mov	r24, r25
     948:	a3 dc       	rcall	.-1722   	; 0x290 <EVENT_USB_Host_DeviceEnumerationFailed>
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     94a:	80 91 dd 00 	lds	r24, 0x00DD
     94e:	81 60       	ori	r24, 0x01	; 1
     950:	80 93 dd 00 	sts	0x00DD, r24

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
     954:	e6 dc       	rcall	.-1588   	; 0x322 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     956:	d8 d0       	rcall	.+432    	; 0xb08 <USB_ResetInterface>
     958:	08 c0       	rjmp	.+16     	; 0x96a <USB_Host_ProcessNextHostState+0x23e>
	}
}
     95a:	93 e0       	ldi	r25, 0x03	; 3
     95c:	02 c0       	rjmp	.+4      	; 0x962 <USB_Host_ProcessNextHostState+0x236>
     95e:	94 e0       	ldi	r25, 0x04	; 4
     960:	60 e0       	ldi	r22, 0x00	; 0

			EVENT_USB_Host_DeviceEnumerationComplete();
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
     962:	80 91 0a 05 	lds	r24, 0x050A
     966:	81 30       	cpi	r24, 0x01	; 1
     968:	71 f7       	brne	.-36     	; 0x946 <USB_Host_ProcessNextHostState+0x21a>

		EVENT_USB_Host_DeviceUnattached();

		USB_ResetInterface();
	}
}
     96a:	28 96       	adiw	r28, 0x08	; 8
     96c:	0f b6       	in	r0, 0x3f	; 63
     96e:	f8 94       	cli
     970:	de bf       	out	0x3e, r29	; 62
     972:	0f be       	out	0x3f, r0	; 63
     974:	cd bf       	out	0x3d, r28	; 61
     976:	cf 91       	pop	r28
     978:	df 91       	pop	r29
     97a:	1f 91       	pop	r17
     97c:	0f 91       	pop	r16
     97e:	ef 90       	pop	r14
     980:	08 95       	ret

00000982 <Pipe_ConfigurePipe>:
                        const uint8_t Type,
                        const uint8_t Token,
                        const uint8_t EndpointNumber,
                        const uint16_t Size,
                        const uint8_t Banks)
{
     982:	ef 92       	push	r14
     984:	0f 93       	push	r16
     986:	1f 93       	push	r17
     988:	e8 2f       	mov	r30, r24
     98a:	7e 2d       	mov	r23, r14

		Pipe_SelectPipe(PNum);
		
		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
     98c:	62 95       	swap	r22
     98e:	66 0f       	add	r22, r22
     990:	66 0f       	add	r22, r22
     992:	60 7c       	andi	r22, 0xC0	; 192
     994:	64 2b       	or	r22, r20
     996:	2f 70       	andi	r18, 0x0F	; 15
     998:	62 2b       	or	r22, r18
     99a:	38 2f       	mov	r19, r24
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     99c:	72 60       	ori	r23, 0x02	; 2
     99e:	45 c0       	rjmp	.+138    	; 0xa2a <Pipe_ConfigurePipe+0xa8>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     9a0:	30 93 a7 00 	sts	0x00A7, r19
		uint8_t UPCFG2XTemp;
		uint8_t UPIENXTemp;

		Pipe_SelectPipe(PNum);
		
		if (PNum == Number)
     9a4:	3e 17       	cp	r19, r30
     9a6:	a1 f4       	brne	.+40     	; 0x9d0 <Pipe_ConfigurePipe+0x4e>
     9a8:	88 e0       	ldi	r24, 0x08	; 8
     9aa:	90 e0       	ldi	r25, 0x00	; 0
     9ac:	20 e0       	ldi	r18, 0x00	; 0
     9ae:	03 c0       	rjmp	.+6      	; 0x9b6 <Pipe_ConfigurePipe+0x34>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
				{
					MaskVal++;
     9b0:	2f 5f       	subi	r18, 0xFF	; 255
					CheckBytes <<= 1;
     9b2:	88 0f       	add	r24, r24
     9b4:	99 1f       	adc	r25, r25
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
     9b6:	80 17       	cp	r24, r16
     9b8:	91 07       	cpc	r25, r17
     9ba:	10 f4       	brcc	.+4      	; 0x9c0 <Pipe_ConfigurePipe+0x3e>
     9bc:	25 30       	cpi	r18, 0x05	; 5
     9be:	c1 f7       	brne	.-16     	; 0x9b0 <Pipe_ConfigurePipe+0x2e>
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     9c0:	92 2f       	mov	r25, r18
     9c2:	92 95       	swap	r25
     9c4:	90 7f       	andi	r25, 0xF0	; 240
     9c6:	97 2b       	or	r25, r23
     9c8:	56 2f       	mov	r21, r22
     9ca:	40 e0       	ldi	r20, 0x00	; 0
     9cc:	20 e0       	ldi	r18, 0x00	; 0
     9ce:	08 c0       	rjmp	.+16     	; 0x9e0 <Pipe_ConfigurePipe+0x5e>
			UPCFG2XTemp = 0;
			UPIENXTemp  = 0;
		}
		else
		{
			UPCFG0XTemp = UPCFG0X;
     9d0:	50 91 aa 00 	lds	r21, 0x00AA
			UPCFG1XTemp = UPCFG1X;
     9d4:	90 91 ab 00 	lds	r25, 0x00AB
			UPCFG2XTemp = UPCFG2X;
     9d8:	40 91 ad 00 	lds	r20, 0x00AD
			UPIENXTemp  = UPIENX;
     9dc:	20 91 ae 00 	lds	r18, 0x00AE
		}

		if (!(UPCFG1XTemp & (1 << ALLOC)))
     9e0:	91 ff       	sbrs	r25, 1
     9e2:	22 c0       	rjmp	.+68     	; 0xa28 <Pipe_ConfigurePipe+0xa6>
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     9e4:	80 91 a9 00 	lds	r24, 0x00A9
     9e8:	8e 7f       	andi	r24, 0xFE	; 254
     9ea:	80 93 a9 00 	sts	0x00A9, r24
		  continue;
		  
		Pipe_DisablePipe();
		UPCFG1X &= ~(1 << ALLOC);
     9ee:	80 91 ab 00 	lds	r24, 0x00AB
     9f2:	8d 7f       	andi	r24, 0xFD	; 253
     9f4:	80 93 ab 00 	sts	0x00AB, r24
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
     9f8:	80 91 a9 00 	lds	r24, 0x00A9
     9fc:	81 60       	ori	r24, 0x01	; 1
     9fe:	80 93 a9 00 	sts	0x00A9, r24

		Pipe_EnablePipe();
		UPCFG0X = UPCFG0XTemp;
     a02:	50 93 aa 00 	sts	0x00AA, r21
		UPCFG1X = UPCFG1XTemp;
     a06:	90 93 ab 00 	sts	0x00AB, r25
		UPCFG2X = UPCFG2XTemp;
     a0a:	40 93 ad 00 	sts	0x00AD, r20
		UPIENX  = UPIENXTemp;
     a0e:	20 93 ae 00 	sts	0x00AE, r18

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
     a12:	80 91 a9 00 	lds	r24, 0x00A9
     a16:	80 62       	ori	r24, 0x20	; 32
     a18:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     a1c:	80 91 ac 00 	lds	r24, 0x00AC

		Pipe_SetInfiniteINRequests();
	
		if (!(Pipe_IsConfigured()))
     a20:	87 fd       	sbrc	r24, 7
     a22:	02 c0       	rjmp	.+4      	; 0xa28 <Pipe_ConfigurePipe+0xa6>
     a24:	80 e0       	ldi	r24, 0x00	; 0
     a26:	07 c0       	rjmp	.+14     	; 0xa36 <Pipe_ConfigurePipe+0xb4>

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else	
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
     a28:	3f 5f       	subi	r19, 0xFF	; 255
     a2a:	37 30       	cpi	r19, 0x07	; 7
     a2c:	08 f4       	brcc	.+2      	; 0xa30 <Pipe_ConfigurePipe+0xae>
     a2e:	b8 cf       	rjmp	.-144    	; 0x9a0 <Pipe_ConfigurePipe+0x1e>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     a30:	e0 93 a7 00 	sts	0x00A7, r30
     a34:	81 e0       	ldi	r24, 0x01	; 1
	}
		
	Pipe_SelectPipe(Number);	
	return true;
#endif
}
     a36:	1f 91       	pop	r17
     a38:	0f 91       	pop	r16
     a3a:	ef 90       	pop	r14
     a3c:	08 95       	ret

00000a3e <Pipe_ClearPipes>:

void Pipe_ClearPipes(void)
{
	UPINT = 0;
     a3e:	10 92 f8 00 	sts	0x00F8, r1
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	90 93 a7 00 	sts	0x00A7, r25

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
     a48:	10 92 ae 00 	sts	0x00AE, r1
		UPINTX  = 0;
     a4c:	10 92 a6 00 	sts	0x00A6, r1
		UPCFG1X = 0;
     a50:	10 92 ab 00 	sts	0x00AB, r1
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     a54:	80 91 a9 00 	lds	r24, 0x00A9
     a58:	8e 7f       	andi	r24, 0xFE	; 254
     a5a:	80 93 a9 00 	sts	0x00A9, r24

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     a5e:	9f 5f       	subi	r25, 0xFF	; 255
     a60:	97 30       	cpi	r25, 0x07	; 7
     a62:	81 f7       	brne	.-32     	; 0xa44 <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
     a64:	08 95       	ret

00000a66 <Pipe_IsEndpointBound>:

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
     a66:	48 2f       	mov	r20, r24
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
     a68:	30 91 a7 00 	lds	r19, 0x00A7
     a6c:	20 e0       	ldi	r18, 0x00	; 0
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     a6e:	20 93 a7 00 	sts	0x00A7, r18
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     a72:	80 91 ac 00 	lds	r24, 0x00AC

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
	{
		Pipe_SelectPipe(PNum);

		if (!(Pipe_IsConfigured()))
     a76:	87 ff       	sbrs	r24, 7
     a78:	10 c0       	rjmp	.+32     	; 0xa9a <Pipe_IsEndpointBound+0x34>
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				return (((UPCFG0X >> PEPNUM0) & PIPE_EPNUM_MASK) |
     a7a:	90 91 aa 00 	lds	r25, 0x00AA
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
     a7e:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				return (((UPCFG0X >> PEPNUM0) & PIPE_EPNUM_MASK) |
     a82:	80 73       	andi	r24, 0x30	; 48
     a84:	80 31       	cpi	r24, 0x10	; 16
     a86:	11 f0       	breq	.+4      	; 0xa8c <Pipe_IsEndpointBound+0x26>
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	01 c0       	rjmp	.+2      	; 0xa8e <Pipe_IsEndpointBound+0x28>
     a8c:	80 e8       	ldi	r24, 0x80	; 128
		  continue;

		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
     a8e:	9f 70       	andi	r25, 0x0F	; 15
     a90:	89 2b       	or	r24, r25
     a92:	84 17       	cp	r24, r20
     a94:	11 f4       	brne	.+4      	; 0xa9a <Pipe_IsEndpointBound+0x34>
     a96:	81 e0       	ldi	r24, 0x01	; 1
     a98:	08 95       	ret

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
	uint8_t PrevPipeNumber = Pipe_GetCurrentPipe();

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     a9a:	2f 5f       	subi	r18, 0xFF	; 255
     a9c:	27 30       	cpi	r18, 0x07	; 7
     a9e:	39 f7       	brne	.-50     	; 0xa6e <Pipe_IsEndpointBound+0x8>
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
     aa0:	37 70       	andi	r19, 0x07	; 7
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     aa2:	30 93 a7 00 	sts	0x00A7, r19
     aa6:	80 e0       	ldi	r24, 0x00	; 0
		  return true;
	}

	Pipe_SelectPipe(PrevPipeNumber);
	return false;
}
     aa8:	08 95       	ret

00000aaa <Pipe_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
     aaa:	40 91 a2 00 	lds	r20, 0x00A2
     aae:	50 91 a3 00 	lds	r21, 0x00A3
     ab2:	24 e6       	ldi	r18, 0x64	; 100
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
     ab4:	80 91 aa 00 	lds	r24, 0x00AA

	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
     ab8:	80 73       	andi	r24, 0x30	; 48
     aba:	80 31       	cpi	r24, 0x10	; 16
     abc:	29 f4       	brne	.+10     	; 0xac8 <Pipe_WaitUntilReady+0x1e>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     abe:	80 91 a6 00 	lds	r24, 0x00A6
		{
			if (Pipe_IsINReceived())
     ac2:	80 ff       	sbrs	r24, 0
     ac4:	05 c0       	rjmp	.+10     	; 0xad0 <Pipe_WaitUntilReady+0x26>
     ac6:	1e c0       	rjmp	.+60     	; 0xb04 <Pipe_WaitUntilReady+0x5a>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     ac8:	80 91 a6 00 	lds	r24, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
     acc:	82 fd       	sbrc	r24, 2
     ace:	1a c0       	rjmp	.+52     	; 0xb04 <Pipe_WaitUntilReady+0x5a>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     ad0:	80 91 a6 00 	lds	r24, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
     ad4:	81 ff       	sbrs	r24, 1
     ad6:	02 c0       	rjmp	.+4      	; 0xadc <Pipe_WaitUntilReady+0x32>
     ad8:	81 e0       	ldi	r24, 0x01	; 1
     ada:	08 95       	ret
		  return PIPE_READYWAIT_PipeStalled;
		else if (USB_HostState == HOST_STATE_Unattached)
     adc:	80 91 0a 05 	lds	r24, 0x050A
     ae0:	81 30       	cpi	r24, 0x01	; 1
     ae2:	11 f4       	brne	.+4      	; 0xae8 <Pipe_WaitUntilReady+0x3e>
     ae4:	82 e0       	ldi	r24, 0x02	; 2
     ae6:	08 95       	ret
     ae8:	80 91 a2 00 	lds	r24, 0x00A2
     aec:	90 91 a3 00 	lds	r25, 0x00A3
		  return PIPE_READYWAIT_DeviceDisconnected;

		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     af0:	84 17       	cp	r24, r20
     af2:	95 07       	cpc	r25, r21
     af4:	f9 f2       	breq	.-66     	; 0xab4 <Pipe_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     af6:	22 23       	and	r18, r18
     af8:	11 f4       	brne	.+4      	; 0xafe <Pipe_WaitUntilReady+0x54>
     afa:	83 e0       	ldi	r24, 0x03	; 3
     afc:	08 95       	ret
     afe:	21 50       	subi	r18, 0x01	; 1
     b00:	ac 01       	movw	r20, r24
     b02:	d8 cf       	rjmp	.-80     	; 0xab4 <Pipe_WaitUntilReady+0xa>
     b04:	80 e0       	ldi	r24, 0x00	; 0
			  return PIPE_READYWAIT_Timeout;
		}
	}
}
     b06:	08 95       	ret

00000b08 <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     b08:	70 d0       	rcall	.+224    	; 0xbea <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     b0a:	77 d0       	rcall	.+238    	; 0xbfa <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     b0c:	80 91 d8 00 	lds	r24, 0x00D8
     b10:	8f 77       	andi	r24, 0x7F	; 127
     b12:	80 93 d8 00 	sts	0x00D8, r24
				USBCON |=  (1 << USBE);
     b16:	80 91 d8 00 	lds	r24, 0x00D8
     b1a:	80 68       	ori	r24, 0x80	; 128
     b1c:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
     b20:	80 91 d8 00 	lds	r24, 0x00D8
     b24:	8f 7d       	andi	r24, 0xDF	; 223
     b26:	80 93 d8 00 	sts	0x00D8, r24
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
     b2a:	80 91 d7 00 	lds	r24, 0x00D7
     b2e:	8f 77       	andi	r24, 0x7F	; 127
     b30:	80 93 d7 00 	sts	0x00D7, r24

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     b34:	8c e0       	ldi	r24, 0x0C	; 12
     b36:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     b38:	8e e0       	ldi	r24, 0x0E	; 14
     b3a:	89 bd       	out	0x29, r24	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_CAN_BE_HOST)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));		
     b3c:	09 b4       	in	r0, 0x29	; 41
     b3e:	00 fe       	sbrs	r0, 0
     b40:	fd cf       	rjmp	.-6      	; 0xb3c <USB_ResetInterface+0x34>
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState                = HOST_STATE_Unattached;
     b42:	81 e0       	ldi	r24, 0x01	; 1
     b44:	80 93 0a 05 	sts	0x050A, r24
	USB_Host_ConfigurationNumber = 0;
     b48:	10 92 00 05 	sts	0x0500, r1
	USB_Host_ControlPipeSize     = PIPE_CONTROLPIPE_DEFAULT_SIZE;
     b4c:	80 e4       	ldi	r24, 0x40	; 64
     b4e:	80 93 23 01 	sts	0x0123, r24
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
     b52:	80 91 d8 00 	lds	r24, 0x00D8
     b56:	80 64       	ori	r24, 0x40	; 64
     b58:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     b5c:	80 91 dd 00 	lds	r24, 0x00DD
     b60:	81 60       	ori	r24, 0x01	; 1
     b62:	80 93 dd 00 	sts	0x00DD, r24
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
     b66:	80 91 dd 00 	lds	r24, 0x00DD
     b6a:	84 60       	ori	r24, 0x04	; 4
     b6c:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON &= ~(1 << UVCONE);
     b70:	80 91 d7 00 	lds	r24, 0x00D7
     b74:	8f 7e       	andi	r24, 0xEF	; 239
     b76:	80 93 d7 00 	sts	0x00D7, r24

				DDRE   |=  (1 << 7);
     b7a:	6f 9a       	sbi	0x0d, 7	; 13
			}

			static inline void USB_Host_VBUS_Manual_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_On(void)
			{
				PORTE  |=  (1 << 7);
     b7c:	77 9a       	sbi	0x0e, 7	; 14
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN |= (1 << SRPE);						
     b7e:	80 91 de 00 	lds	r24, 0x00DE
     b82:	81 60       	ori	r24, 0x01	; 1
     b84:	80 93 de 00 	sts	0x00DE, r24
						break;
					case USB_INT_RSTI:
						UHIEN  |= (1 << RSTE);
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
     b88:	80 91 de 00 	lds	r24, 0x00DE
     b8c:	84 60       	ori	r24, 0x04	; 4
     b8e:	80 93 de 00 	sts	0x00DE, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     b92:	80 91 e0 00 	lds	r24, 0x00E0
     b96:	8e 7f       	andi	r24, 0xFE	; 254
     b98:	80 93 e0 00 	sts	0x00E0, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     b9c:	80 91 d8 00 	lds	r24, 0x00D8
     ba0:	80 61       	ori	r24, 0x10	; 16
     ba2:	80 93 d8 00 	sts	0x00D8, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     ba6:	08 95       	ret

00000ba8 <USB_Init>:

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
     ba8:	e7 ed       	ldi	r30, 0xD7	; 215
     baa:	f0 e0       	ldi	r31, 0x00	; 0
     bac:	80 81       	ld	r24, Z
     bae:	81 60       	ori	r24, 0x01	; 1
     bb0:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     bb2:	81 e0       	ldi	r24, 0x01	; 1
     bb4:	80 93 01 05 	sts	0x0501, r24

	USB_ResetInterface();
}
     bb8:	a7 cf       	rjmp	.-178    	; 0xb08 <USB_ResetInterface>

00000bba <USB_Disable>:

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
     bba:	17 d0       	rcall	.+46     	; 0xbea <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     bbc:	1e d0       	rcall	.+60     	; 0xbfa <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
     bbe:	e0 ee       	ldi	r30, 0xE0	; 224
     bc0:	f0 e0       	ldi	r31, 0x00	; 0
     bc2:	80 81       	ld	r24, Z
     bc4:	81 60       	ori	r24, 0x01	; 1
     bc6:	80 83       	st	Z, r24
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON  &= ~(1 << USBE);
     bc8:	a8 ed       	ldi	r26, 0xD8	; 216
     bca:	b0 e0       	ldi	r27, 0x00	; 0
     bcc:	8c 91       	ld	r24, X
     bce:	8f 77       	andi	r24, 0x7F	; 127
     bd0:	8c 93       	st	X, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     bd2:	19 bc       	out	0x29, r1	; 41

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  &= ~(1 << UVREGE);
     bd4:	e7 ed       	ldi	r30, 0xD7	; 215
     bd6:	f0 e0       	ldi	r31, 0x00	; 0
     bd8:	80 81       	ld	r24, Z
     bda:	8e 7f       	andi	r24, 0xFE	; 254
     bdc:	80 83       	st	Z, r24
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON  &= ~(1 << OTGPADE);
     bde:	8c 91       	ld	r24, X
     be0:	8f 7e       	andi	r24, 0xEF	; 239
     be2:	8c 93       	st	X, r24

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
     be4:	10 92 01 05 	sts	0x0501, r1
}
     be8:	08 95       	ret

00000bea <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     bea:	e8 ed       	ldi	r30, 0xD8	; 216
     bec:	f0 e0       	ldi	r31, 0x00	; 0
     bee:	80 81       	ld	r24, Z
     bf0:	8c 7f       	andi	r24, 0xFC	; 252
     bf2:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
     bf4:	10 92 a0 00 	sts	0x00A0, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
	#endif
}
     bf8:	08 95       	ret

00000bfa <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     bfa:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_BOTH)
	OTGINT = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
     bfe:	10 92 9f 00 	sts	0x009F, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
	#endif
}
     c02:	08 95       	ret

00000c04 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
     c04:	1f 92       	push	r1
     c06:	0f 92       	push	r0
     c08:	0f b6       	in	r0, 0x3f	; 63
     c0a:	0f 92       	push	r0
     c0c:	0b b6       	in	r0, 0x3b	; 59
     c0e:	0f 92       	push	r0
     c10:	11 24       	eor	r1, r1
     c12:	2f 93       	push	r18
     c14:	3f 93       	push	r19
     c16:	4f 93       	push	r20
     c18:	5f 93       	push	r21
     c1a:	6f 93       	push	r22
     c1c:	7f 93       	push	r23
     c1e:	8f 93       	push	r24
     c20:	9f 93       	push	r25
     c22:	af 93       	push	r26
     c24:	bf 93       	push	r27
     c26:	ef 93       	push	r30
     c28:	ff 93       	push	r31
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     c2a:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	#if defined(USB_CAN_BE_HOST)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
     c2e:	85 ff       	sbrs	r24, 5
     c30:	0a c0       	rjmp	.+20     	; 0xc46 <__vector_10+0x42>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     c32:	80 91 a0 00 	lds	r24, 0x00A0
     c36:	85 ff       	sbrs	r24, 5
     c38:	06 c0       	rjmp	.+12     	; 0xc46 <__vector_10+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     c3a:	80 91 9f 00 	lds	r24, 0x009F
     c3e:	8f 7d       	andi	r24, 0xDF	; 223
     c40:	80 93 9f 00 	sts	0x009F, r24
	{
		USB_INT_Clear(USB_INT_HSOFI);

		EVENT_USB_Host_StartOfFrame();
     c44:	67 d1       	rcall	.+718    	; 0xf14 <USB_Event_Stub>
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
     c46:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
     c4a:	81 ff       	sbrs	r24, 1
     c4c:	15 c0       	rjmp	.+42     	; 0xc78 <__vector_10+0x74>
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
					case USB_INT_DCONNI:
						return (UHIEN  & (1 << DCONNE));
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
     c4e:	80 91 a0 00 	lds	r24, 0x00A0
     c52:	81 ff       	sbrs	r24, 1
     c54:	11 c0       	rjmp	.+34     	; 0xc78 <__vector_10+0x74>
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     c56:	80 91 9f 00 	lds	r24, 0x009F
     c5a:	8d 7f       	andi	r24, 0xFD	; 253
     c5c:	80 93 9f 00 	sts	0x009F, r24
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     c60:	80 91 9f 00 	lds	r24, 0x009F
     c64:	8e 7f       	andi	r24, 0xFE	; 254
     c66:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     c6a:	80 91 a0 00 	lds	r24, 0x00A0
     c6e:	8d 7f       	andi	r24, 0xFD	; 253
     c70:	80 93 a0 00 	sts	0x00A0, r24
	{
		USB_INT_Clear(USB_INT_DDISCI);
		USB_INT_Clear(USB_INT_DCONNI);
		USB_INT_Disable(USB_INT_DDISCI);

		EVENT_USB_Host_DeviceUnattached();
     c74:	56 db       	rcall	.-2388   	; 0x322 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     c76:	48 df       	rcall	.-368    	; 0xb08 <USB_ResetInterface>
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
     c78:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
     c7c:	81 ff       	sbrs	r24, 1
     c7e:	15 c0       	rjmp	.+42     	; 0xcaa <__vector_10+0xa6>
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
     c80:	80 91 de 00 	lds	r24, 0x00DE
     c84:	81 ff       	sbrs	r24, 1
     c86:	11 c0       	rjmp	.+34     	; 0xcaa <__vector_10+0xa6>
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     c88:	80 91 df 00 	lds	r24, 0x00DF
     c8c:	8d 7f       	andi	r24, 0xFD	; 253
     c8e:	80 93 df 00 	sts	0x00DF, r24
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
     c92:	77 98       	cbi	0x0e, 7	; 14
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     c94:	80 91 dd 00 	lds	r24, 0x00DD
     c98:	81 60       	ori	r24, 0x01	; 1
     c9a:	80 93 dd 00 	sts	0x00DD, r24
		USB_INT_Clear(USB_INT_VBERRI);

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
     c9e:	80 e0       	ldi	r24, 0x00	; 0
     ca0:	23 db       	rcall	.-2490   	; 0x2e8 <EVENT_USB_Host_HostError>
		EVENT_USB_Host_DeviceUnattached();
     ca2:	3f db       	rcall	.-2434   	; 0x322 <EVENT_USB_Host_DeviceUnattached>

		USB_HostState = HOST_STATE_Unattached;
     ca4:	81 e0       	ldi	r24, 0x01	; 1
     ca6:	80 93 0a 05 	sts	0x050A, r24
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
					case USB_INT_SRPI:
						return (OTGINT & (1 << SRPI));
     caa:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
     cae:	80 ff       	sbrs	r24, 0
     cb0:	17 c0       	rjmp	.+46     	; 0xce0 <__vector_10+0xdc>
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
					case USB_INT_SRPI:
						return (OTGIEN & (1 << SRPE));
     cb2:	80 91 de 00 	lds	r24, 0x00DE
     cb6:	80 ff       	sbrs	r24, 0
     cb8:	13 c0       	rjmp	.+38     	; 0xce0 <__vector_10+0xdc>
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
						break;
					case USB_INT_SRPI:
						OTGINT &= ~(1 << SRPI);
     cba:	80 91 df 00 	lds	r24, 0x00DF
     cbe:	8e 7f       	andi	r24, 0xFE	; 254
     cc0:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_VBERRI:
						OTGIEN &= ~(1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN &= ~(1 << SRPE);						
     cc4:	80 91 de 00 	lds	r24, 0x00DE
     cc8:	8e 7f       	andi	r24, 0xFE	; 254
     cca:	80 93 de 00 	sts	0x00DE, r24
	{
		USB_INT_Clear(USB_INT_SRPI);
		USB_INT_Disable(USB_INT_SRPI);

		EVENT_USB_Host_DeviceAttached();
     cce:	32 db       	rcall	.-2460   	; 0x334 <EVENT_USB_Host_DeviceAttached>
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     cd0:	80 91 a0 00 	lds	r24, 0x00A0
     cd4:	82 60       	ori	r24, 0x02	; 2
     cd6:	80 93 a0 00 	sts	0x00A0, r24

		USB_INT_Enable(USB_INT_DDISCI);

		USB_HostState = HOST_STATE_Powered;
     cda:	82 e0       	ldi	r24, 0x02	; 2
     cdc:	80 93 0a 05 	sts	0x050A, r24
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
     ce0:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
     ce4:	82 ff       	sbrs	r24, 2
     ce6:	0e c0       	rjmp	.+28     	; 0xd04 <__vector_10+0x100>
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
     ce8:	80 91 de 00 	lds	r24, 0x00DE
     cec:	82 ff       	sbrs	r24, 2
     cee:	0a c0       	rjmp	.+20     	; 0xd04 <__vector_10+0x100>
						break;
					case USB_INT_RSTI:
						UHINT  &= ~(1 << RSTI);
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
     cf0:	80 91 df 00 	lds	r24, 0x00DF
     cf4:	8b 7f       	andi	r24, 0xFB	; 251
     cf6:	80 93 df 00 	sts	0x00DF, r24
	{
		USB_INT_Clear(USB_INT_BCERRI);

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
     cfa:	82 e0       	ldi	r24, 0x02	; 2
     cfc:	60 e0       	ldi	r22, 0x00	; 0
     cfe:	c8 da       	rcall	.-2672   	; 0x290 <EVENT_USB_Host_DeviceEnumerationFailed>
		EVENT_USB_Host_DeviceUnattached();
     d00:	10 db       	rcall	.-2528   	; 0x322 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     d02:	02 df       	rcall	.-508    	; 0xb08 <USB_ResetInterface>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     d04:	ff 91       	pop	r31
     d06:	ef 91       	pop	r30
     d08:	bf 91       	pop	r27
     d0a:	af 91       	pop	r26
     d0c:	9f 91       	pop	r25
     d0e:	8f 91       	pop	r24
     d10:	7f 91       	pop	r23
     d12:	6f 91       	pop	r22
     d14:	5f 91       	pop	r21
     d16:	4f 91       	pop	r20
     d18:	3f 91       	pop	r19
     d1a:	2f 91       	pop	r18
     d1c:	0f 90       	pop	r0
     d1e:	0b be       	out	0x3b, r0	; 59
     d20:	0f 90       	pop	r0
     d22:	0f be       	out	0x3f, r0	; 63
     d24:	0f 90       	pop	r0
     d26:	1f 90       	pop	r1
     d28:	18 95       	reti

00000d2a <Pipe_Read_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     d2a:	bf 92       	push	r11
     d2c:	cf 92       	push	r12
     d2e:	df 92       	push	r13
     d30:	ef 92       	push	r14
     d32:	ff 92       	push	r15
     d34:	0f 93       	push	r16
     d36:	1f 93       	push	r17
     d38:	cf 93       	push	r28
     d3a:	df 93       	push	r29
     d3c:	18 2f       	mov	r17, r24
     d3e:	09 2f       	mov	r16, r25
     d40:	7b 01       	movw	r14, r22
     d42:	6a 01       	movw	r12, r20
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     d44:	80 91 aa 00 	lds	r24, 0x00AA
     d48:	8f 7c       	andi	r24, 0xCF	; 207
     d4a:	80 61       	ori	r24, 0x10	; 16
     d4c:	80 93 aa 00 	sts	0x00AA, r24
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
     d50:	ac de       	rcall	.-680    	; 0xaaa <Pipe_WaitUntilReady>
     d52:	b8 2e       	mov	r11, r24
     d54:	88 23       	and	r24, r24
     d56:	a9 f5       	brne	.+106    	; 0xdc2 <Pipe_Read_Stream_LE+0x98>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     d58:	81 2f       	mov	r24, r17
     d5a:	90 2f       	mov	r25, r16
     d5c:	9c 01       	movw	r18, r24
     d5e:	e9 01       	movw	r28, r18
	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
     d60:	c1 14       	cp	r12, r1
     d62:	d1 04       	cpc	r13, r1
     d64:	39 f0       	breq	.+14     	; 0xd74 <Pipe_Read_Stream_LE+0x4a>
	{
		Length -= *BytesProcessed;
     d66:	f6 01       	movw	r30, r12
     d68:	80 81       	ld	r24, Z
     d6a:	91 81       	ldd	r25, Z+1	; 0x01
     d6c:	e8 1a       	sub	r14, r24
     d6e:	f9 0a       	sbc	r15, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     d70:	c8 0f       	add	r28, r24
     d72:	d9 1f       	adc	r29, r25
     d74:	00 e0       	ldi	r16, 0x00	; 0
     d76:	10 e0       	ldi	r17, 0x00	; 0
     d78:	21 c0       	rjmp	.+66     	; 0xdbc <Pipe_Read_Stream_LE+0x92>
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
     d7a:	80 91 a6 00 	lds	r24, 0x00A6
	}
	
	while (Length)
	{
		if (!(Pipe_IsReadWriteAllowed()))
     d7e:	85 fd       	sbrc	r24, 5
     d80:	15 c0       	rjmp	.+42     	; 0xdac <Pipe_Read_Stream_LE+0x82>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     d82:	80 91 a6 00 	lds	r24, 0x00A6
     d86:	8e 77       	andi	r24, 0x7E	; 126
     d88:	80 93 a6 00 	sts	0x00A6, r24
		{
			TEMPLATE_CLEAR_PIPE();

			if (BytesProcessed != NULL)
     d8c:	c1 14       	cp	r12, r1
     d8e:	d1 04       	cpc	r13, r1
     d90:	49 f0       	breq	.+18     	; 0xda4 <Pipe_Read_Stream_LE+0x7a>
			{
				*BytesProcessed += BytesInTransfer;
     d92:	f6 01       	movw	r30, r12
     d94:	80 81       	ld	r24, Z
     d96:	91 81       	ldd	r25, Z+1	; 0x01
     d98:	80 0f       	add	r24, r16
     d9a:	91 1f       	adc	r25, r17
     d9c:	91 83       	std	Z+1, r25	; 0x01
     d9e:	80 83       	st	Z, r24
     da0:	84 e0       	ldi	r24, 0x04	; 4
     da2:	10 c0       	rjmp	.+32     	; 0xdc4 <Pipe_Read_Stream_LE+0x9a>
				return PIPE_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
     da4:	82 de       	rcall	.-764    	; 0xaaa <Pipe_WaitUntilReady>
     da6:	88 23       	and	r24, r24
     da8:	49 f0       	breq	.+18     	; 0xdbc <Pipe_Read_Stream_LE+0x92>
     daa:	0c c0       	rjmp	.+24     	; 0xdc4 <Pipe_Read_Stream_LE+0x9a>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
     dac:	80 91 af 00 	lds	r24, 0x00AF
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
     db0:	89 93       	st	Y+, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
     db2:	08 94       	sec
     db4:	e1 08       	sbc	r14, r1
     db6:	f1 08       	sbc	r15, r1
			BytesInTransfer++;
     db8:	0f 5f       	subi	r16, 0xFF	; 255
     dba:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}
	
	while (Length)
     dbc:	e1 14       	cp	r14, r1
     dbe:	f1 04       	cpc	r15, r1
     dc0:	e1 f6       	brne	.-72     	; 0xd7a <Pipe_Read_Stream_LE+0x50>
     dc2:	8b 2d       	mov	r24, r11
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
     dc4:	df 91       	pop	r29
     dc6:	cf 91       	pop	r28
     dc8:	1f 91       	pop	r17
     dca:	0f 91       	pop	r16
     dcc:	ff 90       	pop	r15
     dce:	ef 90       	pop	r14
     dd0:	df 90       	pop	r13
     dd2:	cf 90       	pop	r12
     dd4:	bf 90       	pop	r11
     dd6:	08 95       	ret

00000dd8 <USB_GetNextDescriptorComp>:

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
     dd8:	af 92       	push	r10
     dda:	bf 92       	push	r11
     ddc:	cf 92       	push	r12
     dde:	df 92       	push	r13
     de0:	ef 92       	push	r14
     de2:	ff 92       	push	r15
     de4:	0f 93       	push	r16
     de6:	1f 93       	push	r17
     de8:	cf 93       	push	r28
     dea:	df 93       	push	r29
     dec:	7c 01       	movw	r14, r24
     dee:	eb 01       	movw	r28, r22
     df0:	6a 01       	movw	r12, r20
     df2:	24 c0       	rjmp	.+72     	; 0xe3c <USB_GetNextDescriptorComp+0x64>
	uint8_t ErrorCode;

	while (*BytesRem)
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
     df4:	e8 81       	ld	r30, Y
     df6:	f9 81       	ldd	r31, Y+1	; 0x01
     df8:	be 2e       	mov	r11, r30
     dfa:	af 2e       	mov	r10, r31
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc)
			{
				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;
     dfc:	80 81       	ld	r24, Z
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	98 01       	movw	r18, r16
     e02:	80 17       	cp	r24, r16
     e04:	91 07       	cpc	r25, r17
     e06:	08 f4       	brcc	.+2      	; 0xe0a <USB_GetNextDescriptorComp+0x32>
     e08:	9c 01       	movw	r18, r24
				
				if (*BytesRem < CurrDescriptorSize)
				  CurrDescriptorSize = *BytesRem;

				*CurrConfigLoc  = (void*)((uintptr_t)*CurrConfigLoc + CurrDescriptorSize);
     e0a:	e2 0f       	add	r30, r18
     e0c:	f3 1f       	adc	r31, r19
     e0e:	f9 83       	std	Y+1, r31	; 0x01
     e10:	e8 83       	st	Y, r30
				*BytesRem      -= CurrDescriptorSize;
     e12:	f7 01       	movw	r30, r14
     e14:	80 81       	ld	r24, Z
     e16:	91 81       	ldd	r25, Z+1	; 0x01
     e18:	82 1b       	sub	r24, r18
     e1a:	93 0b       	sbc	r25, r19
     e1c:	91 83       	std	Z+1, r25	; 0x01
     e1e:	80 83       	st	Z, r24
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
     e20:	88 81       	ld	r24, Y
     e22:	99 81       	ldd	r25, Y+1	; 0x01
     e24:	f6 01       	movw	r30, r12
     e26:	09 95       	icall
     e28:	82 30       	cpi	r24, 0x02	; 2
     e2a:	41 f0       	breq	.+16     	; 0xe3c <USB_GetNextDescriptorComp+0x64>
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
     e2c:	81 30       	cpi	r24, 0x01	; 1
     e2e:	69 f4       	brne	.+26     	; 0xe4a <USB_GetNextDescriptorComp+0x72>
			{
				*CurrConfigLoc = PrevDescLoc;
     e30:	b8 82       	st	Y, r11
     e32:	a9 82       	std	Y+1, r10	; 0x01
				*BytesRem      = PrevBytesRem;
     e34:	f7 01       	movw	r30, r14
     e36:	11 83       	std	Z+1, r17	; 0x01
     e38:	00 83       	st	Z, r16
     e3a:	07 c0       	rjmp	.+14     	; 0xe4a <USB_GetNextDescriptorComp+0x72>
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
	uint8_t ErrorCode;

	while (*BytesRem)
     e3c:	f7 01       	movw	r30, r14
     e3e:	00 81       	ld	r16, Z
     e40:	11 81       	ldd	r17, Z+1	; 0x01
     e42:	01 15       	cp	r16, r1
     e44:	11 05       	cpc	r17, r1
     e46:	b1 f6       	brne	.-84     	; 0xdf4 <USB_GetNextDescriptorComp+0x1c>
     e48:	82 e0       	ldi	r24, 0x02	; 2
			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
}
     e4a:	df 91       	pop	r29
     e4c:	cf 91       	pop	r28
     e4e:	1f 91       	pop	r17
     e50:	0f 91       	pop	r16
     e52:	ff 90       	pop	r15
     e54:	ef 90       	pop	r14
     e56:	df 90       	pop	r13
     e58:	cf 90       	pop	r12
     e5a:	bf 90       	pop	r11
     e5c:	af 90       	pop	r10
     e5e:	08 95       	ret

00000e60 <USB_Host_GetDeviceConfigDescriptor>:
#if defined(USB_CAN_BE_HOST)
uint8_t USB_Host_GetDeviceConfigDescriptor(const uint8_t ConfigNumber,
                                           uint16_t* const ConfigSizePtr,
                                           void* const BufferPtr,
                                           const uint16_t BufferSize)
{
     e60:	cf 92       	push	r12
     e62:	df 92       	push	r13
     e64:	ef 92       	push	r14
     e66:	ff 92       	push	r15
     e68:	0f 93       	push	r16
     e6a:	1f 93       	push	r17
     e6c:	df 93       	push	r29
     e6e:	cf 93       	push	r28
     e70:	cd b7       	in	r28, 0x3d	; 61
     e72:	de b7       	in	r29, 0x3e	; 62
     e74:	29 97       	sbiw	r28, 0x09	; 9
     e76:	0f b6       	in	r0, 0x3f	; 63
     e78:	f8 94       	cli
     e7a:	de bf       	out	0x3e, r29	; 62
     e7c:	0f be       	out	0x3f, r0	; 63
     e7e:	cd bf       	out	0x3d, r28	; 61
     e80:	6b 01       	movw	r12, r22
     e82:	8a 01       	movw	r16, r20
     e84:	79 01       	movw	r14, r18
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
     e86:	90 e8       	ldi	r25, 0x80	; 128
     e88:	90 93 02 05 	sts	0x0502, r25
     e8c:	96 e0       	ldi	r25, 0x06	; 6
     e8e:	90 93 03 05 	sts	0x0503, r25
     e92:	90 e0       	ldi	r25, 0x00	; 0
     e94:	01 97       	sbiw	r24, 0x01	; 1
     e96:	92 60       	ori	r25, 0x02	; 2
     e98:	90 93 05 05 	sts	0x0505, r25
     e9c:	80 93 04 05 	sts	0x0504, r24
     ea0:	10 92 07 05 	sts	0x0507, r1
     ea4:	10 92 06 05 	sts	0x0506, r1
     ea8:	89 e0       	ldi	r24, 0x09	; 9
     eaa:	90 e0       	ldi	r25, 0x00	; 0
     eac:	90 93 09 05 	sts	0x0509, r25
     eb0:	80 93 08 05 	sts	0x0508, r24
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     eb4:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = sizeof(USB_Descriptor_Configuration_Header_t),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(ConfigHeader)) != HOST_SENDCONTROL_Successful)
     eb8:	ce 01       	movw	r24, r28
     eba:	01 96       	adiw	r24, 0x01	; 1
     ebc:	55 d0       	rcall	.+170    	; 0xf68 <USB_Host_SendControlRequest>
     ebe:	28 2f       	mov	r18, r24
     ec0:	88 23       	and	r24, r24
     ec2:	c1 f4       	brne	.+48     	; 0xef4 <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);
     ec4:	8b 81       	ldd	r24, Y+3	; 0x03
     ec6:	9c 81       	ldd	r25, Y+4	; 0x04
     ec8:	f6 01       	movw	r30, r12
     eca:	91 83       	std	Z+1, r25	; 0x01
     ecc:	80 83       	st	Z, r24

	if (*ConfigSizePtr > BufferSize)
     ece:	e8 16       	cp	r14, r24
     ed0:	f9 06       	cpc	r15, r25
     ed2:	10 f4       	brcc	.+4      	; 0xed8 <USB_Host_GetDeviceConfigDescriptor+0x78>
     ed4:	25 e0       	ldi	r18, 0x05	; 5
     ed6:	0e c0       	rjmp	.+28     	; 0xef4 <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return HOST_GETCONFIG_BuffOverflow;

	USB_ControlRequest.wLength = *ConfigSizePtr;
     ed8:	90 93 09 05 	sts	0x0509, r25
     edc:	80 93 08 05 	sts	0x0508, r24

	if ((ErrorCode = USB_Host_SendControlRequest(BufferPtr)) != HOST_SENDCONTROL_Successful)
     ee0:	c8 01       	movw	r24, r16
     ee2:	42 d0       	rcall	.+132    	; 0xf68 <USB_Host_SendControlRequest>
     ee4:	28 2f       	mov	r18, r24
     ee6:	88 23       	and	r24, r24
     ee8:	29 f4       	brne	.+10     	; 0xef4 <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
     eea:	f8 01       	movw	r30, r16
     eec:	81 81       	ldd	r24, Z+1	; 0x01
     eee:	82 30       	cpi	r24, 0x02	; 2
     ef0:	09 f0       	breq	.+2      	; 0xef4 <USB_Host_GetDeviceConfigDescriptor+0x94>
     ef2:	26 e0       	ldi	r18, 0x06	; 6
	  return HOST_GETCONFIG_InvalidData;

	return HOST_GETCONFIG_Successful;
}
     ef4:	82 2f       	mov	r24, r18
     ef6:	29 96       	adiw	r28, 0x09	; 9
     ef8:	0f b6       	in	r0, 0x3f	; 63
     efa:	f8 94       	cli
     efc:	de bf       	out	0x3e, r29	; 62
     efe:	0f be       	out	0x3f, r0	; 63
     f00:	cd bf       	out	0x3d, r28	; 61
     f02:	cf 91       	pop	r28
     f04:	df 91       	pop	r29
     f06:	1f 91       	pop	r17
     f08:	0f 91       	pop	r16
     f0a:	ff 90       	pop	r15
     f0c:	ef 90       	pop	r14
     f0e:	df 90       	pop	r13
     f10:	cf 90       	pop	r12
     f12:	08 95       	ret

00000f14 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
     f14:	08 95       	ret

00000f16 <USB_Host_WaitForIOS>:

	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
     f16:	1f 93       	push	r17
     f18:	cf 93       	push	r28
     f1a:	df 93       	push	r29
     f1c:	18 2f       	mov	r17, r24
     f1e:	c8 ee       	ldi	r28, 0xE8	; 232
     f20:	d3 e0       	ldi	r29, 0x03	; 3
     f22:	09 c0       	rjmp	.+18     	; 0xf36 <USB_Host_WaitForIOS+0x20>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     f24:	81 e0       	ldi	r24, 0x01	; 1
     f26:	65 db       	rcall	.-2358   	; 0x5f2 <USB_Host_WaitMS>
     f28:	88 23       	and	r24, r24
     f2a:	d1 f4       	brne	.+52     	; 0xf60 <USB_Host_WaitForIOS+0x4a>
		  return ErrorCode;

		if (!(TimeoutCounter--))
     f2c:	20 97       	sbiw	r28, 0x00	; 0
     f2e:	11 f4       	brne	.+4      	; 0xf34 <USB_Host_WaitForIOS+0x1e>
     f30:	84 e0       	ldi	r24, 0x04	; 4
     f32:	16 c0       	rjmp	.+44     	; 0xf60 <USB_Host_WaitForIOS+0x4a>
     f34:	21 97       	sbiw	r28, 0x01	; 1
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
     f36:	11 23       	and	r17, r17
     f38:	29 f4       	brne	.+10     	; 0xf44 <USB_Host_WaitForIOS+0x2e>
			 *  \return Boolean \c true if the current pipe is ready for a SETUP packet, \c false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
     f3a:	80 91 a6 00 	lds	r24, 0x00A6
     f3e:	83 ff       	sbrs	r24, 3
     f40:	f1 cf       	rjmp	.-30     	; 0xf24 <USB_Host_WaitForIOS+0xe>
     f42:	0d c0       	rjmp	.+26     	; 0xf5e <USB_Host_WaitForIOS+0x48>
     f44:	11 30       	cpi	r17, 0x01	; 1
     f46:	29 f4       	brne	.+10     	; 0xf52 <USB_Host_WaitForIOS+0x3c>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     f48:	80 91 a6 00 	lds	r24, 0x00A6
     f4c:	80 ff       	sbrs	r24, 0
     f4e:	ea cf       	rjmp	.-44     	; 0xf24 <USB_Host_WaitForIOS+0xe>
     f50:	06 c0       	rjmp	.+12     	; 0xf5e <USB_Host_WaitForIOS+0x48>
     f52:	12 30       	cpi	r17, 0x02	; 2
     f54:	39 f7       	brne	.-50     	; 0xf24 <USB_Host_WaitForIOS+0xe>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     f56:	80 91 a6 00 	lds	r24, 0x00A6
     f5a:	82 ff       	sbrs	r24, 2
     f5c:	e3 cf       	rjmp	.-58     	; 0xf24 <USB_Host_WaitForIOS+0xe>
     f5e:	80 e0       	ldi	r24, 0x00	; 0
		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
}
     f60:	df 91       	pop	r29
     f62:	cf 91       	pop	r28
     f64:	1f 91       	pop	r17
     f66:	08 95       	ret

00000f68 <USB_Host_SendControlRequest>:
#include "HostStandardReq.h"

uint8_t USB_Host_ConfigurationNumber;

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
     f68:	ff 92       	push	r15
     f6a:	0f 93       	push	r16
     f6c:	1f 93       	push	r17
     f6e:	cf 93       	push	r28
     f70:	df 93       	push	r29
     f72:	18 2f       	mov	r17, r24
     f74:	09 2f       	mov	r16, r25
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     f76:	f0 90 9e 00 	lds	r15, 0x009E
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
	bool     BusSuspended = USB_Host_IsBusSuspended();
	uint8_t  ReturnStatus = HOST_SENDCONTROL_Successful;
	uint16_t DataLen      = USB_ControlRequest.wLength;
     f7a:	c0 91 08 05 	lds	r28, 0x0508
     f7e:	d0 91 09 05 	lds	r29, 0x0509
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     f82:	80 91 9e 00 	lds	r24, 0x009E
     f86:	81 60       	ori	r24, 0x01	; 1
     f88:	80 93 9e 00 	sts	0x009E, r24

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     f8c:	81 e0       	ldi	r24, 0x01	; 1
     f8e:	31 db       	rcall	.-2462   	; 0x5f2 <USB_Host_WaitMS>
     f90:	98 2f       	mov	r25, r24
     f92:	88 23       	and	r24, r24
     f94:	09 f0       	breq	.+2      	; 0xf98 <USB_Host_SendControlRequest+0x30>
     f96:	d7 c0       	rjmp	.+430    	; 0x1146 <USB_Host_SendControlRequest+0x1de>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     f98:	80 91 aa 00 	lds	r24, 0x00AA
     f9c:	8f 7c       	andi	r24, 0xCF	; 207
     f9e:	80 93 aa 00 	sts	0x00AA, r24

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     fa2:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
     fa6:	80 91 a6 00 	lds	r24, 0x00A6
     faa:	8f 7e       	andi	r24, 0xEF	; 239
     fac:	80 93 a6 00 	sts	0x00A6, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     fb0:	80 91 a9 00 	lds	r24, 0x00A9
     fb4:	8f 7b       	andi	r24, 0xBF	; 191
     fb6:	80 93 a9 00 	sts	0x00A9, r24
     fba:	e2 e0       	ldi	r30, 0x02	; 2
     fbc:	f5 e0       	ldi	r31, 0x05	; 5
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
	  Pipe_Write_8(*(HeaderStream++));	
     fbe:	81 91       	ld	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
     fc0:	80 93 af 00 	sts	0x00AF, r24
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
     fc4:	85 e0       	ldi	r24, 0x05	; 5
     fc6:	ea 30       	cpi	r30, 0x0A	; 10
     fc8:	f8 07       	cpc	r31, r24
     fca:	c9 f7       	brne	.-14     	; 0xfbe <USB_Host_SendControlRequest+0x56>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
     fcc:	80 91 a6 00 	lds	r24, 0x00A6
     fd0:	87 77       	andi	r24, 0x77	; 119
     fd2:	80 93 a6 00 	sts	0x00A6, r24
	  Pipe_Write_8(*(HeaderStream++));	
	#endif
	
	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
     fd6:	80 e0       	ldi	r24, 0x00	; 0
     fd8:	9e df       	rcall	.-196    	; 0xf16 <USB_Host_WaitForIOS>
     fda:	98 2f       	mov	r25, r24
     fdc:	88 23       	and	r24, r24
     fde:	09 f0       	breq	.+2      	; 0xfe2 <USB_Host_SendControlRequest+0x7a>
     fe0:	b2 c0       	rjmp	.+356    	; 0x1146 <USB_Host_SendControlRequest+0x1de>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     fe2:	80 91 a9 00 	lds	r24, 0x00A9
     fe6:	80 64       	ori	r24, 0x40	; 64
     fe8:	80 93 a9 00 	sts	0x00A9, r24
	  goto End_Of_Control_Send;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     fec:	81 e0       	ldi	r24, 0x01	; 1
     fee:	01 db       	rcall	.-2558   	; 0x5f2 <USB_Host_WaitMS>
     ff0:	98 2f       	mov	r25, r24
     ff2:	88 23       	and	r24, r24
     ff4:	09 f0       	breq	.+2      	; 0xff8 <USB_Host_SendControlRequest+0x90>
     ff6:	a7 c0       	rjmp	.+334    	; 0x1146 <USB_Host_SendControlRequest+0x1de>

uint8_t USB_Host_ConfigurationNumber;

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
     ff8:	21 2f       	mov	r18, r17
     ffa:	30 2f       	mov	r19, r16
     ffc:	c9 01       	movw	r24, r18
     ffe:	8c 01       	movw	r16, r24
	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
	  goto End_Of_Control_Send;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
    1000:	80 91 02 05 	lds	r24, 0x0502
    1004:	87 ff       	sbrs	r24, 7
    1006:	52 c0       	rjmp	.+164    	; 0x10ac <USB_Host_SendControlRequest+0x144>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1008:	80 91 aa 00 	lds	r24, 0x00AA
    100c:	8f 7c       	andi	r24, 0xCF	; 207
    100e:	80 61       	ori	r24, 0x10	; 16
    1010:	80 93 aa 00 	sts	0x00AA, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
    1014:	01 15       	cp	r16, r1
    1016:	11 05       	cpc	r17, r1
    1018:	69 f5       	brne	.+90     	; 0x1074 <USB_Host_SendControlRequest+0x10c>
    101a:	2e c0       	rjmp	.+92     	; 0x1078 <USB_Host_SendControlRequest+0x110>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    101c:	80 91 a9 00 	lds	r24, 0x00A9
    1020:	8f 7b       	andi	r24, 0xBF	; 191
    1022:	80 93 a9 00 	sts	0x00A9, r24
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    1026:	81 e0       	ldi	r24, 0x01	; 1
    1028:	76 df       	rcall	.-276    	; 0xf16 <USB_Host_WaitForIOS>
    102a:	98 2f       	mov	r25, r24
    102c:	88 23       	and	r24, r24
    102e:	09 f0       	breq	.+2      	; 0x1032 <USB_Host_SendControlRequest+0xca>
    1030:	8a c0       	rjmp	.+276    	; 0x1146 <USB_Host_SendControlRequest+0x1de>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1032:	80 91 f6 00 	lds	r24, 0x00F6
    1036:	90 91 f7 00 	lds	r25, 0x00F7
				  goto End_Of_Control_Send;

				if (!(Pipe_BytesInPipe()))
    103a:	89 2b       	or	r24, r25
    103c:	49 f4       	brne	.+18     	; 0x1050 <USB_Host_SendControlRequest+0xe8>
    103e:	c0 e0       	ldi	r28, 0x00	; 0
    1040:	d0 e0       	ldi	r29, 0x00	; 0
    1042:	06 c0       	rjmp	.+12     	; 0x1050 <USB_Host_SendControlRequest+0xe8>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    1044:	80 91 af 00 	lds	r24, 0x00AF
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
				{
					*(DataStream++) = Pipe_Read_8();
    1048:	f8 01       	movw	r30, r16
    104a:	81 93       	st	Z+, r24
    104c:	8f 01       	movw	r16, r30
					DataLen--;
    104e:	21 97       	sbiw	r28, 0x01	; 1
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1050:	80 91 f6 00 	lds	r24, 0x00F6
    1054:	90 91 f7 00 	lds	r25, 0x00F7
				  goto End_Of_Control_Send;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
    1058:	89 2b       	or	r24, r25
    105a:	11 f0       	breq	.+4      	; 0x1060 <USB_Host_SendControlRequest+0xf8>
    105c:	20 97       	sbiw	r28, 0x00	; 0
    105e:	91 f7       	brne	.-28     	; 0x1044 <USB_Host_SendControlRequest+0xdc>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1060:	80 91 a9 00 	lds	r24, 0x00A9
    1064:	80 64       	ori	r24, 0x40	; 64
    1066:	80 93 a9 00 	sts	0x00A9, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    106a:	80 91 a6 00 	lds	r24, 0x00A6
    106e:	8e 77       	andi	r24, 0x7E	; 126
    1070:	80 93 a6 00 	sts	0x00A6, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
    1074:	20 97       	sbiw	r28, 0x00	; 0
    1076:	91 f6       	brne	.-92     	; 0x101c <USB_Host_SendControlRequest+0xb4>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1078:	80 91 aa 00 	lds	r24, 0x00AA
    107c:	8f 7c       	andi	r24, 0xCF	; 207
    107e:	80 62       	ori	r24, 0x20	; 32
    1080:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1084:	80 91 a9 00 	lds	r24, 0x00A9
    1088:	8f 7b       	andi	r24, 0xBF	; 191
    108a:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    108e:	82 e0       	ldi	r24, 0x02	; 2
    1090:	42 df       	rcall	.-380    	; 0xf16 <USB_Host_WaitForIOS>
    1092:	98 2f       	mov	r25, r24
    1094:	88 23       	and	r24, r24
    1096:	09 f0       	breq	.+2      	; 0x109a <USB_Host_SendControlRequest+0x132>
    1098:	56 c0       	rjmp	.+172    	; 0x1146 <USB_Host_SendControlRequest+0x1de>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    109a:	80 91 a6 00 	lds	r24, 0x00A6
    109e:	8b 77       	andi	r24, 0x7B	; 123
    10a0:	80 93 a6 00 	sts	0x00A6, r24
		  goto End_Of_Control_Send;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    10a4:	82 e0       	ldi	r24, 0x02	; 2
    10a6:	37 df       	rcall	.-402    	; 0xf16 <USB_Host_WaitForIOS>
    10a8:	98 2f       	mov	r25, r24
    10aa:	4d c0       	rjmp	.+154    	; 0x1146 <USB_Host_SendControlRequest+0x1de>
		  goto End_Of_Control_Send;
	}
	else
	{
		if (DataStream != NULL)
    10ac:	01 15       	cp	r16, r1
    10ae:	11 05       	cpc	r17, r1
    10b0:	a9 f1       	breq	.+106    	; 0x111c <USB_Host_SendControlRequest+0x1b4>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    10b2:	80 91 aa 00 	lds	r24, 0x00AA
    10b6:	8f 7c       	andi	r24, 0xCF	; 207
    10b8:	80 62       	ori	r24, 0x20	; 32
    10ba:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    10be:	80 91 a9 00 	lds	r24, 0x00A9
    10c2:	8f 7b       	andi	r24, 0xBF	; 191
    10c4:	80 93 a9 00 	sts	0x00A9, r24
    10c8:	1d c0       	rjmp	.+58     	; 0x1104 <USB_Host_SendControlRequest+0x19c>
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    10ca:	82 e0       	ldi	r24, 0x02	; 2
    10cc:	24 df       	rcall	.-440    	; 0xf16 <USB_Host_WaitForIOS>
    10ce:	98 2f       	mov	r25, r24
    10d0:	88 23       	and	r24, r24
    10d2:	c9 f5       	brne	.+114    	; 0x1146 <USB_Host_SendControlRequest+0x1de>
				  goto End_Of_Control_Send;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    10d4:	80 91 23 01 	lds	r24, 0x0123
    10d8:	28 2f       	mov	r18, r24
    10da:	30 e0       	ldi	r19, 0x00	; 0
    10dc:	07 c0       	rjmp	.+14     	; 0x10ec <USB_Host_SendControlRequest+0x184>
				{
					Pipe_Write_8(*(DataStream++));
    10de:	f8 01       	movw	r30, r16
    10e0:	81 91       	ld	r24, Z+
    10e2:	8f 01       	movw	r16, r30
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    10e4:	80 93 af 00 	sts	0x00AF, r24
					DataLen--;
    10e8:	21 97       	sbiw	r28, 0x01	; 1
			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
				  goto End_Of_Control_Send;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    10ea:	39 f0       	breq	.+14     	; 0x10fa <USB_Host_SendControlRequest+0x192>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    10ec:	80 91 f6 00 	lds	r24, 0x00F6
    10f0:	90 91 f7 00 	lds	r25, 0x00F7
    10f4:	82 17       	cp	r24, r18
    10f6:	93 07       	cpc	r25, r19
    10f8:	90 f3       	brcs	.-28     	; 0x10de <USB_Host_SendControlRequest+0x176>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    10fa:	80 91 a6 00 	lds	r24, 0x00A6
    10fe:	8b 77       	andi	r24, 0x7B	; 123
    1100:	80 93 a6 00 	sts	0x00A6, r24
		if (DataStream != NULL)
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
    1104:	20 97       	sbiw	r28, 0x00	; 0
    1106:	09 f7       	brne	.-62     	; 0x10ca <USB_Host_SendControlRequest+0x162>
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1108:	82 e0       	ldi	r24, 0x02	; 2
    110a:	05 df       	rcall	.-502    	; 0xf16 <USB_Host_WaitForIOS>
    110c:	98 2f       	mov	r25, r24
    110e:	88 23       	and	r24, r24
    1110:	d1 f4       	brne	.+52     	; 0x1146 <USB_Host_SendControlRequest+0x1de>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1112:	80 91 a9 00 	lds	r24, 0x00A9
    1116:	80 64       	ori	r24, 0x40	; 64
    1118:	80 93 a9 00 	sts	0x00A9, r24
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    111c:	80 91 aa 00 	lds	r24, 0x00AA
    1120:	8f 7c       	andi	r24, 0xCF	; 207
    1122:	80 61       	ori	r24, 0x10	; 16
    1124:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1128:	80 91 a9 00 	lds	r24, 0x00A9
    112c:	8f 7b       	andi	r24, 0xBF	; 191
    112e:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    1132:	81 e0       	ldi	r24, 0x01	; 1
    1134:	f0 de       	rcall	.-544    	; 0xf16 <USB_Host_WaitForIOS>
    1136:	98 2f       	mov	r25, r24
    1138:	88 23       	and	r24, r24
    113a:	29 f4       	brne	.+10     	; 0x1146 <USB_Host_SendControlRequest+0x1de>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    113c:	80 91 a6 00 	lds	r24, 0x00A6
    1140:	8e 77       	andi	r24, 0x7E	; 126
    1142:	80 93 a6 00 	sts	0x00A6, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1146:	80 91 a9 00 	lds	r24, 0x00A9
    114a:	80 64       	ori	r24, 0x40	; 64
    114c:	80 93 a9 00 	sts	0x00A9, r24
	}

End_Of_Control_Send:
	Pipe_Freeze();

	if (BusSuspended)
    1150:	f0 fc       	sbrc	r15, 0
    1152:	05 c0       	rjmp	.+10     	; 0x115e <USB_Host_SendControlRequest+0x1f6>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    1154:	80 91 9e 00 	lds	r24, 0x009E
    1158:	8e 7f       	andi	r24, 0xFE	; 254
    115a:	80 93 9e 00 	sts	0x009E, r24
			 *  \param[in] PipeNumber  Index of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t PipeNumber)
			{
				UPRST = (1 << PipeNumber);
    115e:	81 e0       	ldi	r24, 0x01	; 1
    1160:	80 93 a8 00 	sts	0x00A8, r24
				UPRST = 0;
    1164:	10 92 a8 00 	sts	0x00A8, r1
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
    1168:	89 2f       	mov	r24, r25
    116a:	df 91       	pop	r29
    116c:	cf 91       	pop	r28
    116e:	1f 91       	pop	r17
    1170:	0f 91       	pop	r16
    1172:	ff 90       	pop	r15
    1174:	08 95       	ret

00001176 <USB_Host_SetDeviceConfiguration>:

	return HOST_SENDCONTROL_Successful;
}

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
    1176:	1f 93       	push	r17
    1178:	18 2f       	mov	r17, r24
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
    117a:	10 92 02 05 	sts	0x0502, r1
    117e:	89 e0       	ldi	r24, 0x09	; 9
    1180:	80 93 03 05 	sts	0x0503, r24
    1184:	10 93 04 05 	sts	0x0504, r17
    1188:	10 92 05 05 	sts	0x0505, r1
    118c:	10 92 07 05 	sts	0x0507, r1
    1190:	10 92 06 05 	sts	0x0506, r1
    1194:	10 92 09 05 	sts	0x0509, r1
    1198:	10 92 08 05 	sts	0x0508, r1
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    119c:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);
	
	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) == HOST_SENDCONTROL_Successful)
    11a0:	80 e0       	ldi	r24, 0x00	; 0
    11a2:	90 e0       	ldi	r25, 0x00	; 0
    11a4:	e1 de       	rcall	.-574    	; 0xf68 <USB_Host_SendControlRequest>
    11a6:	88 23       	and	r24, r24
    11a8:	49 f4       	brne	.+18     	; 0x11bc <USB_Host_SetDeviceConfiguration+0x46>
	{
		USB_Host_ConfigurationNumber = ConfigNumber;
    11aa:	10 93 00 05 	sts	0x0500, r17
		USB_HostState                = (ConfigNumber) ? HOST_STATE_Configured : HOST_STATE_Addressed;
    11ae:	11 23       	and	r17, r17
    11b0:	11 f4       	brne	.+4      	; 0x11b6 <USB_Host_SetDeviceConfiguration+0x40>
    11b2:	9a e0       	ldi	r25, 0x0A	; 10
    11b4:	01 c0       	rjmp	.+2      	; 0x11b8 <USB_Host_SetDeviceConfiguration+0x42>
    11b6:	9b e0       	ldi	r25, 0x0B	; 11
    11b8:	90 93 0a 05 	sts	0x050A, r25
	}

	return ErrorCode;
}
    11bc:	1f 91       	pop	r17
    11be:	08 95       	ret

000011c0 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    11c0:	ff 92       	push	r15
    11c2:	0f 93       	push	r16
    11c4:	1f 93       	push	r17
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
    11c6:	07 ea       	ldi	r16, 0xA7	; 167
    11c8:	10 e0       	ldi	r17, 0x00	; 0
    11ca:	f8 01       	movw	r30, r16
    11cc:	f0 80       	ld	r15, Z
    11ce:	f7 e0       	ldi	r31, 0x07	; 7
    11d0:	ff 22       	and	r15, r31
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    11d2:	f8 01       	movw	r30, r16
    11d4:	10 82       	st	Z, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    11d6:	aa da       	rcall	.-2732   	; 0x72c <USB_Host_ProcessNextHostState>
    11d8:	f8 01       	movw	r30, r16
    11da:	f0 82       	st	Z, r15
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
    11dc:	1f 91       	pop	r17
    11de:	0f 91       	pop	r16
    11e0:	ff 90       	pop	r15
    11e2:	08 95       	ret

000011e4 <USB_GetHIDReportItemInfo>:
	return HID_PARSE_Successful;
}

bool USB_GetHIDReportItemInfo(const uint8_t* ReportData,
                              HID_ReportItem_t* const ReportItem)
{
    11e4:	cf 92       	push	r12
    11e6:	df 92       	push	r13
    11e8:	ef 92       	push	r14
    11ea:	ff 92       	push	r15
    11ec:	0f 93       	push	r16
    11ee:	1f 93       	push	r17
    11f0:	cf 93       	push	r28
    11f2:	df 93       	push	r29
    11f4:	6c 01       	movw	r12, r24
    11f6:	eb 01       	movw	r28, r22
	if (ReportItem == NULL)
    11f8:	61 15       	cp	r22, r1
    11fa:	71 05       	cpc	r23, r1
    11fc:	09 f4       	brne	.+2      	; 0x1200 <USB_GetHIDReportItemInfo+0x1c>
    11fe:	4f c0       	rjmp	.+158    	; 0x129e <USB_GetHIDReportItemInfo+0xba>
	  return false;

	uint16_t DataBitsRem  = ReportItem->Attributes.BitSize;
    1200:	28 85       	ldd	r18, Y+8	; 0x08
	uint16_t CurrentBit   = ReportItem->BitOffset;
    1202:	e8 80       	ld	r14, Y
    1204:	f9 80       	ldd	r15, Y+1	; 0x01
	uint32_t BitMask      = (1 << 0);

	if (ReportItem->ReportID)
    1206:	9d 81       	ldd	r25, Y+5	; 0x05
    1208:	99 23       	and	r25, r25
    120a:	41 f0       	breq	.+16     	; 0x121c <USB_GetHIDReportItemInfo+0x38>
	{
		if (ReportItem->ReportID != ReportData[0])
    120c:	f6 01       	movw	r30, r12
    120e:	80 81       	ld	r24, Z
    1210:	98 17       	cp	r25, r24
    1212:	09 f0       	breq	.+2      	; 0x1216 <USB_GetHIDReportItemInfo+0x32>
    1214:	44 c0       	rjmp	.+136    	; 0x129e <USB_GetHIDReportItemInfo+0xba>
		  return false;

		ReportData++;
    1216:	08 94       	sec
    1218:	c1 1c       	adc	r12, r1
    121a:	d1 1c       	adc	r13, r1
                              HID_ReportItem_t* const ReportItem)
{
	if (ReportItem == NULL)
	  return false;

	uint16_t DataBitsRem  = ReportItem->Attributes.BitSize;
    121c:	02 2f       	mov	r16, r18
    121e:	10 e0       	ldi	r17, 0x00	; 0
		  return false;

		ReportData++;
	}

	ReportItem->PreviousValue = ReportItem->Value;
    1220:	8a a1       	ldd	r24, Y+34	; 0x22
    1222:	9b a1       	ldd	r25, Y+35	; 0x23
    1224:	ac a1       	ldd	r26, Y+36	; 0x24
    1226:	bd a1       	ldd	r27, Y+37	; 0x25
    1228:	8e a3       	std	Y+38, r24	; 0x26
    122a:	9f a3       	std	Y+39, r25	; 0x27
    122c:	a8 a7       	std	Y+40, r26	; 0x28
    122e:	b9 a7       	std	Y+41, r27	; 0x29
	ReportItem->Value = 0;
    1230:	1a a2       	std	Y+34, r1	; 0x22
    1232:	1b a2       	std	Y+35, r1	; 0x23
    1234:	1c a2       	std	Y+36, r1	; 0x24
    1236:	1d a2       	std	Y+37, r1	; 0x25
    1238:	41 e0       	ldi	r20, 0x01	; 1
    123a:	50 e0       	ldi	r21, 0x00	; 0
    123c:	60 e0       	ldi	r22, 0x00	; 0
    123e:	70 e0       	ldi	r23, 0x00	; 0
    1240:	29 c0       	rjmp	.+82     	; 0x1294 <USB_GetHIDReportItemInfo+0xb0>

	while (DataBitsRem--)
	{
		if (ReportData[CurrentBit / 8] & (1 << (CurrentBit % 8)))
    1242:	f7 01       	movw	r30, r14
    1244:	93 e0       	ldi	r25, 0x03	; 3
    1246:	f6 95       	lsr	r31
    1248:	e7 95       	ror	r30
    124a:	9a 95       	dec	r25
    124c:	e1 f7       	brne	.-8      	; 0x1246 <USB_GetHIDReportItemInfo+0x62>
    124e:	ec 0d       	add	r30, r12
    1250:	fd 1d       	adc	r31, r13
    1252:	80 81       	ld	r24, Z
    1254:	90 e0       	ldi	r25, 0x00	; 0
    1256:	97 01       	movw	r18, r14
    1258:	27 70       	andi	r18, 0x07	; 7
    125a:	30 70       	andi	r19, 0x00	; 0
    125c:	02 c0       	rjmp	.+4      	; 0x1262 <USB_GetHIDReportItemInfo+0x7e>
    125e:	95 95       	asr	r25
    1260:	87 95       	ror	r24
    1262:	2a 95       	dec	r18
    1264:	e2 f7       	brpl	.-8      	; 0x125e <USB_GetHIDReportItemInfo+0x7a>
    1266:	80 ff       	sbrs	r24, 0
    1268:	0c c0       	rjmp	.+24     	; 0x1282 <USB_GetHIDReportItemInfo+0x9e>
		  ReportItem->Value |= BitMask;
    126a:	8a a1       	ldd	r24, Y+34	; 0x22
    126c:	9b a1       	ldd	r25, Y+35	; 0x23
    126e:	ac a1       	ldd	r26, Y+36	; 0x24
    1270:	bd a1       	ldd	r27, Y+37	; 0x25
    1272:	84 2b       	or	r24, r20
    1274:	95 2b       	or	r25, r21
    1276:	a6 2b       	or	r26, r22
    1278:	b7 2b       	or	r27, r23
    127a:	8a a3       	std	Y+34, r24	; 0x22
    127c:	9b a3       	std	Y+35, r25	; 0x23
    127e:	ac a3       	std	Y+36, r26	; 0x24
    1280:	bd a3       	std	Y+37, r27	; 0x25

		CurrentBit++;
    1282:	08 94       	sec
    1284:	e1 1c       	adc	r14, r1
    1286:	f1 1c       	adc	r15, r1
		BitMask <<= 1;
    1288:	44 0f       	add	r20, r20
    128a:	55 1f       	adc	r21, r21
    128c:	66 1f       	adc	r22, r22
    128e:	77 1f       	adc	r23, r23
    1290:	01 50       	subi	r16, 0x01	; 1
    1292:	10 40       	sbci	r17, 0x00	; 0
	}

	ReportItem->PreviousValue = ReportItem->Value;
	ReportItem->Value = 0;

	while (DataBitsRem--)
    1294:	01 15       	cp	r16, r1
    1296:	11 05       	cpc	r17, r1
    1298:	a1 f6       	brne	.-88     	; 0x1242 <USB_GetHIDReportItemInfo+0x5e>
    129a:	81 e0       	ldi	r24, 0x01	; 1
    129c:	01 c0       	rjmp	.+2      	; 0x12a0 <USB_GetHIDReportItemInfo+0xbc>
    129e:	80 e0       	ldi	r24, 0x00	; 0
		CurrentBit++;
		BitMask <<= 1;
	}

	return true;
}
    12a0:	df 91       	pop	r29
    12a2:	cf 91       	pop	r28
    12a4:	1f 91       	pop	r17
    12a6:	0f 91       	pop	r16
    12a8:	ff 90       	pop	r15
    12aa:	ef 90       	pop	r14
    12ac:	df 90       	pop	r13
    12ae:	cf 90       	pop	r12
    12b0:	08 95       	ret

000012b2 <USB_GetHIDReportSize>:
}

uint16_t USB_GetHIDReportSize(HID_ReportInfo_t* const ParserData,
                              const uint8_t ReportID,
                              const uint8_t ReportType)
{
    12b2:	e4 2f       	mov	r30, r20
    12b4:	f0 e0       	ldi	r31, 0x00	; 0
    12b6:	ee 0f       	add	r30, r30
    12b8:	ff 1f       	adc	r31, r31
    12ba:	ef 56       	subi	r30, 0x6F	; 111
    12bc:	fc 4f       	sbci	r31, 0xFC	; 252
    12be:	e8 0f       	add	r30, r24
    12c0:	f9 1f       	adc	r31, r25
    12c2:	dc 01       	movw	r26, r24
    12c4:	a0 57       	subi	r26, 0x70	; 112
    12c6:	bc 4f       	sbci	r27, 0xFC	; 252
    12c8:	90 e0       	ldi	r25, 0x00	; 0
	for (uint8_t i = 0; i < HID_MAX_REPORT_IDS; i++)
	{
		uint16_t ReportSizeBits = ParserData->ReportIDSizes[i].ReportSizeBits[ReportType];
    12ca:	20 81       	ld	r18, Z
    12cc:	31 81       	ldd	r19, Z+1	; 0x01

		if (ParserData->ReportIDSizes[i].ReportID == ReportID)
    12ce:	8c 91       	ld	r24, X
    12d0:	86 17       	cp	r24, r22
    12d2:	89 f4       	brne	.+34     	; 0x12f6 <USB_GetHIDReportSize+0x44>
		  return (ReportSizeBits / 8) + ((ReportSizeBits % 8) ? 1 : 0);
    12d4:	40 e0       	ldi	r20, 0x00	; 0
    12d6:	50 e0       	ldi	r21, 0x00	; 0
    12d8:	c9 01       	movw	r24, r18
    12da:	87 70       	andi	r24, 0x07	; 7
    12dc:	90 70       	andi	r25, 0x00	; 0
    12de:	89 2b       	or	r24, r25
    12e0:	11 f0       	breq	.+4      	; 0x12e6 <USB_GetHIDReportSize+0x34>
    12e2:	41 e0       	ldi	r20, 0x01	; 1
    12e4:	50 e0       	ldi	r21, 0x00	; 0
    12e6:	63 e0       	ldi	r22, 0x03	; 3
    12e8:	36 95       	lsr	r19
    12ea:	27 95       	ror	r18
    12ec:	6a 95       	dec	r22
    12ee:	e1 f7       	brne	.-8      	; 0x12e8 <USB_GetHIDReportSize+0x36>
    12f0:	24 0f       	add	r18, r20
    12f2:	35 1f       	adc	r19, r21
    12f4:	07 c0       	rjmp	.+14     	; 0x1304 <USB_GetHIDReportSize+0x52>

uint16_t USB_GetHIDReportSize(HID_ReportInfo_t* const ParserData,
                              const uint8_t ReportID,
                              const uint8_t ReportType)
{
	for (uint8_t i = 0; i < HID_MAX_REPORT_IDS; i++)
    12f6:	9f 5f       	subi	r25, 0xFF	; 255
    12f8:	37 96       	adiw	r30, 0x07	; 7
    12fa:	17 96       	adiw	r26, 0x07	; 7
    12fc:	9a 30       	cpi	r25, 0x0A	; 10
    12fe:	29 f7       	brne	.-54     	; 0x12ca <USB_GetHIDReportSize+0x18>
    1300:	20 e0       	ldi	r18, 0x00	; 0
    1302:	30 e0       	ldi	r19, 0x00	; 0
		if (ParserData->ReportIDSizes[i].ReportID == ReportID)
		  return (ReportSizeBits / 8) + ((ReportSizeBits % 8) ? 1 : 0);
	}

	return 0;
}
    1304:	c9 01       	movw	r24, r18
    1306:	08 95       	ret

00001308 <USB_ProcessHIDReport>:
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
    1308:	2f 92       	push	r2
    130a:	3f 92       	push	r3
    130c:	4f 92       	push	r4
    130e:	5f 92       	push	r5
    1310:	6f 92       	push	r6
    1312:	7f 92       	push	r7
    1314:	8f 92       	push	r8
    1316:	9f 92       	push	r9
    1318:	af 92       	push	r10
    131a:	bf 92       	push	r11
    131c:	cf 92       	push	r12
    131e:	df 92       	push	r13
    1320:	ef 92       	push	r14
    1322:	ff 92       	push	r15
    1324:	0f 93       	push	r16
    1326:	1f 93       	push	r17
    1328:	df 93       	push	r29
    132a:	cf 93       	push	r28
    132c:	cd b7       	in	r28, 0x3d	; 61
    132e:	de b7       	in	r29, 0x3e	; 62
    1330:	c5 59       	subi	r28, 0x95	; 149
    1332:	d0 40       	sbci	r29, 0x00	; 0
    1334:	0f b6       	in	r0, 0x3f	; 63
    1336:	f8 94       	cli
    1338:	de bf       	out	0x3e, r29	; 62
    133a:	0f be       	out	0x3f, r0	; 63
    133c:	cd bf       	out	0x3d, r28	; 61
    133e:	cf 57       	subi	r28, 0x7F	; 127
    1340:	df 4f       	sbci	r29, 0xFF	; 255
    1342:	99 83       	std	Y+1, r25	; 0x01
    1344:	88 83       	st	Y, r24
    1346:	c1 58       	subi	r28, 0x81	; 129
    1348:	d0 40       	sbci	r29, 0x00	; 0
    134a:	cd 57       	subi	r28, 0x7D	; 125
    134c:	df 4f       	sbci	r29, 0xFF	; 255
    134e:	79 83       	std	Y+1, r23	; 0x01
    1350:	68 83       	st	Y, r22
    1352:	c3 58       	subi	r28, 0x83	; 131
    1354:	d0 40       	sbci	r29, 0x00	; 0
    1356:	1a 01       	movw	r2, r20
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath      = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo        = &ParserData->ReportIDSizes[0];
    1358:	20 e9       	ldi	r18, 0x90	; 144
    135a:	82 2e       	mov	r8, r18
    135c:	23 e0       	ldi	r18, 0x03	; 3
    135e:	92 2e       	mov	r9, r18
    1360:	84 0e       	add	r8, r20
    1362:	95 1e       	adc	r9, r21
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize           = 0;
	HID_MinMax_t          UsageMinMax             = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
    1364:	89 ed       	ldi	r24, 0xD9	; 217
    1366:	93 e0       	ldi	r25, 0x03	; 3
    1368:	da 01       	movw	r26, r20
    136a:	fc 01       	movw	r30, r24
    136c:	1d 92       	st	X+, r1
    136e:	31 97       	sbiw	r30, 0x01	; 1
    1370:	e9 f7       	brne	.-6      	; 0x136c <USB_ProcessHIDReport+0x64>
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
    1372:	fe 01       	movw	r30, r28
    1374:	fb 96       	adiw	r30, 0x3b	; 59
    1376:	8c e1       	ldi	r24, 0x1C	; 28
    1378:	df 01       	movw	r26, r30
    137a:	1d 92       	st	X+, r1
    137c:	8a 95       	dec	r24
    137e:	e9 f7       	brne	.-6      	; 0x137a <USB_ProcessHIDReport+0x72>
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
    1380:	87 e0       	ldi	r24, 0x07	; 7
    1382:	d4 01       	movw	r26, r8
    1384:	1d 92       	st	X+, r1
    1386:	8a 95       	dec	r24
    1388:	e9 f7       	brne	.-6      	; 0x1384 <USB_ProcessHIDReport+0x7c>

	ParserData->TotalDeviceReports = 1;
    138a:	da 01       	movw	r26, r20
    138c:	a1 57       	subi	r26, 0x71	; 113
    138e:	bc 4f       	sbci	r27, 0xFC	; 252
    1390:	81 e0       	ldi	r24, 0x01	; 1
    1392:	8c 93       	st	X, r24
				UsageMinMax.Maximum = ReportItemData;
				break;
			case HID_RI_COLLECTION(0):
				if (CurrCollectionPath == NULL)
				{
					CurrCollectionPath = &ParserData->CollectionPaths[0];
    1394:	9a 01       	movw	r18, r20
    1396:	27 5b       	subi	r18, 0xB7	; 183
    1398:	3c 4f       	sbci	r19, 0xFC	; 252
    139a:	e7 96       	adiw	r28, 0x37	; 55
    139c:	3f af       	std	Y+63, r19	; 0x3f
    139e:	2e af       	std	Y+62, r18	; 0x3e
    13a0:	e7 97       	sbiw	r28, 0x37	; 55
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
    13a2:	40 5b       	subi	r20, 0xB0	; 176
    13a4:	5c 4f       	sbci	r21, 0xFC	; 252
    13a6:	e5 96       	adiw	r28, 0x35	; 53
    13a8:	5f af       	std	Y+63, r21	; 0x3f
    13aa:	4e af       	std	Y+62, r20	; 0x3e
    13ac:	e5 97       	sbiw	r28, 0x35	; 53

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
    13ae:	c1 01       	movw	r24, r2
    13b0:	88 57       	subi	r24, 0x78	; 120
    13b2:	9c 4f       	sbci	r25, 0xFC	; 252
    13b4:	ef 96       	adiw	r28, 0x3f	; 63
    13b6:	9f af       	std	Y+63, r25	; 0x3f
    13b8:	8e af       	std	Y+62, r24	; 0x3e
    13ba:	ef 97       	sbiw	r28, 0x3f	; 63
    13bc:	6f 01       	movw	r12, r30
    13be:	aa 24       	eor	r10, r10
    13c0:	bb 24       	eor	r11, r11
    13c2:	ed 96       	adiw	r28, 0x3d	; 61
    13c4:	1f ae       	std	Y+63, r1	; 0x3f
    13c6:	ed 97       	sbiw	r28, 0x3d	; 61
    13c8:	eb 96       	adiw	r28, 0x3b	; 59
    13ca:	1c ae       	std	Y+60, r1	; 0x3c
    13cc:	1d ae       	std	Y+61, r1	; 0x3d
    13ce:	1e ae       	std	Y+62, r1	; 0x3e
    13d0:	1f ae       	std	Y+63, r1	; 0x3f
    13d2:	eb 97       	sbiw	r28, 0x3b	; 59
    13d4:	44 24       	eor	r4, r4
    13d6:	55 24       	eor	r5, r5
    13d8:	32 01       	movw	r6, r4

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
    13da:	f1 01       	movw	r30, r2
    13dc:	ea 52       	subi	r30, 0x2A	; 42
    13de:	fc 4f       	sbci	r31, 0xFC	; 252
    13e0:	c6 57       	subi	r28, 0x76	; 118
    13e2:	df 4f       	sbci	r29, 0xFF	; 255
    13e4:	f9 83       	std	Y+1, r31	; 0x01
    13e6:	e8 83       	st	Y, r30
    13e8:	ca 58       	subi	r28, 0x8A	; 138
    13ea:	d0 40       	sbci	r29, 0x00	; 0
				       sizeof(HID_ReportItem_t));

				CurrStateTable++;
				break;
			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
    13ec:	cc 56       	subi	r28, 0x6C	; 108
    13ee:	df 4f       	sbci	r29, 0xFF	; 255
    13f0:	d9 82       	std	Y+1, r13	; 0x01
    13f2:	c8 82       	st	Y, r12
    13f4:	c4 59       	subi	r28, 0x94	; 148
    13f6:	d0 40       	sbci	r29, 0x00	; 0
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
    13f8:	96 01       	movw	r18, r12
    13fa:	24 5e       	subi	r18, 0xE4	; 228
    13fc:	3f 4f       	sbci	r19, 0xFF	; 255
    13fe:	c4 57       	subi	r28, 0x74	; 116
    1400:	df 4f       	sbci	r29, 0xFF	; 255
    1402:	39 83       	std	Y+1, r19	; 0x01
    1404:	28 83       	st	Y, r18
    1406:	cc 58       	subi	r28, 0x8C	; 140
    1408:	d0 40       	sbci	r29, 0x00	; 0
				CurrStateTable->ReportCount                 = ReportItemData;
				break;
			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;

				if (ParserData->UsingReportIDs)
    140a:	a1 01       	movw	r20, r2
    140c:	48 52       	subi	r20, 0x28	; 40
    140e:	5c 4f       	sbci	r21, 0xFC	; 252
    1410:	c2 57       	subi	r28, 0x72	; 114
    1412:	df 4f       	sbci	r29, 0xFF	; 255
    1414:	59 83       	std	Y+1, r21	; 0x01
    1416:	48 83       	st	Y, r20
    1418:	ce 58       	subi	r28, 0x8E	; 142
    141a:	d0 40       	sbci	r29, 0x00	; 0
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
    141c:	c0 57       	subi	r28, 0x70	; 112
    141e:	df 4f       	sbci	r29, 0xFF	; 255
    1420:	b9 83       	std	Y+1, r27	; 0x01
    1422:	a8 83       	st	Y, r26
    1424:	c0 59       	subi	r28, 0x90	; 144
    1426:	d0 40       	sbci	r29, 0x00	; 0
    1428:	c4 01       	movw	r24, r8
    142a:	ce 56       	subi	r28, 0x6E	; 110
    142c:	df 4f       	sbci	r29, 0xFF	; 255
    142e:	88 82       	st	Y, r8
    1430:	c2 59       	subi	r28, 0x92	; 146
    1432:	d0 40       	sbci	r29, 0x00	; 0
    1434:	cd 56       	subi	r28, 0x6D	; 109
    1436:	df 4f       	sbci	r29, 0xFF	; 255
    1438:	98 83       	st	Y, r25
    143a:	c3 59       	subi	r28, 0x93	; 147
    143c:	d0 40       	sbci	r29, 0x00	; 0
    143e:	3e c3       	rjmp	.+1660   	; 0x1abc <USB_ProcessHIDReport+0x7b4>

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
	{
		uint8_t  HIDReportItem  = *ReportData;
    1440:	cf 57       	subi	r28, 0x7F	; 127
    1442:	df 4f       	sbci	r29, 0xFF	; 255
    1444:	a8 81       	ld	r26, Y
    1446:	b9 81       	ldd	r27, Y+1	; 0x01
    1448:	c1 58       	subi	r28, 0x81	; 129
    144a:	d0 40       	sbci	r29, 0x00	; 0
    144c:	4d 91       	ld	r20, X+
    144e:	cf 57       	subi	r28, 0x7F	; 127
    1450:	df 4f       	sbci	r29, 0xFF	; 255
    1452:	b9 83       	std	Y+1, r27	; 0x01
    1454:	a8 83       	st	Y, r26
    1456:	c1 58       	subi	r28, 0x81	; 129
    1458:	d0 40       	sbci	r29, 0x00	; 0
		uint32_t ReportItemData = 0;

		ReportData++;
		ReportSize--;
    145a:	cd 57       	subi	r28, 0x7D	; 125
    145c:	df 4f       	sbci	r29, 0xFF	; 255
    145e:	e8 81       	ld	r30, Y
    1460:	f9 81       	ldd	r31, Y+1	; 0x01
    1462:	c3 58       	subi	r28, 0x83	; 131
    1464:	d0 40       	sbci	r29, 0x00	; 0
    1466:	31 97       	sbiw	r30, 0x01	; 1
    1468:	cd 57       	subi	r28, 0x7D	; 125
    146a:	df 4f       	sbci	r29, 0xFF	; 255
    146c:	f9 83       	std	Y+1, r31	; 0x01
    146e:	e8 83       	st	Y, r30
    1470:	c3 58       	subi	r28, 0x83	; 131
    1472:	d0 40       	sbci	r29, 0x00	; 0

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
    1474:	24 2f       	mov	r18, r20
    1476:	30 e0       	ldi	r19, 0x00	; 0
    1478:	c1 58       	subi	r28, 0x81	; 129
    147a:	df 4f       	sbci	r29, 0xFF	; 255
    147c:	39 83       	std	Y+1, r19	; 0x01
    147e:	28 83       	st	Y, r18
    1480:	cf 57       	subi	r28, 0x7F	; 127
    1482:	d0 40       	sbci	r29, 0x00	; 0
    1484:	23 70       	andi	r18, 0x03	; 3
    1486:	30 70       	andi	r19, 0x00	; 0
    1488:	22 30       	cpi	r18, 0x02	; 2
    148a:	31 05       	cpc	r19, r1
    148c:	11 f1       	breq	.+68     	; 0x14d2 <USB_ProcessHIDReport+0x1ca>
    148e:	23 30       	cpi	r18, 0x03	; 3
    1490:	31 05       	cpc	r19, r1
    1492:	39 f0       	breq	.+14     	; 0x14a2 <USB_ProcessHIDReport+0x19a>
    1494:	21 30       	cpi	r18, 0x01	; 1
    1496:	31 05       	cpc	r19, r1
    1498:	a9 f1       	breq	.+106    	; 0x1504 <USB_ProcessHIDReport+0x1fc>
    149a:	ee 24       	eor	r14, r14
    149c:	ff 24       	eor	r15, r15
    149e:	87 01       	movw	r16, r14
    14a0:	4f c0       	rjmp	.+158    	; 0x1540 <USB_ProcessHIDReport+0x238>
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = le32_to_cpu(*((uint32_t*)ReportData));
    14a2:	cf 57       	subi	r28, 0x7F	; 127
    14a4:	df 4f       	sbci	r29, 0xFF	; 255
    14a6:	a8 81       	ld	r26, Y
    14a8:	b9 81       	ldd	r27, Y+1	; 0x01
    14aa:	c1 58       	subi	r28, 0x81	; 129
    14ac:	d0 40       	sbci	r29, 0x00	; 0
    14ae:	ed 90       	ld	r14, X+
    14b0:	fd 90       	ld	r15, X+
    14b2:	0d 91       	ld	r16, X+
    14b4:	1d 91       	ld	r17, X+
    14b6:	cf 57       	subi	r28, 0x7F	; 127
    14b8:	df 4f       	sbci	r29, 0xFF	; 255
    14ba:	b9 83       	std	Y+1, r27	; 0x01
    14bc:	a8 83       	st	Y, r26
    14be:	c1 58       	subi	r28, 0x81	; 129
    14c0:	d0 40       	sbci	r29, 0x00	; 0
				ReportSize     -= 4;
    14c2:	cd 57       	subi	r28, 0x7D	; 125
    14c4:	df 4f       	sbci	r29, 0xFF	; 255
    14c6:	e8 81       	ld	r30, Y
    14c8:	f9 81       	ldd	r31, Y+1	; 0x01
    14ca:	c3 58       	subi	r28, 0x83	; 131
    14cc:	d0 40       	sbci	r29, 0x00	; 0
    14ce:	34 97       	sbiw	r30, 0x04	; 4
    14d0:	31 c0       	rjmp	.+98     	; 0x1534 <USB_ProcessHIDReport+0x22c>
				ReportData     += 4;
				break;
			case HID_RI_DATA_BITS_16:
				ReportItemData  = le16_to_cpu(*((uint16_t*)ReportData));
    14d2:	cf 57       	subi	r28, 0x7F	; 127
    14d4:	df 4f       	sbci	r29, 0xFF	; 255
    14d6:	a8 81       	ld	r26, Y
    14d8:	b9 81       	ldd	r27, Y+1	; 0x01
    14da:	c1 58       	subi	r28, 0x81	; 129
    14dc:	d0 40       	sbci	r29, 0x00	; 0
    14de:	8d 91       	ld	r24, X+
    14e0:	9d 91       	ld	r25, X+
    14e2:	cf 57       	subi	r28, 0x7F	; 127
    14e4:	df 4f       	sbci	r29, 0xFF	; 255
    14e6:	b9 83       	std	Y+1, r27	; 0x01
    14e8:	a8 83       	st	Y, r26
    14ea:	c1 58       	subi	r28, 0x81	; 129
    14ec:	d0 40       	sbci	r29, 0x00	; 0
    14ee:	7c 01       	movw	r14, r24
    14f0:	00 e0       	ldi	r16, 0x00	; 0
    14f2:	10 e0       	ldi	r17, 0x00	; 0
				ReportSize     -= 2;
    14f4:	cd 57       	subi	r28, 0x7D	; 125
    14f6:	df 4f       	sbci	r29, 0xFF	; 255
    14f8:	e8 81       	ld	r30, Y
    14fa:	f9 81       	ldd	r31, Y+1	; 0x01
    14fc:	c3 58       	subi	r28, 0x83	; 131
    14fe:	d0 40       	sbci	r29, 0x00	; 0
    1500:	32 97       	sbiw	r30, 0x02	; 2
    1502:	18 c0       	rjmp	.+48     	; 0x1534 <USB_ProcessHIDReport+0x22c>
				ReportData     += 2;
				break;
			case HID_RI_DATA_BITS_8:
				ReportItemData  = *((uint8_t*)ReportData);
    1504:	cf 57       	subi	r28, 0x7F	; 127
    1506:	df 4f       	sbci	r29, 0xFF	; 255
    1508:	a8 81       	ld	r26, Y
    150a:	b9 81       	ldd	r27, Y+1	; 0x01
    150c:	c1 58       	subi	r28, 0x81	; 129
    150e:	d0 40       	sbci	r29, 0x00	; 0
    1510:	8d 91       	ld	r24, X+
    1512:	cf 57       	subi	r28, 0x7F	; 127
    1514:	df 4f       	sbci	r29, 0xFF	; 255
    1516:	b9 83       	std	Y+1, r27	; 0x01
    1518:	a8 83       	st	Y, r26
    151a:	c1 58       	subi	r28, 0x81	; 129
    151c:	d0 40       	sbci	r29, 0x00	; 0
    151e:	e8 2e       	mov	r14, r24
    1520:	ff 24       	eor	r15, r15
    1522:	00 e0       	ldi	r16, 0x00	; 0
    1524:	10 e0       	ldi	r17, 0x00	; 0
				ReportSize     -= 1;
    1526:	cd 57       	subi	r28, 0x7D	; 125
    1528:	df 4f       	sbci	r29, 0xFF	; 255
    152a:	e8 81       	ld	r30, Y
    152c:	f9 81       	ldd	r31, Y+1	; 0x01
    152e:	c3 58       	subi	r28, 0x83	; 131
    1530:	d0 40       	sbci	r29, 0x00	; 0
    1532:	31 97       	sbiw	r30, 0x01	; 1
    1534:	cd 57       	subi	r28, 0x7D	; 125
    1536:	df 4f       	sbci	r29, 0xFF	; 255
    1538:	f9 83       	std	Y+1, r31	; 0x01
    153a:	e8 83       	st	Y, r30
    153c:	c3 58       	subi	r28, 0x83	; 131
    153e:	d0 40       	sbci	r29, 0x00	; 0
				ReportData     += 1;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
    1540:	c1 58       	subi	r28, 0x81	; 129
    1542:	df 4f       	sbci	r29, 0xFF	; 255
    1544:	88 81       	ld	r24, Y
    1546:	99 81       	ldd	r25, Y+1	; 0x01
    1548:	cf 57       	subi	r28, 0x7F	; 127
    154a:	d0 40       	sbci	r29, 0x00	; 0
    154c:	8c 7f       	andi	r24, 0xFC	; 252
    154e:	90 70       	andi	r25, 0x00	; 0
    1550:	84 36       	cpi	r24, 0x64	; 100
    1552:	91 05       	cpc	r25, r1
    1554:	09 f4       	brne	.+2      	; 0x1558 <USB_ProcessHIDReport+0x250>
    1556:	db c0       	rjmp	.+438    	; 0x170e <USB_ProcessHIDReport+0x406>
    1558:	85 36       	cpi	r24, 0x65	; 101
    155a:	91 05       	cpc	r25, r1
    155c:	74 f5       	brge	.+92     	; 0x15ba <USB_ProcessHIDReport+0x2b2>
    155e:	84 32       	cpi	r24, 0x24	; 36
    1560:	91 05       	cpc	r25, r1
    1562:	09 f4       	brne	.+2      	; 0x1566 <USB_ProcessHIDReport+0x25e>
    1564:	bb c0       	rjmp	.+374    	; 0x16dc <USB_ProcessHIDReport+0x3d4>
    1566:	85 32       	cpi	r24, 0x25	; 37
    1568:	91 05       	cpc	r25, r1
    156a:	9c f4       	brge	.+38     	; 0x1592 <USB_ProcessHIDReport+0x28a>
    156c:	88 30       	cpi	r24, 0x08	; 8
    156e:	91 05       	cpc	r25, r1
    1570:	09 f4       	brne	.+2      	; 0x1574 <USB_ProcessHIDReport+0x26c>
    1572:	37 c1       	rjmp	.+622    	; 0x17e2 <USB_ProcessHIDReport+0x4da>
    1574:	89 30       	cpi	r24, 0x09	; 9
    1576:	91 05       	cpc	r25, r1
    1578:	24 f4       	brge	.+8      	; 0x1582 <USB_ProcessHIDReport+0x27a>
    157a:	04 97       	sbiw	r24, 0x04	; 4
    157c:	09 f0       	breq	.+2      	; 0x1580 <USB_ProcessHIDReport+0x278>
    157e:	86 c2       	rjmp	.+1292   	; 0x1a8c <USB_ProcessHIDReport+0x784>
    1580:	98 c0       	rjmp	.+304    	; 0x16b2 <USB_ProcessHIDReport+0x3aa>
    1582:	84 31       	cpi	r24, 0x14	; 20
    1584:	91 05       	cpc	r25, r1
    1586:	09 f4       	brne	.+2      	; 0x158a <USB_ProcessHIDReport+0x282>
    1588:	a3 c0       	rjmp	.+326    	; 0x16d0 <USB_ProcessHIDReport+0x3c8>
    158a:	48 97       	sbiw	r24, 0x18	; 24
    158c:	09 f0       	breq	.+2      	; 0x1590 <USB_ProcessHIDReport+0x288>
    158e:	7e c2       	rjmp	.+1276   	; 0x1a8c <USB_ProcessHIDReport+0x784>
    1590:	47 c0       	rjmp	.+142    	; 0x1620 <USB_ProcessHIDReport+0x318>
    1592:	84 33       	cpi	r24, 0x34	; 52
    1594:	91 05       	cpc	r25, r1
    1596:	09 f4       	brne	.+2      	; 0x159a <USB_ProcessHIDReport+0x292>
    1598:	a9 c0       	rjmp	.+338    	; 0x16ec <USB_ProcessHIDReport+0x3e4>
    159a:	85 33       	cpi	r24, 0x35	; 53
    159c:	91 05       	cpc	r25, r1
    159e:	24 f4       	brge	.+8      	; 0x15a8 <USB_ProcessHIDReport+0x2a0>
    15a0:	88 97       	sbiw	r24, 0x28	; 40
    15a2:	09 f0       	breq	.+2      	; 0x15a6 <USB_ProcessHIDReport+0x29e>
    15a4:	73 c2       	rjmp	.+1254   	; 0x1a8c <USB_ProcessHIDReport+0x784>
    15a6:	38 c1       	rjmp	.+624    	; 0x1818 <USB_ProcessHIDReport+0x510>
    15a8:	84 34       	cpi	r24, 0x44	; 68
    15aa:	91 05       	cpc	r25, r1
    15ac:	09 f4       	brne	.+2      	; 0x15b0 <USB_ProcessHIDReport+0x2a8>
    15ae:	a4 c0       	rjmp	.+328    	; 0x16f8 <USB_ProcessHIDReport+0x3f0>
    15b0:	84 35       	cpi	r24, 0x54	; 84
    15b2:	91 05       	cpc	r25, r1
    15b4:	09 f0       	breq	.+2      	; 0x15b8 <USB_ProcessHIDReport+0x2b0>
    15b6:	6a c2       	rjmp	.+1236   	; 0x1a8c <USB_ProcessHIDReport+0x784>
    15b8:	a7 c0       	rjmp	.+334    	; 0x1708 <USB_ProcessHIDReport+0x400>
    15ba:	84 39       	cpi	r24, 0x94	; 148
    15bc:	91 05       	cpc	r25, r1
    15be:	09 f4       	brne	.+2      	; 0x15c2 <USB_ProcessHIDReport+0x2ba>
    15c0:	b1 c0       	rjmp	.+354    	; 0x1724 <USB_ProcessHIDReport+0x41c>
    15c2:	85 39       	cpi	r24, 0x95	; 149
    15c4:	91 05       	cpc	r25, r1
    15c6:	a4 f4       	brge	.+40     	; 0x15f0 <USB_ProcessHIDReport+0x2e8>
    15c8:	80 38       	cpi	r24, 0x80	; 128
    15ca:	91 05       	cpc	r25, r1
    15cc:	69 f1       	breq	.+90     	; 0x1628 <USB_ProcessHIDReport+0x320>
    15ce:	81 38       	cpi	r24, 0x81	; 129
    15d0:	91 05       	cpc	r25, r1
    15d2:	2c f4       	brge	.+10     	; 0x15de <USB_ProcessHIDReport+0x2d6>
    15d4:	84 37       	cpi	r24, 0x74	; 116
    15d6:	91 05       	cpc	r25, r1
    15d8:	09 f0       	breq	.+2      	; 0x15dc <USB_ProcessHIDReport+0x2d4>
    15da:	58 c2       	rjmp	.+1200   	; 0x1a8c <USB_ProcessHIDReport+0x784>
    15dc:	a0 c0       	rjmp	.+320    	; 0x171e <USB_ProcessHIDReport+0x416>
    15de:	84 38       	cpi	r24, 0x84	; 132
    15e0:	91 05       	cpc	r25, r1
    15e2:	09 f4       	brne	.+2      	; 0x15e6 <USB_ProcessHIDReport+0x2de>
    15e4:	a3 c0       	rjmp	.+326    	; 0x172c <USB_ProcessHIDReport+0x424>
    15e6:	80 39       	cpi	r24, 0x90	; 144
    15e8:	91 05       	cpc	r25, r1
    15ea:	09 f0       	breq	.+2      	; 0x15ee <USB_ProcessHIDReport+0x2e6>
    15ec:	4f c2       	rjmp	.+1182   	; 0x1a8c <USB_ProcessHIDReport+0x784>
    15ee:	1c c0       	rjmp	.+56     	; 0x1628 <USB_ProcessHIDReport+0x320>
    15f0:	80 3b       	cpi	r24, 0xB0	; 176
    15f2:	91 05       	cpc	r25, r1
    15f4:	c9 f0       	breq	.+50     	; 0x1628 <USB_ProcessHIDReport+0x320>
    15f6:	81 3b       	cpi	r24, 0xB1	; 177
    15f8:	91 05       	cpc	r25, r1
    15fa:	4c f4       	brge	.+18     	; 0x160e <USB_ProcessHIDReport+0x306>
    15fc:	80 3a       	cpi	r24, 0xA0	; 160
    15fe:	91 05       	cpc	r25, r1
    1600:	09 f4       	brne	.+2      	; 0x1604 <USB_ProcessHIDReport+0x2fc>
    1602:	12 c1       	rjmp	.+548    	; 0x1828 <USB_ProcessHIDReport+0x520>
    1604:	84 3a       	cpi	r24, 0xA4	; 164
    1606:	91 05       	cpc	r25, r1
    1608:	09 f0       	breq	.+2      	; 0x160c <USB_ProcessHIDReport+0x304>
    160a:	40 c2       	rjmp	.+1152   	; 0x1a8c <USB_ProcessHIDReport+0x784>
    160c:	2a c0       	rjmp	.+84     	; 0x1662 <USB_ProcessHIDReport+0x35a>
    160e:	84 3b       	cpi	r24, 0xB4	; 180
    1610:	91 05       	cpc	r25, r1
    1612:	09 f4       	brne	.+2      	; 0x1616 <USB_ProcessHIDReport+0x30e>
    1614:	3e c0       	rjmp	.+124    	; 0x1692 <USB_ProcessHIDReport+0x38a>
    1616:	80 3c       	cpi	r24, 0xC0	; 192
    1618:	91 05       	cpc	r25, r1
    161a:	09 f0       	breq	.+2      	; 0x161e <USB_ProcessHIDReport+0x316>
    161c:	37 c2       	rjmp	.+1134   	; 0x1a8c <USB_ProcessHIDReport+0x784>
    161e:	63 c1       	rjmp	.+710    	; 0x18e6 <USB_ProcessHIDReport+0x5de>
    1620:	f5 01       	movw	r30, r10
    1622:	27 01       	movw	r4, r14
    1624:	38 01       	movw	r6, r16
    1626:	33 c2       	rjmp	.+1126   	; 0x1a8e <USB_ProcessHIDReport+0x786>
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
    1628:	cb 57       	subi	r28, 0x7B	; 123
    162a:	df 4f       	sbci	r29, 0xFF	; 255
    162c:	c8 82       	st	Y, r12
    162e:	c5 58       	subi	r28, 0x85	; 133
    1630:	d0 40       	sbci	r29, 0x00	; 0
    1632:	ca 57       	subi	r28, 0x7A	; 122
    1634:	df 4f       	sbci	r29, 0xFF	; 255
    1636:	d8 82       	st	Y, r13
    1638:	c6 58       	subi	r28, 0x86	; 134
    163a:	d0 40       	sbci	r29, 0x00	; 0
    163c:	ec 96       	adiw	r28, 0x3c	; 60
    163e:	1f ae       	std	Y+63, r1	; 0x3f
    1640:	ec 97       	sbiw	r28, 0x3c	; 60
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
					}

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));
    1642:	4c 7f       	andi	r20, 0xFC	; 252
    1644:	c9 57       	subi	r28, 0x79	; 121
    1646:	df 4f       	sbci	r29, 0xFF	; 255
    1648:	48 83       	st	Y, r20
    164a:	c7 58       	subi	r28, 0x87	; 135
    164c:	d0 40       	sbci	r29, 0x00	; 0
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
    164e:	97 01       	movw	r18, r14
    1650:	21 70       	andi	r18, 0x01	; 1
    1652:	30 70       	andi	r19, 0x00	; 0
    1654:	c8 57       	subi	r28, 0x78	; 120
    1656:	df 4f       	sbci	r29, 0xFF	; 255
    1658:	39 83       	std	Y+1, r19	; 0x01
    165a:	28 83       	st	Y, r18
    165c:	c8 58       	subi	r28, 0x88	; 136
    165e:	d0 40       	sbci	r29, 0x00	; 0
    1660:	0d c2       	rjmp	.+1050   	; 0x1a7c <USB_ProcessHIDReport+0x774>
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
    1662:	c4 57       	subi	r28, 0x74	; 116
    1664:	df 4f       	sbci	r29, 0xFF	; 255
    1666:	48 81       	ld	r20, Y
    1668:	59 81       	ldd	r21, Y+1	; 0x01
    166a:	cc 58       	subi	r28, 0x8C	; 140
    166c:	d0 40       	sbci	r29, 0x00	; 0
    166e:	c4 16       	cp	r12, r20
    1670:	d5 06       	cpc	r13, r21
    1672:	11 f4       	brne	.+4      	; 0x1678 <USB_ProcessHIDReport+0x370>
    1674:	81 e0       	ldi	r24, 0x01	; 1
    1676:	32 c2       	rjmp	.+1124   	; 0x1adc <USB_ProcessHIDReport+0x7d4>
				  return HID_PARSE_HIDStackOverflow;

				memcpy((CurrStateTable + 1),
    1678:	d6 01       	movw	r26, r12
    167a:	5c 96       	adiw	r26, 0x1c	; 28
    167c:	f6 01       	movw	r30, r12
    167e:	8a e2       	ldi	r24, 0x2A	; 42
    1680:	01 90       	ld	r0, Z+
    1682:	0d 92       	st	X+, r0
    1684:	81 50       	subi	r24, 0x01	; 1
    1686:	e1 f7       	brne	.-8      	; 0x1680 <USB_ProcessHIDReport+0x378>
				       CurrStateTable,
				       sizeof(HID_ReportItem_t));

				CurrStateTable++;
    1688:	8c e1       	ldi	r24, 0x1C	; 28
    168a:	90 e0       	ldi	r25, 0x00	; 0
    168c:	c8 0e       	add	r12, r24
    168e:	d9 1e       	adc	r13, r25
    1690:	fd c1       	rjmp	.+1018   	; 0x1a8c <USB_ProcessHIDReport+0x784>
				break;
			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
    1692:	cc 56       	subi	r28, 0x6C	; 108
    1694:	df 4f       	sbci	r29, 0xFF	; 255
    1696:	a8 81       	ld	r26, Y
    1698:	b9 81       	ldd	r27, Y+1	; 0x01
    169a:	c4 59       	subi	r28, 0x94	; 148
    169c:	d0 40       	sbci	r29, 0x00	; 0
    169e:	ca 16       	cp	r12, r26
    16a0:	db 06       	cpc	r13, r27
    16a2:	11 f4       	brne	.+4      	; 0x16a8 <USB_ProcessHIDReport+0x3a0>
    16a4:	82 e0       	ldi	r24, 0x02	; 2
    16a6:	1a c2       	rjmp	.+1076   	; 0x1adc <USB_ProcessHIDReport+0x7d4>
				  return HID_PARSE_HIDStackUnderflow;

				CurrStateTable--;
    16a8:	e4 ee       	ldi	r30, 0xE4	; 228
    16aa:	ff ef       	ldi	r31, 0xFF	; 255
    16ac:	ce 0e       	add	r12, r30
    16ae:	df 1e       	adc	r13, r31
    16b0:	ed c1       	rjmp	.+986    	; 0x1a8c <USB_ProcessHIDReport+0x784>
				break;
			case HID_RI_USAGE_PAGE(0):
				if ((HIDReportItem & HID_RI_DATA_SIZE_MASK) == HID_RI_DATA_BITS_32)
    16b2:	23 30       	cpi	r18, 0x03	; 3
    16b4:	31 05       	cpc	r19, r1
    16b6:	31 f4       	brne	.+12     	; 0x16c4 <USB_ProcessHIDReport+0x3bc>
				  CurrStateTable->Attributes.Usage.Page = (ReportItemData >> 16);
    16b8:	c8 01       	movw	r24, r16
    16ba:	aa 27       	eor	r26, r26
    16bc:	bb 27       	eor	r27, r27
    16be:	f6 01       	movw	r30, r12
    16c0:	92 83       	std	Z+2, r25	; 0x02
    16c2:	81 83       	std	Z+1, r24	; 0x01
				
				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
    16c4:	d6 01       	movw	r26, r12
    16c6:	12 96       	adiw	r26, 0x02	; 2
    16c8:	fc 92       	st	X, r15
    16ca:	ee 92       	st	-X, r14
    16cc:	11 97       	sbiw	r26, 0x01	; 1
    16ce:	de c1       	rjmp	.+956    	; 0x1a8c <USB_ProcessHIDReport+0x784>
				break;
			case HID_RI_LOGICAL_MINIMUM(0):
				CurrStateTable->Attributes.Logical.Minimum  = ReportItemData;
    16d0:	f6 01       	movw	r30, r12
    16d2:	e2 86       	std	Z+10, r14	; 0x0a
    16d4:	f3 86       	std	Z+11, r15	; 0x0b
    16d6:	04 87       	std	Z+12, r16	; 0x0c
    16d8:	15 87       	std	Z+13, r17	; 0x0d
    16da:	d8 c1       	rjmp	.+944    	; 0x1a8c <USB_ProcessHIDReport+0x784>
				break;
			case HID_RI_LOGICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Logical.Maximum  = ReportItemData;
    16dc:	d6 01       	movw	r26, r12
    16de:	1e 96       	adiw	r26, 0x0e	; 14
    16e0:	ed 92       	st	X+, r14
    16e2:	fd 92       	st	X+, r15
    16e4:	0d 93       	st	X+, r16
    16e6:	1c 93       	st	X, r17
    16e8:	51 97       	sbiw	r26, 0x11	; 17
    16ea:	d0 c1       	rjmp	.+928    	; 0x1a8c <USB_ProcessHIDReport+0x784>
				break;
			case HID_RI_PHYSICAL_MINIMUM(0):
				CurrStateTable->Attributes.Physical.Minimum = ReportItemData;
    16ec:	f6 01       	movw	r30, r12
    16ee:	e2 8a       	std	Z+18, r14	; 0x12
    16f0:	f3 8a       	std	Z+19, r15	; 0x13
    16f2:	04 8b       	std	Z+20, r16	; 0x14
    16f4:	15 8b       	std	Z+21, r17	; 0x15
    16f6:	ca c1       	rjmp	.+916    	; 0x1a8c <USB_ProcessHIDReport+0x784>
				break;
			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
    16f8:	d6 01       	movw	r26, r12
    16fa:	56 96       	adiw	r26, 0x16	; 22
    16fc:	ed 92       	st	X+, r14
    16fe:	fd 92       	st	X+, r15
    1700:	0d 93       	st	X+, r16
    1702:	1c 93       	st	X, r17
    1704:	59 97       	sbiw	r26, 0x19	; 25
    1706:	c2 c1       	rjmp	.+900    	; 0x1a8c <USB_ProcessHIDReport+0x784>
				break;
			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
    1708:	f6 01       	movw	r30, r12
    170a:	e1 86       	std	Z+9, r14	; 0x09
    170c:	bf c1       	rjmp	.+894    	; 0x1a8c <USB_ProcessHIDReport+0x784>
				break;
			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
    170e:	d6 01       	movw	r26, r12
    1710:	15 96       	adiw	r26, 0x05	; 5
    1712:	ed 92       	st	X+, r14
    1714:	fd 92       	st	X+, r15
    1716:	0d 93       	st	X+, r16
    1718:	1c 93       	st	X, r17
    171a:	18 97       	sbiw	r26, 0x08	; 8
    171c:	b7 c1       	rjmp	.+878    	; 0x1a8c <USB_ProcessHIDReport+0x784>
				break;
			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
    171e:	f6 01       	movw	r30, r12
    1720:	e0 82       	st	Z, r14
    1722:	b4 c1       	rjmp	.+872    	; 0x1a8c <USB_ProcessHIDReport+0x784>
				break;
			case HID_RI_REPORT_COUNT(0):
				CurrStateTable->ReportCount                 = ReportItemData;
    1724:	d6 01       	movw	r26, r12
    1726:	5a 96       	adiw	r26, 0x1a	; 26
    1728:	ec 92       	st	X, r14
    172a:	b0 c1       	rjmp	.+864    	; 0x1a8c <USB_ProcessHIDReport+0x784>
				break;
			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;
    172c:	3e 2d       	mov	r19, r14
    172e:	f6 01       	movw	r30, r12
    1730:	e3 8e       	std	Z+27, r14	; 0x1b

				if (ParserData->UsingReportIDs)
    1732:	c2 57       	subi	r28, 0x72	; 114
    1734:	df 4f       	sbci	r29, 0xFF	; 255
    1736:	a8 81       	ld	r26, Y
    1738:	b9 81       	ldd	r27, Y+1	; 0x01
    173a:	ce 58       	subi	r28, 0x8E	; 142
    173c:	d0 40       	sbci	r29, 0x00	; 0
    173e:	8c 91       	ld	r24, X
    1740:	88 23       	and	r24, r24
    1742:	09 f4       	brne	.+2      	; 0x1746 <USB_ProcessHIDReport+0x43e>
    1744:	40 c0       	rjmp	.+128    	; 0x17c6 <USB_ProcessHIDReport+0x4be>
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
    1746:	c0 57       	subi	r28, 0x70	; 112
    1748:	df 4f       	sbci	r29, 0xFF	; 255
    174a:	e8 81       	ld	r30, Y
    174c:	f9 81       	ldd	r31, Y+1	; 0x01
    174e:	c0 59       	subi	r28, 0x90	; 144
    1750:	d0 40       	sbci	r29, 0x00	; 0
    1752:	20 81       	ld	r18, Z
    1754:	ce 56       	subi	r28, 0x6E	; 110
    1756:	df 4f       	sbci	r29, 0xFF	; 255
    1758:	88 81       	ld	r24, Y
    175a:	c2 59       	subi	r28, 0x92	; 146
    175c:	d0 40       	sbci	r29, 0x00	; 0
    175e:	cd 56       	subi	r28, 0x6D	; 109
    1760:	df 4f       	sbci	r29, 0xFF	; 255
    1762:	98 81       	ld	r25, Y
    1764:	c3 59       	subi	r28, 0x93	; 147
    1766:	d0 40       	sbci	r29, 0x00	; 0
    1768:	dc 01       	movw	r26, r24
    176a:	e0 e0       	ldi	r30, 0x00	; 0
    176c:	10 c0       	rjmp	.+32     	; 0x178e <USB_ProcessHIDReport+0x486>
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
    176e:	8c 91       	ld	r24, X
    1770:	17 96       	adiw	r26, 0x07	; 7
    1772:	83 17       	cp	r24, r19
    1774:	59 f4       	brne	.+22     	; 0x178c <USB_ProcessHIDReport+0x484>
						{
							CurrReportIDInfo = &ParserData->ReportIDSizes[i];
    1776:	87 e0       	ldi	r24, 0x07	; 7
    1778:	e8 9f       	mul	r30, r24
    177a:	40 01       	movw	r8, r0
    177c:	11 24       	eor	r1, r1
    177e:	20 e9       	ldi	r18, 0x90	; 144
    1780:	33 e0       	ldi	r19, 0x03	; 3
    1782:	82 0e       	add	r8, r18
    1784:	93 1e       	adc	r9, r19
    1786:	82 0c       	add	r8, r2
    1788:	93 1c       	adc	r9, r3
    178a:	1d c0       	rjmp	.+58     	; 0x17c6 <USB_ProcessHIDReport+0x4be>

				if (ParserData->UsingReportIDs)
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
    178c:	ef 5f       	subi	r30, 0xFF	; 255
    178e:	e2 17       	cp	r30, r18
    1790:	70 f3       	brcs	.-36     	; 0x176e <USB_ProcessHIDReport+0x466>
						}
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
    1792:	2a 30       	cpi	r18, 0x0A	; 10
    1794:	11 f4       	brne	.+4      	; 0x179a <USB_ProcessHIDReport+0x492>
    1796:	87 e0       	ldi	r24, 0x07	; 7
    1798:	a1 c1       	rjmp	.+834    	; 0x1adc <USB_ProcessHIDReport+0x7d4>
						  return HID_PARSE_InsufficientReportIDItems;

						CurrReportIDInfo = &ParserData->ReportIDSizes[ParserData->TotalDeviceReports++];
    179a:	87 e0       	ldi	r24, 0x07	; 7
    179c:	28 9f       	mul	r18, r24
    179e:	40 01       	movw	r8, r0
    17a0:	11 24       	eor	r1, r1
    17a2:	40 e9       	ldi	r20, 0x90	; 144
    17a4:	53 e0       	ldi	r21, 0x03	; 3
    17a6:	84 0e       	add	r8, r20
    17a8:	95 1e       	adc	r9, r21
    17aa:	82 0c       	add	r8, r2
    17ac:	93 1c       	adc	r9, r3
    17ae:	2f 5f       	subi	r18, 0xFF	; 255
    17b0:	c0 57       	subi	r28, 0x70	; 112
    17b2:	df 4f       	sbci	r29, 0xFF	; 255
    17b4:	a8 81       	ld	r26, Y
    17b6:	b9 81       	ldd	r27, Y+1	; 0x01
    17b8:	c0 59       	subi	r28, 0x90	; 144
    17ba:	d0 40       	sbci	r29, 0x00	; 0
    17bc:	2c 93       	st	X, r18
						memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
    17be:	f4 01       	movw	r30, r8
    17c0:	11 92       	st	Z+, r1
    17c2:	8a 95       	dec	r24
    17c4:	e9 f7       	brne	.-6      	; 0x17c0 <USB_ProcessHIDReport+0x4b8>
					}
				}

				ParserData->UsingReportIDs = true;
    17c6:	e1 e0       	ldi	r30, 0x01	; 1
    17c8:	c2 57       	subi	r28, 0x72	; 114
    17ca:	df 4f       	sbci	r29, 0xFF	; 255
    17cc:	a8 81       	ld	r26, Y
    17ce:	b9 81       	ldd	r27, Y+1	; 0x01
    17d0:	ce 58       	subi	r28, 0x8E	; 142
    17d2:	d0 40       	sbci	r29, 0x00	; 0
    17d4:	ec 93       	st	X, r30

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
    17d6:	d6 01       	movw	r26, r12
    17d8:	5b 96       	adiw	r26, 0x1b	; 27
    17da:	8c 91       	ld	r24, X
    17dc:	f4 01       	movw	r30, r8
    17de:	80 83       	st	Z, r24
    17e0:	55 c1       	rjmp	.+682    	; 0x1a8c <USB_ProcessHIDReport+0x784>
				break;
			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
    17e2:	ed 96       	adiw	r28, 0x3d	; 61
    17e4:	ff ad       	ldd	r31, Y+63	; 0x3f
    17e6:	ed 97       	sbiw	r28, 0x3d	; 61
    17e8:	f8 30       	cpi	r31, 0x08	; 8
    17ea:	11 f4       	brne	.+4      	; 0x17f0 <USB_ProcessHIDReport+0x4e8>
    17ec:	86 e0       	ldi	r24, 0x06	; 6
    17ee:	76 c1       	rjmp	.+748    	; 0x1adc <USB_ProcessHIDReport+0x7d4>
				  return HID_PARSE_UsageListOverflow;

				UsageList[UsageListSize++] = ReportItemData;
    17f0:	ed 96       	adiw	r28, 0x3d	; 61
    17f2:	2f ad       	ldd	r18, Y+63	; 0x3f
    17f4:	ed 97       	sbiw	r28, 0x3d	; 61
    17f6:	e2 2f       	mov	r30, r18
    17f8:	f0 e0       	ldi	r31, 0x00	; 0
    17fa:	ee 0f       	add	r30, r30
    17fc:	ff 1f       	adc	r31, r31
    17fe:	41 e0       	ldi	r20, 0x01	; 1
    1800:	50 e0       	ldi	r21, 0x00	; 0
    1802:	4c 0f       	add	r20, r28
    1804:	5d 1f       	adc	r21, r29
    1806:	e4 0f       	add	r30, r20
    1808:	f5 1f       	adc	r31, r21
    180a:	f1 82       	std	Z+1, r15	; 0x01
    180c:	e0 82       	st	Z, r14
    180e:	2f 5f       	subi	r18, 0xFF	; 255
    1810:	ed 96       	adiw	r28, 0x3d	; 61
    1812:	2f af       	std	Y+63, r18	; 0x3f
    1814:	ed 97       	sbiw	r28, 0x3d	; 61
    1816:	3a c1       	rjmp	.+628    	; 0x1a8c <USB_ProcessHIDReport+0x784>
				break;
    1818:	f5 01       	movw	r30, r10
    181a:	eb 96       	adiw	r28, 0x3b	; 59
    181c:	ec ae       	std	Y+60, r14	; 0x3c
    181e:	fd ae       	std	Y+61, r15	; 0x3d
    1820:	0e af       	std	Y+62, r16	; 0x3e
    1822:	1f af       	std	Y+63, r17	; 0x3f
    1824:	eb 97       	sbiw	r28, 0x3b	; 59
    1826:	33 c1       	rjmp	.+614    	; 0x1a8e <USB_ProcessHIDReport+0x786>
				break;
			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;
			case HID_RI_COLLECTION(0):
				if (CurrCollectionPath == NULL)
    1828:	a1 14       	cp	r10, r1
    182a:	b1 04       	cpc	r11, r1
    182c:	29 f4       	brne	.+10     	; 0x1838 <USB_ProcessHIDReport+0x530>
    182e:	e7 96       	adiw	r28, 0x37	; 55
    1830:	ee ad       	ldd	r30, Y+62	; 0x3e
    1832:	ff ad       	ldd	r31, Y+63	; 0x3f
    1834:	e7 97       	sbiw	r28, 0x37	; 55
    1836:	15 c0       	rjmp	.+42     	; 0x1862 <USB_ProcessHIDReport+0x55a>
    1838:	e5 96       	adiw	r28, 0x35	; 53
    183a:	ee ad       	ldd	r30, Y+62	; 0x3e
    183c:	ff ad       	ldd	r31, Y+63	; 0x3f
    183e:	e5 97       	sbiw	r28, 0x35	; 53
    1840:	0a c0       	rjmp	.+20     	; 0x1856 <USB_ProcessHIDReport+0x54e>

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
    1842:	ef 96       	adiw	r28, 0x3f	; 63
    1844:	8e ad       	ldd	r24, Y+62	; 0x3e
    1846:	9f ad       	ldd	r25, Y+63	; 0x3f
    1848:	ef 97       	sbiw	r28, 0x3f	; 63
    184a:	e8 17       	cp	r30, r24
    184c:	f9 07       	cpc	r31, r25
    184e:	11 f4       	brne	.+4      	; 0x1854 <USB_ProcessHIDReport+0x54c>
    1850:	85 e0       	ldi	r24, 0x05	; 5
    1852:	44 c1       	rjmp	.+648    	; 0x1adc <USB_ProcessHIDReport+0x7d4>
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
    1854:	37 96       	adiw	r30, 0x07	; 7
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
    1856:	85 81       	ldd	r24, Z+5	; 0x05
    1858:	96 81       	ldd	r25, Z+6	; 0x06
    185a:	89 2b       	or	r24, r25
    185c:	91 f7       	brne	.-28     	; 0x1842 <USB_ProcessHIDReport+0x53a>
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
					}

					CurrCollectionPath->Parent = ParentCollectionPath;
    185e:	b6 82       	std	Z+6, r11	; 0x06
    1860:	a5 82       	std	Z+5, r10	; 0x05
				}

				CurrCollectionPath->Type       = ReportItemData;
    1862:	e0 82       	st	Z, r14
				CurrCollectionPath->Usage.Page = CurrStateTable->Attributes.Usage.Page;
    1864:	d6 01       	movw	r26, r12
    1866:	11 96       	adiw	r26, 0x01	; 1
    1868:	8d 91       	ld	r24, X+
    186a:	9c 91       	ld	r25, X
    186c:	12 97       	sbiw	r26, 0x02	; 2
    186e:	92 83       	std	Z+2, r25	; 0x02
    1870:	81 83       	std	Z+1, r24	; 0x01

				if (UsageListSize)
    1872:	ed 96       	adiw	r28, 0x3d	; 61
    1874:	bf ad       	ldd	r27, Y+63	; 0x3f
    1876:	ed 97       	sbiw	r28, 0x3d	; 61
    1878:	bb 23       	and	r27, r27
    187a:	09 f1       	breq	.+66     	; 0x18be <USB_ProcessHIDReport+0x5b6>
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];
    187c:	89 81       	ldd	r24, Y+1	; 0x01
    187e:	9a 81       	ldd	r25, Y+2	; 0x02
    1880:	94 83       	std	Z+4, r25	; 0x04
    1882:	83 83       	std	Z+3, r24	; 0x03
    1884:	de 01       	movw	r26, r28
    1886:	11 96       	adiw	r26, 0x01	; 1

					for (uint8_t i = 0; i < UsageListSize; i++)
    1888:	ed 96       	adiw	r28, 0x3d	; 61
    188a:	4f ad       	ldd	r20, Y+63	; 0x3f
    188c:	ed 97       	sbiw	r28, 0x3d	; 61
    188e:	24 2f       	mov	r18, r20
    1890:	30 e0       	ldi	r19, 0x00	; 0
    1892:	22 0f       	add	r18, r18
    1894:	33 1f       	adc	r19, r19
    1896:	2a 0f       	add	r18, r26
    1898:	3b 1f       	adc	r19, r27
    189a:	06 c0       	rjmp	.+12     	; 0x18a8 <USB_ProcessHIDReport+0x5a0>
					  UsageList[i] = UsageList[i + 1];
    189c:	12 96       	adiw	r26, 0x02	; 2
    189e:	8d 91       	ld	r24, X+
    18a0:	9c 91       	ld	r25, X
    18a2:	13 97       	sbiw	r26, 0x03	; 3
    18a4:	8d 93       	st	X+, r24
    18a6:	9d 93       	st	X+, r25

				if (UsageListSize)
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];

					for (uint8_t i = 0; i < UsageListSize; i++)
    18a8:	a2 17       	cp	r26, r18
    18aa:	b3 07       	cpc	r27, r19
    18ac:	b9 f7       	brne	.-18     	; 0x189c <USB_ProcessHIDReport+0x594>
					  UsageList[i] = UsageList[i + 1];

					UsageListSize--;
    18ae:	ed 96       	adiw	r28, 0x3d	; 61
    18b0:	9f ad       	ldd	r25, Y+63	; 0x3f
    18b2:	ed 97       	sbiw	r28, 0x3d	; 61
    18b4:	91 50       	subi	r25, 0x01	; 1
    18b6:	ed 96       	adiw	r28, 0x3d	; 61
    18b8:	9f af       	std	Y+63, r25	; 0x3f
    18ba:	ed 97       	sbiw	r28, 0x3d	; 61
    18bc:	e8 c0       	rjmp	.+464    	; 0x1a8e <USB_ProcessHIDReport+0x786>
				}
				else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
    18be:	eb 96       	adiw	r28, 0x3b	; 59
    18c0:	2c ad       	ldd	r18, Y+60	; 0x3c
    18c2:	3d ad       	ldd	r19, Y+61	; 0x3d
    18c4:	4e ad       	ldd	r20, Y+62	; 0x3e
    18c6:	5f ad       	ldd	r21, Y+63	; 0x3f
    18c8:	eb 97       	sbiw	r28, 0x3b	; 59
    18ca:	24 15       	cp	r18, r4
    18cc:	35 05       	cpc	r19, r5
    18ce:	46 05       	cpc	r20, r6
    18d0:	57 05       	cpc	r21, r7
    18d2:	08 f4       	brcc	.+2      	; 0x18d6 <USB_ProcessHIDReport+0x5ce>
    18d4:	dc c0       	rjmp	.+440    	; 0x1a8e <USB_ProcessHIDReport+0x786>
				{
					CurrCollectionPath->Usage.Usage = UsageMinMax.Minimum++;
    18d6:	54 82       	std	Z+4, r5	; 0x04
    18d8:	43 82       	std	Z+3, r4	; 0x03
    18da:	08 94       	sec
    18dc:	41 1c       	adc	r4, r1
    18de:	51 1c       	adc	r5, r1
    18e0:	61 1c       	adc	r6, r1
    18e2:	71 1c       	adc	r7, r1
    18e4:	d4 c0       	rjmp	.+424    	; 0x1a8e <USB_ProcessHIDReport+0x786>
				}

				break;
			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
    18e6:	a1 14       	cp	r10, r1
    18e8:	b1 04       	cpc	r11, r1
    18ea:	11 f4       	brne	.+4      	; 0x18f0 <USB_ProcessHIDReport+0x5e8>
    18ec:	84 e0       	ldi	r24, 0x04	; 4
    18ee:	f6 c0       	rjmp	.+492    	; 0x1adc <USB_ProcessHIDReport+0x7d4>
				  return HID_PARSE_UnexpectedEndCollection;

				CurrCollectionPath = CurrCollectionPath->Parent;
    18f0:	d5 01       	movw	r26, r10
    18f2:	15 96       	adiw	r26, 0x05	; 5
    18f4:	ed 91       	ld	r30, X+
    18f6:	fc 91       	ld	r31, X
    18f8:	16 97       	sbiw	r26, 0x06	; 6
    18fa:	c9 c0       	rjmp	.+402    	; 0x1a8e <USB_ProcessHIDReport+0x786>
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
    18fc:	de 01       	movw	r26, r28
    18fe:	59 96       	adiw	r26, 0x19	; 25
    1900:	cb 57       	subi	r28, 0x7B	; 123
    1902:	df 4f       	sbci	r29, 0xFF	; 255
    1904:	88 81       	ld	r24, Y
    1906:	c5 58       	subi	r28, 0x85	; 133
    1908:	d0 40       	sbci	r29, 0x00	; 0
    190a:	ca 57       	subi	r28, 0x7A	; 122
    190c:	df 4f       	sbci	r29, 0xFF	; 255
    190e:	98 81       	ld	r25, Y
    1910:	c6 58       	subi	r28, 0x86	; 134
    1912:	d0 40       	sbci	r29, 0x00	; 0
    1914:	9c 01       	movw	r18, r24
    1916:	f9 01       	movw	r30, r18
    1918:	8a e1       	ldi	r24, 0x1A	; 26
    191a:	01 90       	ld	r0, Z+
    191c:	0d 92       	st	X+, r0
    191e:	81 50       	subi	r24, 0x01	; 1
    1920:	e1 f7       	brne	.-8      	; 0x191a <USB_ProcessHIDReport+0x612>
					       &CurrStateTable->Attributes,
					       sizeof(HID_ReportItem_Attributes_t));

					NewReportItem.ItemFlags      = ReportItemData;
    1922:	fd 8a       	std	Y+21, r15	; 0x15
    1924:	ec 8a       	std	Y+20, r14	; 0x14
					NewReportItem.CollectionPath = CurrCollectionPath;
    1926:	b8 8e       	std	Y+24, r11	; 0x18
    1928:	af 8a       	std	Y+23, r10	; 0x17
					NewReportItem.ReportID       = CurrStateTable->ReportID;
    192a:	f6 01       	movw	r30, r12
    192c:	83 8d       	ldd	r24, Z+27	; 0x1b
    192e:	8e 8b       	std	Y+22, r24	; 0x16

					if (UsageListSize)
    1930:	ed 96       	adiw	r28, 0x3d	; 61
    1932:	ff ad       	ldd	r31, Y+63	; 0x3f
    1934:	ed 97       	sbiw	r28, 0x3d	; 61
    1936:	ff 23       	and	r31, r31
    1938:	f9 f0       	breq	.+62     	; 0x1978 <USB_ProcessHIDReport+0x670>
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
    193a:	49 81       	ldd	r20, Y+1	; 0x01
    193c:	5a 81       	ldd	r21, Y+2	; 0x02
    193e:	fe 01       	movw	r30, r28
    1940:	31 96       	adiw	r30, 0x01	; 1

						for (uint8_t i = 0; i < UsageListSize; i++)
    1942:	ed 96       	adiw	r28, 0x3d	; 61
    1944:	8f ad       	ldd	r24, Y+63	; 0x3f
    1946:	ed 97       	sbiw	r28, 0x3d	; 61
    1948:	28 2f       	mov	r18, r24
    194a:	30 e0       	ldi	r19, 0x00	; 0
    194c:	22 0f       	add	r18, r18
    194e:	33 1f       	adc	r19, r19
    1950:	2e 0f       	add	r18, r30
    1952:	3f 1f       	adc	r19, r31
    1954:	04 c0       	rjmp	.+8      	; 0x195e <USB_ProcessHIDReport+0x656>
						  UsageList[i] = UsageList[i + 1];
    1956:	82 81       	ldd	r24, Z+2	; 0x02
    1958:	93 81       	ldd	r25, Z+3	; 0x03
    195a:	81 93       	st	Z+, r24
    195c:	91 93       	st	Z+, r25

					if (UsageListSize)
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];

						for (uint8_t i = 0; i < UsageListSize; i++)
    195e:	e2 17       	cp	r30, r18
    1960:	f3 07       	cpc	r31, r19
    1962:	c9 f7       	brne	.-14     	; 0x1956 <USB_ProcessHIDReport+0x64e>
					NewReportItem.CollectionPath = CurrCollectionPath;
					NewReportItem.ReportID       = CurrStateTable->ReportID;

					if (UsageListSize)
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
    1964:	5d 8f       	std	Y+29, r21	; 0x1d
    1966:	4c 8f       	std	Y+28, r20	; 0x1c

						for (uint8_t i = 0; i < UsageListSize; i++)
						  UsageList[i] = UsageList[i + 1];

						UsageListSize--;
    1968:	ed 96       	adiw	r28, 0x3d	; 61
    196a:	bf ad       	ldd	r27, Y+63	; 0x3f
    196c:	ed 97       	sbiw	r28, 0x3d	; 61
    196e:	b1 50       	subi	r27, 0x01	; 1
    1970:	ed 96       	adiw	r28, 0x3d	; 61
    1972:	bf af       	std	Y+63, r27	; 0x3f
    1974:	ed 97       	sbiw	r28, 0x3d	; 61
    1976:	12 c0       	rjmp	.+36     	; 0x199c <USB_ProcessHIDReport+0x694>
					}
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
    1978:	eb 96       	adiw	r28, 0x3b	; 59
    197a:	2c ad       	ldd	r18, Y+60	; 0x3c
    197c:	3d ad       	ldd	r19, Y+61	; 0x3d
    197e:	4e ad       	ldd	r20, Y+62	; 0x3e
    1980:	5f ad       	ldd	r21, Y+63	; 0x3f
    1982:	eb 97       	sbiw	r28, 0x3b	; 59
    1984:	24 15       	cp	r18, r4
    1986:	35 05       	cpc	r19, r5
    1988:	46 05       	cpc	r20, r6
    198a:	57 05       	cpc	r21, r7
    198c:	38 f0       	brcs	.+14     	; 0x199c <USB_ProcessHIDReport+0x694>
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
    198e:	5d 8e       	std	Y+29, r5	; 0x1d
    1990:	4c 8e       	std	Y+28, r4	; 0x1c
    1992:	08 94       	sec
    1994:	41 1c       	adc	r4, r1
    1996:	51 1c       	adc	r5, r1
    1998:	61 1c       	adc	r6, r1
    199a:	71 1c       	adc	r7, r1
					}

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));

					if (ItemTypeTag == HID_RI_INPUT(0))
    199c:	c9 57       	subi	r28, 0x79	; 121
    199e:	df 4f       	sbci	r29, 0xFF	; 255
    19a0:	38 81       	ld	r19, Y
    19a2:	c7 58       	subi	r28, 0x87	; 135
    19a4:	d0 40       	sbci	r29, 0x00	; 0
    19a6:	30 38       	cpi	r19, 0x80	; 128
    19a8:	11 f4       	brne	.+4      	; 0x19ae <USB_ProcessHIDReport+0x6a6>
					  NewReportItem.ItemType = HID_REPORT_ITEM_In;
    19aa:	1b 8a       	std	Y+19, r1	; 0x13
    19ac:	0c c0       	rjmp	.+24     	; 0x19c6 <USB_ProcessHIDReport+0x6be>
					else if (ItemTypeTag == HID_RI_OUTPUT(0))
    19ae:	c9 57       	subi	r28, 0x79	; 121
    19b0:	df 4f       	sbci	r29, 0xFF	; 255
    19b2:	48 81       	ld	r20, Y
    19b4:	c7 58       	subi	r28, 0x87	; 135
    19b6:	d0 40       	sbci	r29, 0x00	; 0
    19b8:	40 39       	cpi	r20, 0x90	; 144
    19ba:	19 f4       	brne	.+6      	; 0x19c2 <USB_ProcessHIDReport+0x6ba>
					  NewReportItem.ItemType = HID_REPORT_ITEM_Out;
    19bc:	51 e0       	ldi	r21, 0x01	; 1
    19be:	5b 8b       	std	Y+19, r21	; 0x13
    19c0:	02 c0       	rjmp	.+4      	; 0x19c6 <USB_ProcessHIDReport+0x6be>
					else
					  NewReportItem.ItemType = HID_REPORT_ITEM_Feature;
    19c2:	82 e0       	ldi	r24, 0x02	; 2
    19c4:	8b 8b       	std	Y+19, r24	; 0x13

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];
    19c6:	eb 89       	ldd	r30, Y+19	; 0x13
    19c8:	f0 e0       	ldi	r31, 0x00	; 0
    19ca:	ee 0f       	add	r30, r30
    19cc:	ff 1f       	adc	r31, r31
    19ce:	e8 0d       	add	r30, r8
    19d0:	f9 1d       	adc	r31, r9
    19d2:	81 81       	ldd	r24, Z+1	; 0x01
    19d4:	92 81       	ldd	r25, Z+2	; 0x02
    19d6:	9a 8b       	std	Y+18, r25	; 0x12
    19d8:	89 8b       	std	Y+17, r24	; 0x11

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;
    19da:	d6 01       	movw	r26, r12
    19dc:	2c 91       	ld	r18, X
    19de:	81 81       	ldd	r24, Z+1	; 0x01
    19e0:	92 81       	ldd	r25, Z+2	; 0x02
    19e2:	82 0f       	add	r24, r18
    19e4:	91 1d       	adc	r25, r1
    19e6:	92 83       	std	Z+2, r25	; 0x02
    19e8:	81 83       	std	Z+1, r24	; 0x01

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
    19ea:	eb 89       	ldd	r30, Y+19	; 0x13
    19ec:	f0 e0       	ldi	r31, 0x00	; 0
    19ee:	ee 0f       	add	r30, r30
    19f0:	ff 1f       	adc	r31, r31
    19f2:	e8 0d       	add	r30, r8
    19f4:	f9 1d       	adc	r31, r9
    19f6:	c6 57       	subi	r28, 0x76	; 118
    19f8:	df 4f       	sbci	r29, 0xFF	; 255
    19fa:	a8 81       	ld	r26, Y
    19fc:	b9 81       	ldd	r27, Y+1	; 0x01
    19fe:	ca 58       	subi	r28, 0x8A	; 138
    1a00:	d0 40       	sbci	r29, 0x00	; 0
    1a02:	2d 91       	ld	r18, X+
    1a04:	3c 91       	ld	r19, X
    1a06:	81 81       	ldd	r24, Z+1	; 0x01
    1a08:	92 81       	ldd	r25, Z+2	; 0x02
    1a0a:	82 17       	cp	r24, r18
    1a0c:	93 07       	cpc	r25, r19
    1a0e:	08 f4       	brcc	.+2      	; 0x1a12 <USB_ProcessHIDReport+0x70a>
    1a10:	c9 01       	movw	r24, r18
    1a12:	c6 57       	subi	r28, 0x76	; 118
    1a14:	df 4f       	sbci	r29, 0xFF	; 255
    1a16:	e8 81       	ld	r30, Y
    1a18:	f9 81       	ldd	r31, Y+1	; 0x01
    1a1a:	ca 58       	subi	r28, 0x8A	; 138
    1a1c:	d0 40       	sbci	r29, 0x00	; 0
    1a1e:	91 83       	std	Z+1, r25	; 0x01
    1a20:	80 83       	st	Z, r24

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
    1a22:	d1 01       	movw	r26, r2
    1a24:	8c 91       	ld	r24, X
    1a26:	84 31       	cpi	r24, 0x14	; 20
    1a28:	11 f4       	brne	.+4      	; 0x1a2e <USB_ProcessHIDReport+0x726>
    1a2a:	83 e0       	ldi	r24, 0x03	; 3
    1a2c:	57 c0       	rjmp	.+174    	; 0x1adc <USB_ProcessHIDReport+0x7d4>
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
    1a2e:	ba e2       	ldi	r27, 0x2A	; 42
    1a30:	8b 9f       	mul	r24, r27
    1a32:	f0 01       	movw	r30, r0
    1a34:	11 24       	eor	r1, r1
    1a36:	31 96       	adiw	r30, 0x01	; 1
    1a38:	e2 0d       	add	r30, r2
    1a3a:	f3 1d       	adc	r31, r3
    1a3c:	de 01       	movw	r26, r28
    1a3e:	51 96       	adiw	r26, 0x11	; 17
    1a40:	8a e2       	ldi	r24, 0x2A	; 42
    1a42:	0d 90       	ld	r0, X+
    1a44:	01 92       	st	Z+, r0
    1a46:	81 50       	subi	r24, 0x01	; 1
    1a48:	e1 f7       	brne	.-8      	; 0x1a42 <USB_ProcessHIDReport+0x73a>
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
    1a4a:	c8 57       	subi	r28, 0x78	; 120
    1a4c:	df 4f       	sbci	r29, 0xFF	; 255
    1a4e:	e8 81       	ld	r30, Y
    1a50:	f9 81       	ldd	r31, Y+1	; 0x01
    1a52:	c8 58       	subi	r28, 0x88	; 136
    1a54:	d0 40       	sbci	r29, 0x00	; 0
    1a56:	ef 2b       	or	r30, r31
    1a58:	51 f4       	brne	.+20     	; 0x1a6e <USB_ProcessHIDReport+0x766>
    1a5a:	ce 01       	movw	r24, r28
    1a5c:	41 96       	adiw	r24, 0x11	; 17
    1a5e:	0e 94 3f 01 	call	0x27e	; 0x27e <CALLBACK_HIDParser_FilterHIDReportItem>
    1a62:	88 23       	and	r24, r24
    1a64:	21 f0       	breq	.+8      	; 0x1a6e <USB_ProcessHIDReport+0x766>
					  ParserData->TotalReportItems++;
    1a66:	d1 01       	movw	r26, r2
    1a68:	8c 91       	ld	r24, X
    1a6a:	8f 5f       	subi	r24, 0xFF	; 255
    1a6c:	8c 93       	st	X, r24
				CurrCollectionPath = CurrCollectionPath->Parent;
				break;
			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
    1a6e:	ec 96       	adiw	r28, 0x3c	; 60
    1a70:	bf ad       	ldd	r27, Y+63	; 0x3f
    1a72:	ec 97       	sbiw	r28, 0x3c	; 60
    1a74:	bf 5f       	subi	r27, 0xFF	; 255
    1a76:	ec 96       	adiw	r28, 0x3c	; 60
    1a78:	bf af       	std	Y+63, r27	; 0x3f
    1a7a:	ec 97       	sbiw	r28, 0x3c	; 60
    1a7c:	f6 01       	movw	r30, r12
    1a7e:	82 8d       	ldd	r24, Z+26	; 0x1a
    1a80:	ec 96       	adiw	r28, 0x3c	; 60
    1a82:	ff ad       	ldd	r31, Y+63	; 0x3f
    1a84:	ec 97       	sbiw	r28, 0x3c	; 60
    1a86:	f8 17       	cp	r31, r24
    1a88:	08 f4       	brcc	.+2      	; 0x1a8c <USB_ProcessHIDReport+0x784>
    1a8a:	38 cf       	rjmp	.-400    	; 0x18fc <USB_ProcessHIDReport+0x5f4>
    1a8c:	f5 01       	movw	r30, r10
				}

				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
    1a8e:	c1 58       	subi	r28, 0x81	; 129
    1a90:	df 4f       	sbci	r29, 0xFF	; 255
    1a92:	28 81       	ld	r18, Y
    1a94:	39 81       	ldd	r19, Y+1	; 0x01
    1a96:	cf 57       	subi	r28, 0x7F	; 127
    1a98:	d0 40       	sbci	r29, 0x00	; 0
    1a9a:	2c 70       	andi	r18, 0x0C	; 12
    1a9c:	30 70       	andi	r19, 0x00	; 0
    1a9e:	23 2b       	or	r18, r19
    1aa0:	61 f4       	brne	.+24     	; 0x1aba <USB_ProcessHIDReport+0x7b2>
    1aa2:	ed 96       	adiw	r28, 0x3d	; 61
    1aa4:	1f ae       	std	Y+63, r1	; 0x3f
    1aa6:	ed 97       	sbiw	r28, 0x3d	; 61
    1aa8:	eb 96       	adiw	r28, 0x3b	; 59
    1aaa:	1c ae       	std	Y+60, r1	; 0x3c
    1aac:	1d ae       	std	Y+61, r1	; 0x3d
    1aae:	1e ae       	std	Y+62, r1	; 0x3e
    1ab0:	1f ae       	std	Y+63, r1	; 0x3f
    1ab2:	eb 97       	sbiw	r28, 0x3b	; 59
    1ab4:	44 24       	eor	r4, r4
    1ab6:	55 24       	eor	r5, r5
    1ab8:	32 01       	movw	r6, r4
    1aba:	5f 01       	movw	r10, r30
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
    1abc:	cd 57       	subi	r28, 0x7D	; 125
    1abe:	df 4f       	sbci	r29, 0xFF	; 255
    1ac0:	48 81       	ld	r20, Y
    1ac2:	59 81       	ldd	r21, Y+1	; 0x01
    1ac4:	c3 58       	subi	r28, 0x83	; 131
    1ac6:	d0 40       	sbci	r29, 0x00	; 0
    1ac8:	45 2b       	or	r20, r21
    1aca:	09 f0       	breq	.+2      	; 0x1ace <USB_ProcessHIDReport+0x7c6>
    1acc:	b9 cc       	rjmp	.-1678   	; 0x1440 <USB_ProcessHIDReport+0x138>
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
		}
	}

	if (!(ParserData->TotalReportItems))
    1ace:	d1 01       	movw	r26, r2
    1ad0:	8c 91       	ld	r24, X
    1ad2:	88 23       	and	r24, r24
    1ad4:	11 f0       	breq	.+4      	; 0x1ada <USB_ProcessHIDReport+0x7d2>
    1ad6:	80 e0       	ldi	r24, 0x00	; 0
    1ad8:	01 c0       	rjmp	.+2      	; 0x1adc <USB_ProcessHIDReport+0x7d4>
    1ada:	88 e0       	ldi	r24, 0x08	; 8
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
}
    1adc:	cb 56       	subi	r28, 0x6B	; 107
    1ade:	df 4f       	sbci	r29, 0xFF	; 255
    1ae0:	0f b6       	in	r0, 0x3f	; 63
    1ae2:	f8 94       	cli
    1ae4:	de bf       	out	0x3e, r29	; 62
    1ae6:	0f be       	out	0x3f, r0	; 63
    1ae8:	cd bf       	out	0x3d, r28	; 61
    1aea:	cf 91       	pop	r28
    1aec:	df 91       	pop	r29
    1aee:	1f 91       	pop	r17
    1af0:	0f 91       	pop	r16
    1af2:	ff 90       	pop	r15
    1af4:	ef 90       	pop	r14
    1af6:	df 90       	pop	r13
    1af8:	cf 90       	pop	r12
    1afa:	bf 90       	pop	r11
    1afc:	af 90       	pop	r10
    1afe:	9f 90       	pop	r9
    1b00:	8f 90       	pop	r8
    1b02:	7f 90       	pop	r7
    1b04:	6f 90       	pop	r6
    1b06:	5f 90       	pop	r5
    1b08:	4f 90       	pop	r4
    1b0a:	3f 90       	pop	r3
    1b0c:	2f 90       	pop	r2
    1b0e:	08 95       	ret

00001b10 <DCOMP_HID_Host_NextHIDInterface>:

	return HID_ENUMERROR_NoError;
}

static uint8_t DCOMP_HID_Host_NextHIDInterface(void* const CurrentDescriptor)
{
    1b10:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
    1b12:	81 81       	ldd	r24, Z+1	; 0x01
    1b14:	84 30       	cpi	r24, 0x04	; 4
    1b16:	29 f4       	brne	.+10     	; 0x1b22 <DCOMP_HID_Host_NextHIDInterface+0x12>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		if (Interface->Class == HID_CSCP_HIDClass)
    1b18:	85 81       	ldd	r24, Z+5	; 0x05
    1b1a:	83 30       	cpi	r24, 0x03	; 3
    1b1c:	11 f4       	brne	.+4      	; 0x1b22 <DCOMP_HID_Host_NextHIDInterface+0x12>
    1b1e:	80 e0       	ldi	r24, 0x00	; 0
    1b20:	08 95       	ret
    1b22:	82 e0       	ldi	r24, 0x02	; 2
		  return DESCRIPTOR_SEARCH_Found;
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    1b24:	08 95       	ret

00001b26 <DCOMP_HID_Host_NextHIDDescriptor>:

static uint8_t DCOMP_HID_Host_NextHIDDescriptor(void* const CurrentDescriptor)
{
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == HID_DTYPE_HID)
    1b26:	fc 01       	movw	r30, r24
    1b28:	81 81       	ldd	r24, Z+1	; 0x01
    1b2a:	81 32       	cpi	r24, 0x21	; 33
    1b2c:	11 f4       	brne	.+4      	; 0x1b32 <DCOMP_HID_Host_NextHIDDescriptor+0xc>
    1b2e:	80 e0       	ldi	r24, 0x00	; 0
    1b30:	08 95       	ret
	  return DESCRIPTOR_SEARCH_Found;
	else if (Header->Type == DTYPE_Interface)
    1b32:	84 30       	cpi	r24, 0x04	; 4
    1b34:	11 f0       	breq	.+4      	; 0x1b3a <DCOMP_HID_Host_NextHIDDescriptor+0x14>
    1b36:	82 e0       	ldi	r24, 0x02	; 2
    1b38:	08 95       	ret
    1b3a:	81 e0       	ldi	r24, 0x01	; 1
	  return DESCRIPTOR_SEARCH_Fail;
	else
	  return DESCRIPTOR_SEARCH_NotFound;
}
    1b3c:	08 95       	ret

00001b3e <HID_Host_IsReportReceived>:
		return USB_Host_SendControlRequest(Buffer);
	}
}

bool HID_Host_IsReportReceived(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo)
{
    1b3e:	fc 01       	movw	r30, r24
	if ((USB_HostState != HOST_STATE_Configured) || !(HIDInterfaceInfo->State.IsActive))
    1b40:	80 91 0a 05 	lds	r24, 0x050A
    1b44:	8b 30       	cpi	r24, 0x0B	; 11
    1b46:	a1 f4       	brne	.+40     	; 0x1b70 <HID_Host_IsReportReceived+0x32>
    1b48:	87 81       	ldd	r24, Z+7	; 0x07
    1b4a:	88 23       	and	r24, r24
    1b4c:	89 f0       	breq	.+34     	; 0x1b70 <HID_Host_IsReportReceived+0x32>
	  return false;

	bool ReportReceived;

	Pipe_SelectPipe(HIDInterfaceInfo->Config.DataINPipeNumber);
    1b4e:	80 81       	ld	r24, Z
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1b50:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1b54:	80 91 a9 00 	lds	r24, 0x00A9
    1b58:	8f 7b       	andi	r24, 0xBF	; 191
    1b5a:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    1b5e:	90 91 a6 00 	lds	r25, 0x00A6
    1b62:	91 70       	andi	r25, 0x01	; 1

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1b64:	80 91 a9 00 	lds	r24, 0x00A9
    1b68:	80 64       	ori	r24, 0x40	; 64
    1b6a:	80 93 a9 00 	sts	0x00A9, r24
    1b6e:	01 c0       	rjmp	.+2      	; 0x1b72 <HID_Host_IsReportReceived+0x34>

	ReportReceived = Pipe_IsINReceived();

	Pipe_Freeze();

	return ReportReceived;
    1b70:	90 e0       	ldi	r25, 0x00	; 0
}
    1b72:	89 2f       	mov	r24, r25
    1b74:	08 95       	ret

00001b76 <HID_Host_SetReportProtocol>:
	return USB_Host_SendControlRequest(NULL);
}

#if !defined(HID_HOST_BOOT_PROTOCOL_ONLY)
uint8_t HID_Host_SetReportProtocol(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo)
{
    1b76:	cf 92       	push	r12
    1b78:	df 92       	push	r13
    1b7a:	ef 92       	push	r14
    1b7c:	ff 92       	push	r15
    1b7e:	0f 93       	push	r16
    1b80:	1f 93       	push	r17
    1b82:	df 93       	push	r29
    1b84:	cf 93       	push	r28
    1b86:	cd b7       	in	r28, 0x3d	; 61
    1b88:	de b7       	in	r29, 0x3e	; 62
    1b8a:	8c 01       	movw	r16, r24

	uint16_t LargestReportSizeBits = HIDInterfaceInfo->Config.HIDParserData->LargestReportSizeBits;
	HIDInterfaceInfo->State.LargestReportSize = (LargestReportSizeBits >> 3) + ((LargestReportSizeBits & 0x07) != 0);

	return 0;
}
    1b8c:	cd b6       	in	r12, 0x3d	; 61
    1b8e:	de b6       	in	r13, 0x3e	; 62
#if !defined(HID_HOST_BOOT_PROTOCOL_ONLY)
uint8_t HID_Host_SetReportProtocol(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo)
{
	uint8_t ErrorCode;

	uint8_t HIDReportData[HIDInterfaceInfo->State.HIDReportSize];
    1b90:	dc 01       	movw	r26, r24
    1b92:	50 96       	adiw	r26, 0x10	; 16
    1b94:	4d 91       	ld	r20, X+
    1b96:	5c 91       	ld	r21, X
    1b98:	51 97       	sbiw	r26, 0x11	; 17
    1b9a:	ed b7       	in	r30, 0x3d	; 61
    1b9c:	fe b7       	in	r31, 0x3e	; 62
    1b9e:	e4 1b       	sub	r30, r20
    1ba0:	f5 0b       	sbc	r31, r21
    1ba2:	0f b6       	in	r0, 0x3f	; 63
    1ba4:	f8 94       	cli
    1ba6:	fe bf       	out	0x3e, r31	; 62
    1ba8:	0f be       	out	0x3f, r0	; 63
    1baa:	ed bf       	out	0x3d, r30	; 61
    1bac:	2d b7       	in	r18, 0x3d	; 61
    1bae:	3e b7       	in	r19, 0x3e	; 62
    1bb0:	2f 5f       	subi	r18, 0xFF	; 255
    1bb2:	3f 4f       	sbci	r19, 0xFF	; 255

	USB_ControlRequest = (USB_Request_Header_t)
    1bb4:	18 96       	adiw	r26, 0x08	; 8
    1bb6:	6c 91       	ld	r22, X
    1bb8:	81 e8       	ldi	r24, 0x81	; 129
    1bba:	80 93 02 05 	sts	0x0502, r24
    1bbe:	86 e0       	ldi	r24, 0x06	; 6
    1bc0:	80 93 03 05 	sts	0x0503, r24
    1bc4:	80 e0       	ldi	r24, 0x00	; 0
    1bc6:	92 e2       	ldi	r25, 0x22	; 34
    1bc8:	90 93 05 05 	sts	0x0505, r25
    1bcc:	80 93 04 05 	sts	0x0504, r24
    1bd0:	60 93 06 05 	sts	0x0506, r22
    1bd4:	10 92 07 05 	sts	0x0507, r1
    1bd8:	50 93 09 05 	sts	0x0509, r21
    1bdc:	40 93 08 05 	sts	0x0508, r20
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1be0:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = HIDInterfaceInfo->State.HIDReportSize,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(HIDReportData)) != HOST_SENDCONTROL_Successful)
    1be4:	f2 2e       	mov	r15, r18
    1be6:	e3 2e       	mov	r14, r19
    1be8:	c9 01       	movw	r24, r18
    1bea:	be d9       	rcall	.-3204   	; 0xf68 <USB_Host_SendControlRequest>
    1bec:	28 2f       	mov	r18, r24
    1bee:	88 23       	and	r24, r24
    1bf0:	09 f0       	breq	.+2      	; 0x1bf4 <HID_Host_SetReportProtocol+0x7e>
    1bf2:	52 c0       	rjmp	.+164    	; 0x1c98 <HID_Host_SetReportProtocol+0x122>
	  return ErrorCode;

	if (HIDInterfaceInfo->State.UsingBootProtocol)
    1bf4:	d8 01       	movw	r26, r16
    1bf6:	1f 96       	adiw	r26, 0x0f	; 15
    1bf8:	8c 91       	ld	r24, X
    1bfa:	1f 97       	sbiw	r26, 0x0f	; 15
    1bfc:	88 23       	and	r24, r24
    1bfe:	f1 f0       	breq	.+60     	; 0x1c3c <HID_Host_SetReportProtocol+0xc6>
	{
		USB_ControlRequest = (USB_Request_Header_t)
    1c00:	18 96       	adiw	r26, 0x08	; 8
    1c02:	2c 91       	ld	r18, X
    1c04:	81 e2       	ldi	r24, 0x21	; 33
    1c06:	80 93 02 05 	sts	0x0502, r24
    1c0a:	8b e0       	ldi	r24, 0x0B	; 11
    1c0c:	80 93 03 05 	sts	0x0503, r24
    1c10:	81 e0       	ldi	r24, 0x01	; 1
    1c12:	90 e0       	ldi	r25, 0x00	; 0
    1c14:	90 93 05 05 	sts	0x0505, r25
    1c18:	80 93 04 05 	sts	0x0504, r24
    1c1c:	20 93 06 05 	sts	0x0506, r18
    1c20:	10 92 07 05 	sts	0x0507, r1
    1c24:	10 92 09 05 	sts	0x0509, r1
    1c28:	10 92 08 05 	sts	0x0508, r1
				.wValue        = 1,
				.wIndex        = HIDInterfaceInfo->State.InterfaceNumber,
				.wLength       = 0,
			};

		if ((ErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
    1c2c:	80 e0       	ldi	r24, 0x00	; 0
    1c2e:	90 e0       	ldi	r25, 0x00	; 0
    1c30:	9b d9       	rcall	.-3274   	; 0xf68 <USB_Host_SendControlRequest>
    1c32:	28 2f       	mov	r18, r24
    1c34:	88 23       	and	r24, r24
    1c36:	81 f5       	brne	.+96     	; 0x1c98 <HID_Host_SetReportProtocol+0x122>
		  return ErrorCode;

		HIDInterfaceInfo->State.UsingBootProtocol = false;
    1c38:	f8 01       	movw	r30, r16
    1c3a:	17 86       	std	Z+15, r1	; 0x0f
	}

	if (HIDInterfaceInfo->Config.HIDParserData == NULL)
    1c3c:	d8 01       	movw	r26, r16
    1c3e:	15 96       	adiw	r26, 0x05	; 5
    1c40:	4d 91       	ld	r20, X+
    1c42:	5c 91       	ld	r21, X
    1c44:	16 97       	sbiw	r26, 0x06	; 6
    1c46:	41 15       	cp	r20, r1
    1c48:	51 05       	cpc	r21, r1
    1c4a:	11 f4       	brne	.+4      	; 0x1c50 <HID_Host_SetReportProtocol+0xda>
    1c4c:	20 e8       	ldi	r18, 0x80	; 128
    1c4e:	24 c0       	rjmp	.+72     	; 0x1c98 <HID_Host_SetReportProtocol+0x122>
	  return HID_ERROR_LOGICAL;

	if ((ErrorCode = USB_ProcessHIDReport(HIDReportData, HIDInterfaceInfo->State.HIDReportSize,
    1c50:	f8 01       	movw	r30, r16
    1c52:	60 89       	ldd	r22, Z+16	; 0x10
    1c54:	71 89       	ldd	r23, Z+17	; 0x11
    1c56:	8f 2d       	mov	r24, r15
    1c58:	9e 2d       	mov	r25, r14
    1c5a:	56 db       	rcall	.-2388   	; 0x1308 <USB_ProcessHIDReport>
    1c5c:	28 2f       	mov	r18, r24
    1c5e:	88 23       	and	r24, r24
    1c60:	11 f0       	breq	.+4      	; 0x1c66 <HID_Host_SetReportProtocol+0xf0>
	                                      HIDInterfaceInfo->Config.HIDParserData)) != HID_PARSE_Successful)
	{
		return HID_ERROR_LOGICAL | ErrorCode;
    1c62:	20 68       	ori	r18, 0x80	; 128
    1c64:	19 c0       	rjmp	.+50     	; 0x1c98 <HID_Host_SetReportProtocol+0x122>
	}

	uint16_t LargestReportSizeBits = HIDInterfaceInfo->Config.HIDParserData->LargestReportSizeBits;
    1c66:	d8 01       	movw	r26, r16
    1c68:	15 96       	adiw	r26, 0x05	; 5
    1c6a:	ed 91       	ld	r30, X+
    1c6c:	fc 91       	ld	r31, X
    1c6e:	16 97       	sbiw	r26, 0x06	; 6
    1c70:	ea 52       	subi	r30, 0x2A	; 42
    1c72:	fc 4f       	sbci	r31, 0xFC	; 252
    1c74:	01 90       	ld	r0, Z+
    1c76:	f0 81       	ld	r31, Z
    1c78:	e0 2d       	mov	r30, r0
	HIDInterfaceInfo->State.LargestReportSize = (LargestReportSizeBits >> 3) + ((LargestReportSizeBits & 0x07) != 0);
    1c7a:	30 e0       	ldi	r19, 0x00	; 0
    1c7c:	cf 01       	movw	r24, r30
    1c7e:	87 70       	andi	r24, 0x07	; 7
    1c80:	90 70       	andi	r25, 0x00	; 0
    1c82:	89 2b       	or	r24, r25
    1c84:	09 f0       	breq	.+2      	; 0x1c88 <HID_Host_SetReportProtocol+0x112>
    1c86:	31 e0       	ldi	r19, 0x01	; 1
    1c88:	93 e0       	ldi	r25, 0x03	; 3
    1c8a:	f6 95       	lsr	r31
    1c8c:	e7 95       	ror	r30
    1c8e:	9a 95       	dec	r25
    1c90:	e1 f7       	brne	.-8      	; 0x1c8a <HID_Host_SetReportProtocol+0x114>
    1c92:	3e 0f       	add	r19, r30
    1c94:	f8 01       	movw	r30, r16
    1c96:	32 8b       	std	Z+18, r19	; 0x12

	return 0;
}
    1c98:	82 2f       	mov	r24, r18
    1c9a:	0f b6       	in	r0, 0x3f	; 63
    1c9c:	f8 94       	cli
    1c9e:	de be       	out	0x3e, r13	; 62
    1ca0:	0f be       	out	0x3f, r0	; 63
    1ca2:	cd be       	out	0x3d, r12	; 61
    1ca4:	cf 91       	pop	r28
    1ca6:	df 91       	pop	r29
    1ca8:	1f 91       	pop	r17
    1caa:	0f 91       	pop	r16
    1cac:	ff 90       	pop	r15
    1cae:	ef 90       	pop	r14
    1cb0:	df 90       	pop	r13
    1cb2:	cf 90       	pop	r12
    1cb4:	08 95       	ret

00001cb6 <HID_Host_ReceiveReport>:
}
#endif

uint8_t HID_Host_ReceiveReport(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo,
                               void* Buffer)
{
    1cb6:	cf 93       	push	r28
    1cb8:	df 93       	push	r29
    1cba:	dc 01       	movw	r26, r24
	if ((USB_HostState != HOST_STATE_Configured) || !(HIDInterfaceInfo->State.IsActive))
    1cbc:	80 91 0a 05 	lds	r24, 0x050A
    1cc0:	8b 30       	cpi	r24, 0x0B	; 11
    1cc2:	09 f0       	breq	.+2      	; 0x1cc6 <HID_Host_ReceiveReport+0x10>
    1cc4:	3f c0       	rjmp	.+126    	; 0x1d44 <HID_Host_ReceiveReport+0x8e>
    1cc6:	17 96       	adiw	r26, 0x07	; 7
    1cc8:	8c 91       	ld	r24, X
    1cca:	17 97       	sbiw	r26, 0x07	; 7
    1ccc:	88 23       	and	r24, r24
    1cce:	d1 f1       	breq	.+116    	; 0x1d44 <HID_Host_ReceiveReport+0x8e>
	  return PIPE_READYWAIT_DeviceDisconnected;

	uint8_t ErrorCode;

	Pipe_SelectPipe(HIDInterfaceInfo->Config.DataINPipeNumber);
    1cd0:	8c 91       	ld	r24, X
    1cd2:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1cd6:	80 91 a9 00 	lds	r24, 0x00A9
    1cda:	8f 7b       	andi	r24, 0xBF	; 191
    1cdc:	80 93 a9 00 	sts	0x00A9, r24
	Pipe_Unfreeze();

	uint16_t ReportSize;
	uint8_t* BufferPos = Buffer;
    1ce0:	eb 01       	movw	r28, r22

#if !defined(HID_HOST_BOOT_PROTOCOL_ONLY)
	if (!(HIDInterfaceInfo->State.UsingBootProtocol))
    1ce2:	1f 96       	adiw	r26, 0x0f	; 15
    1ce4:	8c 91       	ld	r24, X
    1ce6:	1f 97       	sbiw	r26, 0x0f	; 15
    1ce8:	88 23       	and	r24, r24
    1cea:	b1 f4       	brne	.+44     	; 0x1d18 <HID_Host_ReceiveReport+0x62>
	{
		uint8_t ReportID = 0;

		if (HIDInterfaceInfo->Config.HIDParserData->UsingReportIDs)
    1cec:	15 96       	adiw	r26, 0x05	; 5
    1cee:	ed 91       	ld	r30, X+
    1cf0:	fc 91       	ld	r31, X
    1cf2:	16 97       	sbiw	r26, 0x06	; 6
    1cf4:	e8 52       	subi	r30, 0x28	; 40
    1cf6:	fc 4f       	sbci	r31, 0xFC	; 252
    1cf8:	80 81       	ld	r24, Z
    1cfa:	88 23       	and	r24, r24
    1cfc:	11 f4       	brne	.+4      	; 0x1d02 <HID_Host_ReceiveReport+0x4c>
    1cfe:	60 e0       	ldi	r22, 0x00	; 0
    1d00:	03 c0       	rjmp	.+6      	; 0x1d08 <HID_Host_ReceiveReport+0x52>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    1d02:	60 91 af 00 	lds	r22, 0x00AF
		{
			ReportID = Pipe_Read_8();
			*(BufferPos++) = ReportID;
    1d06:	69 93       	st	Y+, r22
		}

		ReportSize = USB_GetHIDReportSize(HIDInterfaceInfo->Config.HIDParserData, ReportID, HID_REPORT_ITEM_In);
    1d08:	15 96       	adiw	r26, 0x05	; 5
    1d0a:	8d 91       	ld	r24, X+
    1d0c:	9c 91       	ld	r25, X
    1d0e:	16 97       	sbiw	r26, 0x06	; 6
    1d10:	40 e0       	ldi	r20, 0x00	; 0
    1d12:	cf da       	rcall	.-2658   	; 0x12b2 <USB_GetHIDReportSize>
    1d14:	bc 01       	movw	r22, r24
    1d16:	04 c0       	rjmp	.+8      	; 0x1d20 <HID_Host_ReceiveReport+0x6a>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1d18:	60 91 f6 00 	lds	r22, 0x00F6
    1d1c:	70 91 f7 00 	lds	r23, 0x00F7
#endif
	{
		ReportSize = Pipe_BytesInPipe();
	}

	if ((ErrorCode = Pipe_Read_Stream_LE(BufferPos, ReportSize, NULL)) != PIPE_RWSTREAM_NoError)
    1d20:	ce 01       	movw	r24, r28
    1d22:	40 e0       	ldi	r20, 0x00	; 0
    1d24:	50 e0       	ldi	r21, 0x00	; 0
    1d26:	01 d8       	rcall	.-4094   	; 0xd2a <Pipe_Read_Stream_LE>
    1d28:	98 2f       	mov	r25, r24
    1d2a:	88 23       	and	r24, r24
    1d2c:	61 f4       	brne	.+24     	; 0x1d46 <HID_Host_ReceiveReport+0x90>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1d2e:	80 91 a6 00 	lds	r24, 0x00A6
    1d32:	8e 77       	andi	r24, 0x7E	; 126
    1d34:	80 93 a6 00 	sts	0x00A6, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1d38:	80 91 a9 00 	lds	r24, 0x00A9
    1d3c:	80 64       	ori	r24, 0x40	; 64
    1d3e:	80 93 a9 00 	sts	0x00A9, r24
    1d42:	01 c0       	rjmp	.+2      	; 0x1d46 <HID_Host_ReceiveReport+0x90>
	  return ErrorCode;

	Pipe_ClearIN();
	Pipe_Freeze();

	return PIPE_RWSTREAM_NoError;
    1d44:	92 e0       	ldi	r25, 0x02	; 2
}
    1d46:	89 2f       	mov	r24, r25
    1d48:	df 91       	pop	r29
    1d4a:	cf 91       	pop	r28
    1d4c:	08 95       	ret

00001d4e <HID_Host_ConfigurePipes>:
#include "HID.h"

uint8_t HID_Host_ConfigurePipes(USB_ClassInfo_HID_Host_t* const HIDInterfaceInfo,
                                uint16_t ConfigDescriptorSize,
                                void* ConfigDescriptorData)
{
    1d4e:	2f 92       	push	r2
    1d50:	3f 92       	push	r3
    1d52:	4f 92       	push	r4
    1d54:	5f 92       	push	r5
    1d56:	6f 92       	push	r6
    1d58:	7f 92       	push	r7
    1d5a:	8f 92       	push	r8
    1d5c:	9f 92       	push	r9
    1d5e:	af 92       	push	r10
    1d60:	bf 92       	push	r11
    1d62:	cf 92       	push	r12
    1d64:	df 92       	push	r13
    1d66:	ef 92       	push	r14
    1d68:	ff 92       	push	r15
    1d6a:	0f 93       	push	r16
    1d6c:	1f 93       	push	r17
    1d6e:	df 93       	push	r29
    1d70:	cf 93       	push	r28
    1d72:	00 d0       	rcall	.+0      	; 0x1d74 <HID_Host_ConfigurePipes+0x26>
    1d74:	00 d0       	rcall	.+0      	; 0x1d76 <HID_Host_ConfigurePipes+0x28>
    1d76:	cd b7       	in	r28, 0x3d	; 61
    1d78:	de b7       	in	r29, 0x3e	; 62
    1d7a:	6c 01       	movw	r12, r24
    1d7c:	7a 83       	std	Y+2, r23	; 0x02
    1d7e:	69 83       	std	Y+1, r22	; 0x01
    1d80:	5c 83       	std	Y+4, r21	; 0x04
    1d82:	4b 83       	std	Y+3, r20	; 0x03
	USB_Descriptor_Endpoint_t*  DataINEndpoint  = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint = NULL;
	USB_Descriptor_Interface_t* HIDInterface    = NULL;
	USB_HID_Descriptor_HID_t*   HIDDescriptor   = NULL;

	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));
    1d84:	07 96       	adiw	r24, 0x07	; 7
    1d86:	fc 01       	movw	r30, r24
    1d88:	8c e0       	ldi	r24, 0x0C	; 12
    1d8a:	df 01       	movw	r26, r30
    1d8c:	1d 92       	st	X+, r1
    1d8e:	8a 95       	dec	r24
    1d90:	e9 f7       	brne	.-6      	; 0x1d8c <HID_Host_ConfigurePipes+0x3e>

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
    1d92:	eb 81       	ldd	r30, Y+3	; 0x03
    1d94:	fc 81       	ldd	r31, Y+4	; 0x04
    1d96:	81 81       	ldd	r24, Z+1	; 0x01
    1d98:	82 30       	cpi	r24, 0x02	; 2
    1d9a:	11 f0       	breq	.+4      	; 0x1da0 <HID_Host_ConfigurePipes+0x52>
    1d9c:	81 e0       	ldi	r24, 0x01	; 1
    1d9e:	ad c0       	rjmp	.+346    	; 0x1efa <HID_Host_ConfigurePipes+0x1ac>
    1da0:	66 24       	eor	r6, r6
    1da2:	77 24       	eor	r7, r7
    1da4:	aa 24       	eor	r10, r10
    1da6:	bb 24       	eor	r11, r11
    1da8:	44 24       	eor	r4, r4
    1daa:	55 24       	eor	r5, r5
    1dac:	22 24       	eor	r2, r2
    1dae:	33 24       	eor	r3, r3
	  return HID_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		if (!(HIDInterface) ||
    1db0:	53 e0       	ldi	r21, 0x03	; 3
    1db2:	e5 2e       	mov	r14, r21
    1db4:	f1 2c       	mov	r15, r1
    1db6:	ec 0e       	add	r14, r28
    1db8:	fd 1e       	adc	r15, r29
    1dba:	8e 01       	movw	r16, r28
    1dbc:	0f 5f       	subi	r16, 0xFF	; 255
    1dbe:	1f 4f       	sbci	r17, 0xFF	; 255
    1dc0:	41 14       	cp	r4, r1
    1dc2:	51 04       	cpc	r5, r1
    1dc4:	39 f0       	breq	.+14     	; 0x1dd4 <HID_Host_ConfigurePipes+0x86>
    1dc6:	c8 01       	movw	r24, r16
    1dc8:	b7 01       	movw	r22, r14
    1dca:	44 e9       	ldi	r20, 0x94	; 148
    1dcc:	5f e0       	ldi	r21, 0x0F	; 15
    1dce:	04 d8       	rcall	.-4088   	; 0xdd8 <USB_GetNextDescriptorComp>
    1dd0:	88 23       	and	r24, r24
    1dd2:	31 f1       	breq	.+76     	; 0x1e20 <HID_Host_ConfigurePipes+0xd2>
		    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
		                              DCOMP_HID_Host_NextHIDInterfaceEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			if (DataINEndpoint || DataOUTEndpoint)
    1dd4:	61 14       	cp	r6, r1
    1dd6:	71 04       	cpc	r7, r1
    1dd8:	89 f5       	brne	.+98     	; 0x1e3c <HID_Host_ConfigurePipes+0xee>
    1dda:	a1 14       	cp	r10, r1
    1ddc:	b1 04       	cpc	r11, r1
    1dde:	71 f5       	brne	.+92     	; 0x1e3c <HID_Host_ConfigurePipes+0xee>
			  break;

			do
			{
				if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    1de0:	c8 01       	movw	r24, r16
    1de2:	b7 01       	movw	r22, r14
    1de4:	48 e8       	ldi	r20, 0x88	; 136
    1de6:	5d e0       	ldi	r21, 0x0D	; 13
    1de8:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <USB_GetNextDescriptorComp>
    1dec:	88 23       	and	r24, r24
    1dee:	09 f0       	breq	.+2      	; 0x1df2 <HID_Host_ConfigurePipes+0xa4>
    1df0:	83 c0       	rjmp	.+262    	; 0x1ef8 <HID_Host_ConfigurePipes+0x1aa>
				                              DCOMP_HID_Host_NextHIDInterface) != DESCRIPTOR_SEARCH_COMP_Found)
				{
					return HID_ENUMERROR_NoCompatibleInterfaceFound;
				}

				HIDInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);
    1df2:	4b 80       	ldd	r4, Y+3	; 0x03
    1df4:	5c 80       	ldd	r5, Y+4	; 0x04
			} while (HIDInterfaceInfo->Config.HIDInterfaceProtocol &&
					 (HIDInterface->Protocol != HIDInterfaceInfo->Config.HIDInterfaceProtocol));
    1df6:	f6 01       	movw	r30, r12
    1df8:	94 81       	ldd	r25, Z+4	; 0x04
    1dfa:	99 23       	and	r25, r25
    1dfc:	29 f0       	breq	.+10     	; 0x1e08 <HID_Host_ConfigurePipes+0xba>
    1dfe:	d2 01       	movw	r26, r4
    1e00:	17 96       	adiw	r26, 0x07	; 7
    1e02:	8c 91       	ld	r24, X
    1e04:	89 17       	cp	r24, r25
    1e06:	61 f7       	brne	.-40     	; 0x1de0 <HID_Host_ConfigurePipes+0x92>

			if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    1e08:	c8 01       	movw	r24, r16
    1e0a:	b7 01       	movw	r22, r14
    1e0c:	43 e9       	ldi	r20, 0x93	; 147
    1e0e:	5d e0       	ldi	r21, 0x0D	; 13
    1e10:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <USB_GetNextDescriptorComp>
    1e14:	88 23       	and	r24, r24
    1e16:	09 f0       	breq	.+2      	; 0x1e1a <HID_Host_ConfigurePipes+0xcc>
    1e18:	6f c0       	rjmp	.+222    	; 0x1ef8 <HID_Host_ConfigurePipes+0x1aa>
			                              DCOMP_HID_Host_NextHIDDescriptor) != DESCRIPTOR_SEARCH_COMP_Found)
			{
				return HID_ENUMERROR_NoCompatibleInterfaceFound;
			}

			HIDDescriptor = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_HID_Descriptor_HID_t);
    1e1a:	2b 80       	ldd	r2, Y+3	; 0x03
    1e1c:	3c 80       	ldd	r3, Y+4	; 0x04
    1e1e:	d0 cf       	rjmp	.-96     	; 0x1dc0 <HID_Host_ConfigurePipes+0x72>
			DataOUTEndpoint = NULL;

			continue;
		}

		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Endpoint_t);
    1e20:	eb 81       	ldd	r30, Y+3	; 0x03
    1e22:	fc 81       	ldd	r31, Y+4	; 0x04

		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
    1e24:	82 81       	ldd	r24, Z+2	; 0x02
    1e26:	87 fd       	sbrc	r24, 7
    1e28:	02 c0       	rjmp	.+4      	; 0x1e2e <HID_Host_ConfigurePipes+0xe0>
    1e2a:	5f 01       	movw	r10, r30
    1e2c:	01 c0       	rjmp	.+2      	; 0x1e30 <HID_Host_ConfigurePipes+0xe2>
    1e2e:	3f 01       	movw	r6, r30
	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return HID_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
    1e30:	61 14       	cp	r6, r1
    1e32:	71 04       	cpc	r7, r1
    1e34:	29 f2       	breq	.-118    	; 0x1dc0 <HID_Host_ConfigurePipes+0x72>
    1e36:	a1 14       	cp	r10, r1
    1e38:	b1 04       	cpc	r11, r1
    1e3a:	11 f2       	breq	.-124    	; 0x1dc0 <HID_Host_ConfigurePipes+0x72>
    1e3c:	99 24       	eor	r9, r9
    1e3e:	93 94       	inc	r9
			Type            = EP_TYPE_INTERRUPT;
			DoubleBanked    = HIDInterfaceInfo->Config.DataOUTPipeDoubleBank;
			InterruptPeriod = DataOUTEndpoint->PollingIntervalMS;

			HIDInterfaceInfo->State.DataOUTPipeSize   = DataOUTEndpoint->EndpointSize;
			HIDInterfaceInfo->State.DeviceUsesOUTPipe = true;
    1e40:	88 24       	eor	r8, r8
    1e42:	83 94       	inc	r8
		uint8_t  Token;
		uint8_t  EndpointAddress;
		uint8_t  InterruptPeriod;
		bool     DoubleBanked;

		if (PipeNum == HIDInterfaceInfo->Config.DataINPipeNumber)
    1e44:	f6 01       	movw	r30, r12
    1e46:	80 81       	ld	r24, Z
    1e48:	98 16       	cp	r9, r24
    1e4a:	79 f4       	brne	.+30     	; 0x1e6a <HID_Host_ConfigurePipes+0x11c>
		{
			Size            = le16_to_cpu(DataINEndpoint->EndpointSize);
    1e4c:	d3 01       	movw	r26, r6
    1e4e:	14 96       	adiw	r26, 0x04	; 4
    1e50:	0d 91       	ld	r16, X+
    1e52:	1c 91       	ld	r17, X
    1e54:	15 97       	sbiw	r26, 0x05	; 5
			EndpointAddress = DataINEndpoint->EndpointAddress;
    1e56:	12 96       	adiw	r26, 0x02	; 2
    1e58:	2c 91       	ld	r18, X
    1e5a:	12 97       	sbiw	r26, 0x02	; 2
			Token           = PIPE_TOKEN_IN;
			Type            = EP_TYPE_INTERRUPT;
			DoubleBanked    = HIDInterfaceInfo->Config.DataINPipeDoubleBank;
    1e5c:	81 81       	ldd	r24, Z+1	; 0x01
			InterruptPeriod = DataINEndpoint->PollingIntervalMS;
    1e5e:	16 96       	adiw	r26, 0x06	; 6
    1e60:	fc 90       	ld	r15, X

			HIDInterfaceInfo->State.DataINPipeSize = DataINEndpoint->EndpointSize;
    1e62:	12 87       	std	Z+10, r17	; 0x0a
    1e64:	01 87       	std	Z+9, r16	; 0x09
    1e66:	40 e1       	ldi	r20, 0x10	; 16
    1e68:	16 c0       	rjmp	.+44     	; 0x1e96 <HID_Host_ConfigurePipes+0x148>
		}
		else if (PipeNum == HIDInterfaceInfo->Config.DataOUTPipeNumber)
    1e6a:	f6 01       	movw	r30, r12
    1e6c:	82 81       	ldd	r24, Z+2	; 0x02
    1e6e:	98 16       	cp	r9, r24
    1e70:	21 f5       	brne	.+72     	; 0x1eba <HID_Host_ConfigurePipes+0x16c>
		{
			if (DataOUTEndpoint == NULL)
    1e72:	a1 14       	cp	r10, r1
    1e74:	b1 04       	cpc	r11, r1
    1e76:	09 f1       	breq	.+66     	; 0x1eba <HID_Host_ConfigurePipes+0x16c>
			  continue;
		
			Size            = le16_to_cpu(DataOUTEndpoint->EndpointSize);
    1e78:	d5 01       	movw	r26, r10
    1e7a:	14 96       	adiw	r26, 0x04	; 4
    1e7c:	0d 91       	ld	r16, X+
    1e7e:	1c 91       	ld	r17, X
    1e80:	15 97       	sbiw	r26, 0x05	; 5
			EndpointAddress = DataOUTEndpoint->EndpointAddress;
    1e82:	12 96       	adiw	r26, 0x02	; 2
    1e84:	2c 91       	ld	r18, X
    1e86:	12 97       	sbiw	r26, 0x02	; 2
			Token           = PIPE_TOKEN_OUT;
			Type            = EP_TYPE_INTERRUPT;
			DoubleBanked    = HIDInterfaceInfo->Config.DataOUTPipeDoubleBank;
    1e88:	83 81       	ldd	r24, Z+3	; 0x03
			InterruptPeriod = DataOUTEndpoint->PollingIntervalMS;
    1e8a:	16 96       	adiw	r26, 0x06	; 6
    1e8c:	fc 90       	ld	r15, X

			HIDInterfaceInfo->State.DataOUTPipeSize   = DataOUTEndpoint->EndpointSize;
    1e8e:	14 87       	std	Z+12, r17	; 0x0c
    1e90:	03 87       	std	Z+11, r16	; 0x0b
			HIDInterfaceInfo->State.DeviceUsesOUTPipe = true;
    1e92:	86 86       	std	Z+14, r8	; 0x0e
    1e94:	40 e2       	ldi	r20, 0x20	; 32
		else
		{
			continue;
		}

		if (!(Pipe_ConfigurePipe(PipeNum, Type, Token, EndpointAddress, Size,
    1e96:	88 23       	and	r24, r24
    1e98:	11 f4       	brne	.+4      	; 0x1e9e <HID_Host_ConfigurePipes+0x150>
    1e9a:	90 e0       	ldi	r25, 0x00	; 0
    1e9c:	01 c0       	rjmp	.+2      	; 0x1ea0 <HID_Host_ConfigurePipes+0x152>
    1e9e:	94 e0       	ldi	r25, 0x04	; 4
    1ea0:	89 2d       	mov	r24, r9
    1ea2:	63 e0       	ldi	r22, 0x03	; 3
    1ea4:	e9 2e       	mov	r14, r25
    1ea6:	0e 94 c1 04 	call	0x982	; 0x982 <Pipe_ConfigurePipe>
    1eaa:	88 23       	and	r24, r24
    1eac:	11 f4       	brne	.+4      	; 0x1eb2 <HID_Host_ConfigurePipes+0x164>
    1eae:	83 e0       	ldi	r24, 0x03	; 3
    1eb0:	24 c0       	rjmp	.+72     	; 0x1efa <HID_Host_ConfigurePipes+0x1ac>
		                         DoubleBanked ? PIPE_BANK_DOUBLE : PIPE_BANK_SINGLE)))
		{
			return HID_ENUMERROR_PipeConfigurationFailed;
		}
		
		if (InterruptPeriod)
    1eb2:	ff 20       	and	r15, r15
    1eb4:	11 f0       	breq	.+4      	; 0x1eba <HID_Host_ConfigurePipes+0x16c>
			 *  \param[in] Milliseconds  Number of milliseconds between each pipe poll.
			 */
			static inline void Pipe_SetInterruptPeriod(const uint8_t Milliseconds) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInterruptPeriod(const uint8_t Milliseconds)
			{
				UPCFG2X = Milliseconds;
    1eb6:	f0 92 ad 00 	sts	0x00AD, r15
		  DataINEndpoint  = EndpointData;
		else
		  DataOUTEndpoint = EndpointData;
	}

	for (uint8_t PipeNum = 1; PipeNum < PIPE_TOTAL_PIPES; PipeNum++)
    1eba:	93 94       	inc	r9
    1ebc:	b7 e0       	ldi	r27, 0x07	; 7
    1ebe:	9b 16       	cp	r9, r27
    1ec0:	09 f6       	brne	.-126    	; 0x1e44 <HID_Host_ConfigurePipes+0xf6>
		
		if (InterruptPeriod)
		  Pipe_SetInterruptPeriod(InterruptPeriod);
	}

	HIDInterfaceInfo->State.InterfaceNumber      = HIDInterface->InterfaceNumber;
    1ec2:	f2 01       	movw	r30, r4
    1ec4:	82 81       	ldd	r24, Z+2	; 0x02
    1ec6:	d6 01       	movw	r26, r12
    1ec8:	18 96       	adiw	r26, 0x08	; 8
    1eca:	8c 93       	st	X, r24
    1ecc:	18 97       	sbiw	r26, 0x08	; 8
	HIDInterfaceInfo->State.HIDReportSize        = LE16_TO_CPU(HIDDescriptor->HIDReportLength);
    1ece:	f1 01       	movw	r30, r2
    1ed0:	87 81       	ldd	r24, Z+7	; 0x07
    1ed2:	90 85       	ldd	r25, Z+8	; 0x08
    1ed4:	51 96       	adiw	r26, 0x11	; 17
    1ed6:	9c 93       	st	X, r25
    1ed8:	8e 93       	st	-X, r24
    1eda:	50 97       	sbiw	r26, 0x10	; 16
	HIDInterfaceInfo->State.SupportsBootProtocol = (HIDInterface->SubClass != HID_CSCP_NonBootProtocol);
    1edc:	90 e0       	ldi	r25, 0x00	; 0
    1ede:	d2 01       	movw	r26, r4
    1ee0:	16 96       	adiw	r26, 0x06	; 6
    1ee2:	8c 91       	ld	r24, X
    1ee4:	81 11       	cpse	r24, r1
    1ee6:	91 e0       	ldi	r25, 0x01	; 1
    1ee8:	f6 01       	movw	r30, r12
    1eea:	95 87       	std	Z+13, r25	; 0x0d
	HIDInterfaceInfo->State.LargestReportSize    = 8;
    1eec:	88 e0       	ldi	r24, 0x08	; 8
    1eee:	82 8b       	std	Z+18, r24	; 0x12
	HIDInterfaceInfo->State.IsActive             = true;
    1ef0:	81 e0       	ldi	r24, 0x01	; 1
    1ef2:	87 83       	std	Z+7, r24	; 0x07
    1ef4:	80 e0       	ldi	r24, 0x00	; 0
    1ef6:	01 c0       	rjmp	.+2      	; 0x1efa <HID_Host_ConfigurePipes+0x1ac>

	return HID_ENUMERROR_NoError;
    1ef8:	82 e0       	ldi	r24, 0x02	; 2
}
    1efa:	0f 90       	pop	r0
    1efc:	0f 90       	pop	r0
    1efe:	0f 90       	pop	r0
    1f00:	0f 90       	pop	r0
    1f02:	cf 91       	pop	r28
    1f04:	df 91       	pop	r29
    1f06:	1f 91       	pop	r17
    1f08:	0f 91       	pop	r16
    1f0a:	ff 90       	pop	r15
    1f0c:	ef 90       	pop	r14
    1f0e:	df 90       	pop	r13
    1f10:	cf 90       	pop	r12
    1f12:	bf 90       	pop	r11
    1f14:	af 90       	pop	r10
    1f16:	9f 90       	pop	r9
    1f18:	8f 90       	pop	r8
    1f1a:	7f 90       	pop	r7
    1f1c:	6f 90       	pop	r6
    1f1e:	5f 90       	pop	r5
    1f20:	4f 90       	pop	r4
    1f22:	3f 90       	pop	r3
    1f24:	2f 90       	pop	r2
    1f26:	08 95       	ret

00001f28 <DCOMP_HID_Host_NextHIDInterfaceEndpoint>:
	else
	  return DESCRIPTOR_SEARCH_NotFound;
}

static uint8_t DCOMP_HID_Host_NextHIDInterfaceEndpoint(void* const CurrentDescriptor)
{
    1f28:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Endpoint)
    1f2a:	81 81       	ldd	r24, Z+1	; 0x01
    1f2c:	85 30       	cpi	r24, 0x05	; 5
    1f2e:	31 f4       	brne	.+12     	; 0x1f3c <DCOMP_HID_Host_NextHIDInterfaceEndpoint+0x14>
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		if (!(Pipe_IsEndpointBound(Endpoint->EndpointAddress)))
    1f30:	82 81       	ldd	r24, Z+2	; 0x02
    1f32:	0e 94 33 05 	call	0xa66	; 0xa66 <Pipe_IsEndpointBound>
    1f36:	88 23       	and	r24, r24
    1f38:	29 f4       	brne	.+10     	; 0x1f44 <DCOMP_HID_Host_NextHIDInterfaceEndpoint+0x1c>
    1f3a:	08 95       	ret
		  return DESCRIPTOR_SEARCH_Found;
	}
	else if (Header->Type == DTYPE_Interface)
    1f3c:	84 30       	cpi	r24, 0x04	; 4
    1f3e:	11 f4       	brne	.+4      	; 0x1f44 <DCOMP_HID_Host_NextHIDInterfaceEndpoint+0x1c>
    1f40:	81 e0       	ldi	r24, 0x01	; 1
    1f42:	08 95       	ret
    1f44:	82 e0       	ldi	r24, 0x02	; 2
	{
		return DESCRIPTOR_SEARCH_Fail;
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    1f46:	08 95       	ret

00001f48 <Serial_putchar>:

FILE USARTSerialStream;

int Serial_putchar(char DataByte,
                   FILE *Stream)
{
    1f48:	98 2f       	mov	r25, r24
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
    1f4a:	80 91 c8 00 	lds	r24, 0x00C8
    1f4e:	85 ff       	sbrs	r24, 5
    1f50:	fc cf       	rjmp	.-8      	; 0x1f4a <Serial_putchar+0x2>
				UDR1 = DataByte;
    1f52:	90 93 ce 00 	sts	0x00CE, r25
	(void)Stream;

	Serial_SendByte(DataByte);
	return 0;
}
    1f56:	80 e0       	ldi	r24, 0x00	; 0
    1f58:	90 e0       	ldi	r25, 0x00	; 0
    1f5a:	08 95       	ret

00001f5c <Serial_getchar>:
			 *  \return Boolean \c true if a character has been received, \c false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    1f5c:	80 91 c8 00 	lds	r24, 0x00C8

int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    1f60:	87 fd       	sbrc	r24, 7
    1f62:	03 c0       	rjmp	.+6      	; 0x1f6a <Serial_getchar+0xe>
    1f64:	2e ef       	ldi	r18, 0xFE	; 254
    1f66:	3f ef       	ldi	r19, 0xFF	; 255
    1f68:	0b c0       	rjmp	.+22     	; 0x1f80 <Serial_getchar+0x24>
    1f6a:	80 91 c8 00 	lds	r24, 0x00C8
			 *  \return Next byte received from the USART, or a negative value if no byte has been received.
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
    1f6e:	87 fd       	sbrc	r24, 7
    1f70:	03 c0       	rjmp	.+6      	; 0x1f78 <Serial_getchar+0x1c>
    1f72:	2f ef       	ldi	r18, 0xFF	; 255
    1f74:	3f ef       	ldi	r19, 0xFF	; 255
    1f76:	04 c0       	rjmp	.+8      	; 0x1f80 <Serial_getchar+0x24>
				  return -1;
				
				return UDR1;
    1f78:	80 91 ce 00 	lds	r24, 0x00CE
    1f7c:	28 2f       	mov	r18, r24
    1f7e:	30 e0       	ldi	r19, 0x00	; 0
	  return _FDEV_EOF;

	return Serial_ReceiveByte();
}
    1f80:	c9 01       	movw	r24, r18
    1f82:	08 95       	ret

00001f84 <fputc>:
    1f84:	0f 93       	push	r16
    1f86:	1f 93       	push	r17
    1f88:	cf 93       	push	r28
    1f8a:	df 93       	push	r29
    1f8c:	8c 01       	movw	r16, r24
    1f8e:	eb 01       	movw	r28, r22
    1f90:	8b 81       	ldd	r24, Y+3	; 0x03
    1f92:	81 ff       	sbrs	r24, 1
    1f94:	1b c0       	rjmp	.+54     	; 0x1fcc <fputc+0x48>
    1f96:	82 ff       	sbrs	r24, 2
    1f98:	0d c0       	rjmp	.+26     	; 0x1fb4 <fputc+0x30>
    1f9a:	2e 81       	ldd	r18, Y+6	; 0x06
    1f9c:	3f 81       	ldd	r19, Y+7	; 0x07
    1f9e:	8c 81       	ldd	r24, Y+4	; 0x04
    1fa0:	9d 81       	ldd	r25, Y+5	; 0x05
    1fa2:	28 17       	cp	r18, r24
    1fa4:	39 07       	cpc	r19, r25
    1fa6:	64 f4       	brge	.+24     	; 0x1fc0 <fputc+0x3c>
    1fa8:	e8 81       	ld	r30, Y
    1faa:	f9 81       	ldd	r31, Y+1	; 0x01
    1fac:	01 93       	st	Z+, r16
    1fae:	f9 83       	std	Y+1, r31	; 0x01
    1fb0:	e8 83       	st	Y, r30
    1fb2:	06 c0       	rjmp	.+12     	; 0x1fc0 <fputc+0x3c>
    1fb4:	e8 85       	ldd	r30, Y+8	; 0x08
    1fb6:	f9 85       	ldd	r31, Y+9	; 0x09
    1fb8:	80 2f       	mov	r24, r16
    1fba:	09 95       	icall
    1fbc:	89 2b       	or	r24, r25
    1fbe:	31 f4       	brne	.+12     	; 0x1fcc <fputc+0x48>
    1fc0:	8e 81       	ldd	r24, Y+6	; 0x06
    1fc2:	9f 81       	ldd	r25, Y+7	; 0x07
    1fc4:	01 96       	adiw	r24, 0x01	; 1
    1fc6:	9f 83       	std	Y+7, r25	; 0x07
    1fc8:	8e 83       	std	Y+6, r24	; 0x06
    1fca:	02 c0       	rjmp	.+4      	; 0x1fd0 <fputc+0x4c>
    1fcc:	0f ef       	ldi	r16, 0xFF	; 255
    1fce:	1f ef       	ldi	r17, 0xFF	; 255
    1fd0:	c8 01       	movw	r24, r16
    1fd2:	df 91       	pop	r29
    1fd4:	cf 91       	pop	r28
    1fd6:	1f 91       	pop	r17
    1fd8:	0f 91       	pop	r16
    1fda:	08 95       	ret

00001fdc <printf_P>:
    1fdc:	df 93       	push	r29
    1fde:	cf 93       	push	r28
    1fe0:	cd b7       	in	r28, 0x3d	; 61
    1fe2:	de b7       	in	r29, 0x3e	; 62
    1fe4:	fe 01       	movw	r30, r28
    1fe6:	35 96       	adiw	r30, 0x05	; 5
    1fe8:	61 91       	ld	r22, Z+
    1fea:	71 91       	ld	r23, Z+
    1fec:	a0 91 1b 05 	lds	r26, 0x051B
    1ff0:	b0 91 1c 05 	lds	r27, 0x051C
    1ff4:	13 96       	adiw	r26, 0x03	; 3
    1ff6:	8c 91       	ld	r24, X
    1ff8:	13 97       	sbiw	r26, 0x03	; 3
    1ffa:	88 60       	ori	r24, 0x08	; 8
    1ffc:	13 96       	adiw	r26, 0x03	; 3
    1ffe:	8c 93       	st	X, r24
    2000:	80 91 1b 05 	lds	r24, 0x051B
    2004:	90 91 1c 05 	lds	r25, 0x051C
    2008:	af 01       	movw	r20, r30
    200a:	3f d0       	rcall	.+126    	; 0x208a <vfprintf>
    200c:	e0 91 1b 05 	lds	r30, 0x051B
    2010:	f0 91 1c 05 	lds	r31, 0x051C
    2014:	23 81       	ldd	r18, Z+3	; 0x03
    2016:	27 7f       	andi	r18, 0xF7	; 247
    2018:	23 83       	std	Z+3, r18	; 0x03
    201a:	cf 91       	pop	r28
    201c:	df 91       	pop	r29
    201e:	08 95       	ret

00002020 <puts_P>:
    2020:	0f 93       	push	r16
    2022:	1f 93       	push	r17
    2024:	cf 93       	push	r28
    2026:	df 93       	push	r29
    2028:	ec 01       	movw	r28, r24
    202a:	e0 91 1b 05 	lds	r30, 0x051B
    202e:	f0 91 1c 05 	lds	r31, 0x051C
    2032:	83 81       	ldd	r24, Z+3	; 0x03
    2034:	81 ff       	sbrs	r24, 1
    2036:	21 c0       	rjmp	.+66     	; 0x207a <puts_P+0x5a>
    2038:	00 e0       	ldi	r16, 0x00	; 0
    203a:	10 e0       	ldi	r17, 0x00	; 0
    203c:	0e c0       	rjmp	.+28     	; 0x205a <puts_P+0x3a>
    203e:	e0 91 1b 05 	lds	r30, 0x051B
    2042:	f0 91 1c 05 	lds	r31, 0x051C
    2046:	20 85       	ldd	r18, Z+8	; 0x08
    2048:	31 85       	ldd	r19, Z+9	; 0x09
    204a:	bf 01       	movw	r22, r30
    204c:	f9 01       	movw	r30, r18
    204e:	09 95       	icall
    2050:	89 2b       	or	r24, r25
    2052:	11 f0       	breq	.+4      	; 0x2058 <puts_P+0x38>
    2054:	0f ef       	ldi	r16, 0xFF	; 255
    2056:	1f ef       	ldi	r17, 0xFF	; 255
    2058:	21 96       	adiw	r28, 0x01	; 1
    205a:	fe 01       	movw	r30, r28
    205c:	84 91       	lpm	r24, Z+
    205e:	88 23       	and	r24, r24
    2060:	71 f7       	brne	.-36     	; 0x203e <puts_P+0x1e>
    2062:	e0 91 1b 05 	lds	r30, 0x051B
    2066:	f0 91 1c 05 	lds	r31, 0x051C
    206a:	20 85       	ldd	r18, Z+8	; 0x08
    206c:	31 85       	ldd	r19, Z+9	; 0x09
    206e:	8a e0       	ldi	r24, 0x0A	; 10
    2070:	bf 01       	movw	r22, r30
    2072:	f9 01       	movw	r30, r18
    2074:	09 95       	icall
    2076:	89 2b       	or	r24, r25
    2078:	11 f0       	breq	.+4      	; 0x207e <puts_P+0x5e>
    207a:	0f ef       	ldi	r16, 0xFF	; 255
    207c:	1f ef       	ldi	r17, 0xFF	; 255
    207e:	c8 01       	movw	r24, r16
    2080:	df 91       	pop	r29
    2082:	cf 91       	pop	r28
    2084:	1f 91       	pop	r17
    2086:	0f 91       	pop	r16
    2088:	08 95       	ret

0000208a <vfprintf>:
    208a:	2f 92       	push	r2
    208c:	3f 92       	push	r3
    208e:	4f 92       	push	r4
    2090:	5f 92       	push	r5
    2092:	6f 92       	push	r6
    2094:	7f 92       	push	r7
    2096:	8f 92       	push	r8
    2098:	9f 92       	push	r9
    209a:	af 92       	push	r10
    209c:	bf 92       	push	r11
    209e:	cf 92       	push	r12
    20a0:	df 92       	push	r13
    20a2:	ef 92       	push	r14
    20a4:	ff 92       	push	r15
    20a6:	0f 93       	push	r16
    20a8:	1f 93       	push	r17
    20aa:	df 93       	push	r29
    20ac:	cf 93       	push	r28
    20ae:	cd b7       	in	r28, 0x3d	; 61
    20b0:	de b7       	in	r29, 0x3e	; 62
    20b2:	2b 97       	sbiw	r28, 0x0b	; 11
    20b4:	0f b6       	in	r0, 0x3f	; 63
    20b6:	f8 94       	cli
    20b8:	de bf       	out	0x3e, r29	; 62
    20ba:	0f be       	out	0x3f, r0	; 63
    20bc:	cd bf       	out	0x3d, r28	; 61
    20be:	3c 01       	movw	r6, r24
    20c0:	2b 01       	movw	r4, r22
    20c2:	5a 01       	movw	r10, r20
    20c4:	fc 01       	movw	r30, r24
    20c6:	17 82       	std	Z+7, r1	; 0x07
    20c8:	16 82       	std	Z+6, r1	; 0x06
    20ca:	83 81       	ldd	r24, Z+3	; 0x03
    20cc:	81 fd       	sbrc	r24, 1
    20ce:	03 c0       	rjmp	.+6      	; 0x20d6 <vfprintf+0x4c>
    20d0:	6f ef       	ldi	r22, 0xFF	; 255
    20d2:	7f ef       	ldi	r23, 0xFF	; 255
    20d4:	b9 c1       	rjmp	.+882    	; 0x2448 <__stack+0x349>
    20d6:	9a e0       	ldi	r25, 0x0A	; 10
    20d8:	89 2e       	mov	r8, r25
    20da:	1e 01       	movw	r2, r28
    20dc:	08 94       	sec
    20de:	21 1c       	adc	r2, r1
    20e0:	31 1c       	adc	r3, r1
    20e2:	f3 01       	movw	r30, r6
    20e4:	23 81       	ldd	r18, Z+3	; 0x03
    20e6:	f2 01       	movw	r30, r4
    20e8:	23 fd       	sbrc	r18, 3
    20ea:	85 91       	lpm	r24, Z+
    20ec:	23 ff       	sbrs	r18, 3
    20ee:	81 91       	ld	r24, Z+
    20f0:	2f 01       	movw	r4, r30
    20f2:	88 23       	and	r24, r24
    20f4:	09 f4       	brne	.+2      	; 0x20f8 <vfprintf+0x6e>
    20f6:	a5 c1       	rjmp	.+842    	; 0x2442 <__stack+0x343>
    20f8:	85 32       	cpi	r24, 0x25	; 37
    20fa:	39 f4       	brne	.+14     	; 0x210a <__stack+0xb>
    20fc:	23 fd       	sbrc	r18, 3
    20fe:	85 91       	lpm	r24, Z+
    2100:	23 ff       	sbrs	r18, 3
    2102:	81 91       	ld	r24, Z+
    2104:	2f 01       	movw	r4, r30
    2106:	85 32       	cpi	r24, 0x25	; 37
    2108:	21 f4       	brne	.+8      	; 0x2112 <__stack+0x13>
    210a:	90 e0       	ldi	r25, 0x00	; 0
    210c:	b3 01       	movw	r22, r6
    210e:	3a df       	rcall	.-396    	; 0x1f84 <fputc>
    2110:	e8 cf       	rjmp	.-48     	; 0x20e2 <vfprintf+0x58>
    2112:	98 2f       	mov	r25, r24
    2114:	ff 24       	eor	r15, r15
    2116:	ee 24       	eor	r14, r14
    2118:	99 24       	eor	r9, r9
    211a:	ff e1       	ldi	r31, 0x1F	; 31
    211c:	ff 15       	cp	r31, r15
    211e:	d0 f0       	brcs	.+52     	; 0x2154 <__stack+0x55>
    2120:	9b 32       	cpi	r25, 0x2B	; 43
    2122:	69 f0       	breq	.+26     	; 0x213e <__stack+0x3f>
    2124:	9c 32       	cpi	r25, 0x2C	; 44
    2126:	28 f4       	brcc	.+10     	; 0x2132 <__stack+0x33>
    2128:	90 32       	cpi	r25, 0x20	; 32
    212a:	59 f0       	breq	.+22     	; 0x2142 <__stack+0x43>
    212c:	93 32       	cpi	r25, 0x23	; 35
    212e:	91 f4       	brne	.+36     	; 0x2154 <__stack+0x55>
    2130:	0e c0       	rjmp	.+28     	; 0x214e <__stack+0x4f>
    2132:	9d 32       	cpi	r25, 0x2D	; 45
    2134:	49 f0       	breq	.+18     	; 0x2148 <__stack+0x49>
    2136:	90 33       	cpi	r25, 0x30	; 48
    2138:	69 f4       	brne	.+26     	; 0x2154 <__stack+0x55>
    213a:	41 e0       	ldi	r20, 0x01	; 1
    213c:	24 c0       	rjmp	.+72     	; 0x2186 <__stack+0x87>
    213e:	52 e0       	ldi	r21, 0x02	; 2
    2140:	f5 2a       	or	r15, r21
    2142:	84 e0       	ldi	r24, 0x04	; 4
    2144:	f8 2a       	or	r15, r24
    2146:	28 c0       	rjmp	.+80     	; 0x2198 <__stack+0x99>
    2148:	98 e0       	ldi	r25, 0x08	; 8
    214a:	f9 2a       	or	r15, r25
    214c:	25 c0       	rjmp	.+74     	; 0x2198 <__stack+0x99>
    214e:	e0 e1       	ldi	r30, 0x10	; 16
    2150:	fe 2a       	or	r15, r30
    2152:	22 c0       	rjmp	.+68     	; 0x2198 <__stack+0x99>
    2154:	f7 fc       	sbrc	r15, 7
    2156:	29 c0       	rjmp	.+82     	; 0x21aa <__stack+0xab>
    2158:	89 2f       	mov	r24, r25
    215a:	80 53       	subi	r24, 0x30	; 48
    215c:	8a 30       	cpi	r24, 0x0A	; 10
    215e:	70 f4       	brcc	.+28     	; 0x217c <__stack+0x7d>
    2160:	f6 fe       	sbrs	r15, 6
    2162:	05 c0       	rjmp	.+10     	; 0x216e <__stack+0x6f>
    2164:	98 9c       	mul	r9, r8
    2166:	90 2c       	mov	r9, r0
    2168:	11 24       	eor	r1, r1
    216a:	98 0e       	add	r9, r24
    216c:	15 c0       	rjmp	.+42     	; 0x2198 <__stack+0x99>
    216e:	e8 9c       	mul	r14, r8
    2170:	e0 2c       	mov	r14, r0
    2172:	11 24       	eor	r1, r1
    2174:	e8 0e       	add	r14, r24
    2176:	f0 e2       	ldi	r31, 0x20	; 32
    2178:	ff 2a       	or	r15, r31
    217a:	0e c0       	rjmp	.+28     	; 0x2198 <__stack+0x99>
    217c:	9e 32       	cpi	r25, 0x2E	; 46
    217e:	29 f4       	brne	.+10     	; 0x218a <__stack+0x8b>
    2180:	f6 fc       	sbrc	r15, 6
    2182:	5f c1       	rjmp	.+702    	; 0x2442 <__stack+0x343>
    2184:	40 e4       	ldi	r20, 0x40	; 64
    2186:	f4 2a       	or	r15, r20
    2188:	07 c0       	rjmp	.+14     	; 0x2198 <__stack+0x99>
    218a:	9c 36       	cpi	r25, 0x6C	; 108
    218c:	19 f4       	brne	.+6      	; 0x2194 <__stack+0x95>
    218e:	50 e8       	ldi	r21, 0x80	; 128
    2190:	f5 2a       	or	r15, r21
    2192:	02 c0       	rjmp	.+4      	; 0x2198 <__stack+0x99>
    2194:	98 36       	cpi	r25, 0x68	; 104
    2196:	49 f4       	brne	.+18     	; 0x21aa <__stack+0xab>
    2198:	f2 01       	movw	r30, r4
    219a:	23 fd       	sbrc	r18, 3
    219c:	95 91       	lpm	r25, Z+
    219e:	23 ff       	sbrs	r18, 3
    21a0:	91 91       	ld	r25, Z+
    21a2:	2f 01       	movw	r4, r30
    21a4:	99 23       	and	r25, r25
    21a6:	09 f0       	breq	.+2      	; 0x21aa <__stack+0xab>
    21a8:	b8 cf       	rjmp	.-144    	; 0x211a <__stack+0x1b>
    21aa:	89 2f       	mov	r24, r25
    21ac:	85 54       	subi	r24, 0x45	; 69
    21ae:	83 30       	cpi	r24, 0x03	; 3
    21b0:	18 f0       	brcs	.+6      	; 0x21b8 <__stack+0xb9>
    21b2:	80 52       	subi	r24, 0x20	; 32
    21b4:	83 30       	cpi	r24, 0x03	; 3
    21b6:	38 f4       	brcc	.+14     	; 0x21c6 <__stack+0xc7>
    21b8:	44 e0       	ldi	r20, 0x04	; 4
    21ba:	50 e0       	ldi	r21, 0x00	; 0
    21bc:	a4 0e       	add	r10, r20
    21be:	b5 1e       	adc	r11, r21
    21c0:	5f e3       	ldi	r21, 0x3F	; 63
    21c2:	59 83       	std	Y+1, r21	; 0x01
    21c4:	0f c0       	rjmp	.+30     	; 0x21e4 <__stack+0xe5>
    21c6:	93 36       	cpi	r25, 0x63	; 99
    21c8:	31 f0       	breq	.+12     	; 0x21d6 <__stack+0xd7>
    21ca:	93 37       	cpi	r25, 0x73	; 115
    21cc:	79 f0       	breq	.+30     	; 0x21ec <__stack+0xed>
    21ce:	93 35       	cpi	r25, 0x53	; 83
    21d0:	09 f0       	breq	.+2      	; 0x21d4 <__stack+0xd5>
    21d2:	52 c0       	rjmp	.+164    	; 0x2278 <__stack+0x179>
    21d4:	1f c0       	rjmp	.+62     	; 0x2214 <__stack+0x115>
    21d6:	f5 01       	movw	r30, r10
    21d8:	80 81       	ld	r24, Z
    21da:	89 83       	std	Y+1, r24	; 0x01
    21dc:	42 e0       	ldi	r20, 0x02	; 2
    21de:	50 e0       	ldi	r21, 0x00	; 0
    21e0:	a4 0e       	add	r10, r20
    21e2:	b5 1e       	adc	r11, r21
    21e4:	61 01       	movw	r12, r2
    21e6:	01 e0       	ldi	r16, 0x01	; 1
    21e8:	10 e0       	ldi	r17, 0x00	; 0
    21ea:	11 c0       	rjmp	.+34     	; 0x220e <__stack+0x10f>
    21ec:	f5 01       	movw	r30, r10
    21ee:	c0 80       	ld	r12, Z
    21f0:	d1 80       	ldd	r13, Z+1	; 0x01
    21f2:	f6 fc       	sbrc	r15, 6
    21f4:	03 c0       	rjmp	.+6      	; 0x21fc <__stack+0xfd>
    21f6:	6f ef       	ldi	r22, 0xFF	; 255
    21f8:	7f ef       	ldi	r23, 0xFF	; 255
    21fa:	02 c0       	rjmp	.+4      	; 0x2200 <__stack+0x101>
    21fc:	69 2d       	mov	r22, r9
    21fe:	70 e0       	ldi	r23, 0x00	; 0
    2200:	42 e0       	ldi	r20, 0x02	; 2
    2202:	50 e0       	ldi	r21, 0x00	; 0
    2204:	a4 0e       	add	r10, r20
    2206:	b5 1e       	adc	r11, r21
    2208:	c6 01       	movw	r24, r12
    220a:	43 d1       	rcall	.+646    	; 0x2492 <strnlen>
    220c:	8c 01       	movw	r16, r24
    220e:	5f e7       	ldi	r21, 0x7F	; 127
    2210:	f5 22       	and	r15, r21
    2212:	13 c0       	rjmp	.+38     	; 0x223a <__stack+0x13b>
    2214:	f5 01       	movw	r30, r10
    2216:	c0 80       	ld	r12, Z
    2218:	d1 80       	ldd	r13, Z+1	; 0x01
    221a:	f6 fc       	sbrc	r15, 6
    221c:	03 c0       	rjmp	.+6      	; 0x2224 <__stack+0x125>
    221e:	6f ef       	ldi	r22, 0xFF	; 255
    2220:	7f ef       	ldi	r23, 0xFF	; 255
    2222:	02 c0       	rjmp	.+4      	; 0x2228 <__stack+0x129>
    2224:	69 2d       	mov	r22, r9
    2226:	70 e0       	ldi	r23, 0x00	; 0
    2228:	42 e0       	ldi	r20, 0x02	; 2
    222a:	50 e0       	ldi	r21, 0x00	; 0
    222c:	a4 0e       	add	r10, r20
    222e:	b5 1e       	adc	r11, r21
    2230:	c6 01       	movw	r24, r12
    2232:	24 d1       	rcall	.+584    	; 0x247c <strnlen_P>
    2234:	8c 01       	movw	r16, r24
    2236:	50 e8       	ldi	r21, 0x80	; 128
    2238:	f5 2a       	or	r15, r21
    223a:	f3 fe       	sbrs	r15, 3
    223c:	06 c0       	rjmp	.+12     	; 0x224a <__stack+0x14b>
    223e:	18 c0       	rjmp	.+48     	; 0x2270 <__stack+0x171>
    2240:	80 e2       	ldi	r24, 0x20	; 32
    2242:	90 e0       	ldi	r25, 0x00	; 0
    2244:	b3 01       	movw	r22, r6
    2246:	9e de       	rcall	.-708    	; 0x1f84 <fputc>
    2248:	ea 94       	dec	r14
    224a:	8e 2d       	mov	r24, r14
    224c:	90 e0       	ldi	r25, 0x00	; 0
    224e:	08 17       	cp	r16, r24
    2250:	19 07       	cpc	r17, r25
    2252:	b0 f3       	brcs	.-20     	; 0x2240 <__stack+0x141>
    2254:	0d c0       	rjmp	.+26     	; 0x2270 <__stack+0x171>
    2256:	f6 01       	movw	r30, r12
    2258:	f7 fc       	sbrc	r15, 7
    225a:	85 91       	lpm	r24, Z+
    225c:	f7 fe       	sbrs	r15, 7
    225e:	81 91       	ld	r24, Z+
    2260:	6f 01       	movw	r12, r30
    2262:	90 e0       	ldi	r25, 0x00	; 0
    2264:	b3 01       	movw	r22, r6
    2266:	8e de       	rcall	.-740    	; 0x1f84 <fputc>
    2268:	e1 10       	cpse	r14, r1
    226a:	ea 94       	dec	r14
    226c:	01 50       	subi	r16, 0x01	; 1
    226e:	10 40       	sbci	r17, 0x00	; 0
    2270:	01 15       	cp	r16, r1
    2272:	11 05       	cpc	r17, r1
    2274:	81 f7       	brne	.-32     	; 0x2256 <__stack+0x157>
    2276:	e2 c0       	rjmp	.+452    	; 0x243c <__stack+0x33d>
    2278:	94 36       	cpi	r25, 0x64	; 100
    227a:	11 f0       	breq	.+4      	; 0x2280 <__stack+0x181>
    227c:	99 36       	cpi	r25, 0x69	; 105
    227e:	61 f5       	brne	.+88     	; 0x22d8 <__stack+0x1d9>
    2280:	f7 fe       	sbrs	r15, 7
    2282:	08 c0       	rjmp	.+16     	; 0x2294 <__stack+0x195>
    2284:	f5 01       	movw	r30, r10
    2286:	20 81       	ld	r18, Z
    2288:	31 81       	ldd	r19, Z+1	; 0x01
    228a:	42 81       	ldd	r20, Z+2	; 0x02
    228c:	53 81       	ldd	r21, Z+3	; 0x03
    228e:	84 e0       	ldi	r24, 0x04	; 4
    2290:	90 e0       	ldi	r25, 0x00	; 0
    2292:	0a c0       	rjmp	.+20     	; 0x22a8 <__stack+0x1a9>
    2294:	f5 01       	movw	r30, r10
    2296:	80 81       	ld	r24, Z
    2298:	91 81       	ldd	r25, Z+1	; 0x01
    229a:	9c 01       	movw	r18, r24
    229c:	44 27       	eor	r20, r20
    229e:	37 fd       	sbrc	r19, 7
    22a0:	40 95       	com	r20
    22a2:	54 2f       	mov	r21, r20
    22a4:	82 e0       	ldi	r24, 0x02	; 2
    22a6:	90 e0       	ldi	r25, 0x00	; 0
    22a8:	a8 0e       	add	r10, r24
    22aa:	b9 1e       	adc	r11, r25
    22ac:	9f e6       	ldi	r25, 0x6F	; 111
    22ae:	f9 22       	and	r15, r25
    22b0:	57 ff       	sbrs	r21, 7
    22b2:	09 c0       	rjmp	.+18     	; 0x22c6 <__stack+0x1c7>
    22b4:	50 95       	com	r21
    22b6:	40 95       	com	r20
    22b8:	30 95       	com	r19
    22ba:	21 95       	neg	r18
    22bc:	3f 4f       	sbci	r19, 0xFF	; 255
    22be:	4f 4f       	sbci	r20, 0xFF	; 255
    22c0:	5f 4f       	sbci	r21, 0xFF	; 255
    22c2:	e0 e8       	ldi	r30, 0x80	; 128
    22c4:	fe 2a       	or	r15, r30
    22c6:	ca 01       	movw	r24, r20
    22c8:	b9 01       	movw	r22, r18
    22ca:	a1 01       	movw	r20, r2
    22cc:	2a e0       	ldi	r18, 0x0A	; 10
    22ce:	30 e0       	ldi	r19, 0x00	; 0
    22d0:	eb d0       	rcall	.+470    	; 0x24a8 <__ultoa_invert>
    22d2:	d8 2e       	mov	r13, r24
    22d4:	d2 18       	sub	r13, r2
    22d6:	3f c0       	rjmp	.+126    	; 0x2356 <__stack+0x257>
    22d8:	95 37       	cpi	r25, 0x75	; 117
    22da:	29 f4       	brne	.+10     	; 0x22e6 <__stack+0x1e7>
    22dc:	1f 2d       	mov	r17, r15
    22de:	1f 7e       	andi	r17, 0xEF	; 239
    22e0:	2a e0       	ldi	r18, 0x0A	; 10
    22e2:	30 e0       	ldi	r19, 0x00	; 0
    22e4:	1d c0       	rjmp	.+58     	; 0x2320 <__stack+0x221>
    22e6:	1f 2d       	mov	r17, r15
    22e8:	19 7f       	andi	r17, 0xF9	; 249
    22ea:	9f 36       	cpi	r25, 0x6F	; 111
    22ec:	61 f0       	breq	.+24     	; 0x2306 <__stack+0x207>
    22ee:	90 37       	cpi	r25, 0x70	; 112
    22f0:	20 f4       	brcc	.+8      	; 0x22fa <__stack+0x1fb>
    22f2:	98 35       	cpi	r25, 0x58	; 88
    22f4:	09 f0       	breq	.+2      	; 0x22f8 <__stack+0x1f9>
    22f6:	a5 c0       	rjmp	.+330    	; 0x2442 <__stack+0x343>
    22f8:	0f c0       	rjmp	.+30     	; 0x2318 <__stack+0x219>
    22fa:	90 37       	cpi	r25, 0x70	; 112
    22fc:	39 f0       	breq	.+14     	; 0x230c <__stack+0x20d>
    22fe:	98 37       	cpi	r25, 0x78	; 120
    2300:	09 f0       	breq	.+2      	; 0x2304 <__stack+0x205>
    2302:	9f c0       	rjmp	.+318    	; 0x2442 <__stack+0x343>
    2304:	04 c0       	rjmp	.+8      	; 0x230e <__stack+0x20f>
    2306:	28 e0       	ldi	r18, 0x08	; 8
    2308:	30 e0       	ldi	r19, 0x00	; 0
    230a:	0a c0       	rjmp	.+20     	; 0x2320 <__stack+0x221>
    230c:	10 61       	ori	r17, 0x10	; 16
    230e:	14 fd       	sbrc	r17, 4
    2310:	14 60       	ori	r17, 0x04	; 4
    2312:	20 e1       	ldi	r18, 0x10	; 16
    2314:	30 e0       	ldi	r19, 0x00	; 0
    2316:	04 c0       	rjmp	.+8      	; 0x2320 <__stack+0x221>
    2318:	14 fd       	sbrc	r17, 4
    231a:	16 60       	ori	r17, 0x06	; 6
    231c:	20 e1       	ldi	r18, 0x10	; 16
    231e:	32 e0       	ldi	r19, 0x02	; 2
    2320:	17 ff       	sbrs	r17, 7
    2322:	08 c0       	rjmp	.+16     	; 0x2334 <__stack+0x235>
    2324:	f5 01       	movw	r30, r10
    2326:	60 81       	ld	r22, Z
    2328:	71 81       	ldd	r23, Z+1	; 0x01
    232a:	82 81       	ldd	r24, Z+2	; 0x02
    232c:	93 81       	ldd	r25, Z+3	; 0x03
    232e:	44 e0       	ldi	r20, 0x04	; 4
    2330:	50 e0       	ldi	r21, 0x00	; 0
    2332:	08 c0       	rjmp	.+16     	; 0x2344 <__stack+0x245>
    2334:	f5 01       	movw	r30, r10
    2336:	80 81       	ld	r24, Z
    2338:	91 81       	ldd	r25, Z+1	; 0x01
    233a:	bc 01       	movw	r22, r24
    233c:	80 e0       	ldi	r24, 0x00	; 0
    233e:	90 e0       	ldi	r25, 0x00	; 0
    2340:	42 e0       	ldi	r20, 0x02	; 2
    2342:	50 e0       	ldi	r21, 0x00	; 0
    2344:	a4 0e       	add	r10, r20
    2346:	b5 1e       	adc	r11, r21
    2348:	a1 01       	movw	r20, r2
    234a:	ae d0       	rcall	.+348    	; 0x24a8 <__ultoa_invert>
    234c:	d8 2e       	mov	r13, r24
    234e:	d2 18       	sub	r13, r2
    2350:	8f e7       	ldi	r24, 0x7F	; 127
    2352:	f8 2e       	mov	r15, r24
    2354:	f1 22       	and	r15, r17
    2356:	f6 fe       	sbrs	r15, 6
    2358:	0b c0       	rjmp	.+22     	; 0x2370 <__stack+0x271>
    235a:	5e ef       	ldi	r21, 0xFE	; 254
    235c:	f5 22       	and	r15, r21
    235e:	d9 14       	cp	r13, r9
    2360:	38 f4       	brcc	.+14     	; 0x2370 <__stack+0x271>
    2362:	f4 fe       	sbrs	r15, 4
    2364:	07 c0       	rjmp	.+14     	; 0x2374 <__stack+0x275>
    2366:	f2 fc       	sbrc	r15, 2
    2368:	05 c0       	rjmp	.+10     	; 0x2374 <__stack+0x275>
    236a:	8f ee       	ldi	r24, 0xEF	; 239
    236c:	f8 22       	and	r15, r24
    236e:	02 c0       	rjmp	.+4      	; 0x2374 <__stack+0x275>
    2370:	1d 2d       	mov	r17, r13
    2372:	01 c0       	rjmp	.+2      	; 0x2376 <__stack+0x277>
    2374:	19 2d       	mov	r17, r9
    2376:	f4 fe       	sbrs	r15, 4
    2378:	0d c0       	rjmp	.+26     	; 0x2394 <__stack+0x295>
    237a:	fe 01       	movw	r30, r28
    237c:	ed 0d       	add	r30, r13
    237e:	f1 1d       	adc	r31, r1
    2380:	80 81       	ld	r24, Z
    2382:	80 33       	cpi	r24, 0x30	; 48
    2384:	19 f4       	brne	.+6      	; 0x238c <__stack+0x28d>
    2386:	99 ee       	ldi	r25, 0xE9	; 233
    2388:	f9 22       	and	r15, r25
    238a:	08 c0       	rjmp	.+16     	; 0x239c <__stack+0x29d>
    238c:	1f 5f       	subi	r17, 0xFF	; 255
    238e:	f2 fe       	sbrs	r15, 2
    2390:	05 c0       	rjmp	.+10     	; 0x239c <__stack+0x29d>
    2392:	03 c0       	rjmp	.+6      	; 0x239a <__stack+0x29b>
    2394:	8f 2d       	mov	r24, r15
    2396:	86 78       	andi	r24, 0x86	; 134
    2398:	09 f0       	breq	.+2      	; 0x239c <__stack+0x29d>
    239a:	1f 5f       	subi	r17, 0xFF	; 255
    239c:	0f 2d       	mov	r16, r15
    239e:	f3 fc       	sbrc	r15, 3
    23a0:	13 c0       	rjmp	.+38     	; 0x23c8 <__stack+0x2c9>
    23a2:	f0 fe       	sbrs	r15, 0
    23a4:	0e c0       	rjmp	.+28     	; 0x23c2 <__stack+0x2c3>
    23a6:	1e 15       	cp	r17, r14
    23a8:	10 f0       	brcs	.+4      	; 0x23ae <__stack+0x2af>
    23aa:	9d 2c       	mov	r9, r13
    23ac:	0a c0       	rjmp	.+20     	; 0x23c2 <__stack+0x2c3>
    23ae:	9d 2c       	mov	r9, r13
    23b0:	9e 0c       	add	r9, r14
    23b2:	91 1a       	sub	r9, r17
    23b4:	1e 2d       	mov	r17, r14
    23b6:	05 c0       	rjmp	.+10     	; 0x23c2 <__stack+0x2c3>
    23b8:	80 e2       	ldi	r24, 0x20	; 32
    23ba:	90 e0       	ldi	r25, 0x00	; 0
    23bc:	b3 01       	movw	r22, r6
    23be:	e2 dd       	rcall	.-1084   	; 0x1f84 <fputc>
    23c0:	1f 5f       	subi	r17, 0xFF	; 255
    23c2:	1e 15       	cp	r17, r14
    23c4:	c8 f3       	brcs	.-14     	; 0x23b8 <__stack+0x2b9>
    23c6:	04 c0       	rjmp	.+8      	; 0x23d0 <__stack+0x2d1>
    23c8:	1e 15       	cp	r17, r14
    23ca:	10 f4       	brcc	.+4      	; 0x23d0 <__stack+0x2d1>
    23cc:	e1 1a       	sub	r14, r17
    23ce:	01 c0       	rjmp	.+2      	; 0x23d2 <__stack+0x2d3>
    23d0:	ee 24       	eor	r14, r14
    23d2:	04 ff       	sbrs	r16, 4
    23d4:	0e c0       	rjmp	.+28     	; 0x23f2 <__stack+0x2f3>
    23d6:	80 e3       	ldi	r24, 0x30	; 48
    23d8:	90 e0       	ldi	r25, 0x00	; 0
    23da:	b3 01       	movw	r22, r6
    23dc:	d3 dd       	rcall	.-1114   	; 0x1f84 <fputc>
    23de:	02 ff       	sbrs	r16, 2
    23e0:	1b c0       	rjmp	.+54     	; 0x2418 <__stack+0x319>
    23e2:	01 fd       	sbrc	r16, 1
    23e4:	03 c0       	rjmp	.+6      	; 0x23ec <__stack+0x2ed>
    23e6:	88 e7       	ldi	r24, 0x78	; 120
    23e8:	90 e0       	ldi	r25, 0x00	; 0
    23ea:	0e c0       	rjmp	.+28     	; 0x2408 <__stack+0x309>
    23ec:	88 e5       	ldi	r24, 0x58	; 88
    23ee:	90 e0       	ldi	r25, 0x00	; 0
    23f0:	0b c0       	rjmp	.+22     	; 0x2408 <__stack+0x309>
    23f2:	80 2f       	mov	r24, r16
    23f4:	86 78       	andi	r24, 0x86	; 134
    23f6:	81 f0       	breq	.+32     	; 0x2418 <__stack+0x319>
    23f8:	01 ff       	sbrs	r16, 1
    23fa:	02 c0       	rjmp	.+4      	; 0x2400 <__stack+0x301>
    23fc:	8b e2       	ldi	r24, 0x2B	; 43
    23fe:	01 c0       	rjmp	.+2      	; 0x2402 <__stack+0x303>
    2400:	80 e2       	ldi	r24, 0x20	; 32
    2402:	f7 fc       	sbrc	r15, 7
    2404:	8d e2       	ldi	r24, 0x2D	; 45
    2406:	90 e0       	ldi	r25, 0x00	; 0
    2408:	b3 01       	movw	r22, r6
    240a:	bc dd       	rcall	.-1160   	; 0x1f84 <fputc>
    240c:	05 c0       	rjmp	.+10     	; 0x2418 <__stack+0x319>
    240e:	80 e3       	ldi	r24, 0x30	; 48
    2410:	90 e0       	ldi	r25, 0x00	; 0
    2412:	b3 01       	movw	r22, r6
    2414:	b7 dd       	rcall	.-1170   	; 0x1f84 <fputc>
    2416:	9a 94       	dec	r9
    2418:	d9 14       	cp	r13, r9
    241a:	c8 f3       	brcs	.-14     	; 0x240e <__stack+0x30f>
    241c:	da 94       	dec	r13
    241e:	f1 01       	movw	r30, r2
    2420:	ed 0d       	add	r30, r13
    2422:	f1 1d       	adc	r31, r1
    2424:	80 81       	ld	r24, Z
    2426:	90 e0       	ldi	r25, 0x00	; 0
    2428:	b3 01       	movw	r22, r6
    242a:	ac dd       	rcall	.-1192   	; 0x1f84 <fputc>
    242c:	dd 20       	and	r13, r13
    242e:	b1 f7       	brne	.-20     	; 0x241c <__stack+0x31d>
    2430:	05 c0       	rjmp	.+10     	; 0x243c <__stack+0x33d>
    2432:	80 e2       	ldi	r24, 0x20	; 32
    2434:	90 e0       	ldi	r25, 0x00	; 0
    2436:	b3 01       	movw	r22, r6
    2438:	a5 dd       	rcall	.-1206   	; 0x1f84 <fputc>
    243a:	ea 94       	dec	r14
    243c:	ee 20       	and	r14, r14
    243e:	c9 f7       	brne	.-14     	; 0x2432 <__stack+0x333>
    2440:	50 ce       	rjmp	.-864    	; 0x20e2 <vfprintf+0x58>
    2442:	f3 01       	movw	r30, r6
    2444:	66 81       	ldd	r22, Z+6	; 0x06
    2446:	77 81       	ldd	r23, Z+7	; 0x07
    2448:	cb 01       	movw	r24, r22
    244a:	2b 96       	adiw	r28, 0x0b	; 11
    244c:	0f b6       	in	r0, 0x3f	; 63
    244e:	f8 94       	cli
    2450:	de bf       	out	0x3e, r29	; 62
    2452:	0f be       	out	0x3f, r0	; 63
    2454:	cd bf       	out	0x3d, r28	; 61
    2456:	cf 91       	pop	r28
    2458:	df 91       	pop	r29
    245a:	1f 91       	pop	r17
    245c:	0f 91       	pop	r16
    245e:	ff 90       	pop	r15
    2460:	ef 90       	pop	r14
    2462:	df 90       	pop	r13
    2464:	cf 90       	pop	r12
    2466:	bf 90       	pop	r11
    2468:	af 90       	pop	r10
    246a:	9f 90       	pop	r9
    246c:	8f 90       	pop	r8
    246e:	7f 90       	pop	r7
    2470:	6f 90       	pop	r6
    2472:	5f 90       	pop	r5
    2474:	4f 90       	pop	r4
    2476:	3f 90       	pop	r3
    2478:	2f 90       	pop	r2
    247a:	08 95       	ret

0000247c <strnlen_P>:
    247c:	fc 01       	movw	r30, r24
    247e:	05 90       	lpm	r0, Z+
    2480:	61 50       	subi	r22, 0x01	; 1
    2482:	70 40       	sbci	r23, 0x00	; 0
    2484:	01 10       	cpse	r0, r1
    2486:	d8 f7       	brcc	.-10     	; 0x247e <strnlen_P+0x2>
    2488:	80 95       	com	r24
    248a:	90 95       	com	r25
    248c:	8e 0f       	add	r24, r30
    248e:	9f 1f       	adc	r25, r31
    2490:	08 95       	ret

00002492 <strnlen>:
    2492:	fc 01       	movw	r30, r24
    2494:	61 50       	subi	r22, 0x01	; 1
    2496:	70 40       	sbci	r23, 0x00	; 0
    2498:	01 90       	ld	r0, Z+
    249a:	01 10       	cpse	r0, r1
    249c:	d8 f7       	brcc	.-10     	; 0x2494 <strnlen+0x2>
    249e:	80 95       	com	r24
    24a0:	90 95       	com	r25
    24a2:	8e 0f       	add	r24, r30
    24a4:	9f 1f       	adc	r25, r31
    24a6:	08 95       	ret

000024a8 <__ultoa_invert>:
    24a8:	fa 01       	movw	r30, r20
    24aa:	aa 27       	eor	r26, r26
    24ac:	28 30       	cpi	r18, 0x08	; 8
    24ae:	51 f1       	breq	.+84     	; 0x2504 <__ultoa_invert+0x5c>
    24b0:	20 31       	cpi	r18, 0x10	; 16
    24b2:	81 f1       	breq	.+96     	; 0x2514 <__ultoa_invert+0x6c>
    24b4:	e8 94       	clt
    24b6:	6f 93       	push	r22
    24b8:	6e 7f       	andi	r22, 0xFE	; 254
    24ba:	6e 5f       	subi	r22, 0xFE	; 254
    24bc:	7f 4f       	sbci	r23, 0xFF	; 255
    24be:	8f 4f       	sbci	r24, 0xFF	; 255
    24c0:	9f 4f       	sbci	r25, 0xFF	; 255
    24c2:	af 4f       	sbci	r26, 0xFF	; 255
    24c4:	b1 e0       	ldi	r27, 0x01	; 1
    24c6:	3e d0       	rcall	.+124    	; 0x2544 <__ultoa_invert+0x9c>
    24c8:	b4 e0       	ldi	r27, 0x04	; 4
    24ca:	3c d0       	rcall	.+120    	; 0x2544 <__ultoa_invert+0x9c>
    24cc:	67 0f       	add	r22, r23
    24ce:	78 1f       	adc	r23, r24
    24d0:	89 1f       	adc	r24, r25
    24d2:	9a 1f       	adc	r25, r26
    24d4:	a1 1d       	adc	r26, r1
    24d6:	68 0f       	add	r22, r24
    24d8:	79 1f       	adc	r23, r25
    24da:	8a 1f       	adc	r24, r26
    24dc:	91 1d       	adc	r25, r1
    24de:	a1 1d       	adc	r26, r1
    24e0:	6a 0f       	add	r22, r26
    24e2:	71 1d       	adc	r23, r1
    24e4:	81 1d       	adc	r24, r1
    24e6:	91 1d       	adc	r25, r1
    24e8:	a1 1d       	adc	r26, r1
    24ea:	20 d0       	rcall	.+64     	; 0x252c <__ultoa_invert+0x84>
    24ec:	09 f4       	brne	.+2      	; 0x24f0 <__ultoa_invert+0x48>
    24ee:	68 94       	set
    24f0:	3f 91       	pop	r19
    24f2:	2a e0       	ldi	r18, 0x0A	; 10
    24f4:	26 9f       	mul	r18, r22
    24f6:	11 24       	eor	r1, r1
    24f8:	30 19       	sub	r19, r0
    24fa:	30 5d       	subi	r19, 0xD0	; 208
    24fc:	31 93       	st	Z+, r19
    24fe:	de f6       	brtc	.-74     	; 0x24b6 <__ultoa_invert+0xe>
    2500:	cf 01       	movw	r24, r30
    2502:	08 95       	ret
    2504:	46 2f       	mov	r20, r22
    2506:	47 70       	andi	r20, 0x07	; 7
    2508:	40 5d       	subi	r20, 0xD0	; 208
    250a:	41 93       	st	Z+, r20
    250c:	b3 e0       	ldi	r27, 0x03	; 3
    250e:	0f d0       	rcall	.+30     	; 0x252e <__ultoa_invert+0x86>
    2510:	c9 f7       	brne	.-14     	; 0x2504 <__ultoa_invert+0x5c>
    2512:	f6 cf       	rjmp	.-20     	; 0x2500 <__ultoa_invert+0x58>
    2514:	46 2f       	mov	r20, r22
    2516:	4f 70       	andi	r20, 0x0F	; 15
    2518:	40 5d       	subi	r20, 0xD0	; 208
    251a:	4a 33       	cpi	r20, 0x3A	; 58
    251c:	18 f0       	brcs	.+6      	; 0x2524 <__ultoa_invert+0x7c>
    251e:	49 5d       	subi	r20, 0xD9	; 217
    2520:	31 fd       	sbrc	r19, 1
    2522:	40 52       	subi	r20, 0x20	; 32
    2524:	41 93       	st	Z+, r20
    2526:	02 d0       	rcall	.+4      	; 0x252c <__ultoa_invert+0x84>
    2528:	a9 f7       	brne	.-22     	; 0x2514 <__ultoa_invert+0x6c>
    252a:	ea cf       	rjmp	.-44     	; 0x2500 <__ultoa_invert+0x58>
    252c:	b4 e0       	ldi	r27, 0x04	; 4
    252e:	a6 95       	lsr	r26
    2530:	97 95       	ror	r25
    2532:	87 95       	ror	r24
    2534:	77 95       	ror	r23
    2536:	67 95       	ror	r22
    2538:	ba 95       	dec	r27
    253a:	c9 f7       	brne	.-14     	; 0x252e <__ultoa_invert+0x86>
    253c:	00 97       	sbiw	r24, 0x00	; 0
    253e:	61 05       	cpc	r22, r1
    2540:	71 05       	cpc	r23, r1
    2542:	08 95       	ret
    2544:	9b 01       	movw	r18, r22
    2546:	ac 01       	movw	r20, r24
    2548:	0a 2e       	mov	r0, r26
    254a:	06 94       	lsr	r0
    254c:	57 95       	ror	r21
    254e:	47 95       	ror	r20
    2550:	37 95       	ror	r19
    2552:	27 95       	ror	r18
    2554:	ba 95       	dec	r27
    2556:	c9 f7       	brne	.-14     	; 0x254a <__ultoa_invert+0xa2>
    2558:	62 0f       	add	r22, r18
    255a:	73 1f       	adc	r23, r19
    255c:	84 1f       	adc	r24, r20
    255e:	95 1f       	adc	r25, r21
    2560:	a0 1d       	adc	r26, r0
    2562:	08 95       	ret

00002564 <_exit>:
    2564:	f8 94       	cli

00002566 <__stop_program>:
    2566:	ff cf       	rjmp	.-2      	; 0x2566 <__stop_program>
