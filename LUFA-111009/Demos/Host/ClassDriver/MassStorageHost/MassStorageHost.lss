
MassStorageHost.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  00002688  0000271c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002688  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000022  00800120  00800120  0000273c  2**0
                  ALLOC
  3 .debug_aranges 000006c8  00000000  00000000  0000273c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000f95  00000000  00000000  00002e04  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000bc69  00000000  00000000  00003d99  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000028be  00000000  00000000  0000fa02  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00007e7c  00000000  00000000  000122c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000b10  00000000  00000000  0001a13c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00004591  00000000  00000000  0001ac4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00005852  00000000  00000000  0001f1dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000007c8  00000000  00000000  00024a2f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
       0:	06 c2       	rjmp	.+1036   	; 0x40e <__ctors_end>
{
	USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, AfterType);

	if (*BytesRem)
	  USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, Type);
}
       2:	00 00       	nop
	return USB_Host_SendControlRequest(NULL);
}

uint8_t USB_Host_SetInterfaceAltSetting(const uint8_t InterfaceIndex,
                                        const uint8_t AltSetting)
{
       4:	22 c2       	rjmp	.+1092   	; 0x44a <__bad_interrupt>
                                  const uint8_t LUNIndex,
                                  const uint32_t BlockAddress,
                                  const uint8_t Blocks,
                                  const uint16_t BlockSize,
                                  const void* BlockBuffer)
{
       6:	00 00       	nop

	return Serial_ReceiveByte();
}

int Serial_getchar_Blocking(FILE *Stream)
{
       8:	20 c2       	rjmp	.+1088   	; 0x44a <__bad_interrupt>
       a:	00 00       	nop
       c:	1e c2       	rjmp	.+1084   	; 0x44a <__bad_interrupt>
       e:	00 00       	nop
      10:	1c c2       	rjmp	.+1080   	; 0x44a <__bad_interrupt>
      12:	00 00       	nop
      14:	1a c2       	rjmp	.+1076   	; 0x44a <__bad_interrupt>
      16:	00 00       	nop
      18:	18 c2       	rjmp	.+1072   	; 0x44a <__bad_interrupt>
      1a:	00 00       	nop
      1c:	16 c2       	rjmp	.+1068   	; 0x44a <__bad_interrupt>
      1e:	00 00       	nop
      20:	14 c2       	rjmp	.+1064   	; 0x44a <__bad_interrupt>
      22:	00 00       	nop
      24:	12 c2       	rjmp	.+1060   	; 0x44a <__bad_interrupt>
      26:	00 00       	nop
      28:	ee c7       	rjmp	.+4060   	; 0x1006 <__vector_10>
      2a:	00 00       	nop
      2c:	0e c2       	rjmp	.+1052   	; 0x44a <__bad_interrupt>
      2e:	00 00       	nop
      30:	0c c2       	rjmp	.+1048   	; 0x44a <__bad_interrupt>
      32:	00 00       	nop
      34:	0a c2       	rjmp	.+1044   	; 0x44a <__bad_interrupt>
      36:	00 00       	nop
      38:	08 c2       	rjmp	.+1040   	; 0x44a <__bad_interrupt>
      3a:	00 00       	nop
      3c:	06 c2       	rjmp	.+1036   	; 0x44a <__bad_interrupt>
      3e:	00 00       	nop
      40:	04 c2       	rjmp	.+1032   	; 0x44a <__bad_interrupt>
      42:	00 00       	nop
      44:	02 c2       	rjmp	.+1028   	; 0x44a <__bad_interrupt>
      46:	00 00       	nop
      48:	00 c2       	rjmp	.+1024   	; 0x44a <__bad_interrupt>
      4a:	00 00       	nop
      4c:	fe c1       	rjmp	.+1020   	; 0x44a <__bad_interrupt>
      4e:	00 00       	nop
      50:	fc c1       	rjmp	.+1016   	; 0x44a <__bad_interrupt>
      52:	00 00       	nop
      54:	fa c1       	rjmp	.+1012   	; 0x44a <__bad_interrupt>
      56:	00 00       	nop
      58:	f8 c1       	rjmp	.+1008   	; 0x44a <__bad_interrupt>
      5a:	00 00       	nop
      5c:	f6 c1       	rjmp	.+1004   	; 0x44a <__bad_interrupt>
      5e:	00 00       	nop
      60:	f4 c1       	rjmp	.+1000   	; 0x44a <__bad_interrupt>
      62:	00 00       	nop
      64:	f2 c1       	rjmp	.+996    	; 0x44a <__bad_interrupt>
      66:	00 00       	nop
      68:	f0 c1       	rjmp	.+992    	; 0x44a <__bad_interrupt>
      6a:	00 00       	nop
      6c:	ee c1       	rjmp	.+988    	; 0x44a <__bad_interrupt>
      6e:	00 00       	nop
      70:	ec c1       	rjmp	.+984    	; 0x44a <__bad_interrupt>
      72:	00 00       	nop
      74:	ea c1       	rjmp	.+980    	; 0x44a <__bad_interrupt>
      76:	00 00       	nop
      78:	e8 c1       	rjmp	.+976    	; 0x44a <__bad_interrupt>
      7a:	00 00       	nop
      7c:	e6 c1       	rjmp	.+972    	; 0x44a <__bad_interrupt>
      7e:	00 00       	nop
      80:	e4 c1       	rjmp	.+968    	; 0x44a <__bad_interrupt>
      82:	00 00       	nop
      84:	e2 c1       	rjmp	.+964    	; 0x44a <__bad_interrupt>
      86:	00 00       	nop
      88:	e0 c1       	rjmp	.+960    	; 0x44a <__bad_interrupt>
      8a:	00 00       	nop
      8c:	de c1       	rjmp	.+956    	; 0x44a <__bad_interrupt>
      8e:	00 00       	nop
      90:	dc c1       	rjmp	.+952    	; 0x44a <__bad_interrupt>
      92:	00 00       	nop
      94:	da c1       	rjmp	.+948    	; 0x44a <__bad_interrupt>
      96:	00 00       	nop

00000098 <__c.4682>:
      98:	1b 5b 33 31 6d 44 65 76 20 45 6e 75 6d 20 45 72     .[31mDev Enum Er
      a8:	72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     ror.. -- Error C
      b8:	6f 64 65 20 25 64 0d 0a 20 2d 2d 20 53 75 62 20     ode %d.. -- Sub 
      c8:	45 72 72 6f 72 20 43 6f 64 65 20 25 64 0d 0a 20     Error Code %d.. 
      d8:	2d 2d 20 49 6e 20 53 74 61 74 65 20 25 64 0d 0a     -- In State %d..
      e8:	1b 5b 33 37 6d 00                                   .[37m.

000000ee <__c.4674>:
      ee:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
      fe:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 
     10e:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

0000011d <__c.4657>:
     11d:	4d 61 73 73 20 53 74 6f 72 61 67 65 20 44 65 76     Mass Storage Dev
     12d:	69 63 65 20 45 6e 75 6d 65 72 61 74 65 64 2e 0d     ice Enumerated..
     13d:	0a 00                                               ..

0000013f <__c.4655>:
     13f:	56 65 6e 64 6f 72 20 22 25 2e 38 73 22 2c 20 50     Vendor "%.8s", P
     14f:	72 6f 64 75 63 74 20 22 25 2e 31 36 73 22 0d 0a     roduct "%.16s"..
     15f:	00                                                  .

00000160 <__c.4653>:
     160:	45 72 72 6f 72 20 72 65 74 72 69 65 76 69 6e 67     Error retrieving
     170:	20 64 65 76 69 63 65 20 49 6e 71 75 69 72 79 20      device Inquiry 
     180:	64 61 74 61 2e 0d 0a 00                             data....

00000188 <__c.4650>:
     188:	45 72 72 6f 72 20 73 65 74 74 69 6e 67 20 50 72     Error setting Pr
     198:	65 76 65 6e 74 20 44 65 76 69 63 65 20 52 65 6d     event Device Rem
     1a8:	6f 76 61 6c 20 62 69 74 2e 0d 0a 00                 oval bit....

000001b4 <__c.4648>:
     1b4:	45 72 72 6f 72 20 72 65 74 72 69 65 76 69 6e 67     Error retrieving
     1c4:	20 64 65 76 69 63 65 20 73 65 6e 73 65 2e 0d 0a      device sense...
     1d4:	00                                                  .

000001d5 <__c.4645>:
     1d5:	45 72 72 6f 72 20 72 65 73 65 74 74 69 6e 67 20     Error resetting 
     1e5:	4d 61 73 73 20 53 74 6f 72 61 67 65 20 69 6e 74     Mass Storage int
     1f5:	65 72 66 61 63 65 2e 0d 0a 00                       erface....

000001ff <__c.4643>:
     1ff:	54 6f 74 61 6c 20 4c 55 4e 73 3a 20 25 64 20 2d     Total LUNs: %d -
     20f:	20 55 73 69 6e 67 20 66 69 72 73 74 20 4c 55 4e      Using first LUN
     21f:	20 69 6e 20 64 65 76 69 63 65 2e 0d 0a 00            in device....

0000022d <__c.4641>:
     22d:	45 72 72 6f 72 20 72 65 74 72 69 65 76 69 6e 67     Error retrieving
     23d:	20 6d 61 78 20 4c 55 4e 20 69 6e 64 65 78 2e 0d      max LUN index..
     24d:	0a 00                                               ..

0000024f <__c.4638>:
     24f:	45 72 72 6f 72 20 53 65 74 74 69 6e 67 20 44 65     Error Setting De
     25f:	76 69 63 65 20 43 6f 6e 66 69 67 75 72 61 74 69     vice Configurati
     26f:	6f 6e 2e 0d 0a 00                                   on....

00000275 <__c.4636>:
     275:	41 74 74 61 63 68 65 64 20 44 65 76 69 63 65 20     Attached Device 
     285:	4e 6f 74 20 61 20 56 61 6c 69 64 20 4d 61 73 73     Not a Valid Mass
     295:	20 53 74 6f 72 61 67 65 20 44 65 76 69 63 65 2e      Storage Device.
     2a5:	0d 0a 00                                            ...

000002a8 <__c.4634>:
     2a8:	45 72 72 6f 72 20 52 65 74 72 69 65 76 69 6e 67     Error Retrieving
     2b8:	20 43 6f 6e 66 69 67 75 72 61 74 69 6f 6e 20 44      Configuration D
     2c8:	65 73 63 72 69 70 74 6f 72 2e 0d 0a 00              escriptor....

000002d5 <__c.4627>:
     2d5:	0d 0a 44 65 76 69 63 65 20 55 6e 61 74 74 61 63     ..Device Unattac
     2e5:	68 65 64 2e 0d 0a 00                                hed....

000002ec <__c.4622>:
     2ec:	44 65 76 69 63 65 20 41 74 74 61 63 68 65 64 2e     Device Attached.
     2fc:	0d 0a 00                                            ...

000002ff <__c.4584>:
     2ff:	0d 0a 00                                            ...

00000302 <__c.4577>:
     302:	20 20 20 20 00                                          .

00000307 <__c.4572>:
     307:	25 2e 32 58 20 00                                   %.2X .

0000030d <__c.4566>:
     30d:	0d 0a 43 6f 6e 74 65 6e 74 73 20 6f 66 20 66 69     ..Contents of fi
     31d:	72 73 74 20 62 6c 6f 63 6b 3a 0d 0a 00              rst block:...

0000032a <__c.4564>:
     32a:	45 72 72 6f 72 20 72 65 61 64 69 6e 67 20 64 65     Error reading de
     33a:	76 69 63 65 20 62 6c 6f 63 6b 2e 0d 0a 00           vice block....

00000348 <__c.4561>:
     348:	25 6c 75 20 62 6c 6f 63 6b 73 20 6f 66 20 25 6c     %lu blocks of %l
     358:	75 20 62 79 74 65 73 2e 0d 0a 00                    u bytes....

00000363 <__c.4559>:
     363:	45 72 72 6f 72 20 72 65 74 72 69 65 76 69 6e 67     Error retrieving
     373:	20 64 65 76 69 63 65 20 63 61 70 61 63 69 74 79      device capacity
     383:	2e 0d 0a 00                                         ....

00000387 <__c.4556>:
     387:	52 65 74 72 69 65 76 69 6e 67 20 43 61 70 61 63     Retrieving Capac
     397:	69 74 79 2e 2e 2e 0d 0a 00                          ity......

000003a0 <__c.4553>:
     3a0:	45 72 72 6f 72 20 77 61 69 74 69 6e 67 20 66 6f     Error waiting fo
     3b0:	72 20 64 65 76 69 63 65 20 74 6f 20 62 65 20 72     r device to be r
     3c0:	65 61 64 79 2e 0d 0a 00                             eady....

000003c8 <__c.4549>:
     3c8:	57 61 69 74 69 6e 67 20 75 6e 74 69 6c 20 72 65     Waiting until re
     3d8:	61 64 79 2e 2e 2e 0d 0a 00                          ady......

000003e1 <__c.4535>:
     3e1:	1b 5b 33 36 6d 4d 61 73 73 20 53 74 6f 72 61 67     .[36mMass Storag
     3f1:	65 20 48 6f 73 74 20 44 65 6d 6f 20 72 75 6e 6e     e Host Demo runn
     401:	69 6e 67 2e 0d 0a 1b 5b 33 37 6d 00 00              ing....[37m..

0000040e <__ctors_end>:
     40e:	11 24       	eor	r1, r1
     410:	1f be       	out	0x3f, r1	; 63
     412:	cf ef       	ldi	r28, 0xFF	; 255
     414:	d0 e2       	ldi	r29, 0x20	; 32
     416:	de bf       	out	0x3e, r29	; 62
     418:	cd bf       	out	0x3d, r28	; 61

0000041a <__do_copy_data>:
     41a:	11 e0       	ldi	r17, 0x01	; 1
     41c:	a0 e0       	ldi	r26, 0x00	; 0
     41e:	b1 e0       	ldi	r27, 0x01	; 1
     420:	e8 e8       	ldi	r30, 0x88	; 136
     422:	f6 e2       	ldi	r31, 0x26	; 38
     424:	00 e0       	ldi	r16, 0x00	; 0
     426:	0b bf       	out	0x3b, r16	; 59
     428:	02 c0       	rjmp	.+4      	; 0x42e <__do_copy_data+0x14>
     42a:	07 90       	elpm	r0, Z+
     42c:	0d 92       	st	X+, r0
     42e:	a0 32       	cpi	r26, 0x20	; 32
     430:	b1 07       	cpc	r27, r17
     432:	d9 f7       	brne	.-10     	; 0x42a <__do_copy_data+0x10>

00000434 <__do_clear_bss>:
     434:	11 e0       	ldi	r17, 0x01	; 1
     436:	a0 e2       	ldi	r26, 0x20	; 32
     438:	b1 e0       	ldi	r27, 0x01	; 1
     43a:	01 c0       	rjmp	.+2      	; 0x43e <.do_clear_bss_start>

0000043c <.do_clear_bss_loop>:
     43c:	1d 92       	st	X+, r1

0000043e <.do_clear_bss_start>:
     43e:	a2 34       	cpi	r26, 0x42	; 66
     440:	b1 07       	cpc	r27, r17
     442:	e1 f7       	brne	.-8      	; 0x43c <.do_clear_bss_loop>
     444:	c7 d2       	rcall	.+1422   	; 0x9d4 <main>
     446:	0c 94 42 13 	jmp	0x2684	; 0x2684 <_exit>

0000044a <__bad_interrupt>:
     44a:	da cd       	rjmp	.-1100   	; 0x0 <__vectors>

0000044c <EVENT_USB_Host_DeviceEnumerationFailed>:
 *  enumerating an attached USB device.
 */
void EVENT_USB_Host_DeviceEnumerationFailed(const uint8_t ErrorCode,
                                            const uint8_t SubErrorCode)
{
	printf_P(PSTR(ESC_FG_RED "Dev Enum Error\r\n"
     44c:	90 91 2d 01 	lds	r25, 0x012D
     450:	2d b7       	in	r18, 0x3d	; 61
     452:	3e b7       	in	r19, 0x3e	; 62
     454:	28 50       	subi	r18, 0x08	; 8
     456:	30 40       	sbci	r19, 0x00	; 0
     458:	0f b6       	in	r0, 0x3f	; 63
     45a:	f8 94       	cli
     45c:	3e bf       	out	0x3e, r19	; 62
     45e:	0f be       	out	0x3f, r0	; 63
     460:	2d bf       	out	0x3d, r18	; 61
     462:	ed b7       	in	r30, 0x3d	; 61
     464:	fe b7       	in	r31, 0x3e	; 62
     466:	31 96       	adiw	r30, 0x01	; 1
     468:	28 e9       	ldi	r18, 0x98	; 152
     46a:	30 e0       	ldi	r19, 0x00	; 0
     46c:	ad b7       	in	r26, 0x3d	; 61
     46e:	be b7       	in	r27, 0x3e	; 62
     470:	12 96       	adiw	r26, 0x02	; 2
     472:	3c 93       	st	X, r19
     474:	2e 93       	st	-X, r18
     476:	11 97       	sbiw	r26, 0x01	; 1
     478:	82 83       	std	Z+2, r24	; 0x02
     47a:	13 82       	std	Z+3, r1	; 0x03
     47c:	64 83       	std	Z+4, r22	; 0x04
     47e:	15 82       	std	Z+5, r1	; 0x05
     480:	96 83       	std	Z+6, r25	; 0x06
     482:	17 82       	std	Z+7, r1	; 0x07
     484:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <printf_P>
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     488:	8b b1       	in	r24, 0x0b	; 11
     48a:	8f 70       	andi	r24, 0x0F	; 15
     48c:	80 69       	ori	r24, 0x90	; 144
     48e:	8b b9       	out	0x0b, r24	; 11
     490:	2d b7       	in	r18, 0x3d	; 61
     492:	3e b7       	in	r19, 0x3e	; 62
     494:	28 5f       	subi	r18, 0xF8	; 248
     496:	3f 4f       	sbci	r19, 0xFF	; 255
     498:	0f b6       	in	r0, 0x3f	; 63
     49a:	f8 94       	cli
     49c:	3e bf       	out	0x3e, r19	; 62
     49e:	0f be       	out	0x3f, r0	; 63
     4a0:	2d bf       	out	0x3d, r18	; 61
	                         " -- Error Code %d\r\n"
	                         " -- Sub Error Code %d\r\n"
	                         " -- In State %d\r\n" ESC_FG_WHITE), ErrorCode, SubErrorCode, USB_HostState);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
}
     4a2:	08 95       	ret

000004a4 <EVENT_USB_Host_HostError>:
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
}

/** Event handler for the USB_HostError event. This indicates that a hardware error occurred while in host mode. */
void EVENT_USB_Host_HostError(const uint8_t ErrorCode)
{
     4a4:	1f 93       	push	r17
     4a6:	18 2f       	mov	r17, r24
	USB_Disable();
     4a8:	89 d5       	rcall	.+2834   	; 0xfbc <USB_Disable>

	printf_P(PSTR(ESC_FG_RED "Host Mode Error\r\n"
     4aa:	00 d0       	rcall	.+0      	; 0x4ac <EVENT_USB_Host_HostError+0x8>
     4ac:	00 d0       	rcall	.+0      	; 0x4ae <EVENT_USB_Host_HostError+0xa>
     4ae:	ed b7       	in	r30, 0x3d	; 61
     4b0:	fe b7       	in	r31, 0x3e	; 62
     4b2:	31 96       	adiw	r30, 0x01	; 1
     4b4:	8e ee       	ldi	r24, 0xEE	; 238
     4b6:	90 e0       	ldi	r25, 0x00	; 0
     4b8:	ad b7       	in	r26, 0x3d	; 61
     4ba:	be b7       	in	r27, 0x3e	; 62
     4bc:	12 96       	adiw	r26, 0x02	; 2
     4be:	9c 93       	st	X, r25
     4c0:	8e 93       	st	-X, r24
     4c2:	11 97       	sbiw	r26, 0x01	; 1
     4c4:	12 83       	std	Z+2, r17	; 0x02
     4c6:	13 82       	std	Z+3, r1	; 0x03
     4c8:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <printf_P>
     4cc:	8b b1       	in	r24, 0x0b	; 11
     4ce:	8f 70       	andi	r24, 0x0F	; 15
     4d0:	80 69       	ori	r24, 0x90	; 144
     4d2:	8b b9       	out	0x0b, r24	; 11
     4d4:	0f 90       	pop	r0
     4d6:	0f 90       	pop	r0
     4d8:	0f 90       	pop	r0
     4da:	0f 90       	pop	r0
     4dc:	ff cf       	rjmp	.-2      	; 0x4dc <EVENT_USB_Host_HostError+0x38>

000004de <EVENT_USB_Host_DeviceUnattached>:
/** Event handler for the USB_DeviceUnattached event. This indicates that a device has been removed from the host, and
 *  stops the library USB task management process.
 */
void EVENT_USB_Host_DeviceUnattached(void)
{
	puts_P(PSTR("\r\nDevice Unattached.\r\n"));
     4de:	85 ed       	ldi	r24, 0xD5	; 213
     4e0:	92 e0       	ldi	r25, 0x02	; 2
     4e2:	0e 94 9d 10 	call	0x213a	; 0x213a <puts_P>
     4e6:	8b b1       	in	r24, 0x0b	; 11
     4e8:	8f 70       	andi	r24, 0x0F	; 15
     4ea:	80 61       	ori	r24, 0x10	; 16
     4ec:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
}
     4ee:	08 95       	ret

000004f0 <EVENT_USB_Host_DeviceAttached>:
/** Event handler for the USB_DeviceAttached event. This indicates that a device has been attached to the host, and
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Host_DeviceAttached(void)
{
	puts_P(PSTR("Device Attached.\r\n"));
     4f0:	8c ee       	ldi	r24, 0xEC	; 236
     4f2:	92 e0       	ldi	r25, 0x02	; 2
     4f4:	0e 94 9d 10 	call	0x213a	; 0x213a <puts_P>
     4f8:	8b b1       	in	r24, 0x0b	; 11
     4fa:	8f 70       	andi	r24, 0x0F	; 15
     4fc:	80 6a       	ori	r24, 0xA0	; 160
     4fe:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
}
     500:	08 95       	ret

00000502 <EVENT_USB_Host_DeviceEnumerationComplete>:

/** Event handler for the USB_DeviceEnumerationComplete event. This indicates that a device has been successfully
 *  enumerated by the host and is now ready to be used by the application.
 */
void EVENT_USB_Host_DeviceEnumerationComplete(void)
{
     502:	0f 93       	push	r16
     504:	1f 93       	push	r17
     506:	df 93       	push	r29
     508:	cf 93       	push	r28
     50a:	cd b7       	in	r28, 0x3d	; 61
     50c:	de b7       	in	r29, 0x3e	; 62
     50e:	c9 53       	subi	r28, 0x39	; 57
     510:	d2 40       	sbci	r29, 0x02	; 2
     512:	0f b6       	in	r0, 0x3f	; 63
     514:	f8 94       	cli
     516:	de bf       	out	0x3e, r29	; 62
     518:	0f be       	out	0x3f, r0	; 63
     51a:	cd bf       	out	0x3d, r28	; 61
     51c:	8b b1       	in	r24, 0x0b	; 11
     51e:	8f 70       	andi	r24, 0x0F	; 15
     520:	80 6a       	ori	r24, 0xA0	; 160
     522:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);

	uint16_t ConfigDescriptorSize;
	uint8_t  ConfigDescriptorData[512];

	if (USB_Host_GetDeviceConfigDescriptor(1, &ConfigDescriptorSize, ConfigDescriptorData,
     524:	8e 01       	movw	r16, r28
     526:	06 5c       	subi	r16, 0xC6	; 198
     528:	1f 4f       	sbci	r17, 0xFF	; 255
     52a:	81 e0       	ldi	r24, 0x01	; 1
     52c:	be 01       	movw	r22, r28
     52e:	6e 5f       	subi	r22, 0xFE	; 254
     530:	7f 4f       	sbci	r23, 0xFF	; 255
     532:	a8 01       	movw	r20, r16
     534:	20 e0       	ldi	r18, 0x00	; 0
     536:	32 e0       	ldi	r19, 0x02	; 2
     538:	eb d6       	rcall	.+3542   	; 0x1310 <USB_Host_GetDeviceConfigDescriptor>
     53a:	88 23       	and	r24, r24
     53c:	19 f0       	breq	.+6      	; 0x544 <EVENT_USB_Host_DeviceEnumerationComplete+0x42>
	                                       sizeof(ConfigDescriptorData)) != HOST_GETCONFIG_Successful)
	{
		puts_P(PSTR("Error Retrieving Configuration Descriptor.\r\n"));
     53e:	88 ea       	ldi	r24, 0xA8	; 168
     540:	92 e0       	ldi	r25, 0x02	; 2
     542:	13 c0       	rjmp	.+38     	; 0x56a <EVENT_USB_Host_DeviceEnumerationComplete+0x68>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (MS_Host_ConfigurePipes(&FlashDisk_MS_Interface,
     544:	6a 81       	ldd	r22, Y+2	; 0x02
     546:	7b 81       	ldd	r23, Y+3	; 0x03
     548:	80 e0       	ldi	r24, 0x00	; 0
     54a:	91 e0       	ldi	r25, 0x01	; 1
     54c:	a8 01       	movw	r20, r16
     54e:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <MS_Host_ConfigurePipes>
     552:	88 23       	and	r24, r24
     554:	19 f0       	breq	.+6      	; 0x55c <EVENT_USB_Host_DeviceEnumerationComplete+0x5a>
	                           ConfigDescriptorSize, ConfigDescriptorData) != MS_ENUMERROR_NoError)
	{
		puts_P(PSTR("Attached Device Not a Valid Mass Storage Device.\r\n"));
     556:	85 e7       	ldi	r24, 0x75	; 117
     558:	92 e0       	ldi	r25, 0x02	; 2
     55a:	07 c0       	rjmp	.+14     	; 0x56a <EVENT_USB_Host_DeviceEnumerationComplete+0x68>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (USB_Host_SetDeviceConfiguration(1) != HOST_SENDCONTROL_Successful)
     55c:	81 e0       	ldi	r24, 0x01	; 1
     55e:	0e 94 2a 0b 	call	0x1654	; 0x1654 <USB_Host_SetDeviceConfiguration>
     562:	88 23       	and	r24, r24
     564:	41 f0       	breq	.+16     	; 0x576 <EVENT_USB_Host_DeviceEnumerationComplete+0x74>
	{
		puts_P(PSTR("Error Setting Device Configuration.\r\n"));
     566:	8f e4       	ldi	r24, 0x4F	; 79
     568:	92 e0       	ldi	r25, 0x02	; 2
     56a:	0e 94 9d 10 	call	0x213a	; 0x213a <puts_P>
     56e:	8b b1       	in	r24, 0x0b	; 11
     570:	8f 70       	andi	r24, 0x0F	; 15
     572:	80 69       	ori	r24, 0x90	; 144
     574:	81 c0       	rjmp	.+258    	; 0x678 <EVENT_USB_Host_DeviceEnumerationComplete+0x176>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	uint8_t MaxLUNIndex;
	if (MS_Host_GetMaxLUN(&FlashDisk_MS_Interface, &MaxLUNIndex))
     576:	80 e0       	ldi	r24, 0x00	; 0
     578:	91 e0       	ldi	r25, 0x01	; 1
     57a:	be 01       	movw	r22, r28
     57c:	6f 5f       	subi	r22, 0xFF	; 255
     57e:	7f 4f       	sbci	r23, 0xFF	; 255
     580:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <MS_Host_GetMaxLUN>
     584:	88 23       	and	r24, r24
     586:	19 f0       	breq	.+6      	; 0x58e <EVENT_USB_Host_DeviceEnumerationComplete+0x8c>
	{
		puts_P(PSTR("Error retrieving max LUN index.\r\n"));
     588:	8d e2       	ldi	r24, 0x2D	; 45
     58a:	92 e0       	ldi	r25, 0x02	; 2
     58c:	44 c0       	rjmp	.+136    	; 0x616 <EVENT_USB_Host_DeviceEnumerationComplete+0x114>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		USB_Host_SetDeviceConfiguration(0);
		return;
	}

	printf_P(PSTR("Total LUNs: %d - Using first LUN in device.\r\n"), (MaxLUNIndex + 1));
     58e:	00 d0       	rcall	.+0      	; 0x590 <EVENT_USB_Host_DeviceEnumerationComplete+0x8e>
     590:	00 d0       	rcall	.+0      	; 0x592 <EVENT_USB_Host_DeviceEnumerationComplete+0x90>
     592:	8f ef       	ldi	r24, 0xFF	; 255
     594:	91 e0       	ldi	r25, 0x01	; 1
     596:	ad b7       	in	r26, 0x3d	; 61
     598:	be b7       	in	r27, 0x3e	; 62
     59a:	12 96       	adiw	r26, 0x02	; 2
     59c:	9c 93       	st	X, r25
     59e:	8e 93       	st	-X, r24
     5a0:	11 97       	sbiw	r26, 0x01	; 1
     5a2:	89 81       	ldd	r24, Y+1	; 0x01
     5a4:	90 e0       	ldi	r25, 0x00	; 0
     5a6:	01 96       	adiw	r24, 0x01	; 1
     5a8:	14 96       	adiw	r26, 0x04	; 4
     5aa:	9c 93       	st	X, r25
     5ac:	8e 93       	st	-X, r24
     5ae:	13 97       	sbiw	r26, 0x03	; 3
     5b0:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <printf_P>

	if (MS_Host_ResetMSInterface(&FlashDisk_MS_Interface))
     5b4:	0f 90       	pop	r0
     5b6:	0f 90       	pop	r0
     5b8:	0f 90       	pop	r0
     5ba:	0f 90       	pop	r0
     5bc:	80 e0       	ldi	r24, 0x00	; 0
     5be:	91 e0       	ldi	r25, 0x01	; 1
     5c0:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <MS_Host_ResetMSInterface>
     5c4:	88 23       	and	r24, r24
     5c6:	19 f0       	breq	.+6      	; 0x5ce <EVENT_USB_Host_DeviceEnumerationComplete+0xcc>
	{
		puts_P(PSTR("Error resetting Mass Storage interface.\r\n"));
     5c8:	85 ed       	ldi	r24, 0xD5	; 213
     5ca:	91 e0       	ldi	r25, 0x01	; 1
     5cc:	24 c0       	rjmp	.+72     	; 0x616 <EVENT_USB_Host_DeviceEnumerationComplete+0x114>
		USB_Host_SetDeviceConfiguration(0);
		return;
	}

	SCSI_Request_Sense_Response_t SenseData;
	if (MS_Host_RequestSense(&FlashDisk_MS_Interface, 0, &SenseData) != 0)
     5ce:	80 e0       	ldi	r24, 0x00	; 0
     5d0:	91 e0       	ldi	r25, 0x01	; 1
     5d2:	60 e0       	ldi	r22, 0x00	; 0
     5d4:	ae 01       	movw	r20, r28
     5d6:	4c 5f       	subi	r20, 0xFC	; 252
     5d8:	5f 4f       	sbci	r21, 0xFF	; 255
     5da:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <MS_Host_RequestSense>
     5de:	88 23       	and	r24, r24
     5e0:	19 f0       	breq	.+6      	; 0x5e8 <EVENT_USB_Host_DeviceEnumerationComplete+0xe6>
	{
		puts_P(PSTR("Error retrieving device sense.\r\n"));
     5e2:	84 eb       	ldi	r24, 0xB4	; 180
     5e4:	91 e0       	ldi	r25, 0x01	; 1
     5e6:	17 c0       	rjmp	.+46     	; 0x616 <EVENT_USB_Host_DeviceEnumerationComplete+0x114>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		USB_Host_SetDeviceConfiguration(0);
		return;
	}

	if (MS_Host_PreventAllowMediumRemoval(&FlashDisk_MS_Interface, 0, true))
     5e8:	80 e0       	ldi	r24, 0x00	; 0
     5ea:	91 e0       	ldi	r25, 0x01	; 1
     5ec:	60 e0       	ldi	r22, 0x00	; 0
     5ee:	41 e0       	ldi	r20, 0x01	; 1
     5f0:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <MS_Host_PreventAllowMediumRemoval>
     5f4:	88 23       	and	r24, r24
     5f6:	19 f0       	breq	.+6      	; 0x5fe <EVENT_USB_Host_DeviceEnumerationComplete+0xfc>
	{
		puts_P(PSTR("Error setting Prevent Device Removal bit.\r\n"));
     5f8:	88 e8       	ldi	r24, 0x88	; 136
     5fa:	91 e0       	ldi	r25, 0x01	; 1
     5fc:	0c c0       	rjmp	.+24     	; 0x616 <EVENT_USB_Host_DeviceEnumerationComplete+0x114>
		USB_Host_SetDeviceConfiguration(0);
		return;
	}

	SCSI_Inquiry_Response_t InquiryData;
	if (MS_Host_GetInquiryData(&FlashDisk_MS_Interface, 0, &InquiryData))
     5fe:	80 e0       	ldi	r24, 0x00	; 0
     600:	91 e0       	ldi	r25, 0x01	; 1
     602:	60 e0       	ldi	r22, 0x00	; 0
     604:	ae 01       	movw	r20, r28
     606:	4a 5e       	subi	r20, 0xEA	; 234
     608:	5f 4f       	sbci	r21, 0xFF	; 255
     60a:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <MS_Host_GetInquiryData>
     60e:	88 23       	and	r24, r24
     610:	61 f0       	breq	.+24     	; 0x62a <EVENT_USB_Host_DeviceEnumerationComplete+0x128>
	{
		puts_P(PSTR("Error retrieving device Inquiry data.\r\n"));
     612:	80 e6       	ldi	r24, 0x60	; 96
     614:	91 e0       	ldi	r25, 0x01	; 1
     616:	0e 94 9d 10 	call	0x213a	; 0x213a <puts_P>
     61a:	8b b1       	in	r24, 0x0b	; 11
     61c:	8f 70       	andi	r24, 0x0F	; 15
     61e:	80 69       	ori	r24, 0x90	; 144
     620:	8b b9       	out	0x0b, r24	; 11
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		USB_Host_SetDeviceConfiguration(0);
     622:	80 e0       	ldi	r24, 0x00	; 0
     624:	0e 94 2a 0b 	call	0x1654	; 0x1654 <USB_Host_SetDeviceConfiguration>
     628:	28 c0       	rjmp	.+80     	; 0x67a <EVENT_USB_Host_DeviceEnumerationComplete+0x178>
		return;
	}

	printf_P(PSTR("Vendor \"%.8s\", Product \"%.16s\"\r\n"), InquiryData.VendorID, InquiryData.ProductID);
     62a:	00 d0       	rcall	.+0      	; 0x62c <EVENT_USB_Host_DeviceEnumerationComplete+0x12a>
     62c:	00 d0       	rcall	.+0      	; 0x62e <EVENT_USB_Host_DeviceEnumerationComplete+0x12c>
     62e:	00 d0       	rcall	.+0      	; 0x630 <EVENT_USB_Host_DeviceEnumerationComplete+0x12e>
     630:	ed b7       	in	r30, 0x3d	; 61
     632:	fe b7       	in	r31, 0x3e	; 62
     634:	31 96       	adiw	r30, 0x01	; 1
     636:	8f e3       	ldi	r24, 0x3F	; 63
     638:	91 e0       	ldi	r25, 0x01	; 1
     63a:	ad b7       	in	r26, 0x3d	; 61
     63c:	be b7       	in	r27, 0x3e	; 62
     63e:	12 96       	adiw	r26, 0x02	; 2
     640:	9c 93       	st	X, r25
     642:	8e 93       	st	-X, r24
     644:	11 97       	sbiw	r26, 0x01	; 1
     646:	ce 01       	movw	r24, r28
     648:	4e 96       	adiw	r24, 0x1e	; 30
     64a:	93 83       	std	Z+3, r25	; 0x03
     64c:	82 83       	std	Z+2, r24	; 0x02
     64e:	ce 01       	movw	r24, r28
     650:	86 96       	adiw	r24, 0x26	; 38
     652:	95 83       	std	Z+5, r25	; 0x05
     654:	84 83       	std	Z+4, r24	; 0x04
     656:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <printf_P>

	puts_P(PSTR("Mass Storage Device Enumerated.\r\n"));
     65a:	ed b7       	in	r30, 0x3d	; 61
     65c:	fe b7       	in	r31, 0x3e	; 62
     65e:	36 96       	adiw	r30, 0x06	; 6
     660:	0f b6       	in	r0, 0x3f	; 63
     662:	f8 94       	cli
     664:	fe bf       	out	0x3e, r31	; 62
     666:	0f be       	out	0x3f, r0	; 63
     668:	ed bf       	out	0x3d, r30	; 61
     66a:	8d e1       	ldi	r24, 0x1D	; 29
     66c:	91 e0       	ldi	r25, 0x01	; 1
     66e:	0e 94 9d 10 	call	0x213a	; 0x213a <puts_P>
     672:	8b b1       	in	r24, 0x0b	; 11
     674:	8f 70       	andi	r24, 0x0F	; 15
     676:	80 66       	ori	r24, 0x60	; 96
     678:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
}
     67a:	c7 5c       	subi	r28, 0xC7	; 199
     67c:	dd 4f       	sbci	r29, 0xFD	; 253
     67e:	0f b6       	in	r0, 0x3f	; 63
     680:	f8 94       	cli
     682:	de bf       	out	0x3e, r29	; 62
     684:	0f be       	out	0x3f, r0	; 63
     686:	cd bf       	out	0x3d, r28	; 61
     688:	cf 91       	pop	r28
     68a:	df 91       	pop	r29
     68c:	1f 91       	pop	r17
     68e:	0f 91       	pop	r16
     690:	08 95       	ret

00000692 <MassStorageHost_Task>:

/** Task to manage an enumerated USB Mass Storage device once connected, to print out
 *  data from the device.
 */
void MassStorageHost_Task(void)
{
     692:	2f 92       	push	r2
     694:	3f 92       	push	r3
     696:	4f 92       	push	r4
     698:	5f 92       	push	r5
     69a:	6f 92       	push	r6
     69c:	7f 92       	push	r7
     69e:	8f 92       	push	r8
     6a0:	9f 92       	push	r9
     6a2:	af 92       	push	r10
     6a4:	bf 92       	push	r11
     6a6:	cf 92       	push	r12
     6a8:	df 92       	push	r13
     6aa:	ef 92       	push	r14
     6ac:	ff 92       	push	r15
     6ae:	0f 93       	push	r16
     6b0:	1f 93       	push	r17
     6b2:	df 93       	push	r29
     6b4:	cf 93       	push	r28
     6b6:	cd b7       	in	r28, 0x3d	; 61
     6b8:	de b7       	in	r29, 0x3e	; 62
     6ba:	2c 97       	sbiw	r28, 0x0c	; 12
     6bc:	0f b6       	in	r0, 0x3f	; 63
     6be:	f8 94       	cli
     6c0:	de bf       	out	0x3e, r29	; 62
     6c2:	0f be       	out	0x3f, r0	; 63
     6c4:	cd bf       	out	0x3d, r28	; 61
		printf_P(PSTR("\r\n"));
	}

	LEDs_SetAllLEDs(LEDMASK_USB_READY);
	USB_Host_SetDeviceConfiguration(0);
}
     6c6:	8d b7       	in	r24, 0x3d	; 61
     6c8:	9e b7       	in	r25, 0x3e	; 62
     6ca:	9a 87       	std	Y+10, r25	; 0x0a
     6cc:	89 87       	std	Y+9, r24	; 0x09

/** Task to manage an enumerated USB Mass Storage device once connected, to print out
 *  data from the device.
 */
void MassStorageHost_Task(void)
{
     6ce:	9d b7       	in	r25, 0x3d	; 61
     6d0:	9b 87       	std	Y+11, r25	; 0x0b
     6d2:	ae b7       	in	r26, 0x3e	; 62
     6d4:	ac 87       	std	Y+12, r26	; 0x0c
	if (USB_HostState != HOST_STATE_Configured)
     6d6:	80 91 2d 01 	lds	r24, 0x012D
     6da:	8b 30       	cpi	r24, 0x0B	; 11
     6dc:	09 f0       	breq	.+2      	; 0x6e0 <MassStorageHost_Task+0x4e>
     6de:	08 c1       	rjmp	.+528    	; 0x8f0 <MassStorageHost_Task+0x25e>
     6e0:	8b b1       	in	r24, 0x0b	; 11
     6e2:	8f 70       	andi	r24, 0x0F	; 15
     6e4:	80 62       	ori	r24, 0x20	; 32
     6e6:	8b b9       	out	0x0b, r24	; 11
	  return;

	LEDs_SetAllLEDs(LEDMASK_USB_BUSY);

	puts_P(PSTR("Waiting until ready...\r\n"));
     6e8:	88 ec       	ldi	r24, 0xC8	; 200
     6ea:	93 e0       	ldi	r25, 0x03	; 3
     6ec:	0e 94 9d 10 	call	0x213a	; 0x213a <puts_P>

	for (;;)
	{
		uint8_t ErrorCode = MS_Host_TestUnitReady(&FlashDisk_MS_Interface, 0);
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	91 e0       	ldi	r25, 0x01	; 1
     6f4:	60 e0       	ldi	r22, 0x00	; 0
     6f6:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <MS_Host_TestUnitReady>

		if (!(ErrorCode))
     6fa:	88 23       	and	r24, r24
     6fc:	29 f0       	breq	.+10     	; 0x708 <MassStorageHost_Task+0x76>
		  break;

		/* Check if an error other than a logical command error (device busy) received */
		if (ErrorCode != MS_ERROR_LOGICAL_CMD_FAILED)
     6fe:	80 38       	cpi	r24, 0x80	; 128
     700:	b9 f3       	breq	.-18     	; 0x6f0 <MassStorageHost_Task+0x5e>
		{
			puts_P(PSTR("Error waiting for device to be ready.\r\n"));
     702:	80 ea       	ldi	r24, 0xA0	; 160
     704:	93 e0       	ldi	r25, 0x03	; 3
     706:	5b c0       	rjmp	.+182    	; 0x7be <MassStorageHost_Task+0x12c>
			USB_Host_SetDeviceConfiguration(0);
			return;
		}
	}

	puts_P(PSTR("Retrieving Capacity...\r\n"));
     708:	87 e8       	ldi	r24, 0x87	; 135
     70a:	93 e0       	ldi	r25, 0x03	; 3
     70c:	0e 94 9d 10 	call	0x213a	; 0x213a <puts_P>

	SCSI_Capacity_t DiskCapacity;
	if (MS_Host_ReadDeviceCapacity(&FlashDisk_MS_Interface, 0, &DiskCapacity))
     710:	80 e0       	ldi	r24, 0x00	; 0
     712:	91 e0       	ldi	r25, 0x01	; 1
     714:	60 e0       	ldi	r22, 0x00	; 0
     716:	ae 01       	movw	r20, r28
     718:	4f 5f       	subi	r20, 0xFF	; 255
     71a:	5f 4f       	sbci	r21, 0xFF	; 255
     71c:	0e 94 b3 0d 	call	0x1b66	; 0x1b66 <MS_Host_ReadDeviceCapacity>
     720:	88 23       	and	r24, r24
     722:	19 f0       	breq	.+6      	; 0x72a <MassStorageHost_Task+0x98>
	{
		puts_P(PSTR("Error retrieving device capacity.\r\n"));
     724:	83 e6       	ldi	r24, 0x63	; 99
     726:	93 e0       	ldi	r25, 0x03	; 3
     728:	4a c0       	rjmp	.+148    	; 0x7be <MassStorageHost_Task+0x12c>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		USB_Host_SetDeviceConfiguration(0);
		return;
	}

	printf_P(PSTR("%lu blocks of %lu bytes.\r\n"), DiskCapacity.Blocks, DiskCapacity.BlockSize);
     72a:	ed b7       	in	r30, 0x3d	; 61
     72c:	fe b7       	in	r31, 0x3e	; 62
     72e:	3a 97       	sbiw	r30, 0x0a	; 10
     730:	0f b6       	in	r0, 0x3f	; 63
     732:	f8 94       	cli
     734:	fe bf       	out	0x3e, r31	; 62
     736:	0f be       	out	0x3f, r0	; 63
     738:	ed bf       	out	0x3d, r30	; 61
     73a:	31 96       	adiw	r30, 0x01	; 1
     73c:	88 e4       	ldi	r24, 0x48	; 72
     73e:	93 e0       	ldi	r25, 0x03	; 3
     740:	ad b7       	in	r26, 0x3d	; 61
     742:	be b7       	in	r27, 0x3e	; 62
     744:	12 96       	adiw	r26, 0x02	; 2
     746:	9c 93       	st	X, r25
     748:	8e 93       	st	-X, r24
     74a:	11 97       	sbiw	r26, 0x01	; 1
     74c:	89 81       	ldd	r24, Y+1	; 0x01
     74e:	9a 81       	ldd	r25, Y+2	; 0x02
     750:	ab 81       	ldd	r26, Y+3	; 0x03
     752:	bc 81       	ldd	r27, Y+4	; 0x04
     754:	82 83       	std	Z+2, r24	; 0x02
     756:	93 83       	std	Z+3, r25	; 0x03
     758:	a4 83       	std	Z+4, r26	; 0x04
     75a:	b5 83       	std	Z+5, r27	; 0x05
     75c:	8d 81       	ldd	r24, Y+5	; 0x05
     75e:	9e 81       	ldd	r25, Y+6	; 0x06
     760:	af 81       	ldd	r26, Y+7	; 0x07
     762:	b8 85       	ldd	r27, Y+8	; 0x08
     764:	86 83       	std	Z+6, r24	; 0x06
     766:	97 83       	std	Z+7, r25	; 0x07
     768:	a0 87       	std	Z+8, r26	; 0x08
     76a:	b1 87       	std	Z+9, r27	; 0x09
     76c:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <printf_P>

	uint8_t BlockBuffer[DiskCapacity.BlockSize];
     770:	ed b7       	in	r30, 0x3d	; 61
     772:	fe b7       	in	r31, 0x3e	; 62
     774:	3a 96       	adiw	r30, 0x0a	; 10
     776:	0f b6       	in	r0, 0x3f	; 63
     778:	f8 94       	cli
     77a:	fe bf       	out	0x3e, r31	; 62
     77c:	0f be       	out	0x3f, r0	; 63
     77e:	ed bf       	out	0x3d, r30	; 61
     780:	ed 80       	ldd	r14, Y+5	; 0x05
     782:	fe 80       	ldd	r15, Y+6	; 0x06
     784:	8d b7       	in	r24, 0x3d	; 61
     786:	9e b7       	in	r25, 0x3e	; 62
     788:	8e 19       	sub	r24, r14
     78a:	9f 09       	sbc	r25, r15
     78c:	0f b6       	in	r0, 0x3f	; 63
     78e:	f8 94       	cli
     790:	9e bf       	out	0x3e, r25	; 62
     792:	0f be       	out	0x3f, r0	; 63
     794:	8d bf       	out	0x3d, r24	; 61
     796:	8d b6       	in	r8, 0x3d	; 61
     798:	9e b6       	in	r9, 0x3e	; 62
     79a:	08 94       	sec
     79c:	81 1c       	adc	r8, r1
     79e:	91 1c       	adc	r9, r1

	if (MS_Host_ReadDeviceBlocks(&FlashDisk_MS_Interface, 0, 0x00000000, 1, DiskCapacity.BlockSize, BlockBuffer))
     7a0:	80 e0       	ldi	r24, 0x00	; 0
     7a2:	91 e0       	ldi	r25, 0x01	; 1
     7a4:	60 e0       	ldi	r22, 0x00	; 0
     7a6:	20 e0       	ldi	r18, 0x00	; 0
     7a8:	30 e0       	ldi	r19, 0x00	; 0
     7aa:	40 e0       	ldi	r20, 0x00	; 0
     7ac:	50 e0       	ldi	r21, 0x00	; 0
     7ae:	01 e0       	ldi	r16, 0x01	; 1
     7b0:	64 01       	movw	r12, r8
     7b2:	0e 94 be 0c 	call	0x197c	; 0x197c <MS_Host_ReadDeviceBlocks>
     7b6:	88 23       	and	r24, r24
     7b8:	59 f0       	breq	.+22     	; 0x7d0 <MassStorageHost_Task+0x13e>
	{
		puts_P(PSTR("Error reading device block.\r\n"));
     7ba:	8a e2       	ldi	r24, 0x2A	; 42
     7bc:	93 e0       	ldi	r25, 0x03	; 3
     7be:	0e 94 9d 10 	call	0x213a	; 0x213a <puts_P>
     7c2:	8b b1       	in	r24, 0x0b	; 11
     7c4:	8f 70       	andi	r24, 0x0F	; 15
     7c6:	80 69       	ori	r24, 0x90	; 144
     7c8:	8b b9       	out	0x0b, r24	; 11
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		USB_Host_SetDeviceConfiguration(0);
     7ca:	80 e0       	ldi	r24, 0x00	; 0
     7cc:	43 d7       	rcall	.+3718   	; 0x1654 <USB_Host_SetDeviceConfiguration>
     7ce:	90 c0       	rjmp	.+288    	; 0x8f0 <MassStorageHost_Task+0x25e>
		return;
	}

	puts_P(PSTR("\r\nContents of first block:\r\n"));
     7d0:	8d e0       	ldi	r24, 0x0D	; 13
     7d2:	93 e0       	ldi	r25, 0x03	; 3
     7d4:	0e 94 9d 10 	call	0x213a	; 0x213a <puts_P>
     7d8:	aa 24       	eor	r10, r10
     7da:	bb 24       	eor	r11, r11

		/* Print out the 16 bytes of the chunk in HEX format */
		for (uint8_t ByteOffset = 0; ByteOffset < (1 << 4); ByteOffset++)
		{
			char CurrByte = *(ChunkPtr + ByteOffset);
			printf_P(PSTR("%.2X "), CurrByte);
     7dc:	a7 e0       	ldi	r26, 0x07	; 7
     7de:	2a 2e       	mov	r2, r26
     7e0:	a3 e0       	ldi	r26, 0x03	; 3
     7e2:	3a 2e       	mov	r3, r26
		}

		printf_P(PSTR("    "));
     7e4:	f2 e0       	ldi	r31, 0x02	; 2
     7e6:	4f 2e       	mov	r4, r31
     7e8:	f3 e0       	ldi	r31, 0x03	; 3
     7ea:	5f 2e       	mov	r5, r31
		{
			char CurrByte = *(ChunkPtr + ByteOffset);
			putchar(isprint(CurrByte) ? CurrByte : '.');
		}

		printf_P(PSTR("\r\n"));
     7ec:	ef ef       	ldi	r30, 0xFF	; 255
     7ee:	6e 2e       	mov	r6, r30
     7f0:	e2 e0       	ldi	r30, 0x02	; 2
     7f2:	7e 2e       	mov	r7, r30
     7f4:	5a c0       	rjmp	.+180    	; 0x8aa <MassStorageHost_Task+0x218>

	puts_P(PSTR("\r\nContents of first block:\r\n"));

	for (uint16_t Chunk = 0; Chunk < (DiskCapacity.BlockSize >> 4); Chunk++)
	{
		uint8_t* ChunkPtr = &BlockBuffer[Chunk << 4];
     7f6:	65 01       	movw	r12, r10
     7f8:	74 e0       	ldi	r23, 0x04	; 4
     7fa:	cc 0c       	add	r12, r12
     7fc:	dd 1c       	adc	r13, r13
     7fe:	7a 95       	dec	r23
     800:	e1 f7       	brne	.-8      	; 0x7fa <MassStorageHost_Task+0x168>
     802:	c8 0c       	add	r12, r8
     804:	d9 1c       	adc	r13, r9
     806:	00 e0       	ldi	r16, 0x00	; 0
     808:	10 e0       	ldi	r17, 0x00	; 0

		/* Print out the 16 bytes of the chunk in HEX format */
		for (uint8_t ByteOffset = 0; ByteOffset < (1 << 4); ByteOffset++)
		{
			char CurrByte = *(ChunkPtr + ByteOffset);
			printf_P(PSTR("%.2X "), CurrByte);
     80a:	00 d0       	rcall	.+0      	; 0x80c <MassStorageHost_Task+0x17a>
     80c:	00 d0       	rcall	.+0      	; 0x80e <MassStorageHost_Task+0x17c>
     80e:	ed b7       	in	r30, 0x3d	; 61
     810:	fe b7       	in	r31, 0x3e	; 62
     812:	31 96       	adiw	r30, 0x01	; 1
     814:	ad b7       	in	r26, 0x3d	; 61
     816:	be b7       	in	r27, 0x3e	; 62
     818:	12 96       	adiw	r26, 0x02	; 2
     81a:	3c 92       	st	X, r3
     81c:	2e 92       	st	-X, r2
     81e:	11 97       	sbiw	r26, 0x01	; 1
     820:	d6 01       	movw	r26, r12
     822:	a0 0f       	add	r26, r16
     824:	b1 1f       	adc	r27, r17
     826:	8c 91       	ld	r24, X
     828:	82 83       	std	Z+2, r24	; 0x02
     82a:	13 82       	std	Z+3, r1	; 0x03
     82c:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <printf_P>
     830:	0f 5f       	subi	r16, 0xFF	; 255
     832:	1f 4f       	sbci	r17, 0xFF	; 255
	for (uint16_t Chunk = 0; Chunk < (DiskCapacity.BlockSize >> 4); Chunk++)
	{
		uint8_t* ChunkPtr = &BlockBuffer[Chunk << 4];

		/* Print out the 16 bytes of the chunk in HEX format */
		for (uint8_t ByteOffset = 0; ByteOffset < (1 << 4); ByteOffset++)
     834:	0f 90       	pop	r0
     836:	0f 90       	pop	r0
     838:	0f 90       	pop	r0
     83a:	0f 90       	pop	r0
     83c:	00 31       	cpi	r16, 0x10	; 16
     83e:	11 05       	cpc	r17, r1
     840:	21 f7       	brne	.-56     	; 0x80a <MassStorageHost_Task+0x178>
		{
			char CurrByte = *(ChunkPtr + ByteOffset);
			printf_P(PSTR("%.2X "), CurrByte);
		}

		printf_P(PSTR("    "));
     842:	00 d0       	rcall	.+0      	; 0x844 <MassStorageHost_Task+0x1b2>
     844:	ed b7       	in	r30, 0x3d	; 61
     846:	fe b7       	in	r31, 0x3e	; 62
     848:	52 82       	std	Z+2, r5	; 0x02
     84a:	41 82       	std	Z+1, r4	; 0x01
     84c:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <printf_P>
     850:	ee 24       	eor	r14, r14
     852:	ff 24       	eor	r15, r15
     854:	0f 90       	pop	r0
     856:	0f 90       	pop	r0

		/* Print out the 16 bytes of the chunk in ASCII format */
		for (uint8_t ByteOffset = 0; ByteOffset < (1 << 4); ByteOffset++)
		{
			char CurrByte = *(ChunkPtr + ByteOffset);
			putchar(isprint(CurrByte) ? CurrByte : '.');
     858:	f6 01       	movw	r30, r12
     85a:	ee 0d       	add	r30, r14
     85c:	ff 1d       	adc	r31, r15
     85e:	80 81       	ld	r24, Z
     860:	08 2f       	mov	r16, r24
     862:	10 e0       	ldi	r17, 0x00	; 0
     864:	c8 01       	movw	r24, r16
     866:	0e 94 49 10 	call	0x2092	; 0x2092 <isprint>
     86a:	89 2b       	or	r24, r25
     86c:	11 f4       	brne	.+4      	; 0x872 <MassStorageHost_Task+0x1e0>
     86e:	0e e2       	ldi	r16, 0x2E	; 46
     870:	10 e0       	ldi	r17, 0x00	; 0
     872:	60 91 3e 01 	lds	r22, 0x013E
     876:	70 91 3f 01 	lds	r23, 0x013F
     87a:	c8 01       	movw	r24, r16
     87c:	0e 94 4f 10 	call	0x209e	; 0x209e <fputc>
     880:	08 94       	sec
     882:	e1 1c       	adc	r14, r1
     884:	f1 1c       	adc	r15, r1
		}

		printf_P(PSTR("    "));

		/* Print out the 16 bytes of the chunk in ASCII format */
		for (uint8_t ByteOffset = 0; ByteOffset < (1 << 4); ByteOffset++)
     886:	f0 e1       	ldi	r31, 0x10	; 16
     888:	ef 16       	cp	r14, r31
     88a:	f1 04       	cpc	r15, r1
     88c:	29 f7       	brne	.-54     	; 0x858 <MassStorageHost_Task+0x1c6>
		{
			char CurrByte = *(ChunkPtr + ByteOffset);
			putchar(isprint(CurrByte) ? CurrByte : '.');
		}

		printf_P(PSTR("\r\n"));
     88e:	00 d0       	rcall	.+0      	; 0x890 <MassStorageHost_Task+0x1fe>
     890:	ad b7       	in	r26, 0x3d	; 61
     892:	be b7       	in	r27, 0x3e	; 62
     894:	12 96       	adiw	r26, 0x02	; 2
     896:	7c 92       	st	X, r7
     898:	6e 92       	st	-X, r6
     89a:	11 97       	sbiw	r26, 0x01	; 1
     89c:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <printf_P>
		return;
	}

	puts_P(PSTR("\r\nContents of first block:\r\n"));

	for (uint16_t Chunk = 0; Chunk < (DiskCapacity.BlockSize >> 4); Chunk++)
     8a0:	08 94       	sec
     8a2:	a1 1c       	adc	r10, r1
     8a4:	b1 1c       	adc	r11, r1
     8a6:	0f 90       	pop	r0
     8a8:	0f 90       	pop	r0
     8aa:	95 01       	movw	r18, r10
     8ac:	40 e0       	ldi	r20, 0x00	; 0
     8ae:	50 e0       	ldi	r21, 0x00	; 0
     8b0:	8d 81       	ldd	r24, Y+5	; 0x05
     8b2:	9e 81       	ldd	r25, Y+6	; 0x06
     8b4:	af 81       	ldd	r26, Y+7	; 0x07
     8b6:	b8 85       	ldd	r27, Y+8	; 0x08
     8b8:	64 e0       	ldi	r22, 0x04	; 4
     8ba:	b6 95       	lsr	r27
     8bc:	a7 95       	ror	r26
     8be:	97 95       	ror	r25
     8c0:	87 95       	ror	r24
     8c2:	6a 95       	dec	r22
     8c4:	d1 f7       	brne	.-12     	; 0x8ba <MassStorageHost_Task+0x228>
     8c6:	28 17       	cp	r18, r24
     8c8:	39 07       	cpc	r19, r25
     8ca:	4a 07       	cpc	r20, r26
     8cc:	5b 07       	cpc	r21, r27
     8ce:	08 f4       	brcc	.+2      	; 0x8d2 <MassStorageHost_Task+0x240>
     8d0:	92 cf       	rjmp	.-220    	; 0x7f6 <MassStorageHost_Task+0x164>
     8d2:	8b b1       	in	r24, 0x0b	; 11
     8d4:	8f 70       	andi	r24, 0x0F	; 15
     8d6:	80 66       	ori	r24, 0x60	; 96
     8d8:	8b b9       	out	0x0b, r24	; 11

		printf_P(PSTR("\r\n"));
	}

	LEDs_SetAllLEDs(LEDMASK_USB_READY);
	USB_Host_SetDeviceConfiguration(0);
     8da:	80 e0       	ldi	r24, 0x00	; 0
     8dc:	bb d6       	rcall	.+3446   	; 0x1654 <USB_Host_SetDeviceConfiguration>
     8de:	2b 85       	ldd	r18, Y+11	; 0x0b
     8e0:	3c 85       	ldd	r19, Y+12	; 0x0c
     8e2:	c9 01       	movw	r24, r18
     8e4:	0f b6       	in	r0, 0x3f	; 63
     8e6:	f8 94       	cli
     8e8:	9e bf       	out	0x3e, r25	; 62
     8ea:	0f be       	out	0x3f, r0	; 63
     8ec:	8d bf       	out	0x3d, r24	; 61
     8ee:	08 c0       	rjmp	.+16     	; 0x900 <MassStorageHost_Task+0x26e>
     8f0:	8b 85       	ldd	r24, Y+11	; 0x0b
     8f2:	9c 85       	ldd	r25, Y+12	; 0x0c
     8f4:	9c 01       	movw	r18, r24
     8f6:	0f b6       	in	r0, 0x3f	; 63
     8f8:	f8 94       	cli
     8fa:	3e bf       	out	0x3e, r19	; 62
     8fc:	0f be       	out	0x3f, r0	; 63
     8fe:	2d bf       	out	0x3d, r18	; 61
}
     900:	e9 85       	ldd	r30, Y+9	; 0x09
     902:	fa 85       	ldd	r31, Y+10	; 0x0a
     904:	0f b6       	in	r0, 0x3f	; 63
     906:	f8 94       	cli
     908:	fe bf       	out	0x3e, r31	; 62
     90a:	0f be       	out	0x3f, r0	; 63
     90c:	ed bf       	out	0x3d, r30	; 61
     90e:	2c 96       	adiw	r28, 0x0c	; 12
     910:	0f b6       	in	r0, 0x3f	; 63
     912:	f8 94       	cli
     914:	de bf       	out	0x3e, r29	; 62
     916:	0f be       	out	0x3f, r0	; 63
     918:	cd bf       	out	0x3d, r28	; 61
     91a:	cf 91       	pop	r28
     91c:	df 91       	pop	r29
     91e:	1f 91       	pop	r17
     920:	0f 91       	pop	r16
     922:	ff 90       	pop	r15
     924:	ef 90       	pop	r14
     926:	df 90       	pop	r13
     928:	cf 90       	pop	r12
     92a:	bf 90       	pop	r11
     92c:	af 90       	pop	r10
     92e:	9f 90       	pop	r9
     930:	8f 90       	pop	r8
     932:	7f 90       	pop	r7
     934:	6f 90       	pop	r6
     936:	5f 90       	pop	r5
     938:	4f 90       	pop	r4
     93a:	3f 90       	pop	r3
     93c:	2f 90       	pop	r2
     93e:	08 95       	ret

00000940 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     940:	84 b7       	in	r24, 0x34	; 52
     942:	87 7f       	andi	r24, 0xF7	; 247
     944:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     946:	38 e1       	ldi	r19, 0x18	; 24
     948:	0f b6       	in	r0, 0x3f	; 63
     94a:	f8 94       	cli
     94c:	30 93 60 00 	sts	0x0060, r19
     950:	10 92 60 00 	sts	0x0060, r1
     954:	0f be       	out	0x3f, r0	; 63

	/* Disable clock division */
	clock_prescale_set(clock_div_1);
     956:	80 e0       	ldi	r24, 0x00	; 0
     958:	90 e0       	ldi	r25, 0x00	; 0
     95a:	20 e8       	ldi	r18, 0x80	; 128
     95c:	0f b6       	in	r0, 0x3f	; 63
     95e:	f8 94       	cli
     960:	20 93 61 00 	sts	0x0061, r18
     964:	80 93 61 00 	sts	0x0061, r24
     968:	0f be       	out	0x3f, r0	; 63
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     96a:	83 e3       	ldi	r24, 0x33	; 51
     96c:	90 e0       	ldi	r25, 0x00	; 0
     96e:	90 93 cd 00 	sts	0x00CD, r25
     972:	80 93 cc 00 	sts	0x00CC, r24

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     976:	86 e0       	ldi	r24, 0x06	; 6
     978:	80 93 ca 00 	sts	0x00CA, r24
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     97c:	10 92 c8 00 	sts	0x00C8, r1
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     980:	30 93 c9 00 	sts	0x00C9, r19

				DDRD  |= (1 << 3);
     984:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     986:	5a 9a       	sbi	0x0b, 2	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     988:	8a b1       	in	r24, 0x0a	; 10
     98a:	80 6f       	ori	r24, 0xF0	; 240
     98c:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     98e:	8b b1       	in	r24, 0x0b	; 11
     990:	8f 70       	andi	r24, 0x0F	; 15
     992:	8b b9       	out	0x0b, r24	; 11

	/* Hardware Initialization */
	Serial_Init(9600, false);
	LEDs_Init();
	USB_Init();
     994:	0a d3       	rcall	.+1556   	; 0xfaa <USB_Init>
			static inline void Serial_CreateStream(FILE* Stream)
			{
				if (!(Stream))
				{
					Stream = &USARTSerialStream;
					stdin  = Stream;
     996:	ee e2       	ldi	r30, 0x2E	; 46
     998:	f1 e0       	ldi	r31, 0x01	; 1
     99a:	f0 93 3d 01 	sts	0x013D, r31
     99e:	e0 93 3c 01 	sts	0x013C, r30
					stdout = Stream;
     9a2:	f0 93 3f 01 	sts	0x013F, r31
     9a6:	e0 93 3e 01 	sts	0x013E, r30
				}
			
				*Stream = (FILE)FDEV_SETUP_STREAM(Serial_putchar, Serial_getchar, _FDEV_SETUP_RW);
     9aa:	8e e0       	ldi	r24, 0x0E	; 14
     9ac:	df 01       	movw	r26, r30
     9ae:	1d 92       	st	X+, r1
     9b0:	8a 95       	dec	r24
     9b2:	e9 f7       	brne	.-6      	; 0x9ae <SetupHardware+0x6e>
     9b4:	83 e0       	ldi	r24, 0x03	; 3
     9b6:	80 93 31 01 	sts	0x0131, r24
     9ba:	8a e0       	ldi	r24, 0x0A	; 10
     9bc:	90 e1       	ldi	r25, 0x10	; 16
     9be:	90 93 37 01 	sts	0x0137, r25
     9c2:	80 93 36 01 	sts	0x0136, r24
     9c6:	84 e1       	ldi	r24, 0x14	; 20
     9c8:	90 e1       	ldi	r25, 0x10	; 16
     9ca:	90 93 39 01 	sts	0x0139, r25
     9ce:	80 93 38 01 	sts	0x0138, r24

	/* Create a stdio stream for the serial port for stdin and stdout */
	Serial_CreateStream(NULL);
}
     9d2:	08 95       	ret

000009d4 <main>:
/** Main program entry point. This routine configures the hardware required by the application, then
 *  enters a loop to run the application tasks in sequence.
 */
int main(void)
{
	SetupHardware();
     9d4:	b5 df       	rcall	.-150    	; 0x940 <SetupHardware>

	puts_P(PSTR(ESC_FG_CYAN "Mass Storage Host Demo running.\r\n" ESC_FG_WHITE));
     9d6:	81 ee       	ldi	r24, 0xE1	; 225
     9d8:	93 e0       	ldi	r25, 0x03	; 3
     9da:	0e 94 9d 10 	call	0x213a	; 0x213a <puts_P>
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     9de:	8b b1       	in	r24, 0x0b	; 11
     9e0:	8f 70       	andi	r24, 0x0F	; 15
     9e2:	80 61       	ori	r24, 0x10	; 16
     9e4:	8b b9       	out	0x0b, r24	; 11

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
	sei();
     9e6:	78 94       	sei

	for (;;)
	{
		MassStorageHost_Task();
     9e8:	54 de       	rcall	.-856    	; 0x692 <MassStorageHost_Task>
		
		MS_Host_USBTask(&FlashDisk_MS_Interface);
		USB_USBTask();
     9ea:	59 d6       	rcall	.+3250   	; 0x169e <USB_USBTask>
     9ec:	fd cf       	rjmp	.-6      	; 0x9e8 <main+0x14>

000009ee <USB_Host_WaitMS>:
		USB_ResetInterface();
	}
}

uint8_t USB_Host_WaitMS(uint8_t MS)
{
     9ee:	98 2f       	mov	r25, r24
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     9f0:	20 91 9e 00 	lds	r18, 0x009E
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     9f4:	30 91 a0 00 	lds	r19, 0x00A0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     9f8:	80 91 a0 00 	lds	r24, 0x00A0
     9fc:	8f 7d       	andi	r24, 0xDF	; 223
     9fe:	80 93 a0 00 	sts	0x00A0, r24
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     a02:	80 91 9f 00 	lds	r24, 0x009F
     a06:	8f 7d       	andi	r24, 0xDF	; 223
     a08:	80 93 9f 00 	sts	0x009F, r24
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     a0c:	80 91 9e 00 	lds	r24, 0x009E
     a10:	81 60       	ori	r24, 0x01	; 1
     a12:	80 93 9e 00 	sts	0x009E, r24
     a16:	28 c0       	rjmp	.+80     	; 0xa68 <USB_Host_WaitMS+0x7a>
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     a18:	80 91 9f 00 	lds	r24, 0x009F

	USB_Host_ResumeBus();

	while (MS)
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     a1c:	85 ff       	sbrs	r24, 5
     a1e:	06 c0       	rjmp	.+12     	; 0xa2c <USB_Host_WaitMS+0x3e>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     a20:	80 91 9f 00 	lds	r24, 0x009F
     a24:	8f 7d       	andi	r24, 0xDF	; 223
     a26:	80 93 9f 00 	sts	0x009F, r24
		{
			USB_INT_Clear(USB_INT_HSOFI);
			MS--;
     a2a:	91 50       	subi	r25, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
     a2c:	80 91 2d 01 	lds	r24, 0x012D
     a30:	81 30       	cpi	r24, 0x01	; 1
     a32:	11 f4       	brne	.+4      	; 0xa38 <USB_Host_WaitMS+0x4a>
     a34:	91 e0       	ldi	r25, 0x01	; 1
     a36:	1a c0       	rjmp	.+52     	; 0xa6c <USB_Host_WaitMS+0x7e>
			 *  \return Boolean \c true if an error has occurred on the selected pipe, \c false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
     a38:	80 91 a6 00 	lds	r24, 0x00A6
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError() == true)
     a3c:	84 ff       	sbrs	r24, 4
     a3e:	09 c0       	rjmp	.+18     	; 0xa52 <USB_Host_WaitMS+0x64>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     a40:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
     a44:	80 91 a6 00 	lds	r24, 0x00A6
     a48:	8f 7e       	andi	r24, 0xEF	; 239
     a4a:	80 93 a6 00 	sts	0x00A6, r24
     a4e:	92 e0       	ldi	r25, 0x02	; 2
     a50:	0d c0       	rjmp	.+26     	; 0xa6c <USB_Host_WaitMS+0x7e>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     a52:	80 91 a6 00 	lds	r24, 0x00A6
			ErrorCode = HOST_WAITERROR_PipeError;

			break;
		}

		if (Pipe_IsStalled() == true)
     a56:	81 ff       	sbrs	r24, 1
     a58:	07 c0       	rjmp	.+14     	; 0xa68 <USB_Host_WaitMS+0x7a>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
     a5a:	80 91 a6 00 	lds	r24, 0x00A6
     a5e:	8d 7f       	andi	r24, 0xFD	; 253
     a60:	80 93 a6 00 	sts	0x00A6, r24
     a64:	93 e0       	ldi	r25, 0x03	; 3
     a66:	02 c0       	rjmp	.+4      	; 0xa6c <USB_Host_WaitMS+0x7e>
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     a68:	99 23       	and	r25, r25
     a6a:	b1 f6       	brne	.-84     	; 0xa18 <USB_Host_WaitMS+0x2a>

			break;
		}
	}

	if (BusSuspended)
     a6c:	20 fd       	sbrc	r18, 0
     a6e:	05 c0       	rjmp	.+10     	; 0xa7a <USB_Host_WaitMS+0x8c>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     a70:	80 91 9e 00 	lds	r24, 0x009E
     a74:	8e 7f       	andi	r24, 0xFE	; 254
     a76:	80 93 9e 00 	sts	0x009E, r24
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
     a7a:	35 ff       	sbrs	r19, 5
     a7c:	05 c0       	rjmp	.+10     	; 0xa88 <USB_Host_WaitMS+0x9a>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     a7e:	80 91 a0 00 	lds	r24, 0x00A0
     a82:	80 62       	ori	r24, 0x20	; 32
     a84:	80 93 a0 00 	sts	0x00A0, r24
	  USB_INT_Enable(USB_INT_HSOFI);

	return ErrorCode;
}
     a88:	89 2f       	mov	r24, r25
     a8a:	08 95       	ret

00000a8c <USB_Host_ResetDevice>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     a8c:	60 91 9e 00 	lds	r22, 0x009E
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     a90:	80 91 a0 00 	lds	r24, 0x00A0
     a94:	8d 7f       	andi	r24, 0xFD	; 253
     a96:	80 93 a0 00 	sts	0x00A0, r24
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
     a9a:	80 91 9e 00 	lds	r24, 0x009E
     a9e:	82 60       	ori	r24, 0x02	; 2
     aa0:	80 93 9e 00 	sts	0x009E, r24
			 *  \return Boolean \c true if no bus reset is currently being sent, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
     aa4:	80 91 9e 00 	lds	r24, 0x009E
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
     aa8:	81 fd       	sbrc	r24, 1
     aaa:	fc cf       	rjmp	.-8      	; 0xaa4 <USB_Host_ResetDevice+0x18>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     aac:	80 91 9e 00 	lds	r24, 0x009E
     ab0:	81 60       	ori	r24, 0x01	; 1
     ab2:	80 93 9e 00 	sts	0x009E, r24
	USB_Host_ResumeBus();
	
	USB_Host_ConfigurationNumber = 0;
     ab6:	10 92 23 01 	sts	0x0123, r1
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     aba:	30 91 a0 00 	lds	r19, 0x00A0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     abe:	80 91 a0 00 	lds	r24, 0x00A0
     ac2:	8f 7d       	andi	r24, 0xDF	; 223
     ac4:	80 93 a0 00 	sts	0x00A0, r24
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     ac8:	80 91 9f 00 	lds	r24, 0x009F
     acc:	8f 7d       	andi	r24, 0xDF	; 223
     ace:	80 93 9f 00 	sts	0x009F, r24
     ad2:	2a e0       	ldi	r18, 0x0A	; 10
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     ad4:	40 ed       	ldi	r20, 0xD0	; 208
     ad6:	57 e0       	ldi	r21, 0x07	; 7
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     ad8:	80 91 9f 00 	lds	r24, 0x009F
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     adc:	85 ff       	sbrs	r24, 5
     ade:	0b c0       	rjmp	.+22     	; 0xaf6 <USB_Host_ResetDevice+0x6a>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     ae0:	80 91 9f 00 	lds	r24, 0x009F
     ae4:	8f 7d       	andi	r24, 0xDF	; 223
     ae6:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     aea:	80 91 9f 00 	lds	r24, 0x009F
     aee:	8d 7f       	andi	r24, 0xFD	; 253
     af0:	80 93 9f 00 	sts	0x009F, r24
     af4:	05 c0       	rjmp	.+10     	; 0xb00 <USB_Host_ResetDevice+0x74>
     af6:	ca 01       	movw	r24, r20
     af8:	01 97       	sbiw	r24, 0x01	; 1
     afa:	f1 f7       	brne	.-4      	; 0xaf8 <USB_Host_ResetDevice+0x6c>
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
     afc:	21 50       	subi	r18, 0x01	; 1
     afe:	61 f7       	brne	.-40     	; 0xad8 <USB_Host_ResetDevice+0x4c>
		}

		Delay_MS(1);
	}

	if (HSOFIEnabled)
     b00:	35 ff       	sbrs	r19, 5
     b02:	05 c0       	rjmp	.+10     	; 0xb0e <USB_Host_ResetDevice+0x82>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     b04:	80 91 a0 00 	lds	r24, 0x00A0
     b08:	80 62       	ori	r24, 0x20	; 32
     b0a:	80 93 a0 00 	sts	0x00A0, r24
	  USB_INT_Enable(USB_INT_HSOFI);

	if (BusSuspended)
     b0e:	60 fd       	sbrc	r22, 0
     b10:	05 c0       	rjmp	.+10     	; 0xb1c <USB_Host_ResetDevice+0x90>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     b12:	80 91 9e 00 	lds	r24, 0x009E
     b16:	8e 7f       	andi	r24, 0xFE	; 254
     b18:	80 93 9e 00 	sts	0x009E, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     b1c:	80 91 a0 00 	lds	r24, 0x00A0
     b20:	82 60       	ori	r24, 0x02	; 2
     b22:	80 93 a0 00 	sts	0x00A0, r24
	  USB_Host_SuspendBus();

	USB_INT_Enable(USB_INT_DDISCI);
}
     b26:	08 95       	ret

00000b28 <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "../Host.h"

void USB_Host_ProcessNextHostState(void)
{
     b28:	ef 92       	push	r14
     b2a:	0f 93       	push	r16
     b2c:	1f 93       	push	r17
     b2e:	df 93       	push	r29
     b30:	cf 93       	push	r28
     b32:	cd b7       	in	r28, 0x3d	; 61
     b34:	de b7       	in	r29, 0x3e	; 62
     b36:	28 97       	sbiw	r28, 0x08	; 8
     b38:	0f b6       	in	r0, 0x3f	; 63
     b3a:	f8 94       	cli
     b3c:	de bf       	out	0x3e, r29	; 62
     b3e:	0f be       	out	0x3f, r0	; 63
     b40:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
     b42:	80 91 2d 01 	lds	r24, 0x012D
     b46:	85 30       	cpi	r24, 0x05	; 5
     b48:	09 f4       	brne	.+2      	; 0xb4c <USB_Host_ProcessNextHostState+0x24>
     b4a:	94 c0       	rjmp	.+296    	; 0xc74 <USB_Host_ProcessNextHostState+0x14c>
     b4c:	86 30       	cpi	r24, 0x06	; 6
     b4e:	68 f4       	brcc	.+26     	; 0xb6a <USB_Host_ProcessNextHostState+0x42>
     b50:	82 30       	cpi	r24, 0x02	; 2
     b52:	b9 f1       	breq	.+110    	; 0xbc2 <USB_Host_ProcessNextHostState+0x9a>
     b54:	83 30       	cpi	r24, 0x03	; 3
     b56:	18 f4       	brcc	.+6      	; 0xb5e <USB_Host_ProcessNextHostState+0x36>
     b58:	88 23       	and	r24, r24
     b5a:	a1 f0       	breq	.+40     	; 0xb84 <USB_Host_ProcessNextHostState+0x5c>
     b5c:	04 c1       	rjmp	.+520    	; 0xd66 <USB_Host_ProcessNextHostState+0x23e>
     b5e:	83 30       	cpi	r24, 0x03	; 3
     b60:	d1 f1       	breq	.+116    	; 0xbd6 <USB_Host_ProcessNextHostState+0xae>
     b62:	84 30       	cpi	r24, 0x04	; 4
     b64:	09 f0       	breq	.+2      	; 0xb68 <USB_Host_ProcessNextHostState+0x40>
     b66:	ff c0       	rjmp	.+510    	; 0xd66 <USB_Host_ProcessNextHostState+0x23e>
     b68:	5d c0       	rjmp	.+186    	; 0xc24 <USB_Host_ProcessNextHostState+0xfc>
     b6a:	87 30       	cpi	r24, 0x07	; 7
     b6c:	09 f4       	brne	.+2      	; 0xb70 <USB_Host_ProcessNextHostState+0x48>
     b6e:	9b c0       	rjmp	.+310    	; 0xca6 <USB_Host_ProcessNextHostState+0x17e>
     b70:	87 30       	cpi	r24, 0x07	; 7
     b72:	08 f4       	brcc	.+2      	; 0xb76 <USB_Host_ProcessNextHostState+0x4e>
     b74:	8a c0       	rjmp	.+276    	; 0xc8a <USB_Host_ProcessNextHostState+0x162>
     b76:	88 30       	cpi	r24, 0x08	; 8
     b78:	09 f4       	brne	.+2      	; 0xb7c <USB_Host_ProcessNextHostState+0x54>
     b7a:	b3 c0       	rjmp	.+358    	; 0xce2 <USB_Host_ProcessNextHostState+0x1ba>
     b7c:	89 30       	cpi	r24, 0x09	; 9
     b7e:	09 f0       	breq	.+2      	; 0xb82 <USB_Host_ProcessNextHostState+0x5a>
     b80:	f2 c0       	rjmp	.+484    	; 0xd66 <USB_Host_ProcessNextHostState+0x23e>
     b82:	d7 c0       	rjmp	.+430    	; 0xd32 <USB_Host_ProcessNextHostState+0x20a>
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
     b84:	00 91 21 01 	lds	r16, 0x0121
     b88:	10 91 22 01 	lds	r17, 0x0122
     b8c:	01 15       	cp	r16, r1
     b8e:	11 05       	cpc	r17, r1
     b90:	09 f4       	brne	.+2      	; 0xb94 <USB_Host_ProcessNextHostState+0x6c>
     b92:	e9 c0       	rjmp	.+466    	; 0xd66 <USB_Host_ProcessNextHostState+0x23e>
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     b94:	81 e0       	ldi	r24, 0x01	; 1
     b96:	2b df       	rcall	.-426    	; 0x9ee <USB_Host_WaitMS>
     b98:	68 2f       	mov	r22, r24
     b9a:	88 23       	and	r24, r24
     b9c:	31 f0       	breq	.+12     	; 0xbaa <USB_Host_ProcessNextHostState+0x82>
				{
					USB_HostState = PostWaitState;
     b9e:	80 91 20 01 	lds	r24, 0x0120
     ba2:	80 93 2d 01 	sts	0x012D, r24
     ba6:	91 e0       	ldi	r25, 0x01	; 1
     ba8:	da c0       	rjmp	.+436    	; 0xd5e <USB_Host_ProcessNextHostState+0x236>
					ErrorCode     = HOST_ENUMERROR_WaitStage;
					break;
				}

				if (!(--WaitMSRemaining))
     baa:	c8 01       	movw	r24, r16
     bac:	01 97       	sbiw	r24, 0x01	; 1
     bae:	90 93 22 01 	sts	0x0122, r25
     bb2:	80 93 21 01 	sts	0x0121, r24
     bb6:	89 2b       	or	r24, r25
     bb8:	09 f0       	breq	.+2      	; 0xbbc <USB_Host_ProcessNextHostState+0x94>
     bba:	d5 c0       	rjmp	.+426    	; 0xd66 <USB_Host_ProcessNextHostState+0x23e>
				  USB_HostState = PostWaitState;
     bbc:	80 91 20 01 	lds	r24, 0x0120
     bc0:	07 c0       	rjmp	.+14     	; 0xbd0 <USB_Host_ProcessNextHostState+0xa8>
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
     bc2:	88 ee       	ldi	r24, 0xE8	; 232
     bc4:	93 e0       	ldi	r25, 0x03	; 3
     bc6:	90 93 22 01 	sts	0x0122, r25
     bca:	80 93 21 01 	sts	0x0121, r24

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
     bce:	83 e0       	ldi	r24, 0x03	; 3
     bd0:	80 93 2d 01 	sts	0x012D, r24
     bd4:	c8 c0       	rjmp	.+400    	; 0xd66 <USB_Host_ProcessNextHostState+0x23e>
			break;
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
     bd6:	80 91 21 01 	lds	r24, 0x0121
     bda:	90 91 22 01 	lds	r25, 0x0122
     bde:	01 97       	sbiw	r24, 0x01	; 1
     be0:	90 93 22 01 	sts	0x0122, r25
     be4:	80 93 21 01 	sts	0x0121, r24
     be8:	01 96       	adiw	r24, 0x01	; 1
     bea:	29 f0       	breq	.+10     	; 0xbf6 <USB_Host_ProcessNextHostState+0xce>
     bec:	80 ed       	ldi	r24, 0xD0	; 208
     bee:	97 e0       	ldi	r25, 0x07	; 7
     bf0:	01 97       	sbiw	r24, 0x01	; 1
     bf2:	f1 f7       	brne	.-4      	; 0xbf0 <USB_Host_ProcessNextHostState+0xc8>
     bf4:	b8 c0       	rjmp	.+368    	; 0xd66 <USB_Host_ProcessNextHostState+0x23e>
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
     bf6:	77 98       	cbi	0x0e, 7	; 14

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     bf8:	80 91 d8 00 	lds	r24, 0x00D8
     bfc:	80 61       	ori	r24, 0x10	; 16
     bfe:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
     c02:	80 91 dd 00 	lds	r24, 0x00DD
     c06:	8b 7f       	andi	r24, 0xFB	; 251
     c08:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON |=  (1 << UVCONE);
     c0c:	80 91 d7 00 	lds	r24, 0x00D7
     c10:	80 61       	ori	r24, 0x10	; 16
     c12:	80 93 d7 00 	sts	0x00D7, r24
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
     c16:	80 91 dd 00 	lds	r24, 0x00DD
     c1a:	82 60       	ori	r24, 0x02	; 2
     c1c:	80 93 dd 00 	sts	0x00DD, r24

				USB_OTGPAD_On();
				USB_Host_VBUS_Auto_Enable();
				USB_Host_VBUS_Auto_On();

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
     c20:	84 e0       	ldi	r24, 0x04	; 4
     c22:	d6 cf       	rjmp	.-84     	; 0xbd0 <USB_Host_ProcessNextHostState+0xa8>
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
     c24:	80 91 9f 00 	lds	r24, 0x009F
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
     c28:	80 ff       	sbrs	r24, 0
     c2a:	9d c0       	rjmp	.+314    	; 0xd66 <USB_Host_ProcessNextHostState+0x23e>
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     c2c:	80 91 9f 00 	lds	r24, 0x009F
     c30:	8e 7f       	andi	r24, 0xFE	; 254
     c32:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     c36:	80 91 9f 00 	lds	r24, 0x009F
     c3a:	8d 7f       	andi	r24, 0xFD	; 253
     c3c:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     c40:	80 91 df 00 	lds	r24, 0x00DF
     c44:	8d 7f       	andi	r24, 0xFD	; 253
     c46:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
     c4a:	80 91 de 00 	lds	r24, 0x00DE
     c4e:	82 60       	ori	r24, 0x02	; 2
     c50:	80 93 de 00 	sts	0x00DE, r24
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     c54:	80 91 9e 00 	lds	r24, 0x009E
     c58:	81 60       	ori	r24, 0x01	; 1
     c5a:	80 93 9e 00 	sts	0x009E, r24

				USB_INT_Clear(USB_INT_VBERRI);
				USB_INT_Enable(USB_INT_VBERRI);

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
     c5e:	ed d0       	rcall	.+474    	; 0xe3a <Pipe_ClearPipes>

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
     c60:	10 92 2d 01 	sts	0x012D, r1
     c64:	84 e6       	ldi	r24, 0x64	; 100
     c66:	90 e0       	ldi	r25, 0x00	; 0
     c68:	90 93 22 01 	sts	0x0122, r25
     c6c:	80 93 21 01 	sts	0x0121, r24
     c70:	85 e0       	ldi	r24, 0x05	; 5
     c72:	5c c0       	rjmp	.+184    	; 0xd2c <USB_Host_ProcessNextHostState+0x204>
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
     c74:	0b df       	rcall	.-490    	; 0xa8c <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
     c76:	10 92 2d 01 	sts	0x012D, r1
     c7a:	88 ec       	ldi	r24, 0xC8	; 200
     c7c:	90 e0       	ldi	r25, 0x00	; 0
     c7e:	90 93 22 01 	sts	0x0122, r25
     c82:	80 93 21 01 	sts	0x0121, r24
     c86:	86 e0       	ldi	r24, 0x06	; 6
     c88:	51 c0       	rjmp	.+162    	; 0xd2c <USB_Host_ProcessNextHostState+0x204>
			break;
		case HOST_STATE_Powered_ConfigPipe:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
     c8a:	80 e0       	ldi	r24, 0x00	; 0
     c8c:	60 e0       	ldi	r22, 0x00	; 0
     c8e:	40 e0       	ldi	r20, 0x00	; 0
     c90:	20 e0       	ldi	r18, 0x00	; 0
     c92:	00 e4       	ldi	r16, 0x40	; 64
     c94:	10 e0       	ldi	r17, 0x00	; 0
     c96:	ee 24       	eor	r14, r14
     c98:	72 d0       	rcall	.+228    	; 0xd7e <Pipe_ConfigurePipe>
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     c9a:	80 91 ac 00 	lds	r24, 0x00AC
							   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
							   PIPE_CONTROLPIPE_DEFAULT_SIZE, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
     c9e:	87 ff       	sbrs	r24, 7
     ca0:	5c c0       	rjmp	.+184    	; 0xd5a <USB_Host_ProcessNextHostState+0x232>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
     ca2:	87 e0       	ldi	r24, 0x07	; 7
     ca4:	95 cf       	rjmp	.-214    	; 0xbd0 <USB_Host_ProcessNextHostState+0xa8>
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
     ca6:	a5 e2       	ldi	r26, 0x25	; 37
     ca8:	b1 e0       	ldi	r27, 0x01	; 1
     caa:	e6 e1       	ldi	r30, 0x16	; 22
     cac:	f1 e0       	ldi	r31, 0x01	; 1
     cae:	88 e0       	ldi	r24, 0x08	; 8
     cb0:	01 90       	ld	r0, Z+
     cb2:	0d 92       	st	X+, r0
     cb4:	81 50       	subi	r24, 0x01	; 1
     cb6:	e1 f7       	brne	.-8      	; 0xcb0 <USB_Host_ProcessNextHostState+0x188>
					.wLength       = 8,
				};

			uint8_t DataBuffer[8];

			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
     cb8:	ce 01       	movw	r24, r28
     cba:	01 96       	adiw	r24, 0x01	; 1
     cbc:	ad d3       	rcall	.+1882   	; 0x1418 <USB_Host_SendControlRequest>
     cbe:	68 2f       	mov	r22, r24
     cc0:	88 23       	and	r24, r24
     cc2:	09 f0       	breq	.+2      	; 0xcc6 <USB_Host_ProcessNextHostState+0x19e>
     cc4:	48 c0       	rjmp	.+144    	; 0xd56 <USB_Host_ProcessNextHostState+0x22e>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_Host_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
     cc6:	88 85       	ldd	r24, Y+8	; 0x08
     cc8:	80 93 1e 01 	sts	0x011E, r24

			USB_Host_ResetDevice();
     ccc:	df de       	rcall	.-578    	; 0xa8c <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
     cce:	10 92 2d 01 	sts	0x012D, r1
     cd2:	88 ec       	ldi	r24, 0xC8	; 200
     cd4:	90 e0       	ldi	r25, 0x00	; 0
     cd6:	90 93 22 01 	sts	0x0122, r25
     cda:	80 93 21 01 	sts	0x0121, r24
     cde:	88 e0       	ldi	r24, 0x08	; 8
     ce0:	25 c0       	rjmp	.+74     	; 0xd2c <USB_Host_ProcessNextHostState+0x204>
			break;
		case HOST_STATE_Default_PostReset:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
     ce2:	00 91 1e 01 	lds	r16, 0x011E
     ce6:	80 e0       	ldi	r24, 0x00	; 0
     ce8:	60 e0       	ldi	r22, 0x00	; 0
     cea:	40 e0       	ldi	r20, 0x00	; 0
     cec:	20 e0       	ldi	r18, 0x00	; 0
     cee:	10 e0       	ldi	r17, 0x00	; 0
     cf0:	ee 24       	eor	r14, r14
     cf2:	45 d0       	rcall	.+138    	; 0xd7e <Pipe_ConfigurePipe>
     cf4:	80 91 ac 00 	lds	r24, 0x00AC
			                   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
			                   USB_Host_ControlPipeSize, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
     cf8:	87 ff       	sbrs	r24, 7
     cfa:	2f c0       	rjmp	.+94     	; 0xd5a <USB_Host_ProcessNextHostState+0x232>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
     cfc:	a5 e2       	ldi	r26, 0x25	; 37
     cfe:	b1 e0       	ldi	r27, 0x01	; 1
     d00:	ee e0       	ldi	r30, 0x0E	; 14
     d02:	f1 e0       	ldi	r31, 0x01	; 1
     d04:	88 e0       	ldi	r24, 0x08	; 8
     d06:	01 90       	ld	r0, Z+
     d08:	0d 92       	st	X+, r0
     d0a:	81 50       	subi	r24, 0x01	; 1
     d0c:	e1 f7       	brne	.-8      	; 0xd06 <USB_Host_ProcessNextHostState+0x1de>
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	90 e0       	ldi	r25, 0x00	; 0
     d12:	82 d3       	rcall	.+1796   	; 0x1418 <USB_Host_SendControlRequest>
     d14:	68 2f       	mov	r22, r24
     d16:	88 23       	and	r24, r24
     d18:	f1 f4       	brne	.+60     	; 0xd56 <USB_Host_ProcessNextHostState+0x22e>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
     d1a:	10 92 2d 01 	sts	0x012D, r1
     d1e:	84 e6       	ldi	r24, 0x64	; 100
     d20:	90 e0       	ldi	r25, 0x00	; 0
     d22:	90 93 22 01 	sts	0x0122, r25
     d26:	80 93 21 01 	sts	0x0121, r24
     d2a:	89 e0       	ldi	r24, 0x09	; 9
     d2c:	80 93 20 01 	sts	0x0120, r24
     d30:	1a c0       	rjmp	.+52     	; 0xd66 <USB_Host_ProcessNextHostState+0x23e>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
     d32:	81 e0       	ldi	r24, 0x01	; 1
     d34:	80 93 a1 00 	sts	0x00A1, r24
			break;
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			USB_HostState = HOST_STATE_Addressed;
     d38:	8a e0       	ldi	r24, 0x0A	; 10
     d3a:	80 93 2d 01 	sts	0x012D, r24

			EVENT_USB_Host_DeviceEnumerationComplete();
     d3e:	e1 db       	rcall	.-2110   	; 0x502 <EVENT_USB_Host_DeviceEnumerationComplete>
     d40:	12 c0       	rjmp	.+36     	; 0xd66 <USB_Host_ProcessNextHostState+0x23e>
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
     d42:	89 2f       	mov	r24, r25
     d44:	83 db       	rcall	.-2298   	; 0x44c <EVENT_USB_Host_DeviceEnumerationFailed>
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     d46:	80 91 dd 00 	lds	r24, 0x00DD
     d4a:	81 60       	ori	r24, 0x01	; 1
     d4c:	80 93 dd 00 	sts	0x00DD, r24

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
     d50:	c6 db       	rcall	.-2164   	; 0x4de <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     d52:	db d0       	rcall	.+438    	; 0xf0a <USB_ResetInterface>
     d54:	08 c0       	rjmp	.+16     	; 0xd66 <USB_Host_ProcessNextHostState+0x23e>
	}
}
     d56:	93 e0       	ldi	r25, 0x03	; 3
     d58:	02 c0       	rjmp	.+4      	; 0xd5e <USB_Host_ProcessNextHostState+0x236>
     d5a:	94 e0       	ldi	r25, 0x04	; 4
     d5c:	60 e0       	ldi	r22, 0x00	; 0

			EVENT_USB_Host_DeviceEnumerationComplete();
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
     d5e:	80 91 2d 01 	lds	r24, 0x012D
     d62:	81 30       	cpi	r24, 0x01	; 1
     d64:	71 f7       	brne	.-36     	; 0xd42 <USB_Host_ProcessNextHostState+0x21a>

		EVENT_USB_Host_DeviceUnattached();

		USB_ResetInterface();
	}
}
     d66:	28 96       	adiw	r28, 0x08	; 8
     d68:	0f b6       	in	r0, 0x3f	; 63
     d6a:	f8 94       	cli
     d6c:	de bf       	out	0x3e, r29	; 62
     d6e:	0f be       	out	0x3f, r0	; 63
     d70:	cd bf       	out	0x3d, r28	; 61
     d72:	cf 91       	pop	r28
     d74:	df 91       	pop	r29
     d76:	1f 91       	pop	r17
     d78:	0f 91       	pop	r16
     d7a:	ef 90       	pop	r14
     d7c:	08 95       	ret

00000d7e <Pipe_ConfigurePipe>:
                        const uint8_t Type,
                        const uint8_t Token,
                        const uint8_t EndpointNumber,
                        const uint16_t Size,
                        const uint8_t Banks)
{
     d7e:	ef 92       	push	r14
     d80:	0f 93       	push	r16
     d82:	1f 93       	push	r17
     d84:	e8 2f       	mov	r30, r24
     d86:	7e 2d       	mov	r23, r14

		Pipe_SelectPipe(PNum);
		
		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
     d88:	62 95       	swap	r22
     d8a:	66 0f       	add	r22, r22
     d8c:	66 0f       	add	r22, r22
     d8e:	60 7c       	andi	r22, 0xC0	; 192
     d90:	64 2b       	or	r22, r20
     d92:	2f 70       	andi	r18, 0x0F	; 15
     d94:	62 2b       	or	r22, r18
     d96:	38 2f       	mov	r19, r24
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     d98:	72 60       	ori	r23, 0x02	; 2
     d9a:	45 c0       	rjmp	.+138    	; 0xe26 <Pipe_ConfigurePipe+0xa8>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     d9c:	30 93 a7 00 	sts	0x00A7, r19
		uint8_t UPCFG2XTemp;
		uint8_t UPIENXTemp;

		Pipe_SelectPipe(PNum);
		
		if (PNum == Number)
     da0:	3e 17       	cp	r19, r30
     da2:	a1 f4       	brne	.+40     	; 0xdcc <Pipe_ConfigurePipe+0x4e>
     da4:	88 e0       	ldi	r24, 0x08	; 8
     da6:	90 e0       	ldi	r25, 0x00	; 0
     da8:	20 e0       	ldi	r18, 0x00	; 0
     daa:	03 c0       	rjmp	.+6      	; 0xdb2 <Pipe_ConfigurePipe+0x34>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
				{
					MaskVal++;
     dac:	2f 5f       	subi	r18, 0xFF	; 255
					CheckBytes <<= 1;
     dae:	88 0f       	add	r24, r24
     db0:	99 1f       	adc	r25, r25
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
     db2:	80 17       	cp	r24, r16
     db4:	91 07       	cpc	r25, r17
     db6:	10 f4       	brcc	.+4      	; 0xdbc <Pipe_ConfigurePipe+0x3e>
     db8:	25 30       	cpi	r18, 0x05	; 5
     dba:	c1 f7       	brne	.-16     	; 0xdac <Pipe_ConfigurePipe+0x2e>
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     dbc:	92 2f       	mov	r25, r18
     dbe:	92 95       	swap	r25
     dc0:	90 7f       	andi	r25, 0xF0	; 240
     dc2:	97 2b       	or	r25, r23
     dc4:	56 2f       	mov	r21, r22
     dc6:	40 e0       	ldi	r20, 0x00	; 0
     dc8:	20 e0       	ldi	r18, 0x00	; 0
     dca:	08 c0       	rjmp	.+16     	; 0xddc <Pipe_ConfigurePipe+0x5e>
			UPCFG2XTemp = 0;
			UPIENXTemp  = 0;
		}
		else
		{
			UPCFG0XTemp = UPCFG0X;
     dcc:	50 91 aa 00 	lds	r21, 0x00AA
			UPCFG1XTemp = UPCFG1X;
     dd0:	90 91 ab 00 	lds	r25, 0x00AB
			UPCFG2XTemp = UPCFG2X;
     dd4:	40 91 ad 00 	lds	r20, 0x00AD
			UPIENXTemp  = UPIENX;
     dd8:	20 91 ae 00 	lds	r18, 0x00AE
		}

		if (!(UPCFG1XTemp & (1 << ALLOC)))
     ddc:	91 ff       	sbrs	r25, 1
     dde:	22 c0       	rjmp	.+68     	; 0xe24 <Pipe_ConfigurePipe+0xa6>
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     de0:	80 91 a9 00 	lds	r24, 0x00A9
     de4:	8e 7f       	andi	r24, 0xFE	; 254
     de6:	80 93 a9 00 	sts	0x00A9, r24
		  continue;
		  
		Pipe_DisablePipe();
		UPCFG1X &= ~(1 << ALLOC);
     dea:	80 91 ab 00 	lds	r24, 0x00AB
     dee:	8d 7f       	andi	r24, 0xFD	; 253
     df0:	80 93 ab 00 	sts	0x00AB, r24
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
     df4:	80 91 a9 00 	lds	r24, 0x00A9
     df8:	81 60       	ori	r24, 0x01	; 1
     dfa:	80 93 a9 00 	sts	0x00A9, r24

		Pipe_EnablePipe();
		UPCFG0X = UPCFG0XTemp;
     dfe:	50 93 aa 00 	sts	0x00AA, r21
		UPCFG1X = UPCFG1XTemp;
     e02:	90 93 ab 00 	sts	0x00AB, r25
		UPCFG2X = UPCFG2XTemp;
     e06:	40 93 ad 00 	sts	0x00AD, r20
		UPIENX  = UPIENXTemp;
     e0a:	20 93 ae 00 	sts	0x00AE, r18

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
     e0e:	80 91 a9 00 	lds	r24, 0x00A9
     e12:	80 62       	ori	r24, 0x20	; 32
     e14:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     e18:	80 91 ac 00 	lds	r24, 0x00AC

		Pipe_SetInfiniteINRequests();
	
		if (!(Pipe_IsConfigured()))
     e1c:	87 fd       	sbrc	r24, 7
     e1e:	02 c0       	rjmp	.+4      	; 0xe24 <Pipe_ConfigurePipe+0xa6>
     e20:	80 e0       	ldi	r24, 0x00	; 0
     e22:	07 c0       	rjmp	.+14     	; 0xe32 <Pipe_ConfigurePipe+0xb4>

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else	
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
     e24:	3f 5f       	subi	r19, 0xFF	; 255
     e26:	37 30       	cpi	r19, 0x07	; 7
     e28:	08 f4       	brcc	.+2      	; 0xe2c <Pipe_ConfigurePipe+0xae>
     e2a:	b8 cf       	rjmp	.-144    	; 0xd9c <Pipe_ConfigurePipe+0x1e>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     e2c:	e0 93 a7 00 	sts	0x00A7, r30
     e30:	81 e0       	ldi	r24, 0x01	; 1
	}
		
	Pipe_SelectPipe(Number);	
	return true;
#endif
}
     e32:	1f 91       	pop	r17
     e34:	0f 91       	pop	r16
     e36:	ef 90       	pop	r14
     e38:	08 95       	ret

00000e3a <Pipe_ClearPipes>:

void Pipe_ClearPipes(void)
{
	UPINT = 0;
     e3a:	10 92 f8 00 	sts	0x00F8, r1
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	90 93 a7 00 	sts	0x00A7, r25

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
     e44:	10 92 ae 00 	sts	0x00AE, r1
		UPINTX  = 0;
     e48:	10 92 a6 00 	sts	0x00A6, r1
		UPCFG1X = 0;
     e4c:	10 92 ab 00 	sts	0x00AB, r1
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     e50:	80 91 a9 00 	lds	r24, 0x00A9
     e54:	8e 7f       	andi	r24, 0xFE	; 254
     e56:	80 93 a9 00 	sts	0x00A9, r24

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     e5a:	9f 5f       	subi	r25, 0xFF	; 255
     e5c:	97 30       	cpi	r25, 0x07	; 7
     e5e:	81 f7       	brne	.-32     	; 0xe40 <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
     e60:	08 95       	ret

00000e62 <Pipe_IsEndpointBound>:

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
     e62:	48 2f       	mov	r20, r24
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
     e64:	30 91 a7 00 	lds	r19, 0x00A7
     e68:	20 e0       	ldi	r18, 0x00	; 0
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     e6a:	20 93 a7 00 	sts	0x00A7, r18
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     e6e:	80 91 ac 00 	lds	r24, 0x00AC

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
	{
		Pipe_SelectPipe(PNum);

		if (!(Pipe_IsConfigured()))
     e72:	87 ff       	sbrs	r24, 7
     e74:	10 c0       	rjmp	.+32     	; 0xe96 <Pipe_IsEndpointBound+0x34>
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				return (((UPCFG0X >> PEPNUM0) & PIPE_EPNUM_MASK) |
     e76:	90 91 aa 00 	lds	r25, 0x00AA
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
     e7a:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				return (((UPCFG0X >> PEPNUM0) & PIPE_EPNUM_MASK) |
     e7e:	80 73       	andi	r24, 0x30	; 48
     e80:	80 31       	cpi	r24, 0x10	; 16
     e82:	11 f0       	breq	.+4      	; 0xe88 <Pipe_IsEndpointBound+0x26>
     e84:	80 e0       	ldi	r24, 0x00	; 0
     e86:	01 c0       	rjmp	.+2      	; 0xe8a <Pipe_IsEndpointBound+0x28>
     e88:	80 e8       	ldi	r24, 0x80	; 128
		  continue;

		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
     e8a:	9f 70       	andi	r25, 0x0F	; 15
     e8c:	89 2b       	or	r24, r25
     e8e:	84 17       	cp	r24, r20
     e90:	11 f4       	brne	.+4      	; 0xe96 <Pipe_IsEndpointBound+0x34>
     e92:	81 e0       	ldi	r24, 0x01	; 1
     e94:	08 95       	ret

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
	uint8_t PrevPipeNumber = Pipe_GetCurrentPipe();

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     e96:	2f 5f       	subi	r18, 0xFF	; 255
     e98:	27 30       	cpi	r18, 0x07	; 7
     e9a:	39 f7       	brne	.-50     	; 0xe6a <Pipe_IsEndpointBound+0x8>
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
     e9c:	37 70       	andi	r19, 0x07	; 7
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     e9e:	30 93 a7 00 	sts	0x00A7, r19
     ea2:	80 e0       	ldi	r24, 0x00	; 0
		  return true;
	}

	Pipe_SelectPipe(PrevPipeNumber);
	return false;
}
     ea4:	08 95       	ret

00000ea6 <Pipe_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
     ea6:	40 91 a2 00 	lds	r20, 0x00A2
     eaa:	50 91 a3 00 	lds	r21, 0x00A3
     eae:	28 e8       	ldi	r18, 0x88	; 136
     eb0:	33 e1       	ldi	r19, 0x13	; 19
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
     eb2:	80 91 aa 00 	lds	r24, 0x00AA

	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
     eb6:	80 73       	andi	r24, 0x30	; 48
     eb8:	80 31       	cpi	r24, 0x10	; 16
     eba:	29 f4       	brne	.+10     	; 0xec6 <Pipe_WaitUntilReady+0x20>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     ebc:	80 91 a6 00 	lds	r24, 0x00A6
		{
			if (Pipe_IsINReceived())
     ec0:	80 ff       	sbrs	r24, 0
     ec2:	05 c0       	rjmp	.+10     	; 0xece <Pipe_WaitUntilReady+0x28>
     ec4:	20 c0       	rjmp	.+64     	; 0xf06 <Pipe_WaitUntilReady+0x60>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     ec6:	80 91 a6 00 	lds	r24, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
     eca:	82 fd       	sbrc	r24, 2
     ecc:	1c c0       	rjmp	.+56     	; 0xf06 <Pipe_WaitUntilReady+0x60>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     ece:	80 91 a6 00 	lds	r24, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
     ed2:	81 ff       	sbrs	r24, 1
     ed4:	02 c0       	rjmp	.+4      	; 0xeda <Pipe_WaitUntilReady+0x34>
     ed6:	81 e0       	ldi	r24, 0x01	; 1
     ed8:	08 95       	ret
		  return PIPE_READYWAIT_PipeStalled;
		else if (USB_HostState == HOST_STATE_Unattached)
     eda:	80 91 2d 01 	lds	r24, 0x012D
     ede:	81 30       	cpi	r24, 0x01	; 1
     ee0:	11 f4       	brne	.+4      	; 0xee6 <Pipe_WaitUntilReady+0x40>
     ee2:	82 e0       	ldi	r24, 0x02	; 2
     ee4:	08 95       	ret
     ee6:	80 91 a2 00 	lds	r24, 0x00A2
     eea:	90 91 a3 00 	lds	r25, 0x00A3
		  return PIPE_READYWAIT_DeviceDisconnected;

		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     eee:	84 17       	cp	r24, r20
     ef0:	95 07       	cpc	r25, r21
     ef2:	f9 f2       	breq	.-66     	; 0xeb2 <Pipe_WaitUntilReady+0xc>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     ef4:	21 15       	cp	r18, r1
     ef6:	31 05       	cpc	r19, r1
     ef8:	11 f4       	brne	.+4      	; 0xefe <Pipe_WaitUntilReady+0x58>
     efa:	83 e0       	ldi	r24, 0x03	; 3
     efc:	08 95       	ret
     efe:	21 50       	subi	r18, 0x01	; 1
     f00:	30 40       	sbci	r19, 0x00	; 0
     f02:	ac 01       	movw	r20, r24
     f04:	d6 cf       	rjmp	.-84     	; 0xeb2 <Pipe_WaitUntilReady+0xc>
     f06:	80 e0       	ldi	r24, 0x00	; 0
			  return PIPE_READYWAIT_Timeout;
		}
	}
}
     f08:	08 95       	ret

00000f0a <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     f0a:	70 d0       	rcall	.+224    	; 0xfec <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     f0c:	77 d0       	rcall	.+238    	; 0xffc <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     f0e:	80 91 d8 00 	lds	r24, 0x00D8
     f12:	8f 77       	andi	r24, 0x7F	; 127
     f14:	80 93 d8 00 	sts	0x00D8, r24
				USBCON |=  (1 << USBE);
     f18:	80 91 d8 00 	lds	r24, 0x00D8
     f1c:	80 68       	ori	r24, 0x80	; 128
     f1e:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
     f22:	80 91 d8 00 	lds	r24, 0x00D8
     f26:	8f 7d       	andi	r24, 0xDF	; 223
     f28:	80 93 d8 00 	sts	0x00D8, r24
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
     f2c:	80 91 d7 00 	lds	r24, 0x00D7
     f30:	8f 77       	andi	r24, 0x7F	; 127
     f32:	80 93 d7 00 	sts	0x00D7, r24

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     f36:	8c e0       	ldi	r24, 0x0C	; 12
     f38:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     f3a:	8e e0       	ldi	r24, 0x0E	; 14
     f3c:	89 bd       	out	0x29, r24	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_CAN_BE_HOST)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));		
     f3e:	09 b4       	in	r0, 0x29	; 41
     f40:	00 fe       	sbrs	r0, 0
     f42:	fd cf       	rjmp	.-6      	; 0xf3e <USB_ResetInterface+0x34>
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState                = HOST_STATE_Unattached;
     f44:	81 e0       	ldi	r24, 0x01	; 1
     f46:	80 93 2d 01 	sts	0x012D, r24
	USB_Host_ConfigurationNumber = 0;
     f4a:	10 92 23 01 	sts	0x0123, r1
	USB_Host_ControlPipeSize     = PIPE_CONTROLPIPE_DEFAULT_SIZE;
     f4e:	80 e4       	ldi	r24, 0x40	; 64
     f50:	80 93 1e 01 	sts	0x011E, r24
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
     f54:	80 91 d8 00 	lds	r24, 0x00D8
     f58:	80 64       	ori	r24, 0x40	; 64
     f5a:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     f5e:	80 91 dd 00 	lds	r24, 0x00DD
     f62:	81 60       	ori	r24, 0x01	; 1
     f64:	80 93 dd 00 	sts	0x00DD, r24
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
     f68:	80 91 dd 00 	lds	r24, 0x00DD
     f6c:	84 60       	ori	r24, 0x04	; 4
     f6e:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON &= ~(1 << UVCONE);
     f72:	80 91 d7 00 	lds	r24, 0x00D7
     f76:	8f 7e       	andi	r24, 0xEF	; 239
     f78:	80 93 d7 00 	sts	0x00D7, r24

				DDRE   |=  (1 << 7);
     f7c:	6f 9a       	sbi	0x0d, 7	; 13
			}

			static inline void USB_Host_VBUS_Manual_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_On(void)
			{
				PORTE  |=  (1 << 7);
     f7e:	77 9a       	sbi	0x0e, 7	; 14
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN |= (1 << SRPE);						
     f80:	80 91 de 00 	lds	r24, 0x00DE
     f84:	81 60       	ori	r24, 0x01	; 1
     f86:	80 93 de 00 	sts	0x00DE, r24
						break;
					case USB_INT_RSTI:
						UHIEN  |= (1 << RSTE);
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
     f8a:	80 91 de 00 	lds	r24, 0x00DE
     f8e:	84 60       	ori	r24, 0x04	; 4
     f90:	80 93 de 00 	sts	0x00DE, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     f94:	80 91 e0 00 	lds	r24, 0x00E0
     f98:	8e 7f       	andi	r24, 0xFE	; 254
     f9a:	80 93 e0 00 	sts	0x00E0, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     f9e:	80 91 d8 00 	lds	r24, 0x00D8
     fa2:	80 61       	ori	r24, 0x10	; 16
     fa4:	80 93 d8 00 	sts	0x00D8, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     fa8:	08 95       	ret

00000faa <USB_Init>:

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
     faa:	e7 ed       	ldi	r30, 0xD7	; 215
     fac:	f0 e0       	ldi	r31, 0x00	; 0
     fae:	80 81       	ld	r24, Z
     fb0:	81 60       	ori	r24, 0x01	; 1
     fb2:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     fb4:	81 e0       	ldi	r24, 0x01	; 1
     fb6:	80 93 24 01 	sts	0x0124, r24

	USB_ResetInterface();
}
     fba:	a7 cf       	rjmp	.-178    	; 0xf0a <USB_ResetInterface>

00000fbc <USB_Disable>:

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
     fbc:	17 d0       	rcall	.+46     	; 0xfec <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     fbe:	1e d0       	rcall	.+60     	; 0xffc <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
     fc0:	e0 ee       	ldi	r30, 0xE0	; 224
     fc2:	f0 e0       	ldi	r31, 0x00	; 0
     fc4:	80 81       	ld	r24, Z
     fc6:	81 60       	ori	r24, 0x01	; 1
     fc8:	80 83       	st	Z, r24
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON  &= ~(1 << USBE);
     fca:	a8 ed       	ldi	r26, 0xD8	; 216
     fcc:	b0 e0       	ldi	r27, 0x00	; 0
     fce:	8c 91       	ld	r24, X
     fd0:	8f 77       	andi	r24, 0x7F	; 127
     fd2:	8c 93       	st	X, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     fd4:	19 bc       	out	0x29, r1	; 41

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  &= ~(1 << UVREGE);
     fd6:	e7 ed       	ldi	r30, 0xD7	; 215
     fd8:	f0 e0       	ldi	r31, 0x00	; 0
     fda:	80 81       	ld	r24, Z
     fdc:	8e 7f       	andi	r24, 0xFE	; 254
     fde:	80 83       	st	Z, r24
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON  &= ~(1 << OTGPADE);
     fe0:	8c 91       	ld	r24, X
     fe2:	8f 7e       	andi	r24, 0xEF	; 239
     fe4:	8c 93       	st	X, r24

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
     fe6:	10 92 24 01 	sts	0x0124, r1
}
     fea:	08 95       	ret

00000fec <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     fec:	e8 ed       	ldi	r30, 0xD8	; 216
     fee:	f0 e0       	ldi	r31, 0x00	; 0
     ff0:	80 81       	ld	r24, Z
     ff2:	8c 7f       	andi	r24, 0xFC	; 252
     ff4:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
     ff6:	10 92 a0 00 	sts	0x00A0, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
	#endif
}
     ffa:	08 95       	ret

00000ffc <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     ffc:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_BOTH)
	OTGINT = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
    1000:	10 92 9f 00 	sts	0x009F, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
	#endif
}
    1004:	08 95       	ret

00001006 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
    1006:	1f 92       	push	r1
    1008:	0f 92       	push	r0
    100a:	0f b6       	in	r0, 0x3f	; 63
    100c:	0f 92       	push	r0
    100e:	0b b6       	in	r0, 0x3b	; 59
    1010:	0f 92       	push	r0
    1012:	11 24       	eor	r1, r1
    1014:	2f 93       	push	r18
    1016:	3f 93       	push	r19
    1018:	4f 93       	push	r20
    101a:	5f 93       	push	r21
    101c:	6f 93       	push	r22
    101e:	7f 93       	push	r23
    1020:	8f 93       	push	r24
    1022:	9f 93       	push	r25
    1024:	af 93       	push	r26
    1026:	bf 93       	push	r27
    1028:	ef 93       	push	r30
    102a:	ff 93       	push	r31
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
    102c:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	#if defined(USB_CAN_BE_HOST)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
    1030:	85 ff       	sbrs	r24, 5
    1032:	0a c0       	rjmp	.+20     	; 0x1048 <__vector_10+0x42>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
    1034:	80 91 a0 00 	lds	r24, 0x00A0
    1038:	85 ff       	sbrs	r24, 5
    103a:	06 c0       	rjmp	.+12     	; 0x1048 <__vector_10+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
    103c:	80 91 9f 00 	lds	r24, 0x009F
    1040:	8f 7d       	andi	r24, 0xDF	; 223
    1042:	80 93 9f 00 	sts	0x009F, r24
	{
		USB_INT_Clear(USB_INT_HSOFI);

		EVENT_USB_Host_StartOfFrame();
    1046:	be d1       	rcall	.+892    	; 0x13c4 <USB_Event_Stub>
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
    1048:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
    104c:	81 ff       	sbrs	r24, 1
    104e:	15 c0       	rjmp	.+42     	; 0x107a <__vector_10+0x74>
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
					case USB_INT_DCONNI:
						return (UHIEN  & (1 << DCONNE));
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
    1050:	80 91 a0 00 	lds	r24, 0x00A0
    1054:	81 ff       	sbrs	r24, 1
    1056:	11 c0       	rjmp	.+34     	; 0x107a <__vector_10+0x74>
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
    1058:	80 91 9f 00 	lds	r24, 0x009F
    105c:	8d 7f       	andi	r24, 0xFD	; 253
    105e:	80 93 9f 00 	sts	0x009F, r24
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
    1062:	80 91 9f 00 	lds	r24, 0x009F
    1066:	8e 7f       	andi	r24, 0xFE	; 254
    1068:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
    106c:	80 91 a0 00 	lds	r24, 0x00A0
    1070:	8d 7f       	andi	r24, 0xFD	; 253
    1072:	80 93 a0 00 	sts	0x00A0, r24
	{
		USB_INT_Clear(USB_INT_DDISCI);
		USB_INT_Clear(USB_INT_DCONNI);
		USB_INT_Disable(USB_INT_DDISCI);

		EVENT_USB_Host_DeviceUnattached();
    1076:	33 da       	rcall	.-2970   	; 0x4de <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
    1078:	48 df       	rcall	.-368    	; 0xf0a <USB_ResetInterface>
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
    107a:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
    107e:	81 ff       	sbrs	r24, 1
    1080:	15 c0       	rjmp	.+42     	; 0x10ac <__vector_10+0xa6>
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
    1082:	80 91 de 00 	lds	r24, 0x00DE
    1086:	81 ff       	sbrs	r24, 1
    1088:	11 c0       	rjmp	.+34     	; 0x10ac <__vector_10+0xa6>
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
    108a:	80 91 df 00 	lds	r24, 0x00DF
    108e:	8d 7f       	andi	r24, 0xFD	; 253
    1090:	80 93 df 00 	sts	0x00DF, r24
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
    1094:	77 98       	cbi	0x0e, 7	; 14
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
    1096:	80 91 dd 00 	lds	r24, 0x00DD
    109a:	81 60       	ori	r24, 0x01	; 1
    109c:	80 93 dd 00 	sts	0x00DD, r24
		USB_INT_Clear(USB_INT_VBERRI);

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
    10a0:	80 e0       	ldi	r24, 0x00	; 0
    10a2:	00 da       	rcall	.-3072   	; 0x4a4 <EVENT_USB_Host_HostError>
		EVENT_USB_Host_DeviceUnattached();
    10a4:	1c da       	rcall	.-3016   	; 0x4de <EVENT_USB_Host_DeviceUnattached>

		USB_HostState = HOST_STATE_Unattached;
    10a6:	81 e0       	ldi	r24, 0x01	; 1
    10a8:	80 93 2d 01 	sts	0x012D, r24
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
					case USB_INT_SRPI:
						return (OTGINT & (1 << SRPI));
    10ac:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
    10b0:	80 ff       	sbrs	r24, 0
    10b2:	17 c0       	rjmp	.+46     	; 0x10e2 <__vector_10+0xdc>
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
					case USB_INT_SRPI:
						return (OTGIEN & (1 << SRPE));
    10b4:	80 91 de 00 	lds	r24, 0x00DE
    10b8:	80 ff       	sbrs	r24, 0
    10ba:	13 c0       	rjmp	.+38     	; 0x10e2 <__vector_10+0xdc>
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
						break;
					case USB_INT_SRPI:
						OTGINT &= ~(1 << SRPI);
    10bc:	80 91 df 00 	lds	r24, 0x00DF
    10c0:	8e 7f       	andi	r24, 0xFE	; 254
    10c2:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_VBERRI:
						OTGIEN &= ~(1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN &= ~(1 << SRPE);						
    10c6:	80 91 de 00 	lds	r24, 0x00DE
    10ca:	8e 7f       	andi	r24, 0xFE	; 254
    10cc:	80 93 de 00 	sts	0x00DE, r24
	{
		USB_INT_Clear(USB_INT_SRPI);
		USB_INT_Disable(USB_INT_SRPI);

		EVENT_USB_Host_DeviceAttached();
    10d0:	0f da       	rcall	.-3042   	; 0x4f0 <EVENT_USB_Host_DeviceAttached>
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
    10d2:	80 91 a0 00 	lds	r24, 0x00A0
    10d6:	82 60       	ori	r24, 0x02	; 2
    10d8:	80 93 a0 00 	sts	0x00A0, r24

		USB_INT_Enable(USB_INT_DDISCI);

		USB_HostState = HOST_STATE_Powered;
    10dc:	82 e0       	ldi	r24, 0x02	; 2
    10de:	80 93 2d 01 	sts	0x012D, r24
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
    10e2:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
    10e6:	82 ff       	sbrs	r24, 2
    10e8:	0e c0       	rjmp	.+28     	; 0x1106 <__vector_10+0x100>
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
    10ea:	80 91 de 00 	lds	r24, 0x00DE
    10ee:	82 ff       	sbrs	r24, 2
    10f0:	0a c0       	rjmp	.+20     	; 0x1106 <__vector_10+0x100>
						break;
					case USB_INT_RSTI:
						UHINT  &= ~(1 << RSTI);
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
    10f2:	80 91 df 00 	lds	r24, 0x00DF
    10f6:	8b 7f       	andi	r24, 0xFB	; 251
    10f8:	80 93 df 00 	sts	0x00DF, r24
	{
		USB_INT_Clear(USB_INT_BCERRI);

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
    10fc:	82 e0       	ldi	r24, 0x02	; 2
    10fe:	60 e0       	ldi	r22, 0x00	; 0
    1100:	a5 d9       	rcall	.-3254   	; 0x44c <EVENT_USB_Host_DeviceEnumerationFailed>
		EVENT_USB_Host_DeviceUnattached();
    1102:	ed d9       	rcall	.-3110   	; 0x4de <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
    1104:	02 df       	rcall	.-508    	; 0xf0a <USB_ResetInterface>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    1106:	ff 91       	pop	r31
    1108:	ef 91       	pop	r30
    110a:	bf 91       	pop	r27
    110c:	af 91       	pop	r26
    110e:	9f 91       	pop	r25
    1110:	8f 91       	pop	r24
    1112:	7f 91       	pop	r23
    1114:	6f 91       	pop	r22
    1116:	5f 91       	pop	r21
    1118:	4f 91       	pop	r20
    111a:	3f 91       	pop	r19
    111c:	2f 91       	pop	r18
    111e:	0f 90       	pop	r0
    1120:	0b be       	out	0x3b, r0	; 59
    1122:	0f 90       	pop	r0
    1124:	0f be       	out	0x3f, r0	; 63
    1126:	0f 90       	pop	r0
    1128:	1f 90       	pop	r1
    112a:	18 95       	reti

0000112c <Pipe_Read_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    112c:	bf 92       	push	r11
    112e:	cf 92       	push	r12
    1130:	df 92       	push	r13
    1132:	ef 92       	push	r14
    1134:	ff 92       	push	r15
    1136:	0f 93       	push	r16
    1138:	1f 93       	push	r17
    113a:	cf 93       	push	r28
    113c:	df 93       	push	r29
    113e:	18 2f       	mov	r17, r24
    1140:	09 2f       	mov	r16, r25
    1142:	7b 01       	movw	r14, r22
    1144:	6a 01       	movw	r12, r20
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1146:	80 91 aa 00 	lds	r24, 0x00AA
    114a:	8f 7c       	andi	r24, 0xCF	; 207
    114c:	80 61       	ori	r24, 0x10	; 16
    114e:	80 93 aa 00 	sts	0x00AA, r24
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
    1152:	a9 de       	rcall	.-686    	; 0xea6 <Pipe_WaitUntilReady>
    1154:	b8 2e       	mov	r11, r24
    1156:	88 23       	and	r24, r24
    1158:	a9 f5       	brne	.+106    	; 0x11c4 <Pipe_Read_Stream_LE+0x98>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    115a:	81 2f       	mov	r24, r17
    115c:	90 2f       	mov	r25, r16
    115e:	9c 01       	movw	r18, r24
    1160:	e9 01       	movw	r28, r18
	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
    1162:	c1 14       	cp	r12, r1
    1164:	d1 04       	cpc	r13, r1
    1166:	39 f0       	breq	.+14     	; 0x1176 <Pipe_Read_Stream_LE+0x4a>
	{
		Length -= *BytesProcessed;
    1168:	f6 01       	movw	r30, r12
    116a:	80 81       	ld	r24, Z
    116c:	91 81       	ldd	r25, Z+1	; 0x01
    116e:	e8 1a       	sub	r14, r24
    1170:	f9 0a       	sbc	r15, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    1172:	c8 0f       	add	r28, r24
    1174:	d9 1f       	adc	r29, r25
    1176:	00 e0       	ldi	r16, 0x00	; 0
    1178:	10 e0       	ldi	r17, 0x00	; 0
    117a:	21 c0       	rjmp	.+66     	; 0x11be <Pipe_Read_Stream_LE+0x92>
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
    117c:	80 91 a6 00 	lds	r24, 0x00A6
	}
	
	while (Length)
	{
		if (!(Pipe_IsReadWriteAllowed()))
    1180:	85 fd       	sbrc	r24, 5
    1182:	15 c0       	rjmp	.+42     	; 0x11ae <Pipe_Read_Stream_LE+0x82>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1184:	80 91 a6 00 	lds	r24, 0x00A6
    1188:	8e 77       	andi	r24, 0x7E	; 126
    118a:	80 93 a6 00 	sts	0x00A6, r24
		{
			TEMPLATE_CLEAR_PIPE();

			if (BytesProcessed != NULL)
    118e:	c1 14       	cp	r12, r1
    1190:	d1 04       	cpc	r13, r1
    1192:	49 f0       	breq	.+18     	; 0x11a6 <Pipe_Read_Stream_LE+0x7a>
			{
				*BytesProcessed += BytesInTransfer;
    1194:	f6 01       	movw	r30, r12
    1196:	80 81       	ld	r24, Z
    1198:	91 81       	ldd	r25, Z+1	; 0x01
    119a:	80 0f       	add	r24, r16
    119c:	91 1f       	adc	r25, r17
    119e:	91 83       	std	Z+1, r25	; 0x01
    11a0:	80 83       	st	Z, r24
    11a2:	84 e0       	ldi	r24, 0x04	; 4
    11a4:	10 c0       	rjmp	.+32     	; 0x11c6 <Pipe_Read_Stream_LE+0x9a>
				return PIPE_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
    11a6:	7f de       	rcall	.-770    	; 0xea6 <Pipe_WaitUntilReady>
    11a8:	88 23       	and	r24, r24
    11aa:	49 f0       	breq	.+18     	; 0x11be <Pipe_Read_Stream_LE+0x92>
    11ac:	0c c0       	rjmp	.+24     	; 0x11c6 <Pipe_Read_Stream_LE+0x9a>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    11ae:	80 91 af 00 	lds	r24, 0x00AF
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    11b2:	89 93       	st	Y+, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    11b4:	08 94       	sec
    11b6:	e1 08       	sbc	r14, r1
    11b8:	f1 08       	sbc	r15, r1
			BytesInTransfer++;
    11ba:	0f 5f       	subi	r16, 0xFF	; 255
    11bc:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}
	
	while (Length)
    11be:	e1 14       	cp	r14, r1
    11c0:	f1 04       	cpc	r15, r1
    11c2:	e1 f6       	brne	.-72     	; 0x117c <Pipe_Read_Stream_LE+0x50>
    11c4:	8b 2d       	mov	r24, r11
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
    11c6:	df 91       	pop	r29
    11c8:	cf 91       	pop	r28
    11ca:	1f 91       	pop	r17
    11cc:	0f 91       	pop	r16
    11ce:	ff 90       	pop	r15
    11d0:	ef 90       	pop	r14
    11d2:	df 90       	pop	r13
    11d4:	cf 90       	pop	r12
    11d6:	bf 90       	pop	r11
    11d8:	08 95       	ret

000011da <Pipe_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    11da:	bf 92       	push	r11
    11dc:	cf 92       	push	r12
    11de:	df 92       	push	r13
    11e0:	ef 92       	push	r14
    11e2:	ff 92       	push	r15
    11e4:	0f 93       	push	r16
    11e6:	1f 93       	push	r17
    11e8:	cf 93       	push	r28
    11ea:	df 93       	push	r29
    11ec:	18 2f       	mov	r17, r24
    11ee:	09 2f       	mov	r16, r25
    11f0:	7b 01       	movw	r14, r22
    11f2:	6a 01       	movw	r12, r20
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    11f4:	80 91 aa 00 	lds	r24, 0x00AA
    11f8:	8f 7c       	andi	r24, 0xCF	; 207
    11fa:	80 62       	ori	r24, 0x20	; 32
    11fc:	80 93 aa 00 	sts	0x00AA, r24
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
    1200:	52 de       	rcall	.-860    	; 0xea6 <Pipe_WaitUntilReady>
    1202:	b8 2e       	mov	r11, r24
    1204:	88 23       	and	r24, r24
    1206:	a9 f5       	brne	.+106    	; 0x1272 <Pipe_Write_Stream_LE+0x98>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    1208:	81 2f       	mov	r24, r17
    120a:	90 2f       	mov	r25, r16
    120c:	9c 01       	movw	r18, r24
    120e:	e9 01       	movw	r28, r18
	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
    1210:	c1 14       	cp	r12, r1
    1212:	d1 04       	cpc	r13, r1
    1214:	39 f0       	breq	.+14     	; 0x1224 <Pipe_Write_Stream_LE+0x4a>
	{
		Length -= *BytesProcessed;
    1216:	f6 01       	movw	r30, r12
    1218:	80 81       	ld	r24, Z
    121a:	91 81       	ldd	r25, Z+1	; 0x01
    121c:	e8 1a       	sub	r14, r24
    121e:	f9 0a       	sbc	r15, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    1220:	c8 0f       	add	r28, r24
    1222:	d9 1f       	adc	r29, r25
    1224:	00 e0       	ldi	r16, 0x00	; 0
    1226:	10 e0       	ldi	r17, 0x00	; 0
    1228:	21 c0       	rjmp	.+66     	; 0x126c <Pipe_Write_Stream_LE+0x92>
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
    122a:	80 91 a6 00 	lds	r24, 0x00A6
	}
	
	while (Length)
	{
		if (!(Pipe_IsReadWriteAllowed()))
    122e:	85 fd       	sbrc	r24, 5
    1230:	15 c0       	rjmp	.+42     	; 0x125c <Pipe_Write_Stream_LE+0x82>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1232:	80 91 a6 00 	lds	r24, 0x00A6
    1236:	8b 77       	andi	r24, 0x7B	; 123
    1238:	80 93 a6 00 	sts	0x00A6, r24
		{
			TEMPLATE_CLEAR_PIPE();

			if (BytesProcessed != NULL)
    123c:	c1 14       	cp	r12, r1
    123e:	d1 04       	cpc	r13, r1
    1240:	49 f0       	breq	.+18     	; 0x1254 <Pipe_Write_Stream_LE+0x7a>
			{
				*BytesProcessed += BytesInTransfer;
    1242:	f6 01       	movw	r30, r12
    1244:	80 81       	ld	r24, Z
    1246:	91 81       	ldd	r25, Z+1	; 0x01
    1248:	80 0f       	add	r24, r16
    124a:	91 1f       	adc	r25, r17
    124c:	91 83       	std	Z+1, r25	; 0x01
    124e:	80 83       	st	Z, r24
    1250:	84 e0       	ldi	r24, 0x04	; 4
    1252:	10 c0       	rjmp	.+32     	; 0x1274 <Pipe_Write_Stream_LE+0x9a>
				return PIPE_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
    1254:	28 de       	rcall	.-944    	; 0xea6 <Pipe_WaitUntilReady>
    1256:	88 23       	and	r24, r24
    1258:	49 f0       	breq	.+18     	; 0x126c <Pipe_Write_Stream_LE+0x92>
    125a:	0c c0       	rjmp	.+24     	; 0x1274 <Pipe_Write_Stream_LE+0x9a>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    125c:	89 91       	ld	r24, Y+
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    125e:	80 93 af 00 	sts	0x00AF, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    1262:	08 94       	sec
    1264:	e1 08       	sbc	r14, r1
    1266:	f1 08       	sbc	r15, r1
			BytesInTransfer++;
    1268:	0f 5f       	subi	r16, 0xFF	; 255
    126a:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}
	
	while (Length)
    126c:	e1 14       	cp	r14, r1
    126e:	f1 04       	cpc	r15, r1
    1270:	e1 f6       	brne	.-72     	; 0x122a <Pipe_Write_Stream_LE+0x50>
    1272:	8b 2d       	mov	r24, r11
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
    1274:	df 91       	pop	r29
    1276:	cf 91       	pop	r28
    1278:	1f 91       	pop	r17
    127a:	0f 91       	pop	r16
    127c:	ff 90       	pop	r15
    127e:	ef 90       	pop	r14
    1280:	df 90       	pop	r13
    1282:	cf 90       	pop	r12
    1284:	bf 90       	pop	r11
    1286:	08 95       	ret

00001288 <USB_GetNextDescriptorComp>:

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
    1288:	af 92       	push	r10
    128a:	bf 92       	push	r11
    128c:	cf 92       	push	r12
    128e:	df 92       	push	r13
    1290:	ef 92       	push	r14
    1292:	ff 92       	push	r15
    1294:	0f 93       	push	r16
    1296:	1f 93       	push	r17
    1298:	cf 93       	push	r28
    129a:	df 93       	push	r29
    129c:	7c 01       	movw	r14, r24
    129e:	eb 01       	movw	r28, r22
    12a0:	6a 01       	movw	r12, r20
    12a2:	24 c0       	rjmp	.+72     	; 0x12ec <USB_GetNextDescriptorComp+0x64>
	uint8_t ErrorCode;

	while (*BytesRem)
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
    12a4:	e8 81       	ld	r30, Y
    12a6:	f9 81       	ldd	r31, Y+1	; 0x01
    12a8:	be 2e       	mov	r11, r30
    12aa:	af 2e       	mov	r10, r31
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc)
			{
				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;
    12ac:	80 81       	ld	r24, Z
    12ae:	90 e0       	ldi	r25, 0x00	; 0
    12b0:	98 01       	movw	r18, r16
    12b2:	80 17       	cp	r24, r16
    12b4:	91 07       	cpc	r25, r17
    12b6:	08 f4       	brcc	.+2      	; 0x12ba <USB_GetNextDescriptorComp+0x32>
    12b8:	9c 01       	movw	r18, r24
				
				if (*BytesRem < CurrDescriptorSize)
				  CurrDescriptorSize = *BytesRem;

				*CurrConfigLoc  = (void*)((uintptr_t)*CurrConfigLoc + CurrDescriptorSize);
    12ba:	e2 0f       	add	r30, r18
    12bc:	f3 1f       	adc	r31, r19
    12be:	f9 83       	std	Y+1, r31	; 0x01
    12c0:	e8 83       	st	Y, r30
				*BytesRem      -= CurrDescriptorSize;
    12c2:	f7 01       	movw	r30, r14
    12c4:	80 81       	ld	r24, Z
    12c6:	91 81       	ldd	r25, Z+1	; 0x01
    12c8:	82 1b       	sub	r24, r18
    12ca:	93 0b       	sbc	r25, r19
    12cc:	91 83       	std	Z+1, r25	; 0x01
    12ce:	80 83       	st	Z, r24
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
    12d0:	88 81       	ld	r24, Y
    12d2:	99 81       	ldd	r25, Y+1	; 0x01
    12d4:	f6 01       	movw	r30, r12
    12d6:	09 95       	icall
    12d8:	82 30       	cpi	r24, 0x02	; 2
    12da:	41 f0       	breq	.+16     	; 0x12ec <USB_GetNextDescriptorComp+0x64>
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
    12dc:	81 30       	cpi	r24, 0x01	; 1
    12de:	69 f4       	brne	.+26     	; 0x12fa <USB_GetNextDescriptorComp+0x72>
			{
				*CurrConfigLoc = PrevDescLoc;
    12e0:	b8 82       	st	Y, r11
    12e2:	a9 82       	std	Y+1, r10	; 0x01
				*BytesRem      = PrevBytesRem;
    12e4:	f7 01       	movw	r30, r14
    12e6:	11 83       	std	Z+1, r17	; 0x01
    12e8:	00 83       	st	Z, r16
    12ea:	07 c0       	rjmp	.+14     	; 0x12fa <USB_GetNextDescriptorComp+0x72>
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
	uint8_t ErrorCode;

	while (*BytesRem)
    12ec:	f7 01       	movw	r30, r14
    12ee:	00 81       	ld	r16, Z
    12f0:	11 81       	ldd	r17, Z+1	; 0x01
    12f2:	01 15       	cp	r16, r1
    12f4:	11 05       	cpc	r17, r1
    12f6:	b1 f6       	brne	.-84     	; 0x12a4 <USB_GetNextDescriptorComp+0x1c>
    12f8:	82 e0       	ldi	r24, 0x02	; 2
			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
}
    12fa:	df 91       	pop	r29
    12fc:	cf 91       	pop	r28
    12fe:	1f 91       	pop	r17
    1300:	0f 91       	pop	r16
    1302:	ff 90       	pop	r15
    1304:	ef 90       	pop	r14
    1306:	df 90       	pop	r13
    1308:	cf 90       	pop	r12
    130a:	bf 90       	pop	r11
    130c:	af 90       	pop	r10
    130e:	08 95       	ret

00001310 <USB_Host_GetDeviceConfigDescriptor>:
#if defined(USB_CAN_BE_HOST)
uint8_t USB_Host_GetDeviceConfigDescriptor(const uint8_t ConfigNumber,
                                           uint16_t* const ConfigSizePtr,
                                           void* const BufferPtr,
                                           const uint16_t BufferSize)
{
    1310:	cf 92       	push	r12
    1312:	df 92       	push	r13
    1314:	ef 92       	push	r14
    1316:	ff 92       	push	r15
    1318:	0f 93       	push	r16
    131a:	1f 93       	push	r17
    131c:	df 93       	push	r29
    131e:	cf 93       	push	r28
    1320:	cd b7       	in	r28, 0x3d	; 61
    1322:	de b7       	in	r29, 0x3e	; 62
    1324:	29 97       	sbiw	r28, 0x09	; 9
    1326:	0f b6       	in	r0, 0x3f	; 63
    1328:	f8 94       	cli
    132a:	de bf       	out	0x3e, r29	; 62
    132c:	0f be       	out	0x3f, r0	; 63
    132e:	cd bf       	out	0x3d, r28	; 61
    1330:	6b 01       	movw	r12, r22
    1332:	8a 01       	movw	r16, r20
    1334:	79 01       	movw	r14, r18
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
    1336:	90 e8       	ldi	r25, 0x80	; 128
    1338:	90 93 25 01 	sts	0x0125, r25
    133c:	96 e0       	ldi	r25, 0x06	; 6
    133e:	90 93 26 01 	sts	0x0126, r25
    1342:	90 e0       	ldi	r25, 0x00	; 0
    1344:	01 97       	sbiw	r24, 0x01	; 1
    1346:	92 60       	ori	r25, 0x02	; 2
    1348:	90 93 28 01 	sts	0x0128, r25
    134c:	80 93 27 01 	sts	0x0127, r24
    1350:	10 92 2a 01 	sts	0x012A, r1
    1354:	10 92 29 01 	sts	0x0129, r1
    1358:	89 e0       	ldi	r24, 0x09	; 9
    135a:	90 e0       	ldi	r25, 0x00	; 0
    135c:	90 93 2c 01 	sts	0x012C, r25
    1360:	80 93 2b 01 	sts	0x012B, r24
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1364:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = sizeof(USB_Descriptor_Configuration_Header_t),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(ConfigHeader)) != HOST_SENDCONTROL_Successful)
    1368:	ce 01       	movw	r24, r28
    136a:	01 96       	adiw	r24, 0x01	; 1
    136c:	55 d0       	rcall	.+170    	; 0x1418 <USB_Host_SendControlRequest>
    136e:	28 2f       	mov	r18, r24
    1370:	88 23       	and	r24, r24
    1372:	c1 f4       	brne	.+48     	; 0x13a4 <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);
    1374:	8b 81       	ldd	r24, Y+3	; 0x03
    1376:	9c 81       	ldd	r25, Y+4	; 0x04
    1378:	f6 01       	movw	r30, r12
    137a:	91 83       	std	Z+1, r25	; 0x01
    137c:	80 83       	st	Z, r24

	if (*ConfigSizePtr > BufferSize)
    137e:	e8 16       	cp	r14, r24
    1380:	f9 06       	cpc	r15, r25
    1382:	10 f4       	brcc	.+4      	; 0x1388 <USB_Host_GetDeviceConfigDescriptor+0x78>
    1384:	25 e0       	ldi	r18, 0x05	; 5
    1386:	0e c0       	rjmp	.+28     	; 0x13a4 <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return HOST_GETCONFIG_BuffOverflow;

	USB_ControlRequest.wLength = *ConfigSizePtr;
    1388:	90 93 2c 01 	sts	0x012C, r25
    138c:	80 93 2b 01 	sts	0x012B, r24

	if ((ErrorCode = USB_Host_SendControlRequest(BufferPtr)) != HOST_SENDCONTROL_Successful)
    1390:	c8 01       	movw	r24, r16
    1392:	42 d0       	rcall	.+132    	; 0x1418 <USB_Host_SendControlRequest>
    1394:	28 2f       	mov	r18, r24
    1396:	88 23       	and	r24, r24
    1398:	29 f4       	brne	.+10     	; 0x13a4 <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
    139a:	f8 01       	movw	r30, r16
    139c:	81 81       	ldd	r24, Z+1	; 0x01
    139e:	82 30       	cpi	r24, 0x02	; 2
    13a0:	09 f0       	breq	.+2      	; 0x13a4 <USB_Host_GetDeviceConfigDescriptor+0x94>
    13a2:	26 e0       	ldi	r18, 0x06	; 6
	  return HOST_GETCONFIG_InvalidData;

	return HOST_GETCONFIG_Successful;
}
    13a4:	82 2f       	mov	r24, r18
    13a6:	29 96       	adiw	r28, 0x09	; 9
    13a8:	0f b6       	in	r0, 0x3f	; 63
    13aa:	f8 94       	cli
    13ac:	de bf       	out	0x3e, r29	; 62
    13ae:	0f be       	out	0x3f, r0	; 63
    13b0:	cd bf       	out	0x3d, r28	; 61
    13b2:	cf 91       	pop	r28
    13b4:	df 91       	pop	r29
    13b6:	1f 91       	pop	r17
    13b8:	0f 91       	pop	r16
    13ba:	ff 90       	pop	r15
    13bc:	ef 90       	pop	r14
    13be:	df 90       	pop	r13
    13c0:	cf 90       	pop	r12
    13c2:	08 95       	ret

000013c4 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
    13c4:	08 95       	ret

000013c6 <USB_Host_WaitForIOS>:

	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
    13c6:	1f 93       	push	r17
    13c8:	cf 93       	push	r28
    13ca:	df 93       	push	r29
    13cc:	18 2f       	mov	r17, r24
    13ce:	c8 ee       	ldi	r28, 0xE8	; 232
    13d0:	d3 e0       	ldi	r29, 0x03	; 3
    13d2:	09 c0       	rjmp	.+18     	; 0x13e6 <USB_Host_WaitForIOS+0x20>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    13d4:	81 e0       	ldi	r24, 0x01	; 1
    13d6:	0b db       	rcall	.-2538   	; 0x9ee <USB_Host_WaitMS>
    13d8:	88 23       	and	r24, r24
    13da:	d1 f4       	brne	.+52     	; 0x1410 <USB_Host_WaitForIOS+0x4a>
		  return ErrorCode;

		if (!(TimeoutCounter--))
    13dc:	20 97       	sbiw	r28, 0x00	; 0
    13de:	11 f4       	brne	.+4      	; 0x13e4 <USB_Host_WaitForIOS+0x1e>
    13e0:	84 e0       	ldi	r24, 0x04	; 4
    13e2:	16 c0       	rjmp	.+44     	; 0x1410 <USB_Host_WaitForIOS+0x4a>
    13e4:	21 97       	sbiw	r28, 0x01	; 1
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    13e6:	11 23       	and	r17, r17
    13e8:	29 f4       	brne	.+10     	; 0x13f4 <USB_Host_WaitForIOS+0x2e>
			 *  \return Boolean \c true if the current pipe is ready for a SETUP packet, \c false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
    13ea:	80 91 a6 00 	lds	r24, 0x00A6
    13ee:	83 ff       	sbrs	r24, 3
    13f0:	f1 cf       	rjmp	.-30     	; 0x13d4 <USB_Host_WaitForIOS+0xe>
    13f2:	0d c0       	rjmp	.+26     	; 0x140e <USB_Host_WaitForIOS+0x48>
    13f4:	11 30       	cpi	r17, 0x01	; 1
    13f6:	29 f4       	brne	.+10     	; 0x1402 <USB_Host_WaitForIOS+0x3c>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    13f8:	80 91 a6 00 	lds	r24, 0x00A6
    13fc:	80 ff       	sbrs	r24, 0
    13fe:	ea cf       	rjmp	.-44     	; 0x13d4 <USB_Host_WaitForIOS+0xe>
    1400:	06 c0       	rjmp	.+12     	; 0x140e <USB_Host_WaitForIOS+0x48>
    1402:	12 30       	cpi	r17, 0x02	; 2
    1404:	39 f7       	brne	.-50     	; 0x13d4 <USB_Host_WaitForIOS+0xe>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
    1406:	80 91 a6 00 	lds	r24, 0x00A6
    140a:	82 ff       	sbrs	r24, 2
    140c:	e3 cf       	rjmp	.-58     	; 0x13d4 <USB_Host_WaitForIOS+0xe>
    140e:	80 e0       	ldi	r24, 0x00	; 0
		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
}
    1410:	df 91       	pop	r29
    1412:	cf 91       	pop	r28
    1414:	1f 91       	pop	r17
    1416:	08 95       	ret

00001418 <USB_Host_SendControlRequest>:
#include "HostStandardReq.h"

uint8_t USB_Host_ConfigurationNumber;

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
    1418:	ff 92       	push	r15
    141a:	0f 93       	push	r16
    141c:	1f 93       	push	r17
    141e:	cf 93       	push	r28
    1420:	df 93       	push	r29
    1422:	18 2f       	mov	r17, r24
    1424:	09 2f       	mov	r16, r25
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
    1426:	f0 90 9e 00 	lds	r15, 0x009E
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
	bool     BusSuspended = USB_Host_IsBusSuspended();
	uint8_t  ReturnStatus = HOST_SENDCONTROL_Successful;
	uint16_t DataLen      = USB_ControlRequest.wLength;
    142a:	c0 91 2b 01 	lds	r28, 0x012B
    142e:	d0 91 2c 01 	lds	r29, 0x012C
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    1432:	80 91 9e 00 	lds	r24, 0x009E
    1436:	81 60       	ori	r24, 0x01	; 1
    1438:	80 93 9e 00 	sts	0x009E, r24

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    143c:	81 e0       	ldi	r24, 0x01	; 1
    143e:	d7 da       	rcall	.-2642   	; 0x9ee <USB_Host_WaitMS>
    1440:	98 2f       	mov	r25, r24
    1442:	88 23       	and	r24, r24
    1444:	09 f0       	breq	.+2      	; 0x1448 <USB_Host_SendControlRequest+0x30>
    1446:	d7 c0       	rjmp	.+430    	; 0x15f6 <USB_Host_SendControlRequest+0x1de>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1448:	80 91 aa 00 	lds	r24, 0x00AA
    144c:	8f 7c       	andi	r24, 0xCF	; 207
    144e:	80 93 aa 00 	sts	0x00AA, r24

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
    1452:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
    1456:	80 91 a6 00 	lds	r24, 0x00A6
    145a:	8f 7e       	andi	r24, 0xEF	; 239
    145c:	80 93 a6 00 	sts	0x00A6, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1460:	80 91 a9 00 	lds	r24, 0x00A9
    1464:	8f 7b       	andi	r24, 0xBF	; 191
    1466:	80 93 a9 00 	sts	0x00A9, r24
    146a:	e5 e2       	ldi	r30, 0x25	; 37
    146c:	f1 e0       	ldi	r31, 0x01	; 1
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
	  Pipe_Write_8(*(HeaderStream++));	
    146e:	81 91       	ld	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    1470:	80 93 af 00 	sts	0x00AF, r24
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
    1474:	81 e0       	ldi	r24, 0x01	; 1
    1476:	ed 32       	cpi	r30, 0x2D	; 45
    1478:	f8 07       	cpc	r31, r24
    147a:	c9 f7       	brne	.-14     	; 0x146e <USB_Host_SendControlRequest+0x56>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
    147c:	80 91 a6 00 	lds	r24, 0x00A6
    1480:	87 77       	andi	r24, 0x77	; 119
    1482:	80 93 a6 00 	sts	0x00A6, r24
	  Pipe_Write_8(*(HeaderStream++));	
	#endif
	
	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
    1486:	80 e0       	ldi	r24, 0x00	; 0
    1488:	9e df       	rcall	.-196    	; 0x13c6 <USB_Host_WaitForIOS>
    148a:	98 2f       	mov	r25, r24
    148c:	88 23       	and	r24, r24
    148e:	09 f0       	breq	.+2      	; 0x1492 <USB_Host_SendControlRequest+0x7a>
    1490:	b2 c0       	rjmp	.+356    	; 0x15f6 <USB_Host_SendControlRequest+0x1de>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1492:	80 91 a9 00 	lds	r24, 0x00A9
    1496:	80 64       	ori	r24, 0x40	; 64
    1498:	80 93 a9 00 	sts	0x00A9, r24
	  goto End_Of_Control_Send;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    149c:	81 e0       	ldi	r24, 0x01	; 1
    149e:	a7 da       	rcall	.-2738   	; 0x9ee <USB_Host_WaitMS>
    14a0:	98 2f       	mov	r25, r24
    14a2:	88 23       	and	r24, r24
    14a4:	09 f0       	breq	.+2      	; 0x14a8 <USB_Host_SendControlRequest+0x90>
    14a6:	a7 c0       	rjmp	.+334    	; 0x15f6 <USB_Host_SendControlRequest+0x1de>

uint8_t USB_Host_ConfigurationNumber;

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
    14a8:	21 2f       	mov	r18, r17
    14aa:	30 2f       	mov	r19, r16
    14ac:	c9 01       	movw	r24, r18
    14ae:	8c 01       	movw	r16, r24
	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
	  goto End_Of_Control_Send;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
    14b0:	80 91 25 01 	lds	r24, 0x0125
    14b4:	87 ff       	sbrs	r24, 7
    14b6:	52 c0       	rjmp	.+164    	; 0x155c <USB_Host_SendControlRequest+0x144>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    14b8:	80 91 aa 00 	lds	r24, 0x00AA
    14bc:	8f 7c       	andi	r24, 0xCF	; 207
    14be:	80 61       	ori	r24, 0x10	; 16
    14c0:	80 93 aa 00 	sts	0x00AA, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
    14c4:	01 15       	cp	r16, r1
    14c6:	11 05       	cpc	r17, r1
    14c8:	69 f5       	brne	.+90     	; 0x1524 <USB_Host_SendControlRequest+0x10c>
    14ca:	2e c0       	rjmp	.+92     	; 0x1528 <USB_Host_SendControlRequest+0x110>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    14cc:	80 91 a9 00 	lds	r24, 0x00A9
    14d0:	8f 7b       	andi	r24, 0xBF	; 191
    14d2:	80 93 a9 00 	sts	0x00A9, r24
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    14d6:	81 e0       	ldi	r24, 0x01	; 1
    14d8:	76 df       	rcall	.-276    	; 0x13c6 <USB_Host_WaitForIOS>
    14da:	98 2f       	mov	r25, r24
    14dc:	88 23       	and	r24, r24
    14de:	09 f0       	breq	.+2      	; 0x14e2 <USB_Host_SendControlRequest+0xca>
    14e0:	8a c0       	rjmp	.+276    	; 0x15f6 <USB_Host_SendControlRequest+0x1de>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    14e2:	80 91 f6 00 	lds	r24, 0x00F6
    14e6:	90 91 f7 00 	lds	r25, 0x00F7
				  goto End_Of_Control_Send;

				if (!(Pipe_BytesInPipe()))
    14ea:	89 2b       	or	r24, r25
    14ec:	49 f4       	brne	.+18     	; 0x1500 <USB_Host_SendControlRequest+0xe8>
    14ee:	c0 e0       	ldi	r28, 0x00	; 0
    14f0:	d0 e0       	ldi	r29, 0x00	; 0
    14f2:	06 c0       	rjmp	.+12     	; 0x1500 <USB_Host_SendControlRequest+0xe8>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    14f4:	80 91 af 00 	lds	r24, 0x00AF
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
				{
					*(DataStream++) = Pipe_Read_8();
    14f8:	f8 01       	movw	r30, r16
    14fa:	81 93       	st	Z+, r24
    14fc:	8f 01       	movw	r16, r30
					DataLen--;
    14fe:	21 97       	sbiw	r28, 0x01	; 1
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1500:	80 91 f6 00 	lds	r24, 0x00F6
    1504:	90 91 f7 00 	lds	r25, 0x00F7
				  goto End_Of_Control_Send;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
    1508:	89 2b       	or	r24, r25
    150a:	11 f0       	breq	.+4      	; 0x1510 <USB_Host_SendControlRequest+0xf8>
    150c:	20 97       	sbiw	r28, 0x00	; 0
    150e:	91 f7       	brne	.-28     	; 0x14f4 <USB_Host_SendControlRequest+0xdc>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1510:	80 91 a9 00 	lds	r24, 0x00A9
    1514:	80 64       	ori	r24, 0x40	; 64
    1516:	80 93 a9 00 	sts	0x00A9, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    151a:	80 91 a6 00 	lds	r24, 0x00A6
    151e:	8e 77       	andi	r24, 0x7E	; 126
    1520:	80 93 a6 00 	sts	0x00A6, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
    1524:	20 97       	sbiw	r28, 0x00	; 0
    1526:	91 f6       	brne	.-92     	; 0x14cc <USB_Host_SendControlRequest+0xb4>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1528:	80 91 aa 00 	lds	r24, 0x00AA
    152c:	8f 7c       	andi	r24, 0xCF	; 207
    152e:	80 62       	ori	r24, 0x20	; 32
    1530:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1534:	80 91 a9 00 	lds	r24, 0x00A9
    1538:	8f 7b       	andi	r24, 0xBF	; 191
    153a:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    153e:	82 e0       	ldi	r24, 0x02	; 2
    1540:	42 df       	rcall	.-380    	; 0x13c6 <USB_Host_WaitForIOS>
    1542:	98 2f       	mov	r25, r24
    1544:	88 23       	and	r24, r24
    1546:	09 f0       	breq	.+2      	; 0x154a <USB_Host_SendControlRequest+0x132>
    1548:	56 c0       	rjmp	.+172    	; 0x15f6 <USB_Host_SendControlRequest+0x1de>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    154a:	80 91 a6 00 	lds	r24, 0x00A6
    154e:	8b 77       	andi	r24, 0x7B	; 123
    1550:	80 93 a6 00 	sts	0x00A6, r24
		  goto End_Of_Control_Send;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1554:	82 e0       	ldi	r24, 0x02	; 2
    1556:	37 df       	rcall	.-402    	; 0x13c6 <USB_Host_WaitForIOS>
    1558:	98 2f       	mov	r25, r24
    155a:	4d c0       	rjmp	.+154    	; 0x15f6 <USB_Host_SendControlRequest+0x1de>
		  goto End_Of_Control_Send;
	}
	else
	{
		if (DataStream != NULL)
    155c:	01 15       	cp	r16, r1
    155e:	11 05       	cpc	r17, r1
    1560:	a9 f1       	breq	.+106    	; 0x15cc <USB_Host_SendControlRequest+0x1b4>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1562:	80 91 aa 00 	lds	r24, 0x00AA
    1566:	8f 7c       	andi	r24, 0xCF	; 207
    1568:	80 62       	ori	r24, 0x20	; 32
    156a:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    156e:	80 91 a9 00 	lds	r24, 0x00A9
    1572:	8f 7b       	andi	r24, 0xBF	; 191
    1574:	80 93 a9 00 	sts	0x00A9, r24
    1578:	1d c0       	rjmp	.+58     	; 0x15b4 <USB_Host_SendControlRequest+0x19c>
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    157a:	82 e0       	ldi	r24, 0x02	; 2
    157c:	24 df       	rcall	.-440    	; 0x13c6 <USB_Host_WaitForIOS>
    157e:	98 2f       	mov	r25, r24
    1580:	88 23       	and	r24, r24
    1582:	c9 f5       	brne	.+114    	; 0x15f6 <USB_Host_SendControlRequest+0x1de>
				  goto End_Of_Control_Send;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    1584:	80 91 1e 01 	lds	r24, 0x011E
    1588:	28 2f       	mov	r18, r24
    158a:	30 e0       	ldi	r19, 0x00	; 0
    158c:	07 c0       	rjmp	.+14     	; 0x159c <USB_Host_SendControlRequest+0x184>
				{
					Pipe_Write_8(*(DataStream++));
    158e:	f8 01       	movw	r30, r16
    1590:	81 91       	ld	r24, Z+
    1592:	8f 01       	movw	r16, r30
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    1594:	80 93 af 00 	sts	0x00AF, r24
					DataLen--;
    1598:	21 97       	sbiw	r28, 0x01	; 1
			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
				  goto End_Of_Control_Send;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    159a:	39 f0       	breq	.+14     	; 0x15aa <USB_Host_SendControlRequest+0x192>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    159c:	80 91 f6 00 	lds	r24, 0x00F6
    15a0:	90 91 f7 00 	lds	r25, 0x00F7
    15a4:	82 17       	cp	r24, r18
    15a6:	93 07       	cpc	r25, r19
    15a8:	90 f3       	brcs	.-28     	; 0x158e <USB_Host_SendControlRequest+0x176>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    15aa:	80 91 a6 00 	lds	r24, 0x00A6
    15ae:	8b 77       	andi	r24, 0x7B	; 123
    15b0:	80 93 a6 00 	sts	0x00A6, r24
		if (DataStream != NULL)
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
    15b4:	20 97       	sbiw	r28, 0x00	; 0
    15b6:	09 f7       	brne	.-62     	; 0x157a <USB_Host_SendControlRequest+0x162>
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    15b8:	82 e0       	ldi	r24, 0x02	; 2
    15ba:	05 df       	rcall	.-502    	; 0x13c6 <USB_Host_WaitForIOS>
    15bc:	98 2f       	mov	r25, r24
    15be:	88 23       	and	r24, r24
    15c0:	d1 f4       	brne	.+52     	; 0x15f6 <USB_Host_SendControlRequest+0x1de>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    15c2:	80 91 a9 00 	lds	r24, 0x00A9
    15c6:	80 64       	ori	r24, 0x40	; 64
    15c8:	80 93 a9 00 	sts	0x00A9, r24
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    15cc:	80 91 aa 00 	lds	r24, 0x00AA
    15d0:	8f 7c       	andi	r24, 0xCF	; 207
    15d2:	80 61       	ori	r24, 0x10	; 16
    15d4:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    15d8:	80 91 a9 00 	lds	r24, 0x00A9
    15dc:	8f 7b       	andi	r24, 0xBF	; 191
    15de:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    15e2:	81 e0       	ldi	r24, 0x01	; 1
    15e4:	f0 de       	rcall	.-544    	; 0x13c6 <USB_Host_WaitForIOS>
    15e6:	98 2f       	mov	r25, r24
    15e8:	88 23       	and	r24, r24
    15ea:	29 f4       	brne	.+10     	; 0x15f6 <USB_Host_SendControlRequest+0x1de>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    15ec:	80 91 a6 00 	lds	r24, 0x00A6
    15f0:	8e 77       	andi	r24, 0x7E	; 126
    15f2:	80 93 a6 00 	sts	0x00A6, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    15f6:	80 91 a9 00 	lds	r24, 0x00A9
    15fa:	80 64       	ori	r24, 0x40	; 64
    15fc:	80 93 a9 00 	sts	0x00A9, r24
	}

End_Of_Control_Send:
	Pipe_Freeze();

	if (BusSuspended)
    1600:	f0 fc       	sbrc	r15, 0
    1602:	05 c0       	rjmp	.+10     	; 0x160e <USB_Host_SendControlRequest+0x1f6>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    1604:	80 91 9e 00 	lds	r24, 0x009E
    1608:	8e 7f       	andi	r24, 0xFE	; 254
    160a:	80 93 9e 00 	sts	0x009E, r24
			 *  \param[in] PipeNumber  Index of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t PipeNumber)
			{
				UPRST = (1 << PipeNumber);
    160e:	81 e0       	ldi	r24, 0x01	; 1
    1610:	80 93 a8 00 	sts	0x00A8, r24
				UPRST = 0;
    1614:	10 92 a8 00 	sts	0x00A8, r1
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
    1618:	89 2f       	mov	r24, r25
    161a:	df 91       	pop	r29
    161c:	cf 91       	pop	r28
    161e:	1f 91       	pop	r17
    1620:	0f 91       	pop	r16
    1622:	ff 90       	pop	r15
    1624:	08 95       	ret

00001626 <USB_Host_ClearEndpointStall>:
	return USB_Host_SendControlRequest(FeatureStatus);
}

uint8_t USB_Host_ClearEndpointStall(const uint8_t EndpointAddress)
{
	USB_ControlRequest = (USB_Request_Header_t)
    1626:	92 e0       	ldi	r25, 0x02	; 2
    1628:	90 93 25 01 	sts	0x0125, r25
    162c:	91 e0       	ldi	r25, 0x01	; 1
    162e:	90 93 26 01 	sts	0x0126, r25
    1632:	10 92 28 01 	sts	0x0128, r1
    1636:	10 92 27 01 	sts	0x0127, r1
    163a:	80 93 29 01 	sts	0x0129, r24
    163e:	10 92 2a 01 	sts	0x012A, r1
    1642:	10 92 2c 01 	sts	0x012C, r1
    1646:	10 92 2b 01 	sts	0x012B, r1
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    164a:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	return USB_Host_SendControlRequest(NULL);
    164e:	80 e0       	ldi	r24, 0x00	; 0
    1650:	90 e0       	ldi	r25, 0x00	; 0
}
    1652:	e2 ce       	rjmp	.-572    	; 0x1418 <USB_Host_SendControlRequest>

00001654 <USB_Host_SetDeviceConfiguration>:

	return HOST_SENDCONTROL_Successful;
}

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
    1654:	1f 93       	push	r17
    1656:	18 2f       	mov	r17, r24
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
    1658:	10 92 25 01 	sts	0x0125, r1
    165c:	89 e0       	ldi	r24, 0x09	; 9
    165e:	80 93 26 01 	sts	0x0126, r24
    1662:	10 93 27 01 	sts	0x0127, r17
    1666:	10 92 28 01 	sts	0x0128, r1
    166a:	10 92 2a 01 	sts	0x012A, r1
    166e:	10 92 29 01 	sts	0x0129, r1
    1672:	10 92 2c 01 	sts	0x012C, r1
    1676:	10 92 2b 01 	sts	0x012B, r1
    167a:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);
	
	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) == HOST_SENDCONTROL_Successful)
    167e:	80 e0       	ldi	r24, 0x00	; 0
    1680:	90 e0       	ldi	r25, 0x00	; 0
    1682:	ca de       	rcall	.-620    	; 0x1418 <USB_Host_SendControlRequest>
    1684:	88 23       	and	r24, r24
    1686:	49 f4       	brne	.+18     	; 0x169a <USB_Host_SetDeviceConfiguration+0x46>
	{
		USB_Host_ConfigurationNumber = ConfigNumber;
    1688:	10 93 23 01 	sts	0x0123, r17
		USB_HostState                = (ConfigNumber) ? HOST_STATE_Configured : HOST_STATE_Addressed;
    168c:	11 23       	and	r17, r17
    168e:	11 f4       	brne	.+4      	; 0x1694 <USB_Host_SetDeviceConfiguration+0x40>
    1690:	9a e0       	ldi	r25, 0x0A	; 10
    1692:	01 c0       	rjmp	.+2      	; 0x1696 <USB_Host_SetDeviceConfiguration+0x42>
    1694:	9b e0       	ldi	r25, 0x0B	; 11
    1696:	90 93 2d 01 	sts	0x012D, r25
	}

	return ErrorCode;
}
    169a:	1f 91       	pop	r17
    169c:	08 95       	ret

0000169e <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    169e:	ff 92       	push	r15
    16a0:	0f 93       	push	r16
    16a2:	1f 93       	push	r17
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
    16a4:	07 ea       	ldi	r16, 0xA7	; 167
    16a6:	10 e0       	ldi	r17, 0x00	; 0
    16a8:	f8 01       	movw	r30, r16
    16aa:	f0 80       	ld	r15, Z
    16ac:	f7 e0       	ldi	r31, 0x07	; 7
    16ae:	ff 22       	and	r15, r31
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    16b0:	f8 01       	movw	r30, r16
    16b2:	10 82       	st	Z, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    16b4:	39 da       	rcall	.-2958   	; 0xb28 <USB_Host_ProcessNextHostState>
    16b6:	f8 01       	movw	r30, r16
    16b8:	f0 82       	st	Z, r15
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
    16ba:	1f 91       	pop	r17
    16bc:	0f 91       	pop	r16
    16be:	ff 90       	pop	r15
    16c0:	08 95       	ret

000016c2 <DCOMP_MS_Host_NextMSInterface>:

	return MS_ENUMERROR_NoError;
}

static uint8_t DCOMP_MS_Host_NextMSInterface(void* const CurrentDescriptor)
{
    16c2:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
    16c4:	81 81       	ldd	r24, Z+1	; 0x01
    16c6:	84 30       	cpi	r24, 0x04	; 4
    16c8:	59 f4       	brne	.+22     	; 0x16e0 <DCOMP_MS_Host_NextMSInterface+0x1e>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		if ((Interface->Class    == MS_CSCP_MassStorageClass)        &&
    16ca:	85 81       	ldd	r24, Z+5	; 0x05
    16cc:	88 30       	cpi	r24, 0x08	; 8
    16ce:	41 f4       	brne	.+16     	; 0x16e0 <DCOMP_MS_Host_NextMSInterface+0x1e>
    16d0:	86 81       	ldd	r24, Z+6	; 0x06
    16d2:	86 30       	cpi	r24, 0x06	; 6
    16d4:	29 f4       	brne	.+10     	; 0x16e0 <DCOMP_MS_Host_NextMSInterface+0x1e>
    16d6:	87 81       	ldd	r24, Z+7	; 0x07
    16d8:	80 35       	cpi	r24, 0x50	; 80
    16da:	11 f4       	brne	.+4      	; 0x16e0 <DCOMP_MS_Host_NextMSInterface+0x1e>
    16dc:	80 e0       	ldi	r24, 0x00	; 0
    16de:	08 95       	ret
    16e0:	82 e0       	ldi	r24, 0x02	; 2
			return DESCRIPTOR_SEARCH_Found;
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    16e2:	08 95       	ret

000016e4 <MS_Host_WaitForDataReceived>:

	return ErrorCode;
}

static uint8_t MS_Host_WaitForDataReceived(USB_ClassInfo_MS_Host_t* const MSInterfaceInfo)
{
    16e4:	fc 01       	movw	r30, r24
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
    16e6:	60 91 a2 00 	lds	r22, 0x00A2
    16ea:	70 91 a3 00 	lds	r23, 0x00A3
	uint16_t TimeoutMSRem        = MS_COMMAND_DATA_TIMEOUT_MS;
	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	Pipe_SelectPipe(MSInterfaceInfo->Config.DataINPipeNumber);
    16ee:	40 81       	ld	r20, Z
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    16f0:	40 93 a7 00 	sts	0x00A7, r20

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    16f4:	80 91 a9 00 	lds	r24, 0x00A9
    16f8:	8f 7b       	andi	r24, 0xBF	; 191
    16fa:	80 93 a9 00 	sts	0x00A9, r24
    16fe:	20 e1       	ldi	r18, 0x10	; 16
    1700:	37 e2       	ldi	r19, 0x27	; 39
    1702:	45 c0       	rjmp	.+138    	; 0x178e <MS_Host_WaitForDataReceived+0xaa>
    1704:	80 91 a2 00 	lds	r24, 0x00A2
    1708:	90 91 a3 00 	lds	r25, 0x00A3

	while (!(Pipe_IsINReceived()))
	{
		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    170c:	86 17       	cp	r24, r22
    170e:	97 07       	cpc	r25, r23
    1710:	41 f0       	breq	.+16     	; 0x1722 <MS_Host_WaitForDataReceived+0x3e>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    1712:	21 15       	cp	r18, r1
    1714:	31 05       	cpc	r19, r1
    1716:	11 f4       	brne	.+4      	; 0x171c <MS_Host_WaitForDataReceived+0x38>
    1718:	83 e0       	ldi	r24, 0x03	; 3
    171a:	08 95       	ret
    171c:	21 50       	subi	r18, 0x01	; 1
    171e:	30 40       	sbci	r19, 0x00	; 0
    1720:	bc 01       	movw	r22, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1722:	80 91 a9 00 	lds	r24, 0x00A9
    1726:	80 64       	ori	r24, 0x40	; 64
    1728:	80 93 a9 00 	sts	0x00A9, r24
			  return PIPE_RWSTREAM_Timeout;
		}

		Pipe_Freeze();
		Pipe_SelectPipe(MSInterfaceInfo->Config.DataOUTPipeNumber);
    172c:	82 81       	ldd	r24, Z+2	; 0x02
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    172e:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1732:	80 91 a9 00 	lds	r24, 0x00A9
    1736:	8f 7b       	andi	r24, 0xBF	; 191
    1738:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
    173c:	80 91 a6 00 	lds	r24, 0x00A6
		Pipe_Unfreeze();

		if (Pipe_IsStalled())
    1740:	81 fd       	sbrc	r24, 1
    1742:	10 c0       	rjmp	.+32     	; 0x1764 <MS_Host_WaitForDataReceived+0x80>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1744:	80 91 a9 00 	lds	r24, 0x00A9
    1748:	80 64       	ori	r24, 0x40	; 64
    174a:	80 93 a9 00 	sts	0x00A9, r24
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    174e:	40 93 a7 00 	sts	0x00A7, r20

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1752:	80 91 a9 00 	lds	r24, 0x00A9
    1756:	8f 7b       	andi	r24, 0xBF	; 191
    1758:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
    175c:	80 91 a6 00 	lds	r24, 0x00A6

		Pipe_Freeze();
		Pipe_SelectPipe(MSInterfaceInfo->Config.DataINPipeNumber);
		Pipe_Unfreeze();

		if (Pipe_IsStalled())
    1760:	81 ff       	sbrs	r24, 1
    1762:	0f c0       	rjmp	.+30     	; 0x1782 <MS_Host_WaitForDataReceived+0x9e>
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				return (((UPCFG0X >> PEPNUM0) & PIPE_EPNUM_MASK) |
    1764:	90 91 aa 00 	lds	r25, 0x00AA
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
    1768:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				return (((UPCFG0X >> PEPNUM0) & PIPE_EPNUM_MASK) |
    176c:	80 73       	andi	r24, 0x30	; 48
    176e:	80 31       	cpi	r24, 0x10	; 16
    1770:	11 f0       	breq	.+4      	; 0x1776 <MS_Host_WaitForDataReceived+0x92>
    1772:	80 e0       	ldi	r24, 0x00	; 0
    1774:	01 c0       	rjmp	.+2      	; 0x1778 <MS_Host_WaitForDataReceived+0x94>
    1776:	80 e8       	ldi	r24, 0x80	; 128
		{
			USB_Host_ClearEndpointStall(Pipe_GetBoundEndpointAddress());
    1778:	9f 70       	andi	r25, 0x0F	; 15
    177a:	89 2b       	or	r24, r25
    177c:	54 df       	rcall	.-344    	; 0x1626 <USB_Host_ClearEndpointStall>
    177e:	81 e0       	ldi	r24, 0x01	; 1
    1780:	08 95       	ret
			return PIPE_RWSTREAM_PipeStalled;
		}

		if (USB_HostState == HOST_STATE_Unattached)
    1782:	80 91 2d 01 	lds	r24, 0x012D
    1786:	81 30       	cpi	r24, 0x01	; 1
    1788:	11 f4       	brne	.+4      	; 0x178e <MS_Host_WaitForDataReceived+0xaa>
    178a:	82 e0       	ldi	r24, 0x02	; 2
    178c:	08 95       	ret
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    178e:	80 91 a6 00 	lds	r24, 0x00A6
	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	Pipe_SelectPipe(MSInterfaceInfo->Config.DataINPipeNumber);
	Pipe_Unfreeze();

	while (!(Pipe_IsINReceived()))
    1792:	80 ff       	sbrs	r24, 0
    1794:	b7 cf       	rjmp	.-146    	; 0x1704 <MS_Host_WaitForDataReceived+0x20>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1796:	40 93 a7 00 	sts	0x00A7, r20

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    179a:	80 91 a9 00 	lds	r24, 0x00A9
    179e:	80 64       	ori	r24, 0x40	; 64
    17a0:	80 93 a9 00 	sts	0x00A9, r24
	};

	Pipe_SelectPipe(MSInterfaceInfo->Config.DataINPipeNumber);
	Pipe_Freeze();

	Pipe_SelectPipe(MSInterfaceInfo->Config.DataOUTPipeNumber);
    17a4:	82 81       	ldd	r24, Z+2	; 0x02
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    17a6:	80 93 a7 00 	sts	0x00A7, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    17aa:	80 91 a9 00 	lds	r24, 0x00A9
    17ae:	80 64       	ori	r24, 0x40	; 64
    17b0:	80 93 a9 00 	sts	0x00A9, r24
    17b4:	80 e0       	ldi	r24, 0x00	; 0
	Pipe_Freeze();

	return PIPE_RWSTREAM_NoError;
}
    17b6:	08 95       	ret

000017b8 <MS_Host_SendCommand>:
}

static uint8_t MS_Host_SendCommand(USB_ClassInfo_MS_Host_t* const MSInterfaceInfo,
                                   MS_CommandBlockWrapper_t* const SCSICommandBlock,
                                   const void* const BufferPtr)
{
    17b8:	bf 92       	push	r11
    17ba:	cf 92       	push	r12
    17bc:	df 92       	push	r13
    17be:	ef 92       	push	r14
    17c0:	ff 92       	push	r15
    17c2:	0f 93       	push	r16
    17c4:	1f 93       	push	r17
    17c6:	cf 93       	push	r28
    17c8:	df 93       	push	r29
    17ca:	ec 01       	movw	r28, r24
    17cc:	8b 01       	movw	r16, r22
    17ce:	7a 01       	movw	r14, r20
	uint8_t ErrorCode = PIPE_RWSTREAM_NoError;

	if (++MSInterfaceInfo->State.TransactionTag == 0xFFFFFFFF)
    17d0:	8a 85       	ldd	r24, Y+10	; 0x0a
    17d2:	9b 85       	ldd	r25, Y+11	; 0x0b
    17d4:	ac 85       	ldd	r26, Y+12	; 0x0c
    17d6:	bd 85       	ldd	r27, Y+13	; 0x0d
    17d8:	01 96       	adiw	r24, 0x01	; 1
    17da:	a1 1d       	adc	r26, r1
    17dc:	b1 1d       	adc	r27, r1
    17de:	8a 87       	std	Y+10, r24	; 0x0a
    17e0:	9b 87       	std	Y+11, r25	; 0x0b
    17e2:	ac 87       	std	Y+12, r26	; 0x0c
    17e4:	bd 87       	std	Y+13, r27	; 0x0d
    17e6:	8f 5f       	subi	r24, 0xFF	; 255
    17e8:	9f 4f       	sbci	r25, 0xFF	; 255
    17ea:	af 4f       	sbci	r26, 0xFF	; 255
    17ec:	bf 4f       	sbci	r27, 0xFF	; 255
    17ee:	41 f4       	brne	.+16     	; 0x1800 <MS_Host_SendCommand+0x48>
	  MSInterfaceInfo->State.TransactionTag = 1;
    17f0:	81 e0       	ldi	r24, 0x01	; 1
    17f2:	90 e0       	ldi	r25, 0x00	; 0
    17f4:	a0 e0       	ldi	r26, 0x00	; 0
    17f6:	b0 e0       	ldi	r27, 0x00	; 0
    17f8:	8a 87       	std	Y+10, r24	; 0x0a
    17fa:	9b 87       	std	Y+11, r25	; 0x0b
    17fc:	ac 87       	std	Y+12, r26	; 0x0c
    17fe:	bd 87       	std	Y+13, r27	; 0x0d

	SCSICommandBlock->Signature = CPU_TO_LE32(MS_CBW_SIGNATURE);
    1800:	85 e5       	ldi	r24, 0x55	; 85
    1802:	93 e5       	ldi	r25, 0x53	; 83
    1804:	a2 e4       	ldi	r26, 0x42	; 66
    1806:	b3 e4       	ldi	r27, 0x43	; 67
    1808:	f8 01       	movw	r30, r16
    180a:	80 83       	st	Z, r24
    180c:	91 83       	std	Z+1, r25	; 0x01
    180e:	a2 83       	std	Z+2, r26	; 0x02
    1810:	b3 83       	std	Z+3, r27	; 0x03
	SCSICommandBlock->Tag       = cpu_to_le32(MSInterfaceInfo->State.TransactionTag);
    1812:	8a 85       	ldd	r24, Y+10	; 0x0a
    1814:	9b 85       	ldd	r25, Y+11	; 0x0b
    1816:	ac 85       	ldd	r26, Y+12	; 0x0c
    1818:	bd 85       	ldd	r27, Y+13	; 0x0d
    181a:	84 83       	std	Z+4, r24	; 0x04
    181c:	95 83       	std	Z+5, r25	; 0x05
    181e:	a6 83       	std	Z+6, r26	; 0x06
    1820:	b7 83       	std	Z+7, r27	; 0x07

	Pipe_SelectPipe(MSInterfaceInfo->Config.DataOUTPipeNumber);
    1822:	8a 81       	ldd	r24, Y+2	; 0x02
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1824:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1828:	80 91 a9 00 	lds	r24, 0x00A9
    182c:	8f 7b       	andi	r24, 0xBF	; 191
    182e:	80 93 a9 00 	sts	0x00A9, r24
	Pipe_Unfreeze();

	if ((ErrorCode = Pipe_Write_Stream_LE(SCSICommandBlock, sizeof(MS_CommandBlockWrapper_t),
    1832:	c8 01       	movw	r24, r16
    1834:	6f e1       	ldi	r22, 0x1F	; 31
    1836:	70 e0       	ldi	r23, 0x00	; 0
    1838:	40 e0       	ldi	r20, 0x00	; 0
    183a:	50 e0       	ldi	r21, 0x00	; 0
    183c:	ce dc       	rcall	.-1636   	; 0x11da <Pipe_Write_Stream_LE>
    183e:	b8 2e       	mov	r11, r24
    1840:	88 23       	and	r24, r24
    1842:	09 f0       	breq	.+2      	; 0x1846 <MS_Host_SendCommand+0x8e>
    1844:	61 c0       	rjmp	.+194    	; 0x1908 <MS_Host_SendCommand+0x150>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1846:	80 91 a6 00 	lds	r24, 0x00A6
    184a:	8b 77       	andi	r24, 0x7B	; 123
    184c:	80 93 a6 00 	sts	0x00A6, r24
	                                      NULL)) != PIPE_RWSTREAM_NoError)
	  return ErrorCode;

	Pipe_ClearOUT();
	Pipe_WaitUntilReady();
    1850:	2a db       	rcall	.-2476   	; 0xea6 <Pipe_WaitUntilReady>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1852:	80 91 a9 00 	lds	r24, 0x00A9
    1856:	80 64       	ori	r24, 0x40	; 64
    1858:	80 93 a9 00 	sts	0x00A9, r24

	Pipe_Freeze();

	if ((BufferPtr != NULL) &&
    185c:	e1 14       	cp	r14, r1
    185e:	f1 04       	cpc	r15, r1
    1860:	09 f4       	brne	.+2      	; 0x1864 <MS_Host_SendCommand+0xac>
    1862:	52 c0       	rjmp	.+164    	; 0x1908 <MS_Host_SendCommand+0x150>
static uint8_t MS_Host_SendReceiveData(USB_ClassInfo_MS_Host_t* const MSInterfaceInfo,
                                       MS_CommandBlockWrapper_t* const SCSICommandBlock,
                                       void* BufferPtr)
{
	uint8_t  ErrorCode = PIPE_RWSTREAM_NoError;
	uint16_t BytesRem  = le32_to_cpu(SCSICommandBlock->DataTransferLength);
    1864:	f8 01       	movw	r30, r16
    1866:	c0 84       	ldd	r12, Z+8	; 0x08
    1868:	d1 84       	ldd	r13, Z+9	; 0x09

	if (SCSICommandBlock->Flags & MS_COMMAND_DIR_DATA_IN)
    186a:	84 85       	ldd	r24, Z+12	; 0x0c
    186c:	87 ff       	sbrs	r24, 7
    186e:	21 c0       	rjmp	.+66     	; 0x18b2 <MS_Host_SendCommand+0xfa>
	{
		if ((ErrorCode = MS_Host_WaitForDataReceived(MSInterfaceInfo)) != PIPE_RWSTREAM_NoError)
    1870:	ce 01       	movw	r24, r28
    1872:	38 df       	rcall	.-400    	; 0x16e4 <MS_Host_WaitForDataReceived>
    1874:	98 2f       	mov	r25, r24
    1876:	88 23       	and	r24, r24
    1878:	31 f0       	breq	.+12     	; 0x1886 <MS_Host_SendCommand+0xce>
    187a:	80 91 a9 00 	lds	r24, 0x00A9
    187e:	80 64       	ori	r24, 0x40	; 64
    1880:	80 93 a9 00 	sts	0x00A9, r24
    1884:	3b c0       	rjmp	.+118    	; 0x18fc <MS_Host_SendCommand+0x144>
		{
			Pipe_Freeze();
			return ErrorCode;
		}

		Pipe_SelectPipe(MSInterfaceInfo->Config.DataINPipeNumber);
    1886:	88 81       	ld	r24, Y
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1888:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    188c:	80 91 a9 00 	lds	r24, 0x00A9
    1890:	8f 7b       	andi	r24, 0xBF	; 191
    1892:	80 93 a9 00 	sts	0x00A9, r24
		Pipe_Unfreeze();

		if ((ErrorCode = Pipe_Read_Stream_LE(BufferPtr, BytesRem, NULL)) != PIPE_RWSTREAM_NoError)
    1896:	c7 01       	movw	r24, r14
    1898:	b6 01       	movw	r22, r12
    189a:	40 e0       	ldi	r20, 0x00	; 0
    189c:	50 e0       	ldi	r21, 0x00	; 0
    189e:	46 dc       	rcall	.-1908   	; 0x112c <Pipe_Read_Stream_LE>
    18a0:	98 2f       	mov	r25, r24
    18a2:	88 23       	and	r24, r24
    18a4:	59 f5       	brne	.+86     	; 0x18fc <MS_Host_SendCommand+0x144>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    18a6:	80 91 a6 00 	lds	r24, 0x00A6
    18aa:	8e 77       	andi	r24, 0x7E	; 126
    18ac:	80 93 a6 00 	sts	0x00A6, r24
    18b0:	1e c0       	rjmp	.+60     	; 0x18ee <MS_Host_SendCommand+0x136>

		Pipe_ClearIN();
	}
	else
	{
		Pipe_SelectPipe(MSInterfaceInfo->Config.DataOUTPipeNumber);
    18b2:	8a 81       	ldd	r24, Y+2	; 0x02
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    18b4:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    18b8:	80 91 a9 00 	lds	r24, 0x00A9
    18bc:	8f 7b       	andi	r24, 0xBF	; 191
    18be:	80 93 a9 00 	sts	0x00A9, r24
		Pipe_Unfreeze();

		if ((ErrorCode = Pipe_Write_Stream_LE(BufferPtr, BytesRem, NULL)) != PIPE_RWSTREAM_NoError)
    18c2:	c7 01       	movw	r24, r14
    18c4:	b6 01       	movw	r22, r12
    18c6:	40 e0       	ldi	r20, 0x00	; 0
    18c8:	50 e0       	ldi	r21, 0x00	; 0
    18ca:	87 dc       	rcall	.-1778   	; 0x11da <Pipe_Write_Stream_LE>
    18cc:	98 2f       	mov	r25, r24
    18ce:	88 23       	and	r24, r24
    18d0:	a9 f4       	brne	.+42     	; 0x18fc <MS_Host_SendCommand+0x144>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    18d2:	80 91 a6 00 	lds	r24, 0x00A6
    18d6:	8b 77       	andi	r24, 0x7B	; 123
    18d8:	80 93 a6 00 	sts	0x00A6, r24
    18dc:	04 c0       	rjmp	.+8      	; 0x18e6 <MS_Host_SendCommand+0x12e>

		Pipe_ClearOUT();

		while (!(Pipe_IsOUTReady()))
		{
			if (USB_HostState == HOST_STATE_Unattached)
    18de:	80 91 2d 01 	lds	r24, 0x012D
    18e2:	81 30       	cpi	r24, 0x01	; 1
    18e4:	51 f0       	breq	.+20     	; 0x18fa <MS_Host_SendCommand+0x142>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
    18e6:	80 91 a6 00 	lds	r24, 0x00A6
		if ((ErrorCode = Pipe_Write_Stream_LE(BufferPtr, BytesRem, NULL)) != PIPE_RWSTREAM_NoError)
		  return ErrorCode;

		Pipe_ClearOUT();

		while (!(Pipe_IsOUTReady()))
    18ea:	82 ff       	sbrs	r24, 2
    18ec:	f8 cf       	rjmp	.-16     	; 0x18de <MS_Host_SendCommand+0x126>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    18ee:	80 91 a9 00 	lds	r24, 0x00A9
    18f2:	80 64       	ori	r24, 0x40	; 64
    18f4:	80 93 a9 00 	sts	0x00A9, r24
    18f8:	07 c0       	rjmp	.+14     	; 0x1908 <MS_Host_SendCommand+0x150>
    18fa:	92 e0       	ldi	r25, 0x02	; 2
		Pipe_Freeze();
		return ErrorCode;
	}

	return ErrorCode;
}
    18fc:	80 91 a9 00 	lds	r24, 0x00A9
    1900:	80 64       	ori	r24, 0x40	; 64
    1902:	80 93 a9 00 	sts	0x00A9, r24
    1906:	b9 2e       	mov	r11, r25
    1908:	8b 2d       	mov	r24, r11
    190a:	df 91       	pop	r29
    190c:	cf 91       	pop	r28
    190e:	1f 91       	pop	r17
    1910:	0f 91       	pop	r16
    1912:	ff 90       	pop	r15
    1914:	ef 90       	pop	r14
    1916:	df 90       	pop	r13
    1918:	cf 90       	pop	r12
    191a:	bf 90       	pop	r11
    191c:	08 95       	ret

0000191e <MS_Host_GetReturnedStatus>:
	return ErrorCode;
}

static uint8_t MS_Host_GetReturnedStatus(USB_ClassInfo_MS_Host_t* const MSInterfaceInfo,
                                         MS_CommandStatusWrapper_t* const SCSICommandStatus)
{
    191e:	0f 93       	push	r16
    1920:	1f 93       	push	r17
    1922:	cf 93       	push	r28
    1924:	df 93       	push	r29
    1926:	ec 01       	movw	r28, r24
    1928:	8b 01       	movw	r16, r22
	uint8_t ErrorCode = PIPE_RWSTREAM_NoError;

	if ((ErrorCode = MS_Host_WaitForDataReceived(MSInterfaceInfo)) != PIPE_RWSTREAM_NoError)
    192a:	dc de       	rcall	.-584    	; 0x16e4 <MS_Host_WaitForDataReceived>
    192c:	98 2f       	mov	r25, r24
    192e:	88 23       	and	r24, r24
    1930:	f9 f4       	brne	.+62     	; 0x1970 <MS_Host_GetReturnedStatus+0x52>
	  return ErrorCode;

	Pipe_SelectPipe(MSInterfaceInfo->Config.DataINPipeNumber);
    1932:	88 81       	ld	r24, Y
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1934:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1938:	80 91 a9 00 	lds	r24, 0x00A9
    193c:	8f 7b       	andi	r24, 0xBF	; 191
    193e:	80 93 a9 00 	sts	0x00A9, r24
	Pipe_Unfreeze();

	if ((ErrorCode = Pipe_Read_Stream_LE(SCSICommandStatus, sizeof(MS_CommandStatusWrapper_t),
    1942:	c8 01       	movw	r24, r16
    1944:	6d e0       	ldi	r22, 0x0D	; 13
    1946:	70 e0       	ldi	r23, 0x00	; 0
    1948:	40 e0       	ldi	r20, 0x00	; 0
    194a:	50 e0       	ldi	r21, 0x00	; 0
    194c:	ef db       	rcall	.-2082   	; 0x112c <Pipe_Read_Stream_LE>
    194e:	98 2f       	mov	r25, r24
    1950:	88 23       	and	r24, r24
    1952:	71 f4       	brne	.+28     	; 0x1970 <MS_Host_GetReturnedStatus+0x52>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1954:	80 91 a6 00 	lds	r24, 0x00A6
    1958:	8e 77       	andi	r24, 0x7E	; 126
    195a:	80 93 a6 00 	sts	0x00A6, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    195e:	80 91 a9 00 	lds	r24, 0x00A9
    1962:	80 64       	ori	r24, 0x40	; 64
    1964:	80 93 a9 00 	sts	0x00A9, r24
	}

	Pipe_ClearIN();
	Pipe_Freeze();

	if (SCSICommandStatus->Status != MS_SCSI_COMMAND_Pass)
    1968:	f8 01       	movw	r30, r16
    196a:	84 85       	ldd	r24, Z+12	; 0x0c
    196c:	81 11       	cpse	r24, r1
    196e:	90 e8       	ldi	r25, 0x80	; 128
	  ErrorCode = MS_ERROR_LOGICAL_CMD_FAILED;

	return ErrorCode;
}
    1970:	89 2f       	mov	r24, r25
    1972:	df 91       	pop	r29
    1974:	cf 91       	pop	r28
    1976:	1f 91       	pop	r17
    1978:	0f 91       	pop	r16
    197a:	08 95       	ret

0000197c <MS_Host_ReadDeviceBlocks>:
                                 const uint8_t LUNIndex,
                                 const uint32_t BlockAddress,
                                 const uint8_t Blocks,
                                 const uint16_t BlockSize,
                                 void* BlockBuffer)
{
    197c:	4f 92       	push	r4
    197e:	5f 92       	push	r5
    1980:	6f 92       	push	r6
    1982:	7f 92       	push	r7
    1984:	8f 92       	push	r8
    1986:	9f 92       	push	r9
    1988:	af 92       	push	r10
    198a:	bf 92       	push	r11
    198c:	cf 92       	push	r12
    198e:	df 92       	push	r13
    1990:	ef 92       	push	r14
    1992:	ff 92       	push	r15
    1994:	0f 93       	push	r16
    1996:	1f 93       	push	r17
    1998:	df 93       	push	r29
    199a:	cf 93       	push	r28
    199c:	cd b7       	in	r28, 0x3d	; 61
    199e:	de b7       	in	r29, 0x3e	; 62
    19a0:	ac 97       	sbiw	r28, 0x2c	; 44
    19a2:	0f b6       	in	r0, 0x3f	; 63
    19a4:	f8 94       	cli
    19a6:	de bf       	out	0x3e, r29	; 62
    19a8:	0f be       	out	0x3f, r0	; 63
    19aa:	cd bf       	out	0x3d, r28	; 61
    19ac:	3c 01       	movw	r6, r24
    19ae:	46 2e       	mov	r4, r22
    19b0:	49 01       	movw	r8, r18
    19b2:	5a 01       	movw	r10, r20
    19b4:	50 2e       	mov	r5, r16
	if ((USB_HostState != HOST_STATE_Configured) || !(MSInterfaceInfo->State.IsActive))
    19b6:	80 91 2d 01 	lds	r24, 0x012D
    19ba:	8b 30       	cpi	r24, 0x0B	; 11
    19bc:	d9 f5       	brne	.+118    	; 0x1a34 <MS_Host_ReadDeviceBlocks+0xb8>
    19be:	f3 01       	movw	r30, r6
    19c0:	84 81       	ldd	r24, Z+4	; 0x04
    19c2:	88 23       	and	r24, r24
    19c4:	b9 f1       	breq	.+110    	; 0x1a34 <MS_Host_ReadDeviceBlocks+0xb8>
					0x00,                   // Reserved
					0x00,                   // MSB of Total Blocks to Read
					Blocks,                 // LSB of Total Blocks to Read
					0x00                    // Unused (control)
				}
		};
    19c6:	8e 01       	movw	r16, r28
    19c8:	02 5f       	subi	r16, 0xF2	; 242
    19ca:	1f 4f       	sbci	r17, 0xFF	; 255
    19cc:	8f e1       	ldi	r24, 0x1F	; 31
    19ce:	f8 01       	movw	r30, r16
    19d0:	11 92       	st	Z+, r1
    19d2:	8a 95       	dec	r24
    19d4:	e9 f7       	brne	.-6      	; 0x19d0 <MS_Host_ReadDeviceBlocks+0x54>
    19d6:	b7 01       	movw	r22, r14
    19d8:	80 e0       	ldi	r24, 0x00	; 0
    19da:	90 e0       	ldi	r25, 0x00	; 0
    19dc:	25 2d       	mov	r18, r5
    19de:	30 e0       	ldi	r19, 0x00	; 0
    19e0:	40 e0       	ldi	r20, 0x00	; 0
    19e2:	50 e0       	ldi	r21, 0x00	; 0
    19e4:	35 d3       	rcall	.+1642   	; 0x2050 <__mulsi3>
    19e6:	6e 8b       	std	Y+22, r22	; 0x16
    19e8:	7f 8b       	std	Y+23, r23	; 0x17
    19ea:	88 8f       	std	Y+24, r24	; 0x18
    19ec:	99 8f       	std	Y+25, r25	; 0x19
    19ee:	80 e8       	ldi	r24, 0x80	; 128
    19f0:	8a 8f       	std	Y+26, r24	; 0x1a
    19f2:	4b 8e       	std	Y+27, r4	; 0x1b
    19f4:	8a e0       	ldi	r24, 0x0A	; 10
    19f6:	8c 8f       	std	Y+28, r24	; 0x1c
    19f8:	88 e2       	ldi	r24, 0x28	; 40
    19fa:	8d 8f       	std	Y+29, r24	; 0x1d
    19fc:	8b 2d       	mov	r24, r11
    19fe:	99 27       	eor	r25, r25
    1a00:	aa 27       	eor	r26, r26
    1a02:	bb 27       	eor	r27, r27
    1a04:	8f 8f       	std	Y+31, r24	; 0x1f
    1a06:	c5 01       	movw	r24, r10
    1a08:	aa 27       	eor	r26, r26
    1a0a:	bb 27       	eor	r27, r27
    1a0c:	88 a3       	std	Y+32, r24	; 0x20
    1a0e:	bb 27       	eor	r27, r27
    1a10:	ab 2d       	mov	r26, r11
    1a12:	9a 2d       	mov	r25, r10
    1a14:	89 2d       	mov	r24, r9
    1a16:	89 a3       	std	Y+33, r24	; 0x21
    1a18:	8a a2       	std	Y+34, r8	; 0x22
    1a1a:	5d a2       	std	Y+37, r5	; 0x25

	MS_CommandStatusWrapper_t SCSICommandStatus;

	if ((ErrorCode = MS_Host_SendCommand(MSInterfaceInfo, &SCSICommandBlock, BlockBuffer)) != PIPE_RWSTREAM_NoError)
    1a1c:	c3 01       	movw	r24, r6
    1a1e:	b8 01       	movw	r22, r16
    1a20:	a6 01       	movw	r20, r12
    1a22:	ca de       	rcall	.-620    	; 0x17b8 <MS_Host_SendCommand>
    1a24:	88 23       	and	r24, r24
    1a26:	39 f4       	brne	.+14     	; 0x1a36 <MS_Host_ReadDeviceBlocks+0xba>
	  return ErrorCode;

	if ((ErrorCode = MS_Host_GetReturnedStatus(MSInterfaceInfo, &SCSICommandStatus)) != PIPE_RWSTREAM_NoError)
    1a28:	c3 01       	movw	r24, r6
    1a2a:	be 01       	movw	r22, r28
    1a2c:	6f 5f       	subi	r22, 0xFF	; 255
    1a2e:	7f 4f       	sbci	r23, 0xFF	; 255
    1a30:	76 df       	rcall	.-276    	; 0x191e <MS_Host_GetReturnedStatus>
    1a32:	01 c0       	rjmp	.+2      	; 0x1a36 <MS_Host_ReadDeviceBlocks+0xba>
    1a34:	81 e0       	ldi	r24, 0x01	; 1
	  return ErrorCode;

	return PIPE_RWSTREAM_NoError;
}
    1a36:	ac 96       	adiw	r28, 0x2c	; 44
    1a38:	0f b6       	in	r0, 0x3f	; 63
    1a3a:	f8 94       	cli
    1a3c:	de bf       	out	0x3e, r29	; 62
    1a3e:	0f be       	out	0x3f, r0	; 63
    1a40:	cd bf       	out	0x3d, r28	; 61
    1a42:	cf 91       	pop	r28
    1a44:	df 91       	pop	r29
    1a46:	1f 91       	pop	r17
    1a48:	0f 91       	pop	r16
    1a4a:	ff 90       	pop	r15
    1a4c:	ef 90       	pop	r14
    1a4e:	df 90       	pop	r13
    1a50:	cf 90       	pop	r12
    1a52:	bf 90       	pop	r11
    1a54:	af 90       	pop	r10
    1a56:	9f 90       	pop	r9
    1a58:	8f 90       	pop	r8
    1a5a:	7f 90       	pop	r7
    1a5c:	6f 90       	pop	r6
    1a5e:	5f 90       	pop	r5
    1a60:	4f 90       	pop	r4
    1a62:	08 95       	ret

00001a64 <MS_Host_PreventAllowMediumRemoval>:
}

uint8_t MS_Host_PreventAllowMediumRemoval(USB_ClassInfo_MS_Host_t* const MSInterfaceInfo,
                                          const uint8_t LUNIndex,
                                          const bool PreventRemoval)
{
    1a64:	0f 93       	push	r16
    1a66:	1f 93       	push	r17
    1a68:	df 93       	push	r29
    1a6a:	cf 93       	push	r28
    1a6c:	cd b7       	in	r28, 0x3d	; 61
    1a6e:	de b7       	in	r29, 0x3e	; 62
    1a70:	ac 97       	sbiw	r28, 0x2c	; 44
    1a72:	0f b6       	in	r0, 0x3f	; 63
    1a74:	f8 94       	cli
    1a76:	de bf       	out	0x3e, r29	; 62
    1a78:	0f be       	out	0x3f, r0	; 63
    1a7a:	cd bf       	out	0x3d, r28	; 61
    1a7c:	8c 01       	movw	r16, r24
	if ((USB_HostState != HOST_STATE_Configured) || !(MSInterfaceInfo->State.IsActive))
    1a7e:	80 91 2d 01 	lds	r24, 0x012D
    1a82:	8b 30       	cpi	r24, 0x0B	; 11
    1a84:	f9 f4       	brne	.+62     	; 0x1ac4 <MS_Host_PreventAllowMediumRemoval+0x60>
    1a86:	d8 01       	movw	r26, r16
    1a88:	14 96       	adiw	r26, 0x04	; 4
    1a8a:	8c 91       	ld	r24, X
    1a8c:	88 23       	and	r24, r24
    1a8e:	d1 f0       	breq	.+52     	; 0x1ac4 <MS_Host_PreventAllowMediumRemoval+0x60>
					0x00,                   // Reserved
					PreventRemoval,         // Prevent flag
					0x00,                   // Reserved
					0x00                    // Unused (control)
				}
		};
    1a90:	fe 01       	movw	r30, r28
    1a92:	3e 96       	adiw	r30, 0x0e	; 14
    1a94:	8f e1       	ldi	r24, 0x1F	; 31
    1a96:	df 01       	movw	r26, r30
    1a98:	1d 92       	st	X+, r1
    1a9a:	8a 95       	dec	r24
    1a9c:	e9 f7       	brne	.-6      	; 0x1a98 <MS_Host_PreventAllowMediumRemoval+0x34>
    1a9e:	6b 8f       	std	Y+27, r22	; 0x1b
    1aa0:	86 e0       	ldi	r24, 0x06	; 6
    1aa2:	8c 8f       	std	Y+28, r24	; 0x1c
    1aa4:	8e e1       	ldi	r24, 0x1E	; 30
    1aa6:	8d 8f       	std	Y+29, r24	; 0x1d
    1aa8:	48 a3       	std	Y+32, r20	; 0x20

	MS_CommandStatusWrapper_t SCSICommandStatus;

	if ((ErrorCode = MS_Host_SendCommand(MSInterfaceInfo, &SCSICommandBlock, NULL)) != PIPE_RWSTREAM_NoError)
    1aaa:	c8 01       	movw	r24, r16
    1aac:	bf 01       	movw	r22, r30
    1aae:	40 e0       	ldi	r20, 0x00	; 0
    1ab0:	50 e0       	ldi	r21, 0x00	; 0
    1ab2:	82 de       	rcall	.-764    	; 0x17b8 <MS_Host_SendCommand>
    1ab4:	88 23       	and	r24, r24
    1ab6:	39 f4       	brne	.+14     	; 0x1ac6 <MS_Host_PreventAllowMediumRemoval+0x62>
	  return ErrorCode;

	if ((ErrorCode = MS_Host_GetReturnedStatus(MSInterfaceInfo, &SCSICommandStatus)) != PIPE_RWSTREAM_NoError)
    1ab8:	c8 01       	movw	r24, r16
    1aba:	be 01       	movw	r22, r28
    1abc:	6f 5f       	subi	r22, 0xFF	; 255
    1abe:	7f 4f       	sbci	r23, 0xFF	; 255
    1ac0:	2e df       	rcall	.-420    	; 0x191e <MS_Host_GetReturnedStatus>
    1ac2:	01 c0       	rjmp	.+2      	; 0x1ac6 <MS_Host_PreventAllowMediumRemoval+0x62>
    1ac4:	81 e0       	ldi	r24, 0x01	; 1
	  return ErrorCode;

	return PIPE_RWSTREAM_NoError;
}
    1ac6:	ac 96       	adiw	r28, 0x2c	; 44
    1ac8:	0f b6       	in	r0, 0x3f	; 63
    1aca:	f8 94       	cli
    1acc:	de bf       	out	0x3e, r29	; 62
    1ace:	0f be       	out	0x3f, r0	; 63
    1ad0:	cd bf       	out	0x3d, r28	; 61
    1ad2:	cf 91       	pop	r28
    1ad4:	df 91       	pop	r29
    1ad6:	1f 91       	pop	r17
    1ad8:	0f 91       	pop	r16
    1ada:	08 95       	ret

00001adc <MS_Host_RequestSense>:
}

uint8_t MS_Host_RequestSense(USB_ClassInfo_MS_Host_t* const MSInterfaceInfo,
                             const uint8_t LUNIndex,
                             SCSI_Request_Sense_Response_t* const SenseData)
{
    1adc:	0f 93       	push	r16
    1ade:	1f 93       	push	r17
    1ae0:	df 93       	push	r29
    1ae2:	cf 93       	push	r28
    1ae4:	cd b7       	in	r28, 0x3d	; 61
    1ae6:	de b7       	in	r29, 0x3e	; 62
    1ae8:	ac 97       	sbiw	r28, 0x2c	; 44
    1aea:	0f b6       	in	r0, 0x3f	; 63
    1aec:	f8 94       	cli
    1aee:	de bf       	out	0x3e, r29	; 62
    1af0:	0f be       	out	0x3f, r0	; 63
    1af2:	cd bf       	out	0x3d, r28	; 61
    1af4:	8c 01       	movw	r16, r24
	if ((USB_HostState != HOST_STATE_Configured) || !(MSInterfaceInfo->State.IsActive))
    1af6:	80 91 2d 01 	lds	r24, 0x012D
    1afa:	8b 30       	cpi	r24, 0x0B	; 11
    1afc:	41 f5       	brne	.+80     	; 0x1b4e <MS_Host_RequestSense+0x72>
    1afe:	d8 01       	movw	r26, r16
    1b00:	14 96       	adiw	r26, 0x04	; 4
    1b02:	8c 91       	ld	r24, X
    1b04:	88 23       	and	r24, r24
    1b06:	19 f1       	breq	.+70     	; 0x1b4e <MS_Host_RequestSense+0x72>
					0x00,                                  // Reserved
					0x00,                                  // Reserved
					sizeof(SCSI_Request_Sense_Response_t), // Allocation Length
					0x00                                   // Unused (control)
				}
		};
    1b08:	fe 01       	movw	r30, r28
    1b0a:	3e 96       	adiw	r30, 0x0e	; 14
    1b0c:	8f e1       	ldi	r24, 0x1F	; 31
    1b0e:	df 01       	movw	r26, r30
    1b10:	1d 92       	st	X+, r1
    1b12:	8a 95       	dec	r24
    1b14:	e9 f7       	brne	.-6      	; 0x1b10 <MS_Host_RequestSense+0x34>
    1b16:	82 e1       	ldi	r24, 0x12	; 18
    1b18:	90 e0       	ldi	r25, 0x00	; 0
    1b1a:	a0 e0       	ldi	r26, 0x00	; 0
    1b1c:	b0 e0       	ldi	r27, 0x00	; 0
    1b1e:	8e 8b       	std	Y+22, r24	; 0x16
    1b20:	9f 8b       	std	Y+23, r25	; 0x17
    1b22:	a8 8f       	std	Y+24, r26	; 0x18
    1b24:	b9 8f       	std	Y+25, r27	; 0x19
    1b26:	80 e8       	ldi	r24, 0x80	; 128
    1b28:	8a 8f       	std	Y+26, r24	; 0x1a
    1b2a:	6b 8f       	std	Y+27, r22	; 0x1b
    1b2c:	86 e0       	ldi	r24, 0x06	; 6
    1b2e:	8c 8f       	std	Y+28, r24	; 0x1c
    1b30:	83 e0       	ldi	r24, 0x03	; 3
    1b32:	8d 8f       	std	Y+29, r24	; 0x1d
    1b34:	82 e1       	ldi	r24, 0x12	; 18
    1b36:	89 a3       	std	Y+33, r24	; 0x21

	MS_CommandStatusWrapper_t SCSICommandStatus;

	if ((ErrorCode = MS_Host_SendCommand(MSInterfaceInfo, &SCSICommandBlock, SenseData)) != PIPE_RWSTREAM_NoError)
    1b38:	c8 01       	movw	r24, r16
    1b3a:	bf 01       	movw	r22, r30
    1b3c:	3d de       	rcall	.-902    	; 0x17b8 <MS_Host_SendCommand>
    1b3e:	88 23       	and	r24, r24
    1b40:	39 f4       	brne	.+14     	; 0x1b50 <MS_Host_RequestSense+0x74>
	  return ErrorCode;

	if ((ErrorCode = MS_Host_GetReturnedStatus(MSInterfaceInfo, &SCSICommandStatus)) != PIPE_RWSTREAM_NoError)
    1b42:	c8 01       	movw	r24, r16
    1b44:	be 01       	movw	r22, r28
    1b46:	6f 5f       	subi	r22, 0xFF	; 255
    1b48:	7f 4f       	sbci	r23, 0xFF	; 255
    1b4a:	e9 de       	rcall	.-558    	; 0x191e <MS_Host_GetReturnedStatus>
    1b4c:	01 c0       	rjmp	.+2      	; 0x1b50 <MS_Host_RequestSense+0x74>
    1b4e:	81 e0       	ldi	r24, 0x01	; 1
	  return ErrorCode;

	return PIPE_RWSTREAM_NoError;
}
    1b50:	ac 96       	adiw	r28, 0x2c	; 44
    1b52:	0f b6       	in	r0, 0x3f	; 63
    1b54:	f8 94       	cli
    1b56:	de bf       	out	0x3e, r29	; 62
    1b58:	0f be       	out	0x3f, r0	; 63
    1b5a:	cd bf       	out	0x3d, r28	; 61
    1b5c:	cf 91       	pop	r28
    1b5e:	df 91       	pop	r29
    1b60:	1f 91       	pop	r17
    1b62:	0f 91       	pop	r16
    1b64:	08 95       	ret

00001b66 <MS_Host_ReadDeviceCapacity>:
}

uint8_t MS_Host_ReadDeviceCapacity(USB_ClassInfo_MS_Host_t* const MSInterfaceInfo,
                                   const uint8_t LUNIndex,
                                   SCSI_Capacity_t* const DeviceCapacity)
{
    1b66:	af 92       	push	r10
    1b68:	bf 92       	push	r11
    1b6a:	cf 92       	push	r12
    1b6c:	df 92       	push	r13
    1b6e:	ef 92       	push	r14
    1b70:	ff 92       	push	r15
    1b72:	0f 93       	push	r16
    1b74:	1f 93       	push	r17
    1b76:	df 93       	push	r29
    1b78:	cf 93       	push	r28
    1b7a:	cd b7       	in	r28, 0x3d	; 61
    1b7c:	de b7       	in	r29, 0x3e	; 62
    1b7e:	ac 97       	sbiw	r28, 0x2c	; 44
    1b80:	0f b6       	in	r0, 0x3f	; 63
    1b82:	f8 94       	cli
    1b84:	de bf       	out	0x3e, r29	; 62
    1b86:	0f be       	out	0x3f, r0	; 63
    1b88:	cd bf       	out	0x3d, r28	; 61
    1b8a:	5c 01       	movw	r10, r24
    1b8c:	6a 01       	movw	r12, r20
	if ((USB_HostState != HOST_STATE_Configured) || !(MSInterfaceInfo->State.IsActive))
    1b8e:	80 91 2d 01 	lds	r24, 0x012D
    1b92:	8b 30       	cpi	r24, 0x0B	; 11
    1b94:	09 f0       	breq	.+2      	; 0x1b98 <MS_Host_ReadDeviceCapacity+0x32>
    1b96:	85 c0       	rjmp	.+266    	; 0x1ca2 <MS_Host_ReadDeviceCapacity+0x13c>
    1b98:	d5 01       	movw	r26, r10
    1b9a:	14 96       	adiw	r26, 0x04	; 4
    1b9c:	8c 91       	ld	r24, X
    1b9e:	88 23       	and	r24, r24
    1ba0:	09 f4       	brne	.+2      	; 0x1ba4 <MS_Host_ReadDeviceCapacity+0x3e>
    1ba2:	7f c0       	rjmp	.+254    	; 0x1ca2 <MS_Host_ReadDeviceCapacity+0x13c>
					0x00,                   // Reserved
					0x00,                   // Reserved
					0x00,                   // Partial Medium Indicator
					0x00                    // Unused (control)
				}
		};
    1ba4:	fe 01       	movw	r30, r28
    1ba6:	3e 96       	adiw	r30, 0x0e	; 14
    1ba8:	8f e1       	ldi	r24, 0x1F	; 31
    1baa:	df 01       	movw	r26, r30
    1bac:	1d 92       	st	X+, r1
    1bae:	8a 95       	dec	r24
    1bb0:	e9 f7       	brne	.-6      	; 0x1bac <MS_Host_ReadDeviceCapacity+0x46>
    1bb2:	88 e0       	ldi	r24, 0x08	; 8
    1bb4:	90 e0       	ldi	r25, 0x00	; 0
    1bb6:	a0 e0       	ldi	r26, 0x00	; 0
    1bb8:	b0 e0       	ldi	r27, 0x00	; 0
    1bba:	8e 8b       	std	Y+22, r24	; 0x16
    1bbc:	9f 8b       	std	Y+23, r25	; 0x17
    1bbe:	a8 8f       	std	Y+24, r26	; 0x18
    1bc0:	b9 8f       	std	Y+25, r27	; 0x19
    1bc2:	80 e8       	ldi	r24, 0x80	; 128
    1bc4:	8a 8f       	std	Y+26, r24	; 0x1a
    1bc6:	6b 8f       	std	Y+27, r22	; 0x1b
    1bc8:	8a e0       	ldi	r24, 0x0A	; 10
    1bca:	8c 8f       	std	Y+28, r24	; 0x1c
    1bcc:	85 e2       	ldi	r24, 0x25	; 37
    1bce:	8d 8f       	std	Y+29, r24	; 0x1d

	MS_CommandStatusWrapper_t SCSICommandStatus;

	if ((ErrorCode = MS_Host_SendCommand(MSInterfaceInfo, &SCSICommandBlock, DeviceCapacity)) != PIPE_RWSTREAM_NoError)
    1bd0:	c5 01       	movw	r24, r10
    1bd2:	bf 01       	movw	r22, r30
    1bd4:	f1 dd       	rcall	.-1054   	; 0x17b8 <MS_Host_SendCommand>
    1bd6:	88 23       	and	r24, r24
    1bd8:	09 f0       	breq	.+2      	; 0x1bdc <MS_Host_ReadDeviceCapacity+0x76>
    1bda:	64 c0       	rjmp	.+200    	; 0x1ca4 <MS_Host_ReadDeviceCapacity+0x13e>
	  return ErrorCode;

	DeviceCapacity->Blocks    = BE32_TO_CPU(DeviceCapacity->Blocks);
    1bdc:	f6 01       	movw	r30, r12
    1bde:	20 81       	ld	r18, Z
    1be0:	31 81       	ldd	r19, Z+1	; 0x01
    1be2:	42 81       	ldd	r20, Z+2	; 0x02
    1be4:	53 81       	ldd	r21, Z+3	; 0x03
    1be6:	12 2f       	mov	r17, r18
    1be8:	00 27       	eor	r16, r16
    1bea:	ff 24       	eor	r15, r15
    1bec:	ee 24       	eor	r14, r14
    1bee:	85 2f       	mov	r24, r21
    1bf0:	99 27       	eor	r25, r25
    1bf2:	aa 27       	eor	r26, r26
    1bf4:	bb 27       	eor	r27, r27
    1bf6:	e8 2a       	or	r14, r24
    1bf8:	f9 2a       	or	r15, r25
    1bfa:	0a 2b       	or	r16, r26
    1bfc:	1b 2b       	or	r17, r27
    1bfe:	da 01       	movw	r26, r20
    1c00:	c9 01       	movw	r24, r18
    1c02:	80 70       	andi	r24, 0x00	; 0
    1c04:	90 70       	andi	r25, 0x00	; 0
    1c06:	b0 70       	andi	r27, 0x00	; 0
    1c08:	89 2f       	mov	r24, r25
    1c0a:	9a 2f       	mov	r25, r26
    1c0c:	ab 2f       	mov	r26, r27
    1c0e:	bb 27       	eor	r27, r27
    1c10:	e8 2a       	or	r14, r24
    1c12:	f9 2a       	or	r15, r25
    1c14:	0a 2b       	or	r16, r26
    1c16:	1b 2b       	or	r17, r27
    1c18:	20 70       	andi	r18, 0x00	; 0
    1c1a:	40 70       	andi	r20, 0x00	; 0
    1c1c:	50 70       	andi	r21, 0x00	; 0
    1c1e:	54 2f       	mov	r21, r20
    1c20:	43 2f       	mov	r20, r19
    1c22:	32 2f       	mov	r19, r18
    1c24:	22 27       	eor	r18, r18
    1c26:	e2 2a       	or	r14, r18
    1c28:	f3 2a       	or	r15, r19
    1c2a:	04 2b       	or	r16, r20
    1c2c:	15 2b       	or	r17, r21
    1c2e:	d6 01       	movw	r26, r12
    1c30:	ed 92       	st	X+, r14
    1c32:	fd 92       	st	X+, r15
    1c34:	0d 93       	st	X+, r16
    1c36:	1c 93       	st	X, r17
    1c38:	13 97       	sbiw	r26, 0x03	; 3
	DeviceCapacity->BlockSize = BE32_TO_CPU(DeviceCapacity->BlockSize);
    1c3a:	14 96       	adiw	r26, 0x04	; 4
    1c3c:	2d 91       	ld	r18, X+
    1c3e:	3d 91       	ld	r19, X+
    1c40:	4d 91       	ld	r20, X+
    1c42:	5c 91       	ld	r21, X
    1c44:	17 97       	sbiw	r26, 0x07	; 7
    1c46:	12 2f       	mov	r17, r18
    1c48:	00 27       	eor	r16, r16
    1c4a:	ff 24       	eor	r15, r15
    1c4c:	ee 24       	eor	r14, r14
    1c4e:	85 2f       	mov	r24, r21
    1c50:	99 27       	eor	r25, r25
    1c52:	aa 27       	eor	r26, r26
    1c54:	bb 27       	eor	r27, r27
    1c56:	e8 2a       	or	r14, r24
    1c58:	f9 2a       	or	r15, r25
    1c5a:	0a 2b       	or	r16, r26
    1c5c:	1b 2b       	or	r17, r27
    1c5e:	da 01       	movw	r26, r20
    1c60:	c9 01       	movw	r24, r18
    1c62:	80 70       	andi	r24, 0x00	; 0
    1c64:	90 70       	andi	r25, 0x00	; 0
    1c66:	b0 70       	andi	r27, 0x00	; 0
    1c68:	89 2f       	mov	r24, r25
    1c6a:	9a 2f       	mov	r25, r26
    1c6c:	ab 2f       	mov	r26, r27
    1c6e:	bb 27       	eor	r27, r27
    1c70:	e8 2a       	or	r14, r24
    1c72:	f9 2a       	or	r15, r25
    1c74:	0a 2b       	or	r16, r26
    1c76:	1b 2b       	or	r17, r27
    1c78:	20 70       	andi	r18, 0x00	; 0
    1c7a:	40 70       	andi	r20, 0x00	; 0
    1c7c:	50 70       	andi	r21, 0x00	; 0
    1c7e:	54 2f       	mov	r21, r20
    1c80:	43 2f       	mov	r20, r19
    1c82:	32 2f       	mov	r19, r18
    1c84:	22 27       	eor	r18, r18
    1c86:	e2 2a       	or	r14, r18
    1c88:	f3 2a       	or	r15, r19
    1c8a:	04 2b       	or	r16, r20
    1c8c:	15 2b       	or	r17, r21
    1c8e:	e4 82       	std	Z+4, r14	; 0x04
    1c90:	f5 82       	std	Z+5, r15	; 0x05
    1c92:	06 83       	std	Z+6, r16	; 0x06
    1c94:	17 83       	std	Z+7, r17	; 0x07

	if ((ErrorCode = MS_Host_GetReturnedStatus(MSInterfaceInfo, &SCSICommandStatus)) != PIPE_RWSTREAM_NoError)
    1c96:	c5 01       	movw	r24, r10
    1c98:	be 01       	movw	r22, r28
    1c9a:	6f 5f       	subi	r22, 0xFF	; 255
    1c9c:	7f 4f       	sbci	r23, 0xFF	; 255
    1c9e:	3f de       	rcall	.-898    	; 0x191e <MS_Host_GetReturnedStatus>
    1ca0:	01 c0       	rjmp	.+2      	; 0x1ca4 <MS_Host_ReadDeviceCapacity+0x13e>
    1ca2:	81 e0       	ldi	r24, 0x01	; 1
	  return ErrorCode;

	return PIPE_RWSTREAM_NoError;
}
    1ca4:	ac 96       	adiw	r28, 0x2c	; 44
    1ca6:	0f b6       	in	r0, 0x3f	; 63
    1ca8:	f8 94       	cli
    1caa:	de bf       	out	0x3e, r29	; 62
    1cac:	0f be       	out	0x3f, r0	; 63
    1cae:	cd bf       	out	0x3d, r28	; 61
    1cb0:	cf 91       	pop	r28
    1cb2:	df 91       	pop	r29
    1cb4:	1f 91       	pop	r17
    1cb6:	0f 91       	pop	r16
    1cb8:	ff 90       	pop	r15
    1cba:	ef 90       	pop	r14
    1cbc:	df 90       	pop	r13
    1cbe:	cf 90       	pop	r12
    1cc0:	bf 90       	pop	r11
    1cc2:	af 90       	pop	r10
    1cc4:	08 95       	ret

00001cc6 <MS_Host_TestUnitReady>:
	return PIPE_RWSTREAM_NoError;
}

uint8_t MS_Host_TestUnitReady(USB_ClassInfo_MS_Host_t* const MSInterfaceInfo,
                              const uint8_t LUNIndex)
{
    1cc6:	0f 93       	push	r16
    1cc8:	1f 93       	push	r17
    1cca:	df 93       	push	r29
    1ccc:	cf 93       	push	r28
    1cce:	cd b7       	in	r28, 0x3d	; 61
    1cd0:	de b7       	in	r29, 0x3e	; 62
    1cd2:	ac 97       	sbiw	r28, 0x2c	; 44
    1cd4:	0f b6       	in	r0, 0x3f	; 63
    1cd6:	f8 94       	cli
    1cd8:	de bf       	out	0x3e, r29	; 62
    1cda:	0f be       	out	0x3f, r0	; 63
    1cdc:	cd bf       	out	0x3d, r28	; 61
    1cde:	8c 01       	movw	r16, r24
	if ((USB_HostState != HOST_STATE_Configured) || !(MSInterfaceInfo->State.IsActive))
    1ce0:	80 91 2d 01 	lds	r24, 0x012D
    1ce4:	8b 30       	cpi	r24, 0x0B	; 11
    1ce6:	f1 f4       	brne	.+60     	; 0x1d24 <MS_Host_TestUnitReady+0x5e>
    1ce8:	d8 01       	movw	r26, r16
    1cea:	14 96       	adiw	r26, 0x04	; 4
    1cec:	8c 91       	ld	r24, X
    1cee:	88 23       	and	r24, r24
    1cf0:	c9 f0       	breq	.+50     	; 0x1d24 <MS_Host_TestUnitReady+0x5e>
					0x00,                   // Reserved
					0x00,                   // Reserved
					0x00,                   // Reserved
					0x00                    // Unused (control)
				}
		};
    1cf2:	fe 01       	movw	r30, r28
    1cf4:	3e 96       	adiw	r30, 0x0e	; 14
    1cf6:	8f e1       	ldi	r24, 0x1F	; 31
    1cf8:	df 01       	movw	r26, r30
    1cfa:	1d 92       	st	X+, r1
    1cfc:	8a 95       	dec	r24
    1cfe:	e9 f7       	brne	.-6      	; 0x1cfa <MS_Host_TestUnitReady+0x34>
    1d00:	80 e8       	ldi	r24, 0x80	; 128
    1d02:	8a 8f       	std	Y+26, r24	; 0x1a
    1d04:	6b 8f       	std	Y+27, r22	; 0x1b
    1d06:	86 e0       	ldi	r24, 0x06	; 6
    1d08:	8c 8f       	std	Y+28, r24	; 0x1c

	MS_CommandStatusWrapper_t SCSICommandStatus;

	if ((ErrorCode = MS_Host_SendCommand(MSInterfaceInfo, &SCSICommandBlock, NULL)) != PIPE_RWSTREAM_NoError)
    1d0a:	c8 01       	movw	r24, r16
    1d0c:	bf 01       	movw	r22, r30
    1d0e:	40 e0       	ldi	r20, 0x00	; 0
    1d10:	50 e0       	ldi	r21, 0x00	; 0
    1d12:	52 dd       	rcall	.-1372   	; 0x17b8 <MS_Host_SendCommand>
    1d14:	88 23       	and	r24, r24
    1d16:	39 f4       	brne	.+14     	; 0x1d26 <MS_Host_TestUnitReady+0x60>
	  return ErrorCode;

	if ((ErrorCode = MS_Host_GetReturnedStatus(MSInterfaceInfo, &SCSICommandStatus)) != PIPE_RWSTREAM_NoError)
    1d18:	c8 01       	movw	r24, r16
    1d1a:	be 01       	movw	r22, r28
    1d1c:	6f 5f       	subi	r22, 0xFF	; 255
    1d1e:	7f 4f       	sbci	r23, 0xFF	; 255
    1d20:	fe dd       	rcall	.-1028   	; 0x191e <MS_Host_GetReturnedStatus>
    1d22:	01 c0       	rjmp	.+2      	; 0x1d26 <MS_Host_TestUnitReady+0x60>
    1d24:	81 e0       	ldi	r24, 0x01	; 1
	  return ErrorCode;

	return PIPE_RWSTREAM_NoError;
}
    1d26:	ac 96       	adiw	r28, 0x2c	; 44
    1d28:	0f b6       	in	r0, 0x3f	; 63
    1d2a:	f8 94       	cli
    1d2c:	de bf       	out	0x3e, r29	; 62
    1d2e:	0f be       	out	0x3f, r0	; 63
    1d30:	cd bf       	out	0x3d, r28	; 61
    1d32:	cf 91       	pop	r28
    1d34:	df 91       	pop	r29
    1d36:	1f 91       	pop	r17
    1d38:	0f 91       	pop	r16
    1d3a:	08 95       	ret

00001d3c <MS_Host_GetInquiryData>:
}

uint8_t MS_Host_GetInquiryData(USB_ClassInfo_MS_Host_t* const MSInterfaceInfo,
                               const uint8_t LUNIndex,
                               SCSI_Inquiry_Response_t* const InquiryData)
{
    1d3c:	0f 93       	push	r16
    1d3e:	1f 93       	push	r17
    1d40:	df 93       	push	r29
    1d42:	cf 93       	push	r28
    1d44:	cd b7       	in	r28, 0x3d	; 61
    1d46:	de b7       	in	r29, 0x3e	; 62
    1d48:	ac 97       	sbiw	r28, 0x2c	; 44
    1d4a:	0f b6       	in	r0, 0x3f	; 63
    1d4c:	f8 94       	cli
    1d4e:	de bf       	out	0x3e, r29	; 62
    1d50:	0f be       	out	0x3f, r0	; 63
    1d52:	cd bf       	out	0x3d, r28	; 61
    1d54:	8c 01       	movw	r16, r24
	if ((USB_HostState != HOST_STATE_Configured) || !(MSInterfaceInfo->State.IsActive))
    1d56:	80 91 2d 01 	lds	r24, 0x012D
    1d5a:	8b 30       	cpi	r24, 0x0B	; 11
    1d5c:	41 f5       	brne	.+80     	; 0x1dae <MS_Host_GetInquiryData+0x72>
    1d5e:	d8 01       	movw	r26, r16
    1d60:	14 96       	adiw	r26, 0x04	; 4
    1d62:	8c 91       	ld	r24, X
    1d64:	88 23       	and	r24, r24
    1d66:	19 f1       	breq	.+70     	; 0x1dae <MS_Host_GetInquiryData+0x72>
					0x00,                            // Reserved
					0x00,                            // Reserved
					sizeof(SCSI_Inquiry_Response_t), // Allocation Length
					0x00                             // Unused (control)
				}
		};
    1d68:	fe 01       	movw	r30, r28
    1d6a:	3e 96       	adiw	r30, 0x0e	; 14
    1d6c:	8f e1       	ldi	r24, 0x1F	; 31
    1d6e:	df 01       	movw	r26, r30
    1d70:	1d 92       	st	X+, r1
    1d72:	8a 95       	dec	r24
    1d74:	e9 f7       	brne	.-6      	; 0x1d70 <MS_Host_GetInquiryData+0x34>
    1d76:	84 e2       	ldi	r24, 0x24	; 36
    1d78:	90 e0       	ldi	r25, 0x00	; 0
    1d7a:	a0 e0       	ldi	r26, 0x00	; 0
    1d7c:	b0 e0       	ldi	r27, 0x00	; 0
    1d7e:	8e 8b       	std	Y+22, r24	; 0x16
    1d80:	9f 8b       	std	Y+23, r25	; 0x17
    1d82:	a8 8f       	std	Y+24, r26	; 0x18
    1d84:	b9 8f       	std	Y+25, r27	; 0x19
    1d86:	80 e8       	ldi	r24, 0x80	; 128
    1d88:	8a 8f       	std	Y+26, r24	; 0x1a
    1d8a:	6b 8f       	std	Y+27, r22	; 0x1b
    1d8c:	86 e0       	ldi	r24, 0x06	; 6
    1d8e:	8c 8f       	std	Y+28, r24	; 0x1c
    1d90:	82 e1       	ldi	r24, 0x12	; 18
    1d92:	8d 8f       	std	Y+29, r24	; 0x1d
    1d94:	84 e2       	ldi	r24, 0x24	; 36
    1d96:	89 a3       	std	Y+33, r24	; 0x21

	MS_CommandStatusWrapper_t SCSICommandStatus;

	if ((ErrorCode = MS_Host_SendCommand(MSInterfaceInfo, &SCSICommandBlock, InquiryData)) != PIPE_RWSTREAM_NoError)
    1d98:	c8 01       	movw	r24, r16
    1d9a:	bf 01       	movw	r22, r30
    1d9c:	0d dd       	rcall	.-1510   	; 0x17b8 <MS_Host_SendCommand>
    1d9e:	88 23       	and	r24, r24
    1da0:	39 f4       	brne	.+14     	; 0x1db0 <MS_Host_GetInquiryData+0x74>
	  return ErrorCode;

	if ((ErrorCode = MS_Host_GetReturnedStatus(MSInterfaceInfo, &SCSICommandStatus)) != PIPE_RWSTREAM_NoError)
    1da2:	c8 01       	movw	r24, r16
    1da4:	be 01       	movw	r22, r28
    1da6:	6f 5f       	subi	r22, 0xFF	; 255
    1da8:	7f 4f       	sbci	r23, 0xFF	; 255
    1daa:	b9 dd       	rcall	.-1166   	; 0x191e <MS_Host_GetReturnedStatus>
    1dac:	01 c0       	rjmp	.+2      	; 0x1db0 <MS_Host_GetInquiryData+0x74>
    1dae:	81 e0       	ldi	r24, 0x01	; 1
	  return ErrorCode;

	return PIPE_RWSTREAM_NoError;
}
    1db0:	ac 96       	adiw	r28, 0x2c	; 44
    1db2:	0f b6       	in	r0, 0x3f	; 63
    1db4:	f8 94       	cli
    1db6:	de bf       	out	0x3e, r29	; 62
    1db8:	0f be       	out	0x3f, r0	; 63
    1dba:	cd bf       	out	0x3d, r28	; 61
    1dbc:	cf 91       	pop	r28
    1dbe:	df 91       	pop	r29
    1dc0:	1f 91       	pop	r17
    1dc2:	0f 91       	pop	r16
    1dc4:	08 95       	ret

00001dc6 <MS_Host_GetMaxLUN>:
	return HOST_SENDCONTROL_Successful;
}

uint8_t MS_Host_GetMaxLUN(USB_ClassInfo_MS_Host_t* const MSInterfaceInfo,
                          uint8_t* const MaxLUNIndex)
{
    1dc6:	cf 93       	push	r28
    1dc8:	df 93       	push	r29
    1dca:	eb 01       	movw	r28, r22
	uint8_t ErrorCode = HOST_SENDCONTROL_Successful;

	USB_ControlRequest = (USB_Request_Header_t)
    1dcc:	fc 01       	movw	r30, r24
    1dce:	95 81       	ldd	r25, Z+5	; 0x05
    1dd0:	81 ea       	ldi	r24, 0xA1	; 161
    1dd2:	80 93 25 01 	sts	0x0125, r24
    1dd6:	8e ef       	ldi	r24, 0xFE	; 254
    1dd8:	80 93 26 01 	sts	0x0126, r24
    1ddc:	10 92 28 01 	sts	0x0128, r1
    1de0:	10 92 27 01 	sts	0x0127, r1
    1de4:	90 93 29 01 	sts	0x0129, r25
    1de8:	10 92 2a 01 	sts	0x012A, r1
    1dec:	81 e0       	ldi	r24, 0x01	; 1
    1dee:	90 e0       	ldi	r25, 0x00	; 0
    1df0:	90 93 2c 01 	sts	0x012C, r25
    1df4:	80 93 2b 01 	sts	0x012B, r24
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1df8:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 1,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(MaxLUNIndex)) == HOST_SENDCONTROL_SetupStalled)
    1dfc:	cb 01       	movw	r24, r22
    1dfe:	0c db       	rcall	.-2536   	; 0x1418 <USB_Host_SendControlRequest>
    1e00:	83 30       	cpi	r24, 0x03	; 3
    1e02:	11 f4       	brne	.+4      	; 0x1e08 <MS_Host_GetMaxLUN+0x42>
	{
		*MaxLUNIndex = 0;
    1e04:	18 82       	st	Y, r1
    1e06:	80 e0       	ldi	r24, 0x00	; 0
		ErrorCode    = HOST_SENDCONTROL_Successful;
	}

	return ErrorCode;
}
    1e08:	df 91       	pop	r29
    1e0a:	cf 91       	pop	r28
    1e0c:	08 95       	ret

00001e0e <MS_Host_ResetMSInterface>:

	return ErrorCode;
}

uint8_t MS_Host_ResetMSInterface(USB_ClassInfo_MS_Host_t* const MSInterfaceInfo)
{
    1e0e:	cf 93       	push	r28
    1e10:	df 93       	push	r29
    1e12:	ec 01       	movw	r28, r24
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
    1e14:	8d 81       	ldd	r24, Y+5	; 0x05
    1e16:	91 e2       	ldi	r25, 0x21	; 33
    1e18:	90 93 25 01 	sts	0x0125, r25
    1e1c:	9f ef       	ldi	r25, 0xFF	; 255
    1e1e:	90 93 26 01 	sts	0x0126, r25
    1e22:	10 92 28 01 	sts	0x0128, r1
    1e26:	10 92 27 01 	sts	0x0127, r1
    1e2a:	80 93 29 01 	sts	0x0129, r24
    1e2e:	10 92 2a 01 	sts	0x012A, r1
    1e32:	10 92 2c 01 	sts	0x012C, r1
    1e36:	10 92 2b 01 	sts	0x012B, r1
    1e3a:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
    1e3e:	80 e0       	ldi	r24, 0x00	; 0
    1e40:	90 e0       	ldi	r25, 0x00	; 0
    1e42:	ea da       	rcall	.-2604   	; 0x1418 <USB_Host_SendControlRequest>
    1e44:	88 23       	and	r24, r24
    1e46:	11 f5       	brne	.+68     	; 0x1e8c <MS_Host_ResetMSInterface+0x7e>
	  return ErrorCode;
	
	Pipe_SelectPipe(MSInterfaceInfo->Config.DataINPipeNumber);
    1e48:	88 81       	ld	r24, Y
    1e4a:	80 93 a7 00 	sts	0x00A7, r24
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				return (((UPCFG0X >> PEPNUM0) & PIPE_EPNUM_MASK) |
    1e4e:	90 91 aa 00 	lds	r25, 0x00AA
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
    1e52:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				return (((UPCFG0X >> PEPNUM0) & PIPE_EPNUM_MASK) |
    1e56:	80 73       	andi	r24, 0x30	; 48
    1e58:	80 31       	cpi	r24, 0x10	; 16
    1e5a:	11 f0       	breq	.+4      	; 0x1e60 <MS_Host_ResetMSInterface+0x52>
    1e5c:	80 e0       	ldi	r24, 0x00	; 0
    1e5e:	01 c0       	rjmp	.+2      	; 0x1e62 <MS_Host_ResetMSInterface+0x54>
    1e60:	80 e8       	ldi	r24, 0x80	; 128
	
	if ((ErrorCode = USB_Host_ClearEndpointStall(Pipe_GetBoundEndpointAddress())) != HOST_SENDCONTROL_Successful)
    1e62:	9f 70       	andi	r25, 0x0F	; 15
    1e64:	89 2b       	or	r24, r25
    1e66:	df db       	rcall	.-2114   	; 0x1626 <USB_Host_ClearEndpointStall>
    1e68:	88 23       	and	r24, r24
    1e6a:	81 f4       	brne	.+32     	; 0x1e8c <MS_Host_ResetMSInterface+0x7e>
	  return ErrorCode;

	Pipe_SelectPipe(MSInterfaceInfo->Config.DataOUTPipeNumber);
    1e6c:	8a 81       	ldd	r24, Y+2	; 0x02
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1e6e:	80 93 a7 00 	sts	0x00A7, r24
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				return (((UPCFG0X >> PEPNUM0) & PIPE_EPNUM_MASK) |
    1e72:	90 91 aa 00 	lds	r25, 0x00AA
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
    1e76:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				return (((UPCFG0X >> PEPNUM0) & PIPE_EPNUM_MASK) |
    1e7a:	80 73       	andi	r24, 0x30	; 48
    1e7c:	80 31       	cpi	r24, 0x10	; 16
    1e7e:	11 f0       	breq	.+4      	; 0x1e84 <MS_Host_ResetMSInterface+0x76>
    1e80:	80 e0       	ldi	r24, 0x00	; 0
    1e82:	01 c0       	rjmp	.+2      	; 0x1e86 <MS_Host_ResetMSInterface+0x78>
    1e84:	80 e8       	ldi	r24, 0x80	; 128

	if ((ErrorCode = USB_Host_ClearEndpointStall(Pipe_GetBoundEndpointAddress())) != HOST_SENDCONTROL_Successful)
    1e86:	9f 70       	andi	r25, 0x0F	; 15
    1e88:	89 2b       	or	r24, r25
    1e8a:	cd db       	rcall	.-2150   	; 0x1626 <USB_Host_ClearEndpointStall>
	  return ErrorCode;

	return HOST_SENDCONTROL_Successful;
}
    1e8c:	df 91       	pop	r29
    1e8e:	cf 91       	pop	r28
    1e90:	08 95       	ret

00001e92 <MS_Host_ConfigurePipes>:
#include "MassStorage.h"

uint8_t MS_Host_ConfigurePipes(USB_ClassInfo_MS_Host_t* const MSInterfaceInfo,
                               uint16_t ConfigDescriptorSize,
							   void* ConfigDescriptorData)
{
    1e92:	6f 92       	push	r6
    1e94:	7f 92       	push	r7
    1e96:	8f 92       	push	r8
    1e98:	9f 92       	push	r9
    1e9a:	af 92       	push	r10
    1e9c:	bf 92       	push	r11
    1e9e:	cf 92       	push	r12
    1ea0:	df 92       	push	r13
    1ea2:	ef 92       	push	r14
    1ea4:	ff 92       	push	r15
    1ea6:	0f 93       	push	r16
    1ea8:	1f 93       	push	r17
    1eaa:	df 93       	push	r29
    1eac:	cf 93       	push	r28
    1eae:	00 d0       	rcall	.+0      	; 0x1eb0 <MS_Host_ConfigurePipes+0x1e>
    1eb0:	00 d0       	rcall	.+0      	; 0x1eb2 <MS_Host_ConfigurePipes+0x20>
    1eb2:	0f 92       	push	r0
    1eb4:	cd b7       	in	r28, 0x3d	; 61
    1eb6:	de b7       	in	r29, 0x3e	; 62
    1eb8:	6c 01       	movw	r12, r24
    1eba:	7a 83       	std	Y+2, r23	; 0x02
    1ebc:	69 83       	std	Y+1, r22	; 0x01
    1ebe:	5c 83       	std	Y+4, r21	; 0x04
    1ec0:	4b 83       	std	Y+3, r20	; 0x03
	USB_Descriptor_Endpoint_t*  DataINEndpoint       = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint      = NULL;
	USB_Descriptor_Interface_t* MassStorageInterface = NULL;

	memset(&MSInterfaceInfo->State, 0x00, sizeof(MSInterfaceInfo->State));
    1ec2:	04 96       	adiw	r24, 0x04	; 4
    1ec4:	fc 01       	movw	r30, r24
    1ec6:	8a e0       	ldi	r24, 0x0A	; 10
    1ec8:	df 01       	movw	r26, r30
    1eca:	1d 92       	st	X+, r1
    1ecc:	8a 95       	dec	r24
    1ece:	e9 f7       	brne	.-6      	; 0x1eca <MS_Host_ConfigurePipes+0x38>

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
    1ed0:	eb 81       	ldd	r30, Y+3	; 0x03
    1ed2:	fc 81       	ldd	r31, Y+4	; 0x04
    1ed4:	81 81       	ldd	r24, Z+1	; 0x01
    1ed6:	82 30       	cpi	r24, 0x02	; 2
    1ed8:	11 f0       	breq	.+4      	; 0x1ede <MS_Host_ConfigurePipes+0x4c>
    1eda:	81 e0       	ldi	r24, 0x01	; 1
    1edc:	73 c0       	rjmp	.+230    	; 0x1fc4 <MS_Host_ConfigurePipes+0x132>
    1ede:	88 24       	eor	r8, r8
    1ee0:	99 24       	eor	r9, r9
    1ee2:	aa 24       	eor	r10, r10
    1ee4:	bb 24       	eor	r11, r11
    1ee6:	66 24       	eor	r6, r6
    1ee8:	77 24       	eor	r7, r7
	  return MS_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		if (!(MassStorageInterface) ||
    1eea:	b3 e0       	ldi	r27, 0x03	; 3
    1eec:	eb 2e       	mov	r14, r27
    1eee:	f1 2c       	mov	r15, r1
    1ef0:	ec 0e       	add	r14, r28
    1ef2:	fd 1e       	adc	r15, r29
    1ef4:	8e 01       	movw	r16, r28
    1ef6:	0f 5f       	subi	r16, 0xFF	; 255
    1ef8:	1f 4f       	sbci	r17, 0xFF	; 255
    1efa:	61 14       	cp	r6, r1
    1efc:	71 04       	cpc	r7, r1
    1efe:	39 f0       	breq	.+14     	; 0x1f0e <MS_Host_ConfigurePipes+0x7c>
    1f00:	c8 01       	movw	r24, r16
    1f02:	b7 01       	movw	r22, r14
    1f04:	46 ef       	ldi	r20, 0xF6	; 246
    1f06:	5f e0       	ldi	r21, 0x0F	; 15
    1f08:	bf d9       	rcall	.-3202   	; 0x1288 <USB_GetNextDescriptorComp>
    1f0a:	88 23       	and	r24, r24
    1f0c:	81 f0       	breq	.+32     	; 0x1f2e <MS_Host_ConfigurePipes+0x9c>
		    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
		                              DCOMP_MS_Host_NextMSInterfaceEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    1f0e:	c8 01       	movw	r24, r16
    1f10:	b7 01       	movw	r22, r14
    1f12:	41 e6       	ldi	r20, 0x61	; 97
    1f14:	5b e0       	ldi	r21, 0x0B	; 11
    1f16:	b8 d9       	rcall	.-3216   	; 0x1288 <USB_GetNextDescriptorComp>
    1f18:	88 23       	and	r24, r24
    1f1a:	11 f0       	breq	.+4      	; 0x1f20 <MS_Host_ConfigurePipes+0x8e>
    1f1c:	82 e0       	ldi	r24, 0x02	; 2
    1f1e:	52 c0       	rjmp	.+164    	; 0x1fc4 <MS_Host_ConfigurePipes+0x132>
			                              DCOMP_MS_Host_NextMSInterface) != DESCRIPTOR_SEARCH_COMP_Found)
			{
				return MS_ENUMERROR_NoCompatibleInterfaceFound;
			}

			MassStorageInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);
    1f20:	6b 80       	ldd	r6, Y+3	; 0x03
    1f22:	7c 80       	ldd	r7, Y+4	; 0x04
    1f24:	aa 24       	eor	r10, r10
    1f26:	bb 24       	eor	r11, r11
    1f28:	88 24       	eor	r8, r8
    1f2a:	99 24       	eor	r9, r9
    1f2c:	e6 cf       	rjmp	.-52     	; 0x1efa <MS_Host_ConfigurePipes+0x68>
			DataOUTEndpoint = NULL;

			continue;
		}

		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Endpoint_t);
    1f2e:	eb 81       	ldd	r30, Y+3	; 0x03
    1f30:	fc 81       	ldd	r31, Y+4	; 0x04

		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
    1f32:	82 81       	ldd	r24, Z+2	; 0x02
    1f34:	87 fd       	sbrc	r24, 7
    1f36:	02 c0       	rjmp	.+4      	; 0x1f3c <MS_Host_ConfigurePipes+0xaa>
    1f38:	5f 01       	movw	r10, r30
    1f3a:	01 c0       	rjmp	.+2      	; 0x1f3e <MS_Host_ConfigurePipes+0xac>
    1f3c:	4f 01       	movw	r8, r30
	memset(&MSInterfaceInfo->State, 0x00, sizeof(MSInterfaceInfo->State));

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return MS_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
    1f3e:	81 14       	cp	r8, r1
    1f40:	91 04       	cpc	r9, r1
    1f42:	d9 f2       	breq	.-74     	; 0x1efa <MS_Host_ConfigurePipes+0x68>
    1f44:	a1 14       	cp	r10, r1
    1f46:	b1 04       	cpc	r11, r1
    1f48:	c1 f2       	breq	.-80     	; 0x1efa <MS_Host_ConfigurePipes+0x68>
    1f4a:	91 e0       	ldi	r25, 0x01	; 1
		uint8_t  Type;
		uint8_t  Token;
		uint8_t  EndpointAddress;
		bool     DoubleBanked;

		if (PipeNum == MSInterfaceInfo->Config.DataINPipeNumber)
    1f4c:	f6 01       	movw	r30, r12
    1f4e:	80 81       	ld	r24, Z
    1f50:	98 17       	cp	r25, r24
    1f52:	61 f4       	brne	.+24     	; 0x1f6c <MS_Host_ConfigurePipes+0xda>
		{
			Size            = le16_to_cpu(DataINEndpoint->EndpointSize);
    1f54:	d4 01       	movw	r26, r8
    1f56:	14 96       	adiw	r26, 0x04	; 4
    1f58:	0d 91       	ld	r16, X+
    1f5a:	1c 91       	ld	r17, X
    1f5c:	15 97       	sbiw	r26, 0x05	; 5
			EndpointAddress = DataINEndpoint->EndpointAddress;
    1f5e:	12 96       	adiw	r26, 0x02	; 2
    1f60:	2c 91       	ld	r18, X
			Token           = PIPE_TOKEN_IN;
			Type            = EP_TYPE_BULK;
			DoubleBanked    = MSInterfaceInfo->Config.DataINPipeDoubleBank;
    1f62:	81 81       	ldd	r24, Z+1	; 0x01

			MSInterfaceInfo->State.DataINPipeSize = DataINEndpoint->EndpointSize;
    1f64:	17 83       	std	Z+7, r17	; 0x07
    1f66:	06 83       	std	Z+6, r16	; 0x06
    1f68:	40 e1       	ldi	r20, 0x10	; 16
    1f6a:	0f c0       	rjmp	.+30     	; 0x1f8a <MS_Host_ConfigurePipes+0xf8>
		}
		else if (PipeNum == MSInterfaceInfo->Config.DataOUTPipeNumber)
    1f6c:	f6 01       	movw	r30, r12
    1f6e:	82 81       	ldd	r24, Z+2	; 0x02
    1f70:	98 17       	cp	r25, r24
    1f72:	d9 f4       	brne	.+54     	; 0x1faa <MS_Host_ConfigurePipes+0x118>
		{
			Size            = le16_to_cpu(DataOUTEndpoint->EndpointSize);
    1f74:	d5 01       	movw	r26, r10
    1f76:	14 96       	adiw	r26, 0x04	; 4
    1f78:	0d 91       	ld	r16, X+
    1f7a:	1c 91       	ld	r17, X
    1f7c:	15 97       	sbiw	r26, 0x05	; 5
			EndpointAddress = DataOUTEndpoint->EndpointAddress;
    1f7e:	12 96       	adiw	r26, 0x02	; 2
    1f80:	2c 91       	ld	r18, X
			Token           = PIPE_TOKEN_OUT;
			Type            = EP_TYPE_BULK;
			DoubleBanked    = MSInterfaceInfo->Config.DataOUTPipeDoubleBank;
    1f82:	83 81       	ldd	r24, Z+3	; 0x03
			
			MSInterfaceInfo->State.DataOUTPipeSize = DataOUTEndpoint->EndpointSize;
    1f84:	11 87       	std	Z+9, r17	; 0x09
    1f86:	00 87       	std	Z+8, r16	; 0x08
    1f88:	40 e2       	ldi	r20, 0x20	; 32
		else
		{
			continue;
		}

		if (!(Pipe_ConfigurePipe(PipeNum, Type, Token, EndpointAddress, Size,
    1f8a:	88 23       	and	r24, r24
    1f8c:	11 f4       	brne	.+4      	; 0x1f92 <MS_Host_ConfigurePipes+0x100>
    1f8e:	30 e0       	ldi	r19, 0x00	; 0
    1f90:	01 c0       	rjmp	.+2      	; 0x1f94 <MS_Host_ConfigurePipes+0x102>
    1f92:	34 e0       	ldi	r19, 0x04	; 4
    1f94:	89 2f       	mov	r24, r25
    1f96:	62 e0       	ldi	r22, 0x02	; 2
    1f98:	e3 2e       	mov	r14, r19
    1f9a:	9d 83       	std	Y+5, r25	; 0x05
    1f9c:	0e 94 bf 06 	call	0xd7e	; 0xd7e <Pipe_ConfigurePipe>
    1fa0:	9d 81       	ldd	r25, Y+5	; 0x05
    1fa2:	88 23       	and	r24, r24
    1fa4:	11 f4       	brne	.+4      	; 0x1faa <MS_Host_ConfigurePipes+0x118>
    1fa6:	83 e0       	ldi	r24, 0x03	; 3
    1fa8:	0d c0       	rjmp	.+26     	; 0x1fc4 <MS_Host_ConfigurePipes+0x132>
		  DataINEndpoint  = EndpointData;
		else
		  DataOUTEndpoint = EndpointData;
	}

	for (uint8_t PipeNum = 1; PipeNum < PIPE_TOTAL_PIPES; PipeNum++)
    1faa:	9f 5f       	subi	r25, 0xFF	; 255
    1fac:	97 30       	cpi	r25, 0x07	; 7
    1fae:	71 f6       	brne	.-100    	; 0x1f4c <MS_Host_ConfigurePipes+0xba>
		{
			return MS_ENUMERROR_PipeConfigurationFailed;
		}
	}

	MSInterfaceInfo->State.InterfaceNumber = MassStorageInterface->InterfaceNumber;
    1fb0:	f3 01       	movw	r30, r6
    1fb2:	82 81       	ldd	r24, Z+2	; 0x02
    1fb4:	d6 01       	movw	r26, r12
    1fb6:	15 96       	adiw	r26, 0x05	; 5
    1fb8:	8c 93       	st	X, r24
    1fba:	15 97       	sbiw	r26, 0x05	; 5
	MSInterfaceInfo->State.IsActive = true;
    1fbc:	81 e0       	ldi	r24, 0x01	; 1
    1fbe:	14 96       	adiw	r26, 0x04	; 4
    1fc0:	8c 93       	st	X, r24
    1fc2:	80 e0       	ldi	r24, 0x00	; 0

	return MS_ENUMERROR_NoError;
}
    1fc4:	0f 90       	pop	r0
    1fc6:	0f 90       	pop	r0
    1fc8:	0f 90       	pop	r0
    1fca:	0f 90       	pop	r0
    1fcc:	0f 90       	pop	r0
    1fce:	cf 91       	pop	r28
    1fd0:	df 91       	pop	r29
    1fd2:	1f 91       	pop	r17
    1fd4:	0f 91       	pop	r16
    1fd6:	ff 90       	pop	r15
    1fd8:	ef 90       	pop	r14
    1fda:	df 90       	pop	r13
    1fdc:	cf 90       	pop	r12
    1fde:	bf 90       	pop	r11
    1fe0:	af 90       	pop	r10
    1fe2:	9f 90       	pop	r9
    1fe4:	8f 90       	pop	r8
    1fe6:	7f 90       	pop	r7
    1fe8:	6f 90       	pop	r6
    1fea:	08 95       	ret

00001fec <DCOMP_MS_Host_NextMSInterfaceEndpoint>:

	return DESCRIPTOR_SEARCH_NotFound;
}

static uint8_t DCOMP_MS_Host_NextMSInterfaceEndpoint(void* const CurrentDescriptor)
{
    1fec:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Endpoint)
    1fee:	81 81       	ldd	r24, Z+1	; 0x01
    1ff0:	85 30       	cpi	r24, 0x05	; 5
    1ff2:	51 f4       	brne	.+20     	; 0x2008 <DCOMP_MS_Host_NextMSInterfaceEndpoint+0x1c>
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		uint8_t EndpointType = (Endpoint->Attributes & EP_TYPE_MASK);

		if ((EndpointType == EP_TYPE_BULK) && (!(Pipe_IsEndpointBound(Endpoint->EndpointAddress))))
    1ff4:	83 81       	ldd	r24, Z+3	; 0x03
    1ff6:	83 70       	andi	r24, 0x03	; 3
    1ff8:	82 30       	cpi	r24, 0x02	; 2
    1ffa:	51 f4       	brne	.+20     	; 0x2010 <DCOMP_MS_Host_NextMSInterfaceEndpoint+0x24>
    1ffc:	82 81       	ldd	r24, Z+2	; 0x02
    1ffe:	0e 94 31 07 	call	0xe62	; 0xe62 <Pipe_IsEndpointBound>
    2002:	88 23       	and	r24, r24
    2004:	29 f4       	brne	.+10     	; 0x2010 <DCOMP_MS_Host_NextMSInterfaceEndpoint+0x24>
    2006:	08 95       	ret
		{
			return DESCRIPTOR_SEARCH_Found;
		}
	}
	else if (Header->Type == DTYPE_Interface)
    2008:	84 30       	cpi	r24, 0x04	; 4
    200a:	11 f4       	brne	.+4      	; 0x2010 <DCOMP_MS_Host_NextMSInterfaceEndpoint+0x24>
    200c:	81 e0       	ldi	r24, 0x01	; 1
    200e:	08 95       	ret
    2010:	82 e0       	ldi	r24, 0x02	; 2
	{
		return DESCRIPTOR_SEARCH_Fail;
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    2012:	08 95       	ret

00002014 <Serial_putchar>:

FILE USARTSerialStream;

int Serial_putchar(char DataByte,
                   FILE *Stream)
{
    2014:	98 2f       	mov	r25, r24
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
    2016:	80 91 c8 00 	lds	r24, 0x00C8
    201a:	85 ff       	sbrs	r24, 5
    201c:	fc cf       	rjmp	.-8      	; 0x2016 <Serial_putchar+0x2>
				UDR1 = DataByte;
    201e:	90 93 ce 00 	sts	0x00CE, r25
	(void)Stream;

	Serial_SendByte(DataByte);
	return 0;
}
    2022:	80 e0       	ldi	r24, 0x00	; 0
    2024:	90 e0       	ldi	r25, 0x00	; 0
    2026:	08 95       	ret

00002028 <Serial_getchar>:
			 *  \return Boolean \c true if a character has been received, \c false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    2028:	80 91 c8 00 	lds	r24, 0x00C8

int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    202c:	87 fd       	sbrc	r24, 7
    202e:	03 c0       	rjmp	.+6      	; 0x2036 <Serial_getchar+0xe>
    2030:	2e ef       	ldi	r18, 0xFE	; 254
    2032:	3f ef       	ldi	r19, 0xFF	; 255
    2034:	0b c0       	rjmp	.+22     	; 0x204c <Serial_getchar+0x24>
    2036:	80 91 c8 00 	lds	r24, 0x00C8
			 *  \return Next byte received from the USART, or a negative value if no byte has been received.
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
    203a:	87 fd       	sbrc	r24, 7
    203c:	03 c0       	rjmp	.+6      	; 0x2044 <Serial_getchar+0x1c>
    203e:	2f ef       	ldi	r18, 0xFF	; 255
    2040:	3f ef       	ldi	r19, 0xFF	; 255
    2042:	04 c0       	rjmp	.+8      	; 0x204c <Serial_getchar+0x24>
				  return -1;
				
				return UDR1;
    2044:	80 91 ce 00 	lds	r24, 0x00CE
    2048:	28 2f       	mov	r18, r24
    204a:	30 e0       	ldi	r19, 0x00	; 0
	  return _FDEV_EOF;

	return Serial_ReceiveByte();
}
    204c:	c9 01       	movw	r24, r18
    204e:	08 95       	ret

00002050 <__mulsi3>:
    2050:	62 9f       	mul	r22, r18
    2052:	d0 01       	movw	r26, r0
    2054:	73 9f       	mul	r23, r19
    2056:	f0 01       	movw	r30, r0
    2058:	82 9f       	mul	r24, r18
    205a:	e0 0d       	add	r30, r0
    205c:	f1 1d       	adc	r31, r1
    205e:	64 9f       	mul	r22, r20
    2060:	e0 0d       	add	r30, r0
    2062:	f1 1d       	adc	r31, r1
    2064:	92 9f       	mul	r25, r18
    2066:	f0 0d       	add	r31, r0
    2068:	83 9f       	mul	r24, r19
    206a:	f0 0d       	add	r31, r0
    206c:	74 9f       	mul	r23, r20
    206e:	f0 0d       	add	r31, r0
    2070:	65 9f       	mul	r22, r21
    2072:	f0 0d       	add	r31, r0
    2074:	99 27       	eor	r25, r25
    2076:	72 9f       	mul	r23, r18
    2078:	b0 0d       	add	r27, r0
    207a:	e1 1d       	adc	r30, r1
    207c:	f9 1f       	adc	r31, r25
    207e:	63 9f       	mul	r22, r19
    2080:	b0 0d       	add	r27, r0
    2082:	e1 1d       	adc	r30, r1
    2084:	f9 1f       	adc	r31, r25
    2086:	bd 01       	movw	r22, r26
    2088:	cf 01       	movw	r24, r30
    208a:	11 24       	eor	r1, r1
    208c:	08 95       	ret

0000208e <isgraph>:
    208e:	80 32       	cpi	r24, 0x20	; 32
    2090:	09 f0       	breq	.+2      	; 0x2094 <isprint+0x2>

00002092 <isprint>:
    2092:	91 11       	cpse	r25, r1
    2094:	80 c2       	rjmp	.+1280   	; 0x2596 <__ctype_isfalse>
    2096:	80 52       	subi	r24, 0x20	; 32
    2098:	8f 55       	subi	r24, 0x5F	; 95
    209a:	e0 f7       	brcc	.-8      	; 0x2094 <isprint+0x2>
    209c:	08 95       	ret

0000209e <fputc>:
    209e:	0f 93       	push	r16
    20a0:	1f 93       	push	r17
    20a2:	cf 93       	push	r28
    20a4:	df 93       	push	r29
    20a6:	8c 01       	movw	r16, r24
    20a8:	eb 01       	movw	r28, r22
    20aa:	8b 81       	ldd	r24, Y+3	; 0x03
    20ac:	81 ff       	sbrs	r24, 1
    20ae:	1b c0       	rjmp	.+54     	; 0x20e6 <fputc+0x48>
    20b0:	82 ff       	sbrs	r24, 2
    20b2:	0d c0       	rjmp	.+26     	; 0x20ce <fputc+0x30>
    20b4:	2e 81       	ldd	r18, Y+6	; 0x06
    20b6:	3f 81       	ldd	r19, Y+7	; 0x07
    20b8:	8c 81       	ldd	r24, Y+4	; 0x04
    20ba:	9d 81       	ldd	r25, Y+5	; 0x05
    20bc:	28 17       	cp	r18, r24
    20be:	39 07       	cpc	r19, r25
    20c0:	64 f4       	brge	.+24     	; 0x20da <fputc+0x3c>
    20c2:	e8 81       	ld	r30, Y
    20c4:	f9 81       	ldd	r31, Y+1	; 0x01
    20c6:	01 93       	st	Z+, r16
    20c8:	f9 83       	std	Y+1, r31	; 0x01
    20ca:	e8 83       	st	Y, r30
    20cc:	06 c0       	rjmp	.+12     	; 0x20da <fputc+0x3c>
    20ce:	e8 85       	ldd	r30, Y+8	; 0x08
    20d0:	f9 85       	ldd	r31, Y+9	; 0x09
    20d2:	80 2f       	mov	r24, r16
    20d4:	09 95       	icall
    20d6:	89 2b       	or	r24, r25
    20d8:	31 f4       	brne	.+12     	; 0x20e6 <fputc+0x48>
    20da:	8e 81       	ldd	r24, Y+6	; 0x06
    20dc:	9f 81       	ldd	r25, Y+7	; 0x07
    20de:	01 96       	adiw	r24, 0x01	; 1
    20e0:	9f 83       	std	Y+7, r25	; 0x07
    20e2:	8e 83       	std	Y+6, r24	; 0x06
    20e4:	02 c0       	rjmp	.+4      	; 0x20ea <fputc+0x4c>
    20e6:	0f ef       	ldi	r16, 0xFF	; 255
    20e8:	1f ef       	ldi	r17, 0xFF	; 255
    20ea:	c8 01       	movw	r24, r16
    20ec:	df 91       	pop	r29
    20ee:	cf 91       	pop	r28
    20f0:	1f 91       	pop	r17
    20f2:	0f 91       	pop	r16
    20f4:	08 95       	ret

000020f6 <printf_P>:
    20f6:	df 93       	push	r29
    20f8:	cf 93       	push	r28
    20fa:	cd b7       	in	r28, 0x3d	; 61
    20fc:	de b7       	in	r29, 0x3e	; 62
    20fe:	fe 01       	movw	r30, r28
    2100:	35 96       	adiw	r30, 0x05	; 5
    2102:	61 91       	ld	r22, Z+
    2104:	71 91       	ld	r23, Z+
    2106:	a0 91 3e 01 	lds	r26, 0x013E
    210a:	b0 91 3f 01 	lds	r27, 0x013F
    210e:	13 96       	adiw	r26, 0x03	; 3
    2110:	8c 91       	ld	r24, X
    2112:	13 97       	sbiw	r26, 0x03	; 3
    2114:	88 60       	ori	r24, 0x08	; 8
    2116:	13 96       	adiw	r26, 0x03	; 3
    2118:	8c 93       	st	X, r24
    211a:	80 91 3e 01 	lds	r24, 0x013E
    211e:	90 91 3f 01 	lds	r25, 0x013F
    2122:	af 01       	movw	r20, r30
    2124:	3f d0       	rcall	.+126    	; 0x21a4 <vfprintf>
    2126:	e0 91 3e 01 	lds	r30, 0x013E
    212a:	f0 91 3f 01 	lds	r31, 0x013F
    212e:	23 81       	ldd	r18, Z+3	; 0x03
    2130:	27 7f       	andi	r18, 0xF7	; 247
    2132:	23 83       	std	Z+3, r18	; 0x03
    2134:	cf 91       	pop	r28
    2136:	df 91       	pop	r29
    2138:	08 95       	ret

0000213a <puts_P>:
    213a:	0f 93       	push	r16
    213c:	1f 93       	push	r17
    213e:	cf 93       	push	r28
    2140:	df 93       	push	r29
    2142:	ec 01       	movw	r28, r24
    2144:	e0 91 3e 01 	lds	r30, 0x013E
    2148:	f0 91 3f 01 	lds	r31, 0x013F
    214c:	83 81       	ldd	r24, Z+3	; 0x03
    214e:	81 ff       	sbrs	r24, 1
    2150:	21 c0       	rjmp	.+66     	; 0x2194 <puts_P+0x5a>
    2152:	00 e0       	ldi	r16, 0x00	; 0
    2154:	10 e0       	ldi	r17, 0x00	; 0
    2156:	0e c0       	rjmp	.+28     	; 0x2174 <puts_P+0x3a>
    2158:	e0 91 3e 01 	lds	r30, 0x013E
    215c:	f0 91 3f 01 	lds	r31, 0x013F
    2160:	20 85       	ldd	r18, Z+8	; 0x08
    2162:	31 85       	ldd	r19, Z+9	; 0x09
    2164:	bf 01       	movw	r22, r30
    2166:	f9 01       	movw	r30, r18
    2168:	09 95       	icall
    216a:	89 2b       	or	r24, r25
    216c:	11 f0       	breq	.+4      	; 0x2172 <puts_P+0x38>
    216e:	0f ef       	ldi	r16, 0xFF	; 255
    2170:	1f ef       	ldi	r17, 0xFF	; 255
    2172:	21 96       	adiw	r28, 0x01	; 1
    2174:	fe 01       	movw	r30, r28
    2176:	84 91       	lpm	r24, Z+
    2178:	88 23       	and	r24, r24
    217a:	71 f7       	brne	.-36     	; 0x2158 <puts_P+0x1e>
    217c:	e0 91 3e 01 	lds	r30, 0x013E
    2180:	f0 91 3f 01 	lds	r31, 0x013F
    2184:	20 85       	ldd	r18, Z+8	; 0x08
    2186:	31 85       	ldd	r19, Z+9	; 0x09
    2188:	8a e0       	ldi	r24, 0x0A	; 10
    218a:	bf 01       	movw	r22, r30
    218c:	f9 01       	movw	r30, r18
    218e:	09 95       	icall
    2190:	89 2b       	or	r24, r25
    2192:	11 f0       	breq	.+4      	; 0x2198 <puts_P+0x5e>
    2194:	0f ef       	ldi	r16, 0xFF	; 255
    2196:	1f ef       	ldi	r17, 0xFF	; 255
    2198:	c8 01       	movw	r24, r16
    219a:	df 91       	pop	r29
    219c:	cf 91       	pop	r28
    219e:	1f 91       	pop	r17
    21a0:	0f 91       	pop	r16
    21a2:	08 95       	ret

000021a4 <vfprintf>:
    21a4:	2f 92       	push	r2
    21a6:	3f 92       	push	r3
    21a8:	4f 92       	push	r4
    21aa:	5f 92       	push	r5
    21ac:	6f 92       	push	r6
    21ae:	7f 92       	push	r7
    21b0:	8f 92       	push	r8
    21b2:	9f 92       	push	r9
    21b4:	af 92       	push	r10
    21b6:	bf 92       	push	r11
    21b8:	cf 92       	push	r12
    21ba:	df 92       	push	r13
    21bc:	ef 92       	push	r14
    21be:	ff 92       	push	r15
    21c0:	0f 93       	push	r16
    21c2:	1f 93       	push	r17
    21c4:	df 93       	push	r29
    21c6:	cf 93       	push	r28
    21c8:	cd b7       	in	r28, 0x3d	; 61
    21ca:	de b7       	in	r29, 0x3e	; 62
    21cc:	2b 97       	sbiw	r28, 0x0b	; 11
    21ce:	0f b6       	in	r0, 0x3f	; 63
    21d0:	f8 94       	cli
    21d2:	de bf       	out	0x3e, r29	; 62
    21d4:	0f be       	out	0x3f, r0	; 63
    21d6:	cd bf       	out	0x3d, r28	; 61
    21d8:	3c 01       	movw	r6, r24
    21da:	2b 01       	movw	r4, r22
    21dc:	5a 01       	movw	r10, r20
    21de:	fc 01       	movw	r30, r24
    21e0:	17 82       	std	Z+7, r1	; 0x07
    21e2:	16 82       	std	Z+6, r1	; 0x06
    21e4:	83 81       	ldd	r24, Z+3	; 0x03
    21e6:	81 fd       	sbrc	r24, 1
    21e8:	03 c0       	rjmp	.+6      	; 0x21f0 <vfprintf+0x4c>
    21ea:	6f ef       	ldi	r22, 0xFF	; 255
    21ec:	7f ef       	ldi	r23, 0xFF	; 255
    21ee:	b9 c1       	rjmp	.+882    	; 0x2562 <vfprintf+0x3be>
    21f0:	9a e0       	ldi	r25, 0x0A	; 10
    21f2:	89 2e       	mov	r8, r25
    21f4:	1e 01       	movw	r2, r28
    21f6:	08 94       	sec
    21f8:	21 1c       	adc	r2, r1
    21fa:	31 1c       	adc	r3, r1
    21fc:	f3 01       	movw	r30, r6
    21fe:	23 81       	ldd	r18, Z+3	; 0x03
    2200:	f2 01       	movw	r30, r4
    2202:	23 fd       	sbrc	r18, 3
    2204:	85 91       	lpm	r24, Z+
    2206:	23 ff       	sbrs	r18, 3
    2208:	81 91       	ld	r24, Z+
    220a:	2f 01       	movw	r4, r30
    220c:	88 23       	and	r24, r24
    220e:	09 f4       	brne	.+2      	; 0x2212 <vfprintf+0x6e>
    2210:	a5 c1       	rjmp	.+842    	; 0x255c <vfprintf+0x3b8>
    2212:	85 32       	cpi	r24, 0x25	; 37
    2214:	39 f4       	brne	.+14     	; 0x2224 <vfprintf+0x80>
    2216:	23 fd       	sbrc	r18, 3
    2218:	85 91       	lpm	r24, Z+
    221a:	23 ff       	sbrs	r18, 3
    221c:	81 91       	ld	r24, Z+
    221e:	2f 01       	movw	r4, r30
    2220:	85 32       	cpi	r24, 0x25	; 37
    2222:	21 f4       	brne	.+8      	; 0x222c <vfprintf+0x88>
    2224:	90 e0       	ldi	r25, 0x00	; 0
    2226:	b3 01       	movw	r22, r6
    2228:	3a df       	rcall	.-396    	; 0x209e <fputc>
    222a:	e8 cf       	rjmp	.-48     	; 0x21fc <vfprintf+0x58>
    222c:	98 2f       	mov	r25, r24
    222e:	ff 24       	eor	r15, r15
    2230:	ee 24       	eor	r14, r14
    2232:	99 24       	eor	r9, r9
    2234:	ff e1       	ldi	r31, 0x1F	; 31
    2236:	ff 15       	cp	r31, r15
    2238:	d0 f0       	brcs	.+52     	; 0x226e <vfprintf+0xca>
    223a:	9b 32       	cpi	r25, 0x2B	; 43
    223c:	69 f0       	breq	.+26     	; 0x2258 <vfprintf+0xb4>
    223e:	9c 32       	cpi	r25, 0x2C	; 44
    2240:	28 f4       	brcc	.+10     	; 0x224c <vfprintf+0xa8>
    2242:	90 32       	cpi	r25, 0x20	; 32
    2244:	59 f0       	breq	.+22     	; 0x225c <vfprintf+0xb8>
    2246:	93 32       	cpi	r25, 0x23	; 35
    2248:	91 f4       	brne	.+36     	; 0x226e <vfprintf+0xca>
    224a:	0e c0       	rjmp	.+28     	; 0x2268 <vfprintf+0xc4>
    224c:	9d 32       	cpi	r25, 0x2D	; 45
    224e:	49 f0       	breq	.+18     	; 0x2262 <vfprintf+0xbe>
    2250:	90 33       	cpi	r25, 0x30	; 48
    2252:	69 f4       	brne	.+26     	; 0x226e <vfprintf+0xca>
    2254:	41 e0       	ldi	r20, 0x01	; 1
    2256:	24 c0       	rjmp	.+72     	; 0x22a0 <vfprintf+0xfc>
    2258:	52 e0       	ldi	r21, 0x02	; 2
    225a:	f5 2a       	or	r15, r21
    225c:	84 e0       	ldi	r24, 0x04	; 4
    225e:	f8 2a       	or	r15, r24
    2260:	28 c0       	rjmp	.+80     	; 0x22b2 <vfprintf+0x10e>
    2262:	98 e0       	ldi	r25, 0x08	; 8
    2264:	f9 2a       	or	r15, r25
    2266:	25 c0       	rjmp	.+74     	; 0x22b2 <vfprintf+0x10e>
    2268:	e0 e1       	ldi	r30, 0x10	; 16
    226a:	fe 2a       	or	r15, r30
    226c:	22 c0       	rjmp	.+68     	; 0x22b2 <vfprintf+0x10e>
    226e:	f7 fc       	sbrc	r15, 7
    2270:	29 c0       	rjmp	.+82     	; 0x22c4 <vfprintf+0x120>
    2272:	89 2f       	mov	r24, r25
    2274:	80 53       	subi	r24, 0x30	; 48
    2276:	8a 30       	cpi	r24, 0x0A	; 10
    2278:	70 f4       	brcc	.+28     	; 0x2296 <vfprintf+0xf2>
    227a:	f6 fe       	sbrs	r15, 6
    227c:	05 c0       	rjmp	.+10     	; 0x2288 <vfprintf+0xe4>
    227e:	98 9c       	mul	r9, r8
    2280:	90 2c       	mov	r9, r0
    2282:	11 24       	eor	r1, r1
    2284:	98 0e       	add	r9, r24
    2286:	15 c0       	rjmp	.+42     	; 0x22b2 <vfprintf+0x10e>
    2288:	e8 9c       	mul	r14, r8
    228a:	e0 2c       	mov	r14, r0
    228c:	11 24       	eor	r1, r1
    228e:	e8 0e       	add	r14, r24
    2290:	f0 e2       	ldi	r31, 0x20	; 32
    2292:	ff 2a       	or	r15, r31
    2294:	0e c0       	rjmp	.+28     	; 0x22b2 <vfprintf+0x10e>
    2296:	9e 32       	cpi	r25, 0x2E	; 46
    2298:	29 f4       	brne	.+10     	; 0x22a4 <vfprintf+0x100>
    229a:	f6 fc       	sbrc	r15, 6
    229c:	5f c1       	rjmp	.+702    	; 0x255c <vfprintf+0x3b8>
    229e:	40 e4       	ldi	r20, 0x40	; 64
    22a0:	f4 2a       	or	r15, r20
    22a2:	07 c0       	rjmp	.+14     	; 0x22b2 <vfprintf+0x10e>
    22a4:	9c 36       	cpi	r25, 0x6C	; 108
    22a6:	19 f4       	brne	.+6      	; 0x22ae <vfprintf+0x10a>
    22a8:	50 e8       	ldi	r21, 0x80	; 128
    22aa:	f5 2a       	or	r15, r21
    22ac:	02 c0       	rjmp	.+4      	; 0x22b2 <vfprintf+0x10e>
    22ae:	98 36       	cpi	r25, 0x68	; 104
    22b0:	49 f4       	brne	.+18     	; 0x22c4 <vfprintf+0x120>
    22b2:	f2 01       	movw	r30, r4
    22b4:	23 fd       	sbrc	r18, 3
    22b6:	95 91       	lpm	r25, Z+
    22b8:	23 ff       	sbrs	r18, 3
    22ba:	91 91       	ld	r25, Z+
    22bc:	2f 01       	movw	r4, r30
    22be:	99 23       	and	r25, r25
    22c0:	09 f0       	breq	.+2      	; 0x22c4 <vfprintf+0x120>
    22c2:	b8 cf       	rjmp	.-144    	; 0x2234 <vfprintf+0x90>
    22c4:	89 2f       	mov	r24, r25
    22c6:	85 54       	subi	r24, 0x45	; 69
    22c8:	83 30       	cpi	r24, 0x03	; 3
    22ca:	18 f0       	brcs	.+6      	; 0x22d2 <vfprintf+0x12e>
    22cc:	80 52       	subi	r24, 0x20	; 32
    22ce:	83 30       	cpi	r24, 0x03	; 3
    22d0:	38 f4       	brcc	.+14     	; 0x22e0 <vfprintf+0x13c>
    22d2:	44 e0       	ldi	r20, 0x04	; 4
    22d4:	50 e0       	ldi	r21, 0x00	; 0
    22d6:	a4 0e       	add	r10, r20
    22d8:	b5 1e       	adc	r11, r21
    22da:	5f e3       	ldi	r21, 0x3F	; 63
    22dc:	59 83       	std	Y+1, r21	; 0x01
    22de:	0f c0       	rjmp	.+30     	; 0x22fe <vfprintf+0x15a>
    22e0:	93 36       	cpi	r25, 0x63	; 99
    22e2:	31 f0       	breq	.+12     	; 0x22f0 <vfprintf+0x14c>
    22e4:	93 37       	cpi	r25, 0x73	; 115
    22e6:	79 f0       	breq	.+30     	; 0x2306 <vfprintf+0x162>
    22e8:	93 35       	cpi	r25, 0x53	; 83
    22ea:	09 f0       	breq	.+2      	; 0x22ee <vfprintf+0x14a>
    22ec:	52 c0       	rjmp	.+164    	; 0x2392 <vfprintf+0x1ee>
    22ee:	1f c0       	rjmp	.+62     	; 0x232e <vfprintf+0x18a>
    22f0:	f5 01       	movw	r30, r10
    22f2:	80 81       	ld	r24, Z
    22f4:	89 83       	std	Y+1, r24	; 0x01
    22f6:	42 e0       	ldi	r20, 0x02	; 2
    22f8:	50 e0       	ldi	r21, 0x00	; 0
    22fa:	a4 0e       	add	r10, r20
    22fc:	b5 1e       	adc	r11, r21
    22fe:	61 01       	movw	r12, r2
    2300:	01 e0       	ldi	r16, 0x01	; 1
    2302:	10 e0       	ldi	r17, 0x00	; 0
    2304:	11 c0       	rjmp	.+34     	; 0x2328 <vfprintf+0x184>
    2306:	f5 01       	movw	r30, r10
    2308:	c0 80       	ld	r12, Z
    230a:	d1 80       	ldd	r13, Z+1	; 0x01
    230c:	f6 fc       	sbrc	r15, 6
    230e:	03 c0       	rjmp	.+6      	; 0x2316 <vfprintf+0x172>
    2310:	6f ef       	ldi	r22, 0xFF	; 255
    2312:	7f ef       	ldi	r23, 0xFF	; 255
    2314:	02 c0       	rjmp	.+4      	; 0x231a <vfprintf+0x176>
    2316:	69 2d       	mov	r22, r9
    2318:	70 e0       	ldi	r23, 0x00	; 0
    231a:	42 e0       	ldi	r20, 0x02	; 2
    231c:	50 e0       	ldi	r21, 0x00	; 0
    231e:	a4 0e       	add	r10, r20
    2320:	b5 1e       	adc	r11, r21
    2322:	c6 01       	movw	r24, r12
    2324:	46 d1       	rcall	.+652    	; 0x25b2 <strnlen>
    2326:	8c 01       	movw	r16, r24
    2328:	5f e7       	ldi	r21, 0x7F	; 127
    232a:	f5 22       	and	r15, r21
    232c:	13 c0       	rjmp	.+38     	; 0x2354 <vfprintf+0x1b0>
    232e:	f5 01       	movw	r30, r10
    2330:	c0 80       	ld	r12, Z
    2332:	d1 80       	ldd	r13, Z+1	; 0x01
    2334:	f6 fc       	sbrc	r15, 6
    2336:	03 c0       	rjmp	.+6      	; 0x233e <vfprintf+0x19a>
    2338:	6f ef       	ldi	r22, 0xFF	; 255
    233a:	7f ef       	ldi	r23, 0xFF	; 255
    233c:	02 c0       	rjmp	.+4      	; 0x2342 <vfprintf+0x19e>
    233e:	69 2d       	mov	r22, r9
    2340:	70 e0       	ldi	r23, 0x00	; 0
    2342:	42 e0       	ldi	r20, 0x02	; 2
    2344:	50 e0       	ldi	r21, 0x00	; 0
    2346:	a4 0e       	add	r10, r20
    2348:	b5 1e       	adc	r11, r21
    234a:	c6 01       	movw	r24, r12
    234c:	27 d1       	rcall	.+590    	; 0x259c <strnlen_P>
    234e:	8c 01       	movw	r16, r24
    2350:	50 e8       	ldi	r21, 0x80	; 128
    2352:	f5 2a       	or	r15, r21
    2354:	f3 fe       	sbrs	r15, 3
    2356:	06 c0       	rjmp	.+12     	; 0x2364 <vfprintf+0x1c0>
    2358:	18 c0       	rjmp	.+48     	; 0x238a <vfprintf+0x1e6>
    235a:	80 e2       	ldi	r24, 0x20	; 32
    235c:	90 e0       	ldi	r25, 0x00	; 0
    235e:	b3 01       	movw	r22, r6
    2360:	9e de       	rcall	.-708    	; 0x209e <fputc>
    2362:	ea 94       	dec	r14
    2364:	8e 2d       	mov	r24, r14
    2366:	90 e0       	ldi	r25, 0x00	; 0
    2368:	08 17       	cp	r16, r24
    236a:	19 07       	cpc	r17, r25
    236c:	b0 f3       	brcs	.-20     	; 0x235a <vfprintf+0x1b6>
    236e:	0d c0       	rjmp	.+26     	; 0x238a <vfprintf+0x1e6>
    2370:	f6 01       	movw	r30, r12
    2372:	f7 fc       	sbrc	r15, 7
    2374:	85 91       	lpm	r24, Z+
    2376:	f7 fe       	sbrs	r15, 7
    2378:	81 91       	ld	r24, Z+
    237a:	6f 01       	movw	r12, r30
    237c:	90 e0       	ldi	r25, 0x00	; 0
    237e:	b3 01       	movw	r22, r6
    2380:	8e de       	rcall	.-740    	; 0x209e <fputc>
    2382:	e1 10       	cpse	r14, r1
    2384:	ea 94       	dec	r14
    2386:	01 50       	subi	r16, 0x01	; 1
    2388:	10 40       	sbci	r17, 0x00	; 0
    238a:	01 15       	cp	r16, r1
    238c:	11 05       	cpc	r17, r1
    238e:	81 f7       	brne	.-32     	; 0x2370 <vfprintf+0x1cc>
    2390:	e2 c0       	rjmp	.+452    	; 0x2556 <vfprintf+0x3b2>
    2392:	94 36       	cpi	r25, 0x64	; 100
    2394:	11 f0       	breq	.+4      	; 0x239a <vfprintf+0x1f6>
    2396:	99 36       	cpi	r25, 0x69	; 105
    2398:	61 f5       	brne	.+88     	; 0x23f2 <vfprintf+0x24e>
    239a:	f7 fe       	sbrs	r15, 7
    239c:	08 c0       	rjmp	.+16     	; 0x23ae <vfprintf+0x20a>
    239e:	f5 01       	movw	r30, r10
    23a0:	20 81       	ld	r18, Z
    23a2:	31 81       	ldd	r19, Z+1	; 0x01
    23a4:	42 81       	ldd	r20, Z+2	; 0x02
    23a6:	53 81       	ldd	r21, Z+3	; 0x03
    23a8:	84 e0       	ldi	r24, 0x04	; 4
    23aa:	90 e0       	ldi	r25, 0x00	; 0
    23ac:	0a c0       	rjmp	.+20     	; 0x23c2 <vfprintf+0x21e>
    23ae:	f5 01       	movw	r30, r10
    23b0:	80 81       	ld	r24, Z
    23b2:	91 81       	ldd	r25, Z+1	; 0x01
    23b4:	9c 01       	movw	r18, r24
    23b6:	44 27       	eor	r20, r20
    23b8:	37 fd       	sbrc	r19, 7
    23ba:	40 95       	com	r20
    23bc:	54 2f       	mov	r21, r20
    23be:	82 e0       	ldi	r24, 0x02	; 2
    23c0:	90 e0       	ldi	r25, 0x00	; 0
    23c2:	a8 0e       	add	r10, r24
    23c4:	b9 1e       	adc	r11, r25
    23c6:	9f e6       	ldi	r25, 0x6F	; 111
    23c8:	f9 22       	and	r15, r25
    23ca:	57 ff       	sbrs	r21, 7
    23cc:	09 c0       	rjmp	.+18     	; 0x23e0 <vfprintf+0x23c>
    23ce:	50 95       	com	r21
    23d0:	40 95       	com	r20
    23d2:	30 95       	com	r19
    23d4:	21 95       	neg	r18
    23d6:	3f 4f       	sbci	r19, 0xFF	; 255
    23d8:	4f 4f       	sbci	r20, 0xFF	; 255
    23da:	5f 4f       	sbci	r21, 0xFF	; 255
    23dc:	e0 e8       	ldi	r30, 0x80	; 128
    23de:	fe 2a       	or	r15, r30
    23e0:	ca 01       	movw	r24, r20
    23e2:	b9 01       	movw	r22, r18
    23e4:	a1 01       	movw	r20, r2
    23e6:	2a e0       	ldi	r18, 0x0A	; 10
    23e8:	30 e0       	ldi	r19, 0x00	; 0
    23ea:	ee d0       	rcall	.+476    	; 0x25c8 <__ultoa_invert>
    23ec:	d8 2e       	mov	r13, r24
    23ee:	d2 18       	sub	r13, r2
    23f0:	3f c0       	rjmp	.+126    	; 0x2470 <vfprintf+0x2cc>
    23f2:	95 37       	cpi	r25, 0x75	; 117
    23f4:	29 f4       	brne	.+10     	; 0x2400 <vfprintf+0x25c>
    23f6:	1f 2d       	mov	r17, r15
    23f8:	1f 7e       	andi	r17, 0xEF	; 239
    23fa:	2a e0       	ldi	r18, 0x0A	; 10
    23fc:	30 e0       	ldi	r19, 0x00	; 0
    23fe:	1d c0       	rjmp	.+58     	; 0x243a <vfprintf+0x296>
    2400:	1f 2d       	mov	r17, r15
    2402:	19 7f       	andi	r17, 0xF9	; 249
    2404:	9f 36       	cpi	r25, 0x6F	; 111
    2406:	61 f0       	breq	.+24     	; 0x2420 <vfprintf+0x27c>
    2408:	90 37       	cpi	r25, 0x70	; 112
    240a:	20 f4       	brcc	.+8      	; 0x2414 <vfprintf+0x270>
    240c:	98 35       	cpi	r25, 0x58	; 88
    240e:	09 f0       	breq	.+2      	; 0x2412 <vfprintf+0x26e>
    2410:	a5 c0       	rjmp	.+330    	; 0x255c <vfprintf+0x3b8>
    2412:	0f c0       	rjmp	.+30     	; 0x2432 <vfprintf+0x28e>
    2414:	90 37       	cpi	r25, 0x70	; 112
    2416:	39 f0       	breq	.+14     	; 0x2426 <vfprintf+0x282>
    2418:	98 37       	cpi	r25, 0x78	; 120
    241a:	09 f0       	breq	.+2      	; 0x241e <vfprintf+0x27a>
    241c:	9f c0       	rjmp	.+318    	; 0x255c <vfprintf+0x3b8>
    241e:	04 c0       	rjmp	.+8      	; 0x2428 <vfprintf+0x284>
    2420:	28 e0       	ldi	r18, 0x08	; 8
    2422:	30 e0       	ldi	r19, 0x00	; 0
    2424:	0a c0       	rjmp	.+20     	; 0x243a <vfprintf+0x296>
    2426:	10 61       	ori	r17, 0x10	; 16
    2428:	14 fd       	sbrc	r17, 4
    242a:	14 60       	ori	r17, 0x04	; 4
    242c:	20 e1       	ldi	r18, 0x10	; 16
    242e:	30 e0       	ldi	r19, 0x00	; 0
    2430:	04 c0       	rjmp	.+8      	; 0x243a <vfprintf+0x296>
    2432:	14 fd       	sbrc	r17, 4
    2434:	16 60       	ori	r17, 0x06	; 6
    2436:	20 e1       	ldi	r18, 0x10	; 16
    2438:	32 e0       	ldi	r19, 0x02	; 2
    243a:	17 ff       	sbrs	r17, 7
    243c:	08 c0       	rjmp	.+16     	; 0x244e <vfprintf+0x2aa>
    243e:	f5 01       	movw	r30, r10
    2440:	60 81       	ld	r22, Z
    2442:	71 81       	ldd	r23, Z+1	; 0x01
    2444:	82 81       	ldd	r24, Z+2	; 0x02
    2446:	93 81       	ldd	r25, Z+3	; 0x03
    2448:	44 e0       	ldi	r20, 0x04	; 4
    244a:	50 e0       	ldi	r21, 0x00	; 0
    244c:	08 c0       	rjmp	.+16     	; 0x245e <vfprintf+0x2ba>
    244e:	f5 01       	movw	r30, r10
    2450:	80 81       	ld	r24, Z
    2452:	91 81       	ldd	r25, Z+1	; 0x01
    2454:	bc 01       	movw	r22, r24
    2456:	80 e0       	ldi	r24, 0x00	; 0
    2458:	90 e0       	ldi	r25, 0x00	; 0
    245a:	42 e0       	ldi	r20, 0x02	; 2
    245c:	50 e0       	ldi	r21, 0x00	; 0
    245e:	a4 0e       	add	r10, r20
    2460:	b5 1e       	adc	r11, r21
    2462:	a1 01       	movw	r20, r2
    2464:	b1 d0       	rcall	.+354    	; 0x25c8 <__ultoa_invert>
    2466:	d8 2e       	mov	r13, r24
    2468:	d2 18       	sub	r13, r2
    246a:	8f e7       	ldi	r24, 0x7F	; 127
    246c:	f8 2e       	mov	r15, r24
    246e:	f1 22       	and	r15, r17
    2470:	f6 fe       	sbrs	r15, 6
    2472:	0b c0       	rjmp	.+22     	; 0x248a <vfprintf+0x2e6>
    2474:	5e ef       	ldi	r21, 0xFE	; 254
    2476:	f5 22       	and	r15, r21
    2478:	d9 14       	cp	r13, r9
    247a:	38 f4       	brcc	.+14     	; 0x248a <vfprintf+0x2e6>
    247c:	f4 fe       	sbrs	r15, 4
    247e:	07 c0       	rjmp	.+14     	; 0x248e <vfprintf+0x2ea>
    2480:	f2 fc       	sbrc	r15, 2
    2482:	05 c0       	rjmp	.+10     	; 0x248e <vfprintf+0x2ea>
    2484:	8f ee       	ldi	r24, 0xEF	; 239
    2486:	f8 22       	and	r15, r24
    2488:	02 c0       	rjmp	.+4      	; 0x248e <vfprintf+0x2ea>
    248a:	1d 2d       	mov	r17, r13
    248c:	01 c0       	rjmp	.+2      	; 0x2490 <vfprintf+0x2ec>
    248e:	19 2d       	mov	r17, r9
    2490:	f4 fe       	sbrs	r15, 4
    2492:	0d c0       	rjmp	.+26     	; 0x24ae <vfprintf+0x30a>
    2494:	fe 01       	movw	r30, r28
    2496:	ed 0d       	add	r30, r13
    2498:	f1 1d       	adc	r31, r1
    249a:	80 81       	ld	r24, Z
    249c:	80 33       	cpi	r24, 0x30	; 48
    249e:	19 f4       	brne	.+6      	; 0x24a6 <vfprintf+0x302>
    24a0:	99 ee       	ldi	r25, 0xE9	; 233
    24a2:	f9 22       	and	r15, r25
    24a4:	08 c0       	rjmp	.+16     	; 0x24b6 <vfprintf+0x312>
    24a6:	1f 5f       	subi	r17, 0xFF	; 255
    24a8:	f2 fe       	sbrs	r15, 2
    24aa:	05 c0       	rjmp	.+10     	; 0x24b6 <vfprintf+0x312>
    24ac:	03 c0       	rjmp	.+6      	; 0x24b4 <vfprintf+0x310>
    24ae:	8f 2d       	mov	r24, r15
    24b0:	86 78       	andi	r24, 0x86	; 134
    24b2:	09 f0       	breq	.+2      	; 0x24b6 <vfprintf+0x312>
    24b4:	1f 5f       	subi	r17, 0xFF	; 255
    24b6:	0f 2d       	mov	r16, r15
    24b8:	f3 fc       	sbrc	r15, 3
    24ba:	13 c0       	rjmp	.+38     	; 0x24e2 <vfprintf+0x33e>
    24bc:	f0 fe       	sbrs	r15, 0
    24be:	0e c0       	rjmp	.+28     	; 0x24dc <vfprintf+0x338>
    24c0:	1e 15       	cp	r17, r14
    24c2:	10 f0       	brcs	.+4      	; 0x24c8 <vfprintf+0x324>
    24c4:	9d 2c       	mov	r9, r13
    24c6:	0a c0       	rjmp	.+20     	; 0x24dc <vfprintf+0x338>
    24c8:	9d 2c       	mov	r9, r13
    24ca:	9e 0c       	add	r9, r14
    24cc:	91 1a       	sub	r9, r17
    24ce:	1e 2d       	mov	r17, r14
    24d0:	05 c0       	rjmp	.+10     	; 0x24dc <vfprintf+0x338>
    24d2:	80 e2       	ldi	r24, 0x20	; 32
    24d4:	90 e0       	ldi	r25, 0x00	; 0
    24d6:	b3 01       	movw	r22, r6
    24d8:	e2 dd       	rcall	.-1084   	; 0x209e <fputc>
    24da:	1f 5f       	subi	r17, 0xFF	; 255
    24dc:	1e 15       	cp	r17, r14
    24de:	c8 f3       	brcs	.-14     	; 0x24d2 <vfprintf+0x32e>
    24e0:	04 c0       	rjmp	.+8      	; 0x24ea <vfprintf+0x346>
    24e2:	1e 15       	cp	r17, r14
    24e4:	10 f4       	brcc	.+4      	; 0x24ea <vfprintf+0x346>
    24e6:	e1 1a       	sub	r14, r17
    24e8:	01 c0       	rjmp	.+2      	; 0x24ec <vfprintf+0x348>
    24ea:	ee 24       	eor	r14, r14
    24ec:	04 ff       	sbrs	r16, 4
    24ee:	0e c0       	rjmp	.+28     	; 0x250c <vfprintf+0x368>
    24f0:	80 e3       	ldi	r24, 0x30	; 48
    24f2:	90 e0       	ldi	r25, 0x00	; 0
    24f4:	b3 01       	movw	r22, r6
    24f6:	d3 dd       	rcall	.-1114   	; 0x209e <fputc>
    24f8:	02 ff       	sbrs	r16, 2
    24fa:	1b c0       	rjmp	.+54     	; 0x2532 <vfprintf+0x38e>
    24fc:	01 fd       	sbrc	r16, 1
    24fe:	03 c0       	rjmp	.+6      	; 0x2506 <vfprintf+0x362>
    2500:	88 e7       	ldi	r24, 0x78	; 120
    2502:	90 e0       	ldi	r25, 0x00	; 0
    2504:	0e c0       	rjmp	.+28     	; 0x2522 <vfprintf+0x37e>
    2506:	88 e5       	ldi	r24, 0x58	; 88
    2508:	90 e0       	ldi	r25, 0x00	; 0
    250a:	0b c0       	rjmp	.+22     	; 0x2522 <vfprintf+0x37e>
    250c:	80 2f       	mov	r24, r16
    250e:	86 78       	andi	r24, 0x86	; 134
    2510:	81 f0       	breq	.+32     	; 0x2532 <vfprintf+0x38e>
    2512:	01 ff       	sbrs	r16, 1
    2514:	02 c0       	rjmp	.+4      	; 0x251a <vfprintf+0x376>
    2516:	8b e2       	ldi	r24, 0x2B	; 43
    2518:	01 c0       	rjmp	.+2      	; 0x251c <vfprintf+0x378>
    251a:	80 e2       	ldi	r24, 0x20	; 32
    251c:	f7 fc       	sbrc	r15, 7
    251e:	8d e2       	ldi	r24, 0x2D	; 45
    2520:	90 e0       	ldi	r25, 0x00	; 0
    2522:	b3 01       	movw	r22, r6
    2524:	bc dd       	rcall	.-1160   	; 0x209e <fputc>
    2526:	05 c0       	rjmp	.+10     	; 0x2532 <vfprintf+0x38e>
    2528:	80 e3       	ldi	r24, 0x30	; 48
    252a:	90 e0       	ldi	r25, 0x00	; 0
    252c:	b3 01       	movw	r22, r6
    252e:	b7 dd       	rcall	.-1170   	; 0x209e <fputc>
    2530:	9a 94       	dec	r9
    2532:	d9 14       	cp	r13, r9
    2534:	c8 f3       	brcs	.-14     	; 0x2528 <vfprintf+0x384>
    2536:	da 94       	dec	r13
    2538:	f1 01       	movw	r30, r2
    253a:	ed 0d       	add	r30, r13
    253c:	f1 1d       	adc	r31, r1
    253e:	80 81       	ld	r24, Z
    2540:	90 e0       	ldi	r25, 0x00	; 0
    2542:	b3 01       	movw	r22, r6
    2544:	ac dd       	rcall	.-1192   	; 0x209e <fputc>
    2546:	dd 20       	and	r13, r13
    2548:	b1 f7       	brne	.-20     	; 0x2536 <vfprintf+0x392>
    254a:	05 c0       	rjmp	.+10     	; 0x2556 <vfprintf+0x3b2>
    254c:	80 e2       	ldi	r24, 0x20	; 32
    254e:	90 e0       	ldi	r25, 0x00	; 0
    2550:	b3 01       	movw	r22, r6
    2552:	a5 dd       	rcall	.-1206   	; 0x209e <fputc>
    2554:	ea 94       	dec	r14
    2556:	ee 20       	and	r14, r14
    2558:	c9 f7       	brne	.-14     	; 0x254c <vfprintf+0x3a8>
    255a:	50 ce       	rjmp	.-864    	; 0x21fc <vfprintf+0x58>
    255c:	f3 01       	movw	r30, r6
    255e:	66 81       	ldd	r22, Z+6	; 0x06
    2560:	77 81       	ldd	r23, Z+7	; 0x07
    2562:	cb 01       	movw	r24, r22
    2564:	2b 96       	adiw	r28, 0x0b	; 11
    2566:	0f b6       	in	r0, 0x3f	; 63
    2568:	f8 94       	cli
    256a:	de bf       	out	0x3e, r29	; 62
    256c:	0f be       	out	0x3f, r0	; 63
    256e:	cd bf       	out	0x3d, r28	; 61
    2570:	cf 91       	pop	r28
    2572:	df 91       	pop	r29
    2574:	1f 91       	pop	r17
    2576:	0f 91       	pop	r16
    2578:	ff 90       	pop	r15
    257a:	ef 90       	pop	r14
    257c:	df 90       	pop	r13
    257e:	cf 90       	pop	r12
    2580:	bf 90       	pop	r11
    2582:	af 90       	pop	r10
    2584:	9f 90       	pop	r9
    2586:	8f 90       	pop	r8
    2588:	7f 90       	pop	r7
    258a:	6f 90       	pop	r6
    258c:	5f 90       	pop	r5
    258e:	4f 90       	pop	r4
    2590:	3f 90       	pop	r3
    2592:	2f 90       	pop	r2
    2594:	08 95       	ret

00002596 <__ctype_isfalse>:
    2596:	99 27       	eor	r25, r25
    2598:	88 27       	eor	r24, r24

0000259a <__ctype_istrue>:
    259a:	08 95       	ret

0000259c <strnlen_P>:
    259c:	fc 01       	movw	r30, r24
    259e:	05 90       	lpm	r0, Z+
    25a0:	61 50       	subi	r22, 0x01	; 1
    25a2:	70 40       	sbci	r23, 0x00	; 0
    25a4:	01 10       	cpse	r0, r1
    25a6:	d8 f7       	brcc	.-10     	; 0x259e <strnlen_P+0x2>
    25a8:	80 95       	com	r24
    25aa:	90 95       	com	r25
    25ac:	8e 0f       	add	r24, r30
    25ae:	9f 1f       	adc	r25, r31
    25b0:	08 95       	ret

000025b2 <strnlen>:
    25b2:	fc 01       	movw	r30, r24
    25b4:	61 50       	subi	r22, 0x01	; 1
    25b6:	70 40       	sbci	r23, 0x00	; 0
    25b8:	01 90       	ld	r0, Z+
    25ba:	01 10       	cpse	r0, r1
    25bc:	d8 f7       	brcc	.-10     	; 0x25b4 <strnlen+0x2>
    25be:	80 95       	com	r24
    25c0:	90 95       	com	r25
    25c2:	8e 0f       	add	r24, r30
    25c4:	9f 1f       	adc	r25, r31
    25c6:	08 95       	ret

000025c8 <__ultoa_invert>:
    25c8:	fa 01       	movw	r30, r20
    25ca:	aa 27       	eor	r26, r26
    25cc:	28 30       	cpi	r18, 0x08	; 8
    25ce:	51 f1       	breq	.+84     	; 0x2624 <__ultoa_invert+0x5c>
    25d0:	20 31       	cpi	r18, 0x10	; 16
    25d2:	81 f1       	breq	.+96     	; 0x2634 <__ultoa_invert+0x6c>
    25d4:	e8 94       	clt
    25d6:	6f 93       	push	r22
    25d8:	6e 7f       	andi	r22, 0xFE	; 254
    25da:	6e 5f       	subi	r22, 0xFE	; 254
    25dc:	7f 4f       	sbci	r23, 0xFF	; 255
    25de:	8f 4f       	sbci	r24, 0xFF	; 255
    25e0:	9f 4f       	sbci	r25, 0xFF	; 255
    25e2:	af 4f       	sbci	r26, 0xFF	; 255
    25e4:	b1 e0       	ldi	r27, 0x01	; 1
    25e6:	3e d0       	rcall	.+124    	; 0x2664 <__ultoa_invert+0x9c>
    25e8:	b4 e0       	ldi	r27, 0x04	; 4
    25ea:	3c d0       	rcall	.+120    	; 0x2664 <__ultoa_invert+0x9c>
    25ec:	67 0f       	add	r22, r23
    25ee:	78 1f       	adc	r23, r24
    25f0:	89 1f       	adc	r24, r25
    25f2:	9a 1f       	adc	r25, r26
    25f4:	a1 1d       	adc	r26, r1
    25f6:	68 0f       	add	r22, r24
    25f8:	79 1f       	adc	r23, r25
    25fa:	8a 1f       	adc	r24, r26
    25fc:	91 1d       	adc	r25, r1
    25fe:	a1 1d       	adc	r26, r1
    2600:	6a 0f       	add	r22, r26
    2602:	71 1d       	adc	r23, r1
    2604:	81 1d       	adc	r24, r1
    2606:	91 1d       	adc	r25, r1
    2608:	a1 1d       	adc	r26, r1
    260a:	20 d0       	rcall	.+64     	; 0x264c <__ultoa_invert+0x84>
    260c:	09 f4       	brne	.+2      	; 0x2610 <__ultoa_invert+0x48>
    260e:	68 94       	set
    2610:	3f 91       	pop	r19
    2612:	2a e0       	ldi	r18, 0x0A	; 10
    2614:	26 9f       	mul	r18, r22
    2616:	11 24       	eor	r1, r1
    2618:	30 19       	sub	r19, r0
    261a:	30 5d       	subi	r19, 0xD0	; 208
    261c:	31 93       	st	Z+, r19
    261e:	de f6       	brtc	.-74     	; 0x25d6 <__ultoa_invert+0xe>
    2620:	cf 01       	movw	r24, r30
    2622:	08 95       	ret
    2624:	46 2f       	mov	r20, r22
    2626:	47 70       	andi	r20, 0x07	; 7
    2628:	40 5d       	subi	r20, 0xD0	; 208
    262a:	41 93       	st	Z+, r20
    262c:	b3 e0       	ldi	r27, 0x03	; 3
    262e:	0f d0       	rcall	.+30     	; 0x264e <__ultoa_invert+0x86>
    2630:	c9 f7       	brne	.-14     	; 0x2624 <__ultoa_invert+0x5c>
    2632:	f6 cf       	rjmp	.-20     	; 0x2620 <__ultoa_invert+0x58>
    2634:	46 2f       	mov	r20, r22
    2636:	4f 70       	andi	r20, 0x0F	; 15
    2638:	40 5d       	subi	r20, 0xD0	; 208
    263a:	4a 33       	cpi	r20, 0x3A	; 58
    263c:	18 f0       	brcs	.+6      	; 0x2644 <__ultoa_invert+0x7c>
    263e:	49 5d       	subi	r20, 0xD9	; 217
    2640:	31 fd       	sbrc	r19, 1
    2642:	40 52       	subi	r20, 0x20	; 32
    2644:	41 93       	st	Z+, r20
    2646:	02 d0       	rcall	.+4      	; 0x264c <__ultoa_invert+0x84>
    2648:	a9 f7       	brne	.-22     	; 0x2634 <__ultoa_invert+0x6c>
    264a:	ea cf       	rjmp	.-44     	; 0x2620 <__ultoa_invert+0x58>
    264c:	b4 e0       	ldi	r27, 0x04	; 4
    264e:	a6 95       	lsr	r26
    2650:	97 95       	ror	r25
    2652:	87 95       	ror	r24
    2654:	77 95       	ror	r23
    2656:	67 95       	ror	r22
    2658:	ba 95       	dec	r27
    265a:	c9 f7       	brne	.-14     	; 0x264e <__ultoa_invert+0x86>
    265c:	00 97       	sbiw	r24, 0x00	; 0
    265e:	61 05       	cpc	r22, r1
    2660:	71 05       	cpc	r23, r1
    2662:	08 95       	ret
    2664:	9b 01       	movw	r18, r22
    2666:	ac 01       	movw	r20, r24
    2668:	0a 2e       	mov	r0, r26
    266a:	06 94       	lsr	r0
    266c:	57 95       	ror	r21
    266e:	47 95       	ror	r20
    2670:	37 95       	ror	r19
    2672:	27 95       	ror	r18
    2674:	ba 95       	dec	r27
    2676:	c9 f7       	brne	.-14     	; 0x266a <__ultoa_invert+0xa2>
    2678:	62 0f       	add	r22, r18
    267a:	73 1f       	adc	r23, r19
    267c:	84 1f       	adc	r24, r20
    267e:	95 1f       	adc	r25, r21
    2680:	a0 1d       	adc	r26, r0
    2682:	08 95       	ret

00002684 <_exit>:
    2684:	f8 94       	cli

00002686 <__stop_program>:
    2686:	ff cf       	rjmp	.-2      	; 0x2686 <__stop_program>
