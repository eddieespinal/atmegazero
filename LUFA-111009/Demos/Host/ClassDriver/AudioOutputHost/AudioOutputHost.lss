
AudioOutputHost.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001e  00800100  00001a20  00001ab4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001a20  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000025  0080011e  0080011e  00001ad2  2**0
                  ALLOC
  3 .debug_aranges 000006c8  00000000  00000000  00001ad2  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000f8d  00000000  00000000  0000219a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000b9c8  00000000  00000000  00003127  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000028ba  00000000  00000000  0000eaef  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00007ef5  00000000  00000000  000113a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000b10  00000000  00000000  000192a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000478a  00000000  00000000  00019db0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000577b  00000000  00000000  0001e53a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000007b0  00000000  00000000  00023cb5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
		Pipe_DisablePipe();
	}
}

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
       0:	2e c1       	rjmp	.+604    	; 0x25e <__ctors_end>
{
	USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, AfterType);

	if (*BytesRem)
	  USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, Type);
}
       2:	00 00       	nop

	return USB_Host_SendControlRequest(FeatureStatus);
}

uint8_t USB_Host_ClearEndpointStall(const uint8_t EndpointAddress)
{
       4:	4a c1       	rjmp	.+660    	; 0x29a <__bad_interrupt>

	return Serial_ReceiveByte();
}

int Serial_getchar_Blocking(FILE *Stream)
{
       6:	00 00       	nop
       8:	48 c1       	rjmp	.+656    	; 0x29a <__bad_interrupt>
       a:	00 00       	nop
       c:	46 c1       	rjmp	.+652    	; 0x29a <__bad_interrupt>
       e:	00 00       	nop
      10:	44 c1       	rjmp	.+648    	; 0x29a <__bad_interrupt>
      12:	00 00       	nop
      14:	42 c1       	rjmp	.+644    	; 0x29a <__bad_interrupt>
      16:	00 00       	nop
      18:	40 c1       	rjmp	.+640    	; 0x29a <__bad_interrupt>
      1a:	00 00       	nop
      1c:	3e c1       	rjmp	.+636    	; 0x29a <__bad_interrupt>
      1e:	00 00       	nop
      20:	3c c1       	rjmp	.+632    	; 0x29a <__bad_interrupt>
      22:	00 00       	nop
      24:	3a c1       	rjmp	.+628    	; 0x29a <__bad_interrupt>
      26:	00 00       	nop
      28:	ee c5       	rjmp	.+3036   	; 0xc06 <__vector_10>
      2a:	00 00       	nop
      2c:	36 c1       	rjmp	.+620    	; 0x29a <__bad_interrupt>
      2e:	00 00       	nop
      30:	34 c1       	rjmp	.+616    	; 0x29a <__bad_interrupt>
      32:	00 00       	nop
      34:	32 c1       	rjmp	.+612    	; 0x29a <__bad_interrupt>
      36:	00 00       	nop
      38:	30 c1       	rjmp	.+608    	; 0x29a <__bad_interrupt>
      3a:	00 00       	nop
      3c:	2e c1       	rjmp	.+604    	; 0x29a <__bad_interrupt>
      3e:	00 00       	nop
      40:	2c c1       	rjmp	.+600    	; 0x29a <__bad_interrupt>
      42:	00 00       	nop
      44:	2a c1       	rjmp	.+596    	; 0x29a <__bad_interrupt>
      46:	00 00       	nop
      48:	28 c1       	rjmp	.+592    	; 0x29a <__bad_interrupt>
      4a:	00 00       	nop
      4c:	26 c1       	rjmp	.+588    	; 0x29a <__bad_interrupt>
      4e:	00 00       	nop
      50:	24 c1       	rjmp	.+584    	; 0x29a <__bad_interrupt>
      52:	00 00       	nop
      54:	57 c2       	rjmp	.+1198   	; 0x504 <__vector_21>
      56:	00 00       	nop
      58:	20 c1       	rjmp	.+576    	; 0x29a <__bad_interrupt>
      5a:	00 00       	nop
      5c:	1e c1       	rjmp	.+572    	; 0x29a <__bad_interrupt>
      5e:	00 00       	nop
      60:	1c c1       	rjmp	.+568    	; 0x29a <__bad_interrupt>
      62:	00 00       	nop
      64:	1a c1       	rjmp	.+564    	; 0x29a <__bad_interrupt>
      66:	00 00       	nop
      68:	18 c1       	rjmp	.+560    	; 0x29a <__bad_interrupt>
      6a:	00 00       	nop
      6c:	16 c1       	rjmp	.+556    	; 0x29a <__bad_interrupt>
      6e:	00 00       	nop
      70:	14 c1       	rjmp	.+552    	; 0x29a <__bad_interrupt>
      72:	00 00       	nop
      74:	12 c1       	rjmp	.+548    	; 0x29a <__bad_interrupt>
      76:	00 00       	nop
      78:	10 c1       	rjmp	.+544    	; 0x29a <__bad_interrupt>
      7a:	00 00       	nop
      7c:	0e c1       	rjmp	.+540    	; 0x29a <__bad_interrupt>
      7e:	00 00       	nop
      80:	0c c1       	rjmp	.+536    	; 0x29a <__bad_interrupt>
      82:	00 00       	nop
      84:	0a c1       	rjmp	.+532    	; 0x29a <__bad_interrupt>
      86:	00 00       	nop
      88:	08 c1       	rjmp	.+528    	; 0x29a <__bad_interrupt>
      8a:	00 00       	nop
      8c:	06 c1       	rjmp	.+524    	; 0x29a <__bad_interrupt>
      8e:	00 00       	nop
      90:	04 c1       	rjmp	.+520    	; 0x29a <__bad_interrupt>
      92:	00 00       	nop
      94:	02 c1       	rjmp	.+516    	; 0x29a <__bad_interrupt>
      96:	00 00       	nop

00000098 <__c.4699>:
      98:	1b 5b 33 31 6d 44 65 76 20 45 6e 75 6d 20 45 72     .[31mDev Enum Er
      a8:	72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     ror.. -- Error C
      b8:	6f 64 65 20 25 64 0d 0a 20 2d 2d 20 53 75 62 20     ode %d.. -- Sub 
      c8:	45 72 72 6f 72 20 43 6f 64 65 20 25 64 0d 0a 20     Error Code %d.. 
      d8:	2d 2d 20 49 6e 20 53 74 61 74 65 20 25 64 0d 0a     -- In State %d..
      e8:	1b 5b 33 37 6d 00                                   .[37m.

000000ee <__c.4691>:
      ee:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
      fe:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 
     10e:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

0000011d <__c.4674>:
     11d:	41 75 64 69 6f 20 44 65 76 69 63 65 20 45 6e 75     Audio Device Enu
     12d:	6d 65 72 61 74 65 64 2e 0d 0a 00                    merated....

00000138 <__c.4672>:
     138:	45 72 72 6f 72 20 53 65 74 74 69 6e 67 20 41 75     Error Setting Au
     148:	64 69 6f 20 53 61 6d 70 6c 69 6e 67 20 46 72 65     dio Sampling Fre
     158:	71 75 65 6e 63 79 2e 0d 0a 00                       quency....

00000162 <__c.4669>:
     162:	45 72 72 6f 72 20 45 6e 61 62 6c 69 6e 67 20 41     Error Enabling A
     172:	75 64 69 6f 20 53 74 72 65 61 6d 2e 0d 0a 00        udio Stream....

00000181 <__c.4667>:
     181:	45 72 72 6f 72 20 53 65 74 74 69 6e 67 20 44 65     Error Setting De
     191:	76 69 63 65 20 43 6f 6e 66 69 67 75 72 61 74 69     vice Configurati
     1a1:	6f 6e 2e 0d 0a 00                                   on....

000001a7 <__c.4665>:
     1a7:	41 74 74 61 63 68 65 64 20 44 65 76 69 63 65 20     Attached Device 
     1b7:	4e 6f 74 20 61 20 56 61 6c 69 64 20 41 75 64 69     Not a Valid Audi
     1c7:	6f 20 4f 75 74 70 75 74 20 44 65 76 69 63 65 2e     o Output Device.
     1d7:	0d 0a 00                                            ...

000001da <__c.4663>:
     1da:	45 72 72 6f 72 20 52 65 74 72 69 65 76 69 6e 67     Error Retrieving
     1ea:	20 43 6f 6e 66 69 67 75 72 61 74 69 6f 6e 20 44      Configuration D
     1fa:	65 73 63 72 69 70 74 6f 72 2e 0d 0a 00              escriptor....

00000207 <__c.4656>:
     207:	0d 0a 44 65 76 69 63 65 20 55 6e 61 74 74 61 63     ..Device Unattac
     217:	68 65 64 2e 0d 0a 00                                hed....

0000021e <__c.4651>:
     21e:	44 65 76 69 63 65 20 41 74 74 61 63 68 65 64 2e     Device Attached.
     22e:	0d 0a 00                                            ...

00000231 <__c.4615>:
     231:	1b 5b 33 36 6d 41 75 64 69 6f 20 4f 75 74 70 75     .[36mAudio Outpu
     241:	74 20 48 6f 73 74 20 44 65 6d 6f 20 72 75 6e 6e     t Host Demo runn
     251:	69 6e 67 2e 0d 0a 1b 5b 33 37 6d 00 00              ing....[37m..

0000025e <__ctors_end>:
     25e:	11 24       	eor	r1, r1
     260:	1f be       	out	0x3f, r1	; 63
     262:	cf ef       	ldi	r28, 0xFF	; 255
     264:	d0 e2       	ldi	r29, 0x20	; 32
     266:	de bf       	out	0x3e, r29	; 62
     268:	cd bf       	out	0x3d, r28	; 61

0000026a <__do_copy_data>:
     26a:	11 e0       	ldi	r17, 0x01	; 1
     26c:	a0 e0       	ldi	r26, 0x00	; 0
     26e:	b1 e0       	ldi	r27, 0x01	; 1
     270:	e0 e2       	ldi	r30, 0x20	; 32
     272:	fa e1       	ldi	r31, 0x1A	; 26
     274:	00 e0       	ldi	r16, 0x00	; 0
     276:	0b bf       	out	0x3b, r16	; 59
     278:	02 c0       	rjmp	.+4      	; 0x27e <__do_copy_data+0x14>
     27a:	07 90       	elpm	r0, Z+
     27c:	0d 92       	st	X+, r0
     27e:	ae 31       	cpi	r26, 0x1E	; 30
     280:	b1 07       	cpc	r27, r17
     282:	d9 f7       	brne	.-10     	; 0x27a <__do_copy_data+0x10>

00000284 <__do_clear_bss>:
     284:	11 e0       	ldi	r17, 0x01	; 1
     286:	ae e1       	ldi	r26, 0x1E	; 30
     288:	b1 e0       	ldi	r27, 0x01	; 1
     28a:	01 c0       	rjmp	.+2      	; 0x28e <.do_clear_bss_start>

0000028c <.do_clear_bss_loop>:
     28c:	1d 92       	st	X+, r1

0000028e <.do_clear_bss_start>:
     28e:	a3 34       	cpi	r26, 0x43	; 67
     290:	b1 07       	cpc	r27, r17
     292:	e1 f7       	brne	.-8      	; 0x28c <.do_clear_bss_loop>
     294:	c6 d1       	rcall	.+908    	; 0x622 <main>
     296:	0c 94 0e 0d 	jmp	0x1a1c	; 0x1a1c <_exit>

0000029a <__bad_interrupt>:
     29a:	b2 ce       	rjmp	.-668    	; 0x0 <__vectors>

0000029c <EVENT_USB_Host_DeviceEnumerationFailed>:
 *  enumerating an attached USB device.
 */
void EVENT_USB_Host_DeviceEnumerationFailed(const uint8_t ErrorCode,
                                            const uint8_t SubErrorCode)
{
	printf_P(PSTR(ESC_FG_RED "Dev Enum Error\r\n"
     29c:	90 91 2e 01 	lds	r25, 0x012E
     2a0:	2d b7       	in	r18, 0x3d	; 61
     2a2:	3e b7       	in	r19, 0x3e	; 62
     2a4:	28 50       	subi	r18, 0x08	; 8
     2a6:	30 40       	sbci	r19, 0x00	; 0
     2a8:	0f b6       	in	r0, 0x3f	; 63
     2aa:	f8 94       	cli
     2ac:	3e bf       	out	0x3e, r19	; 62
     2ae:	0f be       	out	0x3f, r0	; 63
     2b0:	2d bf       	out	0x3d, r18	; 61
     2b2:	ed b7       	in	r30, 0x3d	; 61
     2b4:	fe b7       	in	r31, 0x3e	; 62
     2b6:	31 96       	adiw	r30, 0x01	; 1
     2b8:	28 e9       	ldi	r18, 0x98	; 152
     2ba:	30 e0       	ldi	r19, 0x00	; 0
     2bc:	ad b7       	in	r26, 0x3d	; 61
     2be:	be b7       	in	r27, 0x3e	; 62
     2c0:	12 96       	adiw	r26, 0x02	; 2
     2c2:	3c 93       	st	X, r19
     2c4:	2e 93       	st	-X, r18
     2c6:	11 97       	sbiw	r26, 0x01	; 1
     2c8:	82 83       	std	Z+2, r24	; 0x02
     2ca:	13 82       	std	Z+3, r1	; 0x03
     2cc:	64 83       	std	Z+4, r22	; 0x04
     2ce:	15 82       	std	Z+5, r1	; 0x05
     2d0:	96 83       	std	Z+6, r25	; 0x06
     2d2:	17 82       	std	Z+7, r1	; 0x07
     2d4:	0e 94 1e 0a 	call	0x143c	; 0x143c <printf_P>
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     2d8:	8b b1       	in	r24, 0x0b	; 11
     2da:	8f 70       	andi	r24, 0x0F	; 15
     2dc:	80 69       	ori	r24, 0x90	; 144
     2de:	8b b9       	out	0x0b, r24	; 11
     2e0:	2d b7       	in	r18, 0x3d	; 61
     2e2:	3e b7       	in	r19, 0x3e	; 62
     2e4:	28 5f       	subi	r18, 0xF8	; 248
     2e6:	3f 4f       	sbci	r19, 0xFF	; 255
     2e8:	0f b6       	in	r0, 0x3f	; 63
     2ea:	f8 94       	cli
     2ec:	3e bf       	out	0x3e, r19	; 62
     2ee:	0f be       	out	0x3f, r0	; 63
     2f0:	2d bf       	out	0x3d, r18	; 61
	                         " -- Error Code %d\r\n"
	                         " -- Sub Error Code %d\r\n"
	                         " -- In State %d\r\n" ESC_FG_WHITE), ErrorCode, SubErrorCode, USB_HostState);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
}
     2f2:	08 95       	ret

000002f4 <EVENT_USB_Host_HostError>:
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
}

/** Event handler for the USB_HostError event. This indicates that a hardware error occurred while in host mode. */
void EVENT_USB_Host_HostError(const uint8_t ErrorCode)
{
     2f4:	1f 93       	push	r17
     2f6:	18 2f       	mov	r17, r24
	USB_Disable();
     2f8:	61 d4       	rcall	.+2242   	; 0xbbc <USB_Disable>

	printf_P(PSTR(ESC_FG_RED "Host Mode Error\r\n"
     2fa:	00 d0       	rcall	.+0      	; 0x2fc <EVENT_USB_Host_HostError+0x8>
     2fc:	00 d0       	rcall	.+0      	; 0x2fe <EVENT_USB_Host_HostError+0xa>
     2fe:	ed b7       	in	r30, 0x3d	; 61
     300:	fe b7       	in	r31, 0x3e	; 62
     302:	31 96       	adiw	r30, 0x01	; 1
     304:	8e ee       	ldi	r24, 0xEE	; 238
     306:	90 e0       	ldi	r25, 0x00	; 0
     308:	ad b7       	in	r26, 0x3d	; 61
     30a:	be b7       	in	r27, 0x3e	; 62
     30c:	12 96       	adiw	r26, 0x02	; 2
     30e:	9c 93       	st	X, r25
     310:	8e 93       	st	-X, r24
     312:	11 97       	sbiw	r26, 0x01	; 1
     314:	12 83       	std	Z+2, r17	; 0x02
     316:	13 82       	std	Z+3, r1	; 0x03
     318:	0e 94 1e 0a 	call	0x143c	; 0x143c <printf_P>
     31c:	8b b1       	in	r24, 0x0b	; 11
     31e:	8f 70       	andi	r24, 0x0F	; 15
     320:	80 69       	ori	r24, 0x90	; 144
     322:	8b b9       	out	0x0b, r24	; 11
     324:	0f 90       	pop	r0
     326:	0f 90       	pop	r0
     328:	0f 90       	pop	r0
     32a:	0f 90       	pop	r0
     32c:	ff cf       	rjmp	.-2      	; 0x32c <EVENT_USB_Host_HostError+0x38>

0000032e <EVENT_USB_Host_DeviceUnattached>:
/** Event handler for the USB_DeviceUnattached event. This indicates that a device has been removed from the host, and
 *  stops the library USB task management process.
 */
void EVENT_USB_Host_DeviceUnattached(void)
{
	puts_P(PSTR("\r\nDevice Unattached.\r\n"));
     32e:	87 e0       	ldi	r24, 0x07	; 7
     330:	92 e0       	ldi	r25, 0x02	; 2
     332:	0e 94 40 0a 	call	0x1480	; 0x1480 <puts_P>
     336:	8b b1       	in	r24, 0x0b	; 11
     338:	8f 70       	andi	r24, 0x0F	; 15
     33a:	80 61       	ori	r24, 0x10	; 16
     33c:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
}
     33e:	08 95       	ret

00000340 <EVENT_USB_Host_DeviceAttached>:
/** Event handler for the USB_DeviceAttached event. This indicates that a device has been attached to the host, and
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Host_DeviceAttached(void)
{
	puts_P(PSTR("Device Attached.\r\n"));
     340:	8e e1       	ldi	r24, 0x1E	; 30
     342:	92 e0       	ldi	r25, 0x02	; 2
     344:	0e 94 40 0a 	call	0x1480	; 0x1480 <puts_P>
     348:	8b b1       	in	r24, 0x0b	; 11
     34a:	8f 70       	andi	r24, 0x0F	; 15
     34c:	80 6a       	ori	r24, 0xA0	; 160
     34e:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
}
     350:	08 95       	ret

00000352 <EVENT_USB_Host_DeviceEnumerationComplete>:

/** Event handler for the USB_DeviceEnumerationComplete event. This indicates that a device has been successfully
 *  enumerated by the host and is now ready to be used by the application.
 */
void EVENT_USB_Host_DeviceEnumerationComplete(void)
{
     352:	ef 92       	push	r14
     354:	ff 92       	push	r15
     356:	0f 93       	push	r16
     358:	1f 93       	push	r17
     35a:	df 93       	push	r29
     35c:	cf 93       	push	r28
     35e:	cd b7       	in	r28, 0x3d	; 61
     360:	de b7       	in	r29, 0x3e	; 62
     362:	c5 50       	subi	r28, 0x05	; 5
     364:	d2 40       	sbci	r29, 0x02	; 2
     366:	0f b6       	in	r0, 0x3f	; 63
     368:	f8 94       	cli
     36a:	de bf       	out	0x3e, r29	; 62
     36c:	0f be       	out	0x3f, r0	; 63
     36e:	cd bf       	out	0x3d, r28	; 61
     370:	8b b1       	in	r24, 0x0b	; 11
     372:	8f 70       	andi	r24, 0x0F	; 15
     374:	80 6a       	ori	r24, 0xA0	; 160
     376:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);

	uint16_t ConfigDescriptorSize;
	uint8_t  ConfigDescriptorData[512];

	if (USB_Host_GetDeviceConfigDescriptor(1, &ConfigDescriptorSize, ConfigDescriptorData,
     378:	8e 01       	movw	r16, r28
     37a:	0a 5f       	subi	r16, 0xFA	; 250
     37c:	1f 4f       	sbci	r17, 0xFF	; 255
     37e:	81 e0       	ldi	r24, 0x01	; 1
     380:	be 01       	movw	r22, r28
     382:	6f 5f       	subi	r22, 0xFF	; 255
     384:	7f 4f       	sbci	r23, 0xFF	; 255
     386:	a8 01       	movw	r20, r16
     388:	20 e0       	ldi	r18, 0x00	; 0
     38a:	32 e0       	ldi	r19, 0x02	; 2
     38c:	13 d5       	rcall	.+2598   	; 0xdb4 <USB_Host_GetDeviceConfigDescriptor>
     38e:	88 23       	and	r24, r24
     390:	19 f0       	breq	.+6      	; 0x398 <EVENT_USB_Host_DeviceEnumerationComplete+0x46>
	                                       sizeof(ConfigDescriptorData)) != HOST_GETCONFIG_Successful)
	{
		puts_P(PSTR("Error Retrieving Configuration Descriptor.\r\n"));
     392:	8a ed       	ldi	r24, 0xDA	; 218
     394:	91 e0       	ldi	r25, 0x01	; 1
     396:	11 c0       	rjmp	.+34     	; 0x3ba <EVENT_USB_Host_DeviceEnumerationComplete+0x68>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (Audio_Host_ConfigurePipes(&Speaker_Audio_Interface,
     398:	69 81       	ldd	r22, Y+1	; 0x01
     39a:	7a 81       	ldd	r23, Y+2	; 0x02
     39c:	80 e0       	ldi	r24, 0x00	; 0
     39e:	91 e0       	ldi	r25, 0x01	; 1
     3a0:	a8 01       	movw	r20, r16
     3a2:	4d d7       	rcall	.+3738   	; 0x123e <Audio_Host_ConfigurePipes>
     3a4:	88 23       	and	r24, r24
     3a6:	19 f0       	breq	.+6      	; 0x3ae <EVENT_USB_Host_DeviceEnumerationComplete+0x5c>
	                              ConfigDescriptorSize, ConfigDescriptorData) != AUDIO_ENUMERROR_NoError)
	{
		puts_P(PSTR("Attached Device Not a Valid Audio Output Device.\r\n"));
     3a8:	87 ea       	ldi	r24, 0xA7	; 167
     3aa:	91 e0       	ldi	r25, 0x01	; 1
     3ac:	06 c0       	rjmp	.+12     	; 0x3ba <EVENT_USB_Host_DeviceEnumerationComplete+0x68>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (USB_Host_SetDeviceConfiguration(1) != HOST_SENDCONTROL_Successful)
     3ae:	81 e0       	ldi	r24, 0x01	; 1
     3b0:	a3 d6       	rcall	.+3398   	; 0x10f8 <USB_Host_SetDeviceConfiguration>
     3b2:	88 23       	and	r24, r24
     3b4:	41 f0       	breq	.+16     	; 0x3c6 <EVENT_USB_Host_DeviceEnumerationComplete+0x74>
	{
		puts_P(PSTR("Error Setting Device Configuration.\r\n"));
     3b6:	81 e8       	ldi	r24, 0x81	; 129
     3b8:	91 e0       	ldi	r25, 0x01	; 1
     3ba:	0e 94 40 0a 	call	0x1480	; 0x1480 <puts_P>
     3be:	8b b1       	in	r24, 0x0b	; 11
     3c0:	8f 70       	andi	r24, 0x0F	; 15
     3c2:	80 69       	ori	r24, 0x90	; 144
     3c4:	3b c0       	rjmp	.+118    	; 0x43c <EVENT_USB_Host_DeviceEnumerationComplete+0xea>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (Audio_Host_StartStopStreaming(&Speaker_Audio_Interface, true) != HOST_SENDCONTROL_Successful)
     3c6:	80 e0       	ldi	r24, 0x00	; 0
     3c8:	91 e0       	ldi	r25, 0x01	; 1
     3ca:	61 e0       	ldi	r22, 0x01	; 1
     3cc:	2e d7       	rcall	.+3676   	; 0x122a <Audio_Host_StartStopStreaming>
     3ce:	88 23       	and	r24, r24
     3d0:	19 f0       	breq	.+6      	; 0x3d8 <EVENT_USB_Host_DeviceEnumerationComplete+0x86>
	{
		puts_P(PSTR("Error Enabling Audio Stream.\r\n"));
     3d2:	82 e6       	ldi	r24, 0x62	; 98
     3d4:	91 e0       	ldi	r25, 0x01	; 1
     3d6:	1b c0       	rjmp	.+54     	; 0x40e <EVENT_USB_Host_DeviceEnumerationComplete+0xbc>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		USB_Host_SetDeviceConfiguration(0);
		return;
	}
	
	USB_Audio_SampleFreq_t SampleRate = AUDIO_SAMPLE_FREQ(48000);
     3d8:	de 01       	movw	r26, r28
     3da:	13 96       	adiw	r26, 0x03	; 3
     3dc:	ea e0       	ldi	r30, 0x0A	; 10
     3de:	f1 e0       	ldi	r31, 0x01	; 1
     3e0:	83 e0       	ldi	r24, 0x03	; 3
     3e2:	01 90       	ld	r0, Z+
     3e4:	0d 92       	st	X+, r0
     3e6:	81 50       	subi	r24, 0x01	; 1
     3e8:	e1 f7       	brne	.-8      	; 0x3e2 <EVENT_USB_Host_DeviceEnumerationComplete+0x90>
	if (Audio_Host_GetSetEndpointProperty(&Speaker_Audio_Interface, Speaker_Audio_Interface.Config.DataOUTPipeNumber,
     3ea:	80 e0       	ldi	r24, 0x00	; 0
     3ec:	91 e0       	ldi	r25, 0x01	; 1
     3ee:	60 91 01 01 	lds	r22, 0x0101
     3f2:	41 e0       	ldi	r20, 0x01	; 1
     3f4:	21 e0       	ldi	r18, 0x01	; 1
     3f6:	03 e0       	ldi	r16, 0x03	; 3
     3f8:	10 e0       	ldi	r17, 0x00	; 0
     3fa:	33 e0       	ldi	r19, 0x03	; 3
     3fc:	e3 2e       	mov	r14, r19
     3fe:	f1 2c       	mov	r15, r1
     400:	ec 0e       	add	r14, r28
     402:	fd 1e       	adc	r15, r29
     404:	dc d6       	rcall	.+3512   	; 0x11be <Audio_Host_GetSetEndpointProperty>
     406:	88 23       	and	r24, r24
     408:	59 f0       	breq	.+22     	; 0x420 <EVENT_USB_Host_DeviceEnumerationComplete+0xce>
	                                      AUDIO_REQ_SetCurrent, AUDIO_EPCONTROL_SamplingFreq,
	                                      sizeof(SampleRate), &SampleRate) != HOST_SENDCONTROL_Successful)
	{
		puts_P(PSTR("Error Setting Audio Sampling Frequency.\r\n"));
     40a:	88 e3       	ldi	r24, 0x38	; 56
     40c:	91 e0       	ldi	r25, 0x01	; 1
     40e:	0e 94 40 0a 	call	0x1480	; 0x1480 <puts_P>
     412:	8b b1       	in	r24, 0x0b	; 11
     414:	8f 70       	andi	r24, 0x0F	; 15
     416:	80 69       	ori	r24, 0x90	; 144
     418:	8b b9       	out	0x0b, r24	; 11
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		USB_Host_SetDeviceConfiguration(0);
     41a:	80 e0       	ldi	r24, 0x00	; 0
     41c:	6d d6       	rcall	.+3290   	; 0x10f8 <USB_Host_SetDeviceConfiguration>
     41e:	0f c0       	rjmp	.+30     	; 0x43e <EVENT_USB_Host_DeviceEnumerationComplete+0xec>
		return;
	}

	/* Sample reload timer initialization */
	TIMSK0  = (1 << OCIE0A);
     420:	92 e0       	ldi	r25, 0x02	; 2
     422:	90 93 6e 00 	sts	0x006E, r25
	OCR0A   = ((F_CPU / 8 / 48000) - 1);
     426:	83 e1       	ldi	r24, 0x13	; 19
     428:	87 bd       	out	0x27, r24	; 39
	TCCR0A  = (1 << WGM01);  // CTC mode
     42a:	94 bd       	out	0x24, r25	; 36
	TCCR0B  = (1 << CS01);   // Fcpu/8 speed
     42c:	95 bd       	out	0x25, r25	; 37

	puts_P(PSTR("Audio Device Enumerated.\r\n"));
     42e:	8d e1       	ldi	r24, 0x1D	; 29
     430:	91 e0       	ldi	r25, 0x01	; 1
     432:	0e 94 40 0a 	call	0x1480	; 0x1480 <puts_P>
     436:	8b b1       	in	r24, 0x0b	; 11
     438:	8f 70       	andi	r24, 0x0F	; 15
     43a:	80 66       	ori	r24, 0x60	; 96
     43c:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
}
     43e:	cb 5f       	subi	r28, 0xFB	; 251
     440:	dd 4f       	sbci	r29, 0xFD	; 253
     442:	0f b6       	in	r0, 0x3f	; 63
     444:	f8 94       	cli
     446:	de bf       	out	0x3e, r29	; 62
     448:	0f be       	out	0x3f, r0	; 63
     44a:	cd bf       	out	0x3d, r28	; 61
     44c:	cf 91       	pop	r28
     44e:	df 91       	pop	r29
     450:	1f 91       	pop	r17
     452:	0f 91       	pop	r16
     454:	ff 90       	pop	r15
     456:	ef 90       	pop	r14
     458:	08 95       	ret

0000045a <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     45a:	84 b7       	in	r24, 0x34	; 52
     45c:	87 7f       	andi	r24, 0xF7	; 247
     45e:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     460:	38 e1       	ldi	r19, 0x18	; 24
     462:	0f b6       	in	r0, 0x3f	; 63
     464:	f8 94       	cli
     466:	30 93 60 00 	sts	0x0060, r19
     46a:	10 92 60 00 	sts	0x0060, r1
     46e:	0f be       	out	0x3f, r0	; 63

	/* Disable clock division */
	clock_prescale_set(clock_div_1);
     470:	80 e0       	ldi	r24, 0x00	; 0
     472:	90 e0       	ldi	r25, 0x00	; 0
     474:	20 e8       	ldi	r18, 0x80	; 128
     476:	0f b6       	in	r0, 0x3f	; 63
     478:	f8 94       	cli
     47a:	20 93 61 00 	sts	0x0061, r18
     47e:	80 93 61 00 	sts	0x0061, r24
     482:	0f be       	out	0x3f, r0	; 63
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     484:	83 e3       	ldi	r24, 0x33	; 51
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	90 93 cd 00 	sts	0x00CD, r25
     48c:	80 93 cc 00 	sts	0x00CC, r24

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     490:	86 e0       	ldi	r24, 0x06	; 6
     492:	80 93 ca 00 	sts	0x00CA, r24
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     496:	10 92 c8 00 	sts	0x00C8, r1
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     49a:	30 93 c9 00 	sts	0x00C9, r19

				DDRD  |= (1 << 3);
     49e:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     4a0:	5a 9a       	sbi	0x0b, 2	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     4a2:	8a b1       	in	r24, 0x0a	; 10
     4a4:	80 6f       	ori	r24, 0xF0	; 240
     4a6:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     4a8:	8b b1       	in	r24, 0x0b	; 11
     4aa:	8f 70       	andi	r24, 0x0F	; 15
     4ac:	8b b9       	out	0x0b, r24	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Buttons_Init(void)
			{
				DDRE  &= ~BUTTONS_BUTTON1;
     4ae:	6a 98       	cbi	0x0d, 2	; 13
				PORTE |=  BUTTONS_BUTTON1;
     4b0:	72 9a       	sbi	0x0e, 2	; 14
			 *  \param[in] Mode  Mask of ADC prescale and mode settings.
			 */
			static inline void ADC_Init(uint8_t Mode) ATTR_ALWAYS_INLINE;
			static inline void ADC_Init(uint8_t Mode)
			{
				ADCSRA = ((1 << ADEN) | Mode);
     4b2:	85 ea       	ldi	r24, 0xA5	; 165
     4b4:	80 93 7a 00 	sts	0x007A, r24
			static inline void ADC_SetupChannel(const uint8_t ChannelIndex)
			{
				#if (defined(__AVR_AT90USB1286__) || defined(__AVR_AT90USB646__) || \
					 defined(__AVR_AT90USB1287__) || defined(__AVR_AT90USB647__) || \
					 defined(__AVR_ATmega32U6__))
				DDRF  &= ~(1 << ChannelIndex);
     4b8:	82 98       	cbi	0x10, 2	; 16
				DIDR0 |=  (1 << ChannelIndex);
     4ba:	ee e7       	ldi	r30, 0x7E	; 126
     4bc:	f0 e0       	ldi	r31, 0x00	; 0
     4be:	80 81       	ld	r24, Z
     4c0:	84 60       	ori	r24, 0x04	; 4
     4c2:	80 83       	st	Z, r24
	Serial_Init(9600, false);
	LEDs_Init();
	Buttons_Init();
	ADC_Init(ADC_FREE_RUNNING | ADC_PRESCALE_32);
	ADC_SetupChannel(MIC_IN_ADC_CHANNEL);
	USB_Init();
     4c4:	72 d3       	rcall	.+1764   	; 0xbaa <USB_Init>
			static inline void Serial_CreateStream(FILE* Stream)
			{
				if (!(Stream))
				{
					Stream = &USARTSerialStream;
					stdin  = Stream;
     4c6:	ef e2       	ldi	r30, 0x2F	; 47
     4c8:	f1 e0       	ldi	r31, 0x01	; 1
     4ca:	f0 93 3e 01 	sts	0x013E, r31
     4ce:	e0 93 3d 01 	sts	0x013D, r30
					stdout = Stream;
     4d2:	f0 93 40 01 	sts	0x0140, r31
     4d6:	e0 93 3f 01 	sts	0x013F, r30
				}
			
				*Stream = (FILE)FDEV_SETUP_STREAM(Serial_putchar, Serial_getchar, _FDEV_SETUP_RW);
     4da:	8e e0       	ldi	r24, 0x0E	; 14
     4dc:	df 01       	movw	r26, r30
     4de:	1d 92       	st	X+, r1
     4e0:	8a 95       	dec	r24
     4e2:	e9 f7       	brne	.-6      	; 0x4de <SetupHardware+0x84>
     4e4:	83 e0       	ldi	r24, 0x03	; 3
     4e6:	80 93 32 01 	sts	0x0132, r24
     4ea:	80 e0       	ldi	r24, 0x00	; 0
     4ec:	9a e0       	ldi	r25, 0x0A	; 10
     4ee:	90 93 38 01 	sts	0x0138, r25
     4f2:	80 93 37 01 	sts	0x0137, r24
     4f6:	8a e0       	ldi	r24, 0x0A	; 10
     4f8:	9a e0       	ldi	r25, 0x0A	; 10
     4fa:	90 93 3a 01 	sts	0x013A, r25
     4fe:	80 93 39 01 	sts	0x0139, r24

	/* Create a stdio stream for the serial port for stdin and stdout */
	Serial_CreateStream(NULL);
}
     502:	08 95       	ret

00000504 <__vector_21>:
	}
}

/** ISR to handle the reloading of the PWM timer with the next sample. */
ISR(TIMER0_COMPA_vect, ISR_BLOCK)
{
     504:	1f 92       	push	r1
     506:	0f 92       	push	r0
     508:	0f b6       	in	r0, 0x3f	; 63
     50a:	0f 92       	push	r0
     50c:	0b b6       	in	r0, 0x3b	; 59
     50e:	0f 92       	push	r0
     510:	11 24       	eor	r1, r1
     512:	ff 92       	push	r15
     514:	0f 93       	push	r16
     516:	1f 93       	push	r17
     518:	2f 93       	push	r18
     51a:	3f 93       	push	r19
     51c:	4f 93       	push	r20
     51e:	5f 93       	push	r21
     520:	6f 93       	push	r22
     522:	7f 93       	push	r23
     524:	8f 93       	push	r24
     526:	9f 93       	push	r25
     528:	af 93       	push	r26
     52a:	bf 93       	push	r27
     52c:	ef 93       	push	r30
     52e:	ff 93       	push	r31
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
     530:	10 91 a7 00 	lds	r17, 0x00A7
			 */
			static inline bool Audio_Host_IsReadyForNextSample(USB_ClassInfo_Audio_Host_t* const AudioInterfaceInfo)
			                                                   ATTR_NON_NULL_PTR_ARG(1) ATTR_ALWAYS_INLINE;
			static inline bool Audio_Host_IsReadyForNextSample(USB_ClassInfo_Audio_Host_t* const AudioInterfaceInfo)
			{
				if ((USB_HostState != HOST_STATE_Configured) || !(AudioInterfaceInfo->State.IsActive))
     534:	80 91 2e 01 	lds	r24, 0x012E
     538:	8b 30       	cpi	r24, 0x0B	; 11
     53a:	09 f0       	breq	.+2      	; 0x53e <__vector_21+0x3a>
     53c:	59 c0       	rjmp	.+178    	; 0x5f0 <__vector_21+0xec>
     53e:	80 91 02 01 	lds	r24, 0x0102
     542:	88 23       	and	r24, r24
     544:	09 f4       	brne	.+2      	; 0x548 <__vector_21+0x44>
     546:	54 c0       	rjmp	.+168    	; 0x5f0 <__vector_21+0xec>
				  return false;

				Pipe_SelectPipe(AudioInterfaceInfo->Config.DataOUTPipeNumber);
     548:	80 91 01 01 	lds	r24, 0x0101
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     54c:	80 93 a7 00 	sts	0x00A7, r24
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     550:	80 91 a6 00 	lds	r24, 0x00A6
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	/* Check that the USB bus is ready for the next sample to write */
	if (Audio_Host_IsReadyForNextSample(&Speaker_Audio_Interface))
     554:	82 ff       	sbrs	r24, 2
     556:	4c c0       	rjmp	.+152    	; 0x5f0 <__vector_21+0xec>
		#if defined(USE_TEST_TONE)
			static uint8_t SquareWaveSampleCount;
			static int16_t CurrentWaveValue;
			
			/* In test tone mode, generate a square wave at 1/256 of the sample rate */
			if (SquareWaveSampleCount++ == 0xFF)
     558:	80 91 20 01 	lds	r24, 0x0120
     55c:	8f 5f       	subi	r24, 0xFF	; 255
     55e:	80 93 20 01 	sts	0x0120, r24
     562:	81 50       	subi	r24, 0x01	; 1
     564:	50 f4       	brcc	.+20     	; 0x57a <__vector_21+0x76>
			  CurrentWaveValue ^= 0x8000;
     566:	80 91 1e 01 	lds	r24, 0x011E
     56a:	90 91 1f 01 	lds	r25, 0x011F
     56e:	80 50       	subi	r24, 0x00	; 0
     570:	90 48       	sbci	r25, 0x80	; 128
     572:	90 93 1f 01 	sts	0x011F, r25
     576:	80 93 1e 01 	sts	0x011E, r24
			
			/* Only generate audio if the board button is being pressed */
			AudioSample = (Buttons_GetStatus() & BUTTONS_BUTTON1) ? CurrentWaveValue : 0;
     57a:	62 9b       	sbis	0x0c, 2	; 12
     57c:	03 c0       	rjmp	.+6      	; 0x584 <__vector_21+0x80>
     57e:	80 e0       	ldi	r24, 0x00	; 0
     580:	90 e0       	ldi	r25, 0x00	; 0
     582:	04 c0       	rjmp	.+8      	; 0x58c <__vector_21+0x88>
     584:	80 91 1e 01 	lds	r24, 0x011E
     588:	90 91 1f 01 	lds	r25, 0x011F
			 *  \param[in] Data  Data to write to the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_16_LE(const uint16_t Data)
			{
				UPDATX = (Data & 0xFF);
     58c:	f8 2e       	mov	r15, r24
     58e:	80 93 af 00 	sts	0x00AF, r24
				UPDATX = (Data >> 8);
     592:	09 2f       	mov	r16, r25
     594:	90 93 af 00 	sts	0x00AF, r25
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
     598:	80 91 a6 00 	lds	r24, 0x00A6
			{
				(void)AudioInterfaceInfo;
			
				Pipe_Write_16_LE(Sample);

				if (!(Pipe_IsReadWriteAllowed()))
     59c:	85 fd       	sbrc	r24, 5
     59e:	10 c0       	rjmp	.+32     	; 0x5c0 <__vector_21+0xbc>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     5a0:	80 91 a9 00 	lds	r24, 0x00A9
     5a4:	8f 7b       	andi	r24, 0xBF	; 191
     5a6:	80 93 a9 00 	sts	0x00A9, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
     5aa:	80 91 a6 00 	lds	r24, 0x00A6
     5ae:	8b 77       	andi	r24, 0x7B	; 123
     5b0:	80 93 a6 00 	sts	0x00A6, r24
				{
					Pipe_Unfreeze();
					Pipe_ClearOUT();
					Pipe_WaitUntilReady();
     5b4:	7b d2       	rcall	.+1270   	; 0xaac <Pipe_WaitUntilReady>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     5b6:	80 91 a9 00 	lds	r24, 0x00A9
     5ba:	80 64       	ori	r24, 0x40	; 64
     5bc:	80 93 a9 00 	sts	0x00A9, r24
			 *  \param[in] Data  Data to write to the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_16_LE(const uint16_t Data)
			{
				UPDATX = (Data & 0xFF);
     5c0:	f0 92 af 00 	sts	0x00AF, r15
				UPDATX = (Data >> 8);
     5c4:	00 93 af 00 	sts	0x00AF, r16
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
     5c8:	80 91 a6 00 	lds	r24, 0x00A6
			{
				(void)AudioInterfaceInfo;
			
				Pipe_Write_16_LE(Sample);

				if (!(Pipe_IsReadWriteAllowed()))
     5cc:	85 fd       	sbrc	r24, 5
     5ce:	10 c0       	rjmp	.+32     	; 0x5f0 <__vector_21+0xec>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     5d0:	80 91 a9 00 	lds	r24, 0x00A9
     5d4:	8f 7b       	andi	r24, 0xBF	; 191
     5d6:	80 93 a9 00 	sts	0x00A9, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
     5da:	80 91 a6 00 	lds	r24, 0x00A6
     5de:	8b 77       	andi	r24, 0x7B	; 123
     5e0:	80 93 a6 00 	sts	0x00A6, r24
				{
					Pipe_Unfreeze();
					Pipe_ClearOUT();
					Pipe_WaitUntilReady();
     5e4:	63 d2       	rcall	.+1222   	; 0xaac <Pipe_WaitUntilReady>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     5e6:	80 91 a9 00 	lds	r24, 0x00A9
     5ea:	80 64       	ori	r24, 0x40	; 64
     5ec:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
     5f0:	17 70       	andi	r17, 0x07	; 7
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     5f2:	10 93 a7 00 	sts	0x00A7, r17
		Audio_Host_WriteSample16(&Speaker_Audio_Interface, AudioSample);	
		Audio_Host_WriteSample16(&Speaker_Audio_Interface, AudioSample);
	}
	
	Pipe_SelectPipe(PrevPipe);
}
     5f6:	ff 91       	pop	r31
     5f8:	ef 91       	pop	r30
     5fa:	bf 91       	pop	r27
     5fc:	af 91       	pop	r26
     5fe:	9f 91       	pop	r25
     600:	8f 91       	pop	r24
     602:	7f 91       	pop	r23
     604:	6f 91       	pop	r22
     606:	5f 91       	pop	r21
     608:	4f 91       	pop	r20
     60a:	3f 91       	pop	r19
     60c:	2f 91       	pop	r18
     60e:	1f 91       	pop	r17
     610:	0f 91       	pop	r16
     612:	ff 90       	pop	r15
     614:	0f 90       	pop	r0
     616:	0b be       	out	0x3b, r0	; 59
     618:	0f 90       	pop	r0
     61a:	0f be       	out	0x3f, r0	; 63
     61c:	0f 90       	pop	r0
     61e:	1f 90       	pop	r1
     620:	18 95       	reti

00000622 <main>:
/** Main program entry point. This routine configures the hardware required by the application, then
 *  enters a loop to run the application tasks in sequence.
 */
int main(void)
{
	SetupHardware();
     622:	1b df       	rcall	.-458    	; 0x45a <SetupHardware>

	puts_P(PSTR(ESC_FG_CYAN "Audio Output Host Demo running.\r\n" ESC_FG_WHITE));
     624:	81 e3       	ldi	r24, 0x31	; 49
     626:	92 e0       	ldi	r25, 0x02	; 2
     628:	2b d7       	rcall	.+3670   	; 0x1480 <puts_P>
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     62a:	8b b1       	in	r24, 0x0b	; 11
     62c:	8f 70       	andi	r24, 0x0F	; 15
     62e:	80 61       	ori	r24, 0x10	; 16
     630:	8b b9       	out	0x0b, r24	; 11

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
	sei();
     632:	78 94       	sei

	for (;;)
	{
		Audio_Host_USBTask(&Speaker_Audio_Interface);
		USB_USBTask();
     634:	86 d5       	rcall	.+2828   	; 0x1142 <USB_USBTask>
     636:	fe cf       	rjmp	.-4      	; 0x634 <main+0x12>

00000638 <USB_Host_WaitMS>:
		USB_ResetInterface();
	}
}

uint8_t USB_Host_WaitMS(uint8_t MS)
{
     638:	98 2f       	mov	r25, r24
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     63a:	20 91 9e 00 	lds	r18, 0x009E
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     63e:	30 91 a0 00 	lds	r19, 0x00A0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     642:	80 91 a0 00 	lds	r24, 0x00A0
     646:	8f 7d       	andi	r24, 0xDF	; 223
     648:	80 93 a0 00 	sts	0x00A0, r24
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     64c:	80 91 9f 00 	lds	r24, 0x009F
     650:	8f 7d       	andi	r24, 0xDF	; 223
     652:	80 93 9f 00 	sts	0x009F, r24
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     656:	80 91 9e 00 	lds	r24, 0x009E
     65a:	81 60       	ori	r24, 0x01	; 1
     65c:	80 93 9e 00 	sts	0x009E, r24
     660:	28 c0       	rjmp	.+80     	; 0x6b2 <USB_Host_WaitMS+0x7a>
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     662:	80 91 9f 00 	lds	r24, 0x009F

	USB_Host_ResumeBus();

	while (MS)
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     666:	85 ff       	sbrs	r24, 5
     668:	06 c0       	rjmp	.+12     	; 0x676 <USB_Host_WaitMS+0x3e>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     66a:	80 91 9f 00 	lds	r24, 0x009F
     66e:	8f 7d       	andi	r24, 0xDF	; 223
     670:	80 93 9f 00 	sts	0x009F, r24
		{
			USB_INT_Clear(USB_INT_HSOFI);
			MS--;
     674:	91 50       	subi	r25, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
     676:	80 91 2e 01 	lds	r24, 0x012E
     67a:	81 30       	cpi	r24, 0x01	; 1
     67c:	11 f4       	brne	.+4      	; 0x682 <USB_Host_WaitMS+0x4a>
     67e:	91 e0       	ldi	r25, 0x01	; 1
     680:	1a c0       	rjmp	.+52     	; 0x6b6 <USB_Host_WaitMS+0x7e>
			 *  \return Boolean \c true if an error has occurred on the selected pipe, \c false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
     682:	80 91 a6 00 	lds	r24, 0x00A6
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError() == true)
     686:	84 ff       	sbrs	r24, 4
     688:	09 c0       	rjmp	.+18     	; 0x69c <USB_Host_WaitMS+0x64>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     68a:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
     68e:	80 91 a6 00 	lds	r24, 0x00A6
     692:	8f 7e       	andi	r24, 0xEF	; 239
     694:	80 93 a6 00 	sts	0x00A6, r24
     698:	92 e0       	ldi	r25, 0x02	; 2
     69a:	0d c0       	rjmp	.+26     	; 0x6b6 <USB_Host_WaitMS+0x7e>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     69c:	80 91 a6 00 	lds	r24, 0x00A6
			ErrorCode = HOST_WAITERROR_PipeError;

			break;
		}

		if (Pipe_IsStalled() == true)
     6a0:	81 ff       	sbrs	r24, 1
     6a2:	07 c0       	rjmp	.+14     	; 0x6b2 <USB_Host_WaitMS+0x7a>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
     6a4:	80 91 a6 00 	lds	r24, 0x00A6
     6a8:	8d 7f       	andi	r24, 0xFD	; 253
     6aa:	80 93 a6 00 	sts	0x00A6, r24
     6ae:	93 e0       	ldi	r25, 0x03	; 3
     6b0:	02 c0       	rjmp	.+4      	; 0x6b6 <USB_Host_WaitMS+0x7e>
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     6b2:	99 23       	and	r25, r25
     6b4:	b1 f6       	brne	.-84     	; 0x662 <USB_Host_WaitMS+0x2a>

			break;
		}
	}

	if (BusSuspended)
     6b6:	20 fd       	sbrc	r18, 0
     6b8:	05 c0       	rjmp	.+10     	; 0x6c4 <USB_Host_WaitMS+0x8c>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     6ba:	80 91 9e 00 	lds	r24, 0x009E
     6be:	8e 7f       	andi	r24, 0xFE	; 254
     6c0:	80 93 9e 00 	sts	0x009E, r24
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
     6c4:	35 ff       	sbrs	r19, 5
     6c6:	05 c0       	rjmp	.+10     	; 0x6d2 <USB_Host_WaitMS+0x9a>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     6c8:	80 91 a0 00 	lds	r24, 0x00A0
     6cc:	80 62       	ori	r24, 0x20	; 32
     6ce:	80 93 a0 00 	sts	0x00A0, r24
	  USB_INT_Enable(USB_INT_HSOFI);

	return ErrorCode;
}
     6d2:	89 2f       	mov	r24, r25
     6d4:	08 95       	ret

000006d6 <USB_Host_ResetDevice>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     6d6:	60 91 9e 00 	lds	r22, 0x009E
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     6da:	80 91 a0 00 	lds	r24, 0x00A0
     6de:	8d 7f       	andi	r24, 0xFD	; 253
     6e0:	80 93 a0 00 	sts	0x00A0, r24
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
     6e4:	80 91 9e 00 	lds	r24, 0x009E
     6e8:	82 60       	ori	r24, 0x02	; 2
     6ea:	80 93 9e 00 	sts	0x009E, r24
			 *  \return Boolean \c true if no bus reset is currently being sent, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
     6ee:	80 91 9e 00 	lds	r24, 0x009E
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
     6f2:	81 fd       	sbrc	r24, 1
     6f4:	fc cf       	rjmp	.-8      	; 0x6ee <USB_Host_ResetDevice+0x18>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     6f6:	80 91 9e 00 	lds	r24, 0x009E
     6fa:	81 60       	ori	r24, 0x01	; 1
     6fc:	80 93 9e 00 	sts	0x009E, r24
	USB_Host_ResumeBus();
	
	USB_Host_ConfigurationNumber = 0;
     700:	10 92 24 01 	sts	0x0124, r1
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     704:	30 91 a0 00 	lds	r19, 0x00A0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     708:	80 91 a0 00 	lds	r24, 0x00A0
     70c:	8f 7d       	andi	r24, 0xDF	; 223
     70e:	80 93 a0 00 	sts	0x00A0, r24
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     712:	80 91 9f 00 	lds	r24, 0x009F
     716:	8f 7d       	andi	r24, 0xDF	; 223
     718:	80 93 9f 00 	sts	0x009F, r24
     71c:	2a e0       	ldi	r18, 0x0A	; 10
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     71e:	40 ed       	ldi	r20, 0xD0	; 208
     720:	57 e0       	ldi	r21, 0x07	; 7
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     722:	80 91 9f 00 	lds	r24, 0x009F
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     726:	85 ff       	sbrs	r24, 5
     728:	0b c0       	rjmp	.+22     	; 0x740 <USB_Host_ResetDevice+0x6a>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     72a:	80 91 9f 00 	lds	r24, 0x009F
     72e:	8f 7d       	andi	r24, 0xDF	; 223
     730:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     734:	80 91 9f 00 	lds	r24, 0x009F
     738:	8d 7f       	andi	r24, 0xFD	; 253
     73a:	80 93 9f 00 	sts	0x009F, r24
     73e:	05 c0       	rjmp	.+10     	; 0x74a <USB_Host_ResetDevice+0x74>
     740:	ca 01       	movw	r24, r20
     742:	01 97       	sbiw	r24, 0x01	; 1
     744:	f1 f7       	brne	.-4      	; 0x742 <USB_Host_ResetDevice+0x6c>
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
     746:	21 50       	subi	r18, 0x01	; 1
     748:	61 f7       	brne	.-40     	; 0x722 <USB_Host_ResetDevice+0x4c>
		}

		Delay_MS(1);
	}

	if (HSOFIEnabled)
     74a:	35 ff       	sbrs	r19, 5
     74c:	05 c0       	rjmp	.+10     	; 0x758 <USB_Host_ResetDevice+0x82>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     74e:	80 91 a0 00 	lds	r24, 0x00A0
     752:	80 62       	ori	r24, 0x20	; 32
     754:	80 93 a0 00 	sts	0x00A0, r24
	  USB_INT_Enable(USB_INT_HSOFI);

	if (BusSuspended)
     758:	60 fd       	sbrc	r22, 0
     75a:	05 c0       	rjmp	.+10     	; 0x766 <USB_Host_ResetDevice+0x90>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     75c:	80 91 9e 00 	lds	r24, 0x009E
     760:	8e 7f       	andi	r24, 0xFE	; 254
     762:	80 93 9e 00 	sts	0x009E, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     766:	80 91 a0 00 	lds	r24, 0x00A0
     76a:	82 60       	ori	r24, 0x02	; 2
     76c:	80 93 a0 00 	sts	0x00A0, r24
	  USB_Host_SuspendBus();

	USB_INT_Enable(USB_INT_DDISCI);
}
     770:	08 95       	ret

00000772 <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "../Host.h"

void USB_Host_ProcessNextHostState(void)
{
     772:	ef 92       	push	r14
     774:	0f 93       	push	r16
     776:	1f 93       	push	r17
     778:	df 93       	push	r29
     77a:	cf 93       	push	r28
     77c:	cd b7       	in	r28, 0x3d	; 61
     77e:	de b7       	in	r29, 0x3e	; 62
     780:	28 97       	sbiw	r28, 0x08	; 8
     782:	0f b6       	in	r0, 0x3f	; 63
     784:	f8 94       	cli
     786:	de bf       	out	0x3e, r29	; 62
     788:	0f be       	out	0x3f, r0	; 63
     78a:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
     78c:	80 91 2e 01 	lds	r24, 0x012E
     790:	85 30       	cpi	r24, 0x05	; 5
     792:	09 f4       	brne	.+2      	; 0x796 <USB_Host_ProcessNextHostState+0x24>
     794:	94 c0       	rjmp	.+296    	; 0x8be <USB_Host_ProcessNextHostState+0x14c>
     796:	86 30       	cpi	r24, 0x06	; 6
     798:	68 f4       	brcc	.+26     	; 0x7b4 <USB_Host_ProcessNextHostState+0x42>
     79a:	82 30       	cpi	r24, 0x02	; 2
     79c:	b9 f1       	breq	.+110    	; 0x80c <USB_Host_ProcessNextHostState+0x9a>
     79e:	83 30       	cpi	r24, 0x03	; 3
     7a0:	18 f4       	brcc	.+6      	; 0x7a8 <USB_Host_ProcessNextHostState+0x36>
     7a2:	88 23       	and	r24, r24
     7a4:	a1 f0       	breq	.+40     	; 0x7ce <USB_Host_ProcessNextHostState+0x5c>
     7a6:	04 c1       	rjmp	.+520    	; 0x9b0 <USB_Host_ProcessNextHostState+0x23e>
     7a8:	83 30       	cpi	r24, 0x03	; 3
     7aa:	d1 f1       	breq	.+116    	; 0x820 <USB_Host_ProcessNextHostState+0xae>
     7ac:	84 30       	cpi	r24, 0x04	; 4
     7ae:	09 f0       	breq	.+2      	; 0x7b2 <USB_Host_ProcessNextHostState+0x40>
     7b0:	ff c0       	rjmp	.+510    	; 0x9b0 <USB_Host_ProcessNextHostState+0x23e>
     7b2:	5d c0       	rjmp	.+186    	; 0x86e <USB_Host_ProcessNextHostState+0xfc>
     7b4:	87 30       	cpi	r24, 0x07	; 7
     7b6:	09 f4       	brne	.+2      	; 0x7ba <USB_Host_ProcessNextHostState+0x48>
     7b8:	9b c0       	rjmp	.+310    	; 0x8f0 <USB_Host_ProcessNextHostState+0x17e>
     7ba:	87 30       	cpi	r24, 0x07	; 7
     7bc:	08 f4       	brcc	.+2      	; 0x7c0 <USB_Host_ProcessNextHostState+0x4e>
     7be:	8a c0       	rjmp	.+276    	; 0x8d4 <USB_Host_ProcessNextHostState+0x162>
     7c0:	88 30       	cpi	r24, 0x08	; 8
     7c2:	09 f4       	brne	.+2      	; 0x7c6 <USB_Host_ProcessNextHostState+0x54>
     7c4:	b3 c0       	rjmp	.+358    	; 0x92c <USB_Host_ProcessNextHostState+0x1ba>
     7c6:	89 30       	cpi	r24, 0x09	; 9
     7c8:	09 f0       	breq	.+2      	; 0x7cc <USB_Host_ProcessNextHostState+0x5a>
     7ca:	f2 c0       	rjmp	.+484    	; 0x9b0 <USB_Host_ProcessNextHostState+0x23e>
     7cc:	d7 c0       	rjmp	.+430    	; 0x97c <USB_Host_ProcessNextHostState+0x20a>
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
     7ce:	00 91 22 01 	lds	r16, 0x0122
     7d2:	10 91 23 01 	lds	r17, 0x0123
     7d6:	01 15       	cp	r16, r1
     7d8:	11 05       	cpc	r17, r1
     7da:	09 f4       	brne	.+2      	; 0x7de <USB_Host_ProcessNextHostState+0x6c>
     7dc:	e9 c0       	rjmp	.+466    	; 0x9b0 <USB_Host_ProcessNextHostState+0x23e>
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     7de:	81 e0       	ldi	r24, 0x01	; 1
     7e0:	2b df       	rcall	.-426    	; 0x638 <USB_Host_WaitMS>
     7e2:	68 2f       	mov	r22, r24
     7e4:	88 23       	and	r24, r24
     7e6:	31 f0       	breq	.+12     	; 0x7f4 <USB_Host_ProcessNextHostState+0x82>
				{
					USB_HostState = PostWaitState;
     7e8:	80 91 21 01 	lds	r24, 0x0121
     7ec:	80 93 2e 01 	sts	0x012E, r24
     7f0:	91 e0       	ldi	r25, 0x01	; 1
     7f2:	da c0       	rjmp	.+436    	; 0x9a8 <USB_Host_ProcessNextHostState+0x236>
					ErrorCode     = HOST_ENUMERROR_WaitStage;
					break;
				}

				if (!(--WaitMSRemaining))
     7f4:	c8 01       	movw	r24, r16
     7f6:	01 97       	sbiw	r24, 0x01	; 1
     7f8:	90 93 23 01 	sts	0x0123, r25
     7fc:	80 93 22 01 	sts	0x0122, r24
     800:	89 2b       	or	r24, r25
     802:	09 f0       	breq	.+2      	; 0x806 <USB_Host_ProcessNextHostState+0x94>
     804:	d5 c0       	rjmp	.+426    	; 0x9b0 <USB_Host_ProcessNextHostState+0x23e>
				  USB_HostState = PostWaitState;
     806:	80 91 21 01 	lds	r24, 0x0121
     80a:	07 c0       	rjmp	.+14     	; 0x81a <USB_Host_ProcessNextHostState+0xa8>
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
     80c:	88 ee       	ldi	r24, 0xE8	; 232
     80e:	93 e0       	ldi	r25, 0x03	; 3
     810:	90 93 23 01 	sts	0x0123, r25
     814:	80 93 22 01 	sts	0x0122, r24

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
     818:	83 e0       	ldi	r24, 0x03	; 3
     81a:	80 93 2e 01 	sts	0x012E, r24
     81e:	c8 c0       	rjmp	.+400    	; 0x9b0 <USB_Host_ProcessNextHostState+0x23e>
			break;
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
     820:	80 91 22 01 	lds	r24, 0x0122
     824:	90 91 23 01 	lds	r25, 0x0123
     828:	01 97       	sbiw	r24, 0x01	; 1
     82a:	90 93 23 01 	sts	0x0123, r25
     82e:	80 93 22 01 	sts	0x0122, r24
     832:	01 96       	adiw	r24, 0x01	; 1
     834:	29 f0       	breq	.+10     	; 0x840 <USB_Host_ProcessNextHostState+0xce>
     836:	80 ed       	ldi	r24, 0xD0	; 208
     838:	97 e0       	ldi	r25, 0x07	; 7
     83a:	01 97       	sbiw	r24, 0x01	; 1
     83c:	f1 f7       	brne	.-4      	; 0x83a <USB_Host_ProcessNextHostState+0xc8>
     83e:	b8 c0       	rjmp	.+368    	; 0x9b0 <USB_Host_ProcessNextHostState+0x23e>
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
     840:	77 98       	cbi	0x0e, 7	; 14

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     842:	80 91 d8 00 	lds	r24, 0x00D8
     846:	80 61       	ori	r24, 0x10	; 16
     848:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
     84c:	80 91 dd 00 	lds	r24, 0x00DD
     850:	8b 7f       	andi	r24, 0xFB	; 251
     852:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON |=  (1 << UVCONE);
     856:	80 91 d7 00 	lds	r24, 0x00D7
     85a:	80 61       	ori	r24, 0x10	; 16
     85c:	80 93 d7 00 	sts	0x00D7, r24
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
     860:	80 91 dd 00 	lds	r24, 0x00DD
     864:	82 60       	ori	r24, 0x02	; 2
     866:	80 93 dd 00 	sts	0x00DD, r24

				USB_OTGPAD_On();
				USB_Host_VBUS_Auto_Enable();
				USB_Host_VBUS_Auto_On();

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
     86a:	84 e0       	ldi	r24, 0x04	; 4
     86c:	d6 cf       	rjmp	.-84     	; 0x81a <USB_Host_ProcessNextHostState+0xa8>
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
     86e:	80 91 9f 00 	lds	r24, 0x009F
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
     872:	80 ff       	sbrs	r24, 0
     874:	9d c0       	rjmp	.+314    	; 0x9b0 <USB_Host_ProcessNextHostState+0x23e>
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     876:	80 91 9f 00 	lds	r24, 0x009F
     87a:	8e 7f       	andi	r24, 0xFE	; 254
     87c:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     880:	80 91 9f 00 	lds	r24, 0x009F
     884:	8d 7f       	andi	r24, 0xFD	; 253
     886:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     88a:	80 91 df 00 	lds	r24, 0x00DF
     88e:	8d 7f       	andi	r24, 0xFD	; 253
     890:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
     894:	80 91 de 00 	lds	r24, 0x00DE
     898:	82 60       	ori	r24, 0x02	; 2
     89a:	80 93 de 00 	sts	0x00DE, r24
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     89e:	80 91 9e 00 	lds	r24, 0x009E
     8a2:	81 60       	ori	r24, 0x01	; 1
     8a4:	80 93 9e 00 	sts	0x009E, r24

				USB_INT_Clear(USB_INT_VBERRI);
				USB_INT_Enable(USB_INT_VBERRI);

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
     8a8:	ed d0       	rcall	.+474    	; 0xa84 <Pipe_ClearPipes>

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
     8aa:	10 92 2e 01 	sts	0x012E, r1
     8ae:	84 e6       	ldi	r24, 0x64	; 100
     8b0:	90 e0       	ldi	r25, 0x00	; 0
     8b2:	90 93 23 01 	sts	0x0123, r25
     8b6:	80 93 22 01 	sts	0x0122, r24
     8ba:	85 e0       	ldi	r24, 0x05	; 5
     8bc:	5c c0       	rjmp	.+184    	; 0x976 <USB_Host_ProcessNextHostState+0x204>
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
     8be:	0b df       	rcall	.-490    	; 0x6d6 <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
     8c0:	10 92 2e 01 	sts	0x012E, r1
     8c4:	88 ec       	ldi	r24, 0xC8	; 200
     8c6:	90 e0       	ldi	r25, 0x00	; 0
     8c8:	90 93 23 01 	sts	0x0123, r25
     8cc:	80 93 22 01 	sts	0x0122, r24
     8d0:	86 e0       	ldi	r24, 0x06	; 6
     8d2:	51 c0       	rjmp	.+162    	; 0x976 <USB_Host_ProcessNextHostState+0x204>
			break;
		case HOST_STATE_Powered_ConfigPipe:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
     8d4:	80 e0       	ldi	r24, 0x00	; 0
     8d6:	60 e0       	ldi	r22, 0x00	; 0
     8d8:	40 e0       	ldi	r20, 0x00	; 0
     8da:	20 e0       	ldi	r18, 0x00	; 0
     8dc:	00 e4       	ldi	r16, 0x40	; 64
     8de:	10 e0       	ldi	r17, 0x00	; 0
     8e0:	ee 24       	eor	r14, r14
     8e2:	72 d0       	rcall	.+228    	; 0x9c8 <Pipe_ConfigurePipe>
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     8e4:	80 91 ac 00 	lds	r24, 0x00AC
							   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
							   PIPE_CONTROLPIPE_DEFAULT_SIZE, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
     8e8:	87 ff       	sbrs	r24, 7
     8ea:	5c c0       	rjmp	.+184    	; 0x9a4 <USB_Host_ProcessNextHostState+0x232>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
     8ec:	87 e0       	ldi	r24, 0x07	; 7
     8ee:	95 cf       	rjmp	.-214    	; 0x81a <USB_Host_ProcessNextHostState+0xa8>
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
     8f0:	a6 e2       	ldi	r26, 0x26	; 38
     8f2:	b1 e0       	ldi	r27, 0x01	; 1
     8f4:	e5 e1       	ldi	r30, 0x15	; 21
     8f6:	f1 e0       	ldi	r31, 0x01	; 1
     8f8:	88 e0       	ldi	r24, 0x08	; 8
     8fa:	01 90       	ld	r0, Z+
     8fc:	0d 92       	st	X+, r0
     8fe:	81 50       	subi	r24, 0x01	; 1
     900:	e1 f7       	brne	.-8      	; 0x8fa <USB_Host_ProcessNextHostState+0x188>
					.wLength       = 8,
				};

			uint8_t DataBuffer[8];

			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
     902:	ce 01       	movw	r24, r28
     904:	01 96       	adiw	r24, 0x01	; 1
     906:	da d2       	rcall	.+1460   	; 0xebc <USB_Host_SendControlRequest>
     908:	68 2f       	mov	r22, r24
     90a:	88 23       	and	r24, r24
     90c:	09 f0       	breq	.+2      	; 0x910 <USB_Host_ProcessNextHostState+0x19e>
     90e:	48 c0       	rjmp	.+144    	; 0x9a0 <USB_Host_ProcessNextHostState+0x22e>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_Host_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
     910:	88 85       	ldd	r24, Y+8	; 0x08
     912:	80 93 1d 01 	sts	0x011D, r24

			USB_Host_ResetDevice();
     916:	df de       	rcall	.-578    	; 0x6d6 <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
     918:	10 92 2e 01 	sts	0x012E, r1
     91c:	88 ec       	ldi	r24, 0xC8	; 200
     91e:	90 e0       	ldi	r25, 0x00	; 0
     920:	90 93 23 01 	sts	0x0123, r25
     924:	80 93 22 01 	sts	0x0122, r24
     928:	88 e0       	ldi	r24, 0x08	; 8
     92a:	25 c0       	rjmp	.+74     	; 0x976 <USB_Host_ProcessNextHostState+0x204>
			break;
		case HOST_STATE_Default_PostReset:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
     92c:	00 91 1d 01 	lds	r16, 0x011D
     930:	80 e0       	ldi	r24, 0x00	; 0
     932:	60 e0       	ldi	r22, 0x00	; 0
     934:	40 e0       	ldi	r20, 0x00	; 0
     936:	20 e0       	ldi	r18, 0x00	; 0
     938:	10 e0       	ldi	r17, 0x00	; 0
     93a:	ee 24       	eor	r14, r14
     93c:	45 d0       	rcall	.+138    	; 0x9c8 <Pipe_ConfigurePipe>
     93e:	80 91 ac 00 	lds	r24, 0x00AC
			                   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
			                   USB_Host_ControlPipeSize, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
     942:	87 ff       	sbrs	r24, 7
     944:	2f c0       	rjmp	.+94     	; 0x9a4 <USB_Host_ProcessNextHostState+0x232>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
     946:	a6 e2       	ldi	r26, 0x26	; 38
     948:	b1 e0       	ldi	r27, 0x01	; 1
     94a:	ed e0       	ldi	r30, 0x0D	; 13
     94c:	f1 e0       	ldi	r31, 0x01	; 1
     94e:	88 e0       	ldi	r24, 0x08	; 8
     950:	01 90       	ld	r0, Z+
     952:	0d 92       	st	X+, r0
     954:	81 50       	subi	r24, 0x01	; 1
     956:	e1 f7       	brne	.-8      	; 0x950 <USB_Host_ProcessNextHostState+0x1de>
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
     958:	80 e0       	ldi	r24, 0x00	; 0
     95a:	90 e0       	ldi	r25, 0x00	; 0
     95c:	af d2       	rcall	.+1374   	; 0xebc <USB_Host_SendControlRequest>
     95e:	68 2f       	mov	r22, r24
     960:	88 23       	and	r24, r24
     962:	f1 f4       	brne	.+60     	; 0x9a0 <USB_Host_ProcessNextHostState+0x22e>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
     964:	10 92 2e 01 	sts	0x012E, r1
     968:	84 e6       	ldi	r24, 0x64	; 100
     96a:	90 e0       	ldi	r25, 0x00	; 0
     96c:	90 93 23 01 	sts	0x0123, r25
     970:	80 93 22 01 	sts	0x0122, r24
     974:	89 e0       	ldi	r24, 0x09	; 9
     976:	80 93 21 01 	sts	0x0121, r24
     97a:	1a c0       	rjmp	.+52     	; 0x9b0 <USB_Host_ProcessNextHostState+0x23e>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
     97c:	81 e0       	ldi	r24, 0x01	; 1
     97e:	80 93 a1 00 	sts	0x00A1, r24
			break;
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			USB_HostState = HOST_STATE_Addressed;
     982:	8a e0       	ldi	r24, 0x0A	; 10
     984:	80 93 2e 01 	sts	0x012E, r24

			EVENT_USB_Host_DeviceEnumerationComplete();
     988:	e4 dc       	rcall	.-1592   	; 0x352 <EVENT_USB_Host_DeviceEnumerationComplete>
     98a:	12 c0       	rjmp	.+36     	; 0x9b0 <USB_Host_ProcessNextHostState+0x23e>
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
     98c:	89 2f       	mov	r24, r25
     98e:	86 dc       	rcall	.-1780   	; 0x29c <EVENT_USB_Host_DeviceEnumerationFailed>
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     990:	80 91 dd 00 	lds	r24, 0x00DD
     994:	81 60       	ori	r24, 0x01	; 1
     996:	80 93 dd 00 	sts	0x00DD, r24

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
     99a:	c9 dc       	rcall	.-1646   	; 0x32e <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     99c:	b6 d0       	rcall	.+364    	; 0xb0a <USB_ResetInterface>
     99e:	08 c0       	rjmp	.+16     	; 0x9b0 <USB_Host_ProcessNextHostState+0x23e>
	}
}
     9a0:	93 e0       	ldi	r25, 0x03	; 3
     9a2:	02 c0       	rjmp	.+4      	; 0x9a8 <USB_Host_ProcessNextHostState+0x236>
     9a4:	94 e0       	ldi	r25, 0x04	; 4
     9a6:	60 e0       	ldi	r22, 0x00	; 0

			EVENT_USB_Host_DeviceEnumerationComplete();
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
     9a8:	80 91 2e 01 	lds	r24, 0x012E
     9ac:	81 30       	cpi	r24, 0x01	; 1
     9ae:	71 f7       	brne	.-36     	; 0x98c <USB_Host_ProcessNextHostState+0x21a>

		EVENT_USB_Host_DeviceUnattached();

		USB_ResetInterface();
	}
}
     9b0:	28 96       	adiw	r28, 0x08	; 8
     9b2:	0f b6       	in	r0, 0x3f	; 63
     9b4:	f8 94       	cli
     9b6:	de bf       	out	0x3e, r29	; 62
     9b8:	0f be       	out	0x3f, r0	; 63
     9ba:	cd bf       	out	0x3d, r28	; 61
     9bc:	cf 91       	pop	r28
     9be:	df 91       	pop	r29
     9c0:	1f 91       	pop	r17
     9c2:	0f 91       	pop	r16
     9c4:	ef 90       	pop	r14
     9c6:	08 95       	ret

000009c8 <Pipe_ConfigurePipe>:
                        const uint8_t Type,
                        const uint8_t Token,
                        const uint8_t EndpointNumber,
                        const uint16_t Size,
                        const uint8_t Banks)
{
     9c8:	ef 92       	push	r14
     9ca:	0f 93       	push	r16
     9cc:	1f 93       	push	r17
     9ce:	e8 2f       	mov	r30, r24
     9d0:	7e 2d       	mov	r23, r14

		Pipe_SelectPipe(PNum);
		
		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
     9d2:	62 95       	swap	r22
     9d4:	66 0f       	add	r22, r22
     9d6:	66 0f       	add	r22, r22
     9d8:	60 7c       	andi	r22, 0xC0	; 192
     9da:	64 2b       	or	r22, r20
     9dc:	2f 70       	andi	r18, 0x0F	; 15
     9de:	62 2b       	or	r22, r18
     9e0:	38 2f       	mov	r19, r24
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     9e2:	72 60       	ori	r23, 0x02	; 2
     9e4:	45 c0       	rjmp	.+138    	; 0xa70 <Pipe_ConfigurePipe+0xa8>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     9e6:	30 93 a7 00 	sts	0x00A7, r19
		uint8_t UPCFG2XTemp;
		uint8_t UPIENXTemp;

		Pipe_SelectPipe(PNum);
		
		if (PNum == Number)
     9ea:	3e 17       	cp	r19, r30
     9ec:	a1 f4       	brne	.+40     	; 0xa16 <Pipe_ConfigurePipe+0x4e>
     9ee:	88 e0       	ldi	r24, 0x08	; 8
     9f0:	90 e0       	ldi	r25, 0x00	; 0
     9f2:	20 e0       	ldi	r18, 0x00	; 0
     9f4:	03 c0       	rjmp	.+6      	; 0x9fc <Pipe_ConfigurePipe+0x34>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
				{
					MaskVal++;
     9f6:	2f 5f       	subi	r18, 0xFF	; 255
					CheckBytes <<= 1;
     9f8:	88 0f       	add	r24, r24
     9fa:	99 1f       	adc	r25, r25
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
     9fc:	80 17       	cp	r24, r16
     9fe:	91 07       	cpc	r25, r17
     a00:	10 f4       	brcc	.+4      	; 0xa06 <Pipe_ConfigurePipe+0x3e>
     a02:	25 30       	cpi	r18, 0x05	; 5
     a04:	c1 f7       	brne	.-16     	; 0x9f6 <Pipe_ConfigurePipe+0x2e>
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     a06:	92 2f       	mov	r25, r18
     a08:	92 95       	swap	r25
     a0a:	90 7f       	andi	r25, 0xF0	; 240
     a0c:	97 2b       	or	r25, r23
     a0e:	56 2f       	mov	r21, r22
     a10:	40 e0       	ldi	r20, 0x00	; 0
     a12:	20 e0       	ldi	r18, 0x00	; 0
     a14:	08 c0       	rjmp	.+16     	; 0xa26 <Pipe_ConfigurePipe+0x5e>
			UPCFG2XTemp = 0;
			UPIENXTemp  = 0;
		}
		else
		{
			UPCFG0XTemp = UPCFG0X;
     a16:	50 91 aa 00 	lds	r21, 0x00AA
			UPCFG1XTemp = UPCFG1X;
     a1a:	90 91 ab 00 	lds	r25, 0x00AB
			UPCFG2XTemp = UPCFG2X;
     a1e:	40 91 ad 00 	lds	r20, 0x00AD
			UPIENXTemp  = UPIENX;
     a22:	20 91 ae 00 	lds	r18, 0x00AE
		}

		if (!(UPCFG1XTemp & (1 << ALLOC)))
     a26:	91 ff       	sbrs	r25, 1
     a28:	22 c0       	rjmp	.+68     	; 0xa6e <Pipe_ConfigurePipe+0xa6>
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     a2a:	80 91 a9 00 	lds	r24, 0x00A9
     a2e:	8e 7f       	andi	r24, 0xFE	; 254
     a30:	80 93 a9 00 	sts	0x00A9, r24
		  continue;
		  
		Pipe_DisablePipe();
		UPCFG1X &= ~(1 << ALLOC);
     a34:	80 91 ab 00 	lds	r24, 0x00AB
     a38:	8d 7f       	andi	r24, 0xFD	; 253
     a3a:	80 93 ab 00 	sts	0x00AB, r24
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
     a3e:	80 91 a9 00 	lds	r24, 0x00A9
     a42:	81 60       	ori	r24, 0x01	; 1
     a44:	80 93 a9 00 	sts	0x00A9, r24

		Pipe_EnablePipe();
		UPCFG0X = UPCFG0XTemp;
     a48:	50 93 aa 00 	sts	0x00AA, r21
		UPCFG1X = UPCFG1XTemp;
     a4c:	90 93 ab 00 	sts	0x00AB, r25
		UPCFG2X = UPCFG2XTemp;
     a50:	40 93 ad 00 	sts	0x00AD, r20
		UPIENX  = UPIENXTemp;
     a54:	20 93 ae 00 	sts	0x00AE, r18

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
     a58:	80 91 a9 00 	lds	r24, 0x00A9
     a5c:	80 62       	ori	r24, 0x20	; 32
     a5e:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     a62:	80 91 ac 00 	lds	r24, 0x00AC

		Pipe_SetInfiniteINRequests();
	
		if (!(Pipe_IsConfigured()))
     a66:	87 fd       	sbrc	r24, 7
     a68:	02 c0       	rjmp	.+4      	; 0xa6e <Pipe_ConfigurePipe+0xa6>
     a6a:	80 e0       	ldi	r24, 0x00	; 0
     a6c:	07 c0       	rjmp	.+14     	; 0xa7c <Pipe_ConfigurePipe+0xb4>

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else	
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
     a6e:	3f 5f       	subi	r19, 0xFF	; 255
     a70:	37 30       	cpi	r19, 0x07	; 7
     a72:	08 f4       	brcc	.+2      	; 0xa76 <Pipe_ConfigurePipe+0xae>
     a74:	b8 cf       	rjmp	.-144    	; 0x9e6 <Pipe_ConfigurePipe+0x1e>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     a76:	e0 93 a7 00 	sts	0x00A7, r30
     a7a:	81 e0       	ldi	r24, 0x01	; 1
	}
		
	Pipe_SelectPipe(Number);	
	return true;
#endif
}
     a7c:	1f 91       	pop	r17
     a7e:	0f 91       	pop	r16
     a80:	ef 90       	pop	r14
     a82:	08 95       	ret

00000a84 <Pipe_ClearPipes>:

void Pipe_ClearPipes(void)
{
	UPINT = 0;
     a84:	10 92 f8 00 	sts	0x00F8, r1
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	90 93 a7 00 	sts	0x00A7, r25

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
     a8e:	10 92 ae 00 	sts	0x00AE, r1
		UPINTX  = 0;
     a92:	10 92 a6 00 	sts	0x00A6, r1
		UPCFG1X = 0;
     a96:	10 92 ab 00 	sts	0x00AB, r1
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     a9a:	80 91 a9 00 	lds	r24, 0x00A9
     a9e:	8e 7f       	andi	r24, 0xFE	; 254
     aa0:	80 93 a9 00 	sts	0x00A9, r24

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     aa4:	9f 5f       	subi	r25, 0xFF	; 255
     aa6:	97 30       	cpi	r25, 0x07	; 7
     aa8:	81 f7       	brne	.-32     	; 0xa8a <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
     aaa:	08 95       	ret

00000aac <Pipe_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
     aac:	40 91 a2 00 	lds	r20, 0x00A2
     ab0:	50 91 a3 00 	lds	r21, 0x00A3
     ab4:	24 e6       	ldi	r18, 0x64	; 100
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
     ab6:	80 91 aa 00 	lds	r24, 0x00AA

	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
     aba:	80 73       	andi	r24, 0x30	; 48
     abc:	80 31       	cpi	r24, 0x10	; 16
     abe:	29 f4       	brne	.+10     	; 0xaca <Pipe_WaitUntilReady+0x1e>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     ac0:	80 91 a6 00 	lds	r24, 0x00A6
		{
			if (Pipe_IsINReceived())
     ac4:	80 ff       	sbrs	r24, 0
     ac6:	05 c0       	rjmp	.+10     	; 0xad2 <Pipe_WaitUntilReady+0x26>
     ac8:	1e c0       	rjmp	.+60     	; 0xb06 <Pipe_WaitUntilReady+0x5a>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     aca:	80 91 a6 00 	lds	r24, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
     ace:	82 fd       	sbrc	r24, 2
     ad0:	1a c0       	rjmp	.+52     	; 0xb06 <Pipe_WaitUntilReady+0x5a>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     ad2:	80 91 a6 00 	lds	r24, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
     ad6:	81 ff       	sbrs	r24, 1
     ad8:	02 c0       	rjmp	.+4      	; 0xade <Pipe_WaitUntilReady+0x32>
     ada:	81 e0       	ldi	r24, 0x01	; 1
     adc:	08 95       	ret
		  return PIPE_READYWAIT_PipeStalled;
		else if (USB_HostState == HOST_STATE_Unattached)
     ade:	80 91 2e 01 	lds	r24, 0x012E
     ae2:	81 30       	cpi	r24, 0x01	; 1
     ae4:	11 f4       	brne	.+4      	; 0xaea <Pipe_WaitUntilReady+0x3e>
     ae6:	82 e0       	ldi	r24, 0x02	; 2
     ae8:	08 95       	ret
     aea:	80 91 a2 00 	lds	r24, 0x00A2
     aee:	90 91 a3 00 	lds	r25, 0x00A3
		  return PIPE_READYWAIT_DeviceDisconnected;

		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     af2:	84 17       	cp	r24, r20
     af4:	95 07       	cpc	r25, r21
     af6:	f9 f2       	breq	.-66     	; 0xab6 <Pipe_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     af8:	22 23       	and	r18, r18
     afa:	11 f4       	brne	.+4      	; 0xb00 <Pipe_WaitUntilReady+0x54>
     afc:	83 e0       	ldi	r24, 0x03	; 3
     afe:	08 95       	ret
     b00:	21 50       	subi	r18, 0x01	; 1
     b02:	ac 01       	movw	r20, r24
     b04:	d8 cf       	rjmp	.-80     	; 0xab6 <Pipe_WaitUntilReady+0xa>
     b06:	80 e0       	ldi	r24, 0x00	; 0
			  return PIPE_READYWAIT_Timeout;
		}
	}
}
     b08:	08 95       	ret

00000b0a <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     b0a:	70 d0       	rcall	.+224    	; 0xbec <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     b0c:	77 d0       	rcall	.+238    	; 0xbfc <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     b0e:	80 91 d8 00 	lds	r24, 0x00D8
     b12:	8f 77       	andi	r24, 0x7F	; 127
     b14:	80 93 d8 00 	sts	0x00D8, r24
				USBCON |=  (1 << USBE);
     b18:	80 91 d8 00 	lds	r24, 0x00D8
     b1c:	80 68       	ori	r24, 0x80	; 128
     b1e:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
     b22:	80 91 d8 00 	lds	r24, 0x00D8
     b26:	8f 7d       	andi	r24, 0xDF	; 223
     b28:	80 93 d8 00 	sts	0x00D8, r24
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
     b2c:	80 91 d7 00 	lds	r24, 0x00D7
     b30:	8f 77       	andi	r24, 0x7F	; 127
     b32:	80 93 d7 00 	sts	0x00D7, r24

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     b36:	8c e0       	ldi	r24, 0x0C	; 12
     b38:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     b3a:	8e e0       	ldi	r24, 0x0E	; 14
     b3c:	89 bd       	out	0x29, r24	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_CAN_BE_HOST)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));		
     b3e:	09 b4       	in	r0, 0x29	; 41
     b40:	00 fe       	sbrs	r0, 0
     b42:	fd cf       	rjmp	.-6      	; 0xb3e <USB_ResetInterface+0x34>
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState                = HOST_STATE_Unattached;
     b44:	81 e0       	ldi	r24, 0x01	; 1
     b46:	80 93 2e 01 	sts	0x012E, r24
	USB_Host_ConfigurationNumber = 0;
     b4a:	10 92 24 01 	sts	0x0124, r1
	USB_Host_ControlPipeSize     = PIPE_CONTROLPIPE_DEFAULT_SIZE;
     b4e:	80 e4       	ldi	r24, 0x40	; 64
     b50:	80 93 1d 01 	sts	0x011D, r24
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
     b54:	80 91 d8 00 	lds	r24, 0x00D8
     b58:	80 64       	ori	r24, 0x40	; 64
     b5a:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     b5e:	80 91 dd 00 	lds	r24, 0x00DD
     b62:	81 60       	ori	r24, 0x01	; 1
     b64:	80 93 dd 00 	sts	0x00DD, r24
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
     b68:	80 91 dd 00 	lds	r24, 0x00DD
     b6c:	84 60       	ori	r24, 0x04	; 4
     b6e:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON &= ~(1 << UVCONE);
     b72:	80 91 d7 00 	lds	r24, 0x00D7
     b76:	8f 7e       	andi	r24, 0xEF	; 239
     b78:	80 93 d7 00 	sts	0x00D7, r24

				DDRE   |=  (1 << 7);
     b7c:	6f 9a       	sbi	0x0d, 7	; 13
			}

			static inline void USB_Host_VBUS_Manual_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_On(void)
			{
				PORTE  |=  (1 << 7);
     b7e:	77 9a       	sbi	0x0e, 7	; 14
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN |= (1 << SRPE);						
     b80:	80 91 de 00 	lds	r24, 0x00DE
     b84:	81 60       	ori	r24, 0x01	; 1
     b86:	80 93 de 00 	sts	0x00DE, r24
						break;
					case USB_INT_RSTI:
						UHIEN  |= (1 << RSTE);
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
     b8a:	80 91 de 00 	lds	r24, 0x00DE
     b8e:	84 60       	ori	r24, 0x04	; 4
     b90:	80 93 de 00 	sts	0x00DE, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     b94:	80 91 e0 00 	lds	r24, 0x00E0
     b98:	8e 7f       	andi	r24, 0xFE	; 254
     b9a:	80 93 e0 00 	sts	0x00E0, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     b9e:	80 91 d8 00 	lds	r24, 0x00D8
     ba2:	80 61       	ori	r24, 0x10	; 16
     ba4:	80 93 d8 00 	sts	0x00D8, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     ba8:	08 95       	ret

00000baa <USB_Init>:

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
     baa:	e7 ed       	ldi	r30, 0xD7	; 215
     bac:	f0 e0       	ldi	r31, 0x00	; 0
     bae:	80 81       	ld	r24, Z
     bb0:	81 60       	ori	r24, 0x01	; 1
     bb2:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	80 93 25 01 	sts	0x0125, r24

	USB_ResetInterface();
}
     bba:	a7 cf       	rjmp	.-178    	; 0xb0a <USB_ResetInterface>

00000bbc <USB_Disable>:

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
     bbc:	17 d0       	rcall	.+46     	; 0xbec <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     bbe:	1e d0       	rcall	.+60     	; 0xbfc <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
     bc0:	e0 ee       	ldi	r30, 0xE0	; 224
     bc2:	f0 e0       	ldi	r31, 0x00	; 0
     bc4:	80 81       	ld	r24, Z
     bc6:	81 60       	ori	r24, 0x01	; 1
     bc8:	80 83       	st	Z, r24
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON  &= ~(1 << USBE);
     bca:	a8 ed       	ldi	r26, 0xD8	; 216
     bcc:	b0 e0       	ldi	r27, 0x00	; 0
     bce:	8c 91       	ld	r24, X
     bd0:	8f 77       	andi	r24, 0x7F	; 127
     bd2:	8c 93       	st	X, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     bd4:	19 bc       	out	0x29, r1	; 41

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  &= ~(1 << UVREGE);
     bd6:	e7 ed       	ldi	r30, 0xD7	; 215
     bd8:	f0 e0       	ldi	r31, 0x00	; 0
     bda:	80 81       	ld	r24, Z
     bdc:	8e 7f       	andi	r24, 0xFE	; 254
     bde:	80 83       	st	Z, r24
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON  &= ~(1 << OTGPADE);
     be0:	8c 91       	ld	r24, X
     be2:	8f 7e       	andi	r24, 0xEF	; 239
     be4:	8c 93       	st	X, r24

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
     be6:	10 92 25 01 	sts	0x0125, r1
}
     bea:	08 95       	ret

00000bec <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     bec:	e8 ed       	ldi	r30, 0xD8	; 216
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	80 81       	ld	r24, Z
     bf2:	8c 7f       	andi	r24, 0xFC	; 252
     bf4:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
     bf6:	10 92 a0 00 	sts	0x00A0, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
	#endif
}
     bfa:	08 95       	ret

00000bfc <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     bfc:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_BOTH)
	OTGINT = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
     c00:	10 92 9f 00 	sts	0x009F, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
	#endif
}
     c04:	08 95       	ret

00000c06 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
     c06:	1f 92       	push	r1
     c08:	0f 92       	push	r0
     c0a:	0f b6       	in	r0, 0x3f	; 63
     c0c:	0f 92       	push	r0
     c0e:	0b b6       	in	r0, 0x3b	; 59
     c10:	0f 92       	push	r0
     c12:	11 24       	eor	r1, r1
     c14:	2f 93       	push	r18
     c16:	3f 93       	push	r19
     c18:	4f 93       	push	r20
     c1a:	5f 93       	push	r21
     c1c:	6f 93       	push	r22
     c1e:	7f 93       	push	r23
     c20:	8f 93       	push	r24
     c22:	9f 93       	push	r25
     c24:	af 93       	push	r26
     c26:	bf 93       	push	r27
     c28:	ef 93       	push	r30
     c2a:	ff 93       	push	r31
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     c2c:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	#if defined(USB_CAN_BE_HOST)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
     c30:	85 ff       	sbrs	r24, 5
     c32:	0a c0       	rjmp	.+20     	; 0xc48 <__vector_10+0x42>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     c34:	80 91 a0 00 	lds	r24, 0x00A0
     c38:	85 ff       	sbrs	r24, 5
     c3a:	06 c0       	rjmp	.+12     	; 0xc48 <__vector_10+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     c3c:	80 91 9f 00 	lds	r24, 0x009F
     c40:	8f 7d       	andi	r24, 0xDF	; 223
     c42:	80 93 9f 00 	sts	0x009F, r24
	{
		USB_INT_Clear(USB_INT_HSOFI);

		EVENT_USB_Host_StartOfFrame();
     c46:	10 d1       	rcall	.+544    	; 0xe68 <USB_Event_Stub>
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
     c48:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
     c4c:	81 ff       	sbrs	r24, 1
     c4e:	15 c0       	rjmp	.+42     	; 0xc7a <__vector_10+0x74>
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
					case USB_INT_DCONNI:
						return (UHIEN  & (1 << DCONNE));
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
     c50:	80 91 a0 00 	lds	r24, 0x00A0
     c54:	81 ff       	sbrs	r24, 1
     c56:	11 c0       	rjmp	.+34     	; 0xc7a <__vector_10+0x74>
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     c58:	80 91 9f 00 	lds	r24, 0x009F
     c5c:	8d 7f       	andi	r24, 0xFD	; 253
     c5e:	80 93 9f 00 	sts	0x009F, r24
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     c62:	80 91 9f 00 	lds	r24, 0x009F
     c66:	8e 7f       	andi	r24, 0xFE	; 254
     c68:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     c6c:	80 91 a0 00 	lds	r24, 0x00A0
     c70:	8d 7f       	andi	r24, 0xFD	; 253
     c72:	80 93 a0 00 	sts	0x00A0, r24
	{
		USB_INT_Clear(USB_INT_DDISCI);
		USB_INT_Clear(USB_INT_DCONNI);
		USB_INT_Disable(USB_INT_DDISCI);

		EVENT_USB_Host_DeviceUnattached();
     c76:	5b db       	rcall	.-2378   	; 0x32e <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     c78:	48 df       	rcall	.-368    	; 0xb0a <USB_ResetInterface>
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
     c7a:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
     c7e:	81 ff       	sbrs	r24, 1
     c80:	15 c0       	rjmp	.+42     	; 0xcac <__vector_10+0xa6>
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
     c82:	80 91 de 00 	lds	r24, 0x00DE
     c86:	81 ff       	sbrs	r24, 1
     c88:	11 c0       	rjmp	.+34     	; 0xcac <__vector_10+0xa6>
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     c8a:	80 91 df 00 	lds	r24, 0x00DF
     c8e:	8d 7f       	andi	r24, 0xFD	; 253
     c90:	80 93 df 00 	sts	0x00DF, r24
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
     c94:	77 98       	cbi	0x0e, 7	; 14
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     c96:	80 91 dd 00 	lds	r24, 0x00DD
     c9a:	81 60       	ori	r24, 0x01	; 1
     c9c:	80 93 dd 00 	sts	0x00DD, r24
		USB_INT_Clear(USB_INT_VBERRI);

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
     ca0:	80 e0       	ldi	r24, 0x00	; 0
     ca2:	28 db       	rcall	.-2480   	; 0x2f4 <EVENT_USB_Host_HostError>
		EVENT_USB_Host_DeviceUnattached();
     ca4:	44 db       	rcall	.-2424   	; 0x32e <EVENT_USB_Host_DeviceUnattached>

		USB_HostState = HOST_STATE_Unattached;
     ca6:	81 e0       	ldi	r24, 0x01	; 1
     ca8:	80 93 2e 01 	sts	0x012E, r24
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
					case USB_INT_SRPI:
						return (OTGINT & (1 << SRPI));
     cac:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
     cb0:	80 ff       	sbrs	r24, 0
     cb2:	17 c0       	rjmp	.+46     	; 0xce2 <__vector_10+0xdc>
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
					case USB_INT_SRPI:
						return (OTGIEN & (1 << SRPE));
     cb4:	80 91 de 00 	lds	r24, 0x00DE
     cb8:	80 ff       	sbrs	r24, 0
     cba:	13 c0       	rjmp	.+38     	; 0xce2 <__vector_10+0xdc>
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
						break;
					case USB_INT_SRPI:
						OTGINT &= ~(1 << SRPI);
     cbc:	80 91 df 00 	lds	r24, 0x00DF
     cc0:	8e 7f       	andi	r24, 0xFE	; 254
     cc2:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_VBERRI:
						OTGIEN &= ~(1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN &= ~(1 << SRPE);						
     cc6:	80 91 de 00 	lds	r24, 0x00DE
     cca:	8e 7f       	andi	r24, 0xFE	; 254
     ccc:	80 93 de 00 	sts	0x00DE, r24
	{
		USB_INT_Clear(USB_INT_SRPI);
		USB_INT_Disable(USB_INT_SRPI);

		EVENT_USB_Host_DeviceAttached();
     cd0:	37 db       	rcall	.-2450   	; 0x340 <EVENT_USB_Host_DeviceAttached>
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     cd2:	80 91 a0 00 	lds	r24, 0x00A0
     cd6:	82 60       	ori	r24, 0x02	; 2
     cd8:	80 93 a0 00 	sts	0x00A0, r24

		USB_INT_Enable(USB_INT_DDISCI);

		USB_HostState = HOST_STATE_Powered;
     cdc:	82 e0       	ldi	r24, 0x02	; 2
     cde:	80 93 2e 01 	sts	0x012E, r24
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
     ce2:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
     ce6:	82 ff       	sbrs	r24, 2
     ce8:	0e c0       	rjmp	.+28     	; 0xd06 <__vector_10+0x100>
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
     cea:	80 91 de 00 	lds	r24, 0x00DE
     cee:	82 ff       	sbrs	r24, 2
     cf0:	0a c0       	rjmp	.+20     	; 0xd06 <__vector_10+0x100>
						break;
					case USB_INT_RSTI:
						UHINT  &= ~(1 << RSTI);
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
     cf2:	80 91 df 00 	lds	r24, 0x00DF
     cf6:	8b 7f       	andi	r24, 0xFB	; 251
     cf8:	80 93 df 00 	sts	0x00DF, r24
	{
		USB_INT_Clear(USB_INT_BCERRI);

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
     cfc:	82 e0       	ldi	r24, 0x02	; 2
     cfe:	60 e0       	ldi	r22, 0x00	; 0
     d00:	cd da       	rcall	.-2662   	; 0x29c <EVENT_USB_Host_DeviceEnumerationFailed>
		EVENT_USB_Host_DeviceUnattached();
     d02:	15 db       	rcall	.-2518   	; 0x32e <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     d04:	02 df       	rcall	.-508    	; 0xb0a <USB_ResetInterface>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     d06:	ff 91       	pop	r31
     d08:	ef 91       	pop	r30
     d0a:	bf 91       	pop	r27
     d0c:	af 91       	pop	r26
     d0e:	9f 91       	pop	r25
     d10:	8f 91       	pop	r24
     d12:	7f 91       	pop	r23
     d14:	6f 91       	pop	r22
     d16:	5f 91       	pop	r21
     d18:	4f 91       	pop	r20
     d1a:	3f 91       	pop	r19
     d1c:	2f 91       	pop	r18
     d1e:	0f 90       	pop	r0
     d20:	0b be       	out	0x3b, r0	; 59
     d22:	0f 90       	pop	r0
     d24:	0f be       	out	0x3f, r0	; 63
     d26:	0f 90       	pop	r0
     d28:	1f 90       	pop	r1
     d2a:	18 95       	reti

00000d2c <USB_GetNextDescriptorComp>:

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
     d2c:	af 92       	push	r10
     d2e:	bf 92       	push	r11
     d30:	cf 92       	push	r12
     d32:	df 92       	push	r13
     d34:	ef 92       	push	r14
     d36:	ff 92       	push	r15
     d38:	0f 93       	push	r16
     d3a:	1f 93       	push	r17
     d3c:	cf 93       	push	r28
     d3e:	df 93       	push	r29
     d40:	7c 01       	movw	r14, r24
     d42:	eb 01       	movw	r28, r22
     d44:	6a 01       	movw	r12, r20
     d46:	24 c0       	rjmp	.+72     	; 0xd90 <USB_GetNextDescriptorComp+0x64>
	uint8_t ErrorCode;

	while (*BytesRem)
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
     d48:	e8 81       	ld	r30, Y
     d4a:	f9 81       	ldd	r31, Y+1	; 0x01
     d4c:	be 2e       	mov	r11, r30
     d4e:	af 2e       	mov	r10, r31
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc)
			{
				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;
     d50:	80 81       	ld	r24, Z
     d52:	90 e0       	ldi	r25, 0x00	; 0
     d54:	98 01       	movw	r18, r16
     d56:	80 17       	cp	r24, r16
     d58:	91 07       	cpc	r25, r17
     d5a:	08 f4       	brcc	.+2      	; 0xd5e <USB_GetNextDescriptorComp+0x32>
     d5c:	9c 01       	movw	r18, r24
				
				if (*BytesRem < CurrDescriptorSize)
				  CurrDescriptorSize = *BytesRem;

				*CurrConfigLoc  = (void*)((uintptr_t)*CurrConfigLoc + CurrDescriptorSize);
     d5e:	e2 0f       	add	r30, r18
     d60:	f3 1f       	adc	r31, r19
     d62:	f9 83       	std	Y+1, r31	; 0x01
     d64:	e8 83       	st	Y, r30
				*BytesRem      -= CurrDescriptorSize;
     d66:	f7 01       	movw	r30, r14
     d68:	80 81       	ld	r24, Z
     d6a:	91 81       	ldd	r25, Z+1	; 0x01
     d6c:	82 1b       	sub	r24, r18
     d6e:	93 0b       	sbc	r25, r19
     d70:	91 83       	std	Z+1, r25	; 0x01
     d72:	80 83       	st	Z, r24
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
     d74:	88 81       	ld	r24, Y
     d76:	99 81       	ldd	r25, Y+1	; 0x01
     d78:	f6 01       	movw	r30, r12
     d7a:	09 95       	icall
     d7c:	82 30       	cpi	r24, 0x02	; 2
     d7e:	41 f0       	breq	.+16     	; 0xd90 <USB_GetNextDescriptorComp+0x64>
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
     d80:	81 30       	cpi	r24, 0x01	; 1
     d82:	69 f4       	brne	.+26     	; 0xd9e <USB_GetNextDescriptorComp+0x72>
			{
				*CurrConfigLoc = PrevDescLoc;
     d84:	b8 82       	st	Y, r11
     d86:	a9 82       	std	Y+1, r10	; 0x01
				*BytesRem      = PrevBytesRem;
     d88:	f7 01       	movw	r30, r14
     d8a:	11 83       	std	Z+1, r17	; 0x01
     d8c:	00 83       	st	Z, r16
     d8e:	07 c0       	rjmp	.+14     	; 0xd9e <USB_GetNextDescriptorComp+0x72>
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
	uint8_t ErrorCode;

	while (*BytesRem)
     d90:	f7 01       	movw	r30, r14
     d92:	00 81       	ld	r16, Z
     d94:	11 81       	ldd	r17, Z+1	; 0x01
     d96:	01 15       	cp	r16, r1
     d98:	11 05       	cpc	r17, r1
     d9a:	b1 f6       	brne	.-84     	; 0xd48 <USB_GetNextDescriptorComp+0x1c>
     d9c:	82 e0       	ldi	r24, 0x02	; 2
			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
}
     d9e:	df 91       	pop	r29
     da0:	cf 91       	pop	r28
     da2:	1f 91       	pop	r17
     da4:	0f 91       	pop	r16
     da6:	ff 90       	pop	r15
     da8:	ef 90       	pop	r14
     daa:	df 90       	pop	r13
     dac:	cf 90       	pop	r12
     dae:	bf 90       	pop	r11
     db0:	af 90       	pop	r10
     db2:	08 95       	ret

00000db4 <USB_Host_GetDeviceConfigDescriptor>:
#if defined(USB_CAN_BE_HOST)
uint8_t USB_Host_GetDeviceConfigDescriptor(const uint8_t ConfigNumber,
                                           uint16_t* const ConfigSizePtr,
                                           void* const BufferPtr,
                                           const uint16_t BufferSize)
{
     db4:	cf 92       	push	r12
     db6:	df 92       	push	r13
     db8:	ef 92       	push	r14
     dba:	ff 92       	push	r15
     dbc:	0f 93       	push	r16
     dbe:	1f 93       	push	r17
     dc0:	df 93       	push	r29
     dc2:	cf 93       	push	r28
     dc4:	cd b7       	in	r28, 0x3d	; 61
     dc6:	de b7       	in	r29, 0x3e	; 62
     dc8:	29 97       	sbiw	r28, 0x09	; 9
     dca:	0f b6       	in	r0, 0x3f	; 63
     dcc:	f8 94       	cli
     dce:	de bf       	out	0x3e, r29	; 62
     dd0:	0f be       	out	0x3f, r0	; 63
     dd2:	cd bf       	out	0x3d, r28	; 61
     dd4:	6b 01       	movw	r12, r22
     dd6:	8a 01       	movw	r16, r20
     dd8:	79 01       	movw	r14, r18
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
     dda:	90 e8       	ldi	r25, 0x80	; 128
     ddc:	90 93 26 01 	sts	0x0126, r25
     de0:	96 e0       	ldi	r25, 0x06	; 6
     de2:	90 93 27 01 	sts	0x0127, r25
     de6:	90 e0       	ldi	r25, 0x00	; 0
     de8:	01 97       	sbiw	r24, 0x01	; 1
     dea:	92 60       	ori	r25, 0x02	; 2
     dec:	90 93 29 01 	sts	0x0129, r25
     df0:	80 93 28 01 	sts	0x0128, r24
     df4:	10 92 2b 01 	sts	0x012B, r1
     df8:	10 92 2a 01 	sts	0x012A, r1
     dfc:	89 e0       	ldi	r24, 0x09	; 9
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	90 93 2d 01 	sts	0x012D, r25
     e04:	80 93 2c 01 	sts	0x012C, r24
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     e08:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = sizeof(USB_Descriptor_Configuration_Header_t),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(ConfigHeader)) != HOST_SENDCONTROL_Successful)
     e0c:	ce 01       	movw	r24, r28
     e0e:	01 96       	adiw	r24, 0x01	; 1
     e10:	55 d0       	rcall	.+170    	; 0xebc <USB_Host_SendControlRequest>
     e12:	28 2f       	mov	r18, r24
     e14:	88 23       	and	r24, r24
     e16:	c1 f4       	brne	.+48     	; 0xe48 <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);
     e18:	8b 81       	ldd	r24, Y+3	; 0x03
     e1a:	9c 81       	ldd	r25, Y+4	; 0x04
     e1c:	f6 01       	movw	r30, r12
     e1e:	91 83       	std	Z+1, r25	; 0x01
     e20:	80 83       	st	Z, r24

	if (*ConfigSizePtr > BufferSize)
     e22:	e8 16       	cp	r14, r24
     e24:	f9 06       	cpc	r15, r25
     e26:	10 f4       	brcc	.+4      	; 0xe2c <USB_Host_GetDeviceConfigDescriptor+0x78>
     e28:	25 e0       	ldi	r18, 0x05	; 5
     e2a:	0e c0       	rjmp	.+28     	; 0xe48 <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return HOST_GETCONFIG_BuffOverflow;

	USB_ControlRequest.wLength = *ConfigSizePtr;
     e2c:	90 93 2d 01 	sts	0x012D, r25
     e30:	80 93 2c 01 	sts	0x012C, r24

	if ((ErrorCode = USB_Host_SendControlRequest(BufferPtr)) != HOST_SENDCONTROL_Successful)
     e34:	c8 01       	movw	r24, r16
     e36:	42 d0       	rcall	.+132    	; 0xebc <USB_Host_SendControlRequest>
     e38:	28 2f       	mov	r18, r24
     e3a:	88 23       	and	r24, r24
     e3c:	29 f4       	brne	.+10     	; 0xe48 <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
     e3e:	f8 01       	movw	r30, r16
     e40:	81 81       	ldd	r24, Z+1	; 0x01
     e42:	82 30       	cpi	r24, 0x02	; 2
     e44:	09 f0       	breq	.+2      	; 0xe48 <USB_Host_GetDeviceConfigDescriptor+0x94>
     e46:	26 e0       	ldi	r18, 0x06	; 6
	  return HOST_GETCONFIG_InvalidData;

	return HOST_GETCONFIG_Successful;
}
     e48:	82 2f       	mov	r24, r18
     e4a:	29 96       	adiw	r28, 0x09	; 9
     e4c:	0f b6       	in	r0, 0x3f	; 63
     e4e:	f8 94       	cli
     e50:	de bf       	out	0x3e, r29	; 62
     e52:	0f be       	out	0x3f, r0	; 63
     e54:	cd bf       	out	0x3d, r28	; 61
     e56:	cf 91       	pop	r28
     e58:	df 91       	pop	r29
     e5a:	1f 91       	pop	r17
     e5c:	0f 91       	pop	r16
     e5e:	ff 90       	pop	r15
     e60:	ef 90       	pop	r14
     e62:	df 90       	pop	r13
     e64:	cf 90       	pop	r12
     e66:	08 95       	ret

00000e68 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
     e68:	08 95       	ret

00000e6a <USB_Host_WaitForIOS>:

	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
     e6a:	1f 93       	push	r17
     e6c:	cf 93       	push	r28
     e6e:	df 93       	push	r29
     e70:	18 2f       	mov	r17, r24
     e72:	c8 ee       	ldi	r28, 0xE8	; 232
     e74:	d3 e0       	ldi	r29, 0x03	; 3
     e76:	09 c0       	rjmp	.+18     	; 0xe8a <USB_Host_WaitForIOS+0x20>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     e78:	81 e0       	ldi	r24, 0x01	; 1
     e7a:	de db       	rcall	.-2116   	; 0x638 <USB_Host_WaitMS>
     e7c:	88 23       	and	r24, r24
     e7e:	d1 f4       	brne	.+52     	; 0xeb4 <USB_Host_WaitForIOS+0x4a>
		  return ErrorCode;

		if (!(TimeoutCounter--))
     e80:	20 97       	sbiw	r28, 0x00	; 0
     e82:	11 f4       	brne	.+4      	; 0xe88 <USB_Host_WaitForIOS+0x1e>
     e84:	84 e0       	ldi	r24, 0x04	; 4
     e86:	16 c0       	rjmp	.+44     	; 0xeb4 <USB_Host_WaitForIOS+0x4a>
     e88:	21 97       	sbiw	r28, 0x01	; 1
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
     e8a:	11 23       	and	r17, r17
     e8c:	29 f4       	brne	.+10     	; 0xe98 <USB_Host_WaitForIOS+0x2e>
			 *  \return Boolean \c true if the current pipe is ready for a SETUP packet, \c false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
     e8e:	80 91 a6 00 	lds	r24, 0x00A6
     e92:	83 ff       	sbrs	r24, 3
     e94:	f1 cf       	rjmp	.-30     	; 0xe78 <USB_Host_WaitForIOS+0xe>
     e96:	0d c0       	rjmp	.+26     	; 0xeb2 <USB_Host_WaitForIOS+0x48>
     e98:	11 30       	cpi	r17, 0x01	; 1
     e9a:	29 f4       	brne	.+10     	; 0xea6 <USB_Host_WaitForIOS+0x3c>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     e9c:	80 91 a6 00 	lds	r24, 0x00A6
     ea0:	80 ff       	sbrs	r24, 0
     ea2:	ea cf       	rjmp	.-44     	; 0xe78 <USB_Host_WaitForIOS+0xe>
     ea4:	06 c0       	rjmp	.+12     	; 0xeb2 <USB_Host_WaitForIOS+0x48>
     ea6:	12 30       	cpi	r17, 0x02	; 2
     ea8:	39 f7       	brne	.-50     	; 0xe78 <USB_Host_WaitForIOS+0xe>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     eaa:	80 91 a6 00 	lds	r24, 0x00A6
     eae:	82 ff       	sbrs	r24, 2
     eb0:	e3 cf       	rjmp	.-58     	; 0xe78 <USB_Host_WaitForIOS+0xe>
     eb2:	80 e0       	ldi	r24, 0x00	; 0
		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
}
     eb4:	df 91       	pop	r29
     eb6:	cf 91       	pop	r28
     eb8:	1f 91       	pop	r17
     eba:	08 95       	ret

00000ebc <USB_Host_SendControlRequest>:
#include "HostStandardReq.h"

uint8_t USB_Host_ConfigurationNumber;

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
     ebc:	ff 92       	push	r15
     ebe:	0f 93       	push	r16
     ec0:	1f 93       	push	r17
     ec2:	cf 93       	push	r28
     ec4:	df 93       	push	r29
     ec6:	18 2f       	mov	r17, r24
     ec8:	09 2f       	mov	r16, r25
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     eca:	f0 90 9e 00 	lds	r15, 0x009E
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
	bool     BusSuspended = USB_Host_IsBusSuspended();
	uint8_t  ReturnStatus = HOST_SENDCONTROL_Successful;
	uint16_t DataLen      = USB_ControlRequest.wLength;
     ece:	c0 91 2c 01 	lds	r28, 0x012C
     ed2:	d0 91 2d 01 	lds	r29, 0x012D
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     ed6:	80 91 9e 00 	lds	r24, 0x009E
     eda:	81 60       	ori	r24, 0x01	; 1
     edc:	80 93 9e 00 	sts	0x009E, r24

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     ee0:	81 e0       	ldi	r24, 0x01	; 1
     ee2:	aa db       	rcall	.-2220   	; 0x638 <USB_Host_WaitMS>
     ee4:	98 2f       	mov	r25, r24
     ee6:	88 23       	and	r24, r24
     ee8:	09 f0       	breq	.+2      	; 0xeec <USB_Host_SendControlRequest+0x30>
     eea:	d7 c0       	rjmp	.+430    	; 0x109a <USB_Host_SendControlRequest+0x1de>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     eec:	80 91 aa 00 	lds	r24, 0x00AA
     ef0:	8f 7c       	andi	r24, 0xCF	; 207
     ef2:	80 93 aa 00 	sts	0x00AA, r24

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     ef6:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
     efa:	80 91 a6 00 	lds	r24, 0x00A6
     efe:	8f 7e       	andi	r24, 0xEF	; 239
     f00:	80 93 a6 00 	sts	0x00A6, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     f04:	80 91 a9 00 	lds	r24, 0x00A9
     f08:	8f 7b       	andi	r24, 0xBF	; 191
     f0a:	80 93 a9 00 	sts	0x00A9, r24
     f0e:	e6 e2       	ldi	r30, 0x26	; 38
     f10:	f1 e0       	ldi	r31, 0x01	; 1
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
	  Pipe_Write_8(*(HeaderStream++));	
     f12:	81 91       	ld	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
     f14:	80 93 af 00 	sts	0x00AF, r24
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
     f18:	81 e0       	ldi	r24, 0x01	; 1
     f1a:	ee 32       	cpi	r30, 0x2E	; 46
     f1c:	f8 07       	cpc	r31, r24
     f1e:	c9 f7       	brne	.-14     	; 0xf12 <USB_Host_SendControlRequest+0x56>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
     f20:	80 91 a6 00 	lds	r24, 0x00A6
     f24:	87 77       	andi	r24, 0x77	; 119
     f26:	80 93 a6 00 	sts	0x00A6, r24
	  Pipe_Write_8(*(HeaderStream++));	
	#endif
	
	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
     f2a:	80 e0       	ldi	r24, 0x00	; 0
     f2c:	9e df       	rcall	.-196    	; 0xe6a <USB_Host_WaitForIOS>
     f2e:	98 2f       	mov	r25, r24
     f30:	88 23       	and	r24, r24
     f32:	09 f0       	breq	.+2      	; 0xf36 <USB_Host_SendControlRequest+0x7a>
     f34:	b2 c0       	rjmp	.+356    	; 0x109a <USB_Host_SendControlRequest+0x1de>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     f36:	80 91 a9 00 	lds	r24, 0x00A9
     f3a:	80 64       	ori	r24, 0x40	; 64
     f3c:	80 93 a9 00 	sts	0x00A9, r24
	  goto End_Of_Control_Send;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     f40:	81 e0       	ldi	r24, 0x01	; 1
     f42:	7a db       	rcall	.-2316   	; 0x638 <USB_Host_WaitMS>
     f44:	98 2f       	mov	r25, r24
     f46:	88 23       	and	r24, r24
     f48:	09 f0       	breq	.+2      	; 0xf4c <USB_Host_SendControlRequest+0x90>
     f4a:	a7 c0       	rjmp	.+334    	; 0x109a <USB_Host_SendControlRequest+0x1de>

uint8_t USB_Host_ConfigurationNumber;

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
     f4c:	21 2f       	mov	r18, r17
     f4e:	30 2f       	mov	r19, r16
     f50:	c9 01       	movw	r24, r18
     f52:	8c 01       	movw	r16, r24
	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
	  goto End_Of_Control_Send;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
     f54:	80 91 26 01 	lds	r24, 0x0126
     f58:	87 ff       	sbrs	r24, 7
     f5a:	52 c0       	rjmp	.+164    	; 0x1000 <USB_Host_SendControlRequest+0x144>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     f5c:	80 91 aa 00 	lds	r24, 0x00AA
     f60:	8f 7c       	andi	r24, 0xCF	; 207
     f62:	80 61       	ori	r24, 0x10	; 16
     f64:	80 93 aa 00 	sts	0x00AA, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
     f68:	01 15       	cp	r16, r1
     f6a:	11 05       	cpc	r17, r1
     f6c:	69 f5       	brne	.+90     	; 0xfc8 <USB_Host_SendControlRequest+0x10c>
     f6e:	2e c0       	rjmp	.+92     	; 0xfcc <USB_Host_SendControlRequest+0x110>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     f70:	80 91 a9 00 	lds	r24, 0x00A9
     f74:	8f 7b       	andi	r24, 0xBF	; 191
     f76:	80 93 a9 00 	sts	0x00A9, r24
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
     f7a:	81 e0       	ldi	r24, 0x01	; 1
     f7c:	76 df       	rcall	.-276    	; 0xe6a <USB_Host_WaitForIOS>
     f7e:	98 2f       	mov	r25, r24
     f80:	88 23       	and	r24, r24
     f82:	09 f0       	breq	.+2      	; 0xf86 <USB_Host_SendControlRequest+0xca>
     f84:	8a c0       	rjmp	.+276    	; 0x109a <USB_Host_SendControlRequest+0x1de>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
     f86:	80 91 f6 00 	lds	r24, 0x00F6
     f8a:	90 91 f7 00 	lds	r25, 0x00F7
				  goto End_Of_Control_Send;

				if (!(Pipe_BytesInPipe()))
     f8e:	89 2b       	or	r24, r25
     f90:	49 f4       	brne	.+18     	; 0xfa4 <USB_Host_SendControlRequest+0xe8>
     f92:	c0 e0       	ldi	r28, 0x00	; 0
     f94:	d0 e0       	ldi	r29, 0x00	; 0
     f96:	06 c0       	rjmp	.+12     	; 0xfa4 <USB_Host_SendControlRequest+0xe8>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
     f98:	80 91 af 00 	lds	r24, 0x00AF
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
				{
					*(DataStream++) = Pipe_Read_8();
     f9c:	f8 01       	movw	r30, r16
     f9e:	81 93       	st	Z+, r24
     fa0:	8f 01       	movw	r16, r30
					DataLen--;
     fa2:	21 97       	sbiw	r28, 0x01	; 1
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
     fa4:	80 91 f6 00 	lds	r24, 0x00F6
     fa8:	90 91 f7 00 	lds	r25, 0x00F7
				  goto End_Of_Control_Send;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
     fac:	89 2b       	or	r24, r25
     fae:	11 f0       	breq	.+4      	; 0xfb4 <USB_Host_SendControlRequest+0xf8>
     fb0:	20 97       	sbiw	r28, 0x00	; 0
     fb2:	91 f7       	brne	.-28     	; 0xf98 <USB_Host_SendControlRequest+0xdc>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     fb4:	80 91 a9 00 	lds	r24, 0x00A9
     fb8:	80 64       	ori	r24, 0x40	; 64
     fba:	80 93 a9 00 	sts	0x00A9, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     fbe:	80 91 a6 00 	lds	r24, 0x00A6
     fc2:	8e 77       	andi	r24, 0x7E	; 126
     fc4:	80 93 a6 00 	sts	0x00A6, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
     fc8:	20 97       	sbiw	r28, 0x00	; 0
     fca:	91 f6       	brne	.-92     	; 0xf70 <USB_Host_SendControlRequest+0xb4>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     fcc:	80 91 aa 00 	lds	r24, 0x00AA
     fd0:	8f 7c       	andi	r24, 0xCF	; 207
     fd2:	80 62       	ori	r24, 0x20	; 32
     fd4:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     fd8:	80 91 a9 00 	lds	r24, 0x00A9
     fdc:	8f 7b       	andi	r24, 0xBF	; 191
     fde:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
     fe2:	82 e0       	ldi	r24, 0x02	; 2
     fe4:	42 df       	rcall	.-380    	; 0xe6a <USB_Host_WaitForIOS>
     fe6:	98 2f       	mov	r25, r24
     fe8:	88 23       	and	r24, r24
     fea:	09 f0       	breq	.+2      	; 0xfee <USB_Host_SendControlRequest+0x132>
     fec:	56 c0       	rjmp	.+172    	; 0x109a <USB_Host_SendControlRequest+0x1de>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
     fee:	80 91 a6 00 	lds	r24, 0x00A6
     ff2:	8b 77       	andi	r24, 0x7B	; 123
     ff4:	80 93 a6 00 	sts	0x00A6, r24
		  goto End_Of_Control_Send;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
     ff8:	82 e0       	ldi	r24, 0x02	; 2
     ffa:	37 df       	rcall	.-402    	; 0xe6a <USB_Host_WaitForIOS>
     ffc:	98 2f       	mov	r25, r24
     ffe:	4d c0       	rjmp	.+154    	; 0x109a <USB_Host_SendControlRequest+0x1de>
		  goto End_Of_Control_Send;
	}
	else
	{
		if (DataStream != NULL)
    1000:	01 15       	cp	r16, r1
    1002:	11 05       	cpc	r17, r1
    1004:	a9 f1       	breq	.+106    	; 0x1070 <USB_Host_SendControlRequest+0x1b4>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1006:	80 91 aa 00 	lds	r24, 0x00AA
    100a:	8f 7c       	andi	r24, 0xCF	; 207
    100c:	80 62       	ori	r24, 0x20	; 32
    100e:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1012:	80 91 a9 00 	lds	r24, 0x00A9
    1016:	8f 7b       	andi	r24, 0xBF	; 191
    1018:	80 93 a9 00 	sts	0x00A9, r24
    101c:	1d c0       	rjmp	.+58     	; 0x1058 <USB_Host_SendControlRequest+0x19c>
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    101e:	82 e0       	ldi	r24, 0x02	; 2
    1020:	24 df       	rcall	.-440    	; 0xe6a <USB_Host_WaitForIOS>
    1022:	98 2f       	mov	r25, r24
    1024:	88 23       	and	r24, r24
    1026:	c9 f5       	brne	.+114    	; 0x109a <USB_Host_SendControlRequest+0x1de>
				  goto End_Of_Control_Send;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    1028:	80 91 1d 01 	lds	r24, 0x011D
    102c:	28 2f       	mov	r18, r24
    102e:	30 e0       	ldi	r19, 0x00	; 0
    1030:	07 c0       	rjmp	.+14     	; 0x1040 <USB_Host_SendControlRequest+0x184>
				{
					Pipe_Write_8(*(DataStream++));
    1032:	f8 01       	movw	r30, r16
    1034:	81 91       	ld	r24, Z+
    1036:	8f 01       	movw	r16, r30
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    1038:	80 93 af 00 	sts	0x00AF, r24
					DataLen--;
    103c:	21 97       	sbiw	r28, 0x01	; 1
			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
				  goto End_Of_Control_Send;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    103e:	39 f0       	breq	.+14     	; 0x104e <USB_Host_SendControlRequest+0x192>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1040:	80 91 f6 00 	lds	r24, 0x00F6
    1044:	90 91 f7 00 	lds	r25, 0x00F7
    1048:	82 17       	cp	r24, r18
    104a:	93 07       	cpc	r25, r19
    104c:	90 f3       	brcs	.-28     	; 0x1032 <USB_Host_SendControlRequest+0x176>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    104e:	80 91 a6 00 	lds	r24, 0x00A6
    1052:	8b 77       	andi	r24, 0x7B	; 123
    1054:	80 93 a6 00 	sts	0x00A6, r24
		if (DataStream != NULL)
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
    1058:	20 97       	sbiw	r28, 0x00	; 0
    105a:	09 f7       	brne	.-62     	; 0x101e <USB_Host_SendControlRequest+0x162>
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    105c:	82 e0       	ldi	r24, 0x02	; 2
    105e:	05 df       	rcall	.-502    	; 0xe6a <USB_Host_WaitForIOS>
    1060:	98 2f       	mov	r25, r24
    1062:	88 23       	and	r24, r24
    1064:	d1 f4       	brne	.+52     	; 0x109a <USB_Host_SendControlRequest+0x1de>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1066:	80 91 a9 00 	lds	r24, 0x00A9
    106a:	80 64       	ori	r24, 0x40	; 64
    106c:	80 93 a9 00 	sts	0x00A9, r24
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1070:	80 91 aa 00 	lds	r24, 0x00AA
    1074:	8f 7c       	andi	r24, 0xCF	; 207
    1076:	80 61       	ori	r24, 0x10	; 16
    1078:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    107c:	80 91 a9 00 	lds	r24, 0x00A9
    1080:	8f 7b       	andi	r24, 0xBF	; 191
    1082:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    1086:	81 e0       	ldi	r24, 0x01	; 1
    1088:	f0 de       	rcall	.-544    	; 0xe6a <USB_Host_WaitForIOS>
    108a:	98 2f       	mov	r25, r24
    108c:	88 23       	and	r24, r24
    108e:	29 f4       	brne	.+10     	; 0x109a <USB_Host_SendControlRequest+0x1de>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1090:	80 91 a6 00 	lds	r24, 0x00A6
    1094:	8e 77       	andi	r24, 0x7E	; 126
    1096:	80 93 a6 00 	sts	0x00A6, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    109a:	80 91 a9 00 	lds	r24, 0x00A9
    109e:	80 64       	ori	r24, 0x40	; 64
    10a0:	80 93 a9 00 	sts	0x00A9, r24
	}

End_Of_Control_Send:
	Pipe_Freeze();

	if (BusSuspended)
    10a4:	f0 fc       	sbrc	r15, 0
    10a6:	05 c0       	rjmp	.+10     	; 0x10b2 <USB_Host_SendControlRequest+0x1f6>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    10a8:	80 91 9e 00 	lds	r24, 0x009E
    10ac:	8e 7f       	andi	r24, 0xFE	; 254
    10ae:	80 93 9e 00 	sts	0x009E, r24
			 *  \param[in] PipeNumber  Index of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t PipeNumber)
			{
				UPRST = (1 << PipeNumber);
    10b2:	81 e0       	ldi	r24, 0x01	; 1
    10b4:	80 93 a8 00 	sts	0x00A8, r24
				UPRST = 0;
    10b8:	10 92 a8 00 	sts	0x00A8, r1
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
    10bc:	89 2f       	mov	r24, r25
    10be:	df 91       	pop	r29
    10c0:	cf 91       	pop	r28
    10c2:	1f 91       	pop	r17
    10c4:	0f 91       	pop	r16
    10c6:	ff 90       	pop	r15
    10c8:	08 95       	ret

000010ca <USB_Host_SetInterfaceAltSetting>:
}

uint8_t USB_Host_SetInterfaceAltSetting(const uint8_t InterfaceIndex,
                                        const uint8_t AltSetting)
{
	USB_ControlRequest = (USB_Request_Header_t)
    10ca:	e6 e2       	ldi	r30, 0x26	; 38
    10cc:	f1 e0       	ldi	r31, 0x01	; 1
    10ce:	91 e0       	ldi	r25, 0x01	; 1
    10d0:	90 93 26 01 	sts	0x0126, r25
    10d4:	9b e0       	ldi	r25, 0x0B	; 11
    10d6:	90 93 27 01 	sts	0x0127, r25
    10da:	60 93 28 01 	sts	0x0128, r22
    10de:	13 82       	std	Z+3, r1	; 0x03
    10e0:	80 93 2a 01 	sts	0x012A, r24
    10e4:	15 82       	std	Z+5, r1	; 0x05
    10e6:	10 92 2d 01 	sts	0x012D, r1
    10ea:	10 92 2c 01 	sts	0x012C, r1
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    10ee:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	return USB_Host_SendControlRequest(NULL);
    10f2:	80 e0       	ldi	r24, 0x00	; 0
    10f4:	90 e0       	ldi	r25, 0x00	; 0
}
    10f6:	e2 ce       	rjmp	.-572    	; 0xebc <USB_Host_SendControlRequest>

000010f8 <USB_Host_SetDeviceConfiguration>:

	return HOST_SENDCONTROL_Successful;
}

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
    10f8:	1f 93       	push	r17
    10fa:	18 2f       	mov	r17, r24
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
    10fc:	10 92 26 01 	sts	0x0126, r1
    1100:	89 e0       	ldi	r24, 0x09	; 9
    1102:	80 93 27 01 	sts	0x0127, r24
    1106:	10 93 28 01 	sts	0x0128, r17
    110a:	10 92 29 01 	sts	0x0129, r1
    110e:	10 92 2b 01 	sts	0x012B, r1
    1112:	10 92 2a 01 	sts	0x012A, r1
    1116:	10 92 2d 01 	sts	0x012D, r1
    111a:	10 92 2c 01 	sts	0x012C, r1
    111e:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);
	
	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) == HOST_SENDCONTROL_Successful)
    1122:	80 e0       	ldi	r24, 0x00	; 0
    1124:	90 e0       	ldi	r25, 0x00	; 0
    1126:	ca de       	rcall	.-620    	; 0xebc <USB_Host_SendControlRequest>
    1128:	88 23       	and	r24, r24
    112a:	49 f4       	brne	.+18     	; 0x113e <USB_Host_SetDeviceConfiguration+0x46>
	{
		USB_Host_ConfigurationNumber = ConfigNumber;
    112c:	10 93 24 01 	sts	0x0124, r17
		USB_HostState                = (ConfigNumber) ? HOST_STATE_Configured : HOST_STATE_Addressed;
    1130:	11 23       	and	r17, r17
    1132:	11 f4       	brne	.+4      	; 0x1138 <USB_Host_SetDeviceConfiguration+0x40>
    1134:	9a e0       	ldi	r25, 0x0A	; 10
    1136:	01 c0       	rjmp	.+2      	; 0x113a <USB_Host_SetDeviceConfiguration+0x42>
    1138:	9b e0       	ldi	r25, 0x0B	; 11
    113a:	90 93 2e 01 	sts	0x012E, r25
	}

	return ErrorCode;
}
    113e:	1f 91       	pop	r17
    1140:	08 95       	ret

00001142 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    1142:	ff 92       	push	r15
    1144:	0f 93       	push	r16
    1146:	1f 93       	push	r17
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
    1148:	07 ea       	ldi	r16, 0xA7	; 167
    114a:	10 e0       	ldi	r17, 0x00	; 0
    114c:	f8 01       	movw	r30, r16
    114e:	f0 80       	ld	r15, Z
    1150:	f7 e0       	ldi	r31, 0x07	; 7
    1152:	ff 22       	and	r15, r31
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1154:	f8 01       	movw	r30, r16
    1156:	10 82       	st	Z, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    1158:	0c db       	rcall	.-2536   	; 0x772 <USB_Host_ProcessNextHostState>
    115a:	f8 01       	movw	r30, r16
    115c:	f0 82       	st	Z, r15
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
    115e:	1f 91       	pop	r17
    1160:	0f 91       	pop	r16
    1162:	ff 90       	pop	r15
    1164:	08 95       	ret

00001166 <DCOMP_Audio_Host_NextAudioControlInterface>:
	
	return AUDIO_ENUMERROR_NoError;
}

static uint8_t DCOMP_Audio_Host_NextAudioControlInterface(void* CurrentDescriptor)
{
    1166:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
    1168:	81 81       	ldd	r24, Z+1	; 0x01
    116a:	84 30       	cpi	r24, 0x04	; 4
    116c:	41 f4       	brne	.+16     	; 0x117e <DCOMP_Audio_Host_NextAudioControlInterface+0x18>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		if ((Interface->Class    == AUDIO_CSCP_AudioClass) &&
    116e:	85 81       	ldd	r24, Z+5	; 0x05
    1170:	81 30       	cpi	r24, 0x01	; 1
    1172:	29 f4       	brne	.+10     	; 0x117e <DCOMP_Audio_Host_NextAudioControlInterface+0x18>
    1174:	86 81       	ldd	r24, Z+6	; 0x06
    1176:	81 30       	cpi	r24, 0x01	; 1
    1178:	11 f4       	brne	.+4      	; 0x117e <DCOMP_Audio_Host_NextAudioControlInterface+0x18>
    117a:	87 81       	ldd	r24, Z+7	; 0x07
    117c:	81 11       	cpse	r24, r1
    117e:	82 e0       	ldi	r24, 0x02	; 2
			return DESCRIPTOR_SEARCH_Found;
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    1180:	08 95       	ret

00001182 <DCOMP_Audio_Host_NextAudioStreamInterface>:

static uint8_t DCOMP_Audio_Host_NextAudioStreamInterface(void* CurrentDescriptor)
{
    1182:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
    1184:	81 81       	ldd	r24, Z+1	; 0x01
    1186:	84 30       	cpi	r24, 0x04	; 4
    1188:	41 f4       	brne	.+16     	; 0x119a <DCOMP_Audio_Host_NextAudioStreamInterface+0x18>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		if ((Interface->Class    == AUDIO_CSCP_AudioClass) &&
    118a:	85 81       	ldd	r24, Z+5	; 0x05
    118c:	81 30       	cpi	r24, 0x01	; 1
    118e:	29 f4       	brne	.+10     	; 0x119a <DCOMP_Audio_Host_NextAudioStreamInterface+0x18>
    1190:	86 81       	ldd	r24, Z+6	; 0x06
    1192:	82 30       	cpi	r24, 0x02	; 2
    1194:	11 f4       	brne	.+4      	; 0x119a <DCOMP_Audio_Host_NextAudioStreamInterface+0x18>
    1196:	87 81       	ldd	r24, Z+7	; 0x07
    1198:	81 11       	cpse	r24, r1
    119a:	82 e0       	ldi	r24, 0x02	; 2
			return DESCRIPTOR_SEARCH_Found;
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    119c:	08 95       	ret

0000119e <DCOMP_Audio_Host_NextAudioInterfaceDataEndpoint>:

static uint8_t DCOMP_Audio_Host_NextAudioInterfaceDataEndpoint(void* CurrentDescriptor)
{
    119e:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Endpoint)
    11a0:	81 81       	ldd	r24, Z+1	; 0x01
    11a2:	85 30       	cpi	r24, 0x05	; 5
    11a4:	31 f4       	brne	.+12     	; 0x11b2 <DCOMP_Audio_Host_NextAudioInterfaceDataEndpoint+0x14>
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		if ((Endpoint->Attributes & EP_TYPE_MASK) == EP_TYPE_ISOCHRONOUS)
    11a6:	83 81       	ldd	r24, Z+3	; 0x03
    11a8:	83 70       	andi	r24, 0x03	; 3
    11aa:	81 30       	cpi	r24, 0x01	; 1
    11ac:	31 f4       	brne	.+12     	; 0x11ba <DCOMP_Audio_Host_NextAudioInterfaceDataEndpoint+0x1c>
    11ae:	80 e0       	ldi	r24, 0x00	; 0
    11b0:	08 95       	ret
		  return DESCRIPTOR_SEARCH_Found;
	}
	else if (Header->Type == DTYPE_Interface)
    11b2:	84 30       	cpi	r24, 0x04	; 4
    11b4:	11 f4       	brne	.+4      	; 0x11ba <DCOMP_Audio_Host_NextAudioInterfaceDataEndpoint+0x1c>
    11b6:	81 e0       	ldi	r24, 0x01	; 1
    11b8:	08 95       	ret
    11ba:	82 e0       	ldi	r24, 0x02	; 2
	{
		return DESCRIPTOR_SEARCH_Fail;
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    11bc:	08 95       	ret

000011be <Audio_Host_GetSetEndpointProperty>:
			                              const uint8_t DataPipeIndex,
			                              const uint8_t EndpointProperty,
			                              const uint8_t EndpointControl,
			                              const uint16_t DataLength,
			                              void* const Data)
{
    11be:	ef 92       	push	r14
    11c0:	ff 92       	push	r15
    11c2:	0f 93       	push	r16
    11c4:	1f 93       	push	r17
	if (!(AudioInterfaceInfo->State.IsActive))
    11c6:	fc 01       	movw	r30, r24
    11c8:	82 81       	ldd	r24, Z+2	; 0x02
    11ca:	88 23       	and	r24, r24
    11cc:	11 f4       	brne	.+4      	; 0x11d2 <Audio_Host_GetSetEndpointProperty+0x14>
    11ce:	81 e0       	ldi	r24, 0x01	; 1
    11d0:	27 c0       	rjmp	.+78     	; 0x1220 <Audio_Host_GetSetEndpointProperty+0x62>
	  return HOST_SENDCONTROL_DeviceDisconnected;

	uint8_t RequestType;
	uint8_t EndpointAddress;

	if (EndpointProperty & 0x80)
    11d2:	47 fd       	sbrc	r20, 7
    11d4:	02 c0       	rjmp	.+4      	; 0x11da <Audio_Host_GetSetEndpointProperty+0x1c>
    11d6:	32 e2       	ldi	r19, 0x22	; 34
    11d8:	01 c0       	rjmp	.+2      	; 0x11dc <Audio_Host_GetSetEndpointProperty+0x1e>
    11da:	32 ea       	ldi	r19, 0xA2	; 162
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    11dc:	60 93 a7 00 	sts	0x00A7, r22
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				return (((UPCFG0X >> PEPNUM0) & PIPE_EPNUM_MASK) |
    11e0:	90 91 aa 00 	lds	r25, 0x00AA
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
    11e4:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				return (((UPCFG0X >> PEPNUM0) & PIPE_EPNUM_MASK) |
    11e8:	80 73       	andi	r24, 0x30	; 48
    11ea:	80 31       	cpi	r24, 0x10	; 16
    11ec:	11 f0       	breq	.+4      	; 0x11f2 <Audio_Host_GetSetEndpointProperty+0x34>
    11ee:	80 e0       	ldi	r24, 0x00	; 0
    11f0:	01 c0       	rjmp	.+2      	; 0x11f4 <Audio_Host_GetSetEndpointProperty+0x36>
    11f2:	80 e8       	ldi	r24, 0x80	; 128
	  RequestType = (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_ENDPOINT);
	  
	Pipe_SelectPipe(DataPipeIndex);
	EndpointAddress = Pipe_GetBoundEndpointAddress();

	USB_ControlRequest = (USB_Request_Header_t)
    11f4:	30 93 26 01 	sts	0x0126, r19
    11f8:	40 93 27 01 	sts	0x0127, r20
    11fc:	10 92 28 01 	sts	0x0128, r1
    1200:	20 93 29 01 	sts	0x0129, r18
    1204:	9f 70       	andi	r25, 0x0F	; 15
    1206:	89 2b       	or	r24, r25
    1208:	80 93 2a 01 	sts	0x012A, r24
    120c:	10 92 2b 01 	sts	0x012B, r1
    1210:	10 93 2d 01 	sts	0x012D, r17
    1214:	00 93 2c 01 	sts	0x012C, r16
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1218:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = DataLength,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	return USB_Host_SendControlRequest(Data);
    121c:	c7 01       	movw	r24, r14
    121e:	4e de       	rcall	.-868    	; 0xebc <USB_Host_SendControlRequest>
}
    1220:	1f 91       	pop	r17
    1222:	0f 91       	pop	r16
    1224:	ff 90       	pop	r15
    1226:	ef 90       	pop	r14
    1228:	08 95       	ret

0000122a <Audio_Host_StartStopStreaming>:
	return DESCRIPTOR_SEARCH_NotFound;
}

uint8_t Audio_Host_StartStopStreaming(USB_ClassInfo_Audio_Host_t* const AudioInterfaceInfo,
			                          const bool EnableStreaming)
{
    122a:	fc 01       	movw	r30, r24
	if (!(AudioInterfaceInfo->State.IsActive))
    122c:	82 81       	ldd	r24, Z+2	; 0x02
    122e:	88 23       	and	r24, r24
    1230:	11 f4       	brne	.+4      	; 0x1236 <Audio_Host_StartStopStreaming+0xc>
    1232:	81 e0       	ldi	r24, 0x01	; 1
    1234:	08 95       	ret
	  return HOST_SENDCONTROL_DeviceDisconnected;

	return USB_Host_SetInterfaceAltSetting(AudioInterfaceInfo->State.StreamingInterfaceNumber,
    1236:	84 81       	ldd	r24, Z+4	; 0x04
    1238:	61 11       	cpse	r22, r1
    123a:	65 81       	ldd	r22, Z+5	; 0x05
	                                       EnableStreaming ? AudioInterfaceInfo->State.EnabledStreamingAltIndex : 0);
}
    123c:	46 cf       	rjmp	.-372    	; 0x10ca <USB_Host_SetInterfaceAltSetting>

0000123e <Audio_Host_ConfigurePipes>:
#include "Audio.h"

uint8_t Audio_Host_ConfigurePipes(USB_ClassInfo_Audio_Host_t* const AudioInterfaceInfo,
                                  uint16_t ConfigDescriptorSize,
                                  void* ConfigDescriptorData)
{
    123e:	2f 92       	push	r2
    1240:	3f 92       	push	r3
    1242:	4f 92       	push	r4
    1244:	5f 92       	push	r5
    1246:	6f 92       	push	r6
    1248:	7f 92       	push	r7
    124a:	8f 92       	push	r8
    124c:	9f 92       	push	r9
    124e:	af 92       	push	r10
    1250:	bf 92       	push	r11
    1252:	cf 92       	push	r12
    1254:	df 92       	push	r13
    1256:	ef 92       	push	r14
    1258:	ff 92       	push	r15
    125a:	0f 93       	push	r16
    125c:	1f 93       	push	r17
    125e:	df 93       	push	r29
    1260:	cf 93       	push	r28
    1262:	00 d0       	rcall	.+0      	; 0x1264 <Audio_Host_ConfigurePipes+0x26>
    1264:	00 d0       	rcall	.+0      	; 0x1266 <Audio_Host_ConfigurePipes+0x28>
    1266:	0f 92       	push	r0
    1268:	cd b7       	in	r28, 0x3d	; 61
    126a:	de b7       	in	r29, 0x3e	; 62
    126c:	6c 01       	movw	r12, r24
    126e:	7a 83       	std	Y+2, r23	; 0x02
    1270:	69 83       	std	Y+1, r22	; 0x01
    1272:	5c 83       	std	Y+4, r21	; 0x04
    1274:	4b 83       	std	Y+3, r20	; 0x03
	USB_Descriptor_Endpoint_t*  DataINEndpoint          = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint         = NULL;
	USB_Descriptor_Interface_t* AudioControlInterface   = NULL;
	USB_Descriptor_Interface_t* AudioStreamingInterface = NULL;

	memset(&AudioInterfaceInfo->State, 0x00, sizeof(AudioInterfaceInfo->State));
    1276:	02 96       	adiw	r24, 0x02	; 2
    1278:	fc 01       	movw	r30, r24
    127a:	88 e0       	ldi	r24, 0x08	; 8
    127c:	df 01       	movw	r26, r30
    127e:	1d 92       	st	X+, r1
    1280:	8a 95       	dec	r24
    1282:	e9 f7       	brne	.-6      	; 0x127e <Audio_Host_ConfigurePipes+0x40>

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
    1284:	eb 81       	ldd	r30, Y+3	; 0x03
    1286:	fc 81       	ldd	r31, Y+4	; 0x04
    1288:	81 81       	ldd	r24, Z+1	; 0x01
    128a:	82 30       	cpi	r24, 0x02	; 2
    128c:	11 f0       	breq	.+4      	; 0x1292 <Audio_Host_ConfigurePipes+0x54>
    128e:	81 e0       	ldi	r24, 0x01	; 1
    1290:	96 c0       	rjmp	.+300    	; 0x13be <Audio_Host_ConfigurePipes+0x180>
    1292:	88 24       	eor	r8, r8
    1294:	99 24       	eor	r9, r9
    1296:	aa 24       	eor	r10, r10
    1298:	bb 24       	eor	r11, r11
    129a:	44 24       	eor	r4, r4
    129c:	55 24       	eor	r5, r5
    129e:	66 24       	eor	r6, r6
    12a0:	77 24       	eor	r7, r7
		{
			if (!(AudioControlInterface) ||
			    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
			                              DCOMP_Audio_Host_NextAudioStreamInterface) != DESCRIPTOR_SEARCH_COMP_Found)
			{
				if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    12a2:	43 e0       	ldi	r20, 0x03	; 3
    12a4:	24 2e       	mov	r2, r20
    12a6:	31 2c       	mov	r3, r1
    12a8:	2c 0e       	add	r2, r28
    12aa:	3d 1e       	adc	r3, r29
    12ac:	7e 01       	movw	r14, r28
    12ae:	08 94       	sec
    12b0:	e1 1c       	adc	r14, r1
    12b2:	f1 1c       	adc	r15, r1
    12b4:	31 c0       	rjmp	.+98     	; 0x1318 <Audio_Host_ConfigurePipes+0xda>
	  return AUDIO_ENUMERROR_InvalidConfigDescriptor;

	while ((AudioInterfaceInfo->Config.DataINPipeNumber  && !(DataINEndpoint)) ||
	       (AudioInterfaceInfo->Config.DataOUTPipeNumber && !(DataOUTEndpoint)))
	{
		if (!(AudioControlInterface) ||
    12b6:	41 14       	cp	r4, r1
    12b8:	51 04       	cpc	r5, r1
    12ba:	49 f0       	breq	.+18     	; 0x12ce <Audio_Host_ConfigurePipes+0x90>
    12bc:	c7 01       	movw	r24, r14
    12be:	b1 01       	movw	r22, r2
    12c0:	4f ec       	ldi	r20, 0xCF	; 207
    12c2:	58 e0       	ldi	r21, 0x08	; 8
    12c4:	33 dd       	rcall	.-1434   	; 0xd2c <USB_GetNextDescriptorComp>
    12c6:	88 23       	and	r24, r24
    12c8:	09 f0       	breq	.+2      	; 0x12cc <Audio_Host_ConfigurePipes+0x8e>
    12ca:	91 c0       	rjmp	.+290    	; 0x13ee <Audio_Host_ConfigurePipes+0x1b0>
    12cc:	1d c0       	rjmp	.+58     	; 0x1308 <Audio_Host_ConfigurePipes+0xca>
		{
			if (!(AudioControlInterface) ||
			    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
			                              DCOMP_Audio_Host_NextAudioStreamInterface) != DESCRIPTOR_SEARCH_COMP_Found)
			{
				if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    12ce:	c7 01       	movw	r24, r14
    12d0:	b1 01       	movw	r22, r2
    12d2:	43 eb       	ldi	r20, 0xB3	; 179
    12d4:	58 e0       	ldi	r21, 0x08	; 8
    12d6:	2a dd       	rcall	.-1452   	; 0xd2c <USB_GetNextDescriptorComp>
    12d8:	88 23       	and	r24, r24
    12da:	09 f0       	breq	.+2      	; 0x12de <Audio_Host_ConfigurePipes+0xa0>
    12dc:	6f c0       	rjmp	.+222    	; 0x13bc <Audio_Host_ConfigurePipes+0x17e>
				                              DCOMP_Audio_Host_NextAudioControlInterface) != DESCRIPTOR_SEARCH_COMP_Found)
				{
					return AUDIO_ENUMERROR_NoCompatibleInterfaceFound;
				}

				AudioControlInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);			
    12de:	1b 81       	ldd	r17, Y+3	; 0x03
    12e0:	0c 81       	ldd	r16, Y+4	; 0x04

				if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    12e2:	c7 01       	movw	r24, r14
    12e4:	b1 01       	movw	r22, r2
    12e6:	41 ec       	ldi	r20, 0xC1	; 193
    12e8:	58 e0       	ldi	r21, 0x08	; 8
    12ea:	20 dd       	rcall	.-1472   	; 0xd2c <USB_GetNextDescriptorComp>
    12ec:	88 23       	and	r24, r24
    12ee:	09 f0       	breq	.+2      	; 0x12f2 <Audio_Host_ConfigurePipes+0xb4>
    12f0:	65 c0       	rjmp	.+202    	; 0x13bc <Audio_Host_ConfigurePipes+0x17e>
				                              DCOMP_Audio_Host_NextAudioControlInterface) != DESCRIPTOR_SEARCH_COMP_Found)
				{
					return AUDIO_ENUMERROR_NoCompatibleInterfaceFound;
				}

				AudioControlInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);			
    12f2:	81 2f       	mov	r24, r17
    12f4:	90 2f       	mov	r25, r16
    12f6:	9c 01       	movw	r18, r24
    12f8:	29 01       	movw	r4, r18
				{
					return AUDIO_ENUMERROR_NoCompatibleInterfaceFound;
				}
			}

			AudioStreamingInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);
    12fa:	6b 80       	ldd	r6, Y+3	; 0x03
    12fc:	7c 80       	ldd	r7, Y+4	; 0x04
    12fe:	88 24       	eor	r8, r8
    1300:	99 24       	eor	r9, r9
    1302:	aa 24       	eor	r10, r10
    1304:	bb 24       	eor	r11, r11
    1306:	08 c0       	rjmp	.+16     	; 0x1318 <Audio_Host_ConfigurePipes+0xda>
			DataOUTEndpoint = NULL;

			continue;
		}

		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Endpoint_t);
    1308:	eb 81       	ldd	r30, Y+3	; 0x03
    130a:	fc 81       	ldd	r31, Y+4	; 0x04

		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
    130c:	82 81       	ldd	r24, Z+2	; 0x02
    130e:	87 fd       	sbrc	r24, 7
    1310:	02 c0       	rjmp	.+4      	; 0x1316 <Audio_Host_ConfigurePipes+0xd8>
    1312:	5f 01       	movw	r10, r30
    1314:	01 c0       	rjmp	.+2      	; 0x1318 <Audio_Host_ConfigurePipes+0xda>
    1316:	4f 01       	movw	r8, r30
	memset(&AudioInterfaceInfo->State, 0x00, sizeof(AudioInterfaceInfo->State));

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return AUDIO_ENUMERROR_InvalidConfigDescriptor;

	while ((AudioInterfaceInfo->Config.DataINPipeNumber  && !(DataINEndpoint)) ||
    1318:	f6 01       	movw	r30, r12
    131a:	80 81       	ld	r24, Z
    131c:	88 23       	and	r24, r24
    131e:	19 f0       	breq	.+6      	; 0x1326 <Audio_Host_ConfigurePipes+0xe8>
    1320:	81 14       	cp	r8, r1
    1322:	91 04       	cpc	r9, r1
    1324:	41 f2       	breq	.-112    	; 0x12b6 <Audio_Host_ConfigurePipes+0x78>
    1326:	d6 01       	movw	r26, r12
    1328:	11 96       	adiw	r26, 0x01	; 1
    132a:	8c 91       	ld	r24, X
    132c:	88 23       	and	r24, r24
    132e:	11 f4       	brne	.+4      	; 0x1334 <Audio_Host_ConfigurePipes+0xf6>
    1330:	91 e0       	ldi	r25, 0x01	; 1
    1332:	05 c0       	rjmp	.+10     	; 0x133e <Audio_Host_ConfigurePipes+0x100>
    1334:	a1 14       	cp	r10, r1
    1336:	b1 04       	cpc	r11, r1
    1338:	09 f4       	brne	.+2      	; 0x133c <Audio_Host_ConfigurePipes+0xfe>
    133a:	bd cf       	rjmp	.-134    	; 0x12b6 <Audio_Host_ConfigurePipes+0x78>
    133c:	f9 cf       	rjmp	.-14     	; 0x1330 <Audio_Host_ConfigurePipes+0xf2>
		uint8_t  Type;
		uint8_t  Token;
		uint8_t  EndpointAddress;
		bool     DoubleBanked;

		if (PipeNum == AudioInterfaceInfo->Config.DataINPipeNumber)
    133e:	f6 01       	movw	r30, r12
    1340:	80 81       	ld	r24, Z
    1342:	98 17       	cp	r25, r24
    1344:	59 f4       	brne	.+22     	; 0x135c <Audio_Host_ConfigurePipes+0x11e>
		{
			Size            = le16_to_cpu(DataINEndpoint->EndpointSize);
    1346:	d4 01       	movw	r26, r8
    1348:	14 96       	adiw	r26, 0x04	; 4
    134a:	0d 91       	ld	r16, X+
    134c:	1c 91       	ld	r17, X
    134e:	15 97       	sbiw	r26, 0x05	; 5
			EndpointAddress = DataINEndpoint->EndpointAddress;
    1350:	12 96       	adiw	r26, 0x02	; 2
    1352:	2c 91       	ld	r18, X
			Token           = PIPE_TOKEN_IN;
			Type            = EP_TYPE_ISOCHRONOUS;
			DoubleBanked    = true;

			AudioInterfaceInfo->State.DataINPipeSize = DataINEndpoint->EndpointSize;
    1354:	17 83       	std	Z+7, r17	; 0x07
    1356:	06 83       	std	Z+6, r16	; 0x06
    1358:	40 e1       	ldi	r20, 0x10	; 16
    135a:	0e c0       	rjmp	.+28     	; 0x1378 <Audio_Host_ConfigurePipes+0x13a>
		}
		else if (PipeNum == AudioInterfaceInfo->Config.DataOUTPipeNumber)
    135c:	f6 01       	movw	r30, r12
    135e:	81 81       	ldd	r24, Z+1	; 0x01
    1360:	98 17       	cp	r25, r24
    1362:	a9 f4       	brne	.+42     	; 0x138e <Audio_Host_ConfigurePipes+0x150>
		{
			Size            = le16_to_cpu(DataOUTEndpoint->EndpointSize);
    1364:	d5 01       	movw	r26, r10
    1366:	14 96       	adiw	r26, 0x04	; 4
    1368:	0d 91       	ld	r16, X+
    136a:	1c 91       	ld	r17, X
    136c:	15 97       	sbiw	r26, 0x05	; 5
			EndpointAddress = DataOUTEndpoint->EndpointAddress;
    136e:	12 96       	adiw	r26, 0x02	; 2
    1370:	2c 91       	ld	r18, X
			Token           = PIPE_TOKEN_OUT;
			Type            = EP_TYPE_ISOCHRONOUS;
			DoubleBanked    = true;

			AudioInterfaceInfo->State.DataOUTPipeSize = DataOUTEndpoint->EndpointSize;
    1372:	11 87       	std	Z+9, r17	; 0x09
    1374:	00 87       	std	Z+8, r16	; 0x08
    1376:	40 e2       	ldi	r20, 0x20	; 32
		else
		{
			continue;
		}
		
		if (!(Pipe_ConfigurePipe(PipeNum, Type, Token, EndpointAddress, Size,
    1378:	89 2f       	mov	r24, r25
    137a:	61 e0       	ldi	r22, 0x01	; 1
    137c:	34 e0       	ldi	r19, 0x04	; 4
    137e:	e3 2e       	mov	r14, r19
    1380:	9d 83       	std	Y+5, r25	; 0x05
    1382:	22 db       	rcall	.-2492   	; 0x9c8 <Pipe_ConfigurePipe>
    1384:	9d 81       	ldd	r25, Y+5	; 0x05
    1386:	88 23       	and	r24, r24
    1388:	11 f4       	brne	.+4      	; 0x138e <Audio_Host_ConfigurePipes+0x150>
    138a:	83 e0       	ldi	r24, 0x03	; 3
    138c:	18 c0       	rjmp	.+48     	; 0x13be <Audio_Host_ConfigurePipes+0x180>
		  DataINEndpoint  = EndpointData;
		else
		  DataOUTEndpoint = EndpointData;
	}

	for (uint8_t PipeNum = 1; PipeNum < PIPE_TOTAL_PIPES; PipeNum++)
    138e:	9f 5f       	subi	r25, 0xFF	; 255
    1390:	97 30       	cpi	r25, 0x07	; 7
    1392:	a9 f6       	brne	.-86     	; 0x133e <Audio_Host_ConfigurePipes+0x100>
		{
			return AUDIO_ENUMERROR_PipeConfigurationFailed;
		}
	}

	AudioInterfaceInfo->State.ControlInterfaceNumber    = AudioControlInterface->InterfaceNumber;
    1394:	f2 01       	movw	r30, r4
    1396:	82 81       	ldd	r24, Z+2	; 0x02
    1398:	d6 01       	movw	r26, r12
    139a:	13 96       	adiw	r26, 0x03	; 3
    139c:	8c 93       	st	X, r24
    139e:	13 97       	sbiw	r26, 0x03	; 3
	AudioInterfaceInfo->State.StreamingInterfaceNumber  = AudioStreamingInterface->InterfaceNumber;
    13a0:	f3 01       	movw	r30, r6
    13a2:	82 81       	ldd	r24, Z+2	; 0x02
    13a4:	14 96       	adiw	r26, 0x04	; 4
    13a6:	8c 93       	st	X, r24
    13a8:	14 97       	sbiw	r26, 0x04	; 4
	AudioInterfaceInfo->State.EnabledStreamingAltIndex  = AudioStreamingInterface->AlternateSetting;
    13aa:	83 81       	ldd	r24, Z+3	; 0x03
    13ac:	15 96       	adiw	r26, 0x05	; 5
    13ae:	8c 93       	st	X, r24
    13b0:	15 97       	sbiw	r26, 0x05	; 5
	AudioInterfaceInfo->State.IsActive = true;
    13b2:	81 e0       	ldi	r24, 0x01	; 1
    13b4:	12 96       	adiw	r26, 0x02	; 2
    13b6:	8c 93       	st	X, r24
    13b8:	80 e0       	ldi	r24, 0x00	; 0
    13ba:	01 c0       	rjmp	.+2      	; 0x13be <Audio_Host_ConfigurePipes+0x180>
	
	return AUDIO_ENUMERROR_NoError;
    13bc:	82 e0       	ldi	r24, 0x02	; 2
}
    13be:	0f 90       	pop	r0
    13c0:	0f 90       	pop	r0
    13c2:	0f 90       	pop	r0
    13c4:	0f 90       	pop	r0
    13c6:	0f 90       	pop	r0
    13c8:	cf 91       	pop	r28
    13ca:	df 91       	pop	r29
    13cc:	1f 91       	pop	r17
    13ce:	0f 91       	pop	r16
    13d0:	ff 90       	pop	r15
    13d2:	ef 90       	pop	r14
    13d4:	df 90       	pop	r13
    13d6:	cf 90       	pop	r12
    13d8:	bf 90       	pop	r11
    13da:	af 90       	pop	r10
    13dc:	9f 90       	pop	r9
    13de:	8f 90       	pop	r8
    13e0:	7f 90       	pop	r7
    13e2:	6f 90       	pop	r6
    13e4:	5f 90       	pop	r5
    13e6:	4f 90       	pop	r4
    13e8:	3f 90       	pop	r3
    13ea:	2f 90       	pop	r2
    13ec:	08 95       	ret
	{
		if (!(AudioControlInterface) ||
		    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
		                              DCOMP_Audio_Host_NextAudioInterfaceDataEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			if (!(AudioControlInterface) ||
    13ee:	c7 01       	movw	r24, r14
    13f0:	b1 01       	movw	r22, r2
    13f2:	41 ec       	ldi	r20, 0xC1	; 193
    13f4:	58 e0       	ldi	r21, 0x08	; 8
    13f6:	9a dc       	rcall	.-1740   	; 0xd2c <USB_GetNextDescriptorComp>
    13f8:	88 23       	and	r24, r24
    13fa:	09 f0       	breq	.+2      	; 0x13fe <Audio_Host_ConfigurePipes+0x1c0>
    13fc:	68 cf       	rjmp	.-304    	; 0x12ce <Audio_Host_ConfigurePipes+0x90>
    13fe:	7d cf       	rjmp	.-262    	; 0x12fa <Audio_Host_ConfigurePipes+0xbc>

00001400 <Serial_putchar>:

FILE USARTSerialStream;

int Serial_putchar(char DataByte,
                   FILE *Stream)
{
    1400:	98 2f       	mov	r25, r24
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
    1402:	80 91 c8 00 	lds	r24, 0x00C8
    1406:	85 ff       	sbrs	r24, 5
    1408:	fc cf       	rjmp	.-8      	; 0x1402 <Serial_putchar+0x2>
				UDR1 = DataByte;
    140a:	90 93 ce 00 	sts	0x00CE, r25
	(void)Stream;

	Serial_SendByte(DataByte);
	return 0;
}
    140e:	80 e0       	ldi	r24, 0x00	; 0
    1410:	90 e0       	ldi	r25, 0x00	; 0
    1412:	08 95       	ret

00001414 <Serial_getchar>:
			 *  \return Boolean \c true if a character has been received, \c false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    1414:	80 91 c8 00 	lds	r24, 0x00C8

int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    1418:	87 fd       	sbrc	r24, 7
    141a:	03 c0       	rjmp	.+6      	; 0x1422 <Serial_getchar+0xe>
    141c:	2e ef       	ldi	r18, 0xFE	; 254
    141e:	3f ef       	ldi	r19, 0xFF	; 255
    1420:	0b c0       	rjmp	.+22     	; 0x1438 <Serial_getchar+0x24>
    1422:	80 91 c8 00 	lds	r24, 0x00C8
			 *  \return Next byte received from the USART, or a negative value if no byte has been received.
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
    1426:	87 fd       	sbrc	r24, 7
    1428:	03 c0       	rjmp	.+6      	; 0x1430 <Serial_getchar+0x1c>
    142a:	2f ef       	ldi	r18, 0xFF	; 255
    142c:	3f ef       	ldi	r19, 0xFF	; 255
    142e:	04 c0       	rjmp	.+8      	; 0x1438 <Serial_getchar+0x24>
				  return -1;
				
				return UDR1;
    1430:	80 91 ce 00 	lds	r24, 0x00CE
    1434:	28 2f       	mov	r18, r24
    1436:	30 e0       	ldi	r19, 0x00	; 0
	  return _FDEV_EOF;

	return Serial_ReceiveByte();
}
    1438:	c9 01       	movw	r24, r18
    143a:	08 95       	ret

0000143c <printf_P>:
    143c:	df 93       	push	r29
    143e:	cf 93       	push	r28
    1440:	cd b7       	in	r28, 0x3d	; 61
    1442:	de b7       	in	r29, 0x3e	; 62
    1444:	fe 01       	movw	r30, r28
    1446:	35 96       	adiw	r30, 0x05	; 5
    1448:	61 91       	ld	r22, Z+
    144a:	71 91       	ld	r23, Z+
    144c:	a0 91 3f 01 	lds	r26, 0x013F
    1450:	b0 91 40 01 	lds	r27, 0x0140
    1454:	13 96       	adiw	r26, 0x03	; 3
    1456:	8c 91       	ld	r24, X
    1458:	13 97       	sbiw	r26, 0x03	; 3
    145a:	88 60       	ori	r24, 0x08	; 8
    145c:	13 96       	adiw	r26, 0x03	; 3
    145e:	8c 93       	st	X, r24
    1460:	80 91 3f 01 	lds	r24, 0x013F
    1464:	90 91 40 01 	lds	r25, 0x0140
    1468:	af 01       	movw	r20, r30
    146a:	3f d0       	rcall	.+126    	; 0x14ea <vfprintf>
    146c:	e0 91 3f 01 	lds	r30, 0x013F
    1470:	f0 91 40 01 	lds	r31, 0x0140
    1474:	23 81       	ldd	r18, Z+3	; 0x03
    1476:	27 7f       	andi	r18, 0xF7	; 247
    1478:	23 83       	std	Z+3, r18	; 0x03
    147a:	cf 91       	pop	r28
    147c:	df 91       	pop	r29
    147e:	08 95       	ret

00001480 <puts_P>:
    1480:	0f 93       	push	r16
    1482:	1f 93       	push	r17
    1484:	cf 93       	push	r28
    1486:	df 93       	push	r29
    1488:	ec 01       	movw	r28, r24
    148a:	e0 91 3f 01 	lds	r30, 0x013F
    148e:	f0 91 40 01 	lds	r31, 0x0140
    1492:	83 81       	ldd	r24, Z+3	; 0x03
    1494:	81 ff       	sbrs	r24, 1
    1496:	21 c0       	rjmp	.+66     	; 0x14da <puts_P+0x5a>
    1498:	00 e0       	ldi	r16, 0x00	; 0
    149a:	10 e0       	ldi	r17, 0x00	; 0
    149c:	0e c0       	rjmp	.+28     	; 0x14ba <puts_P+0x3a>
    149e:	e0 91 3f 01 	lds	r30, 0x013F
    14a2:	f0 91 40 01 	lds	r31, 0x0140
    14a6:	20 85       	ldd	r18, Z+8	; 0x08
    14a8:	31 85       	ldd	r19, Z+9	; 0x09
    14aa:	bf 01       	movw	r22, r30
    14ac:	f9 01       	movw	r30, r18
    14ae:	09 95       	icall
    14b0:	89 2b       	or	r24, r25
    14b2:	11 f0       	breq	.+4      	; 0x14b8 <puts_P+0x38>
    14b4:	0f ef       	ldi	r16, 0xFF	; 255
    14b6:	1f ef       	ldi	r17, 0xFF	; 255
    14b8:	21 96       	adiw	r28, 0x01	; 1
    14ba:	fe 01       	movw	r30, r28
    14bc:	84 91       	lpm	r24, Z+
    14be:	88 23       	and	r24, r24
    14c0:	71 f7       	brne	.-36     	; 0x149e <puts_P+0x1e>
    14c2:	e0 91 3f 01 	lds	r30, 0x013F
    14c6:	f0 91 40 01 	lds	r31, 0x0140
    14ca:	20 85       	ldd	r18, Z+8	; 0x08
    14cc:	31 85       	ldd	r19, Z+9	; 0x09
    14ce:	8a e0       	ldi	r24, 0x0A	; 10
    14d0:	bf 01       	movw	r22, r30
    14d2:	f9 01       	movw	r30, r18
    14d4:	09 95       	icall
    14d6:	89 2b       	or	r24, r25
    14d8:	11 f0       	breq	.+4      	; 0x14de <puts_P+0x5e>
    14da:	0f ef       	ldi	r16, 0xFF	; 255
    14dc:	1f ef       	ldi	r17, 0xFF	; 255
    14de:	c8 01       	movw	r24, r16
    14e0:	df 91       	pop	r29
    14e2:	cf 91       	pop	r28
    14e4:	1f 91       	pop	r17
    14e6:	0f 91       	pop	r16
    14e8:	08 95       	ret

000014ea <vfprintf>:
    14ea:	2f 92       	push	r2
    14ec:	3f 92       	push	r3
    14ee:	4f 92       	push	r4
    14f0:	5f 92       	push	r5
    14f2:	6f 92       	push	r6
    14f4:	7f 92       	push	r7
    14f6:	8f 92       	push	r8
    14f8:	9f 92       	push	r9
    14fa:	af 92       	push	r10
    14fc:	bf 92       	push	r11
    14fe:	cf 92       	push	r12
    1500:	df 92       	push	r13
    1502:	ef 92       	push	r14
    1504:	ff 92       	push	r15
    1506:	0f 93       	push	r16
    1508:	1f 93       	push	r17
    150a:	df 93       	push	r29
    150c:	cf 93       	push	r28
    150e:	cd b7       	in	r28, 0x3d	; 61
    1510:	de b7       	in	r29, 0x3e	; 62
    1512:	2b 97       	sbiw	r28, 0x0b	; 11
    1514:	0f b6       	in	r0, 0x3f	; 63
    1516:	f8 94       	cli
    1518:	de bf       	out	0x3e, r29	; 62
    151a:	0f be       	out	0x3f, r0	; 63
    151c:	cd bf       	out	0x3d, r28	; 61
    151e:	3c 01       	movw	r6, r24
    1520:	2b 01       	movw	r4, r22
    1522:	5a 01       	movw	r10, r20
    1524:	fc 01       	movw	r30, r24
    1526:	17 82       	std	Z+7, r1	; 0x07
    1528:	16 82       	std	Z+6, r1	; 0x06
    152a:	83 81       	ldd	r24, Z+3	; 0x03
    152c:	81 fd       	sbrc	r24, 1
    152e:	03 c0       	rjmp	.+6      	; 0x1536 <vfprintf+0x4c>
    1530:	6f ef       	ldi	r22, 0xFF	; 255
    1532:	7f ef       	ldi	r23, 0xFF	; 255
    1534:	b9 c1       	rjmp	.+882    	; 0x18a8 <vfprintf+0x3be>
    1536:	9a e0       	ldi	r25, 0x0A	; 10
    1538:	89 2e       	mov	r8, r25
    153a:	1e 01       	movw	r2, r28
    153c:	08 94       	sec
    153e:	21 1c       	adc	r2, r1
    1540:	31 1c       	adc	r3, r1
    1542:	f3 01       	movw	r30, r6
    1544:	23 81       	ldd	r18, Z+3	; 0x03
    1546:	f2 01       	movw	r30, r4
    1548:	23 fd       	sbrc	r18, 3
    154a:	85 91       	lpm	r24, Z+
    154c:	23 ff       	sbrs	r18, 3
    154e:	81 91       	ld	r24, Z+
    1550:	2f 01       	movw	r4, r30
    1552:	88 23       	and	r24, r24
    1554:	09 f4       	brne	.+2      	; 0x1558 <vfprintf+0x6e>
    1556:	a5 c1       	rjmp	.+842    	; 0x18a2 <vfprintf+0x3b8>
    1558:	85 32       	cpi	r24, 0x25	; 37
    155a:	39 f4       	brne	.+14     	; 0x156a <vfprintf+0x80>
    155c:	23 fd       	sbrc	r18, 3
    155e:	85 91       	lpm	r24, Z+
    1560:	23 ff       	sbrs	r18, 3
    1562:	81 91       	ld	r24, Z+
    1564:	2f 01       	movw	r4, r30
    1566:	85 32       	cpi	r24, 0x25	; 37
    1568:	21 f4       	brne	.+8      	; 0x1572 <vfprintf+0x88>
    156a:	90 e0       	ldi	r25, 0x00	; 0
    156c:	b3 01       	movw	r22, r6
    156e:	cc d1       	rcall	.+920    	; 0x1908 <fputc>
    1570:	e8 cf       	rjmp	.-48     	; 0x1542 <vfprintf+0x58>
    1572:	98 2f       	mov	r25, r24
    1574:	ff 24       	eor	r15, r15
    1576:	ee 24       	eor	r14, r14
    1578:	99 24       	eor	r9, r9
    157a:	ff e1       	ldi	r31, 0x1F	; 31
    157c:	ff 15       	cp	r31, r15
    157e:	d0 f0       	brcs	.+52     	; 0x15b4 <vfprintf+0xca>
    1580:	9b 32       	cpi	r25, 0x2B	; 43
    1582:	69 f0       	breq	.+26     	; 0x159e <vfprintf+0xb4>
    1584:	9c 32       	cpi	r25, 0x2C	; 44
    1586:	28 f4       	brcc	.+10     	; 0x1592 <vfprintf+0xa8>
    1588:	90 32       	cpi	r25, 0x20	; 32
    158a:	59 f0       	breq	.+22     	; 0x15a2 <vfprintf+0xb8>
    158c:	93 32       	cpi	r25, 0x23	; 35
    158e:	91 f4       	brne	.+36     	; 0x15b4 <vfprintf+0xca>
    1590:	0e c0       	rjmp	.+28     	; 0x15ae <vfprintf+0xc4>
    1592:	9d 32       	cpi	r25, 0x2D	; 45
    1594:	49 f0       	breq	.+18     	; 0x15a8 <vfprintf+0xbe>
    1596:	90 33       	cpi	r25, 0x30	; 48
    1598:	69 f4       	brne	.+26     	; 0x15b4 <vfprintf+0xca>
    159a:	41 e0       	ldi	r20, 0x01	; 1
    159c:	24 c0       	rjmp	.+72     	; 0x15e6 <vfprintf+0xfc>
    159e:	52 e0       	ldi	r21, 0x02	; 2
    15a0:	f5 2a       	or	r15, r21
    15a2:	84 e0       	ldi	r24, 0x04	; 4
    15a4:	f8 2a       	or	r15, r24
    15a6:	28 c0       	rjmp	.+80     	; 0x15f8 <vfprintf+0x10e>
    15a8:	98 e0       	ldi	r25, 0x08	; 8
    15aa:	f9 2a       	or	r15, r25
    15ac:	25 c0       	rjmp	.+74     	; 0x15f8 <vfprintf+0x10e>
    15ae:	e0 e1       	ldi	r30, 0x10	; 16
    15b0:	fe 2a       	or	r15, r30
    15b2:	22 c0       	rjmp	.+68     	; 0x15f8 <vfprintf+0x10e>
    15b4:	f7 fc       	sbrc	r15, 7
    15b6:	29 c0       	rjmp	.+82     	; 0x160a <vfprintf+0x120>
    15b8:	89 2f       	mov	r24, r25
    15ba:	80 53       	subi	r24, 0x30	; 48
    15bc:	8a 30       	cpi	r24, 0x0A	; 10
    15be:	70 f4       	brcc	.+28     	; 0x15dc <vfprintf+0xf2>
    15c0:	f6 fe       	sbrs	r15, 6
    15c2:	05 c0       	rjmp	.+10     	; 0x15ce <vfprintf+0xe4>
    15c4:	98 9c       	mul	r9, r8
    15c6:	90 2c       	mov	r9, r0
    15c8:	11 24       	eor	r1, r1
    15ca:	98 0e       	add	r9, r24
    15cc:	15 c0       	rjmp	.+42     	; 0x15f8 <vfprintf+0x10e>
    15ce:	e8 9c       	mul	r14, r8
    15d0:	e0 2c       	mov	r14, r0
    15d2:	11 24       	eor	r1, r1
    15d4:	e8 0e       	add	r14, r24
    15d6:	f0 e2       	ldi	r31, 0x20	; 32
    15d8:	ff 2a       	or	r15, r31
    15da:	0e c0       	rjmp	.+28     	; 0x15f8 <vfprintf+0x10e>
    15dc:	9e 32       	cpi	r25, 0x2E	; 46
    15de:	29 f4       	brne	.+10     	; 0x15ea <vfprintf+0x100>
    15e0:	f6 fc       	sbrc	r15, 6
    15e2:	5f c1       	rjmp	.+702    	; 0x18a2 <vfprintf+0x3b8>
    15e4:	40 e4       	ldi	r20, 0x40	; 64
    15e6:	f4 2a       	or	r15, r20
    15e8:	07 c0       	rjmp	.+14     	; 0x15f8 <vfprintf+0x10e>
    15ea:	9c 36       	cpi	r25, 0x6C	; 108
    15ec:	19 f4       	brne	.+6      	; 0x15f4 <vfprintf+0x10a>
    15ee:	50 e8       	ldi	r21, 0x80	; 128
    15f0:	f5 2a       	or	r15, r21
    15f2:	02 c0       	rjmp	.+4      	; 0x15f8 <vfprintf+0x10e>
    15f4:	98 36       	cpi	r25, 0x68	; 104
    15f6:	49 f4       	brne	.+18     	; 0x160a <vfprintf+0x120>
    15f8:	f2 01       	movw	r30, r4
    15fa:	23 fd       	sbrc	r18, 3
    15fc:	95 91       	lpm	r25, Z+
    15fe:	23 ff       	sbrs	r18, 3
    1600:	91 91       	ld	r25, Z+
    1602:	2f 01       	movw	r4, r30
    1604:	99 23       	and	r25, r25
    1606:	09 f0       	breq	.+2      	; 0x160a <vfprintf+0x120>
    1608:	b8 cf       	rjmp	.-144    	; 0x157a <vfprintf+0x90>
    160a:	89 2f       	mov	r24, r25
    160c:	85 54       	subi	r24, 0x45	; 69
    160e:	83 30       	cpi	r24, 0x03	; 3
    1610:	18 f0       	brcs	.+6      	; 0x1618 <vfprintf+0x12e>
    1612:	80 52       	subi	r24, 0x20	; 32
    1614:	83 30       	cpi	r24, 0x03	; 3
    1616:	38 f4       	brcc	.+14     	; 0x1626 <vfprintf+0x13c>
    1618:	44 e0       	ldi	r20, 0x04	; 4
    161a:	50 e0       	ldi	r21, 0x00	; 0
    161c:	a4 0e       	add	r10, r20
    161e:	b5 1e       	adc	r11, r21
    1620:	5f e3       	ldi	r21, 0x3F	; 63
    1622:	59 83       	std	Y+1, r21	; 0x01
    1624:	0f c0       	rjmp	.+30     	; 0x1644 <vfprintf+0x15a>
    1626:	93 36       	cpi	r25, 0x63	; 99
    1628:	31 f0       	breq	.+12     	; 0x1636 <vfprintf+0x14c>
    162a:	93 37       	cpi	r25, 0x73	; 115
    162c:	79 f0       	breq	.+30     	; 0x164c <vfprintf+0x162>
    162e:	93 35       	cpi	r25, 0x53	; 83
    1630:	09 f0       	breq	.+2      	; 0x1634 <vfprintf+0x14a>
    1632:	52 c0       	rjmp	.+164    	; 0x16d8 <vfprintf+0x1ee>
    1634:	1f c0       	rjmp	.+62     	; 0x1674 <vfprintf+0x18a>
    1636:	f5 01       	movw	r30, r10
    1638:	80 81       	ld	r24, Z
    163a:	89 83       	std	Y+1, r24	; 0x01
    163c:	42 e0       	ldi	r20, 0x02	; 2
    163e:	50 e0       	ldi	r21, 0x00	; 0
    1640:	a4 0e       	add	r10, r20
    1642:	b5 1e       	adc	r11, r21
    1644:	61 01       	movw	r12, r2
    1646:	01 e0       	ldi	r16, 0x01	; 1
    1648:	10 e0       	ldi	r17, 0x00	; 0
    164a:	11 c0       	rjmp	.+34     	; 0x166e <vfprintf+0x184>
    164c:	f5 01       	movw	r30, r10
    164e:	c0 80       	ld	r12, Z
    1650:	d1 80       	ldd	r13, Z+1	; 0x01
    1652:	f6 fc       	sbrc	r15, 6
    1654:	03 c0       	rjmp	.+6      	; 0x165c <vfprintf+0x172>
    1656:	6f ef       	ldi	r22, 0xFF	; 255
    1658:	7f ef       	ldi	r23, 0xFF	; 255
    165a:	02 c0       	rjmp	.+4      	; 0x1660 <vfprintf+0x176>
    165c:	69 2d       	mov	r22, r9
    165e:	70 e0       	ldi	r23, 0x00	; 0
    1660:	42 e0       	ldi	r20, 0x02	; 2
    1662:	50 e0       	ldi	r21, 0x00	; 0
    1664:	a4 0e       	add	r10, r20
    1666:	b5 1e       	adc	r11, r21
    1668:	c6 01       	movw	r24, r12
    166a:	43 d1       	rcall	.+646    	; 0x18f2 <strnlen>
    166c:	8c 01       	movw	r16, r24
    166e:	5f e7       	ldi	r21, 0x7F	; 127
    1670:	f5 22       	and	r15, r21
    1672:	13 c0       	rjmp	.+38     	; 0x169a <vfprintf+0x1b0>
    1674:	f5 01       	movw	r30, r10
    1676:	c0 80       	ld	r12, Z
    1678:	d1 80       	ldd	r13, Z+1	; 0x01
    167a:	f6 fc       	sbrc	r15, 6
    167c:	03 c0       	rjmp	.+6      	; 0x1684 <vfprintf+0x19a>
    167e:	6f ef       	ldi	r22, 0xFF	; 255
    1680:	7f ef       	ldi	r23, 0xFF	; 255
    1682:	02 c0       	rjmp	.+4      	; 0x1688 <vfprintf+0x19e>
    1684:	69 2d       	mov	r22, r9
    1686:	70 e0       	ldi	r23, 0x00	; 0
    1688:	42 e0       	ldi	r20, 0x02	; 2
    168a:	50 e0       	ldi	r21, 0x00	; 0
    168c:	a4 0e       	add	r10, r20
    168e:	b5 1e       	adc	r11, r21
    1690:	c6 01       	movw	r24, r12
    1692:	24 d1       	rcall	.+584    	; 0x18dc <strnlen_P>
    1694:	8c 01       	movw	r16, r24
    1696:	50 e8       	ldi	r21, 0x80	; 128
    1698:	f5 2a       	or	r15, r21
    169a:	f3 fe       	sbrs	r15, 3
    169c:	06 c0       	rjmp	.+12     	; 0x16aa <vfprintf+0x1c0>
    169e:	18 c0       	rjmp	.+48     	; 0x16d0 <vfprintf+0x1e6>
    16a0:	80 e2       	ldi	r24, 0x20	; 32
    16a2:	90 e0       	ldi	r25, 0x00	; 0
    16a4:	b3 01       	movw	r22, r6
    16a6:	30 d1       	rcall	.+608    	; 0x1908 <fputc>
    16a8:	ea 94       	dec	r14
    16aa:	8e 2d       	mov	r24, r14
    16ac:	90 e0       	ldi	r25, 0x00	; 0
    16ae:	08 17       	cp	r16, r24
    16b0:	19 07       	cpc	r17, r25
    16b2:	b0 f3       	brcs	.-20     	; 0x16a0 <vfprintf+0x1b6>
    16b4:	0d c0       	rjmp	.+26     	; 0x16d0 <vfprintf+0x1e6>
    16b6:	f6 01       	movw	r30, r12
    16b8:	f7 fc       	sbrc	r15, 7
    16ba:	85 91       	lpm	r24, Z+
    16bc:	f7 fe       	sbrs	r15, 7
    16be:	81 91       	ld	r24, Z+
    16c0:	6f 01       	movw	r12, r30
    16c2:	90 e0       	ldi	r25, 0x00	; 0
    16c4:	b3 01       	movw	r22, r6
    16c6:	20 d1       	rcall	.+576    	; 0x1908 <fputc>
    16c8:	e1 10       	cpse	r14, r1
    16ca:	ea 94       	dec	r14
    16cc:	01 50       	subi	r16, 0x01	; 1
    16ce:	10 40       	sbci	r17, 0x00	; 0
    16d0:	01 15       	cp	r16, r1
    16d2:	11 05       	cpc	r17, r1
    16d4:	81 f7       	brne	.-32     	; 0x16b6 <vfprintf+0x1cc>
    16d6:	e2 c0       	rjmp	.+452    	; 0x189c <vfprintf+0x3b2>
    16d8:	94 36       	cpi	r25, 0x64	; 100
    16da:	11 f0       	breq	.+4      	; 0x16e0 <vfprintf+0x1f6>
    16dc:	99 36       	cpi	r25, 0x69	; 105
    16de:	61 f5       	brne	.+88     	; 0x1738 <vfprintf+0x24e>
    16e0:	f7 fe       	sbrs	r15, 7
    16e2:	08 c0       	rjmp	.+16     	; 0x16f4 <vfprintf+0x20a>
    16e4:	f5 01       	movw	r30, r10
    16e6:	20 81       	ld	r18, Z
    16e8:	31 81       	ldd	r19, Z+1	; 0x01
    16ea:	42 81       	ldd	r20, Z+2	; 0x02
    16ec:	53 81       	ldd	r21, Z+3	; 0x03
    16ee:	84 e0       	ldi	r24, 0x04	; 4
    16f0:	90 e0       	ldi	r25, 0x00	; 0
    16f2:	0a c0       	rjmp	.+20     	; 0x1708 <vfprintf+0x21e>
    16f4:	f5 01       	movw	r30, r10
    16f6:	80 81       	ld	r24, Z
    16f8:	91 81       	ldd	r25, Z+1	; 0x01
    16fa:	9c 01       	movw	r18, r24
    16fc:	44 27       	eor	r20, r20
    16fe:	37 fd       	sbrc	r19, 7
    1700:	40 95       	com	r20
    1702:	54 2f       	mov	r21, r20
    1704:	82 e0       	ldi	r24, 0x02	; 2
    1706:	90 e0       	ldi	r25, 0x00	; 0
    1708:	a8 0e       	add	r10, r24
    170a:	b9 1e       	adc	r11, r25
    170c:	9f e6       	ldi	r25, 0x6F	; 111
    170e:	f9 22       	and	r15, r25
    1710:	57 ff       	sbrs	r21, 7
    1712:	09 c0       	rjmp	.+18     	; 0x1726 <vfprintf+0x23c>
    1714:	50 95       	com	r21
    1716:	40 95       	com	r20
    1718:	30 95       	com	r19
    171a:	21 95       	neg	r18
    171c:	3f 4f       	sbci	r19, 0xFF	; 255
    171e:	4f 4f       	sbci	r20, 0xFF	; 255
    1720:	5f 4f       	sbci	r21, 0xFF	; 255
    1722:	e0 e8       	ldi	r30, 0x80	; 128
    1724:	fe 2a       	or	r15, r30
    1726:	ca 01       	movw	r24, r20
    1728:	b9 01       	movw	r22, r18
    172a:	a1 01       	movw	r20, r2
    172c:	2a e0       	ldi	r18, 0x0A	; 10
    172e:	30 e0       	ldi	r19, 0x00	; 0
    1730:	17 d1       	rcall	.+558    	; 0x1960 <__ultoa_invert>
    1732:	d8 2e       	mov	r13, r24
    1734:	d2 18       	sub	r13, r2
    1736:	3f c0       	rjmp	.+126    	; 0x17b6 <vfprintf+0x2cc>
    1738:	95 37       	cpi	r25, 0x75	; 117
    173a:	29 f4       	brne	.+10     	; 0x1746 <vfprintf+0x25c>
    173c:	1f 2d       	mov	r17, r15
    173e:	1f 7e       	andi	r17, 0xEF	; 239
    1740:	2a e0       	ldi	r18, 0x0A	; 10
    1742:	30 e0       	ldi	r19, 0x00	; 0
    1744:	1d c0       	rjmp	.+58     	; 0x1780 <vfprintf+0x296>
    1746:	1f 2d       	mov	r17, r15
    1748:	19 7f       	andi	r17, 0xF9	; 249
    174a:	9f 36       	cpi	r25, 0x6F	; 111
    174c:	61 f0       	breq	.+24     	; 0x1766 <vfprintf+0x27c>
    174e:	90 37       	cpi	r25, 0x70	; 112
    1750:	20 f4       	brcc	.+8      	; 0x175a <vfprintf+0x270>
    1752:	98 35       	cpi	r25, 0x58	; 88
    1754:	09 f0       	breq	.+2      	; 0x1758 <vfprintf+0x26e>
    1756:	a5 c0       	rjmp	.+330    	; 0x18a2 <vfprintf+0x3b8>
    1758:	0f c0       	rjmp	.+30     	; 0x1778 <vfprintf+0x28e>
    175a:	90 37       	cpi	r25, 0x70	; 112
    175c:	39 f0       	breq	.+14     	; 0x176c <vfprintf+0x282>
    175e:	98 37       	cpi	r25, 0x78	; 120
    1760:	09 f0       	breq	.+2      	; 0x1764 <vfprintf+0x27a>
    1762:	9f c0       	rjmp	.+318    	; 0x18a2 <vfprintf+0x3b8>
    1764:	04 c0       	rjmp	.+8      	; 0x176e <vfprintf+0x284>
    1766:	28 e0       	ldi	r18, 0x08	; 8
    1768:	30 e0       	ldi	r19, 0x00	; 0
    176a:	0a c0       	rjmp	.+20     	; 0x1780 <vfprintf+0x296>
    176c:	10 61       	ori	r17, 0x10	; 16
    176e:	14 fd       	sbrc	r17, 4
    1770:	14 60       	ori	r17, 0x04	; 4
    1772:	20 e1       	ldi	r18, 0x10	; 16
    1774:	30 e0       	ldi	r19, 0x00	; 0
    1776:	04 c0       	rjmp	.+8      	; 0x1780 <vfprintf+0x296>
    1778:	14 fd       	sbrc	r17, 4
    177a:	16 60       	ori	r17, 0x06	; 6
    177c:	20 e1       	ldi	r18, 0x10	; 16
    177e:	32 e0       	ldi	r19, 0x02	; 2
    1780:	17 ff       	sbrs	r17, 7
    1782:	08 c0       	rjmp	.+16     	; 0x1794 <vfprintf+0x2aa>
    1784:	f5 01       	movw	r30, r10
    1786:	60 81       	ld	r22, Z
    1788:	71 81       	ldd	r23, Z+1	; 0x01
    178a:	82 81       	ldd	r24, Z+2	; 0x02
    178c:	93 81       	ldd	r25, Z+3	; 0x03
    178e:	44 e0       	ldi	r20, 0x04	; 4
    1790:	50 e0       	ldi	r21, 0x00	; 0
    1792:	08 c0       	rjmp	.+16     	; 0x17a4 <vfprintf+0x2ba>
    1794:	f5 01       	movw	r30, r10
    1796:	80 81       	ld	r24, Z
    1798:	91 81       	ldd	r25, Z+1	; 0x01
    179a:	bc 01       	movw	r22, r24
    179c:	80 e0       	ldi	r24, 0x00	; 0
    179e:	90 e0       	ldi	r25, 0x00	; 0
    17a0:	42 e0       	ldi	r20, 0x02	; 2
    17a2:	50 e0       	ldi	r21, 0x00	; 0
    17a4:	a4 0e       	add	r10, r20
    17a6:	b5 1e       	adc	r11, r21
    17a8:	a1 01       	movw	r20, r2
    17aa:	da d0       	rcall	.+436    	; 0x1960 <__ultoa_invert>
    17ac:	d8 2e       	mov	r13, r24
    17ae:	d2 18       	sub	r13, r2
    17b0:	8f e7       	ldi	r24, 0x7F	; 127
    17b2:	f8 2e       	mov	r15, r24
    17b4:	f1 22       	and	r15, r17
    17b6:	f6 fe       	sbrs	r15, 6
    17b8:	0b c0       	rjmp	.+22     	; 0x17d0 <vfprintf+0x2e6>
    17ba:	5e ef       	ldi	r21, 0xFE	; 254
    17bc:	f5 22       	and	r15, r21
    17be:	d9 14       	cp	r13, r9
    17c0:	38 f4       	brcc	.+14     	; 0x17d0 <vfprintf+0x2e6>
    17c2:	f4 fe       	sbrs	r15, 4
    17c4:	07 c0       	rjmp	.+14     	; 0x17d4 <vfprintf+0x2ea>
    17c6:	f2 fc       	sbrc	r15, 2
    17c8:	05 c0       	rjmp	.+10     	; 0x17d4 <vfprintf+0x2ea>
    17ca:	8f ee       	ldi	r24, 0xEF	; 239
    17cc:	f8 22       	and	r15, r24
    17ce:	02 c0       	rjmp	.+4      	; 0x17d4 <vfprintf+0x2ea>
    17d0:	1d 2d       	mov	r17, r13
    17d2:	01 c0       	rjmp	.+2      	; 0x17d6 <vfprintf+0x2ec>
    17d4:	19 2d       	mov	r17, r9
    17d6:	f4 fe       	sbrs	r15, 4
    17d8:	0d c0       	rjmp	.+26     	; 0x17f4 <vfprintf+0x30a>
    17da:	fe 01       	movw	r30, r28
    17dc:	ed 0d       	add	r30, r13
    17de:	f1 1d       	adc	r31, r1
    17e0:	80 81       	ld	r24, Z
    17e2:	80 33       	cpi	r24, 0x30	; 48
    17e4:	19 f4       	brne	.+6      	; 0x17ec <vfprintf+0x302>
    17e6:	99 ee       	ldi	r25, 0xE9	; 233
    17e8:	f9 22       	and	r15, r25
    17ea:	08 c0       	rjmp	.+16     	; 0x17fc <vfprintf+0x312>
    17ec:	1f 5f       	subi	r17, 0xFF	; 255
    17ee:	f2 fe       	sbrs	r15, 2
    17f0:	05 c0       	rjmp	.+10     	; 0x17fc <vfprintf+0x312>
    17f2:	03 c0       	rjmp	.+6      	; 0x17fa <vfprintf+0x310>
    17f4:	8f 2d       	mov	r24, r15
    17f6:	86 78       	andi	r24, 0x86	; 134
    17f8:	09 f0       	breq	.+2      	; 0x17fc <vfprintf+0x312>
    17fa:	1f 5f       	subi	r17, 0xFF	; 255
    17fc:	0f 2d       	mov	r16, r15
    17fe:	f3 fc       	sbrc	r15, 3
    1800:	13 c0       	rjmp	.+38     	; 0x1828 <vfprintf+0x33e>
    1802:	f0 fe       	sbrs	r15, 0
    1804:	0e c0       	rjmp	.+28     	; 0x1822 <vfprintf+0x338>
    1806:	1e 15       	cp	r17, r14
    1808:	10 f0       	brcs	.+4      	; 0x180e <vfprintf+0x324>
    180a:	9d 2c       	mov	r9, r13
    180c:	0a c0       	rjmp	.+20     	; 0x1822 <vfprintf+0x338>
    180e:	9d 2c       	mov	r9, r13
    1810:	9e 0c       	add	r9, r14
    1812:	91 1a       	sub	r9, r17
    1814:	1e 2d       	mov	r17, r14
    1816:	05 c0       	rjmp	.+10     	; 0x1822 <vfprintf+0x338>
    1818:	80 e2       	ldi	r24, 0x20	; 32
    181a:	90 e0       	ldi	r25, 0x00	; 0
    181c:	b3 01       	movw	r22, r6
    181e:	74 d0       	rcall	.+232    	; 0x1908 <fputc>
    1820:	1f 5f       	subi	r17, 0xFF	; 255
    1822:	1e 15       	cp	r17, r14
    1824:	c8 f3       	brcs	.-14     	; 0x1818 <vfprintf+0x32e>
    1826:	04 c0       	rjmp	.+8      	; 0x1830 <vfprintf+0x346>
    1828:	1e 15       	cp	r17, r14
    182a:	10 f4       	brcc	.+4      	; 0x1830 <vfprintf+0x346>
    182c:	e1 1a       	sub	r14, r17
    182e:	01 c0       	rjmp	.+2      	; 0x1832 <vfprintf+0x348>
    1830:	ee 24       	eor	r14, r14
    1832:	04 ff       	sbrs	r16, 4
    1834:	0e c0       	rjmp	.+28     	; 0x1852 <vfprintf+0x368>
    1836:	80 e3       	ldi	r24, 0x30	; 48
    1838:	90 e0       	ldi	r25, 0x00	; 0
    183a:	b3 01       	movw	r22, r6
    183c:	65 d0       	rcall	.+202    	; 0x1908 <fputc>
    183e:	02 ff       	sbrs	r16, 2
    1840:	1b c0       	rjmp	.+54     	; 0x1878 <vfprintf+0x38e>
    1842:	01 fd       	sbrc	r16, 1
    1844:	03 c0       	rjmp	.+6      	; 0x184c <vfprintf+0x362>
    1846:	88 e7       	ldi	r24, 0x78	; 120
    1848:	90 e0       	ldi	r25, 0x00	; 0
    184a:	0e c0       	rjmp	.+28     	; 0x1868 <vfprintf+0x37e>
    184c:	88 e5       	ldi	r24, 0x58	; 88
    184e:	90 e0       	ldi	r25, 0x00	; 0
    1850:	0b c0       	rjmp	.+22     	; 0x1868 <vfprintf+0x37e>
    1852:	80 2f       	mov	r24, r16
    1854:	86 78       	andi	r24, 0x86	; 134
    1856:	81 f0       	breq	.+32     	; 0x1878 <vfprintf+0x38e>
    1858:	01 ff       	sbrs	r16, 1
    185a:	02 c0       	rjmp	.+4      	; 0x1860 <vfprintf+0x376>
    185c:	8b e2       	ldi	r24, 0x2B	; 43
    185e:	01 c0       	rjmp	.+2      	; 0x1862 <vfprintf+0x378>
    1860:	80 e2       	ldi	r24, 0x20	; 32
    1862:	f7 fc       	sbrc	r15, 7
    1864:	8d e2       	ldi	r24, 0x2D	; 45
    1866:	90 e0       	ldi	r25, 0x00	; 0
    1868:	b3 01       	movw	r22, r6
    186a:	4e d0       	rcall	.+156    	; 0x1908 <fputc>
    186c:	05 c0       	rjmp	.+10     	; 0x1878 <vfprintf+0x38e>
    186e:	80 e3       	ldi	r24, 0x30	; 48
    1870:	90 e0       	ldi	r25, 0x00	; 0
    1872:	b3 01       	movw	r22, r6
    1874:	49 d0       	rcall	.+146    	; 0x1908 <fputc>
    1876:	9a 94       	dec	r9
    1878:	d9 14       	cp	r13, r9
    187a:	c8 f3       	brcs	.-14     	; 0x186e <vfprintf+0x384>
    187c:	da 94       	dec	r13
    187e:	f1 01       	movw	r30, r2
    1880:	ed 0d       	add	r30, r13
    1882:	f1 1d       	adc	r31, r1
    1884:	80 81       	ld	r24, Z
    1886:	90 e0       	ldi	r25, 0x00	; 0
    1888:	b3 01       	movw	r22, r6
    188a:	3e d0       	rcall	.+124    	; 0x1908 <fputc>
    188c:	dd 20       	and	r13, r13
    188e:	b1 f7       	brne	.-20     	; 0x187c <vfprintf+0x392>
    1890:	05 c0       	rjmp	.+10     	; 0x189c <vfprintf+0x3b2>
    1892:	80 e2       	ldi	r24, 0x20	; 32
    1894:	90 e0       	ldi	r25, 0x00	; 0
    1896:	b3 01       	movw	r22, r6
    1898:	37 d0       	rcall	.+110    	; 0x1908 <fputc>
    189a:	ea 94       	dec	r14
    189c:	ee 20       	and	r14, r14
    189e:	c9 f7       	brne	.-14     	; 0x1892 <vfprintf+0x3a8>
    18a0:	50 ce       	rjmp	.-864    	; 0x1542 <vfprintf+0x58>
    18a2:	f3 01       	movw	r30, r6
    18a4:	66 81       	ldd	r22, Z+6	; 0x06
    18a6:	77 81       	ldd	r23, Z+7	; 0x07
    18a8:	cb 01       	movw	r24, r22
    18aa:	2b 96       	adiw	r28, 0x0b	; 11
    18ac:	0f b6       	in	r0, 0x3f	; 63
    18ae:	f8 94       	cli
    18b0:	de bf       	out	0x3e, r29	; 62
    18b2:	0f be       	out	0x3f, r0	; 63
    18b4:	cd bf       	out	0x3d, r28	; 61
    18b6:	cf 91       	pop	r28
    18b8:	df 91       	pop	r29
    18ba:	1f 91       	pop	r17
    18bc:	0f 91       	pop	r16
    18be:	ff 90       	pop	r15
    18c0:	ef 90       	pop	r14
    18c2:	df 90       	pop	r13
    18c4:	cf 90       	pop	r12
    18c6:	bf 90       	pop	r11
    18c8:	af 90       	pop	r10
    18ca:	9f 90       	pop	r9
    18cc:	8f 90       	pop	r8
    18ce:	7f 90       	pop	r7
    18d0:	6f 90       	pop	r6
    18d2:	5f 90       	pop	r5
    18d4:	4f 90       	pop	r4
    18d6:	3f 90       	pop	r3
    18d8:	2f 90       	pop	r2
    18da:	08 95       	ret

000018dc <strnlen_P>:
    18dc:	fc 01       	movw	r30, r24
    18de:	05 90       	lpm	r0, Z+
    18e0:	61 50       	subi	r22, 0x01	; 1
    18e2:	70 40       	sbci	r23, 0x00	; 0
    18e4:	01 10       	cpse	r0, r1
    18e6:	d8 f7       	brcc	.-10     	; 0x18de <strnlen_P+0x2>
    18e8:	80 95       	com	r24
    18ea:	90 95       	com	r25
    18ec:	8e 0f       	add	r24, r30
    18ee:	9f 1f       	adc	r25, r31
    18f0:	08 95       	ret

000018f2 <strnlen>:
    18f2:	fc 01       	movw	r30, r24
    18f4:	61 50       	subi	r22, 0x01	; 1
    18f6:	70 40       	sbci	r23, 0x00	; 0
    18f8:	01 90       	ld	r0, Z+
    18fa:	01 10       	cpse	r0, r1
    18fc:	d8 f7       	brcc	.-10     	; 0x18f4 <strnlen+0x2>
    18fe:	80 95       	com	r24
    1900:	90 95       	com	r25
    1902:	8e 0f       	add	r24, r30
    1904:	9f 1f       	adc	r25, r31
    1906:	08 95       	ret

00001908 <fputc>:
    1908:	0f 93       	push	r16
    190a:	1f 93       	push	r17
    190c:	cf 93       	push	r28
    190e:	df 93       	push	r29
    1910:	8c 01       	movw	r16, r24
    1912:	eb 01       	movw	r28, r22
    1914:	8b 81       	ldd	r24, Y+3	; 0x03
    1916:	81 ff       	sbrs	r24, 1
    1918:	1b c0       	rjmp	.+54     	; 0x1950 <fputc+0x48>
    191a:	82 ff       	sbrs	r24, 2
    191c:	0d c0       	rjmp	.+26     	; 0x1938 <fputc+0x30>
    191e:	2e 81       	ldd	r18, Y+6	; 0x06
    1920:	3f 81       	ldd	r19, Y+7	; 0x07
    1922:	8c 81       	ldd	r24, Y+4	; 0x04
    1924:	9d 81       	ldd	r25, Y+5	; 0x05
    1926:	28 17       	cp	r18, r24
    1928:	39 07       	cpc	r19, r25
    192a:	64 f4       	brge	.+24     	; 0x1944 <fputc+0x3c>
    192c:	e8 81       	ld	r30, Y
    192e:	f9 81       	ldd	r31, Y+1	; 0x01
    1930:	01 93       	st	Z+, r16
    1932:	f9 83       	std	Y+1, r31	; 0x01
    1934:	e8 83       	st	Y, r30
    1936:	06 c0       	rjmp	.+12     	; 0x1944 <fputc+0x3c>
    1938:	e8 85       	ldd	r30, Y+8	; 0x08
    193a:	f9 85       	ldd	r31, Y+9	; 0x09
    193c:	80 2f       	mov	r24, r16
    193e:	09 95       	icall
    1940:	89 2b       	or	r24, r25
    1942:	31 f4       	brne	.+12     	; 0x1950 <fputc+0x48>
    1944:	8e 81       	ldd	r24, Y+6	; 0x06
    1946:	9f 81       	ldd	r25, Y+7	; 0x07
    1948:	01 96       	adiw	r24, 0x01	; 1
    194a:	9f 83       	std	Y+7, r25	; 0x07
    194c:	8e 83       	std	Y+6, r24	; 0x06
    194e:	02 c0       	rjmp	.+4      	; 0x1954 <fputc+0x4c>
    1950:	0f ef       	ldi	r16, 0xFF	; 255
    1952:	1f ef       	ldi	r17, 0xFF	; 255
    1954:	c8 01       	movw	r24, r16
    1956:	df 91       	pop	r29
    1958:	cf 91       	pop	r28
    195a:	1f 91       	pop	r17
    195c:	0f 91       	pop	r16
    195e:	08 95       	ret

00001960 <__ultoa_invert>:
    1960:	fa 01       	movw	r30, r20
    1962:	aa 27       	eor	r26, r26
    1964:	28 30       	cpi	r18, 0x08	; 8
    1966:	51 f1       	breq	.+84     	; 0x19bc <__ultoa_invert+0x5c>
    1968:	20 31       	cpi	r18, 0x10	; 16
    196a:	81 f1       	breq	.+96     	; 0x19cc <__ultoa_invert+0x6c>
    196c:	e8 94       	clt
    196e:	6f 93       	push	r22
    1970:	6e 7f       	andi	r22, 0xFE	; 254
    1972:	6e 5f       	subi	r22, 0xFE	; 254
    1974:	7f 4f       	sbci	r23, 0xFF	; 255
    1976:	8f 4f       	sbci	r24, 0xFF	; 255
    1978:	9f 4f       	sbci	r25, 0xFF	; 255
    197a:	af 4f       	sbci	r26, 0xFF	; 255
    197c:	b1 e0       	ldi	r27, 0x01	; 1
    197e:	3e d0       	rcall	.+124    	; 0x19fc <__ultoa_invert+0x9c>
    1980:	b4 e0       	ldi	r27, 0x04	; 4
    1982:	3c d0       	rcall	.+120    	; 0x19fc <__ultoa_invert+0x9c>
    1984:	67 0f       	add	r22, r23
    1986:	78 1f       	adc	r23, r24
    1988:	89 1f       	adc	r24, r25
    198a:	9a 1f       	adc	r25, r26
    198c:	a1 1d       	adc	r26, r1
    198e:	68 0f       	add	r22, r24
    1990:	79 1f       	adc	r23, r25
    1992:	8a 1f       	adc	r24, r26
    1994:	91 1d       	adc	r25, r1
    1996:	a1 1d       	adc	r26, r1
    1998:	6a 0f       	add	r22, r26
    199a:	71 1d       	adc	r23, r1
    199c:	81 1d       	adc	r24, r1
    199e:	91 1d       	adc	r25, r1
    19a0:	a1 1d       	adc	r26, r1
    19a2:	20 d0       	rcall	.+64     	; 0x19e4 <__ultoa_invert+0x84>
    19a4:	09 f4       	brne	.+2      	; 0x19a8 <__ultoa_invert+0x48>
    19a6:	68 94       	set
    19a8:	3f 91       	pop	r19
    19aa:	2a e0       	ldi	r18, 0x0A	; 10
    19ac:	26 9f       	mul	r18, r22
    19ae:	11 24       	eor	r1, r1
    19b0:	30 19       	sub	r19, r0
    19b2:	30 5d       	subi	r19, 0xD0	; 208
    19b4:	31 93       	st	Z+, r19
    19b6:	de f6       	brtc	.-74     	; 0x196e <__ultoa_invert+0xe>
    19b8:	cf 01       	movw	r24, r30
    19ba:	08 95       	ret
    19bc:	46 2f       	mov	r20, r22
    19be:	47 70       	andi	r20, 0x07	; 7
    19c0:	40 5d       	subi	r20, 0xD0	; 208
    19c2:	41 93       	st	Z+, r20
    19c4:	b3 e0       	ldi	r27, 0x03	; 3
    19c6:	0f d0       	rcall	.+30     	; 0x19e6 <__ultoa_invert+0x86>
    19c8:	c9 f7       	brne	.-14     	; 0x19bc <__ultoa_invert+0x5c>
    19ca:	f6 cf       	rjmp	.-20     	; 0x19b8 <__ultoa_invert+0x58>
    19cc:	46 2f       	mov	r20, r22
    19ce:	4f 70       	andi	r20, 0x0F	; 15
    19d0:	40 5d       	subi	r20, 0xD0	; 208
    19d2:	4a 33       	cpi	r20, 0x3A	; 58
    19d4:	18 f0       	brcs	.+6      	; 0x19dc <__ultoa_invert+0x7c>
    19d6:	49 5d       	subi	r20, 0xD9	; 217
    19d8:	31 fd       	sbrc	r19, 1
    19da:	40 52       	subi	r20, 0x20	; 32
    19dc:	41 93       	st	Z+, r20
    19de:	02 d0       	rcall	.+4      	; 0x19e4 <__ultoa_invert+0x84>
    19e0:	a9 f7       	brne	.-22     	; 0x19cc <__ultoa_invert+0x6c>
    19e2:	ea cf       	rjmp	.-44     	; 0x19b8 <__ultoa_invert+0x58>
    19e4:	b4 e0       	ldi	r27, 0x04	; 4
    19e6:	a6 95       	lsr	r26
    19e8:	97 95       	ror	r25
    19ea:	87 95       	ror	r24
    19ec:	77 95       	ror	r23
    19ee:	67 95       	ror	r22
    19f0:	ba 95       	dec	r27
    19f2:	c9 f7       	brne	.-14     	; 0x19e6 <__ultoa_invert+0x86>
    19f4:	00 97       	sbiw	r24, 0x00	; 0
    19f6:	61 05       	cpc	r22, r1
    19f8:	71 05       	cpc	r23, r1
    19fa:	08 95       	ret
    19fc:	9b 01       	movw	r18, r22
    19fe:	ac 01       	movw	r20, r24
    1a00:	0a 2e       	mov	r0, r26
    1a02:	06 94       	lsr	r0
    1a04:	57 95       	ror	r21
    1a06:	47 95       	ror	r20
    1a08:	37 95       	ror	r19
    1a0a:	27 95       	ror	r18
    1a0c:	ba 95       	dec	r27
    1a0e:	c9 f7       	brne	.-14     	; 0x1a02 <__ultoa_invert+0xa2>
    1a10:	62 0f       	add	r22, r18
    1a12:	73 1f       	adc	r23, r19
    1a14:	84 1f       	adc	r24, r20
    1a16:	95 1f       	adc	r25, r21
    1a18:	a0 1d       	adc	r26, r0
    1a1a:	08 95       	ret

00001a1c <_exit>:
    1a1c:	f8 94       	cli

00001a1e <__stop_program>:
    1a1e:	ff cf       	rjmp	.-2      	; 0x1a1e <__stop_program>
