
MouseHostWithParser.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  00002464  000024f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002464  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003fd  00800112  00800112  0000250a  2**0
                  ALLOC
  3 .debug_aranges 00000358  00000000  00000000  0000250a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000085d  00000000  00000000  00002862  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000055bd  00000000  00000000  000030bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001819  00000000  00000000  0000867c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00004164  00000000  00000000  00009e95  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000004f0  00000000  00000000  0000dffc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000023f9  00000000  00000000  0000e4ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00002173  00000000  00000000  000108e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000418  00000000  00000000  00012a58  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
		Pipe_DisablePipe();
	}
}

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
       0:	63 c1       	rjmp	.+710    	; 0x2c8 <__ctors_end>
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
       2:	00 00       	nop
{
	USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, AfterType);

	if (*BytesRem)
	  USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, Type);
}
       4:	7f c1       	rjmp	.+766    	; 0x304 <__bad_interrupt>
	return USB_Host_SendControlRequest(NULL);
}

uint8_t USB_Host_SetInterfaceAltSetting(const uint8_t InterfaceIndex,
                                        const uint8_t AltSetting)
{
       6:	00 00       	nop
	return true;
}

void USB_SetHIDReportItemInfo(uint8_t* ReportData,
                              HID_ReportItem_t* const ReportItem)
{
       8:	7d c1       	rjmp	.+762    	; 0x304 <__bad_interrupt>

	return Serial_ReceiveByte();
}

int Serial_getchar_Blocking(FILE *Stream)
{
       a:	00 00       	nop
       c:	7b c1       	rjmp	.+758    	; 0x304 <__bad_interrupt>
       e:	00 00       	nop
      10:	79 c1       	rjmp	.+754    	; 0x304 <__bad_interrupt>
      12:	00 00       	nop
      14:	77 c1       	rjmp	.+750    	; 0x304 <__bad_interrupt>
      16:	00 00       	nop
      18:	75 c1       	rjmp	.+746    	; 0x304 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	73 c1       	rjmp	.+742    	; 0x304 <__bad_interrupt>
      1e:	00 00       	nop
      20:	71 c1       	rjmp	.+738    	; 0x304 <__bad_interrupt>
      22:	00 00       	nop
      24:	6f c1       	rjmp	.+734    	; 0x304 <__bad_interrupt>
      26:	00 00       	nop
      28:	b2 c7       	rjmp	.+3940   	; 0xf8e <__vector_10>
      2a:	00 00       	nop
      2c:	6b c1       	rjmp	.+726    	; 0x304 <__bad_interrupt>
      2e:	00 00       	nop
      30:	69 c1       	rjmp	.+722    	; 0x304 <__bad_interrupt>
      32:	00 00       	nop
      34:	67 c1       	rjmp	.+718    	; 0x304 <__bad_interrupt>
      36:	00 00       	nop
      38:	65 c1       	rjmp	.+714    	; 0x304 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	63 c1       	rjmp	.+710    	; 0x304 <__bad_interrupt>
      3e:	00 00       	nop
      40:	61 c1       	rjmp	.+706    	; 0x304 <__bad_interrupt>
      42:	00 00       	nop
      44:	5f c1       	rjmp	.+702    	; 0x304 <__bad_interrupt>
      46:	00 00       	nop
      48:	5d c1       	rjmp	.+698    	; 0x304 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	5b c1       	rjmp	.+694    	; 0x304 <__bad_interrupt>
      4e:	00 00       	nop
      50:	59 c1       	rjmp	.+690    	; 0x304 <__bad_interrupt>
      52:	00 00       	nop
      54:	57 c1       	rjmp	.+686    	; 0x304 <__bad_interrupt>
      56:	00 00       	nop
      58:	55 c1       	rjmp	.+682    	; 0x304 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	53 c1       	rjmp	.+678    	; 0x304 <__bad_interrupt>
      5e:	00 00       	nop
      60:	51 c1       	rjmp	.+674    	; 0x304 <__bad_interrupt>
      62:	00 00       	nop
      64:	4f c1       	rjmp	.+670    	; 0x304 <__bad_interrupt>
      66:	00 00       	nop
      68:	4d c1       	rjmp	.+666    	; 0x304 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	4b c1       	rjmp	.+662    	; 0x304 <__bad_interrupt>
      6e:	00 00       	nop
      70:	49 c1       	rjmp	.+658    	; 0x304 <__bad_interrupt>
      72:	00 00       	nop
      74:	47 c1       	rjmp	.+654    	; 0x304 <__bad_interrupt>
      76:	00 00       	nop
      78:	45 c1       	rjmp	.+650    	; 0x304 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	43 c1       	rjmp	.+646    	; 0x304 <__bad_interrupt>
      7e:	00 00       	nop
      80:	41 c1       	rjmp	.+642    	; 0x304 <__bad_interrupt>
      82:	00 00       	nop
      84:	3f c1       	rjmp	.+638    	; 0x304 <__bad_interrupt>
      86:	00 00       	nop
      88:	3d c1       	rjmp	.+634    	; 0x304 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	3b c1       	rjmp	.+630    	; 0x304 <__bad_interrupt>
      8e:	00 00       	nop
      90:	39 c1       	rjmp	.+626    	; 0x304 <__bad_interrupt>
      92:	00 00       	nop
      94:	37 c1       	rjmp	.+622    	; 0x304 <__bad_interrupt>
      96:	00 00       	nop

00000098 <__c.4590>:
      98:	1b 5b 33 31 6d 44 65 76 20 45 6e 75 6d 20 45 72     .[31mDev Enum Er
      a8:	72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     ror.. -- Error C
      b8:	6f 64 65 20 25 64 0d 0a 20 2d 2d 20 53 75 62 20     ode %d.. -- Sub 
      c8:	45 72 72 6f 72 20 43 6f 64 65 20 25 64 0d 0a 20     Error Code %d.. 
      d8:	2d 2d 20 49 6e 20 53 74 61 74 65 20 25 64 0d 0a     -- In State %d..
      e8:	1b 5b 33 37 6d 00                                   .[37m.

000000ee <__c.4582>:
      ee:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
      fe:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 
     10e:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

0000011d <__c.4571>:
     11d:	4d 6f 75 73 65 20 45 6e 75 6d 65 72 61 74 65 64     Mouse Enumerated
     12d:	2e 0d 0a 00                                         ....

00000131 <__c.4569>:
     131:	20 2d 2d 20 45 72 72 6f 72 20 43 6f 64 65 3a 20      -- Error Code: 
     141:	25 64 0d 0a 1b 5b 33 37 6d 00                       %d...[37m.

0000014b <__c.4567>:
     14b:	4e 6f 74 20 61 20 76 61 6c 69 64 20 4d 6f 75 73     Not a valid Mous
     15b:	65 2e 1b 5b 33 37 6d 00                             e..[37m.

00000163 <__c.4565>:
     163:	1b 5b 33 31 6d 52 65 70 6f 72 74 20 50 61 72 73     .[31mReport Pars
     173:	65 20 45 72 72 6f 72 2e 0d 0a 00                    e Error....

0000017e <__c.4563>:
     17e:	50 72 6f 63 65 73 73 69 6e 67 20 48 49 44 20 52     Processing HID R
     18e:	65 70 6f 72 74 20 28 53 69 7a 65 20 25 64 20 42     eport (Size %d B
     19e:	79 74 65 73 29 2e 0d 0a 00                          ytes)....

000001a7 <__c.4561>:
     1a7:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
     1b7:	6f 72 20 28 53 65 74 20 43 6f 6e 66 69 67 75 72     or (Set Configur
     1c7:	61 74 69 6f 6e 29 2e 0d 0a 20 2d 2d 20 45 72 72     ation)... -- Err
     1d7:	6f 72 20 43 6f 64 65 3a 20 25 64 0d 0a 1b 5b 33     or Code: %d...[3
     1e7:	37 6d 00                                            7m.

000001ea <__c.4559>:
     1ea:	20 2d 2d 20 45 72 72 6f 72 20 43 6f 64 65 3a 20      -- Error Code: 
     1fa:	25 64 0d 0a 1b 5b 33 37 6d 00                       %d...[37m.

00000204 <__c.4557>:
     204:	1b 5b 33 31 6d 49 6e 76 61 6c 69 64 20 44 65 76     .[31mInvalid Dev
     214:	69 63 65 2e 0d 0a 00                                ice....

0000021b <__c.4555>:
     21b:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
     22b:	6f 72 20 28 47 65 74 20 43 6f 6e 66 69 67 75 72     or (Get Configur
     23b:	61 74 69 6f 6e 29 2e 0d 0a 00                       ation)....

00000245 <__c.4552>:
     245:	47 65 74 74 69 6e 67 20 43 6f 6e 66 69 67 20 44     Getting Config D
     255:	61 74 61 2e 0d 0a 00                                ata....

0000025c <__c.4547>:
     25c:	1b 5b 33 32 6d 44 65 76 69 63 65 20 55 6e 61 74     .[32mDevice Unat
     26c:	74 61 63 68 65 64 2e 0d 0a 1b 5b 33 37 6d 00        tached....[37m.

0000027b <__c.4542>:
     27b:	1b 5b 33 32 6d 44 65 76 69 63 65 20 41 74 74 61     .[32mDevice Atta
     28b:	63 68 65 64 2e 0d 0a 1b 5b 33 37 6d 00              ched....[37m.

00000298 <__c.4528>:
     298:	1b 5b 33 36 6d 4d 6f 75 73 65 20 48 49 44 20 50     .[36mMouse HID P
     2a8:	61 72 73 65 72 20 48 6f 73 74 20 44 65 6d 6f 20     arser Host Demo 
     2b8:	72 75 6e 6e 69 6e 67 2e 0d 0a 1b 5b 33 37 6d 00     running....[37m.

000002c8 <__ctors_end>:
     2c8:	11 24       	eor	r1, r1
     2ca:	1f be       	out	0x3f, r1	; 63
     2cc:	cf ef       	ldi	r28, 0xFF	; 255
     2ce:	d0 e2       	ldi	r29, 0x20	; 32
     2d0:	de bf       	out	0x3e, r29	; 62
     2d2:	cd bf       	out	0x3d, r28	; 61

000002d4 <__do_copy_data>:
     2d4:	11 e0       	ldi	r17, 0x01	; 1
     2d6:	a0 e0       	ldi	r26, 0x00	; 0
     2d8:	b1 e0       	ldi	r27, 0x01	; 1
     2da:	e4 e6       	ldi	r30, 0x64	; 100
     2dc:	f4 e2       	ldi	r31, 0x24	; 36
     2de:	00 e0       	ldi	r16, 0x00	; 0
     2e0:	0b bf       	out	0x3b, r16	; 59
     2e2:	02 c0       	rjmp	.+4      	; 0x2e8 <__do_copy_data+0x14>
     2e4:	07 90       	elpm	r0, Z+
     2e6:	0d 92       	st	X+, r0
     2e8:	a2 31       	cpi	r26, 0x12	; 18
     2ea:	b1 07       	cpc	r27, r17
     2ec:	d9 f7       	brne	.-10     	; 0x2e4 <__do_copy_data+0x10>

000002ee <__do_clear_bss>:
     2ee:	15 e0       	ldi	r17, 0x05	; 5
     2f0:	a2 e1       	ldi	r26, 0x12	; 18
     2f2:	b1 e0       	ldi	r27, 0x01	; 1
     2f4:	01 c0       	rjmp	.+2      	; 0x2f8 <.do_clear_bss_start>

000002f6 <.do_clear_bss_loop>:
     2f6:	1d 92       	st	X+, r1

000002f8 <.do_clear_bss_start>:
     2f8:	af 30       	cpi	r26, 0x0F	; 15
     2fa:	b1 07       	cpc	r27, r17
     2fc:	e1 f7       	brne	.-8      	; 0x2f6 <.do_clear_bss_loop>
     2fe:	35 d2       	rcall	.+1130   	; 0x76a <main>
     300:	0c 94 30 12 	jmp	0x2460	; 0x2460 <_exit>

00000304 <__bad_interrupt>:
     304:	7d ce       	rjmp	.-774    	; 0x0 <__vectors>

00000306 <ProcessMouseReport>:
 *  as required and displays movement and button presses on the board LEDs.
 *
 *  \param[in] MouseReport  Pointer to a HID report from an attached mouse device
 */
void ProcessMouseReport(uint8_t* MouseReport)
{
     306:	bf 92       	push	r11
     308:	cf 92       	push	r12
     30a:	df 92       	push	r13
     30c:	ef 92       	push	r14
     30e:	ff 92       	push	r15
     310:	0f 93       	push	r16
     312:	1f 93       	push	r17
     314:	cf 93       	push	r28
     316:	df 93       	push	r29
     318:	7c 01       	movw	r14, r24
     31a:	10 e0       	ldi	r17, 0x00	; 0
     31c:	00 e0       	ldi	r16, 0x00	; 0

	/* Check each HID report item in turn, looking for mouse X/Y/button reports */
	for (uint8_t ReportNumber = 0; ReportNumber < HIDReportInfo.TotalReportItems; ReportNumber++)
	{
		/* Create a temporary item pointer to the next report item */
		HID_ReportItem_t* ReportItem = &HIDReportInfo.ReportItems[ReportNumber];
     31e:	9a e2       	ldi	r25, 0x2A	; 42
     320:	b9 2e       	mov	r11, r25

			/* For multi-report devices - if the requested data was not in the issued report, continue */
			if (!(FoundData))
			  continue;

			int16_t DeltaMovement = HID_ALIGN_DATA(ReportItem, int16_t);
     322:	80 e1       	ldi	r24, 0x10	; 16
     324:	c8 2e       	mov	r12, r24
     326:	d1 2c       	mov	r13, r1
     328:	80 c0       	rjmp	.+256    	; 0x42a <ProcessMouseReport+0x124>

	/* Check each HID report item in turn, looking for mouse X/Y/button reports */
	for (uint8_t ReportNumber = 0; ReportNumber < HIDReportInfo.TotalReportItems; ReportNumber++)
	{
		/* Create a temporary item pointer to the next report item */
		HID_ReportItem_t* ReportItem = &HIDReportInfo.ReportItems[ReportNumber];
     32a:	0b 9d       	mul	r16, r11
     32c:	e0 01       	movw	r28, r0
     32e:	11 24       	eor	r1, r1
     330:	ca 5e       	subi	r28, 0xEA	; 234
     332:	de 4f       	sbci	r29, 0xFE	; 254

		bool FoundData;

		if ((ReportItem->Attributes.Usage.Page        == USAGE_PAGE_BUTTON) &&
     334:	89 85       	ldd	r24, Y+9	; 0x09
     336:	9a 85       	ldd	r25, Y+10	; 0x0a
     338:	89 30       	cpi	r24, 0x09	; 9
     33a:	91 05       	cpc	r25, r1
     33c:	b1 f4       	brne	.+44     	; 0x36a <ProcessMouseReport+0x64>
     33e:	8a 81       	ldd	r24, Y+2	; 0x02
     340:	88 23       	and	r24, r24
     342:	09 f0       	breq	.+2      	; 0x346 <ProcessMouseReport+0x40>
     344:	71 c0       	rjmp	.+226    	; 0x428 <ProcessMouseReport+0x122>
			(ReportItem->ItemType                     == HID_REPORT_ITEM_In))
		{
			/* Get the mouse button value */
			FoundData = USB_GetHIDReportItemInfo(MouseReport, ReportItem);
     346:	c7 01       	movw	r24, r14
     348:	be 01       	movw	r22, r28
     34a:	0e 94 b7 0a 	call	0x156e	; 0x156e <USB_GetHIDReportItemInfo>

			/* For multi-report devices - if the requested data was not in the issued report, continue */
			if (!(FoundData))
     34e:	88 23       	and	r24, r24
     350:	09 f4       	brne	.+2      	; 0x354 <ProcessMouseReport+0x4e>
     352:	6a c0       	rjmp	.+212    	; 0x428 <ProcessMouseReport+0x122>
			  continue;

			/* If button is pressed, all LEDs are turned on */
			if (ReportItem->Value)
     354:	8a a1       	ldd	r24, Y+34	; 0x22
     356:	9b a1       	ldd	r25, Y+35	; 0x23
     358:	ac a1       	ldd	r26, Y+36	; 0x24
     35a:	bd a1       	ldd	r27, Y+37	; 0x25
     35c:	00 97       	sbiw	r24, 0x00	; 0
     35e:	a1 05       	cpc	r26, r1
     360:	b1 05       	cpc	r27, r1
     362:	09 f4       	brne	.+2      	; 0x366 <ProcessMouseReport+0x60>
     364:	61 c0       	rjmp	.+194    	; 0x428 <ProcessMouseReport+0x122>
     366:	10 ef       	ldi	r17, 0xF0	; 240
     368:	5f c0       	rjmp	.+190    	; 0x428 <ProcessMouseReport+0x122>
			  LEDMask = LEDS_ALL_LEDS;
		}
		else if ((ReportItem->Attributes.Usage.Page   == USAGE_PAGE_GENERIC_DCTRL) &&
     36a:	01 97       	sbiw	r24, 0x01	; 1
     36c:	09 f0       	breq	.+2      	; 0x370 <ProcessMouseReport+0x6a>
     36e:	5c c0       	rjmp	.+184    	; 0x428 <ProcessMouseReport+0x122>
     370:	2b 85       	ldd	r18, Y+11	; 0x0b
     372:	3c 85       	ldd	r19, Y+12	; 0x0c
     374:	28 33       	cpi	r18, 0x38	; 56
     376:	31 05       	cpc	r19, r1
     378:	21 f5       	brne	.+72     	; 0x3c2 <ProcessMouseReport+0xbc>
     37a:	8a 81       	ldd	r24, Y+2	; 0x02
     37c:	88 23       	and	r24, r24
     37e:	09 f5       	brne	.+66     	; 0x3c2 <ProcessMouseReport+0xbc>
				 (ReportItem->ItemType                == HID_REPORT_ITEM_In))
		{
			/* Get the mouse wheel value if it is contained within the current
			 * report, if not, skip to the next item in the parser list
			 */
			if (!(USB_GetHIDReportItemInfo(MouseReport, ReportItem)))
     380:	c7 01       	movw	r24, r14
     382:	be 01       	movw	r22, r28
     384:	0e 94 b7 0a 	call	0x156e	; 0x156e <USB_GetHIDReportItemInfo>
     388:	88 23       	and	r24, r24
     38a:	09 f4       	brne	.+2      	; 0x38e <ProcessMouseReport+0x88>
     38c:	4d c0       	rjmp	.+154    	; 0x428 <ProcessMouseReport+0x122>
			  continue;

			int16_t WheelDelta = HID_ALIGN_DATA(ReportItem, int16_t);
     38e:	88 85       	ldd	r24, Y+8	; 0x08
     390:	96 01       	movw	r18, r12
     392:	28 1b       	sub	r18, r24
     394:	31 09       	sbc	r19, r1
     396:	c9 01       	movw	r24, r18
     398:	2a a1       	ldd	r18, Y+34	; 0x22
     39a:	3b a1       	ldd	r19, Y+35	; 0x23
     39c:	4c a1       	ldd	r20, Y+36	; 0x24
     39e:	5d a1       	ldd	r21, Y+37	; 0x25
     3a0:	04 c0       	rjmp	.+8      	; 0x3aa <ProcessMouseReport+0xa4>
     3a2:	22 0f       	add	r18, r18
     3a4:	33 1f       	adc	r19, r19
     3a6:	44 1f       	adc	r20, r20
     3a8:	55 1f       	adc	r21, r21
     3aa:	8a 95       	dec	r24
     3ac:	d2 f7       	brpl	.-12     	; 0x3a2 <ProcessMouseReport+0x9c>

			if (WheelDelta)
     3ae:	21 15       	cp	r18, r1
     3b0:	31 05       	cpc	r19, r1
     3b2:	d1 f1       	breq	.+116    	; 0x428 <ProcessMouseReport+0x122>
			  LEDMask = (LEDS_LED1 | LEDS_LED2 | ((WheelDelta > 0) ? LEDS_LED3 : LEDS_LED4));
     3b4:	12 16       	cp	r1, r18
     3b6:	13 06       	cpc	r1, r19
     3b8:	14 f0       	brlt	.+4      	; 0x3be <ProcessMouseReport+0xb8>
     3ba:	10 e7       	ldi	r17, 0x70	; 112
     3bc:	35 c0       	rjmp	.+106    	; 0x428 <ProcessMouseReport+0x122>
     3be:	10 eb       	ldi	r17, 0xB0	; 176
     3c0:	33 c0       	rjmp	.+102    	; 0x428 <ProcessMouseReport+0x122>
		}
		else if ((ReportItem->Attributes.Usage.Page   == USAGE_PAGE_GENERIC_DCTRL) &&
     3c2:	20 53       	subi	r18, 0x30	; 48
     3c4:	30 40       	sbci	r19, 0x00	; 0
     3c6:	22 30       	cpi	r18, 0x02	; 2
     3c8:	31 05       	cpc	r19, r1
     3ca:	70 f5       	brcc	.+92     	; 0x428 <ProcessMouseReport+0x122>
     3cc:	8a 81       	ldd	r24, Y+2	; 0x02
     3ce:	88 23       	and	r24, r24
     3d0:	59 f5       	brne	.+86     	; 0x428 <ProcessMouseReport+0x122>
				 ((ReportItem->Attributes.Usage.Usage == USAGE_X)                  ||
				  (ReportItem->Attributes.Usage.Usage == USAGE_Y))                 &&
				 (ReportItem->ItemType                == HID_REPORT_ITEM_In))
		{
			/* Get the mouse relative position value */
			FoundData = USB_GetHIDReportItemInfo(MouseReport, ReportItem);
     3d2:	c7 01       	movw	r24, r14
     3d4:	be 01       	movw	r22, r28
     3d6:	0e 94 b7 0a 	call	0x156e	; 0x156e <USB_GetHIDReportItemInfo>

			/* For multi-report devices - if the requested data was not in the issued report, continue */
			if (!(FoundData))
     3da:	88 23       	and	r24, r24
     3dc:	29 f1       	breq	.+74     	; 0x428 <ProcessMouseReport+0x122>
			  continue;

			int16_t DeltaMovement = HID_ALIGN_DATA(ReportItem, int16_t);
     3de:	88 85       	ldd	r24, Y+8	; 0x08
     3e0:	96 01       	movw	r18, r12
     3e2:	28 1b       	sub	r18, r24
     3e4:	31 09       	sbc	r19, r1
     3e6:	c9 01       	movw	r24, r18
     3e8:	2a a1       	ldd	r18, Y+34	; 0x22
     3ea:	3b a1       	ldd	r19, Y+35	; 0x23
     3ec:	4c a1       	ldd	r20, Y+36	; 0x24
     3ee:	5d a1       	ldd	r21, Y+37	; 0x25
     3f0:	04 c0       	rjmp	.+8      	; 0x3fa <ProcessMouseReport+0xf4>
     3f2:	22 0f       	add	r18, r18
     3f4:	33 1f       	adc	r19, r19
     3f6:	44 1f       	adc	r20, r20
     3f8:	55 1f       	adc	r21, r21
     3fa:	8a 95       	dec	r24
     3fc:	d2 f7       	brpl	.-12     	; 0x3f2 <ProcessMouseReport+0xec>

			/* Check to see if a (non-zero) delta movement has been indicated */
			if (DeltaMovement)
     3fe:	21 15       	cp	r18, r1
     400:	31 05       	cpc	r19, r1
     402:	91 f0       	breq	.+36     	; 0x428 <ProcessMouseReport+0x122>
			{
				/* Determine if the report is for the X or Y delta movement, light LEDs as appropriate */
				if (ReportItem->Attributes.Usage.Usage == USAGE_X)
     404:	8b 85       	ldd	r24, Y+11	; 0x0b
     406:	9c 85       	ldd	r25, Y+12	; 0x0c
     408:	c0 97       	sbiw	r24, 0x30	; 48
     40a:	39 f4       	brne	.+14     	; 0x41a <ProcessMouseReport+0x114>
				  LEDMask |= ((DeltaMovement > 0) ? LEDS_LED1 : LEDS_LED2);
     40c:	12 16       	cp	r1, r18
     40e:	13 06       	cpc	r1, r19
     410:	14 f0       	brlt	.+4      	; 0x416 <ProcessMouseReport+0x110>
     412:	80 e2       	ldi	r24, 0x20	; 32
     414:	08 c0       	rjmp	.+16     	; 0x426 <ProcessMouseReport+0x120>
     416:	80 e1       	ldi	r24, 0x10	; 16
     418:	06 c0       	rjmp	.+12     	; 0x426 <ProcessMouseReport+0x120>
				else
				  LEDMask |= ((DeltaMovement > 0) ? LEDS_LED3 : LEDS_LED4);
     41a:	12 16       	cp	r1, r18
     41c:	13 06       	cpc	r1, r19
     41e:	14 f0       	brlt	.+4      	; 0x424 <ProcessMouseReport+0x11e>
     420:	80 e4       	ldi	r24, 0x40	; 64
     422:	01 c0       	rjmp	.+2      	; 0x426 <ProcessMouseReport+0x120>
     424:	80 e8       	ldi	r24, 0x80	; 128
     426:	18 2b       	or	r17, r24
void ProcessMouseReport(uint8_t* MouseReport)
{
	uint8_t LEDMask = LEDS_NO_LEDS;

	/* Check each HID report item in turn, looking for mouse X/Y/button reports */
	for (uint8_t ReportNumber = 0; ReportNumber < HIDReportInfo.TotalReportItems; ReportNumber++)
     428:	0f 5f       	subi	r16, 0xFF	; 255
     42a:	80 91 15 01 	lds	r24, 0x0115
     42e:	08 17       	cp	r16, r24
     430:	08 f4       	brcc	.+2      	; 0x434 <ProcessMouseReport+0x12e>
     432:	7b cf       	rjmp	.-266    	; 0x32a <ProcessMouseReport+0x24>
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     434:	8b b1       	in	r24, 0x0b	; 11
     436:	8f 70       	andi	r24, 0x0F	; 15
     438:	18 2b       	or	r17, r24
     43a:	1b b9       	out	0x0b, r17	; 11
		}
	}

	/* Display the button information on the board LEDs */
	LEDs_SetAllLEDs(LEDMask);
}
     43c:	df 91       	pop	r29
     43e:	cf 91       	pop	r28
     440:	1f 91       	pop	r17
     442:	0f 91       	pop	r16
     444:	ff 90       	pop	r15
     446:	ef 90       	pop	r14
     448:	df 90       	pop	r13
     44a:	cf 90       	pop	r12
     44c:	bf 90       	pop	r11
     44e:	08 95       	ret

00000450 <MouseHost_Task>:

/** Task to read and process the HID report descriptor and HID reports from the device and display the
 *  results onto the board LEDs.
 */
void MouseHost_Task(void)
{
     450:	cf 92       	push	r12
     452:	df 92       	push	r13
     454:	ef 92       	push	r14
     456:	ff 92       	push	r15
     458:	0f 93       	push	r16
     45a:	1f 93       	push	r17
     45c:	df 93       	push	r29
     45e:	cf 93       	push	r28
     460:	cd b7       	in	r28, 0x3d	; 61
     462:	de b7       	in	r29, 0x3e	; 62
		Pipe_ClearIN();
	}

	/* Freeze mouse data pipe */
	Pipe_Freeze();
}
     464:	cd b6       	in	r12, 0x3d	; 61
     466:	de b6       	in	r13, 0x3e	; 62
/** Task to read and process the HID report descriptor and HID reports from the device and display the
 *  results onto the board LEDs.
 */
void MouseHost_Task(void)
{
	if (USB_HostState != HOST_STATE_Configured)
     468:	80 91 fa 04 	lds	r24, 0x04FA
     46c:	8b 30       	cpi	r24, 0x0B	; 11
     46e:	09 f0       	breq	.+2      	; 0x472 <MouseHost_Task+0x22>
     470:	3e c0       	rjmp	.+124    	; 0x4ee <MouseHost_Task+0x9e>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     472:	81 e0       	ldi	r24, 0x01	; 1
     474:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     478:	80 91 a9 00 	lds	r24, 0x00A9
     47c:	8f 7b       	andi	r24, 0xBF	; 191
     47e:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     482:	80 91 a6 00 	lds	r24, 0x00A6
	/* Select and unfreeze mouse data pipe */
	Pipe_SelectPipe(MOUSE_DATA_IN_PIPE);
	Pipe_Unfreeze();

	/* Check to see if a packet has been received */
	if (Pipe_IsINReceived())
     486:	80 ff       	sbrs	r24, 0
     488:	2d c0       	rjmp	.+90     	; 0x4e4 <MouseHost_Task+0x94>
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
     48a:	80 91 a6 00 	lds	r24, 0x00A6
	{
		/* Check if data has been received from the attached mouse */
		if (Pipe_IsReadWriteAllowed())
     48e:	85 ff       	sbrs	r24, 5
     490:	24 c0       	rjmp	.+72     	; 0x4da <MouseHost_Task+0x8a>
     492:	ee b6       	in	r14, 0x3e	; 62
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
     494:	80 91 f6 00 	lds	r24, 0x00F6
     498:	90 91 f7 00 	lds	r25, 0x00F7
		{
			/* Create buffer big enough for the report */
			uint8_t MouseReport[Pipe_BytesInPipe()];
     49c:	2d b7       	in	r18, 0x3d	; 61
     49e:	3e b7       	in	r19, 0x3e	; 62
     4a0:	28 1b       	sub	r18, r24
     4a2:	39 0b       	sbc	r19, r25
     4a4:	0f b6       	in	r0, 0x3f	; 63
     4a6:	f8 94       	cli
     4a8:	3e bf       	out	0x3e, r19	; 62
     4aa:	0f be       	out	0x3f, r0	; 63
     4ac:	2d bf       	out	0x3d, r18	; 61
     4ae:	0d b7       	in	r16, 0x3d	; 61
     4b0:	1e b7       	in	r17, 0x3e	; 62
     4b2:	0f 5f       	subi	r16, 0xFF	; 255
     4b4:	1f 4f       	sbci	r17, 0xFF	; 255
     4b6:	60 91 f6 00 	lds	r22, 0x00F6
     4ba:	70 91 f7 00 	lds	r23, 0x00F7

			/* Load in the mouse report */
			Pipe_Read_Stream_LE(MouseReport, Pipe_BytesInPipe(), NULL);
     4be:	c8 01       	movw	r24, r16
     4c0:	40 e0       	ldi	r20, 0x00	; 0
     4c2:	50 e0       	ldi	r21, 0x00	; 0
     4c4:	f7 d5       	rcall	.+3054   	; 0x10b4 <Pipe_Read_Stream_LE>

			/* Process the read in mouse report from the device */
			ProcessMouseReport(MouseReport);
     4c6:	c8 01       	movw	r24, r16
     4c8:	1e df       	rcall	.-452    	; 0x306 <ProcessMouseReport>
     4ca:	2c 2d       	mov	r18, r12
     4cc:	3e 2d       	mov	r19, r14
     4ce:	c9 01       	movw	r24, r18
     4d0:	0f b6       	in	r0, 0x3f	; 63
     4d2:	f8 94       	cli
     4d4:	9e bf       	out	0x3e, r25	; 62
     4d6:	0f be       	out	0x3f, r0	; 63
     4d8:	8d bf       	out	0x3d, r24	; 61
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     4da:	80 91 a6 00 	lds	r24, 0x00A6
     4de:	8e 77       	andi	r24, 0x7E	; 126
     4e0:	80 93 a6 00 	sts	0x00A6, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     4e4:	80 91 a9 00 	lds	r24, 0x00A9
     4e8:	80 64       	ori	r24, 0x40	; 64
     4ea:	80 93 a9 00 	sts	0x00A9, r24
		Pipe_ClearIN();
	}

	/* Freeze mouse data pipe */
	Pipe_Freeze();
}
     4ee:	0f b6       	in	r0, 0x3f	; 63
     4f0:	f8 94       	cli
     4f2:	de be       	out	0x3e, r13	; 62
     4f4:	0f be       	out	0x3f, r0	; 63
     4f6:	cd be       	out	0x3d, r12	; 61
     4f8:	cf 91       	pop	r28
     4fa:	df 91       	pop	r29
     4fc:	1f 91       	pop	r17
     4fe:	0f 91       	pop	r16
     500:	ff 90       	pop	r15
     502:	ef 90       	pop	r14
     504:	df 90       	pop	r13
     506:	cf 90       	pop	r12
     508:	08 95       	ret

0000050a <EVENT_USB_Host_DeviceEnumerationFailed>:
 *  enumerating an attached USB device.
 */
void EVENT_USB_Host_DeviceEnumerationFailed(const uint8_t ErrorCode,
                                            const uint8_t SubErrorCode)
{
	printf_P(PSTR(ESC_FG_RED "Dev Enum Error\r\n"
     50a:	90 91 fa 04 	lds	r25, 0x04FA
     50e:	2d b7       	in	r18, 0x3d	; 61
     510:	3e b7       	in	r19, 0x3e	; 62
     512:	28 50       	subi	r18, 0x08	; 8
     514:	30 40       	sbci	r19, 0x00	; 0
     516:	0f b6       	in	r0, 0x3f	; 63
     518:	f8 94       	cli
     51a:	3e bf       	out	0x3e, r19	; 62
     51c:	0f be       	out	0x3f, r0	; 63
     51e:	2d bf       	out	0x3d, r18	; 61
     520:	ed b7       	in	r30, 0x3d	; 61
     522:	fe b7       	in	r31, 0x3e	; 62
     524:	31 96       	adiw	r30, 0x01	; 1
     526:	28 e9       	ldi	r18, 0x98	; 152
     528:	30 e0       	ldi	r19, 0x00	; 0
     52a:	ad b7       	in	r26, 0x3d	; 61
     52c:	be b7       	in	r27, 0x3e	; 62
     52e:	12 96       	adiw	r26, 0x02	; 2
     530:	3c 93       	st	X, r19
     532:	2e 93       	st	-X, r18
     534:	11 97       	sbiw	r26, 0x01	; 1
     536:	82 83       	std	Z+2, r24	; 0x02
     538:	13 82       	std	Z+3, r1	; 0x03
     53a:	64 83       	std	Z+4, r22	; 0x04
     53c:	15 82       	std	Z+5, r1	; 0x05
     53e:	96 83       	std	Z+6, r25	; 0x06
     540:	17 82       	std	Z+7, r1	; 0x07
     542:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <printf_P>
     546:	8b b1       	in	r24, 0x0b	; 11
     548:	8f 70       	andi	r24, 0x0F	; 15
     54a:	80 69       	ori	r24, 0x90	; 144
     54c:	8b b9       	out	0x0b, r24	; 11
     54e:	2d b7       	in	r18, 0x3d	; 61
     550:	3e b7       	in	r19, 0x3e	; 62
     552:	28 5f       	subi	r18, 0xF8	; 248
     554:	3f 4f       	sbci	r19, 0xFF	; 255
     556:	0f b6       	in	r0, 0x3f	; 63
     558:	f8 94       	cli
     55a:	3e bf       	out	0x3e, r19	; 62
     55c:	0f be       	out	0x3f, r0	; 63
     55e:	2d bf       	out	0x3d, r18	; 61
	                         " -- Error Code %d\r\n"
	                         " -- Sub Error Code %d\r\n"
	                         " -- In State %d\r\n" ESC_FG_WHITE), ErrorCode, SubErrorCode, USB_HostState);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
}
     560:	08 95       	ret

00000562 <EVENT_USB_Host_HostError>:
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
}

/** Event handler for the USB_HostError event. This indicates that a hardware error occurred while in host mode. */
void EVENT_USB_Host_HostError(const uint8_t ErrorCode)
{
     562:	1f 93       	push	r17
     564:	18 2f       	mov	r17, r24
	USB_Disable();
     566:	ee d4       	rcall	.+2524   	; 0xf44 <USB_Disable>

	printf_P(PSTR(ESC_FG_RED "Host Mode Error\r\n"
     568:	00 d0       	rcall	.+0      	; 0x56a <EVENT_USB_Host_HostError+0x8>
     56a:	00 d0       	rcall	.+0      	; 0x56c <EVENT_USB_Host_HostError+0xa>
     56c:	ed b7       	in	r30, 0x3d	; 61
     56e:	fe b7       	in	r31, 0x3e	; 62
     570:	31 96       	adiw	r30, 0x01	; 1
     572:	8e ee       	ldi	r24, 0xEE	; 238
     574:	90 e0       	ldi	r25, 0x00	; 0
     576:	ad b7       	in	r26, 0x3d	; 61
     578:	be b7       	in	r27, 0x3e	; 62
     57a:	12 96       	adiw	r26, 0x02	; 2
     57c:	9c 93       	st	X, r25
     57e:	8e 93       	st	-X, r24
     580:	11 97       	sbiw	r26, 0x01	; 1
     582:	12 83       	std	Z+2, r17	; 0x02
     584:	13 82       	std	Z+3, r1	; 0x03
     586:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <printf_P>
     58a:	8b b1       	in	r24, 0x0b	; 11
     58c:	8f 70       	andi	r24, 0x0F	; 15
     58e:	80 69       	ori	r24, 0x90	; 144
     590:	8b b9       	out	0x0b, r24	; 11
     592:	0f 90       	pop	r0
     594:	0f 90       	pop	r0
     596:	0f 90       	pop	r0
     598:	0f 90       	pop	r0
     59a:	ff cf       	rjmp	.-2      	; 0x59a <EVENT_USB_Host_HostError+0x38>

0000059c <EVENT_USB_Host_DeviceUnattached>:
/** Event handler for the USB_DeviceUnattached event. This indicates that a device has been removed from the host, and
 *  stops the library USB task management process.
 */
void EVENT_USB_Host_DeviceUnattached(void)
{
	puts_P(PSTR(ESC_FG_GREEN "Device Unattached.\r\n" ESC_FG_WHITE));
     59c:	8c e5       	ldi	r24, 0x5C	; 92
     59e:	92 e0       	ldi	r25, 0x02	; 2
     5a0:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <puts_P>
     5a4:	8b b1       	in	r24, 0x0b	; 11
     5a6:	8f 70       	andi	r24, 0x0F	; 15
     5a8:	80 61       	ori	r24, 0x10	; 16
     5aa:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
}
     5ac:	08 95       	ret

000005ae <EVENT_USB_Host_DeviceAttached>:
/** Event handler for the USB_DeviceAttached event. This indicates that a device has been attached to the host, and
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Host_DeviceAttached(void)
{
	puts_P(PSTR(ESC_FG_GREEN "Device Attached.\r\n" ESC_FG_WHITE));
     5ae:	8b e7       	ldi	r24, 0x7B	; 123
     5b0:	92 e0       	ldi	r25, 0x02	; 2
     5b2:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <puts_P>
     5b6:	8b b1       	in	r24, 0x0b	; 11
     5b8:	8f 70       	andi	r24, 0x0F	; 15
     5ba:	80 6a       	ori	r24, 0xA0	; 160
     5bc:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
}
     5be:	08 95       	ret

000005c0 <EVENT_USB_Host_DeviceEnumerationComplete>:

/** Event handler for the USB_DeviceEnumerationComplete event. This indicates that a device has been successfully
 *  enumerated by the host and is now ready to be used by the application.
 */
void EVENT_USB_Host_DeviceEnumerationComplete(void)
{
     5c0:	1f 93       	push	r17
	puts_P(PSTR("Getting Config Data.\r\n"));
     5c2:	85 e4       	ldi	r24, 0x45	; 69
     5c4:	92 e0       	ldi	r25, 0x02	; 2
     5c6:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <puts_P>

	uint8_t ErrorCode;

	/* Get and process the configuration descriptor data */
	if ((ErrorCode = ProcessConfigurationDescriptor()) != SuccessfulConfigRead)
     5ca:	fb d0       	rcall	.+502    	; 0x7c2 <ProcessConfigurationDescriptor>
     5cc:	18 2f       	mov	r17, r24
     5ce:	88 23       	and	r24, r24
     5d0:	c1 f0       	breq	.+48     	; 0x602 <EVENT_USB_Host_DeviceEnumerationComplete+0x42>
	{
		if (ErrorCode == ControlError)
     5d2:	81 30       	cpi	r24, 0x01	; 1
     5d4:	19 f4       	brne	.+6      	; 0x5dc <EVENT_USB_Host_DeviceEnumerationComplete+0x1c>
		  puts_P(PSTR(ESC_FG_RED "Control Error (Get Configuration).\r\n"));
     5d6:	8b e1       	ldi	r24, 0x1B	; 27
     5d8:	92 e0       	ldi	r25, 0x02	; 2
     5da:	02 c0       	rjmp	.+4      	; 0x5e0 <EVENT_USB_Host_DeviceEnumerationComplete+0x20>
		else
		  puts_P(PSTR(ESC_FG_RED "Invalid Device.\r\n"));
     5dc:	84 e0       	ldi	r24, 0x04	; 4
     5de:	92 e0       	ldi	r25, 0x02	; 2
     5e0:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <puts_P>

		printf_P(PSTR(" -- Error Code: %d\r\n" ESC_FG_WHITE), ErrorCode);
     5e4:	00 d0       	rcall	.+0      	; 0x5e6 <EVENT_USB_Host_DeviceEnumerationComplete+0x26>
     5e6:	00 d0       	rcall	.+0      	; 0x5e8 <EVENT_USB_Host_DeviceEnumerationComplete+0x28>
     5e8:	ed b7       	in	r30, 0x3d	; 61
     5ea:	fe b7       	in	r31, 0x3e	; 62
     5ec:	31 96       	adiw	r30, 0x01	; 1
     5ee:	8a ee       	ldi	r24, 0xEA	; 234
     5f0:	91 e0       	ldi	r25, 0x01	; 1
     5f2:	ad b7       	in	r26, 0x3d	; 61
     5f4:	be b7       	in	r27, 0x3e	; 62
     5f6:	12 96       	adiw	r26, 0x02	; 2
     5f8:	9c 93       	st	X, r25
     5fa:	8e 93       	st	-X, r24
     5fc:	11 97       	sbiw	r26, 0x01	; 1
     5fe:	12 83       	std	Z+2, r17	; 0x02
     600:	13 c0       	rjmp	.+38     	; 0x628 <EVENT_USB_Host_DeviceEnumerationComplete+0x68>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	/* Set the device configuration to the first configuration (rarely do devices use multiple configurations) */
	if ((ErrorCode = USB_Host_SetDeviceConfiguration(1)) != HOST_SENDCONTROL_Successful)
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	7d d7       	rcall	.+3834   	; 0x1500 <USB_Host_SetDeviceConfiguration>
     606:	28 2f       	mov	r18, r24
     608:	88 23       	and	r24, r24
     60a:	d1 f0       	breq	.+52     	; 0x640 <EVENT_USB_Host_DeviceEnumerationComplete+0x80>
	{
		printf_P(PSTR(ESC_FG_RED "Control Error (Set Configuration).\r\n"
     60c:	00 d0       	rcall	.+0      	; 0x60e <EVENT_USB_Host_DeviceEnumerationComplete+0x4e>
     60e:	00 d0       	rcall	.+0      	; 0x610 <EVENT_USB_Host_DeviceEnumerationComplete+0x50>
     610:	ed b7       	in	r30, 0x3d	; 61
     612:	fe b7       	in	r31, 0x3e	; 62
     614:	31 96       	adiw	r30, 0x01	; 1
     616:	87 ea       	ldi	r24, 0xA7	; 167
     618:	91 e0       	ldi	r25, 0x01	; 1
     61a:	ad b7       	in	r26, 0x3d	; 61
     61c:	be b7       	in	r27, 0x3e	; 62
     61e:	12 96       	adiw	r26, 0x02	; 2
     620:	9c 93       	st	X, r25
     622:	8e 93       	st	-X, r24
     624:	11 97       	sbiw	r26, 0x01	; 1
     626:	22 83       	std	Z+2, r18	; 0x02
     628:	13 82       	std	Z+3, r1	; 0x03
     62a:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <printf_P>
     62e:	8b b1       	in	r24, 0x0b	; 11
     630:	8f 70       	andi	r24, 0x0F	; 15
     632:	80 69       	ori	r24, 0x90	; 144
     634:	8b b9       	out	0x0b, r24	; 11
     636:	0f 90       	pop	r0
     638:	0f 90       	pop	r0
     63a:	0f 90       	pop	r0
     63c:	0f 90       	pop	r0
     63e:	49 c0       	rjmp	.+146    	; 0x6d2 <EVENT_USB_Host_DeviceEnumerationComplete+0x112>

		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	printf_P(PSTR("Processing HID Report (Size %d Bytes).\r\n"), HIDReportSize);
     640:	00 d0       	rcall	.+0      	; 0x642 <EVENT_USB_Host_DeviceEnumerationComplete+0x82>
     642:	00 d0       	rcall	.+0      	; 0x644 <EVENT_USB_Host_DeviceEnumerationComplete+0x84>
     644:	8e e7       	ldi	r24, 0x7E	; 126
     646:	91 e0       	ldi	r25, 0x01	; 1
     648:	ed b7       	in	r30, 0x3d	; 61
     64a:	fe b7       	in	r31, 0x3e	; 62
     64c:	92 83       	std	Z+2, r25	; 0x02
     64e:	81 83       	std	Z+1, r24	; 0x01
     650:	80 91 ee 04 	lds	r24, 0x04EE
     654:	90 91 ef 04 	lds	r25, 0x04EF
     658:	94 83       	std	Z+4, r25	; 0x04
     65a:	83 83       	std	Z+3, r24	; 0x03
     65c:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <printf_P>

	/* Get and process the device's first HID report descriptor */
	if ((ErrorCode = GetHIDReportData()) != ParseSuccessful)
     660:	0f 90       	pop	r0
     662:	0f 90       	pop	r0
     664:	0f 90       	pop	r0
     666:	0f 90       	pop	r0
     668:	5e d1       	rcall	.+700    	; 0x926 <GetHIDReportData>
     66a:	18 2f       	mov	r17, r24
     66c:	88 23       	and	r24, r24
     66e:	49 f1       	breq	.+82     	; 0x6c2 <EVENT_USB_Host_DeviceEnumerationComplete+0x102>
	{
		puts_P(PSTR(ESC_FG_RED "Report Parse Error.\r\n"));
     670:	83 e6       	ldi	r24, 0x63	; 99
     672:	91 e0       	ldi	r25, 0x01	; 1
     674:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <puts_P>

		if (!(HIDReportInfo.TotalReportItems))
     678:	80 91 15 01 	lds	r24, 0x0115
     67c:	88 23       	and	r24, r24
     67e:	29 f4       	brne	.+10     	; 0x68a <EVENT_USB_Host_DeviceEnumerationComplete+0xca>
			puts_P(PSTR("Not a valid Mouse." ESC_FG_WHITE));
     680:	8b e4       	ldi	r24, 0x4B	; 75
     682:	91 e0       	ldi	r25, 0x01	; 1
     684:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <puts_P>
     688:	15 c0       	rjmp	.+42     	; 0x6b4 <EVENT_USB_Host_DeviceEnumerationComplete+0xf4>
		else
			printf_P(PSTR(" -- Error Code: %d\r\n" ESC_FG_WHITE), ErrorCode);
     68a:	00 d0       	rcall	.+0      	; 0x68c <EVENT_USB_Host_DeviceEnumerationComplete+0xcc>
     68c:	00 d0       	rcall	.+0      	; 0x68e <EVENT_USB_Host_DeviceEnumerationComplete+0xce>
     68e:	ed b7       	in	r30, 0x3d	; 61
     690:	fe b7       	in	r31, 0x3e	; 62
     692:	31 96       	adiw	r30, 0x01	; 1
     694:	81 e3       	ldi	r24, 0x31	; 49
     696:	91 e0       	ldi	r25, 0x01	; 1
     698:	ad b7       	in	r26, 0x3d	; 61
     69a:	be b7       	in	r27, 0x3e	; 62
     69c:	12 96       	adiw	r26, 0x02	; 2
     69e:	9c 93       	st	X, r25
     6a0:	8e 93       	st	-X, r24
     6a2:	11 97       	sbiw	r26, 0x01	; 1
     6a4:	12 83       	std	Z+2, r17	; 0x02
     6a6:	13 82       	std	Z+3, r1	; 0x03
     6a8:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <printf_P>
     6ac:	0f 90       	pop	r0
     6ae:	0f 90       	pop	r0
     6b0:	0f 90       	pop	r0
     6b2:	0f 90       	pop	r0
     6b4:	8b b1       	in	r24, 0x0b	; 11
     6b6:	8f 70       	andi	r24, 0x0F	; 15
     6b8:	80 69       	ori	r24, 0x90	; 144
     6ba:	8b b9       	out	0x0b, r24	; 11

		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		USB_Host_SetDeviceConfiguration(0);
     6bc:	80 e0       	ldi	r24, 0x00	; 0
     6be:	20 d7       	rcall	.+3648   	; 0x1500 <USB_Host_SetDeviceConfiguration>
     6c0:	08 c0       	rjmp	.+16     	; 0x6d2 <EVENT_USB_Host_DeviceEnumerationComplete+0x112>
		return;
	}

	puts_P(PSTR("Mouse Enumerated.\r\n"));
     6c2:	8d e1       	ldi	r24, 0x1D	; 29
     6c4:	91 e0       	ldi	r25, 0x01	; 1
     6c6:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <puts_P>
     6ca:	8b b1       	in	r24, 0x0b	; 11
     6cc:	8f 70       	andi	r24, 0x0F	; 15
     6ce:	80 66       	ori	r24, 0x60	; 96
     6d0:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
}
     6d2:	1f 91       	pop	r17
     6d4:	08 95       	ret

000006d6 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     6d6:	84 b7       	in	r24, 0x34	; 52
     6d8:	87 7f       	andi	r24, 0xF7	; 247
     6da:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     6dc:	38 e1       	ldi	r19, 0x18	; 24
     6de:	0f b6       	in	r0, 0x3f	; 63
     6e0:	f8 94       	cli
     6e2:	30 93 60 00 	sts	0x0060, r19
     6e6:	10 92 60 00 	sts	0x0060, r1
     6ea:	0f be       	out	0x3f, r0	; 63

	/* Disable clock division */
	clock_prescale_set(clock_div_1);
     6ec:	80 e0       	ldi	r24, 0x00	; 0
     6ee:	90 e0       	ldi	r25, 0x00	; 0
     6f0:	20 e8       	ldi	r18, 0x80	; 128
     6f2:	0f b6       	in	r0, 0x3f	; 63
     6f4:	f8 94       	cli
     6f6:	20 93 61 00 	sts	0x0061, r18
     6fa:	80 93 61 00 	sts	0x0061, r24
     6fe:	0f be       	out	0x3f, r0	; 63
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     700:	83 e3       	ldi	r24, 0x33	; 51
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	90 93 cd 00 	sts	0x00CD, r25
     708:	80 93 cc 00 	sts	0x00CC, r24

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     70c:	86 e0       	ldi	r24, 0x06	; 6
     70e:	80 93 ca 00 	sts	0x00CA, r24
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     712:	10 92 c8 00 	sts	0x00C8, r1
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     716:	30 93 c9 00 	sts	0x00C9, r19

				DDRD  |= (1 << 3);
     71a:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     71c:	5a 9a       	sbi	0x0b, 2	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     71e:	8a b1       	in	r24, 0x0a	; 10
     720:	80 6f       	ori	r24, 0xF0	; 240
     722:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     724:	8b b1       	in	r24, 0x0b	; 11
     726:	8f 70       	andi	r24, 0x0F	; 15
     728:	8b b9       	out	0x0b, r24	; 11

	/* Hardware Initialization */
	Serial_Init(9600, false);
	LEDs_Init();
	USB_Init();
     72a:	03 d4       	rcall	.+2054   	; 0xf32 <USB_Init>
			static inline void Serial_CreateStream(FILE* Stream)
			{
				if (!(Stream))
				{
					Stream = &USARTSerialStream;
					stdin  = Stream;
     72c:	eb ef       	ldi	r30, 0xFB	; 251
     72e:	f4 e0       	ldi	r31, 0x04	; 4
     730:	f0 93 0a 05 	sts	0x050A, r31
     734:	e0 93 09 05 	sts	0x0509, r30
					stdout = Stream;
     738:	f0 93 0c 05 	sts	0x050C, r31
     73c:	e0 93 0b 05 	sts	0x050B, r30
				}
			
				*Stream = (FILE)FDEV_SETUP_STREAM(Serial_putchar, Serial_getchar, _FDEV_SETUP_RW);
     740:	8e e0       	ldi	r24, 0x0E	; 14
     742:	df 01       	movw	r26, r30
     744:	1d 92       	st	X+, r1
     746:	8a 95       	dec	r24
     748:	e9 f7       	brne	.-6      	; 0x744 <SetupHardware+0x6e>
     74a:	83 e0       	ldi	r24, 0x03	; 3
     74c:	80 93 fe 04 	sts	0x04FE, r24
     750:	82 e2       	ldi	r24, 0x22	; 34
     752:	9f e0       	ldi	r25, 0x0F	; 15
     754:	90 93 04 05 	sts	0x0504, r25
     758:	80 93 03 05 	sts	0x0503, r24
     75c:	8c e2       	ldi	r24, 0x2C	; 44
     75e:	9f e0       	ldi	r25, 0x0F	; 15
     760:	90 93 06 05 	sts	0x0506, r25
     764:	80 93 05 05 	sts	0x0505, r24

	/* Create a stdio stream for the serial port for stdin and stdout */
	Serial_CreateStream(NULL);
}
     768:	08 95       	ret

0000076a <main>:
/** Main program entry point. This routine configures the hardware required by the application, then
 *  enters a loop to run the application tasks in sequence.
 */
int main(void)
{
	SetupHardware();
     76a:	b5 df       	rcall	.-150    	; 0x6d6 <SetupHardware>

	puts_P(PSTR(ESC_FG_CYAN "Mouse HID Parser Host Demo running.\r\n" ESC_FG_WHITE));
     76c:	88 e9       	ldi	r24, 0x98	; 152
     76e:	92 e0       	ldi	r25, 0x02	; 2
     770:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <puts_P>
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     774:	8b b1       	in	r24, 0x0b	; 11
     776:	8f 70       	andi	r24, 0x0F	; 15
     778:	80 61       	ori	r24, 0x10	; 16
     77a:	8b b9       	out	0x0b, r24	; 11

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
	sei();
     77c:	78 94       	sei

	for (;;)
	{
		MouseHost_Task();
     77e:	68 de       	rcall	.-816    	; 0x450 <MouseHost_Task>

		USB_USBTask();
     780:	e4 d6       	rcall	.+3528   	; 0x154a <USB_USBTask>
     782:	fd cf       	rjmp	.-6      	; 0x77e <main+0x14>

00000784 <DComp_NextMouseInterface>:
 *  This comparator searches for the next Interface descriptor of the correct Mouse HID Class and Protocol values.
 *
 *  \return A value from the DSEARCH_Return_ErrorCodes_t enum
 */
uint8_t DComp_NextMouseInterface(void* CurrentDescriptor)
{
     784:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
     786:	81 81       	ldd	r24, Z+1	; 0x01
     788:	84 30       	cpi	r24, 0x04	; 4
     78a:	29 f4       	brne	.+10     	; 0x796 <DComp_NextMouseInterface+0x12>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		/* Check the HID descriptor class, break out if correct class interface found */
		if (Interface->Class == HID_CSCP_HIDClass)
     78c:	85 81       	ldd	r24, Z+5	; 0x05
     78e:	83 30       	cpi	r24, 0x03	; 3
     790:	11 f4       	brne	.+4      	; 0x796 <DComp_NextMouseInterface+0x12>
     792:	80 e0       	ldi	r24, 0x00	; 0
     794:	08 95       	ret
     796:	82 e0       	ldi	r24, 0x02	; 2
			return DESCRIPTOR_SEARCH_Found;
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
     798:	08 95       	ret

0000079a <DComp_NextMouseInterfaceDataEndpoint>:
 */
uint8_t DComp_NextMouseInterfaceDataEndpoint(void* CurrentDescriptor)
{
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Endpoint)
     79a:	fc 01       	movw	r30, r24
     79c:	81 81       	ldd	r24, Z+1	; 0x01
     79e:	85 30       	cpi	r24, 0x05	; 5
     7a0:	11 f4       	brne	.+4      	; 0x7a6 <DComp_NextMouseInterfaceDataEndpoint+0xc>
     7a2:	80 e0       	ldi	r24, 0x00	; 0
     7a4:	08 95       	ret
	  return DESCRIPTOR_SEARCH_Found;
	else if (Header->Type == DTYPE_Interface)
     7a6:	84 30       	cpi	r24, 0x04	; 4
     7a8:	11 f0       	breq	.+4      	; 0x7ae <DComp_NextMouseInterfaceDataEndpoint+0x14>
     7aa:	82 e0       	ldi	r24, 0x02	; 2
     7ac:	08 95       	ret
     7ae:	81 e0       	ldi	r24, 0x01	; 1
	  return DESCRIPTOR_SEARCH_Fail;
	else
	  return DESCRIPTOR_SEARCH_NotFound;
}
     7b0:	08 95       	ret

000007b2 <DComp_NextHID>:
 */
uint8_t DComp_NextHID(void* CurrentDescriptor)
{
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == HID_DTYPE_HID)
     7b2:	fc 01       	movw	r30, r24
     7b4:	81 81       	ldd	r24, Z+1	; 0x01
     7b6:	81 32       	cpi	r24, 0x21	; 33
     7b8:	11 f0       	breq	.+4      	; 0x7be <DComp_NextHID+0xc>
     7ba:	82 e0       	ldi	r24, 0x02	; 2
     7bc:	08 95       	ret
     7be:	80 e0       	ldi	r24, 0x00	; 0
	  return DESCRIPTOR_SEARCH_Found;
	else
	  return DESCRIPTOR_SEARCH_NotFound;
}
     7c0:	08 95       	ret

000007c2 <ProcessConfigurationDescriptor>:
 *  This routine searches for a HID interface descriptor containing at least one Interrupt type IN endpoint and HID descriptor.
 *
 *  \return An error code from the \ref MouseHostWithParser_GetConfigDescriptorDataCodes_t enum.
 */
uint8_t ProcessConfigurationDescriptor(void)
{
     7c2:	8f 92       	push	r8
     7c4:	9f 92       	push	r9
     7c6:	af 92       	push	r10
     7c8:	bf 92       	push	r11
     7ca:	cf 92       	push	r12
     7cc:	df 92       	push	r13
     7ce:	ef 92       	push	r14
     7d0:	ff 92       	push	r15
     7d2:	0f 93       	push	r16
     7d4:	1f 93       	push	r17
     7d6:	df 93       	push	r29
     7d8:	cf 93       	push	r28
     7da:	cd b7       	in	r28, 0x3d	; 61
     7dc:	de b7       	in	r29, 0x3e	; 62
     7de:	c4 50       	subi	r28, 0x04	; 4
     7e0:	d2 40       	sbci	r29, 0x02	; 2
     7e2:	0f b6       	in	r0, 0x3f	; 63
     7e4:	f8 94       	cli
     7e6:	de bf       	out	0x3e, r29	; 62
     7e8:	0f be       	out	0x3f, r0	; 63
     7ea:	cd bf       	out	0x3d, r28	; 61
	uint8_t  ConfigDescriptorData[512];
	void*    CurrConfigLocation = ConfigDescriptorData;
     7ec:	ae 01       	movw	r20, r28
     7ee:	4b 5f       	subi	r20, 0xFB	; 251
     7f0:	5f 4f       	sbci	r21, 0xFF	; 255
     7f2:	5a 83       	std	Y+2, r21	; 0x02
     7f4:	49 83       	std	Y+1, r20	; 0x01
	USB_Descriptor_Interface_t* HIDInterface   = NULL;
	USB_HID_Descriptor_HID_t*   HIDDescriptor  = NULL;
	USB_Descriptor_Endpoint_t*  DataINEndpoint = NULL;

	/* Retrieve the entire configuration descriptor into the allocated buffer */
	switch (USB_Host_GetDeviceConfigDescriptor(1, &CurrConfigBytesRem, ConfigDescriptorData, sizeof(ConfigDescriptorData)))
     7f6:	83 e0       	ldi	r24, 0x03	; 3
     7f8:	c8 2e       	mov	r12, r24
     7fa:	d1 2c       	mov	r13, r1
     7fc:	cc 0e       	add	r12, r28
     7fe:	dd 1e       	adc	r13, r29
     800:	81 e0       	ldi	r24, 0x01	; 1
     802:	b6 01       	movw	r22, r12
     804:	20 e0       	ldi	r18, 0x00	; 0
     806:	32 e0       	ldi	r19, 0x02	; 2
     808:	f0 d4       	rcall	.+2528   	; 0x11ea <USB_Host_GetDeviceConfigDescriptor>
     80a:	85 30       	cpi	r24, 0x05	; 5
     80c:	29 f0       	breq	.+10     	; 0x818 <ProcessConfigurationDescriptor+0x56>
     80e:	86 30       	cpi	r24, 0x06	; 6
     810:	79 f0       	breq	.+30     	; 0x830 <ProcessConfigurationDescriptor+0x6e>
     812:	88 23       	and	r24, r24
     814:	19 f0       	breq	.+6      	; 0x81c <ProcessConfigurationDescriptor+0x5a>
     816:	0e c0       	rjmp	.+28     	; 0x834 <ProcessConfigurationDescriptor+0x72>
     818:	82 e0       	ldi	r24, 0x02	; 2
     81a:	4d c0       	rjmp	.+154    	; 0x8b6 <ProcessConfigurationDescriptor+0xf4>
     81c:	00 e0       	ldi	r16, 0x00	; 0
     81e:	10 e0       	ldi	r17, 0x00	; 0
     820:	88 24       	eor	r8, r8
     822:	99 24       	eor	r9, r9
	}

	while (!(DataINEndpoint))
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(HIDInterface) ||
     824:	56 01       	movw	r10, r12
     826:	7e 01       	movw	r14, r28
     828:	08 94       	sec
     82a:	e1 1c       	adc	r14, r1
     82c:	f1 1c       	adc	r15, r1
     82e:	04 c0       	rjmp	.+8      	; 0x838 <ProcessConfigurationDescriptor+0x76>
	USB_Descriptor_Interface_t* HIDInterface   = NULL;
	USB_HID_Descriptor_HID_t*   HIDDescriptor  = NULL;
	USB_Descriptor_Endpoint_t*  DataINEndpoint = NULL;

	/* Retrieve the entire configuration descriptor into the allocated buffer */
	switch (USB_Host_GetDeviceConfigDescriptor(1, &CurrConfigBytesRem, ConfigDescriptorData, sizeof(ConfigDescriptorData)))
     830:	83 e0       	ldi	r24, 0x03	; 3
     832:	41 c0       	rjmp	.+130    	; 0x8b6 <ProcessConfigurationDescriptor+0xf4>
     834:	81 e0       	ldi	r24, 0x01	; 1
     836:	3f c0       	rjmp	.+126    	; 0x8b6 <ProcessConfigurationDescriptor+0xf4>
	}

	while (!(DataINEndpoint))
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(HIDInterface) ||
     838:	01 15       	cp	r16, r1
     83a:	11 05       	cpc	r17, r1
     83c:	39 f0       	breq	.+14     	; 0x84c <ProcessConfigurationDescriptor+0x8a>
     83e:	c5 01       	movw	r24, r10
     840:	b7 01       	movw	r22, r14
     842:	4d ec       	ldi	r20, 0xCD	; 205
     844:	53 e0       	ldi	r21, 0x03	; 3
     846:	8d d4       	rcall	.+2330   	; 0x1162 <USB_GetNextDescriptorComp>
     848:	88 23       	and	r24, r24
     84a:	b9 f0       	breq	.+46     	; 0x87a <ProcessConfigurationDescriptor+0xb8>
		    USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
		                              DComp_NextMouseInterfaceDataEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			/* Get the next HID interface from the configuration descriptor */
			if (USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     84c:	c5 01       	movw	r24, r10
     84e:	b7 01       	movw	r22, r14
     850:	42 ec       	ldi	r20, 0xC2	; 194
     852:	53 e0       	ldi	r21, 0x03	; 3
     854:	86 d4       	rcall	.+2316   	; 0x1162 <USB_GetNextDescriptorComp>
     856:	88 23       	and	r24, r24
     858:	69 f5       	brne	.+90     	; 0x8b4 <ProcessConfigurationDescriptor+0xf2>
				/* Descriptor not found, error out */
				return NoCompatibleInterfaceFound;
			}

			/* Save the interface in case we need to refer back to it later */
			HIDInterface = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Interface_t);
     85a:	19 81       	ldd	r17, Y+1	; 0x01
     85c:	0a 81       	ldd	r16, Y+2	; 0x02

			/* Get the HID descriptor from the configuration descriptor */
			if (USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     85e:	c5 01       	movw	r24, r10
     860:	b7 01       	movw	r22, r14
     862:	49 ed       	ldi	r20, 0xD9	; 217
     864:	53 e0       	ldi	r21, 0x03	; 3
     866:	7d d4       	rcall	.+2298   	; 0x1162 <USB_GetNextDescriptorComp>
     868:	88 23       	and	r24, r24
     86a:	21 f5       	brne	.+72     	; 0x8b4 <ProcessConfigurationDescriptor+0xf2>
				/* Descriptor not found, error out */
				return NoCompatibleInterfaceFound;
			}

			/* Save the interface in case we need to refer back to it later */
			HIDInterface = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Interface_t);
     86c:	81 2f       	mov	r24, r17
     86e:	90 2f       	mov	r25, r16
     870:	9c 01       	movw	r18, r24
     872:	89 01       	movw	r16, r18
				/* Descriptor not found, error out */
				return NoCompatibleInterfaceFound;
			}

			/* Save the HID descriptor for later use */
			HIDDescriptor = DESCRIPTOR_PCAST(CurrConfigLocation, USB_HID_Descriptor_HID_t);
     874:	89 80       	ldd	r8, Y+1	; 0x01
     876:	9a 80       	ldd	r9, Y+2	; 0x02
     878:	df cf       	rjmp	.-66     	; 0x838 <ProcessConfigurationDescriptor+0x76>
			/* Skip the remainder of the loop as we have not found an endpoint yet */
			continue;
		}

		/* Retrieve the endpoint address from the endpoint descriptor */
		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Endpoint_t);
     87a:	c9 80       	ldd	r12, Y+1	; 0x01
     87c:	da 80       	ldd	r13, Y+2	; 0x02

		/* If the endpoint is a IN type endpoint */
		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
     87e:	f6 01       	movw	r30, r12
     880:	22 81       	ldd	r18, Z+2	; 0x02
     882:	27 ff       	sbrs	r18, 7
     884:	d9 cf       	rjmp	.-78     	; 0x838 <ProcessConfigurationDescriptor+0x76>
			return DescriptorTooLarge;
		default:
			return ControlError;
	}

	while (!(DataINEndpoint))
     886:	c1 14       	cp	r12, r1
     888:	d1 04       	cpc	r13, r1
     88a:	b1 f2       	breq	.-84     	; 0x838 <ProcessConfigurationDescriptor+0x76>
		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
		  DataINEndpoint = EndpointData;
	}

	/* Configure the HID data IN pipe */
	Pipe_ConfigurePipe(MOUSE_DATA_IN_PIPE, EP_TYPE_INTERRUPT, PIPE_TOKEN_IN,
     88c:	04 81       	ldd	r16, Z+4	; 0x04
     88e:	15 81       	ldd	r17, Z+5	; 0x05
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	63 e0       	ldi	r22, 0x03	; 3
     894:	40 e1       	ldi	r20, 0x10	; 16
     896:	ee 24       	eor	r14, r14
     898:	5b d2       	rcall	.+1206   	; 0xd50 <Pipe_ConfigurePipe>
	                   DataINEndpoint->EndpointAddress, DataINEndpoint->EndpointSize, PIPE_BANK_SINGLE);
	Pipe_SetInterruptPeriod(DataINEndpoint->PollingIntervalMS);
     89a:	f6 01       	movw	r30, r12
     89c:	86 81       	ldd	r24, Z+6	; 0x06
			 *  \param[in] Milliseconds  Number of milliseconds between each pipe poll.
			 */
			static inline void Pipe_SetInterruptPeriod(const uint8_t Milliseconds) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInterruptPeriod(const uint8_t Milliseconds)
			{
				UPCFG2X = Milliseconds;
     89e:	80 93 ad 00 	sts	0x00AD, r24

	/* Get the HID report size from the HID report descriptor */
	HIDReportSize = HIDDescriptor->HIDReportLength;
     8a2:	f4 01       	movw	r30, r8
     8a4:	87 81       	ldd	r24, Z+7	; 0x07
     8a6:	90 85       	ldd	r25, Z+8	; 0x08
     8a8:	90 93 ef 04 	sts	0x04EF, r25
     8ac:	80 93 ee 04 	sts	0x04EE, r24
     8b0:	80 e0       	ldi	r24, 0x00	; 0
     8b2:	01 c0       	rjmp	.+2      	; 0x8b6 <ProcessConfigurationDescriptor+0xf4>

	/* Valid data found, return success */
	return SuccessfulConfigRead;
     8b4:	84 e0       	ldi	r24, 0x04	; 4
}
     8b6:	cc 5f       	subi	r28, 0xFC	; 252
     8b8:	dd 4f       	sbci	r29, 0xFD	; 253
     8ba:	0f b6       	in	r0, 0x3f	; 63
     8bc:	f8 94       	cli
     8be:	de bf       	out	0x3e, r29	; 62
     8c0:	0f be       	out	0x3f, r0	; 63
     8c2:	cd bf       	out	0x3d, r28	; 61
     8c4:	cf 91       	pop	r28
     8c6:	df 91       	pop	r29
     8c8:	1f 91       	pop	r17
     8ca:	0f 91       	pop	r16
     8cc:	ff 90       	pop	r15
     8ce:	ef 90       	pop	r14
     8d0:	df 90       	pop	r13
     8d2:	cf 90       	pop	r12
     8d4:	bf 90       	pop	r11
     8d6:	af 90       	pop	r10
     8d8:	9f 90       	pop	r9
     8da:	8f 90       	pop	r8
     8dc:	08 95       	ret

000008de <CALLBACK_HIDParser_FilterHIDReportItem>:
 *  \param[in] CurrentItem  Pointer to the item the HID report parser is currently working with
 *
 *  \return Boolean true if the item should be stored into the HID report structure, false if it should be discarded
 */
bool CALLBACK_HIDParser_FilterHIDReportItem(HID_ReportItem_t* const CurrentItem)
{
     8de:	dc 01       	movw	r26, r24

	/* Iterate through the item's collection path, until either the root collection node or a collection with the
	 * Mouse Usage is found - this prevents Joysticks, which use identical descriptors except for the Joystick usage
	 * parent node, from being erroneously treated as a mouse
	 */
	for (HID_CollectionPath_t* CurrPath = CurrentItem->CollectionPath; CurrPath != NULL; CurrPath = CurrPath->Parent)
     8e0:	16 96       	adiw	r26, 0x06	; 6
     8e2:	ed 91       	ld	r30, X+
     8e4:	fc 91       	ld	r31, X
     8e6:	17 97       	sbiw	r26, 0x07	; 7
     8e8:	0b c0       	rjmp	.+22     	; 0x900 <CALLBACK_HIDParser_FilterHIDReportItem+0x22>
	{
		if ((CurrPath->Usage.Page  == USAGE_PAGE_GENERIC_DCTRL) &&
     8ea:	81 81       	ldd	r24, Z+1	; 0x01
     8ec:	92 81       	ldd	r25, Z+2	; 0x02
     8ee:	01 97       	sbiw	r24, 0x01	; 1
     8f0:	21 f4       	brne	.+8      	; 0x8fa <CALLBACK_HIDParser_FilterHIDReportItem+0x1c>
     8f2:	83 81       	ldd	r24, Z+3	; 0x03
     8f4:	94 81       	ldd	r25, Z+4	; 0x04
     8f6:	02 97       	sbiw	r24, 0x02	; 2
     8f8:	39 f0       	breq	.+14     	; 0x908 <CALLBACK_HIDParser_FilterHIDReportItem+0x2a>

	/* Iterate through the item's collection path, until either the root collection node or a collection with the
	 * Mouse Usage is found - this prevents Joysticks, which use identical descriptors except for the Joystick usage
	 * parent node, from being erroneously treated as a mouse
	 */
	for (HID_CollectionPath_t* CurrPath = CurrentItem->CollectionPath; CurrPath != NULL; CurrPath = CurrPath->Parent)
     8fa:	05 80       	ldd	r0, Z+5	; 0x05
     8fc:	f6 81       	ldd	r31, Z+6	; 0x06
     8fe:	e0 2d       	mov	r30, r0
     900:	30 97       	sbiw	r30, 0x00	; 0
     902:	99 f7       	brne	.-26     	; 0x8ea <CALLBACK_HIDParser_FilterHIDReportItem+0xc>
     904:	80 e0       	ldi	r24, 0x00	; 0
     906:	08 95       	ret

	/* Check the attributes of the current mouse item - see if we are interested in it or not;
	 * only store BUTTON and GENERIC_DESKTOP_CONTROL items into the Processed HID Report
	 * structure to save RAM and ignore the rest
	 */
	return ((CurrentItem->Attributes.Usage.Page == USAGE_PAGE_BUTTON) ||
     908:	19 96       	adiw	r26, 0x09	; 9
     90a:	8d 91       	ld	r24, X+
     90c:	9c 91       	ld	r25, X
     90e:	1a 97       	sbiw	r26, 0x0a	; 10
     910:	89 30       	cpi	r24, 0x09	; 9
     912:	91 05       	cpc	r25, r1
     914:	21 f0       	breq	.+8      	; 0x91e <CALLBACK_HIDParser_FilterHIDReportItem+0x40>
     916:	20 e0       	ldi	r18, 0x00	; 0
     918:	30 e0       	ldi	r19, 0x00	; 0
     91a:	01 97       	sbiw	r24, 0x01	; 1
     91c:	11 f4       	brne	.+4      	; 0x922 <CALLBACK_HIDParser_FilterHIDReportItem+0x44>
     91e:	21 e0       	ldi	r18, 0x01	; 1
     920:	30 e0       	ldi	r19, 0x00	; 0
     922:	82 2f       	mov	r24, r18
	        (CurrentItem->Attributes.Usage.Page == USAGE_PAGE_GENERIC_DCTRL));
}
     924:	08 95       	ret

00000926 <GetHIDReportData>:
 *  structures via the HID parser routines in the LUFA library.
 *
 *  \return  A value from the \ref MouseHostWithParser_GetHIDReportDataCodes_t enum
 */
uint8_t GetHIDReportData(void)
{
     926:	ef 92       	push	r14
     928:	ff 92       	push	r15
     92a:	0f 93       	push	r16
     92c:	1f 93       	push	r17
     92e:	df 93       	push	r29
     930:	cf 93       	push	r28
     932:	cd b7       	in	r28, 0x3d	; 61
     934:	de b7       	in	r29, 0x3e	; 62
	/* Send the HID report to the parser for processing */
	if (USB_ProcessHIDReport(HIDReportData, HIDReportSize, &HIDReportInfo) != HID_PARSE_Successful)
	  return ParseError;

	return ParseSuccessful;
}
     936:	ed b6       	in	r14, 0x3d	; 61
     938:	fe b6       	in	r15, 0x3e	; 62
 *  \return  A value from the \ref MouseHostWithParser_GetHIDReportDataCodes_t enum
 */
uint8_t GetHIDReportData(void)
{
	/* Create a buffer big enough to hold the entire returned HID report */
	uint8_t HIDReportData[HIDReportSize];
     93a:	20 91 ee 04 	lds	r18, 0x04EE
     93e:	30 91 ef 04 	lds	r19, 0x04EF
     942:	8d b7       	in	r24, 0x3d	; 61
     944:	9e b7       	in	r25, 0x3e	; 62
     946:	82 1b       	sub	r24, r18
     948:	93 0b       	sbc	r25, r19
     94a:	0f b6       	in	r0, 0x3f	; 63
     94c:	f8 94       	cli
     94e:	9e bf       	out	0x3e, r25	; 62
     950:	0f be       	out	0x3f, r0	; 63
     952:	8d bf       	out	0x3d, r24	; 61
     954:	0d b7       	in	r16, 0x3d	; 61
     956:	1e b7       	in	r17, 0x3e	; 62
     958:	0f 5f       	subi	r16, 0xFF	; 255
     95a:	1f 4f       	sbci	r17, 0xFF	; 255

	USB_ControlRequest = (USB_Request_Header_t)
     95c:	81 e8       	ldi	r24, 0x81	; 129
     95e:	80 93 f2 04 	sts	0x04F2, r24
     962:	86 e0       	ldi	r24, 0x06	; 6
     964:	80 93 f3 04 	sts	0x04F3, r24
     968:	80 e0       	ldi	r24, 0x00	; 0
     96a:	92 e2       	ldi	r25, 0x22	; 34
     96c:	90 93 f5 04 	sts	0x04F5, r25
     970:	80 93 f4 04 	sts	0x04F4, r24
     974:	10 92 f7 04 	sts	0x04F7, r1
     978:	10 92 f6 04 	sts	0x04F6, r1
     97c:	30 93 f9 04 	sts	0x04F9, r19
     980:	20 93 f8 04 	sts	0x04F8, r18
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     984:	10 92 a7 00 	sts	0x00A7, r1

	/* Select the control pipe for the request transfer */
	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	/* Send control request to retrieve the HID report from the attached device */
	if (USB_Host_SendControlRequest(HIDReportData) != HOST_SENDCONTROL_Successful)
     988:	c8 01       	movw	r24, r16
     98a:	b3 d4       	rcall	.+2406   	; 0x12f2 <USB_Host_SendControlRequest>
     98c:	88 23       	and	r24, r24
     98e:	11 f0       	breq	.+4      	; 0x994 <GetHIDReportData+0x6e>
     990:	82 e0       	ldi	r24, 0x02	; 2
     992:	0a c0       	rjmp	.+20     	; 0x9a8 <GetHIDReportData+0x82>
	  return ParseControlError;

	/* Send the HID report to the parser for processing */
	if (USB_ProcessHIDReport(HIDReportData, HIDReportSize, &HIDReportInfo) != HID_PARSE_Successful)
     994:	60 91 ee 04 	lds	r22, 0x04EE
     998:	70 91 ef 04 	lds	r23, 0x04EF
     99c:	c8 01       	movw	r24, r16
     99e:	45 e1       	ldi	r20, 0x15	; 21
     9a0:	51 e0       	ldi	r21, 0x01	; 1
     9a2:	4c d6       	rcall	.+3224   	; 0x163c <USB_ProcessHIDReport>
     9a4:	81 11       	cpse	r24, r1
     9a6:	81 e0       	ldi	r24, 0x01	; 1
	  return ParseError;

	return ParseSuccessful;
}
     9a8:	0f b6       	in	r0, 0x3f	; 63
     9aa:	f8 94       	cli
     9ac:	fe be       	out	0x3e, r15	; 62
     9ae:	0f be       	out	0x3f, r0	; 63
     9b0:	ed be       	out	0x3d, r14	; 61
     9b2:	cf 91       	pop	r28
     9b4:	df 91       	pop	r29
     9b6:	1f 91       	pop	r17
     9b8:	0f 91       	pop	r16
     9ba:	ff 90       	pop	r15
     9bc:	ef 90       	pop	r14
     9be:	08 95       	ret

000009c0 <USB_Host_WaitMS>:
		USB_ResetInterface();
	}
}

uint8_t USB_Host_WaitMS(uint8_t MS)
{
     9c0:	98 2f       	mov	r25, r24
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     9c2:	20 91 9e 00 	lds	r18, 0x009E
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     9c6:	30 91 a0 00 	lds	r19, 0x00A0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     9ca:	80 91 a0 00 	lds	r24, 0x00A0
     9ce:	8f 7d       	andi	r24, 0xDF	; 223
     9d0:	80 93 a0 00 	sts	0x00A0, r24
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     9d4:	80 91 9f 00 	lds	r24, 0x009F
     9d8:	8f 7d       	andi	r24, 0xDF	; 223
     9da:	80 93 9f 00 	sts	0x009F, r24
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     9de:	80 91 9e 00 	lds	r24, 0x009E
     9e2:	81 60       	ori	r24, 0x01	; 1
     9e4:	80 93 9e 00 	sts	0x009E, r24
     9e8:	28 c0       	rjmp	.+80     	; 0xa3a <USB_Host_WaitMS+0x7a>
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     9ea:	80 91 9f 00 	lds	r24, 0x009F

	USB_Host_ResumeBus();

	while (MS)
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     9ee:	85 ff       	sbrs	r24, 5
     9f0:	06 c0       	rjmp	.+12     	; 0x9fe <USB_Host_WaitMS+0x3e>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     9f2:	80 91 9f 00 	lds	r24, 0x009F
     9f6:	8f 7d       	andi	r24, 0xDF	; 223
     9f8:	80 93 9f 00 	sts	0x009F, r24
		{
			USB_INT_Clear(USB_INT_HSOFI);
			MS--;
     9fc:	91 50       	subi	r25, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
     9fe:	80 91 fa 04 	lds	r24, 0x04FA
     a02:	81 30       	cpi	r24, 0x01	; 1
     a04:	11 f4       	brne	.+4      	; 0xa0a <USB_Host_WaitMS+0x4a>
     a06:	91 e0       	ldi	r25, 0x01	; 1
     a08:	1a c0       	rjmp	.+52     	; 0xa3e <USB_Host_WaitMS+0x7e>
			 *  \return Boolean \c true if an error has occurred on the selected pipe, \c false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
     a0a:	80 91 a6 00 	lds	r24, 0x00A6
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError() == true)
     a0e:	84 ff       	sbrs	r24, 4
     a10:	09 c0       	rjmp	.+18     	; 0xa24 <USB_Host_WaitMS+0x64>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     a12:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
     a16:	80 91 a6 00 	lds	r24, 0x00A6
     a1a:	8f 7e       	andi	r24, 0xEF	; 239
     a1c:	80 93 a6 00 	sts	0x00A6, r24
     a20:	92 e0       	ldi	r25, 0x02	; 2
     a22:	0d c0       	rjmp	.+26     	; 0xa3e <USB_Host_WaitMS+0x7e>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     a24:	80 91 a6 00 	lds	r24, 0x00A6
			ErrorCode = HOST_WAITERROR_PipeError;

			break;
		}

		if (Pipe_IsStalled() == true)
     a28:	81 ff       	sbrs	r24, 1
     a2a:	07 c0       	rjmp	.+14     	; 0xa3a <USB_Host_WaitMS+0x7a>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
     a2c:	80 91 a6 00 	lds	r24, 0x00A6
     a30:	8d 7f       	andi	r24, 0xFD	; 253
     a32:	80 93 a6 00 	sts	0x00A6, r24
     a36:	93 e0       	ldi	r25, 0x03	; 3
     a38:	02 c0       	rjmp	.+4      	; 0xa3e <USB_Host_WaitMS+0x7e>
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     a3a:	99 23       	and	r25, r25
     a3c:	b1 f6       	brne	.-84     	; 0x9ea <USB_Host_WaitMS+0x2a>

			break;
		}
	}

	if (BusSuspended)
     a3e:	20 fd       	sbrc	r18, 0
     a40:	05 c0       	rjmp	.+10     	; 0xa4c <USB_Host_WaitMS+0x8c>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     a42:	80 91 9e 00 	lds	r24, 0x009E
     a46:	8e 7f       	andi	r24, 0xFE	; 254
     a48:	80 93 9e 00 	sts	0x009E, r24
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
     a4c:	35 ff       	sbrs	r19, 5
     a4e:	05 c0       	rjmp	.+10     	; 0xa5a <USB_Host_WaitMS+0x9a>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     a50:	80 91 a0 00 	lds	r24, 0x00A0
     a54:	80 62       	ori	r24, 0x20	; 32
     a56:	80 93 a0 00 	sts	0x00A0, r24
	  USB_INT_Enable(USB_INT_HSOFI);

	return ErrorCode;
}
     a5a:	89 2f       	mov	r24, r25
     a5c:	08 95       	ret

00000a5e <USB_Host_ResetDevice>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     a5e:	60 91 9e 00 	lds	r22, 0x009E
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     a62:	80 91 a0 00 	lds	r24, 0x00A0
     a66:	8d 7f       	andi	r24, 0xFD	; 253
     a68:	80 93 a0 00 	sts	0x00A0, r24
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
     a6c:	80 91 9e 00 	lds	r24, 0x009E
     a70:	82 60       	ori	r24, 0x02	; 2
     a72:	80 93 9e 00 	sts	0x009E, r24
			 *  \return Boolean \c true if no bus reset is currently being sent, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
     a76:	80 91 9e 00 	lds	r24, 0x009E
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
     a7a:	81 fd       	sbrc	r24, 1
     a7c:	fc cf       	rjmp	.-8      	; 0xa76 <USB_Host_ResetDevice+0x18>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     a7e:	80 91 9e 00 	lds	r24, 0x009E
     a82:	81 60       	ori	r24, 0x01	; 1
     a84:	80 93 9e 00 	sts	0x009E, r24
	USB_Host_ResumeBus();
	
	USB_Host_ConfigurationNumber = 0;
     a88:	10 92 f0 04 	sts	0x04F0, r1
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     a8c:	30 91 a0 00 	lds	r19, 0x00A0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     a90:	80 91 a0 00 	lds	r24, 0x00A0
     a94:	8f 7d       	andi	r24, 0xDF	; 223
     a96:	80 93 a0 00 	sts	0x00A0, r24
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     a9a:	80 91 9f 00 	lds	r24, 0x009F
     a9e:	8f 7d       	andi	r24, 0xDF	; 223
     aa0:	80 93 9f 00 	sts	0x009F, r24
     aa4:	2a e0       	ldi	r18, 0x0A	; 10
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     aa6:	40 ed       	ldi	r20, 0xD0	; 208
     aa8:	57 e0       	ldi	r21, 0x07	; 7
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     aaa:	80 91 9f 00 	lds	r24, 0x009F
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     aae:	85 ff       	sbrs	r24, 5
     ab0:	0b c0       	rjmp	.+22     	; 0xac8 <USB_Host_ResetDevice+0x6a>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     ab2:	80 91 9f 00 	lds	r24, 0x009F
     ab6:	8f 7d       	andi	r24, 0xDF	; 223
     ab8:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     abc:	80 91 9f 00 	lds	r24, 0x009F
     ac0:	8d 7f       	andi	r24, 0xFD	; 253
     ac2:	80 93 9f 00 	sts	0x009F, r24
     ac6:	05 c0       	rjmp	.+10     	; 0xad2 <USB_Host_ResetDevice+0x74>
     ac8:	ca 01       	movw	r24, r20
     aca:	01 97       	sbiw	r24, 0x01	; 1
     acc:	f1 f7       	brne	.-4      	; 0xaca <USB_Host_ResetDevice+0x6c>
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
     ace:	21 50       	subi	r18, 0x01	; 1
     ad0:	61 f7       	brne	.-40     	; 0xaaa <USB_Host_ResetDevice+0x4c>
		}

		Delay_MS(1);
	}

	if (HSOFIEnabled)
     ad2:	35 ff       	sbrs	r19, 5
     ad4:	05 c0       	rjmp	.+10     	; 0xae0 <USB_Host_ResetDevice+0x82>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     ad6:	80 91 a0 00 	lds	r24, 0x00A0
     ada:	80 62       	ori	r24, 0x20	; 32
     adc:	80 93 a0 00 	sts	0x00A0, r24
	  USB_INT_Enable(USB_INT_HSOFI);

	if (BusSuspended)
     ae0:	60 fd       	sbrc	r22, 0
     ae2:	05 c0       	rjmp	.+10     	; 0xaee <USB_Host_ResetDevice+0x90>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     ae4:	80 91 9e 00 	lds	r24, 0x009E
     ae8:	8e 7f       	andi	r24, 0xFE	; 254
     aea:	80 93 9e 00 	sts	0x009E, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     aee:	80 91 a0 00 	lds	r24, 0x00A0
     af2:	82 60       	ori	r24, 0x02	; 2
     af4:	80 93 a0 00 	sts	0x00A0, r24
	  USB_Host_SuspendBus();

	USB_INT_Enable(USB_INT_DDISCI);
}
     af8:	08 95       	ret

00000afa <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "../Host.h"

void USB_Host_ProcessNextHostState(void)
{
     afa:	ef 92       	push	r14
     afc:	0f 93       	push	r16
     afe:	1f 93       	push	r17
     b00:	df 93       	push	r29
     b02:	cf 93       	push	r28
     b04:	cd b7       	in	r28, 0x3d	; 61
     b06:	de b7       	in	r29, 0x3e	; 62
     b08:	28 97       	sbiw	r28, 0x08	; 8
     b0a:	0f b6       	in	r0, 0x3f	; 63
     b0c:	f8 94       	cli
     b0e:	de bf       	out	0x3e, r29	; 62
     b10:	0f be       	out	0x3f, r0	; 63
     b12:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
     b14:	80 91 fa 04 	lds	r24, 0x04FA
     b18:	85 30       	cpi	r24, 0x05	; 5
     b1a:	09 f4       	brne	.+2      	; 0xb1e <USB_Host_ProcessNextHostState+0x24>
     b1c:	94 c0       	rjmp	.+296    	; 0xc46 <USB_Host_ProcessNextHostState+0x14c>
     b1e:	86 30       	cpi	r24, 0x06	; 6
     b20:	68 f4       	brcc	.+26     	; 0xb3c <USB_Host_ProcessNextHostState+0x42>
     b22:	82 30       	cpi	r24, 0x02	; 2
     b24:	b9 f1       	breq	.+110    	; 0xb94 <USB_Host_ProcessNextHostState+0x9a>
     b26:	83 30       	cpi	r24, 0x03	; 3
     b28:	18 f4       	brcc	.+6      	; 0xb30 <USB_Host_ProcessNextHostState+0x36>
     b2a:	88 23       	and	r24, r24
     b2c:	a1 f0       	breq	.+40     	; 0xb56 <USB_Host_ProcessNextHostState+0x5c>
     b2e:	04 c1       	rjmp	.+520    	; 0xd38 <USB_Host_ProcessNextHostState+0x23e>
     b30:	83 30       	cpi	r24, 0x03	; 3
     b32:	d1 f1       	breq	.+116    	; 0xba8 <USB_Host_ProcessNextHostState+0xae>
     b34:	84 30       	cpi	r24, 0x04	; 4
     b36:	09 f0       	breq	.+2      	; 0xb3a <USB_Host_ProcessNextHostState+0x40>
     b38:	ff c0       	rjmp	.+510    	; 0xd38 <USB_Host_ProcessNextHostState+0x23e>
     b3a:	5d c0       	rjmp	.+186    	; 0xbf6 <USB_Host_ProcessNextHostState+0xfc>
     b3c:	87 30       	cpi	r24, 0x07	; 7
     b3e:	09 f4       	brne	.+2      	; 0xb42 <USB_Host_ProcessNextHostState+0x48>
     b40:	9b c0       	rjmp	.+310    	; 0xc78 <USB_Host_ProcessNextHostState+0x17e>
     b42:	87 30       	cpi	r24, 0x07	; 7
     b44:	08 f4       	brcc	.+2      	; 0xb48 <USB_Host_ProcessNextHostState+0x4e>
     b46:	8a c0       	rjmp	.+276    	; 0xc5c <USB_Host_ProcessNextHostState+0x162>
     b48:	88 30       	cpi	r24, 0x08	; 8
     b4a:	09 f4       	brne	.+2      	; 0xb4e <USB_Host_ProcessNextHostState+0x54>
     b4c:	b3 c0       	rjmp	.+358    	; 0xcb4 <USB_Host_ProcessNextHostState+0x1ba>
     b4e:	89 30       	cpi	r24, 0x09	; 9
     b50:	09 f0       	breq	.+2      	; 0xb54 <USB_Host_ProcessNextHostState+0x5a>
     b52:	f2 c0       	rjmp	.+484    	; 0xd38 <USB_Host_ProcessNextHostState+0x23e>
     b54:	d7 c0       	rjmp	.+430    	; 0xd04 <USB_Host_ProcessNextHostState+0x20a>
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
     b56:	00 91 13 01 	lds	r16, 0x0113
     b5a:	10 91 14 01 	lds	r17, 0x0114
     b5e:	01 15       	cp	r16, r1
     b60:	11 05       	cpc	r17, r1
     b62:	09 f4       	brne	.+2      	; 0xb66 <USB_Host_ProcessNextHostState+0x6c>
     b64:	e9 c0       	rjmp	.+466    	; 0xd38 <USB_Host_ProcessNextHostState+0x23e>
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     b66:	81 e0       	ldi	r24, 0x01	; 1
     b68:	2b df       	rcall	.-426    	; 0x9c0 <USB_Host_WaitMS>
     b6a:	68 2f       	mov	r22, r24
     b6c:	88 23       	and	r24, r24
     b6e:	31 f0       	breq	.+12     	; 0xb7c <USB_Host_ProcessNextHostState+0x82>
				{
					USB_HostState = PostWaitState;
     b70:	80 91 12 01 	lds	r24, 0x0112
     b74:	80 93 fa 04 	sts	0x04FA, r24
     b78:	91 e0       	ldi	r25, 0x01	; 1
     b7a:	da c0       	rjmp	.+436    	; 0xd30 <USB_Host_ProcessNextHostState+0x236>
					ErrorCode     = HOST_ENUMERROR_WaitStage;
					break;
				}

				if (!(--WaitMSRemaining))
     b7c:	c8 01       	movw	r24, r16
     b7e:	01 97       	sbiw	r24, 0x01	; 1
     b80:	90 93 14 01 	sts	0x0114, r25
     b84:	80 93 13 01 	sts	0x0113, r24
     b88:	89 2b       	or	r24, r25
     b8a:	09 f0       	breq	.+2      	; 0xb8e <USB_Host_ProcessNextHostState+0x94>
     b8c:	d5 c0       	rjmp	.+426    	; 0xd38 <USB_Host_ProcessNextHostState+0x23e>
				  USB_HostState = PostWaitState;
     b8e:	80 91 12 01 	lds	r24, 0x0112
     b92:	07 c0       	rjmp	.+14     	; 0xba2 <USB_Host_ProcessNextHostState+0xa8>
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
     b94:	88 ee       	ldi	r24, 0xE8	; 232
     b96:	93 e0       	ldi	r25, 0x03	; 3
     b98:	90 93 14 01 	sts	0x0114, r25
     b9c:	80 93 13 01 	sts	0x0113, r24

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
     ba0:	83 e0       	ldi	r24, 0x03	; 3
     ba2:	80 93 fa 04 	sts	0x04FA, r24
     ba6:	c8 c0       	rjmp	.+400    	; 0xd38 <USB_Host_ProcessNextHostState+0x23e>
			break;
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
     ba8:	80 91 13 01 	lds	r24, 0x0113
     bac:	90 91 14 01 	lds	r25, 0x0114
     bb0:	01 97       	sbiw	r24, 0x01	; 1
     bb2:	90 93 14 01 	sts	0x0114, r25
     bb6:	80 93 13 01 	sts	0x0113, r24
     bba:	01 96       	adiw	r24, 0x01	; 1
     bbc:	29 f0       	breq	.+10     	; 0xbc8 <USB_Host_ProcessNextHostState+0xce>
     bbe:	80 ed       	ldi	r24, 0xD0	; 208
     bc0:	97 e0       	ldi	r25, 0x07	; 7
     bc2:	01 97       	sbiw	r24, 0x01	; 1
     bc4:	f1 f7       	brne	.-4      	; 0xbc2 <USB_Host_ProcessNextHostState+0xc8>
     bc6:	b8 c0       	rjmp	.+368    	; 0xd38 <USB_Host_ProcessNextHostState+0x23e>
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
     bc8:	77 98       	cbi	0x0e, 7	; 14

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     bca:	80 91 d8 00 	lds	r24, 0x00D8
     bce:	80 61       	ori	r24, 0x10	; 16
     bd0:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
     bd4:	80 91 dd 00 	lds	r24, 0x00DD
     bd8:	8b 7f       	andi	r24, 0xFB	; 251
     bda:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON |=  (1 << UVCONE);
     bde:	80 91 d7 00 	lds	r24, 0x00D7
     be2:	80 61       	ori	r24, 0x10	; 16
     be4:	80 93 d7 00 	sts	0x00D7, r24
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
     be8:	80 91 dd 00 	lds	r24, 0x00DD
     bec:	82 60       	ori	r24, 0x02	; 2
     bee:	80 93 dd 00 	sts	0x00DD, r24

				USB_OTGPAD_On();
				USB_Host_VBUS_Auto_Enable();
				USB_Host_VBUS_Auto_On();

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
     bf2:	84 e0       	ldi	r24, 0x04	; 4
     bf4:	d6 cf       	rjmp	.-84     	; 0xba2 <USB_Host_ProcessNextHostState+0xa8>
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
     bf6:	80 91 9f 00 	lds	r24, 0x009F
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
     bfa:	80 ff       	sbrs	r24, 0
     bfc:	9d c0       	rjmp	.+314    	; 0xd38 <USB_Host_ProcessNextHostState+0x23e>
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     bfe:	80 91 9f 00 	lds	r24, 0x009F
     c02:	8e 7f       	andi	r24, 0xFE	; 254
     c04:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     c08:	80 91 9f 00 	lds	r24, 0x009F
     c0c:	8d 7f       	andi	r24, 0xFD	; 253
     c0e:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     c12:	80 91 df 00 	lds	r24, 0x00DF
     c16:	8d 7f       	andi	r24, 0xFD	; 253
     c18:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
     c1c:	80 91 de 00 	lds	r24, 0x00DE
     c20:	82 60       	ori	r24, 0x02	; 2
     c22:	80 93 de 00 	sts	0x00DE, r24
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     c26:	80 91 9e 00 	lds	r24, 0x009E
     c2a:	81 60       	ori	r24, 0x01	; 1
     c2c:	80 93 9e 00 	sts	0x009E, r24

				USB_INT_Clear(USB_INT_VBERRI);
				USB_INT_Enable(USB_INT_VBERRI);

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
     c30:	ed d0       	rcall	.+474    	; 0xe0c <Pipe_ClearPipes>

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
     c32:	10 92 fa 04 	sts	0x04FA, r1
     c36:	84 e6       	ldi	r24, 0x64	; 100
     c38:	90 e0       	ldi	r25, 0x00	; 0
     c3a:	90 93 14 01 	sts	0x0114, r25
     c3e:	80 93 13 01 	sts	0x0113, r24
     c42:	85 e0       	ldi	r24, 0x05	; 5
     c44:	5c c0       	rjmp	.+184    	; 0xcfe <USB_Host_ProcessNextHostState+0x204>
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
     c46:	0b df       	rcall	.-490    	; 0xa5e <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
     c48:	10 92 fa 04 	sts	0x04FA, r1
     c4c:	88 ec       	ldi	r24, 0xC8	; 200
     c4e:	90 e0       	ldi	r25, 0x00	; 0
     c50:	90 93 14 01 	sts	0x0114, r25
     c54:	80 93 13 01 	sts	0x0113, r24
     c58:	86 e0       	ldi	r24, 0x06	; 6
     c5a:	51 c0       	rjmp	.+162    	; 0xcfe <USB_Host_ProcessNextHostState+0x204>
			break;
		case HOST_STATE_Powered_ConfigPipe:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
     c5c:	80 e0       	ldi	r24, 0x00	; 0
     c5e:	60 e0       	ldi	r22, 0x00	; 0
     c60:	40 e0       	ldi	r20, 0x00	; 0
     c62:	20 e0       	ldi	r18, 0x00	; 0
     c64:	00 e4       	ldi	r16, 0x40	; 64
     c66:	10 e0       	ldi	r17, 0x00	; 0
     c68:	ee 24       	eor	r14, r14
     c6a:	72 d0       	rcall	.+228    	; 0xd50 <Pipe_ConfigurePipe>
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     c6c:	80 91 ac 00 	lds	r24, 0x00AC
							   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
							   PIPE_CONTROLPIPE_DEFAULT_SIZE, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
     c70:	87 ff       	sbrs	r24, 7
     c72:	5c c0       	rjmp	.+184    	; 0xd2c <USB_Host_ProcessNextHostState+0x232>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
     c74:	87 e0       	ldi	r24, 0x07	; 7
     c76:	95 cf       	rjmp	.-214    	; 0xba2 <USB_Host_ProcessNextHostState+0xa8>
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
     c78:	a2 ef       	ldi	r26, 0xF2	; 242
     c7a:	b4 e0       	ldi	r27, 0x04	; 4
     c7c:	e8 e0       	ldi	r30, 0x08	; 8
     c7e:	f1 e0       	ldi	r31, 0x01	; 1
     c80:	88 e0       	ldi	r24, 0x08	; 8
     c82:	01 90       	ld	r0, Z+
     c84:	0d 92       	st	X+, r0
     c86:	81 50       	subi	r24, 0x01	; 1
     c88:	e1 f7       	brne	.-8      	; 0xc82 <USB_Host_ProcessNextHostState+0x188>
					.wLength       = 8,
				};

			uint8_t DataBuffer[8];

			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
     c8a:	ce 01       	movw	r24, r28
     c8c:	01 96       	adiw	r24, 0x01	; 1
     c8e:	31 d3       	rcall	.+1634   	; 0x12f2 <USB_Host_SendControlRequest>
     c90:	68 2f       	mov	r22, r24
     c92:	88 23       	and	r24, r24
     c94:	09 f0       	breq	.+2      	; 0xc98 <USB_Host_ProcessNextHostState+0x19e>
     c96:	48 c0       	rjmp	.+144    	; 0xd28 <USB_Host_ProcessNextHostState+0x22e>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_Host_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
     c98:	88 85       	ldd	r24, Y+8	; 0x08
     c9a:	80 93 10 01 	sts	0x0110, r24

			USB_Host_ResetDevice();
     c9e:	df de       	rcall	.-578    	; 0xa5e <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
     ca0:	10 92 fa 04 	sts	0x04FA, r1
     ca4:	88 ec       	ldi	r24, 0xC8	; 200
     ca6:	90 e0       	ldi	r25, 0x00	; 0
     ca8:	90 93 14 01 	sts	0x0114, r25
     cac:	80 93 13 01 	sts	0x0113, r24
     cb0:	88 e0       	ldi	r24, 0x08	; 8
     cb2:	25 c0       	rjmp	.+74     	; 0xcfe <USB_Host_ProcessNextHostState+0x204>
			break;
		case HOST_STATE_Default_PostReset:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
     cb4:	00 91 10 01 	lds	r16, 0x0110
     cb8:	80 e0       	ldi	r24, 0x00	; 0
     cba:	60 e0       	ldi	r22, 0x00	; 0
     cbc:	40 e0       	ldi	r20, 0x00	; 0
     cbe:	20 e0       	ldi	r18, 0x00	; 0
     cc0:	10 e0       	ldi	r17, 0x00	; 0
     cc2:	ee 24       	eor	r14, r14
     cc4:	45 d0       	rcall	.+138    	; 0xd50 <Pipe_ConfigurePipe>
     cc6:	80 91 ac 00 	lds	r24, 0x00AC
			                   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
			                   USB_Host_ControlPipeSize, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
     cca:	87 ff       	sbrs	r24, 7
     ccc:	2f c0       	rjmp	.+94     	; 0xd2c <USB_Host_ProcessNextHostState+0x232>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
     cce:	a2 ef       	ldi	r26, 0xF2	; 242
     cd0:	b4 e0       	ldi	r27, 0x04	; 4
     cd2:	e0 e0       	ldi	r30, 0x00	; 0
     cd4:	f1 e0       	ldi	r31, 0x01	; 1
     cd6:	88 e0       	ldi	r24, 0x08	; 8
     cd8:	01 90       	ld	r0, Z+
     cda:	0d 92       	st	X+, r0
     cdc:	81 50       	subi	r24, 0x01	; 1
     cde:	e1 f7       	brne	.-8      	; 0xcd8 <USB_Host_ProcessNextHostState+0x1de>
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
     ce0:	80 e0       	ldi	r24, 0x00	; 0
     ce2:	90 e0       	ldi	r25, 0x00	; 0
     ce4:	06 d3       	rcall	.+1548   	; 0x12f2 <USB_Host_SendControlRequest>
     ce6:	68 2f       	mov	r22, r24
     ce8:	88 23       	and	r24, r24
     cea:	f1 f4       	brne	.+60     	; 0xd28 <USB_Host_ProcessNextHostState+0x22e>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
     cec:	10 92 fa 04 	sts	0x04FA, r1
     cf0:	84 e6       	ldi	r24, 0x64	; 100
     cf2:	90 e0       	ldi	r25, 0x00	; 0
     cf4:	90 93 14 01 	sts	0x0114, r25
     cf8:	80 93 13 01 	sts	0x0113, r24
     cfc:	89 e0       	ldi	r24, 0x09	; 9
     cfe:	80 93 12 01 	sts	0x0112, r24
     d02:	1a c0       	rjmp	.+52     	; 0xd38 <USB_Host_ProcessNextHostState+0x23e>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
     d04:	81 e0       	ldi	r24, 0x01	; 1
     d06:	80 93 a1 00 	sts	0x00A1, r24
			break;
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			USB_HostState = HOST_STATE_Addressed;
     d0a:	8a e0       	ldi	r24, 0x0A	; 10
     d0c:	80 93 fa 04 	sts	0x04FA, r24

			EVENT_USB_Host_DeviceEnumerationComplete();
     d10:	57 dc       	rcall	.-1874   	; 0x5c0 <EVENT_USB_Host_DeviceEnumerationComplete>
     d12:	12 c0       	rjmp	.+36     	; 0xd38 <USB_Host_ProcessNextHostState+0x23e>
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
     d14:	89 2f       	mov	r24, r25
     d16:	f9 db       	rcall	.-2062   	; 0x50a <EVENT_USB_Host_DeviceEnumerationFailed>
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     d18:	80 91 dd 00 	lds	r24, 0x00DD
     d1c:	81 60       	ori	r24, 0x01	; 1
     d1e:	80 93 dd 00 	sts	0x00DD, r24

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
     d22:	3c dc       	rcall	.-1928   	; 0x59c <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     d24:	b6 d0       	rcall	.+364    	; 0xe92 <USB_ResetInterface>
     d26:	08 c0       	rjmp	.+16     	; 0xd38 <USB_Host_ProcessNextHostState+0x23e>
	}
}
     d28:	93 e0       	ldi	r25, 0x03	; 3
     d2a:	02 c0       	rjmp	.+4      	; 0xd30 <USB_Host_ProcessNextHostState+0x236>
     d2c:	94 e0       	ldi	r25, 0x04	; 4
     d2e:	60 e0       	ldi	r22, 0x00	; 0

			EVENT_USB_Host_DeviceEnumerationComplete();
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
     d30:	80 91 fa 04 	lds	r24, 0x04FA
     d34:	81 30       	cpi	r24, 0x01	; 1
     d36:	71 f7       	brne	.-36     	; 0xd14 <USB_Host_ProcessNextHostState+0x21a>

		EVENT_USB_Host_DeviceUnattached();

		USB_ResetInterface();
	}
}
     d38:	28 96       	adiw	r28, 0x08	; 8
     d3a:	0f b6       	in	r0, 0x3f	; 63
     d3c:	f8 94       	cli
     d3e:	de bf       	out	0x3e, r29	; 62
     d40:	0f be       	out	0x3f, r0	; 63
     d42:	cd bf       	out	0x3d, r28	; 61
     d44:	cf 91       	pop	r28
     d46:	df 91       	pop	r29
     d48:	1f 91       	pop	r17
     d4a:	0f 91       	pop	r16
     d4c:	ef 90       	pop	r14
     d4e:	08 95       	ret

00000d50 <Pipe_ConfigurePipe>:
                        const uint8_t Type,
                        const uint8_t Token,
                        const uint8_t EndpointNumber,
                        const uint16_t Size,
                        const uint8_t Banks)
{
     d50:	ef 92       	push	r14
     d52:	0f 93       	push	r16
     d54:	1f 93       	push	r17
     d56:	e8 2f       	mov	r30, r24
     d58:	7e 2d       	mov	r23, r14

		Pipe_SelectPipe(PNum);
		
		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
     d5a:	62 95       	swap	r22
     d5c:	66 0f       	add	r22, r22
     d5e:	66 0f       	add	r22, r22
     d60:	60 7c       	andi	r22, 0xC0	; 192
     d62:	64 2b       	or	r22, r20
     d64:	2f 70       	andi	r18, 0x0F	; 15
     d66:	62 2b       	or	r22, r18
     d68:	38 2f       	mov	r19, r24
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     d6a:	72 60       	ori	r23, 0x02	; 2
     d6c:	45 c0       	rjmp	.+138    	; 0xdf8 <Pipe_ConfigurePipe+0xa8>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     d6e:	30 93 a7 00 	sts	0x00A7, r19
		uint8_t UPCFG2XTemp;
		uint8_t UPIENXTemp;

		Pipe_SelectPipe(PNum);
		
		if (PNum == Number)
     d72:	3e 17       	cp	r19, r30
     d74:	a1 f4       	brne	.+40     	; 0xd9e <Pipe_ConfigurePipe+0x4e>
     d76:	88 e0       	ldi	r24, 0x08	; 8
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	20 e0       	ldi	r18, 0x00	; 0
     d7c:	03 c0       	rjmp	.+6      	; 0xd84 <Pipe_ConfigurePipe+0x34>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
				{
					MaskVal++;
     d7e:	2f 5f       	subi	r18, 0xFF	; 255
					CheckBytes <<= 1;
     d80:	88 0f       	add	r24, r24
     d82:	99 1f       	adc	r25, r25
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
     d84:	80 17       	cp	r24, r16
     d86:	91 07       	cpc	r25, r17
     d88:	10 f4       	brcc	.+4      	; 0xd8e <Pipe_ConfigurePipe+0x3e>
     d8a:	25 30       	cpi	r18, 0x05	; 5
     d8c:	c1 f7       	brne	.-16     	; 0xd7e <Pipe_ConfigurePipe+0x2e>
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     d8e:	92 2f       	mov	r25, r18
     d90:	92 95       	swap	r25
     d92:	90 7f       	andi	r25, 0xF0	; 240
     d94:	97 2b       	or	r25, r23
     d96:	56 2f       	mov	r21, r22
     d98:	40 e0       	ldi	r20, 0x00	; 0
     d9a:	20 e0       	ldi	r18, 0x00	; 0
     d9c:	08 c0       	rjmp	.+16     	; 0xdae <Pipe_ConfigurePipe+0x5e>
			UPCFG2XTemp = 0;
			UPIENXTemp  = 0;
		}
		else
		{
			UPCFG0XTemp = UPCFG0X;
     d9e:	50 91 aa 00 	lds	r21, 0x00AA
			UPCFG1XTemp = UPCFG1X;
     da2:	90 91 ab 00 	lds	r25, 0x00AB
			UPCFG2XTemp = UPCFG2X;
     da6:	40 91 ad 00 	lds	r20, 0x00AD
			UPIENXTemp  = UPIENX;
     daa:	20 91 ae 00 	lds	r18, 0x00AE
		}

		if (!(UPCFG1XTemp & (1 << ALLOC)))
     dae:	91 ff       	sbrs	r25, 1
     db0:	22 c0       	rjmp	.+68     	; 0xdf6 <Pipe_ConfigurePipe+0xa6>
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     db2:	80 91 a9 00 	lds	r24, 0x00A9
     db6:	8e 7f       	andi	r24, 0xFE	; 254
     db8:	80 93 a9 00 	sts	0x00A9, r24
		  continue;
		  
		Pipe_DisablePipe();
		UPCFG1X &= ~(1 << ALLOC);
     dbc:	80 91 ab 00 	lds	r24, 0x00AB
     dc0:	8d 7f       	andi	r24, 0xFD	; 253
     dc2:	80 93 ab 00 	sts	0x00AB, r24
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
     dc6:	80 91 a9 00 	lds	r24, 0x00A9
     dca:	81 60       	ori	r24, 0x01	; 1
     dcc:	80 93 a9 00 	sts	0x00A9, r24

		Pipe_EnablePipe();
		UPCFG0X = UPCFG0XTemp;
     dd0:	50 93 aa 00 	sts	0x00AA, r21
		UPCFG1X = UPCFG1XTemp;
     dd4:	90 93 ab 00 	sts	0x00AB, r25
		UPCFG2X = UPCFG2XTemp;
     dd8:	40 93 ad 00 	sts	0x00AD, r20
		UPIENX  = UPIENXTemp;
     ddc:	20 93 ae 00 	sts	0x00AE, r18

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
     de0:	80 91 a9 00 	lds	r24, 0x00A9
     de4:	80 62       	ori	r24, 0x20	; 32
     de6:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     dea:	80 91 ac 00 	lds	r24, 0x00AC

		Pipe_SetInfiniteINRequests();
	
		if (!(Pipe_IsConfigured()))
     dee:	87 fd       	sbrc	r24, 7
     df0:	02 c0       	rjmp	.+4      	; 0xdf6 <Pipe_ConfigurePipe+0xa6>
     df2:	80 e0       	ldi	r24, 0x00	; 0
     df4:	07 c0       	rjmp	.+14     	; 0xe04 <Pipe_ConfigurePipe+0xb4>

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else	
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
     df6:	3f 5f       	subi	r19, 0xFF	; 255
     df8:	37 30       	cpi	r19, 0x07	; 7
     dfa:	08 f4       	brcc	.+2      	; 0xdfe <Pipe_ConfigurePipe+0xae>
     dfc:	b8 cf       	rjmp	.-144    	; 0xd6e <Pipe_ConfigurePipe+0x1e>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     dfe:	e0 93 a7 00 	sts	0x00A7, r30
     e02:	81 e0       	ldi	r24, 0x01	; 1
	}
		
	Pipe_SelectPipe(Number);	
	return true;
#endif
}
     e04:	1f 91       	pop	r17
     e06:	0f 91       	pop	r16
     e08:	ef 90       	pop	r14
     e0a:	08 95       	ret

00000e0c <Pipe_ClearPipes>:

void Pipe_ClearPipes(void)
{
	UPINT = 0;
     e0c:	10 92 f8 00 	sts	0x00F8, r1
     e10:	90 e0       	ldi	r25, 0x00	; 0
     e12:	90 93 a7 00 	sts	0x00A7, r25

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
     e16:	10 92 ae 00 	sts	0x00AE, r1
		UPINTX  = 0;
     e1a:	10 92 a6 00 	sts	0x00A6, r1
		UPCFG1X = 0;
     e1e:	10 92 ab 00 	sts	0x00AB, r1
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     e22:	80 91 a9 00 	lds	r24, 0x00A9
     e26:	8e 7f       	andi	r24, 0xFE	; 254
     e28:	80 93 a9 00 	sts	0x00A9, r24

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     e2c:	9f 5f       	subi	r25, 0xFF	; 255
     e2e:	97 30       	cpi	r25, 0x07	; 7
     e30:	81 f7       	brne	.-32     	; 0xe12 <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
     e32:	08 95       	ret

00000e34 <Pipe_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
     e34:	40 91 a2 00 	lds	r20, 0x00A2
     e38:	50 91 a3 00 	lds	r21, 0x00A3
     e3c:	24 e6       	ldi	r18, 0x64	; 100
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
     e3e:	80 91 aa 00 	lds	r24, 0x00AA

	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
     e42:	80 73       	andi	r24, 0x30	; 48
     e44:	80 31       	cpi	r24, 0x10	; 16
     e46:	29 f4       	brne	.+10     	; 0xe52 <Pipe_WaitUntilReady+0x1e>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     e48:	80 91 a6 00 	lds	r24, 0x00A6
		{
			if (Pipe_IsINReceived())
     e4c:	80 ff       	sbrs	r24, 0
     e4e:	05 c0       	rjmp	.+10     	; 0xe5a <Pipe_WaitUntilReady+0x26>
     e50:	1e c0       	rjmp	.+60     	; 0xe8e <Pipe_WaitUntilReady+0x5a>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     e52:	80 91 a6 00 	lds	r24, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
     e56:	82 fd       	sbrc	r24, 2
     e58:	1a c0       	rjmp	.+52     	; 0xe8e <Pipe_WaitUntilReady+0x5a>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     e5a:	80 91 a6 00 	lds	r24, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
     e5e:	81 ff       	sbrs	r24, 1
     e60:	02 c0       	rjmp	.+4      	; 0xe66 <Pipe_WaitUntilReady+0x32>
     e62:	81 e0       	ldi	r24, 0x01	; 1
     e64:	08 95       	ret
		  return PIPE_READYWAIT_PipeStalled;
		else if (USB_HostState == HOST_STATE_Unattached)
     e66:	80 91 fa 04 	lds	r24, 0x04FA
     e6a:	81 30       	cpi	r24, 0x01	; 1
     e6c:	11 f4       	brne	.+4      	; 0xe72 <Pipe_WaitUntilReady+0x3e>
     e6e:	82 e0       	ldi	r24, 0x02	; 2
     e70:	08 95       	ret
     e72:	80 91 a2 00 	lds	r24, 0x00A2
     e76:	90 91 a3 00 	lds	r25, 0x00A3
		  return PIPE_READYWAIT_DeviceDisconnected;

		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     e7a:	84 17       	cp	r24, r20
     e7c:	95 07       	cpc	r25, r21
     e7e:	f9 f2       	breq	.-66     	; 0xe3e <Pipe_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     e80:	22 23       	and	r18, r18
     e82:	11 f4       	brne	.+4      	; 0xe88 <Pipe_WaitUntilReady+0x54>
     e84:	83 e0       	ldi	r24, 0x03	; 3
     e86:	08 95       	ret
     e88:	21 50       	subi	r18, 0x01	; 1
     e8a:	ac 01       	movw	r20, r24
     e8c:	d8 cf       	rjmp	.-80     	; 0xe3e <Pipe_WaitUntilReady+0xa>
     e8e:	80 e0       	ldi	r24, 0x00	; 0
			  return PIPE_READYWAIT_Timeout;
		}
	}
}
     e90:	08 95       	ret

00000e92 <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     e92:	70 d0       	rcall	.+224    	; 0xf74 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     e94:	77 d0       	rcall	.+238    	; 0xf84 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     e96:	80 91 d8 00 	lds	r24, 0x00D8
     e9a:	8f 77       	andi	r24, 0x7F	; 127
     e9c:	80 93 d8 00 	sts	0x00D8, r24
				USBCON |=  (1 << USBE);
     ea0:	80 91 d8 00 	lds	r24, 0x00D8
     ea4:	80 68       	ori	r24, 0x80	; 128
     ea6:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
     eaa:	80 91 d8 00 	lds	r24, 0x00D8
     eae:	8f 7d       	andi	r24, 0xDF	; 223
     eb0:	80 93 d8 00 	sts	0x00D8, r24
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
     eb4:	80 91 d7 00 	lds	r24, 0x00D7
     eb8:	8f 77       	andi	r24, 0x7F	; 127
     eba:	80 93 d7 00 	sts	0x00D7, r24

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     ebe:	8c e0       	ldi	r24, 0x0C	; 12
     ec0:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     ec2:	8e e0       	ldi	r24, 0x0E	; 14
     ec4:	89 bd       	out	0x29, r24	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_CAN_BE_HOST)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));		
     ec6:	09 b4       	in	r0, 0x29	; 41
     ec8:	00 fe       	sbrs	r0, 0
     eca:	fd cf       	rjmp	.-6      	; 0xec6 <USB_ResetInterface+0x34>
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState                = HOST_STATE_Unattached;
     ecc:	81 e0       	ldi	r24, 0x01	; 1
     ece:	80 93 fa 04 	sts	0x04FA, r24
	USB_Host_ConfigurationNumber = 0;
     ed2:	10 92 f0 04 	sts	0x04F0, r1
	USB_Host_ControlPipeSize     = PIPE_CONTROLPIPE_DEFAULT_SIZE;
     ed6:	80 e4       	ldi	r24, 0x40	; 64
     ed8:	80 93 10 01 	sts	0x0110, r24
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
     edc:	80 91 d8 00 	lds	r24, 0x00D8
     ee0:	80 64       	ori	r24, 0x40	; 64
     ee2:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     ee6:	80 91 dd 00 	lds	r24, 0x00DD
     eea:	81 60       	ori	r24, 0x01	; 1
     eec:	80 93 dd 00 	sts	0x00DD, r24
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
     ef0:	80 91 dd 00 	lds	r24, 0x00DD
     ef4:	84 60       	ori	r24, 0x04	; 4
     ef6:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON &= ~(1 << UVCONE);
     efa:	80 91 d7 00 	lds	r24, 0x00D7
     efe:	8f 7e       	andi	r24, 0xEF	; 239
     f00:	80 93 d7 00 	sts	0x00D7, r24

				DDRE   |=  (1 << 7);
     f04:	6f 9a       	sbi	0x0d, 7	; 13
			}

			static inline void USB_Host_VBUS_Manual_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_On(void)
			{
				PORTE  |=  (1 << 7);
     f06:	77 9a       	sbi	0x0e, 7	; 14
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN |= (1 << SRPE);						
     f08:	80 91 de 00 	lds	r24, 0x00DE
     f0c:	81 60       	ori	r24, 0x01	; 1
     f0e:	80 93 de 00 	sts	0x00DE, r24
						break;
					case USB_INT_RSTI:
						UHIEN  |= (1 << RSTE);
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
     f12:	80 91 de 00 	lds	r24, 0x00DE
     f16:	84 60       	ori	r24, 0x04	; 4
     f18:	80 93 de 00 	sts	0x00DE, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     f1c:	80 91 e0 00 	lds	r24, 0x00E0
     f20:	8e 7f       	andi	r24, 0xFE	; 254
     f22:	80 93 e0 00 	sts	0x00E0, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     f26:	80 91 d8 00 	lds	r24, 0x00D8
     f2a:	80 61       	ori	r24, 0x10	; 16
     f2c:	80 93 d8 00 	sts	0x00D8, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     f30:	08 95       	ret

00000f32 <USB_Init>:

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
     f32:	e7 ed       	ldi	r30, 0xD7	; 215
     f34:	f0 e0       	ldi	r31, 0x00	; 0
     f36:	80 81       	ld	r24, Z
     f38:	81 60       	ori	r24, 0x01	; 1
     f3a:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     f3c:	81 e0       	ldi	r24, 0x01	; 1
     f3e:	80 93 f1 04 	sts	0x04F1, r24

	USB_ResetInterface();
}
     f42:	a7 cf       	rjmp	.-178    	; 0xe92 <USB_ResetInterface>

00000f44 <USB_Disable>:

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
     f44:	17 d0       	rcall	.+46     	; 0xf74 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     f46:	1e d0       	rcall	.+60     	; 0xf84 <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
     f48:	e0 ee       	ldi	r30, 0xE0	; 224
     f4a:	f0 e0       	ldi	r31, 0x00	; 0
     f4c:	80 81       	ld	r24, Z
     f4e:	81 60       	ori	r24, 0x01	; 1
     f50:	80 83       	st	Z, r24
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON  &= ~(1 << USBE);
     f52:	a8 ed       	ldi	r26, 0xD8	; 216
     f54:	b0 e0       	ldi	r27, 0x00	; 0
     f56:	8c 91       	ld	r24, X
     f58:	8f 77       	andi	r24, 0x7F	; 127
     f5a:	8c 93       	st	X, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     f5c:	19 bc       	out	0x29, r1	; 41

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  &= ~(1 << UVREGE);
     f5e:	e7 ed       	ldi	r30, 0xD7	; 215
     f60:	f0 e0       	ldi	r31, 0x00	; 0
     f62:	80 81       	ld	r24, Z
     f64:	8e 7f       	andi	r24, 0xFE	; 254
     f66:	80 83       	st	Z, r24
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON  &= ~(1 << OTGPADE);
     f68:	8c 91       	ld	r24, X
     f6a:	8f 7e       	andi	r24, 0xEF	; 239
     f6c:	8c 93       	st	X, r24

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
     f6e:	10 92 f1 04 	sts	0x04F1, r1
}
     f72:	08 95       	ret

00000f74 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     f74:	e8 ed       	ldi	r30, 0xD8	; 216
     f76:	f0 e0       	ldi	r31, 0x00	; 0
     f78:	80 81       	ld	r24, Z
     f7a:	8c 7f       	andi	r24, 0xFC	; 252
     f7c:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
     f7e:	10 92 a0 00 	sts	0x00A0, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
	#endif
}
     f82:	08 95       	ret

00000f84 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     f84:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_BOTH)
	OTGINT = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
     f88:	10 92 9f 00 	sts	0x009F, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
	#endif
}
     f8c:	08 95       	ret

00000f8e <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
     f8e:	1f 92       	push	r1
     f90:	0f 92       	push	r0
     f92:	0f b6       	in	r0, 0x3f	; 63
     f94:	0f 92       	push	r0
     f96:	0b b6       	in	r0, 0x3b	; 59
     f98:	0f 92       	push	r0
     f9a:	11 24       	eor	r1, r1
     f9c:	2f 93       	push	r18
     f9e:	3f 93       	push	r19
     fa0:	4f 93       	push	r20
     fa2:	5f 93       	push	r21
     fa4:	6f 93       	push	r22
     fa6:	7f 93       	push	r23
     fa8:	8f 93       	push	r24
     faa:	9f 93       	push	r25
     fac:	af 93       	push	r26
     fae:	bf 93       	push	r27
     fb0:	ef 93       	push	r30
     fb2:	ff 93       	push	r31
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     fb4:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	#if defined(USB_CAN_BE_HOST)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
     fb8:	85 ff       	sbrs	r24, 5
     fba:	0a c0       	rjmp	.+20     	; 0xfd0 <__vector_10+0x42>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     fbc:	80 91 a0 00 	lds	r24, 0x00A0
     fc0:	85 ff       	sbrs	r24, 5
     fc2:	06 c0       	rjmp	.+12     	; 0xfd0 <__vector_10+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     fc4:	80 91 9f 00 	lds	r24, 0x009F
     fc8:	8f 7d       	andi	r24, 0xDF	; 223
     fca:	80 93 9f 00 	sts	0x009F, r24
	{
		USB_INT_Clear(USB_INT_HSOFI);

		EVENT_USB_Host_StartOfFrame();
     fce:	67 d1       	rcall	.+718    	; 0x129e <USB_Event_Stub>
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
     fd0:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
     fd4:	81 ff       	sbrs	r24, 1
     fd6:	15 c0       	rjmp	.+42     	; 0x1002 <__vector_10+0x74>
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
					case USB_INT_DCONNI:
						return (UHIEN  & (1 << DCONNE));
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
     fd8:	80 91 a0 00 	lds	r24, 0x00A0
     fdc:	81 ff       	sbrs	r24, 1
     fde:	11 c0       	rjmp	.+34     	; 0x1002 <__vector_10+0x74>
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     fe0:	80 91 9f 00 	lds	r24, 0x009F
     fe4:	8d 7f       	andi	r24, 0xFD	; 253
     fe6:	80 93 9f 00 	sts	0x009F, r24
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     fea:	80 91 9f 00 	lds	r24, 0x009F
     fee:	8e 7f       	andi	r24, 0xFE	; 254
     ff0:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     ff4:	80 91 a0 00 	lds	r24, 0x00A0
     ff8:	8d 7f       	andi	r24, 0xFD	; 253
     ffa:	80 93 a0 00 	sts	0x00A0, r24
	{
		USB_INT_Clear(USB_INT_DDISCI);
		USB_INT_Clear(USB_INT_DCONNI);
		USB_INT_Disable(USB_INT_DDISCI);

		EVENT_USB_Host_DeviceUnattached();
     ffe:	ce da       	rcall	.-2660   	; 0x59c <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
    1000:	48 df       	rcall	.-368    	; 0xe92 <USB_ResetInterface>
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
    1002:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
    1006:	81 ff       	sbrs	r24, 1
    1008:	15 c0       	rjmp	.+42     	; 0x1034 <__vector_10+0xa6>
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
    100a:	80 91 de 00 	lds	r24, 0x00DE
    100e:	81 ff       	sbrs	r24, 1
    1010:	11 c0       	rjmp	.+34     	; 0x1034 <__vector_10+0xa6>
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
    1012:	80 91 df 00 	lds	r24, 0x00DF
    1016:	8d 7f       	andi	r24, 0xFD	; 253
    1018:	80 93 df 00 	sts	0x00DF, r24
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
    101c:	77 98       	cbi	0x0e, 7	; 14
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
    101e:	80 91 dd 00 	lds	r24, 0x00DD
    1022:	81 60       	ori	r24, 0x01	; 1
    1024:	80 93 dd 00 	sts	0x00DD, r24
		USB_INT_Clear(USB_INT_VBERRI);

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
    1028:	80 e0       	ldi	r24, 0x00	; 0
    102a:	9b da       	rcall	.-2762   	; 0x562 <EVENT_USB_Host_HostError>
		EVENT_USB_Host_DeviceUnattached();
    102c:	b7 da       	rcall	.-2706   	; 0x59c <EVENT_USB_Host_DeviceUnattached>

		USB_HostState = HOST_STATE_Unattached;
    102e:	81 e0       	ldi	r24, 0x01	; 1
    1030:	80 93 fa 04 	sts	0x04FA, r24
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
					case USB_INT_SRPI:
						return (OTGINT & (1 << SRPI));
    1034:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
    1038:	80 ff       	sbrs	r24, 0
    103a:	17 c0       	rjmp	.+46     	; 0x106a <__vector_10+0xdc>
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
					case USB_INT_SRPI:
						return (OTGIEN & (1 << SRPE));
    103c:	80 91 de 00 	lds	r24, 0x00DE
    1040:	80 ff       	sbrs	r24, 0
    1042:	13 c0       	rjmp	.+38     	; 0x106a <__vector_10+0xdc>
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
						break;
					case USB_INT_SRPI:
						OTGINT &= ~(1 << SRPI);
    1044:	80 91 df 00 	lds	r24, 0x00DF
    1048:	8e 7f       	andi	r24, 0xFE	; 254
    104a:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_VBERRI:
						OTGIEN &= ~(1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN &= ~(1 << SRPE);						
    104e:	80 91 de 00 	lds	r24, 0x00DE
    1052:	8e 7f       	andi	r24, 0xFE	; 254
    1054:	80 93 de 00 	sts	0x00DE, r24
	{
		USB_INT_Clear(USB_INT_SRPI);
		USB_INT_Disable(USB_INT_SRPI);

		EVENT_USB_Host_DeviceAttached();
    1058:	aa da       	rcall	.-2732   	; 0x5ae <EVENT_USB_Host_DeviceAttached>
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
    105a:	80 91 a0 00 	lds	r24, 0x00A0
    105e:	82 60       	ori	r24, 0x02	; 2
    1060:	80 93 a0 00 	sts	0x00A0, r24

		USB_INT_Enable(USB_INT_DDISCI);

		USB_HostState = HOST_STATE_Powered;
    1064:	82 e0       	ldi	r24, 0x02	; 2
    1066:	80 93 fa 04 	sts	0x04FA, r24
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
    106a:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
    106e:	82 ff       	sbrs	r24, 2
    1070:	0e c0       	rjmp	.+28     	; 0x108e <__vector_10+0x100>
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
    1072:	80 91 de 00 	lds	r24, 0x00DE
    1076:	82 ff       	sbrs	r24, 2
    1078:	0a c0       	rjmp	.+20     	; 0x108e <__vector_10+0x100>
						break;
					case USB_INT_RSTI:
						UHINT  &= ~(1 << RSTI);
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
    107a:	80 91 df 00 	lds	r24, 0x00DF
    107e:	8b 7f       	andi	r24, 0xFB	; 251
    1080:	80 93 df 00 	sts	0x00DF, r24
	{
		USB_INT_Clear(USB_INT_BCERRI);

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
    1084:	82 e0       	ldi	r24, 0x02	; 2
    1086:	60 e0       	ldi	r22, 0x00	; 0
    1088:	40 da       	rcall	.-2944   	; 0x50a <EVENT_USB_Host_DeviceEnumerationFailed>
		EVENT_USB_Host_DeviceUnattached();
    108a:	88 da       	rcall	.-2800   	; 0x59c <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
    108c:	02 df       	rcall	.-508    	; 0xe92 <USB_ResetInterface>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    108e:	ff 91       	pop	r31
    1090:	ef 91       	pop	r30
    1092:	bf 91       	pop	r27
    1094:	af 91       	pop	r26
    1096:	9f 91       	pop	r25
    1098:	8f 91       	pop	r24
    109a:	7f 91       	pop	r23
    109c:	6f 91       	pop	r22
    109e:	5f 91       	pop	r21
    10a0:	4f 91       	pop	r20
    10a2:	3f 91       	pop	r19
    10a4:	2f 91       	pop	r18
    10a6:	0f 90       	pop	r0
    10a8:	0b be       	out	0x3b, r0	; 59
    10aa:	0f 90       	pop	r0
    10ac:	0f be       	out	0x3f, r0	; 63
    10ae:	0f 90       	pop	r0
    10b0:	1f 90       	pop	r1
    10b2:	18 95       	reti

000010b4 <Pipe_Read_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    10b4:	bf 92       	push	r11
    10b6:	cf 92       	push	r12
    10b8:	df 92       	push	r13
    10ba:	ef 92       	push	r14
    10bc:	ff 92       	push	r15
    10be:	0f 93       	push	r16
    10c0:	1f 93       	push	r17
    10c2:	cf 93       	push	r28
    10c4:	df 93       	push	r29
    10c6:	18 2f       	mov	r17, r24
    10c8:	09 2f       	mov	r16, r25
    10ca:	7b 01       	movw	r14, r22
    10cc:	6a 01       	movw	r12, r20
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    10ce:	80 91 aa 00 	lds	r24, 0x00AA
    10d2:	8f 7c       	andi	r24, 0xCF	; 207
    10d4:	80 61       	ori	r24, 0x10	; 16
    10d6:	80 93 aa 00 	sts	0x00AA, r24
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
    10da:	ac de       	rcall	.-680    	; 0xe34 <Pipe_WaitUntilReady>
    10dc:	b8 2e       	mov	r11, r24
    10de:	88 23       	and	r24, r24
    10e0:	a9 f5       	brne	.+106    	; 0x114c <Pipe_Read_Stream_LE+0x98>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    10e2:	81 2f       	mov	r24, r17
    10e4:	90 2f       	mov	r25, r16
    10e6:	9c 01       	movw	r18, r24
    10e8:	e9 01       	movw	r28, r18
	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
    10ea:	c1 14       	cp	r12, r1
    10ec:	d1 04       	cpc	r13, r1
    10ee:	39 f0       	breq	.+14     	; 0x10fe <Pipe_Read_Stream_LE+0x4a>
	{
		Length -= *BytesProcessed;
    10f0:	f6 01       	movw	r30, r12
    10f2:	80 81       	ld	r24, Z
    10f4:	91 81       	ldd	r25, Z+1	; 0x01
    10f6:	e8 1a       	sub	r14, r24
    10f8:	f9 0a       	sbc	r15, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    10fa:	c8 0f       	add	r28, r24
    10fc:	d9 1f       	adc	r29, r25
    10fe:	00 e0       	ldi	r16, 0x00	; 0
    1100:	10 e0       	ldi	r17, 0x00	; 0
    1102:	21 c0       	rjmp	.+66     	; 0x1146 <Pipe_Read_Stream_LE+0x92>
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
    1104:	80 91 a6 00 	lds	r24, 0x00A6
	}
	
	while (Length)
	{
		if (!(Pipe_IsReadWriteAllowed()))
    1108:	85 fd       	sbrc	r24, 5
    110a:	15 c0       	rjmp	.+42     	; 0x1136 <Pipe_Read_Stream_LE+0x82>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    110c:	80 91 a6 00 	lds	r24, 0x00A6
    1110:	8e 77       	andi	r24, 0x7E	; 126
    1112:	80 93 a6 00 	sts	0x00A6, r24
		{
			TEMPLATE_CLEAR_PIPE();

			if (BytesProcessed != NULL)
    1116:	c1 14       	cp	r12, r1
    1118:	d1 04       	cpc	r13, r1
    111a:	49 f0       	breq	.+18     	; 0x112e <Pipe_Read_Stream_LE+0x7a>
			{
				*BytesProcessed += BytesInTransfer;
    111c:	f6 01       	movw	r30, r12
    111e:	80 81       	ld	r24, Z
    1120:	91 81       	ldd	r25, Z+1	; 0x01
    1122:	80 0f       	add	r24, r16
    1124:	91 1f       	adc	r25, r17
    1126:	91 83       	std	Z+1, r25	; 0x01
    1128:	80 83       	st	Z, r24
    112a:	84 e0       	ldi	r24, 0x04	; 4
    112c:	10 c0       	rjmp	.+32     	; 0x114e <Pipe_Read_Stream_LE+0x9a>
				return PIPE_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
    112e:	82 de       	rcall	.-764    	; 0xe34 <Pipe_WaitUntilReady>
    1130:	88 23       	and	r24, r24
    1132:	49 f0       	breq	.+18     	; 0x1146 <Pipe_Read_Stream_LE+0x92>
    1134:	0c c0       	rjmp	.+24     	; 0x114e <Pipe_Read_Stream_LE+0x9a>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    1136:	80 91 af 00 	lds	r24, 0x00AF
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    113a:	89 93       	st	Y+, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    113c:	08 94       	sec
    113e:	e1 08       	sbc	r14, r1
    1140:	f1 08       	sbc	r15, r1
			BytesInTransfer++;
    1142:	0f 5f       	subi	r16, 0xFF	; 255
    1144:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}
	
	while (Length)
    1146:	e1 14       	cp	r14, r1
    1148:	f1 04       	cpc	r15, r1
    114a:	e1 f6       	brne	.-72     	; 0x1104 <Pipe_Read_Stream_LE+0x50>
    114c:	8b 2d       	mov	r24, r11
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
    114e:	df 91       	pop	r29
    1150:	cf 91       	pop	r28
    1152:	1f 91       	pop	r17
    1154:	0f 91       	pop	r16
    1156:	ff 90       	pop	r15
    1158:	ef 90       	pop	r14
    115a:	df 90       	pop	r13
    115c:	cf 90       	pop	r12
    115e:	bf 90       	pop	r11
    1160:	08 95       	ret

00001162 <USB_GetNextDescriptorComp>:

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
    1162:	af 92       	push	r10
    1164:	bf 92       	push	r11
    1166:	cf 92       	push	r12
    1168:	df 92       	push	r13
    116a:	ef 92       	push	r14
    116c:	ff 92       	push	r15
    116e:	0f 93       	push	r16
    1170:	1f 93       	push	r17
    1172:	cf 93       	push	r28
    1174:	df 93       	push	r29
    1176:	7c 01       	movw	r14, r24
    1178:	eb 01       	movw	r28, r22
    117a:	6a 01       	movw	r12, r20
    117c:	24 c0       	rjmp	.+72     	; 0x11c6 <USB_GetNextDescriptorComp+0x64>
	uint8_t ErrorCode;

	while (*BytesRem)
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
    117e:	e8 81       	ld	r30, Y
    1180:	f9 81       	ldd	r31, Y+1	; 0x01
    1182:	be 2e       	mov	r11, r30
    1184:	af 2e       	mov	r10, r31
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc)
			{
				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;
    1186:	80 81       	ld	r24, Z
    1188:	90 e0       	ldi	r25, 0x00	; 0
    118a:	98 01       	movw	r18, r16
    118c:	80 17       	cp	r24, r16
    118e:	91 07       	cpc	r25, r17
    1190:	08 f4       	brcc	.+2      	; 0x1194 <USB_GetNextDescriptorComp+0x32>
    1192:	9c 01       	movw	r18, r24
				
				if (*BytesRem < CurrDescriptorSize)
				  CurrDescriptorSize = *BytesRem;

				*CurrConfigLoc  = (void*)((uintptr_t)*CurrConfigLoc + CurrDescriptorSize);
    1194:	e2 0f       	add	r30, r18
    1196:	f3 1f       	adc	r31, r19
    1198:	f9 83       	std	Y+1, r31	; 0x01
    119a:	e8 83       	st	Y, r30
				*BytesRem      -= CurrDescriptorSize;
    119c:	f7 01       	movw	r30, r14
    119e:	80 81       	ld	r24, Z
    11a0:	91 81       	ldd	r25, Z+1	; 0x01
    11a2:	82 1b       	sub	r24, r18
    11a4:	93 0b       	sbc	r25, r19
    11a6:	91 83       	std	Z+1, r25	; 0x01
    11a8:	80 83       	st	Z, r24
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
    11aa:	88 81       	ld	r24, Y
    11ac:	99 81       	ldd	r25, Y+1	; 0x01
    11ae:	f6 01       	movw	r30, r12
    11b0:	09 95       	icall
    11b2:	82 30       	cpi	r24, 0x02	; 2
    11b4:	41 f0       	breq	.+16     	; 0x11c6 <USB_GetNextDescriptorComp+0x64>
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
    11b6:	81 30       	cpi	r24, 0x01	; 1
    11b8:	69 f4       	brne	.+26     	; 0x11d4 <USB_GetNextDescriptorComp+0x72>
			{
				*CurrConfigLoc = PrevDescLoc;
    11ba:	b8 82       	st	Y, r11
    11bc:	a9 82       	std	Y+1, r10	; 0x01
				*BytesRem      = PrevBytesRem;
    11be:	f7 01       	movw	r30, r14
    11c0:	11 83       	std	Z+1, r17	; 0x01
    11c2:	00 83       	st	Z, r16
    11c4:	07 c0       	rjmp	.+14     	; 0x11d4 <USB_GetNextDescriptorComp+0x72>
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
	uint8_t ErrorCode;

	while (*BytesRem)
    11c6:	f7 01       	movw	r30, r14
    11c8:	00 81       	ld	r16, Z
    11ca:	11 81       	ldd	r17, Z+1	; 0x01
    11cc:	01 15       	cp	r16, r1
    11ce:	11 05       	cpc	r17, r1
    11d0:	b1 f6       	brne	.-84     	; 0x117e <USB_GetNextDescriptorComp+0x1c>
    11d2:	82 e0       	ldi	r24, 0x02	; 2
			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
}
    11d4:	df 91       	pop	r29
    11d6:	cf 91       	pop	r28
    11d8:	1f 91       	pop	r17
    11da:	0f 91       	pop	r16
    11dc:	ff 90       	pop	r15
    11de:	ef 90       	pop	r14
    11e0:	df 90       	pop	r13
    11e2:	cf 90       	pop	r12
    11e4:	bf 90       	pop	r11
    11e6:	af 90       	pop	r10
    11e8:	08 95       	ret

000011ea <USB_Host_GetDeviceConfigDescriptor>:
#if defined(USB_CAN_BE_HOST)
uint8_t USB_Host_GetDeviceConfigDescriptor(const uint8_t ConfigNumber,
                                           uint16_t* const ConfigSizePtr,
                                           void* const BufferPtr,
                                           const uint16_t BufferSize)
{
    11ea:	cf 92       	push	r12
    11ec:	df 92       	push	r13
    11ee:	ef 92       	push	r14
    11f0:	ff 92       	push	r15
    11f2:	0f 93       	push	r16
    11f4:	1f 93       	push	r17
    11f6:	df 93       	push	r29
    11f8:	cf 93       	push	r28
    11fa:	cd b7       	in	r28, 0x3d	; 61
    11fc:	de b7       	in	r29, 0x3e	; 62
    11fe:	29 97       	sbiw	r28, 0x09	; 9
    1200:	0f b6       	in	r0, 0x3f	; 63
    1202:	f8 94       	cli
    1204:	de bf       	out	0x3e, r29	; 62
    1206:	0f be       	out	0x3f, r0	; 63
    1208:	cd bf       	out	0x3d, r28	; 61
    120a:	6b 01       	movw	r12, r22
    120c:	8a 01       	movw	r16, r20
    120e:	79 01       	movw	r14, r18
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
    1210:	90 e8       	ldi	r25, 0x80	; 128
    1212:	90 93 f2 04 	sts	0x04F2, r25
    1216:	96 e0       	ldi	r25, 0x06	; 6
    1218:	90 93 f3 04 	sts	0x04F3, r25
    121c:	90 e0       	ldi	r25, 0x00	; 0
    121e:	01 97       	sbiw	r24, 0x01	; 1
    1220:	92 60       	ori	r25, 0x02	; 2
    1222:	90 93 f5 04 	sts	0x04F5, r25
    1226:	80 93 f4 04 	sts	0x04F4, r24
    122a:	10 92 f7 04 	sts	0x04F7, r1
    122e:	10 92 f6 04 	sts	0x04F6, r1
    1232:	89 e0       	ldi	r24, 0x09	; 9
    1234:	90 e0       	ldi	r25, 0x00	; 0
    1236:	90 93 f9 04 	sts	0x04F9, r25
    123a:	80 93 f8 04 	sts	0x04F8, r24
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    123e:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = sizeof(USB_Descriptor_Configuration_Header_t),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(ConfigHeader)) != HOST_SENDCONTROL_Successful)
    1242:	ce 01       	movw	r24, r28
    1244:	01 96       	adiw	r24, 0x01	; 1
    1246:	55 d0       	rcall	.+170    	; 0x12f2 <USB_Host_SendControlRequest>
    1248:	28 2f       	mov	r18, r24
    124a:	88 23       	and	r24, r24
    124c:	c1 f4       	brne	.+48     	; 0x127e <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);
    124e:	8b 81       	ldd	r24, Y+3	; 0x03
    1250:	9c 81       	ldd	r25, Y+4	; 0x04
    1252:	f6 01       	movw	r30, r12
    1254:	91 83       	std	Z+1, r25	; 0x01
    1256:	80 83       	st	Z, r24

	if (*ConfigSizePtr > BufferSize)
    1258:	e8 16       	cp	r14, r24
    125a:	f9 06       	cpc	r15, r25
    125c:	10 f4       	brcc	.+4      	; 0x1262 <USB_Host_GetDeviceConfigDescriptor+0x78>
    125e:	25 e0       	ldi	r18, 0x05	; 5
    1260:	0e c0       	rjmp	.+28     	; 0x127e <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return HOST_GETCONFIG_BuffOverflow;

	USB_ControlRequest.wLength = *ConfigSizePtr;
    1262:	90 93 f9 04 	sts	0x04F9, r25
    1266:	80 93 f8 04 	sts	0x04F8, r24

	if ((ErrorCode = USB_Host_SendControlRequest(BufferPtr)) != HOST_SENDCONTROL_Successful)
    126a:	c8 01       	movw	r24, r16
    126c:	42 d0       	rcall	.+132    	; 0x12f2 <USB_Host_SendControlRequest>
    126e:	28 2f       	mov	r18, r24
    1270:	88 23       	and	r24, r24
    1272:	29 f4       	brne	.+10     	; 0x127e <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
    1274:	f8 01       	movw	r30, r16
    1276:	81 81       	ldd	r24, Z+1	; 0x01
    1278:	82 30       	cpi	r24, 0x02	; 2
    127a:	09 f0       	breq	.+2      	; 0x127e <USB_Host_GetDeviceConfigDescriptor+0x94>
    127c:	26 e0       	ldi	r18, 0x06	; 6
	  return HOST_GETCONFIG_InvalidData;

	return HOST_GETCONFIG_Successful;
}
    127e:	82 2f       	mov	r24, r18
    1280:	29 96       	adiw	r28, 0x09	; 9
    1282:	0f b6       	in	r0, 0x3f	; 63
    1284:	f8 94       	cli
    1286:	de bf       	out	0x3e, r29	; 62
    1288:	0f be       	out	0x3f, r0	; 63
    128a:	cd bf       	out	0x3d, r28	; 61
    128c:	cf 91       	pop	r28
    128e:	df 91       	pop	r29
    1290:	1f 91       	pop	r17
    1292:	0f 91       	pop	r16
    1294:	ff 90       	pop	r15
    1296:	ef 90       	pop	r14
    1298:	df 90       	pop	r13
    129a:	cf 90       	pop	r12
    129c:	08 95       	ret

0000129e <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
    129e:	08 95       	ret

000012a0 <USB_Host_WaitForIOS>:

	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
    12a0:	1f 93       	push	r17
    12a2:	cf 93       	push	r28
    12a4:	df 93       	push	r29
    12a6:	18 2f       	mov	r17, r24
    12a8:	c8 ee       	ldi	r28, 0xE8	; 232
    12aa:	d3 e0       	ldi	r29, 0x03	; 3
    12ac:	09 c0       	rjmp	.+18     	; 0x12c0 <USB_Host_WaitForIOS+0x20>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    12ae:	81 e0       	ldi	r24, 0x01	; 1
    12b0:	87 db       	rcall	.-2290   	; 0x9c0 <USB_Host_WaitMS>
    12b2:	88 23       	and	r24, r24
    12b4:	d1 f4       	brne	.+52     	; 0x12ea <USB_Host_WaitForIOS+0x4a>
		  return ErrorCode;

		if (!(TimeoutCounter--))
    12b6:	20 97       	sbiw	r28, 0x00	; 0
    12b8:	11 f4       	brne	.+4      	; 0x12be <USB_Host_WaitForIOS+0x1e>
    12ba:	84 e0       	ldi	r24, 0x04	; 4
    12bc:	16 c0       	rjmp	.+44     	; 0x12ea <USB_Host_WaitForIOS+0x4a>
    12be:	21 97       	sbiw	r28, 0x01	; 1
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    12c0:	11 23       	and	r17, r17
    12c2:	29 f4       	brne	.+10     	; 0x12ce <USB_Host_WaitForIOS+0x2e>
			 *  \return Boolean \c true if the current pipe is ready for a SETUP packet, \c false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
    12c4:	80 91 a6 00 	lds	r24, 0x00A6
    12c8:	83 ff       	sbrs	r24, 3
    12ca:	f1 cf       	rjmp	.-30     	; 0x12ae <USB_Host_WaitForIOS+0xe>
    12cc:	0d c0       	rjmp	.+26     	; 0x12e8 <USB_Host_WaitForIOS+0x48>
    12ce:	11 30       	cpi	r17, 0x01	; 1
    12d0:	29 f4       	brne	.+10     	; 0x12dc <USB_Host_WaitForIOS+0x3c>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    12d2:	80 91 a6 00 	lds	r24, 0x00A6
    12d6:	80 ff       	sbrs	r24, 0
    12d8:	ea cf       	rjmp	.-44     	; 0x12ae <USB_Host_WaitForIOS+0xe>
    12da:	06 c0       	rjmp	.+12     	; 0x12e8 <USB_Host_WaitForIOS+0x48>
    12dc:	12 30       	cpi	r17, 0x02	; 2
    12de:	39 f7       	brne	.-50     	; 0x12ae <USB_Host_WaitForIOS+0xe>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
    12e0:	80 91 a6 00 	lds	r24, 0x00A6
    12e4:	82 ff       	sbrs	r24, 2
    12e6:	e3 cf       	rjmp	.-58     	; 0x12ae <USB_Host_WaitForIOS+0xe>
    12e8:	80 e0       	ldi	r24, 0x00	; 0
		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
}
    12ea:	df 91       	pop	r29
    12ec:	cf 91       	pop	r28
    12ee:	1f 91       	pop	r17
    12f0:	08 95       	ret

000012f2 <USB_Host_SendControlRequest>:
#include "HostStandardReq.h"

uint8_t USB_Host_ConfigurationNumber;

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
    12f2:	ff 92       	push	r15
    12f4:	0f 93       	push	r16
    12f6:	1f 93       	push	r17
    12f8:	cf 93       	push	r28
    12fa:	df 93       	push	r29
    12fc:	18 2f       	mov	r17, r24
    12fe:	09 2f       	mov	r16, r25
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
    1300:	f0 90 9e 00 	lds	r15, 0x009E
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
	bool     BusSuspended = USB_Host_IsBusSuspended();
	uint8_t  ReturnStatus = HOST_SENDCONTROL_Successful;
	uint16_t DataLen      = USB_ControlRequest.wLength;
    1304:	c0 91 f8 04 	lds	r28, 0x04F8
    1308:	d0 91 f9 04 	lds	r29, 0x04F9
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    130c:	80 91 9e 00 	lds	r24, 0x009E
    1310:	81 60       	ori	r24, 0x01	; 1
    1312:	80 93 9e 00 	sts	0x009E, r24

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1316:	81 e0       	ldi	r24, 0x01	; 1
    1318:	53 db       	rcall	.-2394   	; 0x9c0 <USB_Host_WaitMS>
    131a:	98 2f       	mov	r25, r24
    131c:	88 23       	and	r24, r24
    131e:	09 f0       	breq	.+2      	; 0x1322 <USB_Host_SendControlRequest+0x30>
    1320:	d7 c0       	rjmp	.+430    	; 0x14d0 <USB_Host_SendControlRequest+0x1de>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1322:	80 91 aa 00 	lds	r24, 0x00AA
    1326:	8f 7c       	andi	r24, 0xCF	; 207
    1328:	80 93 aa 00 	sts	0x00AA, r24

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
    132c:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
    1330:	80 91 a6 00 	lds	r24, 0x00A6
    1334:	8f 7e       	andi	r24, 0xEF	; 239
    1336:	80 93 a6 00 	sts	0x00A6, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    133a:	80 91 a9 00 	lds	r24, 0x00A9
    133e:	8f 7b       	andi	r24, 0xBF	; 191
    1340:	80 93 a9 00 	sts	0x00A9, r24
    1344:	e2 ef       	ldi	r30, 0xF2	; 242
    1346:	f4 e0       	ldi	r31, 0x04	; 4
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
	  Pipe_Write_8(*(HeaderStream++));	
    1348:	81 91       	ld	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    134a:	80 93 af 00 	sts	0x00AF, r24
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
    134e:	84 e0       	ldi	r24, 0x04	; 4
    1350:	ea 3f       	cpi	r30, 0xFA	; 250
    1352:	f8 07       	cpc	r31, r24
    1354:	c9 f7       	brne	.-14     	; 0x1348 <USB_Host_SendControlRequest+0x56>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
    1356:	80 91 a6 00 	lds	r24, 0x00A6
    135a:	87 77       	andi	r24, 0x77	; 119
    135c:	80 93 a6 00 	sts	0x00A6, r24
	  Pipe_Write_8(*(HeaderStream++));	
	#endif
	
	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
    1360:	80 e0       	ldi	r24, 0x00	; 0
    1362:	9e df       	rcall	.-196    	; 0x12a0 <USB_Host_WaitForIOS>
    1364:	98 2f       	mov	r25, r24
    1366:	88 23       	and	r24, r24
    1368:	09 f0       	breq	.+2      	; 0x136c <USB_Host_SendControlRequest+0x7a>
    136a:	b2 c0       	rjmp	.+356    	; 0x14d0 <USB_Host_SendControlRequest+0x1de>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    136c:	80 91 a9 00 	lds	r24, 0x00A9
    1370:	80 64       	ori	r24, 0x40	; 64
    1372:	80 93 a9 00 	sts	0x00A9, r24
	  goto End_Of_Control_Send;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1376:	81 e0       	ldi	r24, 0x01	; 1
    1378:	23 db       	rcall	.-2490   	; 0x9c0 <USB_Host_WaitMS>
    137a:	98 2f       	mov	r25, r24
    137c:	88 23       	and	r24, r24
    137e:	09 f0       	breq	.+2      	; 0x1382 <USB_Host_SendControlRequest+0x90>
    1380:	a7 c0       	rjmp	.+334    	; 0x14d0 <USB_Host_SendControlRequest+0x1de>

uint8_t USB_Host_ConfigurationNumber;

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
    1382:	21 2f       	mov	r18, r17
    1384:	30 2f       	mov	r19, r16
    1386:	c9 01       	movw	r24, r18
    1388:	8c 01       	movw	r16, r24
	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
	  goto End_Of_Control_Send;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
    138a:	80 91 f2 04 	lds	r24, 0x04F2
    138e:	87 ff       	sbrs	r24, 7
    1390:	52 c0       	rjmp	.+164    	; 0x1436 <USB_Host_SendControlRequest+0x144>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1392:	80 91 aa 00 	lds	r24, 0x00AA
    1396:	8f 7c       	andi	r24, 0xCF	; 207
    1398:	80 61       	ori	r24, 0x10	; 16
    139a:	80 93 aa 00 	sts	0x00AA, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
    139e:	01 15       	cp	r16, r1
    13a0:	11 05       	cpc	r17, r1
    13a2:	69 f5       	brne	.+90     	; 0x13fe <USB_Host_SendControlRequest+0x10c>
    13a4:	2e c0       	rjmp	.+92     	; 0x1402 <USB_Host_SendControlRequest+0x110>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    13a6:	80 91 a9 00 	lds	r24, 0x00A9
    13aa:	8f 7b       	andi	r24, 0xBF	; 191
    13ac:	80 93 a9 00 	sts	0x00A9, r24
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    13b0:	81 e0       	ldi	r24, 0x01	; 1
    13b2:	76 df       	rcall	.-276    	; 0x12a0 <USB_Host_WaitForIOS>
    13b4:	98 2f       	mov	r25, r24
    13b6:	88 23       	and	r24, r24
    13b8:	09 f0       	breq	.+2      	; 0x13bc <USB_Host_SendControlRequest+0xca>
    13ba:	8a c0       	rjmp	.+276    	; 0x14d0 <USB_Host_SendControlRequest+0x1de>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    13bc:	80 91 f6 00 	lds	r24, 0x00F6
    13c0:	90 91 f7 00 	lds	r25, 0x00F7
				  goto End_Of_Control_Send;

				if (!(Pipe_BytesInPipe()))
    13c4:	89 2b       	or	r24, r25
    13c6:	49 f4       	brne	.+18     	; 0x13da <USB_Host_SendControlRequest+0xe8>
    13c8:	c0 e0       	ldi	r28, 0x00	; 0
    13ca:	d0 e0       	ldi	r29, 0x00	; 0
    13cc:	06 c0       	rjmp	.+12     	; 0x13da <USB_Host_SendControlRequest+0xe8>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    13ce:	80 91 af 00 	lds	r24, 0x00AF
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
				{
					*(DataStream++) = Pipe_Read_8();
    13d2:	f8 01       	movw	r30, r16
    13d4:	81 93       	st	Z+, r24
    13d6:	8f 01       	movw	r16, r30
					DataLen--;
    13d8:	21 97       	sbiw	r28, 0x01	; 1
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    13da:	80 91 f6 00 	lds	r24, 0x00F6
    13de:	90 91 f7 00 	lds	r25, 0x00F7
				  goto End_Of_Control_Send;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
    13e2:	89 2b       	or	r24, r25
    13e4:	11 f0       	breq	.+4      	; 0x13ea <USB_Host_SendControlRequest+0xf8>
    13e6:	20 97       	sbiw	r28, 0x00	; 0
    13e8:	91 f7       	brne	.-28     	; 0x13ce <USB_Host_SendControlRequest+0xdc>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    13ea:	80 91 a9 00 	lds	r24, 0x00A9
    13ee:	80 64       	ori	r24, 0x40	; 64
    13f0:	80 93 a9 00 	sts	0x00A9, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    13f4:	80 91 a6 00 	lds	r24, 0x00A6
    13f8:	8e 77       	andi	r24, 0x7E	; 126
    13fa:	80 93 a6 00 	sts	0x00A6, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
    13fe:	20 97       	sbiw	r28, 0x00	; 0
    1400:	91 f6       	brne	.-92     	; 0x13a6 <USB_Host_SendControlRequest+0xb4>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1402:	80 91 aa 00 	lds	r24, 0x00AA
    1406:	8f 7c       	andi	r24, 0xCF	; 207
    1408:	80 62       	ori	r24, 0x20	; 32
    140a:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    140e:	80 91 a9 00 	lds	r24, 0x00A9
    1412:	8f 7b       	andi	r24, 0xBF	; 191
    1414:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1418:	82 e0       	ldi	r24, 0x02	; 2
    141a:	42 df       	rcall	.-380    	; 0x12a0 <USB_Host_WaitForIOS>
    141c:	98 2f       	mov	r25, r24
    141e:	88 23       	and	r24, r24
    1420:	09 f0       	breq	.+2      	; 0x1424 <USB_Host_SendControlRequest+0x132>
    1422:	56 c0       	rjmp	.+172    	; 0x14d0 <USB_Host_SendControlRequest+0x1de>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1424:	80 91 a6 00 	lds	r24, 0x00A6
    1428:	8b 77       	andi	r24, 0x7B	; 123
    142a:	80 93 a6 00 	sts	0x00A6, r24
		  goto End_Of_Control_Send;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    142e:	82 e0       	ldi	r24, 0x02	; 2
    1430:	37 df       	rcall	.-402    	; 0x12a0 <USB_Host_WaitForIOS>
    1432:	98 2f       	mov	r25, r24
    1434:	4d c0       	rjmp	.+154    	; 0x14d0 <USB_Host_SendControlRequest+0x1de>
		  goto End_Of_Control_Send;
	}
	else
	{
		if (DataStream != NULL)
    1436:	01 15       	cp	r16, r1
    1438:	11 05       	cpc	r17, r1
    143a:	a9 f1       	breq	.+106    	; 0x14a6 <USB_Host_SendControlRequest+0x1b4>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    143c:	80 91 aa 00 	lds	r24, 0x00AA
    1440:	8f 7c       	andi	r24, 0xCF	; 207
    1442:	80 62       	ori	r24, 0x20	; 32
    1444:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1448:	80 91 a9 00 	lds	r24, 0x00A9
    144c:	8f 7b       	andi	r24, 0xBF	; 191
    144e:	80 93 a9 00 	sts	0x00A9, r24
    1452:	1d c0       	rjmp	.+58     	; 0x148e <USB_Host_SendControlRequest+0x19c>
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1454:	82 e0       	ldi	r24, 0x02	; 2
    1456:	24 df       	rcall	.-440    	; 0x12a0 <USB_Host_WaitForIOS>
    1458:	98 2f       	mov	r25, r24
    145a:	88 23       	and	r24, r24
    145c:	c9 f5       	brne	.+114    	; 0x14d0 <USB_Host_SendControlRequest+0x1de>
				  goto End_Of_Control_Send;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    145e:	80 91 10 01 	lds	r24, 0x0110
    1462:	28 2f       	mov	r18, r24
    1464:	30 e0       	ldi	r19, 0x00	; 0
    1466:	07 c0       	rjmp	.+14     	; 0x1476 <USB_Host_SendControlRequest+0x184>
				{
					Pipe_Write_8(*(DataStream++));
    1468:	f8 01       	movw	r30, r16
    146a:	81 91       	ld	r24, Z+
    146c:	8f 01       	movw	r16, r30
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    146e:	80 93 af 00 	sts	0x00AF, r24
					DataLen--;
    1472:	21 97       	sbiw	r28, 0x01	; 1
			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
				  goto End_Of_Control_Send;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    1474:	39 f0       	breq	.+14     	; 0x1484 <USB_Host_SendControlRequest+0x192>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1476:	80 91 f6 00 	lds	r24, 0x00F6
    147a:	90 91 f7 00 	lds	r25, 0x00F7
    147e:	82 17       	cp	r24, r18
    1480:	93 07       	cpc	r25, r19
    1482:	90 f3       	brcs	.-28     	; 0x1468 <USB_Host_SendControlRequest+0x176>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1484:	80 91 a6 00 	lds	r24, 0x00A6
    1488:	8b 77       	andi	r24, 0x7B	; 123
    148a:	80 93 a6 00 	sts	0x00A6, r24
		if (DataStream != NULL)
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
    148e:	20 97       	sbiw	r28, 0x00	; 0
    1490:	09 f7       	brne	.-62     	; 0x1454 <USB_Host_SendControlRequest+0x162>
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1492:	82 e0       	ldi	r24, 0x02	; 2
    1494:	05 df       	rcall	.-502    	; 0x12a0 <USB_Host_WaitForIOS>
    1496:	98 2f       	mov	r25, r24
    1498:	88 23       	and	r24, r24
    149a:	d1 f4       	brne	.+52     	; 0x14d0 <USB_Host_SendControlRequest+0x1de>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    149c:	80 91 a9 00 	lds	r24, 0x00A9
    14a0:	80 64       	ori	r24, 0x40	; 64
    14a2:	80 93 a9 00 	sts	0x00A9, r24
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    14a6:	80 91 aa 00 	lds	r24, 0x00AA
    14aa:	8f 7c       	andi	r24, 0xCF	; 207
    14ac:	80 61       	ori	r24, 0x10	; 16
    14ae:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    14b2:	80 91 a9 00 	lds	r24, 0x00A9
    14b6:	8f 7b       	andi	r24, 0xBF	; 191
    14b8:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    14bc:	81 e0       	ldi	r24, 0x01	; 1
    14be:	f0 de       	rcall	.-544    	; 0x12a0 <USB_Host_WaitForIOS>
    14c0:	98 2f       	mov	r25, r24
    14c2:	88 23       	and	r24, r24
    14c4:	29 f4       	brne	.+10     	; 0x14d0 <USB_Host_SendControlRequest+0x1de>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    14c6:	80 91 a6 00 	lds	r24, 0x00A6
    14ca:	8e 77       	andi	r24, 0x7E	; 126
    14cc:	80 93 a6 00 	sts	0x00A6, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    14d0:	80 91 a9 00 	lds	r24, 0x00A9
    14d4:	80 64       	ori	r24, 0x40	; 64
    14d6:	80 93 a9 00 	sts	0x00A9, r24
	}

End_Of_Control_Send:
	Pipe_Freeze();

	if (BusSuspended)
    14da:	f0 fc       	sbrc	r15, 0
    14dc:	05 c0       	rjmp	.+10     	; 0x14e8 <USB_Host_SendControlRequest+0x1f6>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    14de:	80 91 9e 00 	lds	r24, 0x009E
    14e2:	8e 7f       	andi	r24, 0xFE	; 254
    14e4:	80 93 9e 00 	sts	0x009E, r24
			 *  \param[in] PipeNumber  Index of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t PipeNumber)
			{
				UPRST = (1 << PipeNumber);
    14e8:	81 e0       	ldi	r24, 0x01	; 1
    14ea:	80 93 a8 00 	sts	0x00A8, r24
				UPRST = 0;
    14ee:	10 92 a8 00 	sts	0x00A8, r1
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
    14f2:	89 2f       	mov	r24, r25
    14f4:	df 91       	pop	r29
    14f6:	cf 91       	pop	r28
    14f8:	1f 91       	pop	r17
    14fa:	0f 91       	pop	r16
    14fc:	ff 90       	pop	r15
    14fe:	08 95       	ret

00001500 <USB_Host_SetDeviceConfiguration>:

	return HOST_SENDCONTROL_Successful;
}

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
    1500:	1f 93       	push	r17
    1502:	18 2f       	mov	r17, r24
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
    1504:	10 92 f2 04 	sts	0x04F2, r1
    1508:	89 e0       	ldi	r24, 0x09	; 9
    150a:	80 93 f3 04 	sts	0x04F3, r24
    150e:	10 93 f4 04 	sts	0x04F4, r17
    1512:	10 92 f5 04 	sts	0x04F5, r1
    1516:	10 92 f7 04 	sts	0x04F7, r1
    151a:	10 92 f6 04 	sts	0x04F6, r1
    151e:	10 92 f9 04 	sts	0x04F9, r1
    1522:	10 92 f8 04 	sts	0x04F8, r1
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1526:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);
	
	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) == HOST_SENDCONTROL_Successful)
    152a:	80 e0       	ldi	r24, 0x00	; 0
    152c:	90 e0       	ldi	r25, 0x00	; 0
    152e:	e1 de       	rcall	.-574    	; 0x12f2 <USB_Host_SendControlRequest>
    1530:	88 23       	and	r24, r24
    1532:	49 f4       	brne	.+18     	; 0x1546 <USB_Host_SetDeviceConfiguration+0x46>
	{
		USB_Host_ConfigurationNumber = ConfigNumber;
    1534:	10 93 f0 04 	sts	0x04F0, r17
		USB_HostState                = (ConfigNumber) ? HOST_STATE_Configured : HOST_STATE_Addressed;
    1538:	11 23       	and	r17, r17
    153a:	11 f4       	brne	.+4      	; 0x1540 <USB_Host_SetDeviceConfiguration+0x40>
    153c:	9a e0       	ldi	r25, 0x0A	; 10
    153e:	01 c0       	rjmp	.+2      	; 0x1542 <USB_Host_SetDeviceConfiguration+0x42>
    1540:	9b e0       	ldi	r25, 0x0B	; 11
    1542:	90 93 fa 04 	sts	0x04FA, r25
	}

	return ErrorCode;
}
    1546:	1f 91       	pop	r17
    1548:	08 95       	ret

0000154a <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    154a:	ff 92       	push	r15
    154c:	0f 93       	push	r16
    154e:	1f 93       	push	r17
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
    1550:	07 ea       	ldi	r16, 0xA7	; 167
    1552:	10 e0       	ldi	r17, 0x00	; 0
    1554:	f8 01       	movw	r30, r16
    1556:	f0 80       	ld	r15, Z
    1558:	f7 e0       	ldi	r31, 0x07	; 7
    155a:	ff 22       	and	r15, r31
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    155c:	f8 01       	movw	r30, r16
    155e:	10 82       	st	Z, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    1560:	cc da       	rcall	.-2664   	; 0xafa <USB_Host_ProcessNextHostState>
    1562:	f8 01       	movw	r30, r16
    1564:	f0 82       	st	Z, r15
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
    1566:	1f 91       	pop	r17
    1568:	0f 91       	pop	r16
    156a:	ff 90       	pop	r15
    156c:	08 95       	ret

0000156e <USB_GetHIDReportItemInfo>:
	return HID_PARSE_Successful;
}

bool USB_GetHIDReportItemInfo(const uint8_t* ReportData,
                              HID_ReportItem_t* const ReportItem)
{
    156e:	cf 92       	push	r12
    1570:	df 92       	push	r13
    1572:	ef 92       	push	r14
    1574:	ff 92       	push	r15
    1576:	0f 93       	push	r16
    1578:	1f 93       	push	r17
    157a:	cf 93       	push	r28
    157c:	df 93       	push	r29
    157e:	6c 01       	movw	r12, r24
    1580:	eb 01       	movw	r28, r22
	if (ReportItem == NULL)
    1582:	61 15       	cp	r22, r1
    1584:	71 05       	cpc	r23, r1
    1586:	09 f4       	brne	.+2      	; 0x158a <USB_GetHIDReportItemInfo+0x1c>
    1588:	4f c0       	rjmp	.+158    	; 0x1628 <USB_GetHIDReportItemInfo+0xba>
	  return false;

	uint16_t DataBitsRem  = ReportItem->Attributes.BitSize;
    158a:	28 85       	ldd	r18, Y+8	; 0x08
	uint16_t CurrentBit   = ReportItem->BitOffset;
    158c:	e8 80       	ld	r14, Y
    158e:	f9 80       	ldd	r15, Y+1	; 0x01
	uint32_t BitMask      = (1 << 0);

	if (ReportItem->ReportID)
    1590:	9d 81       	ldd	r25, Y+5	; 0x05
    1592:	99 23       	and	r25, r25
    1594:	41 f0       	breq	.+16     	; 0x15a6 <USB_GetHIDReportItemInfo+0x38>
	{
		if (ReportItem->ReportID != ReportData[0])
    1596:	f6 01       	movw	r30, r12
    1598:	80 81       	ld	r24, Z
    159a:	98 17       	cp	r25, r24
    159c:	09 f0       	breq	.+2      	; 0x15a0 <USB_GetHIDReportItemInfo+0x32>
    159e:	44 c0       	rjmp	.+136    	; 0x1628 <USB_GetHIDReportItemInfo+0xba>
		  return false;

		ReportData++;
    15a0:	08 94       	sec
    15a2:	c1 1c       	adc	r12, r1
    15a4:	d1 1c       	adc	r13, r1
                              HID_ReportItem_t* const ReportItem)
{
	if (ReportItem == NULL)
	  return false;

	uint16_t DataBitsRem  = ReportItem->Attributes.BitSize;
    15a6:	02 2f       	mov	r16, r18
    15a8:	10 e0       	ldi	r17, 0x00	; 0
		  return false;

		ReportData++;
	}

	ReportItem->PreviousValue = ReportItem->Value;
    15aa:	8a a1       	ldd	r24, Y+34	; 0x22
    15ac:	9b a1       	ldd	r25, Y+35	; 0x23
    15ae:	ac a1       	ldd	r26, Y+36	; 0x24
    15b0:	bd a1       	ldd	r27, Y+37	; 0x25
    15b2:	8e a3       	std	Y+38, r24	; 0x26
    15b4:	9f a3       	std	Y+39, r25	; 0x27
    15b6:	a8 a7       	std	Y+40, r26	; 0x28
    15b8:	b9 a7       	std	Y+41, r27	; 0x29
	ReportItem->Value = 0;
    15ba:	1a a2       	std	Y+34, r1	; 0x22
    15bc:	1b a2       	std	Y+35, r1	; 0x23
    15be:	1c a2       	std	Y+36, r1	; 0x24
    15c0:	1d a2       	std	Y+37, r1	; 0x25
    15c2:	41 e0       	ldi	r20, 0x01	; 1
    15c4:	50 e0       	ldi	r21, 0x00	; 0
    15c6:	60 e0       	ldi	r22, 0x00	; 0
    15c8:	70 e0       	ldi	r23, 0x00	; 0
    15ca:	29 c0       	rjmp	.+82     	; 0x161e <USB_GetHIDReportItemInfo+0xb0>

	while (DataBitsRem--)
	{
		if (ReportData[CurrentBit / 8] & (1 << (CurrentBit % 8)))
    15cc:	f7 01       	movw	r30, r14
    15ce:	93 e0       	ldi	r25, 0x03	; 3
    15d0:	f6 95       	lsr	r31
    15d2:	e7 95       	ror	r30
    15d4:	9a 95       	dec	r25
    15d6:	e1 f7       	brne	.-8      	; 0x15d0 <USB_GetHIDReportItemInfo+0x62>
    15d8:	ec 0d       	add	r30, r12
    15da:	fd 1d       	adc	r31, r13
    15dc:	80 81       	ld	r24, Z
    15de:	90 e0       	ldi	r25, 0x00	; 0
    15e0:	97 01       	movw	r18, r14
    15e2:	27 70       	andi	r18, 0x07	; 7
    15e4:	30 70       	andi	r19, 0x00	; 0
    15e6:	02 c0       	rjmp	.+4      	; 0x15ec <USB_GetHIDReportItemInfo+0x7e>
    15e8:	95 95       	asr	r25
    15ea:	87 95       	ror	r24
    15ec:	2a 95       	dec	r18
    15ee:	e2 f7       	brpl	.-8      	; 0x15e8 <USB_GetHIDReportItemInfo+0x7a>
    15f0:	80 ff       	sbrs	r24, 0
    15f2:	0c c0       	rjmp	.+24     	; 0x160c <USB_GetHIDReportItemInfo+0x9e>
		  ReportItem->Value |= BitMask;
    15f4:	8a a1       	ldd	r24, Y+34	; 0x22
    15f6:	9b a1       	ldd	r25, Y+35	; 0x23
    15f8:	ac a1       	ldd	r26, Y+36	; 0x24
    15fa:	bd a1       	ldd	r27, Y+37	; 0x25
    15fc:	84 2b       	or	r24, r20
    15fe:	95 2b       	or	r25, r21
    1600:	a6 2b       	or	r26, r22
    1602:	b7 2b       	or	r27, r23
    1604:	8a a3       	std	Y+34, r24	; 0x22
    1606:	9b a3       	std	Y+35, r25	; 0x23
    1608:	ac a3       	std	Y+36, r26	; 0x24
    160a:	bd a3       	std	Y+37, r27	; 0x25

		CurrentBit++;
    160c:	08 94       	sec
    160e:	e1 1c       	adc	r14, r1
    1610:	f1 1c       	adc	r15, r1
		BitMask <<= 1;
    1612:	44 0f       	add	r20, r20
    1614:	55 1f       	adc	r21, r21
    1616:	66 1f       	adc	r22, r22
    1618:	77 1f       	adc	r23, r23
    161a:	01 50       	subi	r16, 0x01	; 1
    161c:	10 40       	sbci	r17, 0x00	; 0
	}

	ReportItem->PreviousValue = ReportItem->Value;
	ReportItem->Value = 0;

	while (DataBitsRem--)
    161e:	01 15       	cp	r16, r1
    1620:	11 05       	cpc	r17, r1
    1622:	a1 f6       	brne	.-88     	; 0x15cc <USB_GetHIDReportItemInfo+0x5e>
    1624:	81 e0       	ldi	r24, 0x01	; 1
    1626:	01 c0       	rjmp	.+2      	; 0x162a <USB_GetHIDReportItemInfo+0xbc>
    1628:	80 e0       	ldi	r24, 0x00	; 0
		CurrentBit++;
		BitMask <<= 1;
	}

	return true;
}
    162a:	df 91       	pop	r29
    162c:	cf 91       	pop	r28
    162e:	1f 91       	pop	r17
    1630:	0f 91       	pop	r16
    1632:	ff 90       	pop	r15
    1634:	ef 90       	pop	r14
    1636:	df 90       	pop	r13
    1638:	cf 90       	pop	r12
    163a:	08 95       	ret

0000163c <USB_ProcessHIDReport>:
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
    163c:	2f 92       	push	r2
    163e:	3f 92       	push	r3
    1640:	4f 92       	push	r4
    1642:	5f 92       	push	r5
    1644:	6f 92       	push	r6
    1646:	7f 92       	push	r7
    1648:	8f 92       	push	r8
    164a:	9f 92       	push	r9
    164c:	af 92       	push	r10
    164e:	bf 92       	push	r11
    1650:	cf 92       	push	r12
    1652:	df 92       	push	r13
    1654:	ef 92       	push	r14
    1656:	ff 92       	push	r15
    1658:	0f 93       	push	r16
    165a:	1f 93       	push	r17
    165c:	df 93       	push	r29
    165e:	cf 93       	push	r28
    1660:	cd b7       	in	r28, 0x3d	; 61
    1662:	de b7       	in	r29, 0x3e	; 62
    1664:	c5 59       	subi	r28, 0x95	; 149
    1666:	d0 40       	sbci	r29, 0x00	; 0
    1668:	0f b6       	in	r0, 0x3f	; 63
    166a:	f8 94       	cli
    166c:	de bf       	out	0x3e, r29	; 62
    166e:	0f be       	out	0x3f, r0	; 63
    1670:	cd bf       	out	0x3d, r28	; 61
    1672:	cf 57       	subi	r28, 0x7F	; 127
    1674:	df 4f       	sbci	r29, 0xFF	; 255
    1676:	99 83       	std	Y+1, r25	; 0x01
    1678:	88 83       	st	Y, r24
    167a:	c1 58       	subi	r28, 0x81	; 129
    167c:	d0 40       	sbci	r29, 0x00	; 0
    167e:	cd 57       	subi	r28, 0x7D	; 125
    1680:	df 4f       	sbci	r29, 0xFF	; 255
    1682:	79 83       	std	Y+1, r23	; 0x01
    1684:	68 83       	st	Y, r22
    1686:	c3 58       	subi	r28, 0x83	; 131
    1688:	d0 40       	sbci	r29, 0x00	; 0
    168a:	1a 01       	movw	r2, r20
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath      = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo        = &ParserData->ReportIDSizes[0];
    168c:	20 e9       	ldi	r18, 0x90	; 144
    168e:	82 2e       	mov	r8, r18
    1690:	23 e0       	ldi	r18, 0x03	; 3
    1692:	92 2e       	mov	r9, r18
    1694:	84 0e       	add	r8, r20
    1696:	95 1e       	adc	r9, r21
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize           = 0;
	HID_MinMax_t          UsageMinMax             = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
    1698:	89 ed       	ldi	r24, 0xD9	; 217
    169a:	93 e0       	ldi	r25, 0x03	; 3
    169c:	da 01       	movw	r26, r20
    169e:	fc 01       	movw	r30, r24
    16a0:	1d 92       	st	X+, r1
    16a2:	31 97       	sbiw	r30, 0x01	; 1
    16a4:	e9 f7       	brne	.-6      	; 0x16a0 <USB_ProcessHIDReport+0x64>
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
    16a6:	fe 01       	movw	r30, r28
    16a8:	fb 96       	adiw	r30, 0x3b	; 59
    16aa:	8c e1       	ldi	r24, 0x1C	; 28
    16ac:	df 01       	movw	r26, r30
    16ae:	1d 92       	st	X+, r1
    16b0:	8a 95       	dec	r24
    16b2:	e9 f7       	brne	.-6      	; 0x16ae <USB_ProcessHIDReport+0x72>
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
    16b4:	87 e0       	ldi	r24, 0x07	; 7
    16b6:	d4 01       	movw	r26, r8
    16b8:	1d 92       	st	X+, r1
    16ba:	8a 95       	dec	r24
    16bc:	e9 f7       	brne	.-6      	; 0x16b8 <USB_ProcessHIDReport+0x7c>

	ParserData->TotalDeviceReports = 1;
    16be:	da 01       	movw	r26, r20
    16c0:	a1 57       	subi	r26, 0x71	; 113
    16c2:	bc 4f       	sbci	r27, 0xFC	; 252
    16c4:	81 e0       	ldi	r24, 0x01	; 1
    16c6:	8c 93       	st	X, r24
				UsageMinMax.Maximum = ReportItemData;
				break;
			case HID_RI_COLLECTION(0):
				if (CurrCollectionPath == NULL)
				{
					CurrCollectionPath = &ParserData->CollectionPaths[0];
    16c8:	9a 01       	movw	r18, r20
    16ca:	27 5b       	subi	r18, 0xB7	; 183
    16cc:	3c 4f       	sbci	r19, 0xFC	; 252
    16ce:	e7 96       	adiw	r28, 0x37	; 55
    16d0:	3f af       	std	Y+63, r19	; 0x3f
    16d2:	2e af       	std	Y+62, r18	; 0x3e
    16d4:	e7 97       	sbiw	r28, 0x37	; 55
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
    16d6:	40 5b       	subi	r20, 0xB0	; 176
    16d8:	5c 4f       	sbci	r21, 0xFC	; 252
    16da:	e5 96       	adiw	r28, 0x35	; 53
    16dc:	5f af       	std	Y+63, r21	; 0x3f
    16de:	4e af       	std	Y+62, r20	; 0x3e
    16e0:	e5 97       	sbiw	r28, 0x35	; 53

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
    16e2:	c1 01       	movw	r24, r2
    16e4:	88 57       	subi	r24, 0x78	; 120
    16e6:	9c 4f       	sbci	r25, 0xFC	; 252
    16e8:	ef 96       	adiw	r28, 0x3f	; 63
    16ea:	9f af       	std	Y+63, r25	; 0x3f
    16ec:	8e af       	std	Y+62, r24	; 0x3e
    16ee:	ef 97       	sbiw	r28, 0x3f	; 63
    16f0:	6f 01       	movw	r12, r30
    16f2:	aa 24       	eor	r10, r10
    16f4:	bb 24       	eor	r11, r11
    16f6:	ed 96       	adiw	r28, 0x3d	; 61
    16f8:	1f ae       	std	Y+63, r1	; 0x3f
    16fa:	ed 97       	sbiw	r28, 0x3d	; 61
    16fc:	eb 96       	adiw	r28, 0x3b	; 59
    16fe:	1c ae       	std	Y+60, r1	; 0x3c
    1700:	1d ae       	std	Y+61, r1	; 0x3d
    1702:	1e ae       	std	Y+62, r1	; 0x3e
    1704:	1f ae       	std	Y+63, r1	; 0x3f
    1706:	eb 97       	sbiw	r28, 0x3b	; 59
    1708:	44 24       	eor	r4, r4
    170a:	55 24       	eor	r5, r5
    170c:	32 01       	movw	r6, r4

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
    170e:	f1 01       	movw	r30, r2
    1710:	ea 52       	subi	r30, 0x2A	; 42
    1712:	fc 4f       	sbci	r31, 0xFC	; 252
    1714:	c6 57       	subi	r28, 0x76	; 118
    1716:	df 4f       	sbci	r29, 0xFF	; 255
    1718:	f9 83       	std	Y+1, r31	; 0x01
    171a:	e8 83       	st	Y, r30
    171c:	ca 58       	subi	r28, 0x8A	; 138
    171e:	d0 40       	sbci	r29, 0x00	; 0
				       sizeof(HID_ReportItem_t));

				CurrStateTable++;
				break;
			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
    1720:	cc 56       	subi	r28, 0x6C	; 108
    1722:	df 4f       	sbci	r29, 0xFF	; 255
    1724:	d9 82       	std	Y+1, r13	; 0x01
    1726:	c8 82       	st	Y, r12
    1728:	c4 59       	subi	r28, 0x94	; 148
    172a:	d0 40       	sbci	r29, 0x00	; 0
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
    172c:	96 01       	movw	r18, r12
    172e:	24 5e       	subi	r18, 0xE4	; 228
    1730:	3f 4f       	sbci	r19, 0xFF	; 255
    1732:	c4 57       	subi	r28, 0x74	; 116
    1734:	df 4f       	sbci	r29, 0xFF	; 255
    1736:	39 83       	std	Y+1, r19	; 0x01
    1738:	28 83       	st	Y, r18
    173a:	cc 58       	subi	r28, 0x8C	; 140
    173c:	d0 40       	sbci	r29, 0x00	; 0
				CurrStateTable->ReportCount                 = ReportItemData;
				break;
			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;

				if (ParserData->UsingReportIDs)
    173e:	a1 01       	movw	r20, r2
    1740:	48 52       	subi	r20, 0x28	; 40
    1742:	5c 4f       	sbci	r21, 0xFC	; 252
    1744:	c2 57       	subi	r28, 0x72	; 114
    1746:	df 4f       	sbci	r29, 0xFF	; 255
    1748:	59 83       	std	Y+1, r21	; 0x01
    174a:	48 83       	st	Y, r20
    174c:	ce 58       	subi	r28, 0x8E	; 142
    174e:	d0 40       	sbci	r29, 0x00	; 0
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
    1750:	c0 57       	subi	r28, 0x70	; 112
    1752:	df 4f       	sbci	r29, 0xFF	; 255
    1754:	b9 83       	std	Y+1, r27	; 0x01
    1756:	a8 83       	st	Y, r26
    1758:	c0 59       	subi	r28, 0x90	; 144
    175a:	d0 40       	sbci	r29, 0x00	; 0
    175c:	c4 01       	movw	r24, r8
    175e:	ce 56       	subi	r28, 0x6E	; 110
    1760:	df 4f       	sbci	r29, 0xFF	; 255
    1762:	88 82       	st	Y, r8
    1764:	c2 59       	subi	r28, 0x92	; 146
    1766:	d0 40       	sbci	r29, 0x00	; 0
    1768:	cd 56       	subi	r28, 0x6D	; 109
    176a:	df 4f       	sbci	r29, 0xFF	; 255
    176c:	98 83       	st	Y, r25
    176e:	c3 59       	subi	r28, 0x93	; 147
    1770:	d0 40       	sbci	r29, 0x00	; 0
    1772:	3e c3       	rjmp	.+1660   	; 0x1df0 <USB_ProcessHIDReport+0x7b4>

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
	{
		uint8_t  HIDReportItem  = *ReportData;
    1774:	cf 57       	subi	r28, 0x7F	; 127
    1776:	df 4f       	sbci	r29, 0xFF	; 255
    1778:	a8 81       	ld	r26, Y
    177a:	b9 81       	ldd	r27, Y+1	; 0x01
    177c:	c1 58       	subi	r28, 0x81	; 129
    177e:	d0 40       	sbci	r29, 0x00	; 0
    1780:	4d 91       	ld	r20, X+
    1782:	cf 57       	subi	r28, 0x7F	; 127
    1784:	df 4f       	sbci	r29, 0xFF	; 255
    1786:	b9 83       	std	Y+1, r27	; 0x01
    1788:	a8 83       	st	Y, r26
    178a:	c1 58       	subi	r28, 0x81	; 129
    178c:	d0 40       	sbci	r29, 0x00	; 0
		uint32_t ReportItemData = 0;

		ReportData++;
		ReportSize--;
    178e:	cd 57       	subi	r28, 0x7D	; 125
    1790:	df 4f       	sbci	r29, 0xFF	; 255
    1792:	e8 81       	ld	r30, Y
    1794:	f9 81       	ldd	r31, Y+1	; 0x01
    1796:	c3 58       	subi	r28, 0x83	; 131
    1798:	d0 40       	sbci	r29, 0x00	; 0
    179a:	31 97       	sbiw	r30, 0x01	; 1
    179c:	cd 57       	subi	r28, 0x7D	; 125
    179e:	df 4f       	sbci	r29, 0xFF	; 255
    17a0:	f9 83       	std	Y+1, r31	; 0x01
    17a2:	e8 83       	st	Y, r30
    17a4:	c3 58       	subi	r28, 0x83	; 131
    17a6:	d0 40       	sbci	r29, 0x00	; 0

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
    17a8:	24 2f       	mov	r18, r20
    17aa:	30 e0       	ldi	r19, 0x00	; 0
    17ac:	c1 58       	subi	r28, 0x81	; 129
    17ae:	df 4f       	sbci	r29, 0xFF	; 255
    17b0:	39 83       	std	Y+1, r19	; 0x01
    17b2:	28 83       	st	Y, r18
    17b4:	cf 57       	subi	r28, 0x7F	; 127
    17b6:	d0 40       	sbci	r29, 0x00	; 0
    17b8:	23 70       	andi	r18, 0x03	; 3
    17ba:	30 70       	andi	r19, 0x00	; 0
    17bc:	22 30       	cpi	r18, 0x02	; 2
    17be:	31 05       	cpc	r19, r1
    17c0:	11 f1       	breq	.+68     	; 0x1806 <USB_ProcessHIDReport+0x1ca>
    17c2:	23 30       	cpi	r18, 0x03	; 3
    17c4:	31 05       	cpc	r19, r1
    17c6:	39 f0       	breq	.+14     	; 0x17d6 <USB_ProcessHIDReport+0x19a>
    17c8:	21 30       	cpi	r18, 0x01	; 1
    17ca:	31 05       	cpc	r19, r1
    17cc:	a9 f1       	breq	.+106    	; 0x1838 <USB_ProcessHIDReport+0x1fc>
    17ce:	ee 24       	eor	r14, r14
    17d0:	ff 24       	eor	r15, r15
    17d2:	87 01       	movw	r16, r14
    17d4:	4f c0       	rjmp	.+158    	; 0x1874 <USB_ProcessHIDReport+0x238>
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = le32_to_cpu(*((uint32_t*)ReportData));
    17d6:	cf 57       	subi	r28, 0x7F	; 127
    17d8:	df 4f       	sbci	r29, 0xFF	; 255
    17da:	a8 81       	ld	r26, Y
    17dc:	b9 81       	ldd	r27, Y+1	; 0x01
    17de:	c1 58       	subi	r28, 0x81	; 129
    17e0:	d0 40       	sbci	r29, 0x00	; 0
    17e2:	ed 90       	ld	r14, X+
    17e4:	fd 90       	ld	r15, X+
    17e6:	0d 91       	ld	r16, X+
    17e8:	1d 91       	ld	r17, X+
    17ea:	cf 57       	subi	r28, 0x7F	; 127
    17ec:	df 4f       	sbci	r29, 0xFF	; 255
    17ee:	b9 83       	std	Y+1, r27	; 0x01
    17f0:	a8 83       	st	Y, r26
    17f2:	c1 58       	subi	r28, 0x81	; 129
    17f4:	d0 40       	sbci	r29, 0x00	; 0
				ReportSize     -= 4;
    17f6:	cd 57       	subi	r28, 0x7D	; 125
    17f8:	df 4f       	sbci	r29, 0xFF	; 255
    17fa:	e8 81       	ld	r30, Y
    17fc:	f9 81       	ldd	r31, Y+1	; 0x01
    17fe:	c3 58       	subi	r28, 0x83	; 131
    1800:	d0 40       	sbci	r29, 0x00	; 0
    1802:	34 97       	sbiw	r30, 0x04	; 4
    1804:	31 c0       	rjmp	.+98     	; 0x1868 <USB_ProcessHIDReport+0x22c>
				ReportData     += 4;
				break;
			case HID_RI_DATA_BITS_16:
				ReportItemData  = le16_to_cpu(*((uint16_t*)ReportData));
    1806:	cf 57       	subi	r28, 0x7F	; 127
    1808:	df 4f       	sbci	r29, 0xFF	; 255
    180a:	a8 81       	ld	r26, Y
    180c:	b9 81       	ldd	r27, Y+1	; 0x01
    180e:	c1 58       	subi	r28, 0x81	; 129
    1810:	d0 40       	sbci	r29, 0x00	; 0
    1812:	8d 91       	ld	r24, X+
    1814:	9d 91       	ld	r25, X+
    1816:	cf 57       	subi	r28, 0x7F	; 127
    1818:	df 4f       	sbci	r29, 0xFF	; 255
    181a:	b9 83       	std	Y+1, r27	; 0x01
    181c:	a8 83       	st	Y, r26
    181e:	c1 58       	subi	r28, 0x81	; 129
    1820:	d0 40       	sbci	r29, 0x00	; 0
    1822:	7c 01       	movw	r14, r24
    1824:	00 e0       	ldi	r16, 0x00	; 0
    1826:	10 e0       	ldi	r17, 0x00	; 0
				ReportSize     -= 2;
    1828:	cd 57       	subi	r28, 0x7D	; 125
    182a:	df 4f       	sbci	r29, 0xFF	; 255
    182c:	e8 81       	ld	r30, Y
    182e:	f9 81       	ldd	r31, Y+1	; 0x01
    1830:	c3 58       	subi	r28, 0x83	; 131
    1832:	d0 40       	sbci	r29, 0x00	; 0
    1834:	32 97       	sbiw	r30, 0x02	; 2
    1836:	18 c0       	rjmp	.+48     	; 0x1868 <USB_ProcessHIDReport+0x22c>
				ReportData     += 2;
				break;
			case HID_RI_DATA_BITS_8:
				ReportItemData  = *((uint8_t*)ReportData);
    1838:	cf 57       	subi	r28, 0x7F	; 127
    183a:	df 4f       	sbci	r29, 0xFF	; 255
    183c:	a8 81       	ld	r26, Y
    183e:	b9 81       	ldd	r27, Y+1	; 0x01
    1840:	c1 58       	subi	r28, 0x81	; 129
    1842:	d0 40       	sbci	r29, 0x00	; 0
    1844:	8d 91       	ld	r24, X+
    1846:	cf 57       	subi	r28, 0x7F	; 127
    1848:	df 4f       	sbci	r29, 0xFF	; 255
    184a:	b9 83       	std	Y+1, r27	; 0x01
    184c:	a8 83       	st	Y, r26
    184e:	c1 58       	subi	r28, 0x81	; 129
    1850:	d0 40       	sbci	r29, 0x00	; 0
    1852:	e8 2e       	mov	r14, r24
    1854:	ff 24       	eor	r15, r15
    1856:	00 e0       	ldi	r16, 0x00	; 0
    1858:	10 e0       	ldi	r17, 0x00	; 0
				ReportSize     -= 1;
    185a:	cd 57       	subi	r28, 0x7D	; 125
    185c:	df 4f       	sbci	r29, 0xFF	; 255
    185e:	e8 81       	ld	r30, Y
    1860:	f9 81       	ldd	r31, Y+1	; 0x01
    1862:	c3 58       	subi	r28, 0x83	; 131
    1864:	d0 40       	sbci	r29, 0x00	; 0
    1866:	31 97       	sbiw	r30, 0x01	; 1
    1868:	cd 57       	subi	r28, 0x7D	; 125
    186a:	df 4f       	sbci	r29, 0xFF	; 255
    186c:	f9 83       	std	Y+1, r31	; 0x01
    186e:	e8 83       	st	Y, r30
    1870:	c3 58       	subi	r28, 0x83	; 131
    1872:	d0 40       	sbci	r29, 0x00	; 0
				ReportData     += 1;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
    1874:	c1 58       	subi	r28, 0x81	; 129
    1876:	df 4f       	sbci	r29, 0xFF	; 255
    1878:	88 81       	ld	r24, Y
    187a:	99 81       	ldd	r25, Y+1	; 0x01
    187c:	cf 57       	subi	r28, 0x7F	; 127
    187e:	d0 40       	sbci	r29, 0x00	; 0
    1880:	8c 7f       	andi	r24, 0xFC	; 252
    1882:	90 70       	andi	r25, 0x00	; 0
    1884:	84 36       	cpi	r24, 0x64	; 100
    1886:	91 05       	cpc	r25, r1
    1888:	09 f4       	brne	.+2      	; 0x188c <USB_ProcessHIDReport+0x250>
    188a:	db c0       	rjmp	.+438    	; 0x1a42 <USB_ProcessHIDReport+0x406>
    188c:	85 36       	cpi	r24, 0x65	; 101
    188e:	91 05       	cpc	r25, r1
    1890:	74 f5       	brge	.+92     	; 0x18ee <USB_ProcessHIDReport+0x2b2>
    1892:	84 32       	cpi	r24, 0x24	; 36
    1894:	91 05       	cpc	r25, r1
    1896:	09 f4       	brne	.+2      	; 0x189a <USB_ProcessHIDReport+0x25e>
    1898:	bb c0       	rjmp	.+374    	; 0x1a10 <USB_ProcessHIDReport+0x3d4>
    189a:	85 32       	cpi	r24, 0x25	; 37
    189c:	91 05       	cpc	r25, r1
    189e:	9c f4       	brge	.+38     	; 0x18c6 <USB_ProcessHIDReport+0x28a>
    18a0:	88 30       	cpi	r24, 0x08	; 8
    18a2:	91 05       	cpc	r25, r1
    18a4:	09 f4       	brne	.+2      	; 0x18a8 <USB_ProcessHIDReport+0x26c>
    18a6:	37 c1       	rjmp	.+622    	; 0x1b16 <USB_ProcessHIDReport+0x4da>
    18a8:	89 30       	cpi	r24, 0x09	; 9
    18aa:	91 05       	cpc	r25, r1
    18ac:	24 f4       	brge	.+8      	; 0x18b6 <USB_ProcessHIDReport+0x27a>
    18ae:	04 97       	sbiw	r24, 0x04	; 4
    18b0:	09 f0       	breq	.+2      	; 0x18b4 <USB_ProcessHIDReport+0x278>
    18b2:	86 c2       	rjmp	.+1292   	; 0x1dc0 <USB_ProcessHIDReport+0x784>
    18b4:	98 c0       	rjmp	.+304    	; 0x19e6 <USB_ProcessHIDReport+0x3aa>
    18b6:	84 31       	cpi	r24, 0x14	; 20
    18b8:	91 05       	cpc	r25, r1
    18ba:	09 f4       	brne	.+2      	; 0x18be <USB_ProcessHIDReport+0x282>
    18bc:	a3 c0       	rjmp	.+326    	; 0x1a04 <USB_ProcessHIDReport+0x3c8>
    18be:	48 97       	sbiw	r24, 0x18	; 24
    18c0:	09 f0       	breq	.+2      	; 0x18c4 <USB_ProcessHIDReport+0x288>
    18c2:	7e c2       	rjmp	.+1276   	; 0x1dc0 <USB_ProcessHIDReport+0x784>
    18c4:	47 c0       	rjmp	.+142    	; 0x1954 <USB_ProcessHIDReport+0x318>
    18c6:	84 33       	cpi	r24, 0x34	; 52
    18c8:	91 05       	cpc	r25, r1
    18ca:	09 f4       	brne	.+2      	; 0x18ce <USB_ProcessHIDReport+0x292>
    18cc:	a9 c0       	rjmp	.+338    	; 0x1a20 <USB_ProcessHIDReport+0x3e4>
    18ce:	85 33       	cpi	r24, 0x35	; 53
    18d0:	91 05       	cpc	r25, r1
    18d2:	24 f4       	brge	.+8      	; 0x18dc <USB_ProcessHIDReport+0x2a0>
    18d4:	88 97       	sbiw	r24, 0x28	; 40
    18d6:	09 f0       	breq	.+2      	; 0x18da <USB_ProcessHIDReport+0x29e>
    18d8:	73 c2       	rjmp	.+1254   	; 0x1dc0 <USB_ProcessHIDReport+0x784>
    18da:	38 c1       	rjmp	.+624    	; 0x1b4c <USB_ProcessHIDReport+0x510>
    18dc:	84 34       	cpi	r24, 0x44	; 68
    18de:	91 05       	cpc	r25, r1
    18e0:	09 f4       	brne	.+2      	; 0x18e4 <USB_ProcessHIDReport+0x2a8>
    18e2:	a4 c0       	rjmp	.+328    	; 0x1a2c <USB_ProcessHIDReport+0x3f0>
    18e4:	84 35       	cpi	r24, 0x54	; 84
    18e6:	91 05       	cpc	r25, r1
    18e8:	09 f0       	breq	.+2      	; 0x18ec <USB_ProcessHIDReport+0x2b0>
    18ea:	6a c2       	rjmp	.+1236   	; 0x1dc0 <USB_ProcessHIDReport+0x784>
    18ec:	a7 c0       	rjmp	.+334    	; 0x1a3c <USB_ProcessHIDReport+0x400>
    18ee:	84 39       	cpi	r24, 0x94	; 148
    18f0:	91 05       	cpc	r25, r1
    18f2:	09 f4       	brne	.+2      	; 0x18f6 <USB_ProcessHIDReport+0x2ba>
    18f4:	b1 c0       	rjmp	.+354    	; 0x1a58 <USB_ProcessHIDReport+0x41c>
    18f6:	85 39       	cpi	r24, 0x95	; 149
    18f8:	91 05       	cpc	r25, r1
    18fa:	a4 f4       	brge	.+40     	; 0x1924 <USB_ProcessHIDReport+0x2e8>
    18fc:	80 38       	cpi	r24, 0x80	; 128
    18fe:	91 05       	cpc	r25, r1
    1900:	69 f1       	breq	.+90     	; 0x195c <USB_ProcessHIDReport+0x320>
    1902:	81 38       	cpi	r24, 0x81	; 129
    1904:	91 05       	cpc	r25, r1
    1906:	2c f4       	brge	.+10     	; 0x1912 <USB_ProcessHIDReport+0x2d6>
    1908:	84 37       	cpi	r24, 0x74	; 116
    190a:	91 05       	cpc	r25, r1
    190c:	09 f0       	breq	.+2      	; 0x1910 <USB_ProcessHIDReport+0x2d4>
    190e:	58 c2       	rjmp	.+1200   	; 0x1dc0 <USB_ProcessHIDReport+0x784>
    1910:	a0 c0       	rjmp	.+320    	; 0x1a52 <USB_ProcessHIDReport+0x416>
    1912:	84 38       	cpi	r24, 0x84	; 132
    1914:	91 05       	cpc	r25, r1
    1916:	09 f4       	brne	.+2      	; 0x191a <USB_ProcessHIDReport+0x2de>
    1918:	a3 c0       	rjmp	.+326    	; 0x1a60 <USB_ProcessHIDReport+0x424>
    191a:	80 39       	cpi	r24, 0x90	; 144
    191c:	91 05       	cpc	r25, r1
    191e:	09 f0       	breq	.+2      	; 0x1922 <USB_ProcessHIDReport+0x2e6>
    1920:	4f c2       	rjmp	.+1182   	; 0x1dc0 <USB_ProcessHIDReport+0x784>
    1922:	1c c0       	rjmp	.+56     	; 0x195c <USB_ProcessHIDReport+0x320>
    1924:	80 3b       	cpi	r24, 0xB0	; 176
    1926:	91 05       	cpc	r25, r1
    1928:	c9 f0       	breq	.+50     	; 0x195c <USB_ProcessHIDReport+0x320>
    192a:	81 3b       	cpi	r24, 0xB1	; 177
    192c:	91 05       	cpc	r25, r1
    192e:	4c f4       	brge	.+18     	; 0x1942 <USB_ProcessHIDReport+0x306>
    1930:	80 3a       	cpi	r24, 0xA0	; 160
    1932:	91 05       	cpc	r25, r1
    1934:	09 f4       	brne	.+2      	; 0x1938 <USB_ProcessHIDReport+0x2fc>
    1936:	12 c1       	rjmp	.+548    	; 0x1b5c <USB_ProcessHIDReport+0x520>
    1938:	84 3a       	cpi	r24, 0xA4	; 164
    193a:	91 05       	cpc	r25, r1
    193c:	09 f0       	breq	.+2      	; 0x1940 <USB_ProcessHIDReport+0x304>
    193e:	40 c2       	rjmp	.+1152   	; 0x1dc0 <USB_ProcessHIDReport+0x784>
    1940:	2a c0       	rjmp	.+84     	; 0x1996 <USB_ProcessHIDReport+0x35a>
    1942:	84 3b       	cpi	r24, 0xB4	; 180
    1944:	91 05       	cpc	r25, r1
    1946:	09 f4       	brne	.+2      	; 0x194a <USB_ProcessHIDReport+0x30e>
    1948:	3e c0       	rjmp	.+124    	; 0x19c6 <USB_ProcessHIDReport+0x38a>
    194a:	80 3c       	cpi	r24, 0xC0	; 192
    194c:	91 05       	cpc	r25, r1
    194e:	09 f0       	breq	.+2      	; 0x1952 <USB_ProcessHIDReport+0x316>
    1950:	37 c2       	rjmp	.+1134   	; 0x1dc0 <USB_ProcessHIDReport+0x784>
    1952:	63 c1       	rjmp	.+710    	; 0x1c1a <USB_ProcessHIDReport+0x5de>
    1954:	f5 01       	movw	r30, r10
    1956:	27 01       	movw	r4, r14
    1958:	38 01       	movw	r6, r16
    195a:	33 c2       	rjmp	.+1126   	; 0x1dc2 <USB_ProcessHIDReport+0x786>
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
    195c:	cb 57       	subi	r28, 0x7B	; 123
    195e:	df 4f       	sbci	r29, 0xFF	; 255
    1960:	c8 82       	st	Y, r12
    1962:	c5 58       	subi	r28, 0x85	; 133
    1964:	d0 40       	sbci	r29, 0x00	; 0
    1966:	ca 57       	subi	r28, 0x7A	; 122
    1968:	df 4f       	sbci	r29, 0xFF	; 255
    196a:	d8 82       	st	Y, r13
    196c:	c6 58       	subi	r28, 0x86	; 134
    196e:	d0 40       	sbci	r29, 0x00	; 0
    1970:	ec 96       	adiw	r28, 0x3c	; 60
    1972:	1f ae       	std	Y+63, r1	; 0x3f
    1974:	ec 97       	sbiw	r28, 0x3c	; 60
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
					}

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));
    1976:	4c 7f       	andi	r20, 0xFC	; 252
    1978:	c9 57       	subi	r28, 0x79	; 121
    197a:	df 4f       	sbci	r29, 0xFF	; 255
    197c:	48 83       	st	Y, r20
    197e:	c7 58       	subi	r28, 0x87	; 135
    1980:	d0 40       	sbci	r29, 0x00	; 0
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
    1982:	97 01       	movw	r18, r14
    1984:	21 70       	andi	r18, 0x01	; 1
    1986:	30 70       	andi	r19, 0x00	; 0
    1988:	c8 57       	subi	r28, 0x78	; 120
    198a:	df 4f       	sbci	r29, 0xFF	; 255
    198c:	39 83       	std	Y+1, r19	; 0x01
    198e:	28 83       	st	Y, r18
    1990:	c8 58       	subi	r28, 0x88	; 136
    1992:	d0 40       	sbci	r29, 0x00	; 0
    1994:	0d c2       	rjmp	.+1050   	; 0x1db0 <USB_ProcessHIDReport+0x774>
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
    1996:	c4 57       	subi	r28, 0x74	; 116
    1998:	df 4f       	sbci	r29, 0xFF	; 255
    199a:	48 81       	ld	r20, Y
    199c:	59 81       	ldd	r21, Y+1	; 0x01
    199e:	cc 58       	subi	r28, 0x8C	; 140
    19a0:	d0 40       	sbci	r29, 0x00	; 0
    19a2:	c4 16       	cp	r12, r20
    19a4:	d5 06       	cpc	r13, r21
    19a6:	11 f4       	brne	.+4      	; 0x19ac <USB_ProcessHIDReport+0x370>
    19a8:	81 e0       	ldi	r24, 0x01	; 1
    19aa:	32 c2       	rjmp	.+1124   	; 0x1e10 <USB_ProcessHIDReport+0x7d4>
				  return HID_PARSE_HIDStackOverflow;

				memcpy((CurrStateTable + 1),
    19ac:	d6 01       	movw	r26, r12
    19ae:	5c 96       	adiw	r26, 0x1c	; 28
    19b0:	f6 01       	movw	r30, r12
    19b2:	8a e2       	ldi	r24, 0x2A	; 42
    19b4:	01 90       	ld	r0, Z+
    19b6:	0d 92       	st	X+, r0
    19b8:	81 50       	subi	r24, 0x01	; 1
    19ba:	e1 f7       	brne	.-8      	; 0x19b4 <USB_ProcessHIDReport+0x378>
				       CurrStateTable,
				       sizeof(HID_ReportItem_t));

				CurrStateTable++;
    19bc:	8c e1       	ldi	r24, 0x1C	; 28
    19be:	90 e0       	ldi	r25, 0x00	; 0
    19c0:	c8 0e       	add	r12, r24
    19c2:	d9 1e       	adc	r13, r25
    19c4:	fd c1       	rjmp	.+1018   	; 0x1dc0 <USB_ProcessHIDReport+0x784>
				break;
			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
    19c6:	cc 56       	subi	r28, 0x6C	; 108
    19c8:	df 4f       	sbci	r29, 0xFF	; 255
    19ca:	a8 81       	ld	r26, Y
    19cc:	b9 81       	ldd	r27, Y+1	; 0x01
    19ce:	c4 59       	subi	r28, 0x94	; 148
    19d0:	d0 40       	sbci	r29, 0x00	; 0
    19d2:	ca 16       	cp	r12, r26
    19d4:	db 06       	cpc	r13, r27
    19d6:	11 f4       	brne	.+4      	; 0x19dc <USB_ProcessHIDReport+0x3a0>
    19d8:	82 e0       	ldi	r24, 0x02	; 2
    19da:	1a c2       	rjmp	.+1076   	; 0x1e10 <USB_ProcessHIDReport+0x7d4>
				  return HID_PARSE_HIDStackUnderflow;

				CurrStateTable--;
    19dc:	e4 ee       	ldi	r30, 0xE4	; 228
    19de:	ff ef       	ldi	r31, 0xFF	; 255
    19e0:	ce 0e       	add	r12, r30
    19e2:	df 1e       	adc	r13, r31
    19e4:	ed c1       	rjmp	.+986    	; 0x1dc0 <USB_ProcessHIDReport+0x784>
				break;
			case HID_RI_USAGE_PAGE(0):
				if ((HIDReportItem & HID_RI_DATA_SIZE_MASK) == HID_RI_DATA_BITS_32)
    19e6:	23 30       	cpi	r18, 0x03	; 3
    19e8:	31 05       	cpc	r19, r1
    19ea:	31 f4       	brne	.+12     	; 0x19f8 <USB_ProcessHIDReport+0x3bc>
				  CurrStateTable->Attributes.Usage.Page = (ReportItemData >> 16);
    19ec:	c8 01       	movw	r24, r16
    19ee:	aa 27       	eor	r26, r26
    19f0:	bb 27       	eor	r27, r27
    19f2:	f6 01       	movw	r30, r12
    19f4:	92 83       	std	Z+2, r25	; 0x02
    19f6:	81 83       	std	Z+1, r24	; 0x01
				
				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
    19f8:	d6 01       	movw	r26, r12
    19fa:	12 96       	adiw	r26, 0x02	; 2
    19fc:	fc 92       	st	X, r15
    19fe:	ee 92       	st	-X, r14
    1a00:	11 97       	sbiw	r26, 0x01	; 1
    1a02:	de c1       	rjmp	.+956    	; 0x1dc0 <USB_ProcessHIDReport+0x784>
				break;
			case HID_RI_LOGICAL_MINIMUM(0):
				CurrStateTable->Attributes.Logical.Minimum  = ReportItemData;
    1a04:	f6 01       	movw	r30, r12
    1a06:	e2 86       	std	Z+10, r14	; 0x0a
    1a08:	f3 86       	std	Z+11, r15	; 0x0b
    1a0a:	04 87       	std	Z+12, r16	; 0x0c
    1a0c:	15 87       	std	Z+13, r17	; 0x0d
    1a0e:	d8 c1       	rjmp	.+944    	; 0x1dc0 <USB_ProcessHIDReport+0x784>
				break;
			case HID_RI_LOGICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Logical.Maximum  = ReportItemData;
    1a10:	d6 01       	movw	r26, r12
    1a12:	1e 96       	adiw	r26, 0x0e	; 14
    1a14:	ed 92       	st	X+, r14
    1a16:	fd 92       	st	X+, r15
    1a18:	0d 93       	st	X+, r16
    1a1a:	1c 93       	st	X, r17
    1a1c:	51 97       	sbiw	r26, 0x11	; 17
    1a1e:	d0 c1       	rjmp	.+928    	; 0x1dc0 <USB_ProcessHIDReport+0x784>
				break;
			case HID_RI_PHYSICAL_MINIMUM(0):
				CurrStateTable->Attributes.Physical.Minimum = ReportItemData;
    1a20:	f6 01       	movw	r30, r12
    1a22:	e2 8a       	std	Z+18, r14	; 0x12
    1a24:	f3 8a       	std	Z+19, r15	; 0x13
    1a26:	04 8b       	std	Z+20, r16	; 0x14
    1a28:	15 8b       	std	Z+21, r17	; 0x15
    1a2a:	ca c1       	rjmp	.+916    	; 0x1dc0 <USB_ProcessHIDReport+0x784>
				break;
			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
    1a2c:	d6 01       	movw	r26, r12
    1a2e:	56 96       	adiw	r26, 0x16	; 22
    1a30:	ed 92       	st	X+, r14
    1a32:	fd 92       	st	X+, r15
    1a34:	0d 93       	st	X+, r16
    1a36:	1c 93       	st	X, r17
    1a38:	59 97       	sbiw	r26, 0x19	; 25
    1a3a:	c2 c1       	rjmp	.+900    	; 0x1dc0 <USB_ProcessHIDReport+0x784>
				break;
			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
    1a3c:	f6 01       	movw	r30, r12
    1a3e:	e1 86       	std	Z+9, r14	; 0x09
    1a40:	bf c1       	rjmp	.+894    	; 0x1dc0 <USB_ProcessHIDReport+0x784>
				break;
			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
    1a42:	d6 01       	movw	r26, r12
    1a44:	15 96       	adiw	r26, 0x05	; 5
    1a46:	ed 92       	st	X+, r14
    1a48:	fd 92       	st	X+, r15
    1a4a:	0d 93       	st	X+, r16
    1a4c:	1c 93       	st	X, r17
    1a4e:	18 97       	sbiw	r26, 0x08	; 8
    1a50:	b7 c1       	rjmp	.+878    	; 0x1dc0 <USB_ProcessHIDReport+0x784>
				break;
			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
    1a52:	f6 01       	movw	r30, r12
    1a54:	e0 82       	st	Z, r14
    1a56:	b4 c1       	rjmp	.+872    	; 0x1dc0 <USB_ProcessHIDReport+0x784>
				break;
			case HID_RI_REPORT_COUNT(0):
				CurrStateTable->ReportCount                 = ReportItemData;
    1a58:	d6 01       	movw	r26, r12
    1a5a:	5a 96       	adiw	r26, 0x1a	; 26
    1a5c:	ec 92       	st	X, r14
    1a5e:	b0 c1       	rjmp	.+864    	; 0x1dc0 <USB_ProcessHIDReport+0x784>
				break;
			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;
    1a60:	3e 2d       	mov	r19, r14
    1a62:	f6 01       	movw	r30, r12
    1a64:	e3 8e       	std	Z+27, r14	; 0x1b

				if (ParserData->UsingReportIDs)
    1a66:	c2 57       	subi	r28, 0x72	; 114
    1a68:	df 4f       	sbci	r29, 0xFF	; 255
    1a6a:	a8 81       	ld	r26, Y
    1a6c:	b9 81       	ldd	r27, Y+1	; 0x01
    1a6e:	ce 58       	subi	r28, 0x8E	; 142
    1a70:	d0 40       	sbci	r29, 0x00	; 0
    1a72:	8c 91       	ld	r24, X
    1a74:	88 23       	and	r24, r24
    1a76:	09 f4       	brne	.+2      	; 0x1a7a <USB_ProcessHIDReport+0x43e>
    1a78:	40 c0       	rjmp	.+128    	; 0x1afa <USB_ProcessHIDReport+0x4be>
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
    1a7a:	c0 57       	subi	r28, 0x70	; 112
    1a7c:	df 4f       	sbci	r29, 0xFF	; 255
    1a7e:	e8 81       	ld	r30, Y
    1a80:	f9 81       	ldd	r31, Y+1	; 0x01
    1a82:	c0 59       	subi	r28, 0x90	; 144
    1a84:	d0 40       	sbci	r29, 0x00	; 0
    1a86:	20 81       	ld	r18, Z
    1a88:	ce 56       	subi	r28, 0x6E	; 110
    1a8a:	df 4f       	sbci	r29, 0xFF	; 255
    1a8c:	88 81       	ld	r24, Y
    1a8e:	c2 59       	subi	r28, 0x92	; 146
    1a90:	d0 40       	sbci	r29, 0x00	; 0
    1a92:	cd 56       	subi	r28, 0x6D	; 109
    1a94:	df 4f       	sbci	r29, 0xFF	; 255
    1a96:	98 81       	ld	r25, Y
    1a98:	c3 59       	subi	r28, 0x93	; 147
    1a9a:	d0 40       	sbci	r29, 0x00	; 0
    1a9c:	dc 01       	movw	r26, r24
    1a9e:	e0 e0       	ldi	r30, 0x00	; 0
    1aa0:	10 c0       	rjmp	.+32     	; 0x1ac2 <USB_ProcessHIDReport+0x486>
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
    1aa2:	8c 91       	ld	r24, X
    1aa4:	17 96       	adiw	r26, 0x07	; 7
    1aa6:	83 17       	cp	r24, r19
    1aa8:	59 f4       	brne	.+22     	; 0x1ac0 <USB_ProcessHIDReport+0x484>
						{
							CurrReportIDInfo = &ParserData->ReportIDSizes[i];
    1aaa:	87 e0       	ldi	r24, 0x07	; 7
    1aac:	e8 9f       	mul	r30, r24
    1aae:	40 01       	movw	r8, r0
    1ab0:	11 24       	eor	r1, r1
    1ab2:	20 e9       	ldi	r18, 0x90	; 144
    1ab4:	33 e0       	ldi	r19, 0x03	; 3
    1ab6:	82 0e       	add	r8, r18
    1ab8:	93 1e       	adc	r9, r19
    1aba:	82 0c       	add	r8, r2
    1abc:	93 1c       	adc	r9, r3
    1abe:	1d c0       	rjmp	.+58     	; 0x1afa <USB_ProcessHIDReport+0x4be>

				if (ParserData->UsingReportIDs)
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
    1ac0:	ef 5f       	subi	r30, 0xFF	; 255
    1ac2:	e2 17       	cp	r30, r18
    1ac4:	70 f3       	brcs	.-36     	; 0x1aa2 <USB_ProcessHIDReport+0x466>
						}
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
    1ac6:	2a 30       	cpi	r18, 0x0A	; 10
    1ac8:	11 f4       	brne	.+4      	; 0x1ace <USB_ProcessHIDReport+0x492>
    1aca:	87 e0       	ldi	r24, 0x07	; 7
    1acc:	a1 c1       	rjmp	.+834    	; 0x1e10 <USB_ProcessHIDReport+0x7d4>
						  return HID_PARSE_InsufficientReportIDItems;

						CurrReportIDInfo = &ParserData->ReportIDSizes[ParserData->TotalDeviceReports++];
    1ace:	87 e0       	ldi	r24, 0x07	; 7
    1ad0:	28 9f       	mul	r18, r24
    1ad2:	40 01       	movw	r8, r0
    1ad4:	11 24       	eor	r1, r1
    1ad6:	40 e9       	ldi	r20, 0x90	; 144
    1ad8:	53 e0       	ldi	r21, 0x03	; 3
    1ada:	84 0e       	add	r8, r20
    1adc:	95 1e       	adc	r9, r21
    1ade:	82 0c       	add	r8, r2
    1ae0:	93 1c       	adc	r9, r3
    1ae2:	2f 5f       	subi	r18, 0xFF	; 255
    1ae4:	c0 57       	subi	r28, 0x70	; 112
    1ae6:	df 4f       	sbci	r29, 0xFF	; 255
    1ae8:	a8 81       	ld	r26, Y
    1aea:	b9 81       	ldd	r27, Y+1	; 0x01
    1aec:	c0 59       	subi	r28, 0x90	; 144
    1aee:	d0 40       	sbci	r29, 0x00	; 0
    1af0:	2c 93       	st	X, r18
						memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
    1af2:	f4 01       	movw	r30, r8
    1af4:	11 92       	st	Z+, r1
    1af6:	8a 95       	dec	r24
    1af8:	e9 f7       	brne	.-6      	; 0x1af4 <USB_ProcessHIDReport+0x4b8>
					}
				}

				ParserData->UsingReportIDs = true;
    1afa:	e1 e0       	ldi	r30, 0x01	; 1
    1afc:	c2 57       	subi	r28, 0x72	; 114
    1afe:	df 4f       	sbci	r29, 0xFF	; 255
    1b00:	a8 81       	ld	r26, Y
    1b02:	b9 81       	ldd	r27, Y+1	; 0x01
    1b04:	ce 58       	subi	r28, 0x8E	; 142
    1b06:	d0 40       	sbci	r29, 0x00	; 0
    1b08:	ec 93       	st	X, r30

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
    1b0a:	d6 01       	movw	r26, r12
    1b0c:	5b 96       	adiw	r26, 0x1b	; 27
    1b0e:	8c 91       	ld	r24, X
    1b10:	f4 01       	movw	r30, r8
    1b12:	80 83       	st	Z, r24
    1b14:	55 c1       	rjmp	.+682    	; 0x1dc0 <USB_ProcessHIDReport+0x784>
				break;
			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
    1b16:	ed 96       	adiw	r28, 0x3d	; 61
    1b18:	ff ad       	ldd	r31, Y+63	; 0x3f
    1b1a:	ed 97       	sbiw	r28, 0x3d	; 61
    1b1c:	f8 30       	cpi	r31, 0x08	; 8
    1b1e:	11 f4       	brne	.+4      	; 0x1b24 <USB_ProcessHIDReport+0x4e8>
    1b20:	86 e0       	ldi	r24, 0x06	; 6
    1b22:	76 c1       	rjmp	.+748    	; 0x1e10 <USB_ProcessHIDReport+0x7d4>
				  return HID_PARSE_UsageListOverflow;

				UsageList[UsageListSize++] = ReportItemData;
    1b24:	ed 96       	adiw	r28, 0x3d	; 61
    1b26:	2f ad       	ldd	r18, Y+63	; 0x3f
    1b28:	ed 97       	sbiw	r28, 0x3d	; 61
    1b2a:	e2 2f       	mov	r30, r18
    1b2c:	f0 e0       	ldi	r31, 0x00	; 0
    1b2e:	ee 0f       	add	r30, r30
    1b30:	ff 1f       	adc	r31, r31
    1b32:	41 e0       	ldi	r20, 0x01	; 1
    1b34:	50 e0       	ldi	r21, 0x00	; 0
    1b36:	4c 0f       	add	r20, r28
    1b38:	5d 1f       	adc	r21, r29
    1b3a:	e4 0f       	add	r30, r20
    1b3c:	f5 1f       	adc	r31, r21
    1b3e:	f1 82       	std	Z+1, r15	; 0x01
    1b40:	e0 82       	st	Z, r14
    1b42:	2f 5f       	subi	r18, 0xFF	; 255
    1b44:	ed 96       	adiw	r28, 0x3d	; 61
    1b46:	2f af       	std	Y+63, r18	; 0x3f
    1b48:	ed 97       	sbiw	r28, 0x3d	; 61
    1b4a:	3a c1       	rjmp	.+628    	; 0x1dc0 <USB_ProcessHIDReport+0x784>
				break;
    1b4c:	f5 01       	movw	r30, r10
    1b4e:	eb 96       	adiw	r28, 0x3b	; 59
    1b50:	ec ae       	std	Y+60, r14	; 0x3c
    1b52:	fd ae       	std	Y+61, r15	; 0x3d
    1b54:	0e af       	std	Y+62, r16	; 0x3e
    1b56:	1f af       	std	Y+63, r17	; 0x3f
    1b58:	eb 97       	sbiw	r28, 0x3b	; 59
    1b5a:	33 c1       	rjmp	.+614    	; 0x1dc2 <USB_ProcessHIDReport+0x786>
				break;
			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;
			case HID_RI_COLLECTION(0):
				if (CurrCollectionPath == NULL)
    1b5c:	a1 14       	cp	r10, r1
    1b5e:	b1 04       	cpc	r11, r1
    1b60:	29 f4       	brne	.+10     	; 0x1b6c <USB_ProcessHIDReport+0x530>
    1b62:	e7 96       	adiw	r28, 0x37	; 55
    1b64:	ee ad       	ldd	r30, Y+62	; 0x3e
    1b66:	ff ad       	ldd	r31, Y+63	; 0x3f
    1b68:	e7 97       	sbiw	r28, 0x37	; 55
    1b6a:	15 c0       	rjmp	.+42     	; 0x1b96 <USB_ProcessHIDReport+0x55a>
    1b6c:	e5 96       	adiw	r28, 0x35	; 53
    1b6e:	ee ad       	ldd	r30, Y+62	; 0x3e
    1b70:	ff ad       	ldd	r31, Y+63	; 0x3f
    1b72:	e5 97       	sbiw	r28, 0x35	; 53
    1b74:	0a c0       	rjmp	.+20     	; 0x1b8a <USB_ProcessHIDReport+0x54e>

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
    1b76:	ef 96       	adiw	r28, 0x3f	; 63
    1b78:	8e ad       	ldd	r24, Y+62	; 0x3e
    1b7a:	9f ad       	ldd	r25, Y+63	; 0x3f
    1b7c:	ef 97       	sbiw	r28, 0x3f	; 63
    1b7e:	e8 17       	cp	r30, r24
    1b80:	f9 07       	cpc	r31, r25
    1b82:	11 f4       	brne	.+4      	; 0x1b88 <USB_ProcessHIDReport+0x54c>
    1b84:	85 e0       	ldi	r24, 0x05	; 5
    1b86:	44 c1       	rjmp	.+648    	; 0x1e10 <USB_ProcessHIDReport+0x7d4>
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
    1b88:	37 96       	adiw	r30, 0x07	; 7
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
    1b8a:	85 81       	ldd	r24, Z+5	; 0x05
    1b8c:	96 81       	ldd	r25, Z+6	; 0x06
    1b8e:	89 2b       	or	r24, r25
    1b90:	91 f7       	brne	.-28     	; 0x1b76 <USB_ProcessHIDReport+0x53a>
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
					}

					CurrCollectionPath->Parent = ParentCollectionPath;
    1b92:	b6 82       	std	Z+6, r11	; 0x06
    1b94:	a5 82       	std	Z+5, r10	; 0x05
				}

				CurrCollectionPath->Type       = ReportItemData;
    1b96:	e0 82       	st	Z, r14
				CurrCollectionPath->Usage.Page = CurrStateTable->Attributes.Usage.Page;
    1b98:	d6 01       	movw	r26, r12
    1b9a:	11 96       	adiw	r26, 0x01	; 1
    1b9c:	8d 91       	ld	r24, X+
    1b9e:	9c 91       	ld	r25, X
    1ba0:	12 97       	sbiw	r26, 0x02	; 2
    1ba2:	92 83       	std	Z+2, r25	; 0x02
    1ba4:	81 83       	std	Z+1, r24	; 0x01

				if (UsageListSize)
    1ba6:	ed 96       	adiw	r28, 0x3d	; 61
    1ba8:	bf ad       	ldd	r27, Y+63	; 0x3f
    1baa:	ed 97       	sbiw	r28, 0x3d	; 61
    1bac:	bb 23       	and	r27, r27
    1bae:	09 f1       	breq	.+66     	; 0x1bf2 <USB_ProcessHIDReport+0x5b6>
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];
    1bb0:	89 81       	ldd	r24, Y+1	; 0x01
    1bb2:	9a 81       	ldd	r25, Y+2	; 0x02
    1bb4:	94 83       	std	Z+4, r25	; 0x04
    1bb6:	83 83       	std	Z+3, r24	; 0x03
    1bb8:	de 01       	movw	r26, r28
    1bba:	11 96       	adiw	r26, 0x01	; 1

					for (uint8_t i = 0; i < UsageListSize; i++)
    1bbc:	ed 96       	adiw	r28, 0x3d	; 61
    1bbe:	4f ad       	ldd	r20, Y+63	; 0x3f
    1bc0:	ed 97       	sbiw	r28, 0x3d	; 61
    1bc2:	24 2f       	mov	r18, r20
    1bc4:	30 e0       	ldi	r19, 0x00	; 0
    1bc6:	22 0f       	add	r18, r18
    1bc8:	33 1f       	adc	r19, r19
    1bca:	2a 0f       	add	r18, r26
    1bcc:	3b 1f       	adc	r19, r27
    1bce:	06 c0       	rjmp	.+12     	; 0x1bdc <USB_ProcessHIDReport+0x5a0>
					  UsageList[i] = UsageList[i + 1];
    1bd0:	12 96       	adiw	r26, 0x02	; 2
    1bd2:	8d 91       	ld	r24, X+
    1bd4:	9c 91       	ld	r25, X
    1bd6:	13 97       	sbiw	r26, 0x03	; 3
    1bd8:	8d 93       	st	X+, r24
    1bda:	9d 93       	st	X+, r25

				if (UsageListSize)
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];

					for (uint8_t i = 0; i < UsageListSize; i++)
    1bdc:	a2 17       	cp	r26, r18
    1bde:	b3 07       	cpc	r27, r19
    1be0:	b9 f7       	brne	.-18     	; 0x1bd0 <USB_ProcessHIDReport+0x594>
					  UsageList[i] = UsageList[i + 1];

					UsageListSize--;
    1be2:	ed 96       	adiw	r28, 0x3d	; 61
    1be4:	9f ad       	ldd	r25, Y+63	; 0x3f
    1be6:	ed 97       	sbiw	r28, 0x3d	; 61
    1be8:	91 50       	subi	r25, 0x01	; 1
    1bea:	ed 96       	adiw	r28, 0x3d	; 61
    1bec:	9f af       	std	Y+63, r25	; 0x3f
    1bee:	ed 97       	sbiw	r28, 0x3d	; 61
    1bf0:	e8 c0       	rjmp	.+464    	; 0x1dc2 <USB_ProcessHIDReport+0x786>
				}
				else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
    1bf2:	eb 96       	adiw	r28, 0x3b	; 59
    1bf4:	2c ad       	ldd	r18, Y+60	; 0x3c
    1bf6:	3d ad       	ldd	r19, Y+61	; 0x3d
    1bf8:	4e ad       	ldd	r20, Y+62	; 0x3e
    1bfa:	5f ad       	ldd	r21, Y+63	; 0x3f
    1bfc:	eb 97       	sbiw	r28, 0x3b	; 59
    1bfe:	24 15       	cp	r18, r4
    1c00:	35 05       	cpc	r19, r5
    1c02:	46 05       	cpc	r20, r6
    1c04:	57 05       	cpc	r21, r7
    1c06:	08 f4       	brcc	.+2      	; 0x1c0a <USB_ProcessHIDReport+0x5ce>
    1c08:	dc c0       	rjmp	.+440    	; 0x1dc2 <USB_ProcessHIDReport+0x786>
				{
					CurrCollectionPath->Usage.Usage = UsageMinMax.Minimum++;
    1c0a:	54 82       	std	Z+4, r5	; 0x04
    1c0c:	43 82       	std	Z+3, r4	; 0x03
    1c0e:	08 94       	sec
    1c10:	41 1c       	adc	r4, r1
    1c12:	51 1c       	adc	r5, r1
    1c14:	61 1c       	adc	r6, r1
    1c16:	71 1c       	adc	r7, r1
    1c18:	d4 c0       	rjmp	.+424    	; 0x1dc2 <USB_ProcessHIDReport+0x786>
				}

				break;
			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
    1c1a:	a1 14       	cp	r10, r1
    1c1c:	b1 04       	cpc	r11, r1
    1c1e:	11 f4       	brne	.+4      	; 0x1c24 <USB_ProcessHIDReport+0x5e8>
    1c20:	84 e0       	ldi	r24, 0x04	; 4
    1c22:	f6 c0       	rjmp	.+492    	; 0x1e10 <USB_ProcessHIDReport+0x7d4>
				  return HID_PARSE_UnexpectedEndCollection;

				CurrCollectionPath = CurrCollectionPath->Parent;
    1c24:	d5 01       	movw	r26, r10
    1c26:	15 96       	adiw	r26, 0x05	; 5
    1c28:	ed 91       	ld	r30, X+
    1c2a:	fc 91       	ld	r31, X
    1c2c:	16 97       	sbiw	r26, 0x06	; 6
    1c2e:	c9 c0       	rjmp	.+402    	; 0x1dc2 <USB_ProcessHIDReport+0x786>
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
    1c30:	de 01       	movw	r26, r28
    1c32:	59 96       	adiw	r26, 0x19	; 25
    1c34:	cb 57       	subi	r28, 0x7B	; 123
    1c36:	df 4f       	sbci	r29, 0xFF	; 255
    1c38:	88 81       	ld	r24, Y
    1c3a:	c5 58       	subi	r28, 0x85	; 133
    1c3c:	d0 40       	sbci	r29, 0x00	; 0
    1c3e:	ca 57       	subi	r28, 0x7A	; 122
    1c40:	df 4f       	sbci	r29, 0xFF	; 255
    1c42:	98 81       	ld	r25, Y
    1c44:	c6 58       	subi	r28, 0x86	; 134
    1c46:	d0 40       	sbci	r29, 0x00	; 0
    1c48:	9c 01       	movw	r18, r24
    1c4a:	f9 01       	movw	r30, r18
    1c4c:	8a e1       	ldi	r24, 0x1A	; 26
    1c4e:	01 90       	ld	r0, Z+
    1c50:	0d 92       	st	X+, r0
    1c52:	81 50       	subi	r24, 0x01	; 1
    1c54:	e1 f7       	brne	.-8      	; 0x1c4e <USB_ProcessHIDReport+0x612>
					       &CurrStateTable->Attributes,
					       sizeof(HID_ReportItem_Attributes_t));

					NewReportItem.ItemFlags      = ReportItemData;
    1c56:	fd 8a       	std	Y+21, r15	; 0x15
    1c58:	ec 8a       	std	Y+20, r14	; 0x14
					NewReportItem.CollectionPath = CurrCollectionPath;
    1c5a:	b8 8e       	std	Y+24, r11	; 0x18
    1c5c:	af 8a       	std	Y+23, r10	; 0x17
					NewReportItem.ReportID       = CurrStateTable->ReportID;
    1c5e:	f6 01       	movw	r30, r12
    1c60:	83 8d       	ldd	r24, Z+27	; 0x1b
    1c62:	8e 8b       	std	Y+22, r24	; 0x16

					if (UsageListSize)
    1c64:	ed 96       	adiw	r28, 0x3d	; 61
    1c66:	ff ad       	ldd	r31, Y+63	; 0x3f
    1c68:	ed 97       	sbiw	r28, 0x3d	; 61
    1c6a:	ff 23       	and	r31, r31
    1c6c:	f9 f0       	breq	.+62     	; 0x1cac <USB_ProcessHIDReport+0x670>
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
    1c6e:	49 81       	ldd	r20, Y+1	; 0x01
    1c70:	5a 81       	ldd	r21, Y+2	; 0x02
    1c72:	fe 01       	movw	r30, r28
    1c74:	31 96       	adiw	r30, 0x01	; 1

						for (uint8_t i = 0; i < UsageListSize; i++)
    1c76:	ed 96       	adiw	r28, 0x3d	; 61
    1c78:	8f ad       	ldd	r24, Y+63	; 0x3f
    1c7a:	ed 97       	sbiw	r28, 0x3d	; 61
    1c7c:	28 2f       	mov	r18, r24
    1c7e:	30 e0       	ldi	r19, 0x00	; 0
    1c80:	22 0f       	add	r18, r18
    1c82:	33 1f       	adc	r19, r19
    1c84:	2e 0f       	add	r18, r30
    1c86:	3f 1f       	adc	r19, r31
    1c88:	04 c0       	rjmp	.+8      	; 0x1c92 <USB_ProcessHIDReport+0x656>
						  UsageList[i] = UsageList[i + 1];
    1c8a:	82 81       	ldd	r24, Z+2	; 0x02
    1c8c:	93 81       	ldd	r25, Z+3	; 0x03
    1c8e:	81 93       	st	Z+, r24
    1c90:	91 93       	st	Z+, r25

					if (UsageListSize)
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];

						for (uint8_t i = 0; i < UsageListSize; i++)
    1c92:	e2 17       	cp	r30, r18
    1c94:	f3 07       	cpc	r31, r19
    1c96:	c9 f7       	brne	.-14     	; 0x1c8a <USB_ProcessHIDReport+0x64e>
					NewReportItem.CollectionPath = CurrCollectionPath;
					NewReportItem.ReportID       = CurrStateTable->ReportID;

					if (UsageListSize)
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
    1c98:	5d 8f       	std	Y+29, r21	; 0x1d
    1c9a:	4c 8f       	std	Y+28, r20	; 0x1c

						for (uint8_t i = 0; i < UsageListSize; i++)
						  UsageList[i] = UsageList[i + 1];

						UsageListSize--;
    1c9c:	ed 96       	adiw	r28, 0x3d	; 61
    1c9e:	bf ad       	ldd	r27, Y+63	; 0x3f
    1ca0:	ed 97       	sbiw	r28, 0x3d	; 61
    1ca2:	b1 50       	subi	r27, 0x01	; 1
    1ca4:	ed 96       	adiw	r28, 0x3d	; 61
    1ca6:	bf af       	std	Y+63, r27	; 0x3f
    1ca8:	ed 97       	sbiw	r28, 0x3d	; 61
    1caa:	12 c0       	rjmp	.+36     	; 0x1cd0 <USB_ProcessHIDReport+0x694>
					}
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
    1cac:	eb 96       	adiw	r28, 0x3b	; 59
    1cae:	2c ad       	ldd	r18, Y+60	; 0x3c
    1cb0:	3d ad       	ldd	r19, Y+61	; 0x3d
    1cb2:	4e ad       	ldd	r20, Y+62	; 0x3e
    1cb4:	5f ad       	ldd	r21, Y+63	; 0x3f
    1cb6:	eb 97       	sbiw	r28, 0x3b	; 59
    1cb8:	24 15       	cp	r18, r4
    1cba:	35 05       	cpc	r19, r5
    1cbc:	46 05       	cpc	r20, r6
    1cbe:	57 05       	cpc	r21, r7
    1cc0:	38 f0       	brcs	.+14     	; 0x1cd0 <USB_ProcessHIDReport+0x694>
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
    1cc2:	5d 8e       	std	Y+29, r5	; 0x1d
    1cc4:	4c 8e       	std	Y+28, r4	; 0x1c
    1cc6:	08 94       	sec
    1cc8:	41 1c       	adc	r4, r1
    1cca:	51 1c       	adc	r5, r1
    1ccc:	61 1c       	adc	r6, r1
    1cce:	71 1c       	adc	r7, r1
					}

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));

					if (ItemTypeTag == HID_RI_INPUT(0))
    1cd0:	c9 57       	subi	r28, 0x79	; 121
    1cd2:	df 4f       	sbci	r29, 0xFF	; 255
    1cd4:	38 81       	ld	r19, Y
    1cd6:	c7 58       	subi	r28, 0x87	; 135
    1cd8:	d0 40       	sbci	r29, 0x00	; 0
    1cda:	30 38       	cpi	r19, 0x80	; 128
    1cdc:	11 f4       	brne	.+4      	; 0x1ce2 <USB_ProcessHIDReport+0x6a6>
					  NewReportItem.ItemType = HID_REPORT_ITEM_In;
    1cde:	1b 8a       	std	Y+19, r1	; 0x13
    1ce0:	0c c0       	rjmp	.+24     	; 0x1cfa <USB_ProcessHIDReport+0x6be>
					else if (ItemTypeTag == HID_RI_OUTPUT(0))
    1ce2:	c9 57       	subi	r28, 0x79	; 121
    1ce4:	df 4f       	sbci	r29, 0xFF	; 255
    1ce6:	48 81       	ld	r20, Y
    1ce8:	c7 58       	subi	r28, 0x87	; 135
    1cea:	d0 40       	sbci	r29, 0x00	; 0
    1cec:	40 39       	cpi	r20, 0x90	; 144
    1cee:	19 f4       	brne	.+6      	; 0x1cf6 <USB_ProcessHIDReport+0x6ba>
					  NewReportItem.ItemType = HID_REPORT_ITEM_Out;
    1cf0:	51 e0       	ldi	r21, 0x01	; 1
    1cf2:	5b 8b       	std	Y+19, r21	; 0x13
    1cf4:	02 c0       	rjmp	.+4      	; 0x1cfa <USB_ProcessHIDReport+0x6be>
					else
					  NewReportItem.ItemType = HID_REPORT_ITEM_Feature;
    1cf6:	82 e0       	ldi	r24, 0x02	; 2
    1cf8:	8b 8b       	std	Y+19, r24	; 0x13

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];
    1cfa:	eb 89       	ldd	r30, Y+19	; 0x13
    1cfc:	f0 e0       	ldi	r31, 0x00	; 0
    1cfe:	ee 0f       	add	r30, r30
    1d00:	ff 1f       	adc	r31, r31
    1d02:	e8 0d       	add	r30, r8
    1d04:	f9 1d       	adc	r31, r9
    1d06:	81 81       	ldd	r24, Z+1	; 0x01
    1d08:	92 81       	ldd	r25, Z+2	; 0x02
    1d0a:	9a 8b       	std	Y+18, r25	; 0x12
    1d0c:	89 8b       	std	Y+17, r24	; 0x11

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;
    1d0e:	d6 01       	movw	r26, r12
    1d10:	2c 91       	ld	r18, X
    1d12:	81 81       	ldd	r24, Z+1	; 0x01
    1d14:	92 81       	ldd	r25, Z+2	; 0x02
    1d16:	82 0f       	add	r24, r18
    1d18:	91 1d       	adc	r25, r1
    1d1a:	92 83       	std	Z+2, r25	; 0x02
    1d1c:	81 83       	std	Z+1, r24	; 0x01

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
    1d1e:	eb 89       	ldd	r30, Y+19	; 0x13
    1d20:	f0 e0       	ldi	r31, 0x00	; 0
    1d22:	ee 0f       	add	r30, r30
    1d24:	ff 1f       	adc	r31, r31
    1d26:	e8 0d       	add	r30, r8
    1d28:	f9 1d       	adc	r31, r9
    1d2a:	c6 57       	subi	r28, 0x76	; 118
    1d2c:	df 4f       	sbci	r29, 0xFF	; 255
    1d2e:	a8 81       	ld	r26, Y
    1d30:	b9 81       	ldd	r27, Y+1	; 0x01
    1d32:	ca 58       	subi	r28, 0x8A	; 138
    1d34:	d0 40       	sbci	r29, 0x00	; 0
    1d36:	2d 91       	ld	r18, X+
    1d38:	3c 91       	ld	r19, X
    1d3a:	81 81       	ldd	r24, Z+1	; 0x01
    1d3c:	92 81       	ldd	r25, Z+2	; 0x02
    1d3e:	82 17       	cp	r24, r18
    1d40:	93 07       	cpc	r25, r19
    1d42:	08 f4       	brcc	.+2      	; 0x1d46 <USB_ProcessHIDReport+0x70a>
    1d44:	c9 01       	movw	r24, r18
    1d46:	c6 57       	subi	r28, 0x76	; 118
    1d48:	df 4f       	sbci	r29, 0xFF	; 255
    1d4a:	e8 81       	ld	r30, Y
    1d4c:	f9 81       	ldd	r31, Y+1	; 0x01
    1d4e:	ca 58       	subi	r28, 0x8A	; 138
    1d50:	d0 40       	sbci	r29, 0x00	; 0
    1d52:	91 83       	std	Z+1, r25	; 0x01
    1d54:	80 83       	st	Z, r24

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
    1d56:	d1 01       	movw	r26, r2
    1d58:	8c 91       	ld	r24, X
    1d5a:	84 31       	cpi	r24, 0x14	; 20
    1d5c:	11 f4       	brne	.+4      	; 0x1d62 <USB_ProcessHIDReport+0x726>
    1d5e:	83 e0       	ldi	r24, 0x03	; 3
    1d60:	57 c0       	rjmp	.+174    	; 0x1e10 <USB_ProcessHIDReport+0x7d4>
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
    1d62:	ba e2       	ldi	r27, 0x2A	; 42
    1d64:	8b 9f       	mul	r24, r27
    1d66:	f0 01       	movw	r30, r0
    1d68:	11 24       	eor	r1, r1
    1d6a:	31 96       	adiw	r30, 0x01	; 1
    1d6c:	e2 0d       	add	r30, r2
    1d6e:	f3 1d       	adc	r31, r3
    1d70:	de 01       	movw	r26, r28
    1d72:	51 96       	adiw	r26, 0x11	; 17
    1d74:	8a e2       	ldi	r24, 0x2A	; 42
    1d76:	0d 90       	ld	r0, X+
    1d78:	01 92       	st	Z+, r0
    1d7a:	81 50       	subi	r24, 0x01	; 1
    1d7c:	e1 f7       	brne	.-8      	; 0x1d76 <USB_ProcessHIDReport+0x73a>
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
    1d7e:	c8 57       	subi	r28, 0x78	; 120
    1d80:	df 4f       	sbci	r29, 0xFF	; 255
    1d82:	e8 81       	ld	r30, Y
    1d84:	f9 81       	ldd	r31, Y+1	; 0x01
    1d86:	c8 58       	subi	r28, 0x88	; 136
    1d88:	d0 40       	sbci	r29, 0x00	; 0
    1d8a:	ef 2b       	or	r30, r31
    1d8c:	51 f4       	brne	.+20     	; 0x1da2 <USB_ProcessHIDReport+0x766>
    1d8e:	ce 01       	movw	r24, r28
    1d90:	41 96       	adiw	r24, 0x11	; 17
    1d92:	0e 94 6f 04 	call	0x8de	; 0x8de <CALLBACK_HIDParser_FilterHIDReportItem>
    1d96:	88 23       	and	r24, r24
    1d98:	21 f0       	breq	.+8      	; 0x1da2 <USB_ProcessHIDReport+0x766>
					  ParserData->TotalReportItems++;
    1d9a:	d1 01       	movw	r26, r2
    1d9c:	8c 91       	ld	r24, X
    1d9e:	8f 5f       	subi	r24, 0xFF	; 255
    1da0:	8c 93       	st	X, r24
				CurrCollectionPath = CurrCollectionPath->Parent;
				break;
			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
    1da2:	ec 96       	adiw	r28, 0x3c	; 60
    1da4:	bf ad       	ldd	r27, Y+63	; 0x3f
    1da6:	ec 97       	sbiw	r28, 0x3c	; 60
    1da8:	bf 5f       	subi	r27, 0xFF	; 255
    1daa:	ec 96       	adiw	r28, 0x3c	; 60
    1dac:	bf af       	std	Y+63, r27	; 0x3f
    1dae:	ec 97       	sbiw	r28, 0x3c	; 60
    1db0:	f6 01       	movw	r30, r12
    1db2:	82 8d       	ldd	r24, Z+26	; 0x1a
    1db4:	ec 96       	adiw	r28, 0x3c	; 60
    1db6:	ff ad       	ldd	r31, Y+63	; 0x3f
    1db8:	ec 97       	sbiw	r28, 0x3c	; 60
    1dba:	f8 17       	cp	r31, r24
    1dbc:	08 f4       	brcc	.+2      	; 0x1dc0 <USB_ProcessHIDReport+0x784>
    1dbe:	38 cf       	rjmp	.-400    	; 0x1c30 <USB_ProcessHIDReport+0x5f4>
    1dc0:	f5 01       	movw	r30, r10
				}

				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
    1dc2:	c1 58       	subi	r28, 0x81	; 129
    1dc4:	df 4f       	sbci	r29, 0xFF	; 255
    1dc6:	28 81       	ld	r18, Y
    1dc8:	39 81       	ldd	r19, Y+1	; 0x01
    1dca:	cf 57       	subi	r28, 0x7F	; 127
    1dcc:	d0 40       	sbci	r29, 0x00	; 0
    1dce:	2c 70       	andi	r18, 0x0C	; 12
    1dd0:	30 70       	andi	r19, 0x00	; 0
    1dd2:	23 2b       	or	r18, r19
    1dd4:	61 f4       	brne	.+24     	; 0x1dee <USB_ProcessHIDReport+0x7b2>
    1dd6:	ed 96       	adiw	r28, 0x3d	; 61
    1dd8:	1f ae       	std	Y+63, r1	; 0x3f
    1dda:	ed 97       	sbiw	r28, 0x3d	; 61
    1ddc:	eb 96       	adiw	r28, 0x3b	; 59
    1dde:	1c ae       	std	Y+60, r1	; 0x3c
    1de0:	1d ae       	std	Y+61, r1	; 0x3d
    1de2:	1e ae       	std	Y+62, r1	; 0x3e
    1de4:	1f ae       	std	Y+63, r1	; 0x3f
    1de6:	eb 97       	sbiw	r28, 0x3b	; 59
    1de8:	44 24       	eor	r4, r4
    1dea:	55 24       	eor	r5, r5
    1dec:	32 01       	movw	r6, r4
    1dee:	5f 01       	movw	r10, r30
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
    1df0:	cd 57       	subi	r28, 0x7D	; 125
    1df2:	df 4f       	sbci	r29, 0xFF	; 255
    1df4:	48 81       	ld	r20, Y
    1df6:	59 81       	ldd	r21, Y+1	; 0x01
    1df8:	c3 58       	subi	r28, 0x83	; 131
    1dfa:	d0 40       	sbci	r29, 0x00	; 0
    1dfc:	45 2b       	or	r20, r21
    1dfe:	09 f0       	breq	.+2      	; 0x1e02 <USB_ProcessHIDReport+0x7c6>
    1e00:	b9 cc       	rjmp	.-1678   	; 0x1774 <USB_ProcessHIDReport+0x138>
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
		}
	}

	if (!(ParserData->TotalReportItems))
    1e02:	d1 01       	movw	r26, r2
    1e04:	8c 91       	ld	r24, X
    1e06:	88 23       	and	r24, r24
    1e08:	11 f0       	breq	.+4      	; 0x1e0e <USB_ProcessHIDReport+0x7d2>
    1e0a:	80 e0       	ldi	r24, 0x00	; 0
    1e0c:	01 c0       	rjmp	.+2      	; 0x1e10 <USB_ProcessHIDReport+0x7d4>
    1e0e:	88 e0       	ldi	r24, 0x08	; 8
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
}
    1e10:	cb 56       	subi	r28, 0x6B	; 107
    1e12:	df 4f       	sbci	r29, 0xFF	; 255
    1e14:	0f b6       	in	r0, 0x3f	; 63
    1e16:	f8 94       	cli
    1e18:	de bf       	out	0x3e, r29	; 62
    1e1a:	0f be       	out	0x3f, r0	; 63
    1e1c:	cd bf       	out	0x3d, r28	; 61
    1e1e:	cf 91       	pop	r28
    1e20:	df 91       	pop	r29
    1e22:	1f 91       	pop	r17
    1e24:	0f 91       	pop	r16
    1e26:	ff 90       	pop	r15
    1e28:	ef 90       	pop	r14
    1e2a:	df 90       	pop	r13
    1e2c:	cf 90       	pop	r12
    1e2e:	bf 90       	pop	r11
    1e30:	af 90       	pop	r10
    1e32:	9f 90       	pop	r9
    1e34:	8f 90       	pop	r8
    1e36:	7f 90       	pop	r7
    1e38:	6f 90       	pop	r6
    1e3a:	5f 90       	pop	r5
    1e3c:	4f 90       	pop	r4
    1e3e:	3f 90       	pop	r3
    1e40:	2f 90       	pop	r2
    1e42:	08 95       	ret

00001e44 <Serial_putchar>:

FILE USARTSerialStream;

int Serial_putchar(char DataByte,
                   FILE *Stream)
{
    1e44:	98 2f       	mov	r25, r24
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
    1e46:	80 91 c8 00 	lds	r24, 0x00C8
    1e4a:	85 ff       	sbrs	r24, 5
    1e4c:	fc cf       	rjmp	.-8      	; 0x1e46 <Serial_putchar+0x2>
				UDR1 = DataByte;
    1e4e:	90 93 ce 00 	sts	0x00CE, r25
	(void)Stream;

	Serial_SendByte(DataByte);
	return 0;
}
    1e52:	80 e0       	ldi	r24, 0x00	; 0
    1e54:	90 e0       	ldi	r25, 0x00	; 0
    1e56:	08 95       	ret

00001e58 <Serial_getchar>:
			 *  \return Boolean \c true if a character has been received, \c false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    1e58:	80 91 c8 00 	lds	r24, 0x00C8

int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    1e5c:	87 fd       	sbrc	r24, 7
    1e5e:	03 c0       	rjmp	.+6      	; 0x1e66 <Serial_getchar+0xe>
    1e60:	2e ef       	ldi	r18, 0xFE	; 254
    1e62:	3f ef       	ldi	r19, 0xFF	; 255
    1e64:	0b c0       	rjmp	.+22     	; 0x1e7c <Serial_getchar+0x24>
    1e66:	80 91 c8 00 	lds	r24, 0x00C8
			 *  \return Next byte received from the USART, or a negative value if no byte has been received.
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
    1e6a:	87 fd       	sbrc	r24, 7
    1e6c:	03 c0       	rjmp	.+6      	; 0x1e74 <Serial_getchar+0x1c>
    1e6e:	2f ef       	ldi	r18, 0xFF	; 255
    1e70:	3f ef       	ldi	r19, 0xFF	; 255
    1e72:	04 c0       	rjmp	.+8      	; 0x1e7c <Serial_getchar+0x24>
				  return -1;
				
				return UDR1;
    1e74:	80 91 ce 00 	lds	r24, 0x00CE
    1e78:	28 2f       	mov	r18, r24
    1e7a:	30 e0       	ldi	r19, 0x00	; 0
	  return _FDEV_EOF;

	return Serial_ReceiveByte();
}
    1e7c:	c9 01       	movw	r24, r18
    1e7e:	08 95       	ret

00001e80 <printf_P>:
    1e80:	df 93       	push	r29
    1e82:	cf 93       	push	r28
    1e84:	cd b7       	in	r28, 0x3d	; 61
    1e86:	de b7       	in	r29, 0x3e	; 62
    1e88:	fe 01       	movw	r30, r28
    1e8a:	35 96       	adiw	r30, 0x05	; 5
    1e8c:	61 91       	ld	r22, Z+
    1e8e:	71 91       	ld	r23, Z+
    1e90:	a0 91 0b 05 	lds	r26, 0x050B
    1e94:	b0 91 0c 05 	lds	r27, 0x050C
    1e98:	13 96       	adiw	r26, 0x03	; 3
    1e9a:	8c 91       	ld	r24, X
    1e9c:	13 97       	sbiw	r26, 0x03	; 3
    1e9e:	88 60       	ori	r24, 0x08	; 8
    1ea0:	13 96       	adiw	r26, 0x03	; 3
    1ea2:	8c 93       	st	X, r24
    1ea4:	80 91 0b 05 	lds	r24, 0x050B
    1ea8:	90 91 0c 05 	lds	r25, 0x050C
    1eac:	af 01       	movw	r20, r30
    1eae:	3f d0       	rcall	.+126    	; 0x1f2e <vfprintf>
    1eb0:	e0 91 0b 05 	lds	r30, 0x050B
    1eb4:	f0 91 0c 05 	lds	r31, 0x050C
    1eb8:	23 81       	ldd	r18, Z+3	; 0x03
    1eba:	27 7f       	andi	r18, 0xF7	; 247
    1ebc:	23 83       	std	Z+3, r18	; 0x03
    1ebe:	cf 91       	pop	r28
    1ec0:	df 91       	pop	r29
    1ec2:	08 95       	ret

00001ec4 <puts_P>:
    1ec4:	0f 93       	push	r16
    1ec6:	1f 93       	push	r17
    1ec8:	cf 93       	push	r28
    1eca:	df 93       	push	r29
    1ecc:	ec 01       	movw	r28, r24
    1ece:	e0 91 0b 05 	lds	r30, 0x050B
    1ed2:	f0 91 0c 05 	lds	r31, 0x050C
    1ed6:	83 81       	ldd	r24, Z+3	; 0x03
    1ed8:	81 ff       	sbrs	r24, 1
    1eda:	21 c0       	rjmp	.+66     	; 0x1f1e <puts_P+0x5a>
    1edc:	00 e0       	ldi	r16, 0x00	; 0
    1ede:	10 e0       	ldi	r17, 0x00	; 0
    1ee0:	0e c0       	rjmp	.+28     	; 0x1efe <puts_P+0x3a>
    1ee2:	e0 91 0b 05 	lds	r30, 0x050B
    1ee6:	f0 91 0c 05 	lds	r31, 0x050C
    1eea:	20 85       	ldd	r18, Z+8	; 0x08
    1eec:	31 85       	ldd	r19, Z+9	; 0x09
    1eee:	bf 01       	movw	r22, r30
    1ef0:	f9 01       	movw	r30, r18
    1ef2:	09 95       	icall
    1ef4:	89 2b       	or	r24, r25
    1ef6:	11 f0       	breq	.+4      	; 0x1efc <puts_P+0x38>
    1ef8:	0f ef       	ldi	r16, 0xFF	; 255
    1efa:	1f ef       	ldi	r17, 0xFF	; 255
    1efc:	21 96       	adiw	r28, 0x01	; 1
    1efe:	fe 01       	movw	r30, r28
    1f00:	84 91       	lpm	r24, Z+
    1f02:	88 23       	and	r24, r24
    1f04:	71 f7       	brne	.-36     	; 0x1ee2 <puts_P+0x1e>
    1f06:	e0 91 0b 05 	lds	r30, 0x050B
    1f0a:	f0 91 0c 05 	lds	r31, 0x050C
    1f0e:	20 85       	ldd	r18, Z+8	; 0x08
    1f10:	31 85       	ldd	r19, Z+9	; 0x09
    1f12:	8a e0       	ldi	r24, 0x0A	; 10
    1f14:	bf 01       	movw	r22, r30
    1f16:	f9 01       	movw	r30, r18
    1f18:	09 95       	icall
    1f1a:	89 2b       	or	r24, r25
    1f1c:	11 f0       	breq	.+4      	; 0x1f22 <puts_P+0x5e>
    1f1e:	0f ef       	ldi	r16, 0xFF	; 255
    1f20:	1f ef       	ldi	r17, 0xFF	; 255
    1f22:	c8 01       	movw	r24, r16
    1f24:	df 91       	pop	r29
    1f26:	cf 91       	pop	r28
    1f28:	1f 91       	pop	r17
    1f2a:	0f 91       	pop	r16
    1f2c:	08 95       	ret

00001f2e <vfprintf>:
    1f2e:	2f 92       	push	r2
    1f30:	3f 92       	push	r3
    1f32:	4f 92       	push	r4
    1f34:	5f 92       	push	r5
    1f36:	6f 92       	push	r6
    1f38:	7f 92       	push	r7
    1f3a:	8f 92       	push	r8
    1f3c:	9f 92       	push	r9
    1f3e:	af 92       	push	r10
    1f40:	bf 92       	push	r11
    1f42:	cf 92       	push	r12
    1f44:	df 92       	push	r13
    1f46:	ef 92       	push	r14
    1f48:	ff 92       	push	r15
    1f4a:	0f 93       	push	r16
    1f4c:	1f 93       	push	r17
    1f4e:	df 93       	push	r29
    1f50:	cf 93       	push	r28
    1f52:	cd b7       	in	r28, 0x3d	; 61
    1f54:	de b7       	in	r29, 0x3e	; 62
    1f56:	2b 97       	sbiw	r28, 0x0b	; 11
    1f58:	0f b6       	in	r0, 0x3f	; 63
    1f5a:	f8 94       	cli
    1f5c:	de bf       	out	0x3e, r29	; 62
    1f5e:	0f be       	out	0x3f, r0	; 63
    1f60:	cd bf       	out	0x3d, r28	; 61
    1f62:	3c 01       	movw	r6, r24
    1f64:	2b 01       	movw	r4, r22
    1f66:	5a 01       	movw	r10, r20
    1f68:	fc 01       	movw	r30, r24
    1f6a:	17 82       	std	Z+7, r1	; 0x07
    1f6c:	16 82       	std	Z+6, r1	; 0x06
    1f6e:	83 81       	ldd	r24, Z+3	; 0x03
    1f70:	81 fd       	sbrc	r24, 1
    1f72:	03 c0       	rjmp	.+6      	; 0x1f7a <vfprintf+0x4c>
    1f74:	6f ef       	ldi	r22, 0xFF	; 255
    1f76:	7f ef       	ldi	r23, 0xFF	; 255
    1f78:	b9 c1       	rjmp	.+882    	; 0x22ec <__stack+0x1ed>
    1f7a:	9a e0       	ldi	r25, 0x0A	; 10
    1f7c:	89 2e       	mov	r8, r25
    1f7e:	1e 01       	movw	r2, r28
    1f80:	08 94       	sec
    1f82:	21 1c       	adc	r2, r1
    1f84:	31 1c       	adc	r3, r1
    1f86:	f3 01       	movw	r30, r6
    1f88:	23 81       	ldd	r18, Z+3	; 0x03
    1f8a:	f2 01       	movw	r30, r4
    1f8c:	23 fd       	sbrc	r18, 3
    1f8e:	85 91       	lpm	r24, Z+
    1f90:	23 ff       	sbrs	r18, 3
    1f92:	81 91       	ld	r24, Z+
    1f94:	2f 01       	movw	r4, r30
    1f96:	88 23       	and	r24, r24
    1f98:	09 f4       	brne	.+2      	; 0x1f9c <vfprintf+0x6e>
    1f9a:	a5 c1       	rjmp	.+842    	; 0x22e6 <__stack+0x1e7>
    1f9c:	85 32       	cpi	r24, 0x25	; 37
    1f9e:	39 f4       	brne	.+14     	; 0x1fae <vfprintf+0x80>
    1fa0:	23 fd       	sbrc	r18, 3
    1fa2:	85 91       	lpm	r24, Z+
    1fa4:	23 ff       	sbrs	r18, 3
    1fa6:	81 91       	ld	r24, Z+
    1fa8:	2f 01       	movw	r4, r30
    1faa:	85 32       	cpi	r24, 0x25	; 37
    1fac:	21 f4       	brne	.+8      	; 0x1fb6 <vfprintf+0x88>
    1fae:	90 e0       	ldi	r25, 0x00	; 0
    1fb0:	b3 01       	movw	r22, r6
    1fb2:	cc d1       	rcall	.+920    	; 0x234c <fputc>
    1fb4:	e8 cf       	rjmp	.-48     	; 0x1f86 <vfprintf+0x58>
    1fb6:	98 2f       	mov	r25, r24
    1fb8:	ff 24       	eor	r15, r15
    1fba:	ee 24       	eor	r14, r14
    1fbc:	99 24       	eor	r9, r9
    1fbe:	ff e1       	ldi	r31, 0x1F	; 31
    1fc0:	ff 15       	cp	r31, r15
    1fc2:	d0 f0       	brcs	.+52     	; 0x1ff8 <vfprintf+0xca>
    1fc4:	9b 32       	cpi	r25, 0x2B	; 43
    1fc6:	69 f0       	breq	.+26     	; 0x1fe2 <vfprintf+0xb4>
    1fc8:	9c 32       	cpi	r25, 0x2C	; 44
    1fca:	28 f4       	brcc	.+10     	; 0x1fd6 <vfprintf+0xa8>
    1fcc:	90 32       	cpi	r25, 0x20	; 32
    1fce:	59 f0       	breq	.+22     	; 0x1fe6 <vfprintf+0xb8>
    1fd0:	93 32       	cpi	r25, 0x23	; 35
    1fd2:	91 f4       	brne	.+36     	; 0x1ff8 <vfprintf+0xca>
    1fd4:	0e c0       	rjmp	.+28     	; 0x1ff2 <vfprintf+0xc4>
    1fd6:	9d 32       	cpi	r25, 0x2D	; 45
    1fd8:	49 f0       	breq	.+18     	; 0x1fec <vfprintf+0xbe>
    1fda:	90 33       	cpi	r25, 0x30	; 48
    1fdc:	69 f4       	brne	.+26     	; 0x1ff8 <vfprintf+0xca>
    1fde:	41 e0       	ldi	r20, 0x01	; 1
    1fe0:	24 c0       	rjmp	.+72     	; 0x202a <vfprintf+0xfc>
    1fe2:	52 e0       	ldi	r21, 0x02	; 2
    1fe4:	f5 2a       	or	r15, r21
    1fe6:	84 e0       	ldi	r24, 0x04	; 4
    1fe8:	f8 2a       	or	r15, r24
    1fea:	28 c0       	rjmp	.+80     	; 0x203c <vfprintf+0x10e>
    1fec:	98 e0       	ldi	r25, 0x08	; 8
    1fee:	f9 2a       	or	r15, r25
    1ff0:	25 c0       	rjmp	.+74     	; 0x203c <vfprintf+0x10e>
    1ff2:	e0 e1       	ldi	r30, 0x10	; 16
    1ff4:	fe 2a       	or	r15, r30
    1ff6:	22 c0       	rjmp	.+68     	; 0x203c <vfprintf+0x10e>
    1ff8:	f7 fc       	sbrc	r15, 7
    1ffa:	29 c0       	rjmp	.+82     	; 0x204e <vfprintf+0x120>
    1ffc:	89 2f       	mov	r24, r25
    1ffe:	80 53       	subi	r24, 0x30	; 48
    2000:	8a 30       	cpi	r24, 0x0A	; 10
    2002:	70 f4       	brcc	.+28     	; 0x2020 <vfprintf+0xf2>
    2004:	f6 fe       	sbrs	r15, 6
    2006:	05 c0       	rjmp	.+10     	; 0x2012 <vfprintf+0xe4>
    2008:	98 9c       	mul	r9, r8
    200a:	90 2c       	mov	r9, r0
    200c:	11 24       	eor	r1, r1
    200e:	98 0e       	add	r9, r24
    2010:	15 c0       	rjmp	.+42     	; 0x203c <vfprintf+0x10e>
    2012:	e8 9c       	mul	r14, r8
    2014:	e0 2c       	mov	r14, r0
    2016:	11 24       	eor	r1, r1
    2018:	e8 0e       	add	r14, r24
    201a:	f0 e2       	ldi	r31, 0x20	; 32
    201c:	ff 2a       	or	r15, r31
    201e:	0e c0       	rjmp	.+28     	; 0x203c <vfprintf+0x10e>
    2020:	9e 32       	cpi	r25, 0x2E	; 46
    2022:	29 f4       	brne	.+10     	; 0x202e <vfprintf+0x100>
    2024:	f6 fc       	sbrc	r15, 6
    2026:	5f c1       	rjmp	.+702    	; 0x22e6 <__stack+0x1e7>
    2028:	40 e4       	ldi	r20, 0x40	; 64
    202a:	f4 2a       	or	r15, r20
    202c:	07 c0       	rjmp	.+14     	; 0x203c <vfprintf+0x10e>
    202e:	9c 36       	cpi	r25, 0x6C	; 108
    2030:	19 f4       	brne	.+6      	; 0x2038 <vfprintf+0x10a>
    2032:	50 e8       	ldi	r21, 0x80	; 128
    2034:	f5 2a       	or	r15, r21
    2036:	02 c0       	rjmp	.+4      	; 0x203c <vfprintf+0x10e>
    2038:	98 36       	cpi	r25, 0x68	; 104
    203a:	49 f4       	brne	.+18     	; 0x204e <vfprintf+0x120>
    203c:	f2 01       	movw	r30, r4
    203e:	23 fd       	sbrc	r18, 3
    2040:	95 91       	lpm	r25, Z+
    2042:	23 ff       	sbrs	r18, 3
    2044:	91 91       	ld	r25, Z+
    2046:	2f 01       	movw	r4, r30
    2048:	99 23       	and	r25, r25
    204a:	09 f0       	breq	.+2      	; 0x204e <vfprintf+0x120>
    204c:	b8 cf       	rjmp	.-144    	; 0x1fbe <vfprintf+0x90>
    204e:	89 2f       	mov	r24, r25
    2050:	85 54       	subi	r24, 0x45	; 69
    2052:	83 30       	cpi	r24, 0x03	; 3
    2054:	18 f0       	brcs	.+6      	; 0x205c <vfprintf+0x12e>
    2056:	80 52       	subi	r24, 0x20	; 32
    2058:	83 30       	cpi	r24, 0x03	; 3
    205a:	38 f4       	brcc	.+14     	; 0x206a <vfprintf+0x13c>
    205c:	44 e0       	ldi	r20, 0x04	; 4
    205e:	50 e0       	ldi	r21, 0x00	; 0
    2060:	a4 0e       	add	r10, r20
    2062:	b5 1e       	adc	r11, r21
    2064:	5f e3       	ldi	r21, 0x3F	; 63
    2066:	59 83       	std	Y+1, r21	; 0x01
    2068:	0f c0       	rjmp	.+30     	; 0x2088 <vfprintf+0x15a>
    206a:	93 36       	cpi	r25, 0x63	; 99
    206c:	31 f0       	breq	.+12     	; 0x207a <vfprintf+0x14c>
    206e:	93 37       	cpi	r25, 0x73	; 115
    2070:	79 f0       	breq	.+30     	; 0x2090 <vfprintf+0x162>
    2072:	93 35       	cpi	r25, 0x53	; 83
    2074:	09 f0       	breq	.+2      	; 0x2078 <vfprintf+0x14a>
    2076:	52 c0       	rjmp	.+164    	; 0x211c <__stack+0x1d>
    2078:	1f c0       	rjmp	.+62     	; 0x20b8 <vfprintf+0x18a>
    207a:	f5 01       	movw	r30, r10
    207c:	80 81       	ld	r24, Z
    207e:	89 83       	std	Y+1, r24	; 0x01
    2080:	42 e0       	ldi	r20, 0x02	; 2
    2082:	50 e0       	ldi	r21, 0x00	; 0
    2084:	a4 0e       	add	r10, r20
    2086:	b5 1e       	adc	r11, r21
    2088:	61 01       	movw	r12, r2
    208a:	01 e0       	ldi	r16, 0x01	; 1
    208c:	10 e0       	ldi	r17, 0x00	; 0
    208e:	11 c0       	rjmp	.+34     	; 0x20b2 <vfprintf+0x184>
    2090:	f5 01       	movw	r30, r10
    2092:	c0 80       	ld	r12, Z
    2094:	d1 80       	ldd	r13, Z+1	; 0x01
    2096:	f6 fc       	sbrc	r15, 6
    2098:	03 c0       	rjmp	.+6      	; 0x20a0 <vfprintf+0x172>
    209a:	6f ef       	ldi	r22, 0xFF	; 255
    209c:	7f ef       	ldi	r23, 0xFF	; 255
    209e:	02 c0       	rjmp	.+4      	; 0x20a4 <vfprintf+0x176>
    20a0:	69 2d       	mov	r22, r9
    20a2:	70 e0       	ldi	r23, 0x00	; 0
    20a4:	42 e0       	ldi	r20, 0x02	; 2
    20a6:	50 e0       	ldi	r21, 0x00	; 0
    20a8:	a4 0e       	add	r10, r20
    20aa:	b5 1e       	adc	r11, r21
    20ac:	c6 01       	movw	r24, r12
    20ae:	43 d1       	rcall	.+646    	; 0x2336 <strnlen>
    20b0:	8c 01       	movw	r16, r24
    20b2:	5f e7       	ldi	r21, 0x7F	; 127
    20b4:	f5 22       	and	r15, r21
    20b6:	13 c0       	rjmp	.+38     	; 0x20de <vfprintf+0x1b0>
    20b8:	f5 01       	movw	r30, r10
    20ba:	c0 80       	ld	r12, Z
    20bc:	d1 80       	ldd	r13, Z+1	; 0x01
    20be:	f6 fc       	sbrc	r15, 6
    20c0:	03 c0       	rjmp	.+6      	; 0x20c8 <vfprintf+0x19a>
    20c2:	6f ef       	ldi	r22, 0xFF	; 255
    20c4:	7f ef       	ldi	r23, 0xFF	; 255
    20c6:	02 c0       	rjmp	.+4      	; 0x20cc <vfprintf+0x19e>
    20c8:	69 2d       	mov	r22, r9
    20ca:	70 e0       	ldi	r23, 0x00	; 0
    20cc:	42 e0       	ldi	r20, 0x02	; 2
    20ce:	50 e0       	ldi	r21, 0x00	; 0
    20d0:	a4 0e       	add	r10, r20
    20d2:	b5 1e       	adc	r11, r21
    20d4:	c6 01       	movw	r24, r12
    20d6:	24 d1       	rcall	.+584    	; 0x2320 <strnlen_P>
    20d8:	8c 01       	movw	r16, r24
    20da:	50 e8       	ldi	r21, 0x80	; 128
    20dc:	f5 2a       	or	r15, r21
    20de:	f3 fe       	sbrs	r15, 3
    20e0:	06 c0       	rjmp	.+12     	; 0x20ee <vfprintf+0x1c0>
    20e2:	18 c0       	rjmp	.+48     	; 0x2114 <__stack+0x15>
    20e4:	80 e2       	ldi	r24, 0x20	; 32
    20e6:	90 e0       	ldi	r25, 0x00	; 0
    20e8:	b3 01       	movw	r22, r6
    20ea:	30 d1       	rcall	.+608    	; 0x234c <fputc>
    20ec:	ea 94       	dec	r14
    20ee:	8e 2d       	mov	r24, r14
    20f0:	90 e0       	ldi	r25, 0x00	; 0
    20f2:	08 17       	cp	r16, r24
    20f4:	19 07       	cpc	r17, r25
    20f6:	b0 f3       	brcs	.-20     	; 0x20e4 <vfprintf+0x1b6>
    20f8:	0d c0       	rjmp	.+26     	; 0x2114 <__stack+0x15>
    20fa:	f6 01       	movw	r30, r12
    20fc:	f7 fc       	sbrc	r15, 7
    20fe:	85 91       	lpm	r24, Z+
    2100:	f7 fe       	sbrs	r15, 7
    2102:	81 91       	ld	r24, Z+
    2104:	6f 01       	movw	r12, r30
    2106:	90 e0       	ldi	r25, 0x00	; 0
    2108:	b3 01       	movw	r22, r6
    210a:	20 d1       	rcall	.+576    	; 0x234c <fputc>
    210c:	e1 10       	cpse	r14, r1
    210e:	ea 94       	dec	r14
    2110:	01 50       	subi	r16, 0x01	; 1
    2112:	10 40       	sbci	r17, 0x00	; 0
    2114:	01 15       	cp	r16, r1
    2116:	11 05       	cpc	r17, r1
    2118:	81 f7       	brne	.-32     	; 0x20fa <vfprintf+0x1cc>
    211a:	e2 c0       	rjmp	.+452    	; 0x22e0 <__stack+0x1e1>
    211c:	94 36       	cpi	r25, 0x64	; 100
    211e:	11 f0       	breq	.+4      	; 0x2124 <__stack+0x25>
    2120:	99 36       	cpi	r25, 0x69	; 105
    2122:	61 f5       	brne	.+88     	; 0x217c <__stack+0x7d>
    2124:	f7 fe       	sbrs	r15, 7
    2126:	08 c0       	rjmp	.+16     	; 0x2138 <__stack+0x39>
    2128:	f5 01       	movw	r30, r10
    212a:	20 81       	ld	r18, Z
    212c:	31 81       	ldd	r19, Z+1	; 0x01
    212e:	42 81       	ldd	r20, Z+2	; 0x02
    2130:	53 81       	ldd	r21, Z+3	; 0x03
    2132:	84 e0       	ldi	r24, 0x04	; 4
    2134:	90 e0       	ldi	r25, 0x00	; 0
    2136:	0a c0       	rjmp	.+20     	; 0x214c <__stack+0x4d>
    2138:	f5 01       	movw	r30, r10
    213a:	80 81       	ld	r24, Z
    213c:	91 81       	ldd	r25, Z+1	; 0x01
    213e:	9c 01       	movw	r18, r24
    2140:	44 27       	eor	r20, r20
    2142:	37 fd       	sbrc	r19, 7
    2144:	40 95       	com	r20
    2146:	54 2f       	mov	r21, r20
    2148:	82 e0       	ldi	r24, 0x02	; 2
    214a:	90 e0       	ldi	r25, 0x00	; 0
    214c:	a8 0e       	add	r10, r24
    214e:	b9 1e       	adc	r11, r25
    2150:	9f e6       	ldi	r25, 0x6F	; 111
    2152:	f9 22       	and	r15, r25
    2154:	57 ff       	sbrs	r21, 7
    2156:	09 c0       	rjmp	.+18     	; 0x216a <__stack+0x6b>
    2158:	50 95       	com	r21
    215a:	40 95       	com	r20
    215c:	30 95       	com	r19
    215e:	21 95       	neg	r18
    2160:	3f 4f       	sbci	r19, 0xFF	; 255
    2162:	4f 4f       	sbci	r20, 0xFF	; 255
    2164:	5f 4f       	sbci	r21, 0xFF	; 255
    2166:	e0 e8       	ldi	r30, 0x80	; 128
    2168:	fe 2a       	or	r15, r30
    216a:	ca 01       	movw	r24, r20
    216c:	b9 01       	movw	r22, r18
    216e:	a1 01       	movw	r20, r2
    2170:	2a e0       	ldi	r18, 0x0A	; 10
    2172:	30 e0       	ldi	r19, 0x00	; 0
    2174:	17 d1       	rcall	.+558    	; 0x23a4 <__ultoa_invert>
    2176:	d8 2e       	mov	r13, r24
    2178:	d2 18       	sub	r13, r2
    217a:	3f c0       	rjmp	.+126    	; 0x21fa <__stack+0xfb>
    217c:	95 37       	cpi	r25, 0x75	; 117
    217e:	29 f4       	brne	.+10     	; 0x218a <__stack+0x8b>
    2180:	1f 2d       	mov	r17, r15
    2182:	1f 7e       	andi	r17, 0xEF	; 239
    2184:	2a e0       	ldi	r18, 0x0A	; 10
    2186:	30 e0       	ldi	r19, 0x00	; 0
    2188:	1d c0       	rjmp	.+58     	; 0x21c4 <__stack+0xc5>
    218a:	1f 2d       	mov	r17, r15
    218c:	19 7f       	andi	r17, 0xF9	; 249
    218e:	9f 36       	cpi	r25, 0x6F	; 111
    2190:	61 f0       	breq	.+24     	; 0x21aa <__stack+0xab>
    2192:	90 37       	cpi	r25, 0x70	; 112
    2194:	20 f4       	brcc	.+8      	; 0x219e <__stack+0x9f>
    2196:	98 35       	cpi	r25, 0x58	; 88
    2198:	09 f0       	breq	.+2      	; 0x219c <__stack+0x9d>
    219a:	a5 c0       	rjmp	.+330    	; 0x22e6 <__stack+0x1e7>
    219c:	0f c0       	rjmp	.+30     	; 0x21bc <__stack+0xbd>
    219e:	90 37       	cpi	r25, 0x70	; 112
    21a0:	39 f0       	breq	.+14     	; 0x21b0 <__stack+0xb1>
    21a2:	98 37       	cpi	r25, 0x78	; 120
    21a4:	09 f0       	breq	.+2      	; 0x21a8 <__stack+0xa9>
    21a6:	9f c0       	rjmp	.+318    	; 0x22e6 <__stack+0x1e7>
    21a8:	04 c0       	rjmp	.+8      	; 0x21b2 <__stack+0xb3>
    21aa:	28 e0       	ldi	r18, 0x08	; 8
    21ac:	30 e0       	ldi	r19, 0x00	; 0
    21ae:	0a c0       	rjmp	.+20     	; 0x21c4 <__stack+0xc5>
    21b0:	10 61       	ori	r17, 0x10	; 16
    21b2:	14 fd       	sbrc	r17, 4
    21b4:	14 60       	ori	r17, 0x04	; 4
    21b6:	20 e1       	ldi	r18, 0x10	; 16
    21b8:	30 e0       	ldi	r19, 0x00	; 0
    21ba:	04 c0       	rjmp	.+8      	; 0x21c4 <__stack+0xc5>
    21bc:	14 fd       	sbrc	r17, 4
    21be:	16 60       	ori	r17, 0x06	; 6
    21c0:	20 e1       	ldi	r18, 0x10	; 16
    21c2:	32 e0       	ldi	r19, 0x02	; 2
    21c4:	17 ff       	sbrs	r17, 7
    21c6:	08 c0       	rjmp	.+16     	; 0x21d8 <__stack+0xd9>
    21c8:	f5 01       	movw	r30, r10
    21ca:	60 81       	ld	r22, Z
    21cc:	71 81       	ldd	r23, Z+1	; 0x01
    21ce:	82 81       	ldd	r24, Z+2	; 0x02
    21d0:	93 81       	ldd	r25, Z+3	; 0x03
    21d2:	44 e0       	ldi	r20, 0x04	; 4
    21d4:	50 e0       	ldi	r21, 0x00	; 0
    21d6:	08 c0       	rjmp	.+16     	; 0x21e8 <__stack+0xe9>
    21d8:	f5 01       	movw	r30, r10
    21da:	80 81       	ld	r24, Z
    21dc:	91 81       	ldd	r25, Z+1	; 0x01
    21de:	bc 01       	movw	r22, r24
    21e0:	80 e0       	ldi	r24, 0x00	; 0
    21e2:	90 e0       	ldi	r25, 0x00	; 0
    21e4:	42 e0       	ldi	r20, 0x02	; 2
    21e6:	50 e0       	ldi	r21, 0x00	; 0
    21e8:	a4 0e       	add	r10, r20
    21ea:	b5 1e       	adc	r11, r21
    21ec:	a1 01       	movw	r20, r2
    21ee:	da d0       	rcall	.+436    	; 0x23a4 <__ultoa_invert>
    21f0:	d8 2e       	mov	r13, r24
    21f2:	d2 18       	sub	r13, r2
    21f4:	8f e7       	ldi	r24, 0x7F	; 127
    21f6:	f8 2e       	mov	r15, r24
    21f8:	f1 22       	and	r15, r17
    21fa:	f6 fe       	sbrs	r15, 6
    21fc:	0b c0       	rjmp	.+22     	; 0x2214 <__stack+0x115>
    21fe:	5e ef       	ldi	r21, 0xFE	; 254
    2200:	f5 22       	and	r15, r21
    2202:	d9 14       	cp	r13, r9
    2204:	38 f4       	brcc	.+14     	; 0x2214 <__stack+0x115>
    2206:	f4 fe       	sbrs	r15, 4
    2208:	07 c0       	rjmp	.+14     	; 0x2218 <__stack+0x119>
    220a:	f2 fc       	sbrc	r15, 2
    220c:	05 c0       	rjmp	.+10     	; 0x2218 <__stack+0x119>
    220e:	8f ee       	ldi	r24, 0xEF	; 239
    2210:	f8 22       	and	r15, r24
    2212:	02 c0       	rjmp	.+4      	; 0x2218 <__stack+0x119>
    2214:	1d 2d       	mov	r17, r13
    2216:	01 c0       	rjmp	.+2      	; 0x221a <__stack+0x11b>
    2218:	19 2d       	mov	r17, r9
    221a:	f4 fe       	sbrs	r15, 4
    221c:	0d c0       	rjmp	.+26     	; 0x2238 <__stack+0x139>
    221e:	fe 01       	movw	r30, r28
    2220:	ed 0d       	add	r30, r13
    2222:	f1 1d       	adc	r31, r1
    2224:	80 81       	ld	r24, Z
    2226:	80 33       	cpi	r24, 0x30	; 48
    2228:	19 f4       	brne	.+6      	; 0x2230 <__stack+0x131>
    222a:	99 ee       	ldi	r25, 0xE9	; 233
    222c:	f9 22       	and	r15, r25
    222e:	08 c0       	rjmp	.+16     	; 0x2240 <__stack+0x141>
    2230:	1f 5f       	subi	r17, 0xFF	; 255
    2232:	f2 fe       	sbrs	r15, 2
    2234:	05 c0       	rjmp	.+10     	; 0x2240 <__stack+0x141>
    2236:	03 c0       	rjmp	.+6      	; 0x223e <__stack+0x13f>
    2238:	8f 2d       	mov	r24, r15
    223a:	86 78       	andi	r24, 0x86	; 134
    223c:	09 f0       	breq	.+2      	; 0x2240 <__stack+0x141>
    223e:	1f 5f       	subi	r17, 0xFF	; 255
    2240:	0f 2d       	mov	r16, r15
    2242:	f3 fc       	sbrc	r15, 3
    2244:	13 c0       	rjmp	.+38     	; 0x226c <__stack+0x16d>
    2246:	f0 fe       	sbrs	r15, 0
    2248:	0e c0       	rjmp	.+28     	; 0x2266 <__stack+0x167>
    224a:	1e 15       	cp	r17, r14
    224c:	10 f0       	brcs	.+4      	; 0x2252 <__stack+0x153>
    224e:	9d 2c       	mov	r9, r13
    2250:	0a c0       	rjmp	.+20     	; 0x2266 <__stack+0x167>
    2252:	9d 2c       	mov	r9, r13
    2254:	9e 0c       	add	r9, r14
    2256:	91 1a       	sub	r9, r17
    2258:	1e 2d       	mov	r17, r14
    225a:	05 c0       	rjmp	.+10     	; 0x2266 <__stack+0x167>
    225c:	80 e2       	ldi	r24, 0x20	; 32
    225e:	90 e0       	ldi	r25, 0x00	; 0
    2260:	b3 01       	movw	r22, r6
    2262:	74 d0       	rcall	.+232    	; 0x234c <fputc>
    2264:	1f 5f       	subi	r17, 0xFF	; 255
    2266:	1e 15       	cp	r17, r14
    2268:	c8 f3       	brcs	.-14     	; 0x225c <__stack+0x15d>
    226a:	04 c0       	rjmp	.+8      	; 0x2274 <__stack+0x175>
    226c:	1e 15       	cp	r17, r14
    226e:	10 f4       	brcc	.+4      	; 0x2274 <__stack+0x175>
    2270:	e1 1a       	sub	r14, r17
    2272:	01 c0       	rjmp	.+2      	; 0x2276 <__stack+0x177>
    2274:	ee 24       	eor	r14, r14
    2276:	04 ff       	sbrs	r16, 4
    2278:	0e c0       	rjmp	.+28     	; 0x2296 <__stack+0x197>
    227a:	80 e3       	ldi	r24, 0x30	; 48
    227c:	90 e0       	ldi	r25, 0x00	; 0
    227e:	b3 01       	movw	r22, r6
    2280:	65 d0       	rcall	.+202    	; 0x234c <fputc>
    2282:	02 ff       	sbrs	r16, 2
    2284:	1b c0       	rjmp	.+54     	; 0x22bc <__stack+0x1bd>
    2286:	01 fd       	sbrc	r16, 1
    2288:	03 c0       	rjmp	.+6      	; 0x2290 <__stack+0x191>
    228a:	88 e7       	ldi	r24, 0x78	; 120
    228c:	90 e0       	ldi	r25, 0x00	; 0
    228e:	0e c0       	rjmp	.+28     	; 0x22ac <__stack+0x1ad>
    2290:	88 e5       	ldi	r24, 0x58	; 88
    2292:	90 e0       	ldi	r25, 0x00	; 0
    2294:	0b c0       	rjmp	.+22     	; 0x22ac <__stack+0x1ad>
    2296:	80 2f       	mov	r24, r16
    2298:	86 78       	andi	r24, 0x86	; 134
    229a:	81 f0       	breq	.+32     	; 0x22bc <__stack+0x1bd>
    229c:	01 ff       	sbrs	r16, 1
    229e:	02 c0       	rjmp	.+4      	; 0x22a4 <__stack+0x1a5>
    22a0:	8b e2       	ldi	r24, 0x2B	; 43
    22a2:	01 c0       	rjmp	.+2      	; 0x22a6 <__stack+0x1a7>
    22a4:	80 e2       	ldi	r24, 0x20	; 32
    22a6:	f7 fc       	sbrc	r15, 7
    22a8:	8d e2       	ldi	r24, 0x2D	; 45
    22aa:	90 e0       	ldi	r25, 0x00	; 0
    22ac:	b3 01       	movw	r22, r6
    22ae:	4e d0       	rcall	.+156    	; 0x234c <fputc>
    22b0:	05 c0       	rjmp	.+10     	; 0x22bc <__stack+0x1bd>
    22b2:	80 e3       	ldi	r24, 0x30	; 48
    22b4:	90 e0       	ldi	r25, 0x00	; 0
    22b6:	b3 01       	movw	r22, r6
    22b8:	49 d0       	rcall	.+146    	; 0x234c <fputc>
    22ba:	9a 94       	dec	r9
    22bc:	d9 14       	cp	r13, r9
    22be:	c8 f3       	brcs	.-14     	; 0x22b2 <__stack+0x1b3>
    22c0:	da 94       	dec	r13
    22c2:	f1 01       	movw	r30, r2
    22c4:	ed 0d       	add	r30, r13
    22c6:	f1 1d       	adc	r31, r1
    22c8:	80 81       	ld	r24, Z
    22ca:	90 e0       	ldi	r25, 0x00	; 0
    22cc:	b3 01       	movw	r22, r6
    22ce:	3e d0       	rcall	.+124    	; 0x234c <fputc>
    22d0:	dd 20       	and	r13, r13
    22d2:	b1 f7       	brne	.-20     	; 0x22c0 <__stack+0x1c1>
    22d4:	05 c0       	rjmp	.+10     	; 0x22e0 <__stack+0x1e1>
    22d6:	80 e2       	ldi	r24, 0x20	; 32
    22d8:	90 e0       	ldi	r25, 0x00	; 0
    22da:	b3 01       	movw	r22, r6
    22dc:	37 d0       	rcall	.+110    	; 0x234c <fputc>
    22de:	ea 94       	dec	r14
    22e0:	ee 20       	and	r14, r14
    22e2:	c9 f7       	brne	.-14     	; 0x22d6 <__stack+0x1d7>
    22e4:	50 ce       	rjmp	.-864    	; 0x1f86 <vfprintf+0x58>
    22e6:	f3 01       	movw	r30, r6
    22e8:	66 81       	ldd	r22, Z+6	; 0x06
    22ea:	77 81       	ldd	r23, Z+7	; 0x07
    22ec:	cb 01       	movw	r24, r22
    22ee:	2b 96       	adiw	r28, 0x0b	; 11
    22f0:	0f b6       	in	r0, 0x3f	; 63
    22f2:	f8 94       	cli
    22f4:	de bf       	out	0x3e, r29	; 62
    22f6:	0f be       	out	0x3f, r0	; 63
    22f8:	cd bf       	out	0x3d, r28	; 61
    22fa:	cf 91       	pop	r28
    22fc:	df 91       	pop	r29
    22fe:	1f 91       	pop	r17
    2300:	0f 91       	pop	r16
    2302:	ff 90       	pop	r15
    2304:	ef 90       	pop	r14
    2306:	df 90       	pop	r13
    2308:	cf 90       	pop	r12
    230a:	bf 90       	pop	r11
    230c:	af 90       	pop	r10
    230e:	9f 90       	pop	r9
    2310:	8f 90       	pop	r8
    2312:	7f 90       	pop	r7
    2314:	6f 90       	pop	r6
    2316:	5f 90       	pop	r5
    2318:	4f 90       	pop	r4
    231a:	3f 90       	pop	r3
    231c:	2f 90       	pop	r2
    231e:	08 95       	ret

00002320 <strnlen_P>:
    2320:	fc 01       	movw	r30, r24
    2322:	05 90       	lpm	r0, Z+
    2324:	61 50       	subi	r22, 0x01	; 1
    2326:	70 40       	sbci	r23, 0x00	; 0
    2328:	01 10       	cpse	r0, r1
    232a:	d8 f7       	brcc	.-10     	; 0x2322 <strnlen_P+0x2>
    232c:	80 95       	com	r24
    232e:	90 95       	com	r25
    2330:	8e 0f       	add	r24, r30
    2332:	9f 1f       	adc	r25, r31
    2334:	08 95       	ret

00002336 <strnlen>:
    2336:	fc 01       	movw	r30, r24
    2338:	61 50       	subi	r22, 0x01	; 1
    233a:	70 40       	sbci	r23, 0x00	; 0
    233c:	01 90       	ld	r0, Z+
    233e:	01 10       	cpse	r0, r1
    2340:	d8 f7       	brcc	.-10     	; 0x2338 <strnlen+0x2>
    2342:	80 95       	com	r24
    2344:	90 95       	com	r25
    2346:	8e 0f       	add	r24, r30
    2348:	9f 1f       	adc	r25, r31
    234a:	08 95       	ret

0000234c <fputc>:
    234c:	0f 93       	push	r16
    234e:	1f 93       	push	r17
    2350:	cf 93       	push	r28
    2352:	df 93       	push	r29
    2354:	8c 01       	movw	r16, r24
    2356:	eb 01       	movw	r28, r22
    2358:	8b 81       	ldd	r24, Y+3	; 0x03
    235a:	81 ff       	sbrs	r24, 1
    235c:	1b c0       	rjmp	.+54     	; 0x2394 <fputc+0x48>
    235e:	82 ff       	sbrs	r24, 2
    2360:	0d c0       	rjmp	.+26     	; 0x237c <fputc+0x30>
    2362:	2e 81       	ldd	r18, Y+6	; 0x06
    2364:	3f 81       	ldd	r19, Y+7	; 0x07
    2366:	8c 81       	ldd	r24, Y+4	; 0x04
    2368:	9d 81       	ldd	r25, Y+5	; 0x05
    236a:	28 17       	cp	r18, r24
    236c:	39 07       	cpc	r19, r25
    236e:	64 f4       	brge	.+24     	; 0x2388 <fputc+0x3c>
    2370:	e8 81       	ld	r30, Y
    2372:	f9 81       	ldd	r31, Y+1	; 0x01
    2374:	01 93       	st	Z+, r16
    2376:	f9 83       	std	Y+1, r31	; 0x01
    2378:	e8 83       	st	Y, r30
    237a:	06 c0       	rjmp	.+12     	; 0x2388 <fputc+0x3c>
    237c:	e8 85       	ldd	r30, Y+8	; 0x08
    237e:	f9 85       	ldd	r31, Y+9	; 0x09
    2380:	80 2f       	mov	r24, r16
    2382:	09 95       	icall
    2384:	89 2b       	or	r24, r25
    2386:	31 f4       	brne	.+12     	; 0x2394 <fputc+0x48>
    2388:	8e 81       	ldd	r24, Y+6	; 0x06
    238a:	9f 81       	ldd	r25, Y+7	; 0x07
    238c:	01 96       	adiw	r24, 0x01	; 1
    238e:	9f 83       	std	Y+7, r25	; 0x07
    2390:	8e 83       	std	Y+6, r24	; 0x06
    2392:	02 c0       	rjmp	.+4      	; 0x2398 <fputc+0x4c>
    2394:	0f ef       	ldi	r16, 0xFF	; 255
    2396:	1f ef       	ldi	r17, 0xFF	; 255
    2398:	c8 01       	movw	r24, r16
    239a:	df 91       	pop	r29
    239c:	cf 91       	pop	r28
    239e:	1f 91       	pop	r17
    23a0:	0f 91       	pop	r16
    23a2:	08 95       	ret

000023a4 <__ultoa_invert>:
    23a4:	fa 01       	movw	r30, r20
    23a6:	aa 27       	eor	r26, r26
    23a8:	28 30       	cpi	r18, 0x08	; 8
    23aa:	51 f1       	breq	.+84     	; 0x2400 <__ultoa_invert+0x5c>
    23ac:	20 31       	cpi	r18, 0x10	; 16
    23ae:	81 f1       	breq	.+96     	; 0x2410 <__ultoa_invert+0x6c>
    23b0:	e8 94       	clt
    23b2:	6f 93       	push	r22
    23b4:	6e 7f       	andi	r22, 0xFE	; 254
    23b6:	6e 5f       	subi	r22, 0xFE	; 254
    23b8:	7f 4f       	sbci	r23, 0xFF	; 255
    23ba:	8f 4f       	sbci	r24, 0xFF	; 255
    23bc:	9f 4f       	sbci	r25, 0xFF	; 255
    23be:	af 4f       	sbci	r26, 0xFF	; 255
    23c0:	b1 e0       	ldi	r27, 0x01	; 1
    23c2:	3e d0       	rcall	.+124    	; 0x2440 <__ultoa_invert+0x9c>
    23c4:	b4 e0       	ldi	r27, 0x04	; 4
    23c6:	3c d0       	rcall	.+120    	; 0x2440 <__ultoa_invert+0x9c>
    23c8:	67 0f       	add	r22, r23
    23ca:	78 1f       	adc	r23, r24
    23cc:	89 1f       	adc	r24, r25
    23ce:	9a 1f       	adc	r25, r26
    23d0:	a1 1d       	adc	r26, r1
    23d2:	68 0f       	add	r22, r24
    23d4:	79 1f       	adc	r23, r25
    23d6:	8a 1f       	adc	r24, r26
    23d8:	91 1d       	adc	r25, r1
    23da:	a1 1d       	adc	r26, r1
    23dc:	6a 0f       	add	r22, r26
    23de:	71 1d       	adc	r23, r1
    23e0:	81 1d       	adc	r24, r1
    23e2:	91 1d       	adc	r25, r1
    23e4:	a1 1d       	adc	r26, r1
    23e6:	20 d0       	rcall	.+64     	; 0x2428 <__ultoa_invert+0x84>
    23e8:	09 f4       	brne	.+2      	; 0x23ec <__ultoa_invert+0x48>
    23ea:	68 94       	set
    23ec:	3f 91       	pop	r19
    23ee:	2a e0       	ldi	r18, 0x0A	; 10
    23f0:	26 9f       	mul	r18, r22
    23f2:	11 24       	eor	r1, r1
    23f4:	30 19       	sub	r19, r0
    23f6:	30 5d       	subi	r19, 0xD0	; 208
    23f8:	31 93       	st	Z+, r19
    23fa:	de f6       	brtc	.-74     	; 0x23b2 <__ultoa_invert+0xe>
    23fc:	cf 01       	movw	r24, r30
    23fe:	08 95       	ret
    2400:	46 2f       	mov	r20, r22
    2402:	47 70       	andi	r20, 0x07	; 7
    2404:	40 5d       	subi	r20, 0xD0	; 208
    2406:	41 93       	st	Z+, r20
    2408:	b3 e0       	ldi	r27, 0x03	; 3
    240a:	0f d0       	rcall	.+30     	; 0x242a <__ultoa_invert+0x86>
    240c:	c9 f7       	brne	.-14     	; 0x2400 <__ultoa_invert+0x5c>
    240e:	f6 cf       	rjmp	.-20     	; 0x23fc <__ultoa_invert+0x58>
    2410:	46 2f       	mov	r20, r22
    2412:	4f 70       	andi	r20, 0x0F	; 15
    2414:	40 5d       	subi	r20, 0xD0	; 208
    2416:	4a 33       	cpi	r20, 0x3A	; 58
    2418:	18 f0       	brcs	.+6      	; 0x2420 <__ultoa_invert+0x7c>
    241a:	49 5d       	subi	r20, 0xD9	; 217
    241c:	31 fd       	sbrc	r19, 1
    241e:	40 52       	subi	r20, 0x20	; 32
    2420:	41 93       	st	Z+, r20
    2422:	02 d0       	rcall	.+4      	; 0x2428 <__ultoa_invert+0x84>
    2424:	a9 f7       	brne	.-22     	; 0x2410 <__ultoa_invert+0x6c>
    2426:	ea cf       	rjmp	.-44     	; 0x23fc <__ultoa_invert+0x58>
    2428:	b4 e0       	ldi	r27, 0x04	; 4
    242a:	a6 95       	lsr	r26
    242c:	97 95       	ror	r25
    242e:	87 95       	ror	r24
    2430:	77 95       	ror	r23
    2432:	67 95       	ror	r22
    2434:	ba 95       	dec	r27
    2436:	c9 f7       	brne	.-14     	; 0x242a <__ultoa_invert+0x86>
    2438:	00 97       	sbiw	r24, 0x00	; 0
    243a:	61 05       	cpc	r22, r1
    243c:	71 05       	cpc	r23, r1
    243e:	08 95       	ret
    2440:	9b 01       	movw	r18, r22
    2442:	ac 01       	movw	r20, r24
    2444:	0a 2e       	mov	r0, r26
    2446:	06 94       	lsr	r0
    2448:	57 95       	ror	r21
    244a:	47 95       	ror	r20
    244c:	37 95       	ror	r19
    244e:	27 95       	ror	r18
    2450:	ba 95       	dec	r27
    2452:	c9 f7       	brne	.-14     	; 0x2446 <__ultoa_invert+0xa2>
    2454:	62 0f       	add	r22, r18
    2456:	73 1f       	adc	r23, r19
    2458:	84 1f       	adc	r24, r20
    245a:	95 1f       	adc	r25, r21
    245c:	a0 1d       	adc	r26, r0
    245e:	08 95       	ret

00002460 <_exit>:
    2460:	f8 94       	cli

00002462 <__stop_program>:
    2462:	ff cf       	rjmp	.-2      	; 0x2462 <__stop_program>
