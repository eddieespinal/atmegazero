
JoystickHostWithParser.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  00002418  000024ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002418  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003fd  00800112  00800112  000024be  2**0
                  ALLOC
  3 .debug_aranges 00000358  00000000  00000000  000024be  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000869  00000000  00000000  00002816  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000559b  00000000  00000000  0000307f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000180a  00000000  00000000  0000861a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000413f  00000000  00000000  00009e24  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000004f0  00000000  00000000  0000df64  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00002432  00000000  00000000  0000e454  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00002173  00000000  00000000  00010886  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000418  00000000  00000000  000129f9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
		Pipe_DisablePipe();
	}
}

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
       0:	68 c1       	rjmp	.+720    	; 0x2d2 <__ctors_end>
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
       2:	00 00       	nop
{
	USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, AfterType);

	if (*BytesRem)
	  USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, Type);
}
       4:	84 c1       	rjmp	.+776    	; 0x30e <__bad_interrupt>
	return USB_Host_SendControlRequest(NULL);
}

uint8_t USB_Host_SetInterfaceAltSetting(const uint8_t InterfaceIndex,
                                        const uint8_t AltSetting)
{
       6:	00 00       	nop
	return true;
}

void USB_SetHIDReportItemInfo(uint8_t* ReportData,
                              HID_ReportItem_t* const ReportItem)
{
       8:	82 c1       	rjmp	.+772    	; 0x30e <__bad_interrupt>

	return Serial_ReceiveByte();
}

int Serial_getchar_Blocking(FILE *Stream)
{
       a:	00 00       	nop
       c:	80 c1       	rjmp	.+768    	; 0x30e <__bad_interrupt>
       e:	00 00       	nop
      10:	7e c1       	rjmp	.+764    	; 0x30e <__bad_interrupt>
      12:	00 00       	nop
      14:	7c c1       	rjmp	.+760    	; 0x30e <__bad_interrupt>
      16:	00 00       	nop
      18:	7a c1       	rjmp	.+756    	; 0x30e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	78 c1       	rjmp	.+752    	; 0x30e <__bad_interrupt>
      1e:	00 00       	nop
      20:	76 c1       	rjmp	.+748    	; 0x30e <__bad_interrupt>
      22:	00 00       	nop
      24:	74 c1       	rjmp	.+744    	; 0x30e <__bad_interrupt>
      26:	00 00       	nop
      28:	8c c7       	rjmp	.+3864   	; 0xf42 <__vector_10>
      2a:	00 00       	nop
      2c:	70 c1       	rjmp	.+736    	; 0x30e <__bad_interrupt>
      2e:	00 00       	nop
      30:	6e c1       	rjmp	.+732    	; 0x30e <__bad_interrupt>
      32:	00 00       	nop
      34:	6c c1       	rjmp	.+728    	; 0x30e <__bad_interrupt>
      36:	00 00       	nop
      38:	6a c1       	rjmp	.+724    	; 0x30e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	68 c1       	rjmp	.+720    	; 0x30e <__bad_interrupt>
      3e:	00 00       	nop
      40:	66 c1       	rjmp	.+716    	; 0x30e <__bad_interrupt>
      42:	00 00       	nop
      44:	64 c1       	rjmp	.+712    	; 0x30e <__bad_interrupt>
      46:	00 00       	nop
      48:	62 c1       	rjmp	.+708    	; 0x30e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	60 c1       	rjmp	.+704    	; 0x30e <__bad_interrupt>
      4e:	00 00       	nop
      50:	5e c1       	rjmp	.+700    	; 0x30e <__bad_interrupt>
      52:	00 00       	nop
      54:	5c c1       	rjmp	.+696    	; 0x30e <__bad_interrupt>
      56:	00 00       	nop
      58:	5a c1       	rjmp	.+692    	; 0x30e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	58 c1       	rjmp	.+688    	; 0x30e <__bad_interrupt>
      5e:	00 00       	nop
      60:	56 c1       	rjmp	.+684    	; 0x30e <__bad_interrupt>
      62:	00 00       	nop
      64:	54 c1       	rjmp	.+680    	; 0x30e <__bad_interrupt>
      66:	00 00       	nop
      68:	52 c1       	rjmp	.+676    	; 0x30e <__bad_interrupt>
      6a:	00 00       	nop
      6c:	50 c1       	rjmp	.+672    	; 0x30e <__bad_interrupt>
      6e:	00 00       	nop
      70:	4e c1       	rjmp	.+668    	; 0x30e <__bad_interrupt>
      72:	00 00       	nop
      74:	4c c1       	rjmp	.+664    	; 0x30e <__bad_interrupt>
      76:	00 00       	nop
      78:	4a c1       	rjmp	.+660    	; 0x30e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	48 c1       	rjmp	.+656    	; 0x30e <__bad_interrupt>
      7e:	00 00       	nop
      80:	46 c1       	rjmp	.+652    	; 0x30e <__bad_interrupt>
      82:	00 00       	nop
      84:	44 c1       	rjmp	.+648    	; 0x30e <__bad_interrupt>
      86:	00 00       	nop
      88:	42 c1       	rjmp	.+644    	; 0x30e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	40 c1       	rjmp	.+640    	; 0x30e <__bad_interrupt>
      8e:	00 00       	nop
      90:	3e c1       	rjmp	.+636    	; 0x30e <__bad_interrupt>
      92:	00 00       	nop
      94:	3c c1       	rjmp	.+632    	; 0x30e <__bad_interrupt>
      96:	00 00       	nop

00000098 <__c.4592>:
      98:	1b 5b 33 31 6d 44 65 76 20 45 6e 75 6d 20 45 72     .[31mDev Enum Er
      a8:	72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     ror.. -- Error C
      b8:	6f 64 65 20 25 64 0d 0a 20 2d 2d 20 53 75 62 20     ode %d.. -- Sub 
      c8:	45 72 72 6f 72 20 43 6f 64 65 20 25 64 0d 0a 20     Error Code %d.. 
      d8:	2d 2d 20 49 6e 20 53 74 61 74 65 20 25 64 0d 0a     -- In State %d..
      e8:	1b 5b 33 37 6d 00                                   .[37m.

000000ee <__c.4584>:
      ee:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
      fe:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 
     10e:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

0000011d <__c.4573>:
     11d:	4a 6f 79 73 74 69 63 6b 20 45 6e 75 6d 65 72 61     Joystick Enumera
     12d:	74 65 64 2e 0d 0a 00                                ted....

00000134 <__c.4571>:
     134:	20 2d 2d 20 45 72 72 6f 72 20 43 6f 64 65 3a 20      -- Error Code: 
     144:	25 64 0d 0a 1b 5b 33 37 6d 00                       %d...[37m.

0000014e <__c.4569>:
     14e:	4e 6f 74 20 61 20 76 61 6c 69 64 20 4a 6f 79 73     Not a valid Joys
     15e:	74 69 63 6b 2e 1b 5b 33 37 6d 00                    tick..[37m.

00000169 <__c.4567>:
     169:	1b 5b 33 31 6d 52 65 70 6f 72 74 20 50 61 72 73     .[31mReport Pars
     179:	65 20 45 72 72 6f 72 2e 0d 0a 00                    e Error....

00000184 <__c.4565>:
     184:	50 72 6f 63 65 73 73 69 6e 67 20 48 49 44 20 52     Processing HID R
     194:	65 70 6f 72 74 20 28 53 69 7a 65 20 25 64 20 42     eport (Size %d B
     1a4:	79 74 65 73 29 2e 0d 0a 00                          ytes)....

000001ad <__c.4563>:
     1ad:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
     1bd:	6f 72 20 28 53 65 74 20 43 6f 6e 66 69 67 75 72     or (Set Configur
     1cd:	61 74 69 6f 6e 29 2e 0d 0a 20 2d 2d 20 45 72 72     ation)... -- Err
     1dd:	6f 72 20 43 6f 64 65 3a 20 25 64 0d 0a 1b 5b 33     or Code: %d...[3
     1ed:	37 6d 00                                            7m.

000001f0 <__c.4561>:
     1f0:	20 2d 2d 20 45 72 72 6f 72 20 43 6f 64 65 3a 20      -- Error Code: 
     200:	25 64 0d 0a 1b 5b 33 37 6d 00                       %d...[37m.

0000020a <__c.4559>:
     20a:	1b 5b 33 31 6d 49 6e 76 61 6c 69 64 20 44 65 76     .[31mInvalid Dev
     21a:	69 63 65 2e 0d 0a 00                                ice....

00000221 <__c.4557>:
     221:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
     231:	6f 72 20 28 47 65 74 20 43 6f 6e 66 69 67 75 72     or (Get Configur
     241:	61 74 69 6f 6e 29 2e 0d 0a 00                       ation)....

0000024b <__c.4554>:
     24b:	47 65 74 74 69 6e 67 20 43 6f 6e 66 69 67 20 44     Getting Config D
     25b:	61 74 61 2e 0d 0a 00                                ata....

00000262 <__c.4549>:
     262:	1b 5b 33 32 6d 44 65 76 69 63 65 20 55 6e 61 74     .[32mDevice Unat
     272:	74 61 63 68 65 64 2e 0d 0a 1b 5b 33 37 6d 00        tached....[37m.

00000281 <__c.4544>:
     281:	1b 5b 33 32 6d 44 65 76 69 63 65 20 41 74 74 61     .[32mDevice Atta
     291:	63 68 65 64 2e 0d 0a 1b 5b 33 37 6d 00              ched....[37m.

0000029e <__c.4530>:
     29e:	1b 5b 33 36 6d 4a 6f 79 73 74 69 63 6b 20 48 49     .[36mJoystick HI
     2ae:	44 20 50 61 72 73 65 72 20 48 6f 73 74 20 44 65     D Parser Host De
     2be:	6d 6f 20 72 75 6e 6e 69 6e 67 2e 0d 0a 1b 5b 33     mo running....[3
     2ce:	37 6d 00 00                                         7m..

000002d2 <__ctors_end>:
     2d2:	11 24       	eor	r1, r1
     2d4:	1f be       	out	0x3f, r1	; 63
     2d6:	cf ef       	ldi	r28, 0xFF	; 255
     2d8:	d0 e2       	ldi	r29, 0x20	; 32
     2da:	de bf       	out	0x3e, r29	; 62
     2dc:	cd bf       	out	0x3d, r28	; 61

000002de <__do_copy_data>:
     2de:	11 e0       	ldi	r17, 0x01	; 1
     2e0:	a0 e0       	ldi	r26, 0x00	; 0
     2e2:	b1 e0       	ldi	r27, 0x01	; 1
     2e4:	e8 e1       	ldi	r30, 0x18	; 24
     2e6:	f4 e2       	ldi	r31, 0x24	; 36
     2e8:	00 e0       	ldi	r16, 0x00	; 0
     2ea:	0b bf       	out	0x3b, r16	; 59
     2ec:	02 c0       	rjmp	.+4      	; 0x2f2 <__do_copy_data+0x14>
     2ee:	07 90       	elpm	r0, Z+
     2f0:	0d 92       	st	X+, r0
     2f2:	a2 31       	cpi	r26, 0x12	; 18
     2f4:	b1 07       	cpc	r27, r17
     2f6:	d9 f7       	brne	.-10     	; 0x2ee <__do_copy_data+0x10>

000002f8 <__do_clear_bss>:
     2f8:	15 e0       	ldi	r17, 0x05	; 5
     2fa:	a2 e1       	ldi	r26, 0x12	; 18
     2fc:	b1 e0       	ldi	r27, 0x01	; 1
     2fe:	01 c0       	rjmp	.+2      	; 0x302 <.do_clear_bss_start>

00000300 <.do_clear_bss_loop>:
     300:	1d 92       	st	X+, r1

00000302 <.do_clear_bss_start>:
     302:	af 30       	cpi	r26, 0x0F	; 15
     304:	b1 07       	cpc	r27, r17
     306:	e1 f7       	brne	.-8      	; 0x300 <.do_clear_bss_loop>
     308:	0a d2       	rcall	.+1044   	; 0x71e <main>
     30a:	0c 94 0a 12 	jmp	0x2414	; 0x2414 <_exit>

0000030e <__bad_interrupt>:
     30e:	78 ce       	rjmp	.-784    	; 0x0 <__vectors>

00000310 <ProcessJoystickReport>:
 *  as required and displays movement and button presses on the board LEDs.
 *
 *  \param[in] JoystickReport  Pointer to a HID report from an attached joystick device
 */
void ProcessJoystickReport(uint8_t* JoystickReport)
{
     310:	bf 92       	push	r11
     312:	cf 92       	push	r12
     314:	df 92       	push	r13
     316:	ef 92       	push	r14
     318:	ff 92       	push	r15
     31a:	0f 93       	push	r16
     31c:	1f 93       	push	r17
     31e:	cf 93       	push	r28
     320:	df 93       	push	r29
     322:	7c 01       	movw	r14, r24
     324:	10 e0       	ldi	r17, 0x00	; 0
     326:	00 e0       	ldi	r16, 0x00	; 0

	/* Check each HID report item in turn, looking for joystick X/Y/button reports */
	for (uint8_t ReportNumber = 0; ReportNumber < HIDReportInfo.TotalReportItems; ReportNumber++)
	{
		/* Create a temporary item pointer to the next report item */
		HID_ReportItem_t* ReportItem = &HIDReportInfo.ReportItems[ReportNumber];
     328:	9a e2       	ldi	r25, 0x2A	; 42
     32a:	b9 2e       	mov	r11, r25

			/* For multi-report devices - if the requested data was not in the issued report, continue */
			if (!(FoundData))
			  continue;

			int16_t DeltaMovement = HID_ALIGN_DATA(ReportItem, int16_t);
     32c:	80 e1       	ldi	r24, 0x10	; 16
     32e:	c8 2e       	mov	r12, r24
     330:	d1 2c       	mov	r13, r1
     332:	55 c0       	rjmp	.+170    	; 0x3de <ProcessJoystickReport+0xce>

	/* Check each HID report item in turn, looking for joystick X/Y/button reports */
	for (uint8_t ReportNumber = 0; ReportNumber < HIDReportInfo.TotalReportItems; ReportNumber++)
	{
		/* Create a temporary item pointer to the next report item */
		HID_ReportItem_t* ReportItem = &HIDReportInfo.ReportItems[ReportNumber];
     334:	0b 9d       	mul	r16, r11
     336:	e0 01       	movw	r28, r0
     338:	11 24       	eor	r1, r1
     33a:	ca 5e       	subi	r28, 0xEA	; 234
     33c:	de 4f       	sbci	r29, 0xFE	; 254

		bool FoundData;

		if ((ReportItem->Attributes.Usage.Page        == USAGE_PAGE_BUTTON) &&
     33e:	89 85       	ldd	r24, Y+9	; 0x09
     340:	9a 85       	ldd	r25, Y+10	; 0x0a
     342:	89 30       	cpi	r24, 0x09	; 9
     344:	91 05       	cpc	r25, r1
     346:	a9 f4       	brne	.+42     	; 0x372 <ProcessJoystickReport+0x62>
     348:	8a 81       	ldd	r24, Y+2	; 0x02
     34a:	88 23       	and	r24, r24
     34c:	09 f0       	breq	.+2      	; 0x350 <ProcessJoystickReport+0x40>
     34e:	46 c0       	rjmp	.+140    	; 0x3dc <ProcessJoystickReport+0xcc>
			(ReportItem->ItemType                     == HID_REPORT_ITEM_In))
		{
			/* Get the joystick button value */
			FoundData = USB_GetHIDReportItemInfo(JoystickReport, ReportItem);
     350:	c7 01       	movw	r24, r14
     352:	be 01       	movw	r22, r28
     354:	0e 94 91 0a 	call	0x1522	; 0x1522 <USB_GetHIDReportItemInfo>

			/* For multi-report devices - if the requested data was not in the issued report, continue */
			if (!(FoundData))
     358:	88 23       	and	r24, r24
     35a:	09 f4       	brne	.+2      	; 0x35e <ProcessJoystickReport+0x4e>
     35c:	3f c0       	rjmp	.+126    	; 0x3dc <ProcessJoystickReport+0xcc>
			  continue;

			/* If button is pressed, all LEDs are turned on */
			if (ReportItem->Value)
     35e:	8a a1       	ldd	r24, Y+34	; 0x22
     360:	9b a1       	ldd	r25, Y+35	; 0x23
     362:	ac a1       	ldd	r26, Y+36	; 0x24
     364:	bd a1       	ldd	r27, Y+37	; 0x25
     366:	00 97       	sbiw	r24, 0x00	; 0
     368:	a1 05       	cpc	r26, r1
     36a:	b1 05       	cpc	r27, r1
     36c:	b9 f1       	breq	.+110    	; 0x3dc <ProcessJoystickReport+0xcc>
     36e:	10 ef       	ldi	r17, 0xF0	; 240
     370:	35 c0       	rjmp	.+106    	; 0x3dc <ProcessJoystickReport+0xcc>
			  LEDMask = LEDS_ALL_LEDS;
		}
		else if ((ReportItem->Attributes.Usage.Page   == USAGE_PAGE_GENERIC_DCTRL) &&
     372:	01 97       	sbiw	r24, 0x01	; 1
     374:	99 f5       	brne	.+102    	; 0x3dc <ProcessJoystickReport+0xcc>
     376:	8b 85       	ldd	r24, Y+11	; 0x0b
     378:	9c 85       	ldd	r25, Y+12	; 0x0c
     37a:	c0 97       	sbiw	r24, 0x30	; 48
     37c:	02 97       	sbiw	r24, 0x02	; 2
     37e:	70 f5       	brcc	.+92     	; 0x3dc <ProcessJoystickReport+0xcc>
     380:	8a 81       	ldd	r24, Y+2	; 0x02
     382:	88 23       	and	r24, r24
     384:	59 f5       	brne	.+86     	; 0x3dc <ProcessJoystickReport+0xcc>
				 ((ReportItem->Attributes.Usage.Usage == USAGE_X)                  ||
				  (ReportItem->Attributes.Usage.Usage == USAGE_Y))                 &&
				 (ReportItem->ItemType                == HID_REPORT_ITEM_In))
		{
			/* Get the joystick relative position value */
			FoundData = USB_GetHIDReportItemInfo(JoystickReport, ReportItem);
     386:	c7 01       	movw	r24, r14
     388:	be 01       	movw	r22, r28
     38a:	0e 94 91 0a 	call	0x1522	; 0x1522 <USB_GetHIDReportItemInfo>

			/* For multi-report devices - if the requested data was not in the issued report, continue */
			if (!(FoundData))
     38e:	88 23       	and	r24, r24
     390:	29 f1       	breq	.+74     	; 0x3dc <ProcessJoystickReport+0xcc>
			  continue;

			int16_t DeltaMovement = HID_ALIGN_DATA(ReportItem, int16_t);
     392:	88 85       	ldd	r24, Y+8	; 0x08
     394:	96 01       	movw	r18, r12
     396:	28 1b       	sub	r18, r24
     398:	31 09       	sbc	r19, r1
     39a:	c9 01       	movw	r24, r18
     39c:	2a a1       	ldd	r18, Y+34	; 0x22
     39e:	3b a1       	ldd	r19, Y+35	; 0x23
     3a0:	4c a1       	ldd	r20, Y+36	; 0x24
     3a2:	5d a1       	ldd	r21, Y+37	; 0x25
     3a4:	04 c0       	rjmp	.+8      	; 0x3ae <ProcessJoystickReport+0x9e>
     3a6:	22 0f       	add	r18, r18
     3a8:	33 1f       	adc	r19, r19
     3aa:	44 1f       	adc	r20, r20
     3ac:	55 1f       	adc	r21, r21
     3ae:	8a 95       	dec	r24
     3b0:	d2 f7       	brpl	.-12     	; 0x3a6 <ProcessJoystickReport+0x96>

			/* Check to see if a (non-zero) delta movement has been indicated */
			if (DeltaMovement)
     3b2:	21 15       	cp	r18, r1
     3b4:	31 05       	cpc	r19, r1
     3b6:	91 f0       	breq	.+36     	; 0x3dc <ProcessJoystickReport+0xcc>
			{
				/* Determine if the report is for the X or Y delta movement, light LEDs as appropriate */
				if (ReportItem->Attributes.Usage.Usage == USAGE_X)
     3b8:	8b 85       	ldd	r24, Y+11	; 0x0b
     3ba:	9c 85       	ldd	r25, Y+12	; 0x0c
     3bc:	c0 97       	sbiw	r24, 0x30	; 48
     3be:	39 f4       	brne	.+14     	; 0x3ce <ProcessJoystickReport+0xbe>
				  LEDMask |= ((DeltaMovement > 0) ? LEDS_LED1 : LEDS_LED2);
     3c0:	12 16       	cp	r1, r18
     3c2:	13 06       	cpc	r1, r19
     3c4:	14 f0       	brlt	.+4      	; 0x3ca <ProcessJoystickReport+0xba>
     3c6:	80 e2       	ldi	r24, 0x20	; 32
     3c8:	08 c0       	rjmp	.+16     	; 0x3da <ProcessJoystickReport+0xca>
     3ca:	80 e1       	ldi	r24, 0x10	; 16
     3cc:	06 c0       	rjmp	.+12     	; 0x3da <ProcessJoystickReport+0xca>
				else
				  LEDMask |= ((DeltaMovement > 0) ? LEDS_LED3 : LEDS_LED4);
     3ce:	12 16       	cp	r1, r18
     3d0:	13 06       	cpc	r1, r19
     3d2:	14 f0       	brlt	.+4      	; 0x3d8 <ProcessJoystickReport+0xc8>
     3d4:	80 e4       	ldi	r24, 0x40	; 64
     3d6:	01 c0       	rjmp	.+2      	; 0x3da <ProcessJoystickReport+0xca>
     3d8:	80 e8       	ldi	r24, 0x80	; 128
     3da:	18 2b       	or	r17, r24
void ProcessJoystickReport(uint8_t* JoystickReport)
{
	uint8_t LEDMask = LEDS_NO_LEDS;

	/* Check each HID report item in turn, looking for joystick X/Y/button reports */
	for (uint8_t ReportNumber = 0; ReportNumber < HIDReportInfo.TotalReportItems; ReportNumber++)
     3dc:	0f 5f       	subi	r16, 0xFF	; 255
     3de:	80 91 15 01 	lds	r24, 0x0115
     3e2:	08 17       	cp	r16, r24
     3e4:	08 f4       	brcc	.+2      	; 0x3e8 <ProcessJoystickReport+0xd8>
     3e6:	a6 cf       	rjmp	.-180    	; 0x334 <ProcessJoystickReport+0x24>
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     3e8:	8b b1       	in	r24, 0x0b	; 11
     3ea:	8f 70       	andi	r24, 0x0F	; 15
     3ec:	18 2b       	or	r17, r24
     3ee:	1b b9       	out	0x0b, r17	; 11
		}
	}

	/* Display the button information on the board LEDs */
	LEDs_SetAllLEDs(LEDMask);
}
     3f0:	df 91       	pop	r29
     3f2:	cf 91       	pop	r28
     3f4:	1f 91       	pop	r17
     3f6:	0f 91       	pop	r16
     3f8:	ff 90       	pop	r15
     3fa:	ef 90       	pop	r14
     3fc:	df 90       	pop	r13
     3fe:	cf 90       	pop	r12
     400:	bf 90       	pop	r11
     402:	08 95       	ret

00000404 <JoystickHost_Task>:

/** Task to read and process the HID report descriptor and HID reports from the device
 *  and display the results onto the board LEDs.
 */
void JoystickHost_Task(void)
{
     404:	cf 92       	push	r12
     406:	df 92       	push	r13
     408:	ef 92       	push	r14
     40a:	ff 92       	push	r15
     40c:	0f 93       	push	r16
     40e:	1f 93       	push	r17
     410:	df 93       	push	r29
     412:	cf 93       	push	r28
     414:	cd b7       	in	r28, 0x3d	; 61
     416:	de b7       	in	r29, 0x3e	; 62
		Pipe_ClearIN();
	}

	/* Freeze joystick data pipe */
	Pipe_Freeze();
}
     418:	cd b6       	in	r12, 0x3d	; 61
     41a:	de b6       	in	r13, 0x3e	; 62
/** Task to read and process the HID report descriptor and HID reports from the device
 *  and display the results onto the board LEDs.
 */
void JoystickHost_Task(void)
{
	if (USB_HostState != HOST_STATE_Configured)
     41c:	80 91 fa 04 	lds	r24, 0x04FA
     420:	8b 30       	cpi	r24, 0x0B	; 11
     422:	09 f0       	breq	.+2      	; 0x426 <JoystickHost_Task+0x22>
     424:	3e c0       	rjmp	.+124    	; 0x4a2 <JoystickHost_Task+0x9e>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     426:	81 e0       	ldi	r24, 0x01	; 1
     428:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     42c:	80 91 a9 00 	lds	r24, 0x00A9
     430:	8f 7b       	andi	r24, 0xBF	; 191
     432:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     436:	80 91 a6 00 	lds	r24, 0x00A6
	/* Select and unfreeze joystick data pipe */
	Pipe_SelectPipe(JOYSTICK_DATA_IN_PIPE);
	Pipe_Unfreeze();

	/* Check to see if a packet has been received */
	if (Pipe_IsINReceived())
     43a:	80 ff       	sbrs	r24, 0
     43c:	2d c0       	rjmp	.+90     	; 0x498 <JoystickHost_Task+0x94>
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
     43e:	80 91 a6 00 	lds	r24, 0x00A6
	{
		/* Check if data has been received from the attached joystick */
		if (Pipe_IsReadWriteAllowed())
     442:	85 ff       	sbrs	r24, 5
     444:	24 c0       	rjmp	.+72     	; 0x48e <JoystickHost_Task+0x8a>
     446:	ee b6       	in	r14, 0x3e	; 62
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
     448:	80 91 f6 00 	lds	r24, 0x00F6
     44c:	90 91 f7 00 	lds	r25, 0x00F7
		{
			/* Create buffer big enough for the report */
			uint8_t JoystickReport[Pipe_BytesInPipe()];
     450:	2d b7       	in	r18, 0x3d	; 61
     452:	3e b7       	in	r19, 0x3e	; 62
     454:	28 1b       	sub	r18, r24
     456:	39 0b       	sbc	r19, r25
     458:	0f b6       	in	r0, 0x3f	; 63
     45a:	f8 94       	cli
     45c:	3e bf       	out	0x3e, r19	; 62
     45e:	0f be       	out	0x3f, r0	; 63
     460:	2d bf       	out	0x3d, r18	; 61
     462:	0d b7       	in	r16, 0x3d	; 61
     464:	1e b7       	in	r17, 0x3e	; 62
     466:	0f 5f       	subi	r16, 0xFF	; 255
     468:	1f 4f       	sbci	r17, 0xFF	; 255
     46a:	60 91 f6 00 	lds	r22, 0x00F6
     46e:	70 91 f7 00 	lds	r23, 0x00F7

			/* Load in the joystick report */
			Pipe_Read_Stream_LE(JoystickReport, Pipe_BytesInPipe(), NULL);
     472:	c8 01       	movw	r24, r16
     474:	40 e0       	ldi	r20, 0x00	; 0
     476:	50 e0       	ldi	r21, 0x00	; 0
     478:	f7 d5       	rcall	.+3054   	; 0x1068 <Pipe_Read_Stream_LE>

			/* Process the read in joystick report from the device */
			ProcessJoystickReport(JoystickReport);
     47a:	c8 01       	movw	r24, r16
     47c:	49 df       	rcall	.-366    	; 0x310 <ProcessJoystickReport>
     47e:	2c 2d       	mov	r18, r12
     480:	3e 2d       	mov	r19, r14
     482:	c9 01       	movw	r24, r18
     484:	0f b6       	in	r0, 0x3f	; 63
     486:	f8 94       	cli
     488:	9e bf       	out	0x3e, r25	; 62
     48a:	0f be       	out	0x3f, r0	; 63
     48c:	8d bf       	out	0x3d, r24	; 61
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     48e:	80 91 a6 00 	lds	r24, 0x00A6
     492:	8e 77       	andi	r24, 0x7E	; 126
     494:	80 93 a6 00 	sts	0x00A6, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     498:	80 91 a9 00 	lds	r24, 0x00A9
     49c:	80 64       	ori	r24, 0x40	; 64
     49e:	80 93 a9 00 	sts	0x00A9, r24
		Pipe_ClearIN();
	}

	/* Freeze joystick data pipe */
	Pipe_Freeze();
}
     4a2:	0f b6       	in	r0, 0x3f	; 63
     4a4:	f8 94       	cli
     4a6:	de be       	out	0x3e, r13	; 62
     4a8:	0f be       	out	0x3f, r0	; 63
     4aa:	cd be       	out	0x3d, r12	; 61
     4ac:	cf 91       	pop	r28
     4ae:	df 91       	pop	r29
     4b0:	1f 91       	pop	r17
     4b2:	0f 91       	pop	r16
     4b4:	ff 90       	pop	r15
     4b6:	ef 90       	pop	r14
     4b8:	df 90       	pop	r13
     4ba:	cf 90       	pop	r12
     4bc:	08 95       	ret

000004be <EVENT_USB_Host_DeviceEnumerationFailed>:
/** Event handler for the USB_DeviceEnumerationFailed event. This indicates that a problem occurred while
 *  enumerating an attached USB device.
 */
void EVENT_USB_Host_DeviceEnumerationFailed(const uint8_t ErrorCode, const uint8_t SubErrorCode)
{
	printf_P(PSTR(ESC_FG_RED "Dev Enum Error\r\n"
     4be:	90 91 fa 04 	lds	r25, 0x04FA
     4c2:	2d b7       	in	r18, 0x3d	; 61
     4c4:	3e b7       	in	r19, 0x3e	; 62
     4c6:	28 50       	subi	r18, 0x08	; 8
     4c8:	30 40       	sbci	r19, 0x00	; 0
     4ca:	0f b6       	in	r0, 0x3f	; 63
     4cc:	f8 94       	cli
     4ce:	3e bf       	out	0x3e, r19	; 62
     4d0:	0f be       	out	0x3f, r0	; 63
     4d2:	2d bf       	out	0x3d, r18	; 61
     4d4:	ed b7       	in	r30, 0x3d	; 61
     4d6:	fe b7       	in	r31, 0x3e	; 62
     4d8:	31 96       	adiw	r30, 0x01	; 1
     4da:	28 e9       	ldi	r18, 0x98	; 152
     4dc:	30 e0       	ldi	r19, 0x00	; 0
     4de:	ad b7       	in	r26, 0x3d	; 61
     4e0:	be b7       	in	r27, 0x3e	; 62
     4e2:	12 96       	adiw	r26, 0x02	; 2
     4e4:	3c 93       	st	X, r19
     4e6:	2e 93       	st	-X, r18
     4e8:	11 97       	sbiw	r26, 0x01	; 1
     4ea:	82 83       	std	Z+2, r24	; 0x02
     4ec:	13 82       	std	Z+3, r1	; 0x03
     4ee:	64 83       	std	Z+4, r22	; 0x04
     4f0:	15 82       	std	Z+5, r1	; 0x05
     4f2:	96 83       	std	Z+6, r25	; 0x06
     4f4:	17 82       	std	Z+7, r1	; 0x07
     4f6:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <printf_P>
     4fa:	8b b1       	in	r24, 0x0b	; 11
     4fc:	8f 70       	andi	r24, 0x0F	; 15
     4fe:	80 69       	ori	r24, 0x90	; 144
     500:	8b b9       	out	0x0b, r24	; 11
     502:	2d b7       	in	r18, 0x3d	; 61
     504:	3e b7       	in	r19, 0x3e	; 62
     506:	28 5f       	subi	r18, 0xF8	; 248
     508:	3f 4f       	sbci	r19, 0xFF	; 255
     50a:	0f b6       	in	r0, 0x3f	; 63
     50c:	f8 94       	cli
     50e:	3e bf       	out	0x3e, r19	; 62
     510:	0f be       	out	0x3f, r0	; 63
     512:	2d bf       	out	0x3d, r18	; 61
	                         " -- Error Code %d\r\n"
	                         " -- Sub Error Code %d\r\n"
	                         " -- In State %d\r\n" ESC_FG_WHITE), ErrorCode, SubErrorCode, USB_HostState);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
}
     514:	08 95       	ret

00000516 <EVENT_USB_Host_HostError>:
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
}

/** Event handler for the USB_HostError event. This indicates that a hardware error occurred while in host mode. */
void EVENT_USB_Host_HostError(const uint8_t ErrorCode)
{
     516:	1f 93       	push	r17
     518:	18 2f       	mov	r17, r24
	USB_Disable();
     51a:	ee d4       	rcall	.+2524   	; 0xef8 <USB_Disable>

	printf_P(PSTR(ESC_FG_RED "Host Mode Error\r\n"
     51c:	00 d0       	rcall	.+0      	; 0x51e <EVENT_USB_Host_HostError+0x8>
     51e:	00 d0       	rcall	.+0      	; 0x520 <EVENT_USB_Host_HostError+0xa>
     520:	ed b7       	in	r30, 0x3d	; 61
     522:	fe b7       	in	r31, 0x3e	; 62
     524:	31 96       	adiw	r30, 0x01	; 1
     526:	8e ee       	ldi	r24, 0xEE	; 238
     528:	90 e0       	ldi	r25, 0x00	; 0
     52a:	ad b7       	in	r26, 0x3d	; 61
     52c:	be b7       	in	r27, 0x3e	; 62
     52e:	12 96       	adiw	r26, 0x02	; 2
     530:	9c 93       	st	X, r25
     532:	8e 93       	st	-X, r24
     534:	11 97       	sbiw	r26, 0x01	; 1
     536:	12 83       	std	Z+2, r17	; 0x02
     538:	13 82       	std	Z+3, r1	; 0x03
     53a:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <printf_P>
     53e:	8b b1       	in	r24, 0x0b	; 11
     540:	8f 70       	andi	r24, 0x0F	; 15
     542:	80 69       	ori	r24, 0x90	; 144
     544:	8b b9       	out	0x0b, r24	; 11
     546:	0f 90       	pop	r0
     548:	0f 90       	pop	r0
     54a:	0f 90       	pop	r0
     54c:	0f 90       	pop	r0
     54e:	ff cf       	rjmp	.-2      	; 0x54e <EVENT_USB_Host_HostError+0x38>

00000550 <EVENT_USB_Host_DeviceUnattached>:
/** Event handler for the USB_DeviceUnattached event. This indicates that a device has been removed from the host, and
 *  stops the library USB task management process.
 */
void EVENT_USB_Host_DeviceUnattached(void)
{
	puts_P(PSTR(ESC_FG_GREEN "Device Unattached.\r\n" ESC_FG_WHITE));
     550:	82 e6       	ldi	r24, 0x62	; 98
     552:	92 e0       	ldi	r25, 0x02	; 2
     554:	0e 94 3c 0f 	call	0x1e78	; 0x1e78 <puts_P>
     558:	8b b1       	in	r24, 0x0b	; 11
     55a:	8f 70       	andi	r24, 0x0F	; 15
     55c:	80 61       	ori	r24, 0x10	; 16
     55e:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
}
     560:	08 95       	ret

00000562 <EVENT_USB_Host_DeviceAttached>:
/** Event handler for the USB_DeviceAttached event. This indicates that a device has been attached to the host, and
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Host_DeviceAttached(void)
{
	puts_P(PSTR(ESC_FG_GREEN "Device Attached.\r\n" ESC_FG_WHITE));
     562:	81 e8       	ldi	r24, 0x81	; 129
     564:	92 e0       	ldi	r25, 0x02	; 2
     566:	0e 94 3c 0f 	call	0x1e78	; 0x1e78 <puts_P>
     56a:	8b b1       	in	r24, 0x0b	; 11
     56c:	8f 70       	andi	r24, 0x0F	; 15
     56e:	80 6a       	ori	r24, 0xA0	; 160
     570:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
}
     572:	08 95       	ret

00000574 <EVENT_USB_Host_DeviceEnumerationComplete>:

/** Event handler for the USB_DeviceEnumerationComplete event. This indicates that a device has been successfully
 *  enumerated by the host and is now ready to be used by the application.
 */
void EVENT_USB_Host_DeviceEnumerationComplete(void)
{
     574:	1f 93       	push	r17
	puts_P(PSTR("Getting Config Data.\r\n"));
     576:	8b e4       	ldi	r24, 0x4B	; 75
     578:	92 e0       	ldi	r25, 0x02	; 2
     57a:	0e 94 3c 0f 	call	0x1e78	; 0x1e78 <puts_P>
	
	uint8_t ErrorCode;

	/* Get and process the configuration descriptor data */
	if ((ErrorCode = ProcessConfigurationDescriptor()) != SuccessfulConfigRead)
     57e:	fb d0       	rcall	.+502    	; 0x776 <ProcessConfigurationDescriptor>
     580:	18 2f       	mov	r17, r24
     582:	88 23       	and	r24, r24
     584:	c1 f0       	breq	.+48     	; 0x5b6 <EVENT_USB_Host_DeviceEnumerationComplete+0x42>
	{
		if (ErrorCode == ControlError)
     586:	81 30       	cpi	r24, 0x01	; 1
     588:	19 f4       	brne	.+6      	; 0x590 <EVENT_USB_Host_DeviceEnumerationComplete+0x1c>
		  puts_P(PSTR(ESC_FG_RED "Control Error (Get Configuration).\r\n"));
     58a:	81 e2       	ldi	r24, 0x21	; 33
     58c:	92 e0       	ldi	r25, 0x02	; 2
     58e:	02 c0       	rjmp	.+4      	; 0x594 <EVENT_USB_Host_DeviceEnumerationComplete+0x20>
		else
		  puts_P(PSTR(ESC_FG_RED "Invalid Device.\r\n"));
     590:	8a e0       	ldi	r24, 0x0A	; 10
     592:	92 e0       	ldi	r25, 0x02	; 2
     594:	0e 94 3c 0f 	call	0x1e78	; 0x1e78 <puts_P>

		printf_P(PSTR(" -- Error Code: %d\r\n" ESC_FG_WHITE), ErrorCode);
     598:	00 d0       	rcall	.+0      	; 0x59a <EVENT_USB_Host_DeviceEnumerationComplete+0x26>
     59a:	00 d0       	rcall	.+0      	; 0x59c <EVENT_USB_Host_DeviceEnumerationComplete+0x28>
     59c:	ed b7       	in	r30, 0x3d	; 61
     59e:	fe b7       	in	r31, 0x3e	; 62
     5a0:	31 96       	adiw	r30, 0x01	; 1
     5a2:	80 ef       	ldi	r24, 0xF0	; 240
     5a4:	91 e0       	ldi	r25, 0x01	; 1
     5a6:	ad b7       	in	r26, 0x3d	; 61
     5a8:	be b7       	in	r27, 0x3e	; 62
     5aa:	12 96       	adiw	r26, 0x02	; 2
     5ac:	9c 93       	st	X, r25
     5ae:	8e 93       	st	-X, r24
     5b0:	11 97       	sbiw	r26, 0x01	; 1
     5b2:	12 83       	std	Z+2, r17	; 0x02
     5b4:	13 c0       	rjmp	.+38     	; 0x5dc <EVENT_USB_Host_DeviceEnumerationComplete+0x68>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	/* Set the device configuration to the first configuration (rarely do devices use multiple configurations) */
	if ((ErrorCode = USB_Host_SetDeviceConfiguration(1)) != HOST_SENDCONTROL_Successful)
     5b6:	81 e0       	ldi	r24, 0x01	; 1
     5b8:	7d d7       	rcall	.+3834   	; 0x14b4 <USB_Host_SetDeviceConfiguration>
     5ba:	28 2f       	mov	r18, r24
     5bc:	88 23       	and	r24, r24
     5be:	d1 f0       	breq	.+52     	; 0x5f4 <EVENT_USB_Host_DeviceEnumerationComplete+0x80>
	{
		printf_P(PSTR(ESC_FG_RED "Control Error (Set Configuration).\r\n"
     5c0:	00 d0       	rcall	.+0      	; 0x5c2 <EVENT_USB_Host_DeviceEnumerationComplete+0x4e>
     5c2:	00 d0       	rcall	.+0      	; 0x5c4 <EVENT_USB_Host_DeviceEnumerationComplete+0x50>
     5c4:	ed b7       	in	r30, 0x3d	; 61
     5c6:	fe b7       	in	r31, 0x3e	; 62
     5c8:	31 96       	adiw	r30, 0x01	; 1
     5ca:	8d ea       	ldi	r24, 0xAD	; 173
     5cc:	91 e0       	ldi	r25, 0x01	; 1
     5ce:	ad b7       	in	r26, 0x3d	; 61
     5d0:	be b7       	in	r27, 0x3e	; 62
     5d2:	12 96       	adiw	r26, 0x02	; 2
     5d4:	9c 93       	st	X, r25
     5d6:	8e 93       	st	-X, r24
     5d8:	11 97       	sbiw	r26, 0x01	; 1
     5da:	22 83       	std	Z+2, r18	; 0x02
     5dc:	13 82       	std	Z+3, r1	; 0x03
     5de:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <printf_P>
     5e2:	8b b1       	in	r24, 0x0b	; 11
     5e4:	8f 70       	andi	r24, 0x0F	; 15
     5e6:	80 69       	ori	r24, 0x90	; 144
     5e8:	8b b9       	out	0x0b, r24	; 11
     5ea:	0f 90       	pop	r0
     5ec:	0f 90       	pop	r0
     5ee:	0f 90       	pop	r0
     5f0:	0f 90       	pop	r0
     5f2:	49 c0       	rjmp	.+146    	; 0x686 <EVENT_USB_Host_DeviceEnumerationComplete+0x112>

		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	printf_P(PSTR("Processing HID Report (Size %d Bytes).\r\n"), HIDReportSize);
     5f4:	00 d0       	rcall	.+0      	; 0x5f6 <EVENT_USB_Host_DeviceEnumerationComplete+0x82>
     5f6:	00 d0       	rcall	.+0      	; 0x5f8 <EVENT_USB_Host_DeviceEnumerationComplete+0x84>
     5f8:	84 e8       	ldi	r24, 0x84	; 132
     5fa:	91 e0       	ldi	r25, 0x01	; 1
     5fc:	ed b7       	in	r30, 0x3d	; 61
     5fe:	fe b7       	in	r31, 0x3e	; 62
     600:	92 83       	std	Z+2, r25	; 0x02
     602:	81 83       	std	Z+1, r24	; 0x01
     604:	80 91 ee 04 	lds	r24, 0x04EE
     608:	90 91 ef 04 	lds	r25, 0x04EF
     60c:	94 83       	std	Z+4, r25	; 0x04
     60e:	83 83       	std	Z+3, r24	; 0x03
     610:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <printf_P>

	/* Get and process the device's first HID report descriptor */
	if ((ErrorCode = GetHIDReportData()) != ParseSuccessful)
     614:	0f 90       	pop	r0
     616:	0f 90       	pop	r0
     618:	0f 90       	pop	r0
     61a:	0f 90       	pop	r0
     61c:	5e d1       	rcall	.+700    	; 0x8da <GetHIDReportData>
     61e:	18 2f       	mov	r17, r24
     620:	88 23       	and	r24, r24
     622:	49 f1       	breq	.+82     	; 0x676 <EVENT_USB_Host_DeviceEnumerationComplete+0x102>
	{
		puts_P(PSTR(ESC_FG_RED "Report Parse Error.\r\n"));
     624:	89 e6       	ldi	r24, 0x69	; 105
     626:	91 e0       	ldi	r25, 0x01	; 1
     628:	0e 94 3c 0f 	call	0x1e78	; 0x1e78 <puts_P>

		if (!(HIDReportInfo.TotalReportItems))
     62c:	80 91 15 01 	lds	r24, 0x0115
     630:	88 23       	and	r24, r24
     632:	29 f4       	brne	.+10     	; 0x63e <EVENT_USB_Host_DeviceEnumerationComplete+0xca>
			puts_P(PSTR("Not a valid Joystick." ESC_FG_WHITE));
     634:	8e e4       	ldi	r24, 0x4E	; 78
     636:	91 e0       	ldi	r25, 0x01	; 1
     638:	0e 94 3c 0f 	call	0x1e78	; 0x1e78 <puts_P>
     63c:	15 c0       	rjmp	.+42     	; 0x668 <EVENT_USB_Host_DeviceEnumerationComplete+0xf4>
		else
			printf_P(PSTR(" -- Error Code: %d\r\n" ESC_FG_WHITE), ErrorCode);
     63e:	00 d0       	rcall	.+0      	; 0x640 <EVENT_USB_Host_DeviceEnumerationComplete+0xcc>
     640:	00 d0       	rcall	.+0      	; 0x642 <EVENT_USB_Host_DeviceEnumerationComplete+0xce>
     642:	ed b7       	in	r30, 0x3d	; 61
     644:	fe b7       	in	r31, 0x3e	; 62
     646:	31 96       	adiw	r30, 0x01	; 1
     648:	84 e3       	ldi	r24, 0x34	; 52
     64a:	91 e0       	ldi	r25, 0x01	; 1
     64c:	ad b7       	in	r26, 0x3d	; 61
     64e:	be b7       	in	r27, 0x3e	; 62
     650:	12 96       	adiw	r26, 0x02	; 2
     652:	9c 93       	st	X, r25
     654:	8e 93       	st	-X, r24
     656:	11 97       	sbiw	r26, 0x01	; 1
     658:	12 83       	std	Z+2, r17	; 0x02
     65a:	13 82       	std	Z+3, r1	; 0x03
     65c:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <printf_P>
     660:	0f 90       	pop	r0
     662:	0f 90       	pop	r0
     664:	0f 90       	pop	r0
     666:	0f 90       	pop	r0
     668:	8b b1       	in	r24, 0x0b	; 11
     66a:	8f 70       	andi	r24, 0x0F	; 15
     66c:	80 69       	ori	r24, 0x90	; 144
     66e:	8b b9       	out	0x0b, r24	; 11

		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		USB_Host_SetDeviceConfiguration(0);
     670:	80 e0       	ldi	r24, 0x00	; 0
     672:	20 d7       	rcall	.+3648   	; 0x14b4 <USB_Host_SetDeviceConfiguration>
     674:	08 c0       	rjmp	.+16     	; 0x686 <EVENT_USB_Host_DeviceEnumerationComplete+0x112>
		return;
	}

	puts_P(PSTR("Joystick Enumerated.\r\n"));
     676:	8d e1       	ldi	r24, 0x1D	; 29
     678:	91 e0       	ldi	r25, 0x01	; 1
     67a:	0e 94 3c 0f 	call	0x1e78	; 0x1e78 <puts_P>
     67e:	8b b1       	in	r24, 0x0b	; 11
     680:	8f 70       	andi	r24, 0x0F	; 15
     682:	80 66       	ori	r24, 0x60	; 96
     684:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
}
     686:	1f 91       	pop	r17
     688:	08 95       	ret

0000068a <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     68a:	84 b7       	in	r24, 0x34	; 52
     68c:	87 7f       	andi	r24, 0xF7	; 247
     68e:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     690:	38 e1       	ldi	r19, 0x18	; 24
     692:	0f b6       	in	r0, 0x3f	; 63
     694:	f8 94       	cli
     696:	30 93 60 00 	sts	0x0060, r19
     69a:	10 92 60 00 	sts	0x0060, r1
     69e:	0f be       	out	0x3f, r0	; 63

	/* Disable clock division */
	clock_prescale_set(clock_div_1);
     6a0:	80 e0       	ldi	r24, 0x00	; 0
     6a2:	90 e0       	ldi	r25, 0x00	; 0
     6a4:	20 e8       	ldi	r18, 0x80	; 128
     6a6:	0f b6       	in	r0, 0x3f	; 63
     6a8:	f8 94       	cli
     6aa:	20 93 61 00 	sts	0x0061, r18
     6ae:	80 93 61 00 	sts	0x0061, r24
     6b2:	0f be       	out	0x3f, r0	; 63
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     6b4:	83 e3       	ldi	r24, 0x33	; 51
     6b6:	90 e0       	ldi	r25, 0x00	; 0
     6b8:	90 93 cd 00 	sts	0x00CD, r25
     6bc:	80 93 cc 00 	sts	0x00CC, r24

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     6c0:	86 e0       	ldi	r24, 0x06	; 6
     6c2:	80 93 ca 00 	sts	0x00CA, r24
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     6c6:	10 92 c8 00 	sts	0x00C8, r1
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     6ca:	30 93 c9 00 	sts	0x00C9, r19

				DDRD  |= (1 << 3);
     6ce:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     6d0:	5a 9a       	sbi	0x0b, 2	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     6d2:	8a b1       	in	r24, 0x0a	; 10
     6d4:	80 6f       	ori	r24, 0xF0	; 240
     6d6:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     6d8:	8b b1       	in	r24, 0x0b	; 11
     6da:	8f 70       	andi	r24, 0x0F	; 15
     6dc:	8b b9       	out	0x0b, r24	; 11

	/* Hardware Initialization */
	Serial_Init(9600, false);
	LEDs_Init();
	USB_Init();
     6de:	03 d4       	rcall	.+2054   	; 0xee6 <USB_Init>
			static inline void Serial_CreateStream(FILE* Stream)
			{
				if (!(Stream))
				{
					Stream = &USARTSerialStream;
					stdin  = Stream;
     6e0:	eb ef       	ldi	r30, 0xFB	; 251
     6e2:	f4 e0       	ldi	r31, 0x04	; 4
     6e4:	f0 93 0a 05 	sts	0x050A, r31
     6e8:	e0 93 09 05 	sts	0x0509, r30
					stdout = Stream;
     6ec:	f0 93 0c 05 	sts	0x050C, r31
     6f0:	e0 93 0b 05 	sts	0x050B, r30
				}
			
				*Stream = (FILE)FDEV_SETUP_STREAM(Serial_putchar, Serial_getchar, _FDEV_SETUP_RW);
     6f4:	8e e0       	ldi	r24, 0x0E	; 14
     6f6:	df 01       	movw	r26, r30
     6f8:	1d 92       	st	X+, r1
     6fa:	8a 95       	dec	r24
     6fc:	e9 f7       	brne	.-6      	; 0x6f8 <SetupHardware+0x6e>
     6fe:	83 e0       	ldi	r24, 0x03	; 3
     700:	80 93 fe 04 	sts	0x04FE, r24
     704:	8c ef       	ldi	r24, 0xFC	; 252
     706:	9e e0       	ldi	r25, 0x0E	; 14
     708:	90 93 04 05 	sts	0x0504, r25
     70c:	80 93 03 05 	sts	0x0503, r24
     710:	86 e0       	ldi	r24, 0x06	; 6
     712:	9f e0       	ldi	r25, 0x0F	; 15
     714:	90 93 06 05 	sts	0x0506, r25
     718:	80 93 05 05 	sts	0x0505, r24

	/* Create a stdio stream for the serial port for stdin and stdout */
	Serial_CreateStream(NULL);
}
     71c:	08 95       	ret

0000071e <main>:
/** Main program entry point. This routine configures the hardware required by the application, then
 *  enters a loop to run the application tasks in sequence.
 */
int main(void)
{
	SetupHardware();
     71e:	b5 df       	rcall	.-150    	; 0x68a <SetupHardware>

	puts_P(PSTR(ESC_FG_CYAN "Joystick HID Parser Host Demo running.\r\n" ESC_FG_WHITE));
     720:	8e e9       	ldi	r24, 0x9E	; 158
     722:	92 e0       	ldi	r25, 0x02	; 2
     724:	0e 94 3c 0f 	call	0x1e78	; 0x1e78 <puts_P>
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     728:	8b b1       	in	r24, 0x0b	; 11
     72a:	8f 70       	andi	r24, 0x0F	; 15
     72c:	80 61       	ori	r24, 0x10	; 16
     72e:	8b b9       	out	0x0b, r24	; 11

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
	sei();
     730:	78 94       	sei

	for (;;)
	{
		JoystickHost_Task();
     732:	68 de       	rcall	.-816    	; 0x404 <JoystickHost_Task>

		USB_USBTask();
     734:	e4 d6       	rcall	.+3528   	; 0x14fe <USB_USBTask>
     736:	fd cf       	rjmp	.-6      	; 0x732 <main+0x14>

00000738 <DComp_NextJoystickInterface>:
 *  This comparator searches for the next Interface descriptor of the correct Joystick HID Class and Protocol values.
 *
 *  \return A value from the DSEARCH_Return_ErrorCodes_t enum
 */
uint8_t DComp_NextJoystickInterface(void* CurrentDescriptor)
{
     738:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
     73a:	81 81       	ldd	r24, Z+1	; 0x01
     73c:	84 30       	cpi	r24, 0x04	; 4
     73e:	29 f4       	brne	.+10     	; 0x74a <DComp_NextJoystickInterface+0x12>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		/* Check the HID descriptor class, break out if correct class interface found */
		if ((Interface->Class == HID_CSCP_HIDClass))
     740:	85 81       	ldd	r24, Z+5	; 0x05
     742:	83 30       	cpi	r24, 0x03	; 3
     744:	11 f4       	brne	.+4      	; 0x74a <DComp_NextJoystickInterface+0x12>
     746:	80 e0       	ldi	r24, 0x00	; 0
     748:	08 95       	ret
     74a:	82 e0       	ldi	r24, 0x02	; 2
			return DESCRIPTOR_SEARCH_Found;
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
     74c:	08 95       	ret

0000074e <DComp_NextJoystickInterfaceDataEndpoint>:
 */
uint8_t DComp_NextJoystickInterfaceDataEndpoint(void* CurrentDescriptor)
{
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Endpoint)
     74e:	fc 01       	movw	r30, r24
     750:	81 81       	ldd	r24, Z+1	; 0x01
     752:	85 30       	cpi	r24, 0x05	; 5
     754:	11 f4       	brne	.+4      	; 0x75a <DComp_NextJoystickInterfaceDataEndpoint+0xc>
     756:	80 e0       	ldi	r24, 0x00	; 0
     758:	08 95       	ret
	  return DESCRIPTOR_SEARCH_Found;
	else if (Header->Type == DTYPE_Interface)
     75a:	84 30       	cpi	r24, 0x04	; 4
     75c:	11 f0       	breq	.+4      	; 0x762 <DComp_NextJoystickInterfaceDataEndpoint+0x14>
     75e:	82 e0       	ldi	r24, 0x02	; 2
     760:	08 95       	ret
     762:	81 e0       	ldi	r24, 0x01	; 1
	  return DESCRIPTOR_SEARCH_Fail;
	else
	  return DESCRIPTOR_SEARCH_NotFound;
}
     764:	08 95       	ret

00000766 <DComp_NextHID>:
 */
uint8_t DComp_NextHID(void* CurrentDescriptor)
{
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == HID_DTYPE_HID)
     766:	fc 01       	movw	r30, r24
     768:	81 81       	ldd	r24, Z+1	; 0x01
     76a:	81 32       	cpi	r24, 0x21	; 33
     76c:	11 f0       	breq	.+4      	; 0x772 <DComp_NextHID+0xc>
     76e:	82 e0       	ldi	r24, 0x02	; 2
     770:	08 95       	ret
     772:	80 e0       	ldi	r24, 0x00	; 0
	  return DESCRIPTOR_SEARCH_Found;
	else
	  return DESCRIPTOR_SEARCH_NotFound;
}
     774:	08 95       	ret

00000776 <ProcessConfigurationDescriptor>:
 *  This routine searches for a HID interface descriptor containing at least one Interrupt type IN endpoint and HID descriptor.
 *
 *  \return An error code from the \ref JoystickHostWithParser_GetConfigDescriptorDataCodes_t enum.
 */
uint8_t ProcessConfigurationDescriptor(void)
{
     776:	8f 92       	push	r8
     778:	9f 92       	push	r9
     77a:	af 92       	push	r10
     77c:	bf 92       	push	r11
     77e:	cf 92       	push	r12
     780:	df 92       	push	r13
     782:	ef 92       	push	r14
     784:	ff 92       	push	r15
     786:	0f 93       	push	r16
     788:	1f 93       	push	r17
     78a:	df 93       	push	r29
     78c:	cf 93       	push	r28
     78e:	cd b7       	in	r28, 0x3d	; 61
     790:	de b7       	in	r29, 0x3e	; 62
     792:	c4 50       	subi	r28, 0x04	; 4
     794:	d2 40       	sbci	r29, 0x02	; 2
     796:	0f b6       	in	r0, 0x3f	; 63
     798:	f8 94       	cli
     79a:	de bf       	out	0x3e, r29	; 62
     79c:	0f be       	out	0x3f, r0	; 63
     79e:	cd bf       	out	0x3d, r28	; 61
	uint8_t  ConfigDescriptorData[512];
	void*    CurrConfigLocation = ConfigDescriptorData;
     7a0:	ae 01       	movw	r20, r28
     7a2:	4b 5f       	subi	r20, 0xFB	; 251
     7a4:	5f 4f       	sbci	r21, 0xFF	; 255
     7a6:	5a 83       	std	Y+2, r21	; 0x02
     7a8:	49 83       	std	Y+1, r20	; 0x01
	USB_Descriptor_Interface_t* HIDInterface   = NULL;
	USB_HID_Descriptor_HID_t*   HIDDescriptor  = NULL;
	USB_Descriptor_Endpoint_t*  DataINEndpoint = NULL;

	/* Retrieve the entire configuration descriptor into the allocated buffer */
	switch (USB_Host_GetDeviceConfigDescriptor(1, &CurrConfigBytesRem, ConfigDescriptorData, sizeof(ConfigDescriptorData)))
     7aa:	83 e0       	ldi	r24, 0x03	; 3
     7ac:	c8 2e       	mov	r12, r24
     7ae:	d1 2c       	mov	r13, r1
     7b0:	cc 0e       	add	r12, r28
     7b2:	dd 1e       	adc	r13, r29
     7b4:	81 e0       	ldi	r24, 0x01	; 1
     7b6:	b6 01       	movw	r22, r12
     7b8:	20 e0       	ldi	r18, 0x00	; 0
     7ba:	32 e0       	ldi	r19, 0x02	; 2
     7bc:	f0 d4       	rcall	.+2528   	; 0x119e <USB_Host_GetDeviceConfigDescriptor>
     7be:	85 30       	cpi	r24, 0x05	; 5
     7c0:	29 f0       	breq	.+10     	; 0x7cc <ProcessConfigurationDescriptor+0x56>
     7c2:	86 30       	cpi	r24, 0x06	; 6
     7c4:	79 f0       	breq	.+30     	; 0x7e4 <ProcessConfigurationDescriptor+0x6e>
     7c6:	88 23       	and	r24, r24
     7c8:	19 f0       	breq	.+6      	; 0x7d0 <ProcessConfigurationDescriptor+0x5a>
     7ca:	0e c0       	rjmp	.+28     	; 0x7e8 <ProcessConfigurationDescriptor+0x72>
     7cc:	82 e0       	ldi	r24, 0x02	; 2
     7ce:	4d c0       	rjmp	.+154    	; 0x86a <ProcessConfigurationDescriptor+0xf4>
     7d0:	00 e0       	ldi	r16, 0x00	; 0
     7d2:	10 e0       	ldi	r17, 0x00	; 0
     7d4:	88 24       	eor	r8, r8
     7d6:	99 24       	eor	r9, r9
	}

	while (!(DataINEndpoint))
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(HIDInterface) ||
     7d8:	56 01       	movw	r10, r12
     7da:	7e 01       	movw	r14, r28
     7dc:	08 94       	sec
     7de:	e1 1c       	adc	r14, r1
     7e0:	f1 1c       	adc	r15, r1
     7e2:	04 c0       	rjmp	.+8      	; 0x7ec <ProcessConfigurationDescriptor+0x76>
	USB_Descriptor_Interface_t* HIDInterface   = NULL;
	USB_HID_Descriptor_HID_t*   HIDDescriptor  = NULL;
	USB_Descriptor_Endpoint_t*  DataINEndpoint = NULL;

	/* Retrieve the entire configuration descriptor into the allocated buffer */
	switch (USB_Host_GetDeviceConfigDescriptor(1, &CurrConfigBytesRem, ConfigDescriptorData, sizeof(ConfigDescriptorData)))
     7e4:	83 e0       	ldi	r24, 0x03	; 3
     7e6:	41 c0       	rjmp	.+130    	; 0x86a <ProcessConfigurationDescriptor+0xf4>
     7e8:	81 e0       	ldi	r24, 0x01	; 1
     7ea:	3f c0       	rjmp	.+126    	; 0x86a <ProcessConfigurationDescriptor+0xf4>
	}

	while (!(DataINEndpoint))
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(HIDInterface) ||
     7ec:	01 15       	cp	r16, r1
     7ee:	11 05       	cpc	r17, r1
     7f0:	39 f0       	breq	.+14     	; 0x800 <ProcessConfigurationDescriptor+0x8a>
     7f2:	c5 01       	movw	r24, r10
     7f4:	b7 01       	movw	r22, r14
     7f6:	47 ea       	ldi	r20, 0xA7	; 167
     7f8:	53 e0       	ldi	r21, 0x03	; 3
     7fa:	8d d4       	rcall	.+2330   	; 0x1116 <USB_GetNextDescriptorComp>
     7fc:	88 23       	and	r24, r24
     7fe:	b9 f0       	breq	.+46     	; 0x82e <ProcessConfigurationDescriptor+0xb8>
		    USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
		                              DComp_NextJoystickInterfaceDataEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			/* Get the next HID interface from the configuration descriptor */
			if (USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     800:	c5 01       	movw	r24, r10
     802:	b7 01       	movw	r22, r14
     804:	4c e9       	ldi	r20, 0x9C	; 156
     806:	53 e0       	ldi	r21, 0x03	; 3
     808:	86 d4       	rcall	.+2316   	; 0x1116 <USB_GetNextDescriptorComp>
     80a:	88 23       	and	r24, r24
     80c:	69 f5       	brne	.+90     	; 0x868 <ProcessConfigurationDescriptor+0xf2>
				/* Descriptor not found, error out */
				return NoCompatibleInterfaceFound;
			}

			/* Save the interface in case we need to refer back to it later */
			HIDInterface = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Interface_t);
     80e:	19 81       	ldd	r17, Y+1	; 0x01
     810:	0a 81       	ldd	r16, Y+2	; 0x02

			/* Get the HID descriptor from the configuration descriptor */
			if (USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     812:	c5 01       	movw	r24, r10
     814:	b7 01       	movw	r22, r14
     816:	43 eb       	ldi	r20, 0xB3	; 179
     818:	53 e0       	ldi	r21, 0x03	; 3
     81a:	7d d4       	rcall	.+2298   	; 0x1116 <USB_GetNextDescriptorComp>
     81c:	88 23       	and	r24, r24
     81e:	21 f5       	brne	.+72     	; 0x868 <ProcessConfigurationDescriptor+0xf2>
				/* Descriptor not found, error out */
				return NoCompatibleInterfaceFound;
			}

			/* Save the interface in case we need to refer back to it later */
			HIDInterface = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Interface_t);
     820:	81 2f       	mov	r24, r17
     822:	90 2f       	mov	r25, r16
     824:	9c 01       	movw	r18, r24
     826:	89 01       	movw	r16, r18
				/* Descriptor not found, error out */
				return NoCompatibleInterfaceFound;
			}

			/* Save the HID descriptor for later use */
			HIDDescriptor = DESCRIPTOR_PCAST(CurrConfigLocation, USB_HID_Descriptor_HID_t);
     828:	89 80       	ldd	r8, Y+1	; 0x01
     82a:	9a 80       	ldd	r9, Y+2	; 0x02
     82c:	df cf       	rjmp	.-66     	; 0x7ec <ProcessConfigurationDescriptor+0x76>
			/* Skip the remainder of the loop as we have not found an endpoint yet */
			continue;
		}

		/* Retrieve the endpoint address from the endpoint descriptor */
		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Endpoint_t);
     82e:	c9 80       	ldd	r12, Y+1	; 0x01
     830:	da 80       	ldd	r13, Y+2	; 0x02

		/* If the endpoint is a IN type endpoint */
		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
     832:	f6 01       	movw	r30, r12
     834:	22 81       	ldd	r18, Z+2	; 0x02
     836:	27 ff       	sbrs	r18, 7
     838:	d9 cf       	rjmp	.-78     	; 0x7ec <ProcessConfigurationDescriptor+0x76>
			return DescriptorTooLarge;
		default:
			return ControlError;
	}

	while (!(DataINEndpoint))
     83a:	c1 14       	cp	r12, r1
     83c:	d1 04       	cpc	r13, r1
     83e:	b1 f2       	breq	.-84     	; 0x7ec <ProcessConfigurationDescriptor+0x76>
		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
		  DataINEndpoint = EndpointData;
	}

	/* Configure the HID data IN pipe */
	Pipe_ConfigurePipe(JOYSTICK_DATA_IN_PIPE, EP_TYPE_INTERRUPT, PIPE_TOKEN_IN,
     840:	04 81       	ldd	r16, Z+4	; 0x04
     842:	15 81       	ldd	r17, Z+5	; 0x05
     844:	81 e0       	ldi	r24, 0x01	; 1
     846:	63 e0       	ldi	r22, 0x03	; 3
     848:	40 e1       	ldi	r20, 0x10	; 16
     84a:	ee 24       	eor	r14, r14
     84c:	5b d2       	rcall	.+1206   	; 0xd04 <Pipe_ConfigurePipe>
	                   DataINEndpoint->EndpointAddress, DataINEndpoint->EndpointSize, PIPE_BANK_SINGLE);
	Pipe_SetInterruptPeriod(DataINEndpoint->PollingIntervalMS);
     84e:	f6 01       	movw	r30, r12
     850:	86 81       	ldd	r24, Z+6	; 0x06
			 *  \param[in] Milliseconds  Number of milliseconds between each pipe poll.
			 */
			static inline void Pipe_SetInterruptPeriod(const uint8_t Milliseconds) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInterruptPeriod(const uint8_t Milliseconds)
			{
				UPCFG2X = Milliseconds;
     852:	80 93 ad 00 	sts	0x00AD, r24

	/* Get the HID report size from the HID report descriptor */
	HIDReportSize = HIDDescriptor->HIDReportLength;
     856:	f4 01       	movw	r30, r8
     858:	87 81       	ldd	r24, Z+7	; 0x07
     85a:	90 85       	ldd	r25, Z+8	; 0x08
     85c:	90 93 ef 04 	sts	0x04EF, r25
     860:	80 93 ee 04 	sts	0x04EE, r24
     864:	80 e0       	ldi	r24, 0x00	; 0
     866:	01 c0       	rjmp	.+2      	; 0x86a <ProcessConfigurationDescriptor+0xf4>

	/* Valid data found, return success */
	return SuccessfulConfigRead;
     868:	84 e0       	ldi	r24, 0x04	; 4
}
     86a:	cc 5f       	subi	r28, 0xFC	; 252
     86c:	dd 4f       	sbci	r29, 0xFD	; 253
     86e:	0f b6       	in	r0, 0x3f	; 63
     870:	f8 94       	cli
     872:	de bf       	out	0x3e, r29	; 62
     874:	0f be       	out	0x3f, r0	; 63
     876:	cd bf       	out	0x3d, r28	; 61
     878:	cf 91       	pop	r28
     87a:	df 91       	pop	r29
     87c:	1f 91       	pop	r17
     87e:	0f 91       	pop	r16
     880:	ff 90       	pop	r15
     882:	ef 90       	pop	r14
     884:	df 90       	pop	r13
     886:	cf 90       	pop	r12
     888:	bf 90       	pop	r11
     88a:	af 90       	pop	r10
     88c:	9f 90       	pop	r9
     88e:	8f 90       	pop	r8
     890:	08 95       	ret

00000892 <CALLBACK_HIDParser_FilterHIDReportItem>:
 *  \param[in] CurrentItem  Pointer to the item the HID report parser is currently working with
 *
 *  \return Boolean true if the item should be stored into the HID report structure, false if it should be discarded
 */
bool CALLBACK_HIDParser_FilterHIDReportItem(HID_ReportItem_t* const CurrentItem)
{
     892:	dc 01       	movw	r26, r24

	/* Iterate through the item's collection path, until either the root collection node or a collection with the
	 * Joystick Usage is found - this prevents Mice, which use identical descriptors except for the Mouse usage
	 * parent node, from being erroneously treated as a joystick
	 */
	for (HID_CollectionPath_t* CurrPath = CurrentItem->CollectionPath; CurrPath != NULL; CurrPath = CurrPath->Parent)
     894:	16 96       	adiw	r26, 0x06	; 6
     896:	ed 91       	ld	r30, X+
     898:	fc 91       	ld	r31, X
     89a:	17 97       	sbiw	r26, 0x07	; 7
     89c:	0b c0       	rjmp	.+22     	; 0x8b4 <CALLBACK_HIDParser_FilterHIDReportItem+0x22>
	{
		if ((CurrPath->Usage.Page  == USAGE_PAGE_GENERIC_DCTRL) &&
     89e:	81 81       	ldd	r24, Z+1	; 0x01
     8a0:	92 81       	ldd	r25, Z+2	; 0x02
     8a2:	01 97       	sbiw	r24, 0x01	; 1
     8a4:	21 f4       	brne	.+8      	; 0x8ae <CALLBACK_HIDParser_FilterHIDReportItem+0x1c>
     8a6:	83 81       	ldd	r24, Z+3	; 0x03
     8a8:	94 81       	ldd	r25, Z+4	; 0x04
     8aa:	04 97       	sbiw	r24, 0x04	; 4
     8ac:	39 f0       	breq	.+14     	; 0x8bc <CALLBACK_HIDParser_FilterHIDReportItem+0x2a>

	/* Iterate through the item's collection path, until either the root collection node or a collection with the
	 * Joystick Usage is found - this prevents Mice, which use identical descriptors except for the Mouse usage
	 * parent node, from being erroneously treated as a joystick
	 */
	for (HID_CollectionPath_t* CurrPath = CurrentItem->CollectionPath; CurrPath != NULL; CurrPath = CurrPath->Parent)
     8ae:	05 80       	ldd	r0, Z+5	; 0x05
     8b0:	f6 81       	ldd	r31, Z+6	; 0x06
     8b2:	e0 2d       	mov	r30, r0
     8b4:	30 97       	sbiw	r30, 0x00	; 0
     8b6:	99 f7       	brne	.-26     	; 0x89e <CALLBACK_HIDParser_FilterHIDReportItem+0xc>
     8b8:	80 e0       	ldi	r24, 0x00	; 0
     8ba:	08 95       	ret

	/* Check the attributes of the current joystick item - see if we are interested in it or not;
	 * only store BUTTON and GENERIC_DESKTOP_CONTROL items into the Processed HID Report
	 * structure to save RAM and ignore the rest
	 */
	return ((CurrentItem->Attributes.Usage.Page == USAGE_PAGE_BUTTON) ||
     8bc:	19 96       	adiw	r26, 0x09	; 9
     8be:	8d 91       	ld	r24, X+
     8c0:	9c 91       	ld	r25, X
     8c2:	1a 97       	sbiw	r26, 0x0a	; 10
     8c4:	89 30       	cpi	r24, 0x09	; 9
     8c6:	91 05       	cpc	r25, r1
     8c8:	21 f0       	breq	.+8      	; 0x8d2 <CALLBACK_HIDParser_FilterHIDReportItem+0x40>
     8ca:	20 e0       	ldi	r18, 0x00	; 0
     8cc:	30 e0       	ldi	r19, 0x00	; 0
     8ce:	01 97       	sbiw	r24, 0x01	; 1
     8d0:	11 f4       	brne	.+4      	; 0x8d6 <CALLBACK_HIDParser_FilterHIDReportItem+0x44>
     8d2:	21 e0       	ldi	r18, 0x01	; 1
     8d4:	30 e0       	ldi	r19, 0x00	; 0
     8d6:	82 2f       	mov	r24, r18
	        (CurrentItem->Attributes.Usage.Page == USAGE_PAGE_GENERIC_DCTRL));
}
     8d8:	08 95       	ret

000008da <GetHIDReportData>:
 *  structures via the HID parser routines in the LUFA library.
 *
 *  \return  A value from the \ref JoystickHostWithParser_GetHIDReportDataCodes_t enum
 */
uint8_t GetHIDReportData(void)
{
     8da:	ef 92       	push	r14
     8dc:	ff 92       	push	r15
     8de:	0f 93       	push	r16
     8e0:	1f 93       	push	r17
     8e2:	df 93       	push	r29
     8e4:	cf 93       	push	r28
     8e6:	cd b7       	in	r28, 0x3d	; 61
     8e8:	de b7       	in	r29, 0x3e	; 62
	/* Send the HID report to the parser for processing */
	if (USB_ProcessHIDReport(HIDReportData, HIDReportSize, &HIDReportInfo) != HID_PARSE_Successful)
	  return ParseError;

	return ParseSuccessful;
}
     8ea:	ed b6       	in	r14, 0x3d	; 61
     8ec:	fe b6       	in	r15, 0x3e	; 62
 *  \return  A value from the \ref JoystickHostWithParser_GetHIDReportDataCodes_t enum
 */
uint8_t GetHIDReportData(void)
{
	/* Create a buffer big enough to hold the entire returned HID report */
	uint8_t HIDReportData[HIDReportSize];
     8ee:	20 91 ee 04 	lds	r18, 0x04EE
     8f2:	30 91 ef 04 	lds	r19, 0x04EF
     8f6:	8d b7       	in	r24, 0x3d	; 61
     8f8:	9e b7       	in	r25, 0x3e	; 62
     8fa:	82 1b       	sub	r24, r18
     8fc:	93 0b       	sbc	r25, r19
     8fe:	0f b6       	in	r0, 0x3f	; 63
     900:	f8 94       	cli
     902:	9e bf       	out	0x3e, r25	; 62
     904:	0f be       	out	0x3f, r0	; 63
     906:	8d bf       	out	0x3d, r24	; 61
     908:	0d b7       	in	r16, 0x3d	; 61
     90a:	1e b7       	in	r17, 0x3e	; 62
     90c:	0f 5f       	subi	r16, 0xFF	; 255
     90e:	1f 4f       	sbci	r17, 0xFF	; 255

	USB_ControlRequest = (USB_Request_Header_t)
     910:	81 e8       	ldi	r24, 0x81	; 129
     912:	80 93 f2 04 	sts	0x04F2, r24
     916:	86 e0       	ldi	r24, 0x06	; 6
     918:	80 93 f3 04 	sts	0x04F3, r24
     91c:	80 e0       	ldi	r24, 0x00	; 0
     91e:	92 e2       	ldi	r25, 0x22	; 34
     920:	90 93 f5 04 	sts	0x04F5, r25
     924:	80 93 f4 04 	sts	0x04F4, r24
     928:	10 92 f7 04 	sts	0x04F7, r1
     92c:	10 92 f6 04 	sts	0x04F6, r1
     930:	30 93 f9 04 	sts	0x04F9, r19
     934:	20 93 f8 04 	sts	0x04F8, r18
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     938:	10 92 a7 00 	sts	0x00A7, r1

	/* Select the control pipe for the request transfer */
	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	/* Send control request to retrieve the HID report from the attached device */
	if (USB_Host_SendControlRequest(HIDReportData) != HOST_SENDCONTROL_Successful)
     93c:	c8 01       	movw	r24, r16
     93e:	b3 d4       	rcall	.+2406   	; 0x12a6 <USB_Host_SendControlRequest>
     940:	88 23       	and	r24, r24
     942:	11 f0       	breq	.+4      	; 0x948 <GetHIDReportData+0x6e>
     944:	82 e0       	ldi	r24, 0x02	; 2
     946:	0a c0       	rjmp	.+20     	; 0x95c <GetHIDReportData+0x82>
	  return ParseControlError;

	/* Send the HID report to the parser for processing */
	if (USB_ProcessHIDReport(HIDReportData, HIDReportSize, &HIDReportInfo) != HID_PARSE_Successful)
     948:	60 91 ee 04 	lds	r22, 0x04EE
     94c:	70 91 ef 04 	lds	r23, 0x04EF
     950:	c8 01       	movw	r24, r16
     952:	45 e1       	ldi	r20, 0x15	; 21
     954:	51 e0       	ldi	r21, 0x01	; 1
     956:	4c d6       	rcall	.+3224   	; 0x15f0 <USB_ProcessHIDReport>
     958:	81 11       	cpse	r24, r1
     95a:	81 e0       	ldi	r24, 0x01	; 1
	  return ParseError;

	return ParseSuccessful;
}
     95c:	0f b6       	in	r0, 0x3f	; 63
     95e:	f8 94       	cli
     960:	fe be       	out	0x3e, r15	; 62
     962:	0f be       	out	0x3f, r0	; 63
     964:	ed be       	out	0x3d, r14	; 61
     966:	cf 91       	pop	r28
     968:	df 91       	pop	r29
     96a:	1f 91       	pop	r17
     96c:	0f 91       	pop	r16
     96e:	ff 90       	pop	r15
     970:	ef 90       	pop	r14
     972:	08 95       	ret

00000974 <USB_Host_WaitMS>:
		USB_ResetInterface();
	}
}

uint8_t USB_Host_WaitMS(uint8_t MS)
{
     974:	98 2f       	mov	r25, r24
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     976:	20 91 9e 00 	lds	r18, 0x009E
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     97a:	30 91 a0 00 	lds	r19, 0x00A0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     97e:	80 91 a0 00 	lds	r24, 0x00A0
     982:	8f 7d       	andi	r24, 0xDF	; 223
     984:	80 93 a0 00 	sts	0x00A0, r24
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     988:	80 91 9f 00 	lds	r24, 0x009F
     98c:	8f 7d       	andi	r24, 0xDF	; 223
     98e:	80 93 9f 00 	sts	0x009F, r24
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     992:	80 91 9e 00 	lds	r24, 0x009E
     996:	81 60       	ori	r24, 0x01	; 1
     998:	80 93 9e 00 	sts	0x009E, r24
     99c:	28 c0       	rjmp	.+80     	; 0x9ee <USB_Host_WaitMS+0x7a>
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     99e:	80 91 9f 00 	lds	r24, 0x009F

	USB_Host_ResumeBus();

	while (MS)
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     9a2:	85 ff       	sbrs	r24, 5
     9a4:	06 c0       	rjmp	.+12     	; 0x9b2 <USB_Host_WaitMS+0x3e>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     9a6:	80 91 9f 00 	lds	r24, 0x009F
     9aa:	8f 7d       	andi	r24, 0xDF	; 223
     9ac:	80 93 9f 00 	sts	0x009F, r24
		{
			USB_INT_Clear(USB_INT_HSOFI);
			MS--;
     9b0:	91 50       	subi	r25, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
     9b2:	80 91 fa 04 	lds	r24, 0x04FA
     9b6:	81 30       	cpi	r24, 0x01	; 1
     9b8:	11 f4       	brne	.+4      	; 0x9be <USB_Host_WaitMS+0x4a>
     9ba:	91 e0       	ldi	r25, 0x01	; 1
     9bc:	1a c0       	rjmp	.+52     	; 0x9f2 <USB_Host_WaitMS+0x7e>
			 *  \return Boolean \c true if an error has occurred on the selected pipe, \c false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
     9be:	80 91 a6 00 	lds	r24, 0x00A6
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError() == true)
     9c2:	84 ff       	sbrs	r24, 4
     9c4:	09 c0       	rjmp	.+18     	; 0x9d8 <USB_Host_WaitMS+0x64>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     9c6:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
     9ca:	80 91 a6 00 	lds	r24, 0x00A6
     9ce:	8f 7e       	andi	r24, 0xEF	; 239
     9d0:	80 93 a6 00 	sts	0x00A6, r24
     9d4:	92 e0       	ldi	r25, 0x02	; 2
     9d6:	0d c0       	rjmp	.+26     	; 0x9f2 <USB_Host_WaitMS+0x7e>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     9d8:	80 91 a6 00 	lds	r24, 0x00A6
			ErrorCode = HOST_WAITERROR_PipeError;

			break;
		}

		if (Pipe_IsStalled() == true)
     9dc:	81 ff       	sbrs	r24, 1
     9de:	07 c0       	rjmp	.+14     	; 0x9ee <USB_Host_WaitMS+0x7a>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
     9e0:	80 91 a6 00 	lds	r24, 0x00A6
     9e4:	8d 7f       	andi	r24, 0xFD	; 253
     9e6:	80 93 a6 00 	sts	0x00A6, r24
     9ea:	93 e0       	ldi	r25, 0x03	; 3
     9ec:	02 c0       	rjmp	.+4      	; 0x9f2 <USB_Host_WaitMS+0x7e>
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     9ee:	99 23       	and	r25, r25
     9f0:	b1 f6       	brne	.-84     	; 0x99e <USB_Host_WaitMS+0x2a>

			break;
		}
	}

	if (BusSuspended)
     9f2:	20 fd       	sbrc	r18, 0
     9f4:	05 c0       	rjmp	.+10     	; 0xa00 <USB_Host_WaitMS+0x8c>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     9f6:	80 91 9e 00 	lds	r24, 0x009E
     9fa:	8e 7f       	andi	r24, 0xFE	; 254
     9fc:	80 93 9e 00 	sts	0x009E, r24
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
     a00:	35 ff       	sbrs	r19, 5
     a02:	05 c0       	rjmp	.+10     	; 0xa0e <USB_Host_WaitMS+0x9a>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     a04:	80 91 a0 00 	lds	r24, 0x00A0
     a08:	80 62       	ori	r24, 0x20	; 32
     a0a:	80 93 a0 00 	sts	0x00A0, r24
	  USB_INT_Enable(USB_INT_HSOFI);

	return ErrorCode;
}
     a0e:	89 2f       	mov	r24, r25
     a10:	08 95       	ret

00000a12 <USB_Host_ResetDevice>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     a12:	60 91 9e 00 	lds	r22, 0x009E
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     a16:	80 91 a0 00 	lds	r24, 0x00A0
     a1a:	8d 7f       	andi	r24, 0xFD	; 253
     a1c:	80 93 a0 00 	sts	0x00A0, r24
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
     a20:	80 91 9e 00 	lds	r24, 0x009E
     a24:	82 60       	ori	r24, 0x02	; 2
     a26:	80 93 9e 00 	sts	0x009E, r24
			 *  \return Boolean \c true if no bus reset is currently being sent, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
     a2a:	80 91 9e 00 	lds	r24, 0x009E
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
     a2e:	81 fd       	sbrc	r24, 1
     a30:	fc cf       	rjmp	.-8      	; 0xa2a <USB_Host_ResetDevice+0x18>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     a32:	80 91 9e 00 	lds	r24, 0x009E
     a36:	81 60       	ori	r24, 0x01	; 1
     a38:	80 93 9e 00 	sts	0x009E, r24
	USB_Host_ResumeBus();
	
	USB_Host_ConfigurationNumber = 0;
     a3c:	10 92 f0 04 	sts	0x04F0, r1
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     a40:	30 91 a0 00 	lds	r19, 0x00A0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     a44:	80 91 a0 00 	lds	r24, 0x00A0
     a48:	8f 7d       	andi	r24, 0xDF	; 223
     a4a:	80 93 a0 00 	sts	0x00A0, r24
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     a4e:	80 91 9f 00 	lds	r24, 0x009F
     a52:	8f 7d       	andi	r24, 0xDF	; 223
     a54:	80 93 9f 00 	sts	0x009F, r24
     a58:	2a e0       	ldi	r18, 0x0A	; 10
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     a5a:	40 ed       	ldi	r20, 0xD0	; 208
     a5c:	57 e0       	ldi	r21, 0x07	; 7
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     a5e:	80 91 9f 00 	lds	r24, 0x009F
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     a62:	85 ff       	sbrs	r24, 5
     a64:	0b c0       	rjmp	.+22     	; 0xa7c <USB_Host_ResetDevice+0x6a>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     a66:	80 91 9f 00 	lds	r24, 0x009F
     a6a:	8f 7d       	andi	r24, 0xDF	; 223
     a6c:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     a70:	80 91 9f 00 	lds	r24, 0x009F
     a74:	8d 7f       	andi	r24, 0xFD	; 253
     a76:	80 93 9f 00 	sts	0x009F, r24
     a7a:	05 c0       	rjmp	.+10     	; 0xa86 <USB_Host_ResetDevice+0x74>
     a7c:	ca 01       	movw	r24, r20
     a7e:	01 97       	sbiw	r24, 0x01	; 1
     a80:	f1 f7       	brne	.-4      	; 0xa7e <USB_Host_ResetDevice+0x6c>
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
     a82:	21 50       	subi	r18, 0x01	; 1
     a84:	61 f7       	brne	.-40     	; 0xa5e <USB_Host_ResetDevice+0x4c>
		}

		Delay_MS(1);
	}

	if (HSOFIEnabled)
     a86:	35 ff       	sbrs	r19, 5
     a88:	05 c0       	rjmp	.+10     	; 0xa94 <USB_Host_ResetDevice+0x82>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     a8a:	80 91 a0 00 	lds	r24, 0x00A0
     a8e:	80 62       	ori	r24, 0x20	; 32
     a90:	80 93 a0 00 	sts	0x00A0, r24
	  USB_INT_Enable(USB_INT_HSOFI);

	if (BusSuspended)
     a94:	60 fd       	sbrc	r22, 0
     a96:	05 c0       	rjmp	.+10     	; 0xaa2 <USB_Host_ResetDevice+0x90>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     a98:	80 91 9e 00 	lds	r24, 0x009E
     a9c:	8e 7f       	andi	r24, 0xFE	; 254
     a9e:	80 93 9e 00 	sts	0x009E, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     aa2:	80 91 a0 00 	lds	r24, 0x00A0
     aa6:	82 60       	ori	r24, 0x02	; 2
     aa8:	80 93 a0 00 	sts	0x00A0, r24
	  USB_Host_SuspendBus();

	USB_INT_Enable(USB_INT_DDISCI);
}
     aac:	08 95       	ret

00000aae <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "../Host.h"

void USB_Host_ProcessNextHostState(void)
{
     aae:	ef 92       	push	r14
     ab0:	0f 93       	push	r16
     ab2:	1f 93       	push	r17
     ab4:	df 93       	push	r29
     ab6:	cf 93       	push	r28
     ab8:	cd b7       	in	r28, 0x3d	; 61
     aba:	de b7       	in	r29, 0x3e	; 62
     abc:	28 97       	sbiw	r28, 0x08	; 8
     abe:	0f b6       	in	r0, 0x3f	; 63
     ac0:	f8 94       	cli
     ac2:	de bf       	out	0x3e, r29	; 62
     ac4:	0f be       	out	0x3f, r0	; 63
     ac6:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
     ac8:	80 91 fa 04 	lds	r24, 0x04FA
     acc:	85 30       	cpi	r24, 0x05	; 5
     ace:	09 f4       	brne	.+2      	; 0xad2 <USB_Host_ProcessNextHostState+0x24>
     ad0:	94 c0       	rjmp	.+296    	; 0xbfa <USB_Host_ProcessNextHostState+0x14c>
     ad2:	86 30       	cpi	r24, 0x06	; 6
     ad4:	68 f4       	brcc	.+26     	; 0xaf0 <USB_Host_ProcessNextHostState+0x42>
     ad6:	82 30       	cpi	r24, 0x02	; 2
     ad8:	b9 f1       	breq	.+110    	; 0xb48 <USB_Host_ProcessNextHostState+0x9a>
     ada:	83 30       	cpi	r24, 0x03	; 3
     adc:	18 f4       	brcc	.+6      	; 0xae4 <USB_Host_ProcessNextHostState+0x36>
     ade:	88 23       	and	r24, r24
     ae0:	a1 f0       	breq	.+40     	; 0xb0a <USB_Host_ProcessNextHostState+0x5c>
     ae2:	04 c1       	rjmp	.+520    	; 0xcec <USB_Host_ProcessNextHostState+0x23e>
     ae4:	83 30       	cpi	r24, 0x03	; 3
     ae6:	d1 f1       	breq	.+116    	; 0xb5c <USB_Host_ProcessNextHostState+0xae>
     ae8:	84 30       	cpi	r24, 0x04	; 4
     aea:	09 f0       	breq	.+2      	; 0xaee <USB_Host_ProcessNextHostState+0x40>
     aec:	ff c0       	rjmp	.+510    	; 0xcec <USB_Host_ProcessNextHostState+0x23e>
     aee:	5d c0       	rjmp	.+186    	; 0xbaa <USB_Host_ProcessNextHostState+0xfc>
     af0:	87 30       	cpi	r24, 0x07	; 7
     af2:	09 f4       	brne	.+2      	; 0xaf6 <USB_Host_ProcessNextHostState+0x48>
     af4:	9b c0       	rjmp	.+310    	; 0xc2c <USB_Host_ProcessNextHostState+0x17e>
     af6:	87 30       	cpi	r24, 0x07	; 7
     af8:	08 f4       	brcc	.+2      	; 0xafc <USB_Host_ProcessNextHostState+0x4e>
     afa:	8a c0       	rjmp	.+276    	; 0xc10 <USB_Host_ProcessNextHostState+0x162>
     afc:	88 30       	cpi	r24, 0x08	; 8
     afe:	09 f4       	brne	.+2      	; 0xb02 <USB_Host_ProcessNextHostState+0x54>
     b00:	b3 c0       	rjmp	.+358    	; 0xc68 <USB_Host_ProcessNextHostState+0x1ba>
     b02:	89 30       	cpi	r24, 0x09	; 9
     b04:	09 f0       	breq	.+2      	; 0xb08 <USB_Host_ProcessNextHostState+0x5a>
     b06:	f2 c0       	rjmp	.+484    	; 0xcec <USB_Host_ProcessNextHostState+0x23e>
     b08:	d7 c0       	rjmp	.+430    	; 0xcb8 <USB_Host_ProcessNextHostState+0x20a>
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
     b0a:	00 91 13 01 	lds	r16, 0x0113
     b0e:	10 91 14 01 	lds	r17, 0x0114
     b12:	01 15       	cp	r16, r1
     b14:	11 05       	cpc	r17, r1
     b16:	09 f4       	brne	.+2      	; 0xb1a <USB_Host_ProcessNextHostState+0x6c>
     b18:	e9 c0       	rjmp	.+466    	; 0xcec <USB_Host_ProcessNextHostState+0x23e>
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     b1a:	81 e0       	ldi	r24, 0x01	; 1
     b1c:	2b df       	rcall	.-426    	; 0x974 <USB_Host_WaitMS>
     b1e:	68 2f       	mov	r22, r24
     b20:	88 23       	and	r24, r24
     b22:	31 f0       	breq	.+12     	; 0xb30 <USB_Host_ProcessNextHostState+0x82>
				{
					USB_HostState = PostWaitState;
     b24:	80 91 12 01 	lds	r24, 0x0112
     b28:	80 93 fa 04 	sts	0x04FA, r24
     b2c:	91 e0       	ldi	r25, 0x01	; 1
     b2e:	da c0       	rjmp	.+436    	; 0xce4 <USB_Host_ProcessNextHostState+0x236>
					ErrorCode     = HOST_ENUMERROR_WaitStage;
					break;
				}

				if (!(--WaitMSRemaining))
     b30:	c8 01       	movw	r24, r16
     b32:	01 97       	sbiw	r24, 0x01	; 1
     b34:	90 93 14 01 	sts	0x0114, r25
     b38:	80 93 13 01 	sts	0x0113, r24
     b3c:	89 2b       	or	r24, r25
     b3e:	09 f0       	breq	.+2      	; 0xb42 <USB_Host_ProcessNextHostState+0x94>
     b40:	d5 c0       	rjmp	.+426    	; 0xcec <USB_Host_ProcessNextHostState+0x23e>
				  USB_HostState = PostWaitState;
     b42:	80 91 12 01 	lds	r24, 0x0112
     b46:	07 c0       	rjmp	.+14     	; 0xb56 <USB_Host_ProcessNextHostState+0xa8>
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
     b48:	88 ee       	ldi	r24, 0xE8	; 232
     b4a:	93 e0       	ldi	r25, 0x03	; 3
     b4c:	90 93 14 01 	sts	0x0114, r25
     b50:	80 93 13 01 	sts	0x0113, r24

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
     b54:	83 e0       	ldi	r24, 0x03	; 3
     b56:	80 93 fa 04 	sts	0x04FA, r24
     b5a:	c8 c0       	rjmp	.+400    	; 0xcec <USB_Host_ProcessNextHostState+0x23e>
			break;
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
     b5c:	80 91 13 01 	lds	r24, 0x0113
     b60:	90 91 14 01 	lds	r25, 0x0114
     b64:	01 97       	sbiw	r24, 0x01	; 1
     b66:	90 93 14 01 	sts	0x0114, r25
     b6a:	80 93 13 01 	sts	0x0113, r24
     b6e:	01 96       	adiw	r24, 0x01	; 1
     b70:	29 f0       	breq	.+10     	; 0xb7c <USB_Host_ProcessNextHostState+0xce>
     b72:	80 ed       	ldi	r24, 0xD0	; 208
     b74:	97 e0       	ldi	r25, 0x07	; 7
     b76:	01 97       	sbiw	r24, 0x01	; 1
     b78:	f1 f7       	brne	.-4      	; 0xb76 <USB_Host_ProcessNextHostState+0xc8>
     b7a:	b8 c0       	rjmp	.+368    	; 0xcec <USB_Host_ProcessNextHostState+0x23e>
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
     b7c:	77 98       	cbi	0x0e, 7	; 14

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     b7e:	80 91 d8 00 	lds	r24, 0x00D8
     b82:	80 61       	ori	r24, 0x10	; 16
     b84:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
     b88:	80 91 dd 00 	lds	r24, 0x00DD
     b8c:	8b 7f       	andi	r24, 0xFB	; 251
     b8e:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON |=  (1 << UVCONE);
     b92:	80 91 d7 00 	lds	r24, 0x00D7
     b96:	80 61       	ori	r24, 0x10	; 16
     b98:	80 93 d7 00 	sts	0x00D7, r24
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
     b9c:	80 91 dd 00 	lds	r24, 0x00DD
     ba0:	82 60       	ori	r24, 0x02	; 2
     ba2:	80 93 dd 00 	sts	0x00DD, r24

				USB_OTGPAD_On();
				USB_Host_VBUS_Auto_Enable();
				USB_Host_VBUS_Auto_On();

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
     ba6:	84 e0       	ldi	r24, 0x04	; 4
     ba8:	d6 cf       	rjmp	.-84     	; 0xb56 <USB_Host_ProcessNextHostState+0xa8>
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
     baa:	80 91 9f 00 	lds	r24, 0x009F
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
     bae:	80 ff       	sbrs	r24, 0
     bb0:	9d c0       	rjmp	.+314    	; 0xcec <USB_Host_ProcessNextHostState+0x23e>
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     bb2:	80 91 9f 00 	lds	r24, 0x009F
     bb6:	8e 7f       	andi	r24, 0xFE	; 254
     bb8:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     bbc:	80 91 9f 00 	lds	r24, 0x009F
     bc0:	8d 7f       	andi	r24, 0xFD	; 253
     bc2:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     bc6:	80 91 df 00 	lds	r24, 0x00DF
     bca:	8d 7f       	andi	r24, 0xFD	; 253
     bcc:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
     bd0:	80 91 de 00 	lds	r24, 0x00DE
     bd4:	82 60       	ori	r24, 0x02	; 2
     bd6:	80 93 de 00 	sts	0x00DE, r24
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     bda:	80 91 9e 00 	lds	r24, 0x009E
     bde:	81 60       	ori	r24, 0x01	; 1
     be0:	80 93 9e 00 	sts	0x009E, r24

				USB_INT_Clear(USB_INT_VBERRI);
				USB_INT_Enable(USB_INT_VBERRI);

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
     be4:	ed d0       	rcall	.+474    	; 0xdc0 <Pipe_ClearPipes>

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
     be6:	10 92 fa 04 	sts	0x04FA, r1
     bea:	84 e6       	ldi	r24, 0x64	; 100
     bec:	90 e0       	ldi	r25, 0x00	; 0
     bee:	90 93 14 01 	sts	0x0114, r25
     bf2:	80 93 13 01 	sts	0x0113, r24
     bf6:	85 e0       	ldi	r24, 0x05	; 5
     bf8:	5c c0       	rjmp	.+184    	; 0xcb2 <USB_Host_ProcessNextHostState+0x204>
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
     bfa:	0b df       	rcall	.-490    	; 0xa12 <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
     bfc:	10 92 fa 04 	sts	0x04FA, r1
     c00:	88 ec       	ldi	r24, 0xC8	; 200
     c02:	90 e0       	ldi	r25, 0x00	; 0
     c04:	90 93 14 01 	sts	0x0114, r25
     c08:	80 93 13 01 	sts	0x0113, r24
     c0c:	86 e0       	ldi	r24, 0x06	; 6
     c0e:	51 c0       	rjmp	.+162    	; 0xcb2 <USB_Host_ProcessNextHostState+0x204>
			break;
		case HOST_STATE_Powered_ConfigPipe:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
     c10:	80 e0       	ldi	r24, 0x00	; 0
     c12:	60 e0       	ldi	r22, 0x00	; 0
     c14:	40 e0       	ldi	r20, 0x00	; 0
     c16:	20 e0       	ldi	r18, 0x00	; 0
     c18:	00 e4       	ldi	r16, 0x40	; 64
     c1a:	10 e0       	ldi	r17, 0x00	; 0
     c1c:	ee 24       	eor	r14, r14
     c1e:	72 d0       	rcall	.+228    	; 0xd04 <Pipe_ConfigurePipe>
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     c20:	80 91 ac 00 	lds	r24, 0x00AC
							   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
							   PIPE_CONTROLPIPE_DEFAULT_SIZE, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
     c24:	87 ff       	sbrs	r24, 7
     c26:	5c c0       	rjmp	.+184    	; 0xce0 <USB_Host_ProcessNextHostState+0x232>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
     c28:	87 e0       	ldi	r24, 0x07	; 7
     c2a:	95 cf       	rjmp	.-214    	; 0xb56 <USB_Host_ProcessNextHostState+0xa8>
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
     c2c:	a2 ef       	ldi	r26, 0xF2	; 242
     c2e:	b4 e0       	ldi	r27, 0x04	; 4
     c30:	e8 e0       	ldi	r30, 0x08	; 8
     c32:	f1 e0       	ldi	r31, 0x01	; 1
     c34:	88 e0       	ldi	r24, 0x08	; 8
     c36:	01 90       	ld	r0, Z+
     c38:	0d 92       	st	X+, r0
     c3a:	81 50       	subi	r24, 0x01	; 1
     c3c:	e1 f7       	brne	.-8      	; 0xc36 <USB_Host_ProcessNextHostState+0x188>
					.wLength       = 8,
				};

			uint8_t DataBuffer[8];

			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
     c3e:	ce 01       	movw	r24, r28
     c40:	01 96       	adiw	r24, 0x01	; 1
     c42:	31 d3       	rcall	.+1634   	; 0x12a6 <USB_Host_SendControlRequest>
     c44:	68 2f       	mov	r22, r24
     c46:	88 23       	and	r24, r24
     c48:	09 f0       	breq	.+2      	; 0xc4c <USB_Host_ProcessNextHostState+0x19e>
     c4a:	48 c0       	rjmp	.+144    	; 0xcdc <USB_Host_ProcessNextHostState+0x22e>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_Host_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
     c4c:	88 85       	ldd	r24, Y+8	; 0x08
     c4e:	80 93 10 01 	sts	0x0110, r24

			USB_Host_ResetDevice();
     c52:	df de       	rcall	.-578    	; 0xa12 <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
     c54:	10 92 fa 04 	sts	0x04FA, r1
     c58:	88 ec       	ldi	r24, 0xC8	; 200
     c5a:	90 e0       	ldi	r25, 0x00	; 0
     c5c:	90 93 14 01 	sts	0x0114, r25
     c60:	80 93 13 01 	sts	0x0113, r24
     c64:	88 e0       	ldi	r24, 0x08	; 8
     c66:	25 c0       	rjmp	.+74     	; 0xcb2 <USB_Host_ProcessNextHostState+0x204>
			break;
		case HOST_STATE_Default_PostReset:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
     c68:	00 91 10 01 	lds	r16, 0x0110
     c6c:	80 e0       	ldi	r24, 0x00	; 0
     c6e:	60 e0       	ldi	r22, 0x00	; 0
     c70:	40 e0       	ldi	r20, 0x00	; 0
     c72:	20 e0       	ldi	r18, 0x00	; 0
     c74:	10 e0       	ldi	r17, 0x00	; 0
     c76:	ee 24       	eor	r14, r14
     c78:	45 d0       	rcall	.+138    	; 0xd04 <Pipe_ConfigurePipe>
     c7a:	80 91 ac 00 	lds	r24, 0x00AC
			                   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
			                   USB_Host_ControlPipeSize, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
     c7e:	87 ff       	sbrs	r24, 7
     c80:	2f c0       	rjmp	.+94     	; 0xce0 <USB_Host_ProcessNextHostState+0x232>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
     c82:	a2 ef       	ldi	r26, 0xF2	; 242
     c84:	b4 e0       	ldi	r27, 0x04	; 4
     c86:	e0 e0       	ldi	r30, 0x00	; 0
     c88:	f1 e0       	ldi	r31, 0x01	; 1
     c8a:	88 e0       	ldi	r24, 0x08	; 8
     c8c:	01 90       	ld	r0, Z+
     c8e:	0d 92       	st	X+, r0
     c90:	81 50       	subi	r24, 0x01	; 1
     c92:	e1 f7       	brne	.-8      	; 0xc8c <USB_Host_ProcessNextHostState+0x1de>
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
     c94:	80 e0       	ldi	r24, 0x00	; 0
     c96:	90 e0       	ldi	r25, 0x00	; 0
     c98:	06 d3       	rcall	.+1548   	; 0x12a6 <USB_Host_SendControlRequest>
     c9a:	68 2f       	mov	r22, r24
     c9c:	88 23       	and	r24, r24
     c9e:	f1 f4       	brne	.+60     	; 0xcdc <USB_Host_ProcessNextHostState+0x22e>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
     ca0:	10 92 fa 04 	sts	0x04FA, r1
     ca4:	84 e6       	ldi	r24, 0x64	; 100
     ca6:	90 e0       	ldi	r25, 0x00	; 0
     ca8:	90 93 14 01 	sts	0x0114, r25
     cac:	80 93 13 01 	sts	0x0113, r24
     cb0:	89 e0       	ldi	r24, 0x09	; 9
     cb2:	80 93 12 01 	sts	0x0112, r24
     cb6:	1a c0       	rjmp	.+52     	; 0xcec <USB_Host_ProcessNextHostState+0x23e>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
     cb8:	81 e0       	ldi	r24, 0x01	; 1
     cba:	80 93 a1 00 	sts	0x00A1, r24
			break;
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			USB_HostState = HOST_STATE_Addressed;
     cbe:	8a e0       	ldi	r24, 0x0A	; 10
     cc0:	80 93 fa 04 	sts	0x04FA, r24

			EVENT_USB_Host_DeviceEnumerationComplete();
     cc4:	57 dc       	rcall	.-1874   	; 0x574 <EVENT_USB_Host_DeviceEnumerationComplete>
     cc6:	12 c0       	rjmp	.+36     	; 0xcec <USB_Host_ProcessNextHostState+0x23e>
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
     cc8:	89 2f       	mov	r24, r25
     cca:	f9 db       	rcall	.-2062   	; 0x4be <EVENT_USB_Host_DeviceEnumerationFailed>
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     ccc:	80 91 dd 00 	lds	r24, 0x00DD
     cd0:	81 60       	ori	r24, 0x01	; 1
     cd2:	80 93 dd 00 	sts	0x00DD, r24

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
     cd6:	3c dc       	rcall	.-1928   	; 0x550 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     cd8:	b6 d0       	rcall	.+364    	; 0xe46 <USB_ResetInterface>
     cda:	08 c0       	rjmp	.+16     	; 0xcec <USB_Host_ProcessNextHostState+0x23e>
	}
}
     cdc:	93 e0       	ldi	r25, 0x03	; 3
     cde:	02 c0       	rjmp	.+4      	; 0xce4 <USB_Host_ProcessNextHostState+0x236>
     ce0:	94 e0       	ldi	r25, 0x04	; 4
     ce2:	60 e0       	ldi	r22, 0x00	; 0

			EVENT_USB_Host_DeviceEnumerationComplete();
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
     ce4:	80 91 fa 04 	lds	r24, 0x04FA
     ce8:	81 30       	cpi	r24, 0x01	; 1
     cea:	71 f7       	brne	.-36     	; 0xcc8 <USB_Host_ProcessNextHostState+0x21a>

		EVENT_USB_Host_DeviceUnattached();

		USB_ResetInterface();
	}
}
     cec:	28 96       	adiw	r28, 0x08	; 8
     cee:	0f b6       	in	r0, 0x3f	; 63
     cf0:	f8 94       	cli
     cf2:	de bf       	out	0x3e, r29	; 62
     cf4:	0f be       	out	0x3f, r0	; 63
     cf6:	cd bf       	out	0x3d, r28	; 61
     cf8:	cf 91       	pop	r28
     cfa:	df 91       	pop	r29
     cfc:	1f 91       	pop	r17
     cfe:	0f 91       	pop	r16
     d00:	ef 90       	pop	r14
     d02:	08 95       	ret

00000d04 <Pipe_ConfigurePipe>:
                        const uint8_t Type,
                        const uint8_t Token,
                        const uint8_t EndpointNumber,
                        const uint16_t Size,
                        const uint8_t Banks)
{
     d04:	ef 92       	push	r14
     d06:	0f 93       	push	r16
     d08:	1f 93       	push	r17
     d0a:	e8 2f       	mov	r30, r24
     d0c:	7e 2d       	mov	r23, r14

		Pipe_SelectPipe(PNum);
		
		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
     d0e:	62 95       	swap	r22
     d10:	66 0f       	add	r22, r22
     d12:	66 0f       	add	r22, r22
     d14:	60 7c       	andi	r22, 0xC0	; 192
     d16:	64 2b       	or	r22, r20
     d18:	2f 70       	andi	r18, 0x0F	; 15
     d1a:	62 2b       	or	r22, r18
     d1c:	38 2f       	mov	r19, r24
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     d1e:	72 60       	ori	r23, 0x02	; 2
     d20:	45 c0       	rjmp	.+138    	; 0xdac <Pipe_ConfigurePipe+0xa8>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     d22:	30 93 a7 00 	sts	0x00A7, r19
		uint8_t UPCFG2XTemp;
		uint8_t UPIENXTemp;

		Pipe_SelectPipe(PNum);
		
		if (PNum == Number)
     d26:	3e 17       	cp	r19, r30
     d28:	a1 f4       	brne	.+40     	; 0xd52 <Pipe_ConfigurePipe+0x4e>
     d2a:	88 e0       	ldi	r24, 0x08	; 8
     d2c:	90 e0       	ldi	r25, 0x00	; 0
     d2e:	20 e0       	ldi	r18, 0x00	; 0
     d30:	03 c0       	rjmp	.+6      	; 0xd38 <Pipe_ConfigurePipe+0x34>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
				{
					MaskVal++;
     d32:	2f 5f       	subi	r18, 0xFF	; 255
					CheckBytes <<= 1;
     d34:	88 0f       	add	r24, r24
     d36:	99 1f       	adc	r25, r25
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
     d38:	80 17       	cp	r24, r16
     d3a:	91 07       	cpc	r25, r17
     d3c:	10 f4       	brcc	.+4      	; 0xd42 <Pipe_ConfigurePipe+0x3e>
     d3e:	25 30       	cpi	r18, 0x05	; 5
     d40:	c1 f7       	brne	.-16     	; 0xd32 <Pipe_ConfigurePipe+0x2e>
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     d42:	92 2f       	mov	r25, r18
     d44:	92 95       	swap	r25
     d46:	90 7f       	andi	r25, 0xF0	; 240
     d48:	97 2b       	or	r25, r23
     d4a:	56 2f       	mov	r21, r22
     d4c:	40 e0       	ldi	r20, 0x00	; 0
     d4e:	20 e0       	ldi	r18, 0x00	; 0
     d50:	08 c0       	rjmp	.+16     	; 0xd62 <Pipe_ConfigurePipe+0x5e>
			UPCFG2XTemp = 0;
			UPIENXTemp  = 0;
		}
		else
		{
			UPCFG0XTemp = UPCFG0X;
     d52:	50 91 aa 00 	lds	r21, 0x00AA
			UPCFG1XTemp = UPCFG1X;
     d56:	90 91 ab 00 	lds	r25, 0x00AB
			UPCFG2XTemp = UPCFG2X;
     d5a:	40 91 ad 00 	lds	r20, 0x00AD
			UPIENXTemp  = UPIENX;
     d5e:	20 91 ae 00 	lds	r18, 0x00AE
		}

		if (!(UPCFG1XTemp & (1 << ALLOC)))
     d62:	91 ff       	sbrs	r25, 1
     d64:	22 c0       	rjmp	.+68     	; 0xdaa <Pipe_ConfigurePipe+0xa6>
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     d66:	80 91 a9 00 	lds	r24, 0x00A9
     d6a:	8e 7f       	andi	r24, 0xFE	; 254
     d6c:	80 93 a9 00 	sts	0x00A9, r24
		  continue;
		  
		Pipe_DisablePipe();
		UPCFG1X &= ~(1 << ALLOC);
     d70:	80 91 ab 00 	lds	r24, 0x00AB
     d74:	8d 7f       	andi	r24, 0xFD	; 253
     d76:	80 93 ab 00 	sts	0x00AB, r24
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
     d7a:	80 91 a9 00 	lds	r24, 0x00A9
     d7e:	81 60       	ori	r24, 0x01	; 1
     d80:	80 93 a9 00 	sts	0x00A9, r24

		Pipe_EnablePipe();
		UPCFG0X = UPCFG0XTemp;
     d84:	50 93 aa 00 	sts	0x00AA, r21
		UPCFG1X = UPCFG1XTemp;
     d88:	90 93 ab 00 	sts	0x00AB, r25
		UPCFG2X = UPCFG2XTemp;
     d8c:	40 93 ad 00 	sts	0x00AD, r20
		UPIENX  = UPIENXTemp;
     d90:	20 93 ae 00 	sts	0x00AE, r18

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
     d94:	80 91 a9 00 	lds	r24, 0x00A9
     d98:	80 62       	ori	r24, 0x20	; 32
     d9a:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     d9e:	80 91 ac 00 	lds	r24, 0x00AC

		Pipe_SetInfiniteINRequests();
	
		if (!(Pipe_IsConfigured()))
     da2:	87 fd       	sbrc	r24, 7
     da4:	02 c0       	rjmp	.+4      	; 0xdaa <Pipe_ConfigurePipe+0xa6>
     da6:	80 e0       	ldi	r24, 0x00	; 0
     da8:	07 c0       	rjmp	.+14     	; 0xdb8 <Pipe_ConfigurePipe+0xb4>

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else	
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
     daa:	3f 5f       	subi	r19, 0xFF	; 255
     dac:	37 30       	cpi	r19, 0x07	; 7
     dae:	08 f4       	brcc	.+2      	; 0xdb2 <Pipe_ConfigurePipe+0xae>
     db0:	b8 cf       	rjmp	.-144    	; 0xd22 <Pipe_ConfigurePipe+0x1e>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     db2:	e0 93 a7 00 	sts	0x00A7, r30
     db6:	81 e0       	ldi	r24, 0x01	; 1
	}
		
	Pipe_SelectPipe(Number);	
	return true;
#endif
}
     db8:	1f 91       	pop	r17
     dba:	0f 91       	pop	r16
     dbc:	ef 90       	pop	r14
     dbe:	08 95       	ret

00000dc0 <Pipe_ClearPipes>:

void Pipe_ClearPipes(void)
{
	UPINT = 0;
     dc0:	10 92 f8 00 	sts	0x00F8, r1
     dc4:	90 e0       	ldi	r25, 0x00	; 0
     dc6:	90 93 a7 00 	sts	0x00A7, r25

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
     dca:	10 92 ae 00 	sts	0x00AE, r1
		UPINTX  = 0;
     dce:	10 92 a6 00 	sts	0x00A6, r1
		UPCFG1X = 0;
     dd2:	10 92 ab 00 	sts	0x00AB, r1
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     dd6:	80 91 a9 00 	lds	r24, 0x00A9
     dda:	8e 7f       	andi	r24, 0xFE	; 254
     ddc:	80 93 a9 00 	sts	0x00A9, r24

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     de0:	9f 5f       	subi	r25, 0xFF	; 255
     de2:	97 30       	cpi	r25, 0x07	; 7
     de4:	81 f7       	brne	.-32     	; 0xdc6 <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
     de6:	08 95       	ret

00000de8 <Pipe_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
     de8:	40 91 a2 00 	lds	r20, 0x00A2
     dec:	50 91 a3 00 	lds	r21, 0x00A3
     df0:	24 e6       	ldi	r18, 0x64	; 100
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
     df2:	80 91 aa 00 	lds	r24, 0x00AA

	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
     df6:	80 73       	andi	r24, 0x30	; 48
     df8:	80 31       	cpi	r24, 0x10	; 16
     dfa:	29 f4       	brne	.+10     	; 0xe06 <Pipe_WaitUntilReady+0x1e>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     dfc:	80 91 a6 00 	lds	r24, 0x00A6
		{
			if (Pipe_IsINReceived())
     e00:	80 ff       	sbrs	r24, 0
     e02:	05 c0       	rjmp	.+10     	; 0xe0e <Pipe_WaitUntilReady+0x26>
     e04:	1e c0       	rjmp	.+60     	; 0xe42 <Pipe_WaitUntilReady+0x5a>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     e06:	80 91 a6 00 	lds	r24, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
     e0a:	82 fd       	sbrc	r24, 2
     e0c:	1a c0       	rjmp	.+52     	; 0xe42 <Pipe_WaitUntilReady+0x5a>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     e0e:	80 91 a6 00 	lds	r24, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
     e12:	81 ff       	sbrs	r24, 1
     e14:	02 c0       	rjmp	.+4      	; 0xe1a <Pipe_WaitUntilReady+0x32>
     e16:	81 e0       	ldi	r24, 0x01	; 1
     e18:	08 95       	ret
		  return PIPE_READYWAIT_PipeStalled;
		else if (USB_HostState == HOST_STATE_Unattached)
     e1a:	80 91 fa 04 	lds	r24, 0x04FA
     e1e:	81 30       	cpi	r24, 0x01	; 1
     e20:	11 f4       	brne	.+4      	; 0xe26 <Pipe_WaitUntilReady+0x3e>
     e22:	82 e0       	ldi	r24, 0x02	; 2
     e24:	08 95       	ret
     e26:	80 91 a2 00 	lds	r24, 0x00A2
     e2a:	90 91 a3 00 	lds	r25, 0x00A3
		  return PIPE_READYWAIT_DeviceDisconnected;

		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     e2e:	84 17       	cp	r24, r20
     e30:	95 07       	cpc	r25, r21
     e32:	f9 f2       	breq	.-66     	; 0xdf2 <Pipe_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     e34:	22 23       	and	r18, r18
     e36:	11 f4       	brne	.+4      	; 0xe3c <Pipe_WaitUntilReady+0x54>
     e38:	83 e0       	ldi	r24, 0x03	; 3
     e3a:	08 95       	ret
     e3c:	21 50       	subi	r18, 0x01	; 1
     e3e:	ac 01       	movw	r20, r24
     e40:	d8 cf       	rjmp	.-80     	; 0xdf2 <Pipe_WaitUntilReady+0xa>
     e42:	80 e0       	ldi	r24, 0x00	; 0
			  return PIPE_READYWAIT_Timeout;
		}
	}
}
     e44:	08 95       	ret

00000e46 <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     e46:	70 d0       	rcall	.+224    	; 0xf28 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     e48:	77 d0       	rcall	.+238    	; 0xf38 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     e4a:	80 91 d8 00 	lds	r24, 0x00D8
     e4e:	8f 77       	andi	r24, 0x7F	; 127
     e50:	80 93 d8 00 	sts	0x00D8, r24
				USBCON |=  (1 << USBE);
     e54:	80 91 d8 00 	lds	r24, 0x00D8
     e58:	80 68       	ori	r24, 0x80	; 128
     e5a:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
     e5e:	80 91 d8 00 	lds	r24, 0x00D8
     e62:	8f 7d       	andi	r24, 0xDF	; 223
     e64:	80 93 d8 00 	sts	0x00D8, r24
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
     e68:	80 91 d7 00 	lds	r24, 0x00D7
     e6c:	8f 77       	andi	r24, 0x7F	; 127
     e6e:	80 93 d7 00 	sts	0x00D7, r24

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     e72:	8c e0       	ldi	r24, 0x0C	; 12
     e74:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     e76:	8e e0       	ldi	r24, 0x0E	; 14
     e78:	89 bd       	out	0x29, r24	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_CAN_BE_HOST)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));		
     e7a:	09 b4       	in	r0, 0x29	; 41
     e7c:	00 fe       	sbrs	r0, 0
     e7e:	fd cf       	rjmp	.-6      	; 0xe7a <USB_ResetInterface+0x34>
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState                = HOST_STATE_Unattached;
     e80:	81 e0       	ldi	r24, 0x01	; 1
     e82:	80 93 fa 04 	sts	0x04FA, r24
	USB_Host_ConfigurationNumber = 0;
     e86:	10 92 f0 04 	sts	0x04F0, r1
	USB_Host_ControlPipeSize     = PIPE_CONTROLPIPE_DEFAULT_SIZE;
     e8a:	80 e4       	ldi	r24, 0x40	; 64
     e8c:	80 93 10 01 	sts	0x0110, r24
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
     e90:	80 91 d8 00 	lds	r24, 0x00D8
     e94:	80 64       	ori	r24, 0x40	; 64
     e96:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     e9a:	80 91 dd 00 	lds	r24, 0x00DD
     e9e:	81 60       	ori	r24, 0x01	; 1
     ea0:	80 93 dd 00 	sts	0x00DD, r24
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
     ea4:	80 91 dd 00 	lds	r24, 0x00DD
     ea8:	84 60       	ori	r24, 0x04	; 4
     eaa:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON &= ~(1 << UVCONE);
     eae:	80 91 d7 00 	lds	r24, 0x00D7
     eb2:	8f 7e       	andi	r24, 0xEF	; 239
     eb4:	80 93 d7 00 	sts	0x00D7, r24

				DDRE   |=  (1 << 7);
     eb8:	6f 9a       	sbi	0x0d, 7	; 13
			}

			static inline void USB_Host_VBUS_Manual_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_On(void)
			{
				PORTE  |=  (1 << 7);
     eba:	77 9a       	sbi	0x0e, 7	; 14
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN |= (1 << SRPE);						
     ebc:	80 91 de 00 	lds	r24, 0x00DE
     ec0:	81 60       	ori	r24, 0x01	; 1
     ec2:	80 93 de 00 	sts	0x00DE, r24
						break;
					case USB_INT_RSTI:
						UHIEN  |= (1 << RSTE);
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
     ec6:	80 91 de 00 	lds	r24, 0x00DE
     eca:	84 60       	ori	r24, 0x04	; 4
     ecc:	80 93 de 00 	sts	0x00DE, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     ed0:	80 91 e0 00 	lds	r24, 0x00E0
     ed4:	8e 7f       	andi	r24, 0xFE	; 254
     ed6:	80 93 e0 00 	sts	0x00E0, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     eda:	80 91 d8 00 	lds	r24, 0x00D8
     ede:	80 61       	ori	r24, 0x10	; 16
     ee0:	80 93 d8 00 	sts	0x00D8, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     ee4:	08 95       	ret

00000ee6 <USB_Init>:

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
     ee6:	e7 ed       	ldi	r30, 0xD7	; 215
     ee8:	f0 e0       	ldi	r31, 0x00	; 0
     eea:	80 81       	ld	r24, Z
     eec:	81 60       	ori	r24, 0x01	; 1
     eee:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     ef0:	81 e0       	ldi	r24, 0x01	; 1
     ef2:	80 93 f1 04 	sts	0x04F1, r24

	USB_ResetInterface();
}
     ef6:	a7 cf       	rjmp	.-178    	; 0xe46 <USB_ResetInterface>

00000ef8 <USB_Disable>:

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
     ef8:	17 d0       	rcall	.+46     	; 0xf28 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     efa:	1e d0       	rcall	.+60     	; 0xf38 <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
     efc:	e0 ee       	ldi	r30, 0xE0	; 224
     efe:	f0 e0       	ldi	r31, 0x00	; 0
     f00:	80 81       	ld	r24, Z
     f02:	81 60       	ori	r24, 0x01	; 1
     f04:	80 83       	st	Z, r24
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON  &= ~(1 << USBE);
     f06:	a8 ed       	ldi	r26, 0xD8	; 216
     f08:	b0 e0       	ldi	r27, 0x00	; 0
     f0a:	8c 91       	ld	r24, X
     f0c:	8f 77       	andi	r24, 0x7F	; 127
     f0e:	8c 93       	st	X, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     f10:	19 bc       	out	0x29, r1	; 41

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  &= ~(1 << UVREGE);
     f12:	e7 ed       	ldi	r30, 0xD7	; 215
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	80 81       	ld	r24, Z
     f18:	8e 7f       	andi	r24, 0xFE	; 254
     f1a:	80 83       	st	Z, r24
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON  &= ~(1 << OTGPADE);
     f1c:	8c 91       	ld	r24, X
     f1e:	8f 7e       	andi	r24, 0xEF	; 239
     f20:	8c 93       	st	X, r24

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
     f22:	10 92 f1 04 	sts	0x04F1, r1
}
     f26:	08 95       	ret

00000f28 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     f28:	e8 ed       	ldi	r30, 0xD8	; 216
     f2a:	f0 e0       	ldi	r31, 0x00	; 0
     f2c:	80 81       	ld	r24, Z
     f2e:	8c 7f       	andi	r24, 0xFC	; 252
     f30:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
     f32:	10 92 a0 00 	sts	0x00A0, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
	#endif
}
     f36:	08 95       	ret

00000f38 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     f38:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_BOTH)
	OTGINT = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
     f3c:	10 92 9f 00 	sts	0x009F, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
	#endif
}
     f40:	08 95       	ret

00000f42 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
     f42:	1f 92       	push	r1
     f44:	0f 92       	push	r0
     f46:	0f b6       	in	r0, 0x3f	; 63
     f48:	0f 92       	push	r0
     f4a:	0b b6       	in	r0, 0x3b	; 59
     f4c:	0f 92       	push	r0
     f4e:	11 24       	eor	r1, r1
     f50:	2f 93       	push	r18
     f52:	3f 93       	push	r19
     f54:	4f 93       	push	r20
     f56:	5f 93       	push	r21
     f58:	6f 93       	push	r22
     f5a:	7f 93       	push	r23
     f5c:	8f 93       	push	r24
     f5e:	9f 93       	push	r25
     f60:	af 93       	push	r26
     f62:	bf 93       	push	r27
     f64:	ef 93       	push	r30
     f66:	ff 93       	push	r31
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     f68:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	#if defined(USB_CAN_BE_HOST)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
     f6c:	85 ff       	sbrs	r24, 5
     f6e:	0a c0       	rjmp	.+20     	; 0xf84 <__vector_10+0x42>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     f70:	80 91 a0 00 	lds	r24, 0x00A0
     f74:	85 ff       	sbrs	r24, 5
     f76:	06 c0       	rjmp	.+12     	; 0xf84 <__vector_10+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     f78:	80 91 9f 00 	lds	r24, 0x009F
     f7c:	8f 7d       	andi	r24, 0xDF	; 223
     f7e:	80 93 9f 00 	sts	0x009F, r24
	{
		USB_INT_Clear(USB_INT_HSOFI);

		EVENT_USB_Host_StartOfFrame();
     f82:	67 d1       	rcall	.+718    	; 0x1252 <USB_Event_Stub>
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
     f84:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
     f88:	81 ff       	sbrs	r24, 1
     f8a:	15 c0       	rjmp	.+42     	; 0xfb6 <__vector_10+0x74>
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
					case USB_INT_DCONNI:
						return (UHIEN  & (1 << DCONNE));
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
     f8c:	80 91 a0 00 	lds	r24, 0x00A0
     f90:	81 ff       	sbrs	r24, 1
     f92:	11 c0       	rjmp	.+34     	; 0xfb6 <__vector_10+0x74>
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     f94:	80 91 9f 00 	lds	r24, 0x009F
     f98:	8d 7f       	andi	r24, 0xFD	; 253
     f9a:	80 93 9f 00 	sts	0x009F, r24
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     f9e:	80 91 9f 00 	lds	r24, 0x009F
     fa2:	8e 7f       	andi	r24, 0xFE	; 254
     fa4:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     fa8:	80 91 a0 00 	lds	r24, 0x00A0
     fac:	8d 7f       	andi	r24, 0xFD	; 253
     fae:	80 93 a0 00 	sts	0x00A0, r24
	{
		USB_INT_Clear(USB_INT_DDISCI);
		USB_INT_Clear(USB_INT_DCONNI);
		USB_INT_Disable(USB_INT_DDISCI);

		EVENT_USB_Host_DeviceUnattached();
     fb2:	ce da       	rcall	.-2660   	; 0x550 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     fb4:	48 df       	rcall	.-368    	; 0xe46 <USB_ResetInterface>
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
     fb6:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
     fba:	81 ff       	sbrs	r24, 1
     fbc:	15 c0       	rjmp	.+42     	; 0xfe8 <__vector_10+0xa6>
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
     fbe:	80 91 de 00 	lds	r24, 0x00DE
     fc2:	81 ff       	sbrs	r24, 1
     fc4:	11 c0       	rjmp	.+34     	; 0xfe8 <__vector_10+0xa6>
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     fc6:	80 91 df 00 	lds	r24, 0x00DF
     fca:	8d 7f       	andi	r24, 0xFD	; 253
     fcc:	80 93 df 00 	sts	0x00DF, r24
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
     fd0:	77 98       	cbi	0x0e, 7	; 14
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     fd2:	80 91 dd 00 	lds	r24, 0x00DD
     fd6:	81 60       	ori	r24, 0x01	; 1
     fd8:	80 93 dd 00 	sts	0x00DD, r24
		USB_INT_Clear(USB_INT_VBERRI);

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
     fdc:	80 e0       	ldi	r24, 0x00	; 0
     fde:	9b da       	rcall	.-2762   	; 0x516 <EVENT_USB_Host_HostError>
		EVENT_USB_Host_DeviceUnattached();
     fe0:	b7 da       	rcall	.-2706   	; 0x550 <EVENT_USB_Host_DeviceUnattached>

		USB_HostState = HOST_STATE_Unattached;
     fe2:	81 e0       	ldi	r24, 0x01	; 1
     fe4:	80 93 fa 04 	sts	0x04FA, r24
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
					case USB_INT_SRPI:
						return (OTGINT & (1 << SRPI));
     fe8:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
     fec:	80 ff       	sbrs	r24, 0
     fee:	17 c0       	rjmp	.+46     	; 0x101e <__vector_10+0xdc>
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
					case USB_INT_SRPI:
						return (OTGIEN & (1 << SRPE));
     ff0:	80 91 de 00 	lds	r24, 0x00DE
     ff4:	80 ff       	sbrs	r24, 0
     ff6:	13 c0       	rjmp	.+38     	; 0x101e <__vector_10+0xdc>
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
						break;
					case USB_INT_SRPI:
						OTGINT &= ~(1 << SRPI);
     ff8:	80 91 df 00 	lds	r24, 0x00DF
     ffc:	8e 7f       	andi	r24, 0xFE	; 254
     ffe:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_VBERRI:
						OTGIEN &= ~(1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN &= ~(1 << SRPE);						
    1002:	80 91 de 00 	lds	r24, 0x00DE
    1006:	8e 7f       	andi	r24, 0xFE	; 254
    1008:	80 93 de 00 	sts	0x00DE, r24
	{
		USB_INT_Clear(USB_INT_SRPI);
		USB_INT_Disable(USB_INT_SRPI);

		EVENT_USB_Host_DeviceAttached();
    100c:	aa da       	rcall	.-2732   	; 0x562 <EVENT_USB_Host_DeviceAttached>
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
    100e:	80 91 a0 00 	lds	r24, 0x00A0
    1012:	82 60       	ori	r24, 0x02	; 2
    1014:	80 93 a0 00 	sts	0x00A0, r24

		USB_INT_Enable(USB_INT_DDISCI);

		USB_HostState = HOST_STATE_Powered;
    1018:	82 e0       	ldi	r24, 0x02	; 2
    101a:	80 93 fa 04 	sts	0x04FA, r24
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
    101e:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
    1022:	82 ff       	sbrs	r24, 2
    1024:	0e c0       	rjmp	.+28     	; 0x1042 <__vector_10+0x100>
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
    1026:	80 91 de 00 	lds	r24, 0x00DE
    102a:	82 ff       	sbrs	r24, 2
    102c:	0a c0       	rjmp	.+20     	; 0x1042 <__vector_10+0x100>
						break;
					case USB_INT_RSTI:
						UHINT  &= ~(1 << RSTI);
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
    102e:	80 91 df 00 	lds	r24, 0x00DF
    1032:	8b 7f       	andi	r24, 0xFB	; 251
    1034:	80 93 df 00 	sts	0x00DF, r24
	{
		USB_INT_Clear(USB_INT_BCERRI);

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
    1038:	82 e0       	ldi	r24, 0x02	; 2
    103a:	60 e0       	ldi	r22, 0x00	; 0
    103c:	40 da       	rcall	.-2944   	; 0x4be <EVENT_USB_Host_DeviceEnumerationFailed>
		EVENT_USB_Host_DeviceUnattached();
    103e:	88 da       	rcall	.-2800   	; 0x550 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
    1040:	02 df       	rcall	.-508    	; 0xe46 <USB_ResetInterface>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    1042:	ff 91       	pop	r31
    1044:	ef 91       	pop	r30
    1046:	bf 91       	pop	r27
    1048:	af 91       	pop	r26
    104a:	9f 91       	pop	r25
    104c:	8f 91       	pop	r24
    104e:	7f 91       	pop	r23
    1050:	6f 91       	pop	r22
    1052:	5f 91       	pop	r21
    1054:	4f 91       	pop	r20
    1056:	3f 91       	pop	r19
    1058:	2f 91       	pop	r18
    105a:	0f 90       	pop	r0
    105c:	0b be       	out	0x3b, r0	; 59
    105e:	0f 90       	pop	r0
    1060:	0f be       	out	0x3f, r0	; 63
    1062:	0f 90       	pop	r0
    1064:	1f 90       	pop	r1
    1066:	18 95       	reti

00001068 <Pipe_Read_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    1068:	bf 92       	push	r11
    106a:	cf 92       	push	r12
    106c:	df 92       	push	r13
    106e:	ef 92       	push	r14
    1070:	ff 92       	push	r15
    1072:	0f 93       	push	r16
    1074:	1f 93       	push	r17
    1076:	cf 93       	push	r28
    1078:	df 93       	push	r29
    107a:	18 2f       	mov	r17, r24
    107c:	09 2f       	mov	r16, r25
    107e:	7b 01       	movw	r14, r22
    1080:	6a 01       	movw	r12, r20
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1082:	80 91 aa 00 	lds	r24, 0x00AA
    1086:	8f 7c       	andi	r24, 0xCF	; 207
    1088:	80 61       	ori	r24, 0x10	; 16
    108a:	80 93 aa 00 	sts	0x00AA, r24
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
    108e:	ac de       	rcall	.-680    	; 0xde8 <Pipe_WaitUntilReady>
    1090:	b8 2e       	mov	r11, r24
    1092:	88 23       	and	r24, r24
    1094:	a9 f5       	brne	.+106    	; 0x1100 <Pipe_Read_Stream_LE+0x98>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    1096:	81 2f       	mov	r24, r17
    1098:	90 2f       	mov	r25, r16
    109a:	9c 01       	movw	r18, r24
    109c:	e9 01       	movw	r28, r18
	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
    109e:	c1 14       	cp	r12, r1
    10a0:	d1 04       	cpc	r13, r1
    10a2:	39 f0       	breq	.+14     	; 0x10b2 <Pipe_Read_Stream_LE+0x4a>
	{
		Length -= *BytesProcessed;
    10a4:	f6 01       	movw	r30, r12
    10a6:	80 81       	ld	r24, Z
    10a8:	91 81       	ldd	r25, Z+1	; 0x01
    10aa:	e8 1a       	sub	r14, r24
    10ac:	f9 0a       	sbc	r15, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    10ae:	c8 0f       	add	r28, r24
    10b0:	d9 1f       	adc	r29, r25
    10b2:	00 e0       	ldi	r16, 0x00	; 0
    10b4:	10 e0       	ldi	r17, 0x00	; 0
    10b6:	21 c0       	rjmp	.+66     	; 0x10fa <Pipe_Read_Stream_LE+0x92>
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
    10b8:	80 91 a6 00 	lds	r24, 0x00A6
	}
	
	while (Length)
	{
		if (!(Pipe_IsReadWriteAllowed()))
    10bc:	85 fd       	sbrc	r24, 5
    10be:	15 c0       	rjmp	.+42     	; 0x10ea <Pipe_Read_Stream_LE+0x82>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    10c0:	80 91 a6 00 	lds	r24, 0x00A6
    10c4:	8e 77       	andi	r24, 0x7E	; 126
    10c6:	80 93 a6 00 	sts	0x00A6, r24
		{
			TEMPLATE_CLEAR_PIPE();

			if (BytesProcessed != NULL)
    10ca:	c1 14       	cp	r12, r1
    10cc:	d1 04       	cpc	r13, r1
    10ce:	49 f0       	breq	.+18     	; 0x10e2 <Pipe_Read_Stream_LE+0x7a>
			{
				*BytesProcessed += BytesInTransfer;
    10d0:	f6 01       	movw	r30, r12
    10d2:	80 81       	ld	r24, Z
    10d4:	91 81       	ldd	r25, Z+1	; 0x01
    10d6:	80 0f       	add	r24, r16
    10d8:	91 1f       	adc	r25, r17
    10da:	91 83       	std	Z+1, r25	; 0x01
    10dc:	80 83       	st	Z, r24
    10de:	84 e0       	ldi	r24, 0x04	; 4
    10e0:	10 c0       	rjmp	.+32     	; 0x1102 <Pipe_Read_Stream_LE+0x9a>
				return PIPE_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
    10e2:	82 de       	rcall	.-764    	; 0xde8 <Pipe_WaitUntilReady>
    10e4:	88 23       	and	r24, r24
    10e6:	49 f0       	breq	.+18     	; 0x10fa <Pipe_Read_Stream_LE+0x92>
    10e8:	0c c0       	rjmp	.+24     	; 0x1102 <Pipe_Read_Stream_LE+0x9a>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    10ea:	80 91 af 00 	lds	r24, 0x00AF
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    10ee:	89 93       	st	Y+, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    10f0:	08 94       	sec
    10f2:	e1 08       	sbc	r14, r1
    10f4:	f1 08       	sbc	r15, r1
			BytesInTransfer++;
    10f6:	0f 5f       	subi	r16, 0xFF	; 255
    10f8:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}
	
	while (Length)
    10fa:	e1 14       	cp	r14, r1
    10fc:	f1 04       	cpc	r15, r1
    10fe:	e1 f6       	brne	.-72     	; 0x10b8 <Pipe_Read_Stream_LE+0x50>
    1100:	8b 2d       	mov	r24, r11
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
    1102:	df 91       	pop	r29
    1104:	cf 91       	pop	r28
    1106:	1f 91       	pop	r17
    1108:	0f 91       	pop	r16
    110a:	ff 90       	pop	r15
    110c:	ef 90       	pop	r14
    110e:	df 90       	pop	r13
    1110:	cf 90       	pop	r12
    1112:	bf 90       	pop	r11
    1114:	08 95       	ret

00001116 <USB_GetNextDescriptorComp>:

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
    1116:	af 92       	push	r10
    1118:	bf 92       	push	r11
    111a:	cf 92       	push	r12
    111c:	df 92       	push	r13
    111e:	ef 92       	push	r14
    1120:	ff 92       	push	r15
    1122:	0f 93       	push	r16
    1124:	1f 93       	push	r17
    1126:	cf 93       	push	r28
    1128:	df 93       	push	r29
    112a:	7c 01       	movw	r14, r24
    112c:	eb 01       	movw	r28, r22
    112e:	6a 01       	movw	r12, r20
    1130:	24 c0       	rjmp	.+72     	; 0x117a <USB_GetNextDescriptorComp+0x64>
	uint8_t ErrorCode;

	while (*BytesRem)
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
    1132:	e8 81       	ld	r30, Y
    1134:	f9 81       	ldd	r31, Y+1	; 0x01
    1136:	be 2e       	mov	r11, r30
    1138:	af 2e       	mov	r10, r31
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc)
			{
				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;
    113a:	80 81       	ld	r24, Z
    113c:	90 e0       	ldi	r25, 0x00	; 0
    113e:	98 01       	movw	r18, r16
    1140:	80 17       	cp	r24, r16
    1142:	91 07       	cpc	r25, r17
    1144:	08 f4       	brcc	.+2      	; 0x1148 <USB_GetNextDescriptorComp+0x32>
    1146:	9c 01       	movw	r18, r24
				
				if (*BytesRem < CurrDescriptorSize)
				  CurrDescriptorSize = *BytesRem;

				*CurrConfigLoc  = (void*)((uintptr_t)*CurrConfigLoc + CurrDescriptorSize);
    1148:	e2 0f       	add	r30, r18
    114a:	f3 1f       	adc	r31, r19
    114c:	f9 83       	std	Y+1, r31	; 0x01
    114e:	e8 83       	st	Y, r30
				*BytesRem      -= CurrDescriptorSize;
    1150:	f7 01       	movw	r30, r14
    1152:	80 81       	ld	r24, Z
    1154:	91 81       	ldd	r25, Z+1	; 0x01
    1156:	82 1b       	sub	r24, r18
    1158:	93 0b       	sbc	r25, r19
    115a:	91 83       	std	Z+1, r25	; 0x01
    115c:	80 83       	st	Z, r24
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
    115e:	88 81       	ld	r24, Y
    1160:	99 81       	ldd	r25, Y+1	; 0x01
    1162:	f6 01       	movw	r30, r12
    1164:	09 95       	icall
    1166:	82 30       	cpi	r24, 0x02	; 2
    1168:	41 f0       	breq	.+16     	; 0x117a <USB_GetNextDescriptorComp+0x64>
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
    116a:	81 30       	cpi	r24, 0x01	; 1
    116c:	69 f4       	brne	.+26     	; 0x1188 <USB_GetNextDescriptorComp+0x72>
			{
				*CurrConfigLoc = PrevDescLoc;
    116e:	b8 82       	st	Y, r11
    1170:	a9 82       	std	Y+1, r10	; 0x01
				*BytesRem      = PrevBytesRem;
    1172:	f7 01       	movw	r30, r14
    1174:	11 83       	std	Z+1, r17	; 0x01
    1176:	00 83       	st	Z, r16
    1178:	07 c0       	rjmp	.+14     	; 0x1188 <USB_GetNextDescriptorComp+0x72>
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
	uint8_t ErrorCode;

	while (*BytesRem)
    117a:	f7 01       	movw	r30, r14
    117c:	00 81       	ld	r16, Z
    117e:	11 81       	ldd	r17, Z+1	; 0x01
    1180:	01 15       	cp	r16, r1
    1182:	11 05       	cpc	r17, r1
    1184:	b1 f6       	brne	.-84     	; 0x1132 <USB_GetNextDescriptorComp+0x1c>
    1186:	82 e0       	ldi	r24, 0x02	; 2
			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
}
    1188:	df 91       	pop	r29
    118a:	cf 91       	pop	r28
    118c:	1f 91       	pop	r17
    118e:	0f 91       	pop	r16
    1190:	ff 90       	pop	r15
    1192:	ef 90       	pop	r14
    1194:	df 90       	pop	r13
    1196:	cf 90       	pop	r12
    1198:	bf 90       	pop	r11
    119a:	af 90       	pop	r10
    119c:	08 95       	ret

0000119e <USB_Host_GetDeviceConfigDescriptor>:
#if defined(USB_CAN_BE_HOST)
uint8_t USB_Host_GetDeviceConfigDescriptor(const uint8_t ConfigNumber,
                                           uint16_t* const ConfigSizePtr,
                                           void* const BufferPtr,
                                           const uint16_t BufferSize)
{
    119e:	cf 92       	push	r12
    11a0:	df 92       	push	r13
    11a2:	ef 92       	push	r14
    11a4:	ff 92       	push	r15
    11a6:	0f 93       	push	r16
    11a8:	1f 93       	push	r17
    11aa:	df 93       	push	r29
    11ac:	cf 93       	push	r28
    11ae:	cd b7       	in	r28, 0x3d	; 61
    11b0:	de b7       	in	r29, 0x3e	; 62
    11b2:	29 97       	sbiw	r28, 0x09	; 9
    11b4:	0f b6       	in	r0, 0x3f	; 63
    11b6:	f8 94       	cli
    11b8:	de bf       	out	0x3e, r29	; 62
    11ba:	0f be       	out	0x3f, r0	; 63
    11bc:	cd bf       	out	0x3d, r28	; 61
    11be:	6b 01       	movw	r12, r22
    11c0:	8a 01       	movw	r16, r20
    11c2:	79 01       	movw	r14, r18
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
    11c4:	90 e8       	ldi	r25, 0x80	; 128
    11c6:	90 93 f2 04 	sts	0x04F2, r25
    11ca:	96 e0       	ldi	r25, 0x06	; 6
    11cc:	90 93 f3 04 	sts	0x04F3, r25
    11d0:	90 e0       	ldi	r25, 0x00	; 0
    11d2:	01 97       	sbiw	r24, 0x01	; 1
    11d4:	92 60       	ori	r25, 0x02	; 2
    11d6:	90 93 f5 04 	sts	0x04F5, r25
    11da:	80 93 f4 04 	sts	0x04F4, r24
    11de:	10 92 f7 04 	sts	0x04F7, r1
    11e2:	10 92 f6 04 	sts	0x04F6, r1
    11e6:	89 e0       	ldi	r24, 0x09	; 9
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    11ea:	90 93 f9 04 	sts	0x04F9, r25
    11ee:	80 93 f8 04 	sts	0x04F8, r24
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    11f2:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = sizeof(USB_Descriptor_Configuration_Header_t),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(ConfigHeader)) != HOST_SENDCONTROL_Successful)
    11f6:	ce 01       	movw	r24, r28
    11f8:	01 96       	adiw	r24, 0x01	; 1
    11fa:	55 d0       	rcall	.+170    	; 0x12a6 <USB_Host_SendControlRequest>
    11fc:	28 2f       	mov	r18, r24
    11fe:	88 23       	and	r24, r24
    1200:	c1 f4       	brne	.+48     	; 0x1232 <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);
    1202:	8b 81       	ldd	r24, Y+3	; 0x03
    1204:	9c 81       	ldd	r25, Y+4	; 0x04
    1206:	f6 01       	movw	r30, r12
    1208:	91 83       	std	Z+1, r25	; 0x01
    120a:	80 83       	st	Z, r24

	if (*ConfigSizePtr > BufferSize)
    120c:	e8 16       	cp	r14, r24
    120e:	f9 06       	cpc	r15, r25
    1210:	10 f4       	brcc	.+4      	; 0x1216 <USB_Host_GetDeviceConfigDescriptor+0x78>
    1212:	25 e0       	ldi	r18, 0x05	; 5
    1214:	0e c0       	rjmp	.+28     	; 0x1232 <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return HOST_GETCONFIG_BuffOverflow;

	USB_ControlRequest.wLength = *ConfigSizePtr;
    1216:	90 93 f9 04 	sts	0x04F9, r25
    121a:	80 93 f8 04 	sts	0x04F8, r24

	if ((ErrorCode = USB_Host_SendControlRequest(BufferPtr)) != HOST_SENDCONTROL_Successful)
    121e:	c8 01       	movw	r24, r16
    1220:	42 d0       	rcall	.+132    	; 0x12a6 <USB_Host_SendControlRequest>
    1222:	28 2f       	mov	r18, r24
    1224:	88 23       	and	r24, r24
    1226:	29 f4       	brne	.+10     	; 0x1232 <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
    1228:	f8 01       	movw	r30, r16
    122a:	81 81       	ldd	r24, Z+1	; 0x01
    122c:	82 30       	cpi	r24, 0x02	; 2
    122e:	09 f0       	breq	.+2      	; 0x1232 <USB_Host_GetDeviceConfigDescriptor+0x94>
    1230:	26 e0       	ldi	r18, 0x06	; 6
	  return HOST_GETCONFIG_InvalidData;

	return HOST_GETCONFIG_Successful;
}
    1232:	82 2f       	mov	r24, r18
    1234:	29 96       	adiw	r28, 0x09	; 9
    1236:	0f b6       	in	r0, 0x3f	; 63
    1238:	f8 94       	cli
    123a:	de bf       	out	0x3e, r29	; 62
    123c:	0f be       	out	0x3f, r0	; 63
    123e:	cd bf       	out	0x3d, r28	; 61
    1240:	cf 91       	pop	r28
    1242:	df 91       	pop	r29
    1244:	1f 91       	pop	r17
    1246:	0f 91       	pop	r16
    1248:	ff 90       	pop	r15
    124a:	ef 90       	pop	r14
    124c:	df 90       	pop	r13
    124e:	cf 90       	pop	r12
    1250:	08 95       	ret

00001252 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
    1252:	08 95       	ret

00001254 <USB_Host_WaitForIOS>:

	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
    1254:	1f 93       	push	r17
    1256:	cf 93       	push	r28
    1258:	df 93       	push	r29
    125a:	18 2f       	mov	r17, r24
    125c:	c8 ee       	ldi	r28, 0xE8	; 232
    125e:	d3 e0       	ldi	r29, 0x03	; 3
    1260:	09 c0       	rjmp	.+18     	; 0x1274 <USB_Host_WaitForIOS+0x20>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1262:	81 e0       	ldi	r24, 0x01	; 1
    1264:	87 db       	rcall	.-2290   	; 0x974 <USB_Host_WaitMS>
    1266:	88 23       	and	r24, r24
    1268:	d1 f4       	brne	.+52     	; 0x129e <USB_Host_WaitForIOS+0x4a>
		  return ErrorCode;

		if (!(TimeoutCounter--))
    126a:	20 97       	sbiw	r28, 0x00	; 0
    126c:	11 f4       	brne	.+4      	; 0x1272 <USB_Host_WaitForIOS+0x1e>
    126e:	84 e0       	ldi	r24, 0x04	; 4
    1270:	16 c0       	rjmp	.+44     	; 0x129e <USB_Host_WaitForIOS+0x4a>
    1272:	21 97       	sbiw	r28, 0x01	; 1
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    1274:	11 23       	and	r17, r17
    1276:	29 f4       	brne	.+10     	; 0x1282 <USB_Host_WaitForIOS+0x2e>
			 *  \return Boolean \c true if the current pipe is ready for a SETUP packet, \c false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
    1278:	80 91 a6 00 	lds	r24, 0x00A6
    127c:	83 ff       	sbrs	r24, 3
    127e:	f1 cf       	rjmp	.-30     	; 0x1262 <USB_Host_WaitForIOS+0xe>
    1280:	0d c0       	rjmp	.+26     	; 0x129c <USB_Host_WaitForIOS+0x48>
    1282:	11 30       	cpi	r17, 0x01	; 1
    1284:	29 f4       	brne	.+10     	; 0x1290 <USB_Host_WaitForIOS+0x3c>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    1286:	80 91 a6 00 	lds	r24, 0x00A6
    128a:	80 ff       	sbrs	r24, 0
    128c:	ea cf       	rjmp	.-44     	; 0x1262 <USB_Host_WaitForIOS+0xe>
    128e:	06 c0       	rjmp	.+12     	; 0x129c <USB_Host_WaitForIOS+0x48>
    1290:	12 30       	cpi	r17, 0x02	; 2
    1292:	39 f7       	brne	.-50     	; 0x1262 <USB_Host_WaitForIOS+0xe>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
    1294:	80 91 a6 00 	lds	r24, 0x00A6
    1298:	82 ff       	sbrs	r24, 2
    129a:	e3 cf       	rjmp	.-58     	; 0x1262 <USB_Host_WaitForIOS+0xe>
    129c:	80 e0       	ldi	r24, 0x00	; 0
		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
}
    129e:	df 91       	pop	r29
    12a0:	cf 91       	pop	r28
    12a2:	1f 91       	pop	r17
    12a4:	08 95       	ret

000012a6 <USB_Host_SendControlRequest>:
#include "HostStandardReq.h"

uint8_t USB_Host_ConfigurationNumber;

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
    12a6:	ff 92       	push	r15
    12a8:	0f 93       	push	r16
    12aa:	1f 93       	push	r17
    12ac:	cf 93       	push	r28
    12ae:	df 93       	push	r29
    12b0:	18 2f       	mov	r17, r24
    12b2:	09 2f       	mov	r16, r25
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
    12b4:	f0 90 9e 00 	lds	r15, 0x009E
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
	bool     BusSuspended = USB_Host_IsBusSuspended();
	uint8_t  ReturnStatus = HOST_SENDCONTROL_Successful;
	uint16_t DataLen      = USB_ControlRequest.wLength;
    12b8:	c0 91 f8 04 	lds	r28, 0x04F8
    12bc:	d0 91 f9 04 	lds	r29, 0x04F9
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    12c0:	80 91 9e 00 	lds	r24, 0x009E
    12c4:	81 60       	ori	r24, 0x01	; 1
    12c6:	80 93 9e 00 	sts	0x009E, r24

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    12ca:	81 e0       	ldi	r24, 0x01	; 1
    12cc:	53 db       	rcall	.-2394   	; 0x974 <USB_Host_WaitMS>
    12ce:	98 2f       	mov	r25, r24
    12d0:	88 23       	and	r24, r24
    12d2:	09 f0       	breq	.+2      	; 0x12d6 <USB_Host_SendControlRequest+0x30>
    12d4:	d7 c0       	rjmp	.+430    	; 0x1484 <USB_Host_SendControlRequest+0x1de>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    12d6:	80 91 aa 00 	lds	r24, 0x00AA
    12da:	8f 7c       	andi	r24, 0xCF	; 207
    12dc:	80 93 aa 00 	sts	0x00AA, r24

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
    12e0:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
    12e4:	80 91 a6 00 	lds	r24, 0x00A6
    12e8:	8f 7e       	andi	r24, 0xEF	; 239
    12ea:	80 93 a6 00 	sts	0x00A6, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    12ee:	80 91 a9 00 	lds	r24, 0x00A9
    12f2:	8f 7b       	andi	r24, 0xBF	; 191
    12f4:	80 93 a9 00 	sts	0x00A9, r24
    12f8:	e2 ef       	ldi	r30, 0xF2	; 242
    12fa:	f4 e0       	ldi	r31, 0x04	; 4
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
	  Pipe_Write_8(*(HeaderStream++));	
    12fc:	81 91       	ld	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    12fe:	80 93 af 00 	sts	0x00AF, r24
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
    1302:	84 e0       	ldi	r24, 0x04	; 4
    1304:	ea 3f       	cpi	r30, 0xFA	; 250
    1306:	f8 07       	cpc	r31, r24
    1308:	c9 f7       	brne	.-14     	; 0x12fc <USB_Host_SendControlRequest+0x56>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
    130a:	80 91 a6 00 	lds	r24, 0x00A6
    130e:	87 77       	andi	r24, 0x77	; 119
    1310:	80 93 a6 00 	sts	0x00A6, r24
	  Pipe_Write_8(*(HeaderStream++));	
	#endif
	
	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
    1314:	80 e0       	ldi	r24, 0x00	; 0
    1316:	9e df       	rcall	.-196    	; 0x1254 <USB_Host_WaitForIOS>
    1318:	98 2f       	mov	r25, r24
    131a:	88 23       	and	r24, r24
    131c:	09 f0       	breq	.+2      	; 0x1320 <USB_Host_SendControlRequest+0x7a>
    131e:	b2 c0       	rjmp	.+356    	; 0x1484 <USB_Host_SendControlRequest+0x1de>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1320:	80 91 a9 00 	lds	r24, 0x00A9
    1324:	80 64       	ori	r24, 0x40	; 64
    1326:	80 93 a9 00 	sts	0x00A9, r24
	  goto End_Of_Control_Send;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    132a:	81 e0       	ldi	r24, 0x01	; 1
    132c:	23 db       	rcall	.-2490   	; 0x974 <USB_Host_WaitMS>
    132e:	98 2f       	mov	r25, r24
    1330:	88 23       	and	r24, r24
    1332:	09 f0       	breq	.+2      	; 0x1336 <USB_Host_SendControlRequest+0x90>
    1334:	a7 c0       	rjmp	.+334    	; 0x1484 <USB_Host_SendControlRequest+0x1de>

uint8_t USB_Host_ConfigurationNumber;

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
    1336:	21 2f       	mov	r18, r17
    1338:	30 2f       	mov	r19, r16
    133a:	c9 01       	movw	r24, r18
    133c:	8c 01       	movw	r16, r24
	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
	  goto End_Of_Control_Send;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
    133e:	80 91 f2 04 	lds	r24, 0x04F2
    1342:	87 ff       	sbrs	r24, 7
    1344:	52 c0       	rjmp	.+164    	; 0x13ea <USB_Host_SendControlRequest+0x144>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1346:	80 91 aa 00 	lds	r24, 0x00AA
    134a:	8f 7c       	andi	r24, 0xCF	; 207
    134c:	80 61       	ori	r24, 0x10	; 16
    134e:	80 93 aa 00 	sts	0x00AA, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
    1352:	01 15       	cp	r16, r1
    1354:	11 05       	cpc	r17, r1
    1356:	69 f5       	brne	.+90     	; 0x13b2 <USB_Host_SendControlRequest+0x10c>
    1358:	2e c0       	rjmp	.+92     	; 0x13b6 <USB_Host_SendControlRequest+0x110>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    135a:	80 91 a9 00 	lds	r24, 0x00A9
    135e:	8f 7b       	andi	r24, 0xBF	; 191
    1360:	80 93 a9 00 	sts	0x00A9, r24
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    1364:	81 e0       	ldi	r24, 0x01	; 1
    1366:	76 df       	rcall	.-276    	; 0x1254 <USB_Host_WaitForIOS>
    1368:	98 2f       	mov	r25, r24
    136a:	88 23       	and	r24, r24
    136c:	09 f0       	breq	.+2      	; 0x1370 <USB_Host_SendControlRequest+0xca>
    136e:	8a c0       	rjmp	.+276    	; 0x1484 <USB_Host_SendControlRequest+0x1de>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1370:	80 91 f6 00 	lds	r24, 0x00F6
    1374:	90 91 f7 00 	lds	r25, 0x00F7
				  goto End_Of_Control_Send;

				if (!(Pipe_BytesInPipe()))
    1378:	89 2b       	or	r24, r25
    137a:	49 f4       	brne	.+18     	; 0x138e <USB_Host_SendControlRequest+0xe8>
    137c:	c0 e0       	ldi	r28, 0x00	; 0
    137e:	d0 e0       	ldi	r29, 0x00	; 0
    1380:	06 c0       	rjmp	.+12     	; 0x138e <USB_Host_SendControlRequest+0xe8>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    1382:	80 91 af 00 	lds	r24, 0x00AF
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
				{
					*(DataStream++) = Pipe_Read_8();
    1386:	f8 01       	movw	r30, r16
    1388:	81 93       	st	Z+, r24
    138a:	8f 01       	movw	r16, r30
					DataLen--;
    138c:	21 97       	sbiw	r28, 0x01	; 1
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    138e:	80 91 f6 00 	lds	r24, 0x00F6
    1392:	90 91 f7 00 	lds	r25, 0x00F7
				  goto End_Of_Control_Send;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
    1396:	89 2b       	or	r24, r25
    1398:	11 f0       	breq	.+4      	; 0x139e <USB_Host_SendControlRequest+0xf8>
    139a:	20 97       	sbiw	r28, 0x00	; 0
    139c:	91 f7       	brne	.-28     	; 0x1382 <USB_Host_SendControlRequest+0xdc>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    139e:	80 91 a9 00 	lds	r24, 0x00A9
    13a2:	80 64       	ori	r24, 0x40	; 64
    13a4:	80 93 a9 00 	sts	0x00A9, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    13a8:	80 91 a6 00 	lds	r24, 0x00A6
    13ac:	8e 77       	andi	r24, 0x7E	; 126
    13ae:	80 93 a6 00 	sts	0x00A6, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
    13b2:	20 97       	sbiw	r28, 0x00	; 0
    13b4:	91 f6       	brne	.-92     	; 0x135a <USB_Host_SendControlRequest+0xb4>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    13b6:	80 91 aa 00 	lds	r24, 0x00AA
    13ba:	8f 7c       	andi	r24, 0xCF	; 207
    13bc:	80 62       	ori	r24, 0x20	; 32
    13be:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    13c2:	80 91 a9 00 	lds	r24, 0x00A9
    13c6:	8f 7b       	andi	r24, 0xBF	; 191
    13c8:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    13cc:	82 e0       	ldi	r24, 0x02	; 2
    13ce:	42 df       	rcall	.-380    	; 0x1254 <USB_Host_WaitForIOS>
    13d0:	98 2f       	mov	r25, r24
    13d2:	88 23       	and	r24, r24
    13d4:	09 f0       	breq	.+2      	; 0x13d8 <USB_Host_SendControlRequest+0x132>
    13d6:	56 c0       	rjmp	.+172    	; 0x1484 <USB_Host_SendControlRequest+0x1de>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    13d8:	80 91 a6 00 	lds	r24, 0x00A6
    13dc:	8b 77       	andi	r24, 0x7B	; 123
    13de:	80 93 a6 00 	sts	0x00A6, r24
		  goto End_Of_Control_Send;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    13e2:	82 e0       	ldi	r24, 0x02	; 2
    13e4:	37 df       	rcall	.-402    	; 0x1254 <USB_Host_WaitForIOS>
    13e6:	98 2f       	mov	r25, r24
    13e8:	4d c0       	rjmp	.+154    	; 0x1484 <USB_Host_SendControlRequest+0x1de>
		  goto End_Of_Control_Send;
	}
	else
	{
		if (DataStream != NULL)
    13ea:	01 15       	cp	r16, r1
    13ec:	11 05       	cpc	r17, r1
    13ee:	a9 f1       	breq	.+106    	; 0x145a <USB_Host_SendControlRequest+0x1b4>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    13f0:	80 91 aa 00 	lds	r24, 0x00AA
    13f4:	8f 7c       	andi	r24, 0xCF	; 207
    13f6:	80 62       	ori	r24, 0x20	; 32
    13f8:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    13fc:	80 91 a9 00 	lds	r24, 0x00A9
    1400:	8f 7b       	andi	r24, 0xBF	; 191
    1402:	80 93 a9 00 	sts	0x00A9, r24
    1406:	1d c0       	rjmp	.+58     	; 0x1442 <USB_Host_SendControlRequest+0x19c>
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1408:	82 e0       	ldi	r24, 0x02	; 2
    140a:	24 df       	rcall	.-440    	; 0x1254 <USB_Host_WaitForIOS>
    140c:	98 2f       	mov	r25, r24
    140e:	88 23       	and	r24, r24
    1410:	c9 f5       	brne	.+114    	; 0x1484 <USB_Host_SendControlRequest+0x1de>
				  goto End_Of_Control_Send;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    1412:	80 91 10 01 	lds	r24, 0x0110
    1416:	28 2f       	mov	r18, r24
    1418:	30 e0       	ldi	r19, 0x00	; 0
    141a:	07 c0       	rjmp	.+14     	; 0x142a <USB_Host_SendControlRequest+0x184>
				{
					Pipe_Write_8(*(DataStream++));
    141c:	f8 01       	movw	r30, r16
    141e:	81 91       	ld	r24, Z+
    1420:	8f 01       	movw	r16, r30
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    1422:	80 93 af 00 	sts	0x00AF, r24
					DataLen--;
    1426:	21 97       	sbiw	r28, 0x01	; 1
			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
				  goto End_Of_Control_Send;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    1428:	39 f0       	breq	.+14     	; 0x1438 <USB_Host_SendControlRequest+0x192>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    142a:	80 91 f6 00 	lds	r24, 0x00F6
    142e:	90 91 f7 00 	lds	r25, 0x00F7
    1432:	82 17       	cp	r24, r18
    1434:	93 07       	cpc	r25, r19
    1436:	90 f3       	brcs	.-28     	; 0x141c <USB_Host_SendControlRequest+0x176>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1438:	80 91 a6 00 	lds	r24, 0x00A6
    143c:	8b 77       	andi	r24, 0x7B	; 123
    143e:	80 93 a6 00 	sts	0x00A6, r24
		if (DataStream != NULL)
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
    1442:	20 97       	sbiw	r28, 0x00	; 0
    1444:	09 f7       	brne	.-62     	; 0x1408 <USB_Host_SendControlRequest+0x162>
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1446:	82 e0       	ldi	r24, 0x02	; 2
    1448:	05 df       	rcall	.-502    	; 0x1254 <USB_Host_WaitForIOS>
    144a:	98 2f       	mov	r25, r24
    144c:	88 23       	and	r24, r24
    144e:	d1 f4       	brne	.+52     	; 0x1484 <USB_Host_SendControlRequest+0x1de>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1450:	80 91 a9 00 	lds	r24, 0x00A9
    1454:	80 64       	ori	r24, 0x40	; 64
    1456:	80 93 a9 00 	sts	0x00A9, r24
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    145a:	80 91 aa 00 	lds	r24, 0x00AA
    145e:	8f 7c       	andi	r24, 0xCF	; 207
    1460:	80 61       	ori	r24, 0x10	; 16
    1462:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1466:	80 91 a9 00 	lds	r24, 0x00A9
    146a:	8f 7b       	andi	r24, 0xBF	; 191
    146c:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    1470:	81 e0       	ldi	r24, 0x01	; 1
    1472:	f0 de       	rcall	.-544    	; 0x1254 <USB_Host_WaitForIOS>
    1474:	98 2f       	mov	r25, r24
    1476:	88 23       	and	r24, r24
    1478:	29 f4       	brne	.+10     	; 0x1484 <USB_Host_SendControlRequest+0x1de>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    147a:	80 91 a6 00 	lds	r24, 0x00A6
    147e:	8e 77       	andi	r24, 0x7E	; 126
    1480:	80 93 a6 00 	sts	0x00A6, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1484:	80 91 a9 00 	lds	r24, 0x00A9
    1488:	80 64       	ori	r24, 0x40	; 64
    148a:	80 93 a9 00 	sts	0x00A9, r24
	}

End_Of_Control_Send:
	Pipe_Freeze();

	if (BusSuspended)
    148e:	f0 fc       	sbrc	r15, 0
    1490:	05 c0       	rjmp	.+10     	; 0x149c <USB_Host_SendControlRequest+0x1f6>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    1492:	80 91 9e 00 	lds	r24, 0x009E
    1496:	8e 7f       	andi	r24, 0xFE	; 254
    1498:	80 93 9e 00 	sts	0x009E, r24
			 *  \param[in] PipeNumber  Index of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t PipeNumber)
			{
				UPRST = (1 << PipeNumber);
    149c:	81 e0       	ldi	r24, 0x01	; 1
    149e:	80 93 a8 00 	sts	0x00A8, r24
				UPRST = 0;
    14a2:	10 92 a8 00 	sts	0x00A8, r1
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
    14a6:	89 2f       	mov	r24, r25
    14a8:	df 91       	pop	r29
    14aa:	cf 91       	pop	r28
    14ac:	1f 91       	pop	r17
    14ae:	0f 91       	pop	r16
    14b0:	ff 90       	pop	r15
    14b2:	08 95       	ret

000014b4 <USB_Host_SetDeviceConfiguration>:

	return HOST_SENDCONTROL_Successful;
}

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
    14b4:	1f 93       	push	r17
    14b6:	18 2f       	mov	r17, r24
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
    14b8:	10 92 f2 04 	sts	0x04F2, r1
    14bc:	89 e0       	ldi	r24, 0x09	; 9
    14be:	80 93 f3 04 	sts	0x04F3, r24
    14c2:	10 93 f4 04 	sts	0x04F4, r17
    14c6:	10 92 f5 04 	sts	0x04F5, r1
    14ca:	10 92 f7 04 	sts	0x04F7, r1
    14ce:	10 92 f6 04 	sts	0x04F6, r1
    14d2:	10 92 f9 04 	sts	0x04F9, r1
    14d6:	10 92 f8 04 	sts	0x04F8, r1
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    14da:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);
	
	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) == HOST_SENDCONTROL_Successful)
    14de:	80 e0       	ldi	r24, 0x00	; 0
    14e0:	90 e0       	ldi	r25, 0x00	; 0
    14e2:	e1 de       	rcall	.-574    	; 0x12a6 <USB_Host_SendControlRequest>
    14e4:	88 23       	and	r24, r24
    14e6:	49 f4       	brne	.+18     	; 0x14fa <USB_Host_SetDeviceConfiguration+0x46>
	{
		USB_Host_ConfigurationNumber = ConfigNumber;
    14e8:	10 93 f0 04 	sts	0x04F0, r17
		USB_HostState                = (ConfigNumber) ? HOST_STATE_Configured : HOST_STATE_Addressed;
    14ec:	11 23       	and	r17, r17
    14ee:	11 f4       	brne	.+4      	; 0x14f4 <USB_Host_SetDeviceConfiguration+0x40>
    14f0:	9a e0       	ldi	r25, 0x0A	; 10
    14f2:	01 c0       	rjmp	.+2      	; 0x14f6 <USB_Host_SetDeviceConfiguration+0x42>
    14f4:	9b e0       	ldi	r25, 0x0B	; 11
    14f6:	90 93 fa 04 	sts	0x04FA, r25
	}

	return ErrorCode;
}
    14fa:	1f 91       	pop	r17
    14fc:	08 95       	ret

000014fe <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    14fe:	ff 92       	push	r15
    1500:	0f 93       	push	r16
    1502:	1f 93       	push	r17
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
    1504:	07 ea       	ldi	r16, 0xA7	; 167
    1506:	10 e0       	ldi	r17, 0x00	; 0
    1508:	f8 01       	movw	r30, r16
    150a:	f0 80       	ld	r15, Z
    150c:	f7 e0       	ldi	r31, 0x07	; 7
    150e:	ff 22       	and	r15, r31
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1510:	f8 01       	movw	r30, r16
    1512:	10 82       	st	Z, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    1514:	cc da       	rcall	.-2664   	; 0xaae <USB_Host_ProcessNextHostState>
    1516:	f8 01       	movw	r30, r16
    1518:	f0 82       	st	Z, r15
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
    151a:	1f 91       	pop	r17
    151c:	0f 91       	pop	r16
    151e:	ff 90       	pop	r15
    1520:	08 95       	ret

00001522 <USB_GetHIDReportItemInfo>:
	return HID_PARSE_Successful;
}

bool USB_GetHIDReportItemInfo(const uint8_t* ReportData,
                              HID_ReportItem_t* const ReportItem)
{
    1522:	cf 92       	push	r12
    1524:	df 92       	push	r13
    1526:	ef 92       	push	r14
    1528:	ff 92       	push	r15
    152a:	0f 93       	push	r16
    152c:	1f 93       	push	r17
    152e:	cf 93       	push	r28
    1530:	df 93       	push	r29
    1532:	6c 01       	movw	r12, r24
    1534:	eb 01       	movw	r28, r22
	if (ReportItem == NULL)
    1536:	61 15       	cp	r22, r1
    1538:	71 05       	cpc	r23, r1
    153a:	09 f4       	brne	.+2      	; 0x153e <USB_GetHIDReportItemInfo+0x1c>
    153c:	4f c0       	rjmp	.+158    	; 0x15dc <USB_GetHIDReportItemInfo+0xba>
	  return false;

	uint16_t DataBitsRem  = ReportItem->Attributes.BitSize;
    153e:	28 85       	ldd	r18, Y+8	; 0x08
	uint16_t CurrentBit   = ReportItem->BitOffset;
    1540:	e8 80       	ld	r14, Y
    1542:	f9 80       	ldd	r15, Y+1	; 0x01
	uint32_t BitMask      = (1 << 0);

	if (ReportItem->ReportID)
    1544:	9d 81       	ldd	r25, Y+5	; 0x05
    1546:	99 23       	and	r25, r25
    1548:	41 f0       	breq	.+16     	; 0x155a <USB_GetHIDReportItemInfo+0x38>
	{
		if (ReportItem->ReportID != ReportData[0])
    154a:	f6 01       	movw	r30, r12
    154c:	80 81       	ld	r24, Z
    154e:	98 17       	cp	r25, r24
    1550:	09 f0       	breq	.+2      	; 0x1554 <USB_GetHIDReportItemInfo+0x32>
    1552:	44 c0       	rjmp	.+136    	; 0x15dc <USB_GetHIDReportItemInfo+0xba>
		  return false;

		ReportData++;
    1554:	08 94       	sec
    1556:	c1 1c       	adc	r12, r1
    1558:	d1 1c       	adc	r13, r1
                              HID_ReportItem_t* const ReportItem)
{
	if (ReportItem == NULL)
	  return false;

	uint16_t DataBitsRem  = ReportItem->Attributes.BitSize;
    155a:	02 2f       	mov	r16, r18
    155c:	10 e0       	ldi	r17, 0x00	; 0
		  return false;

		ReportData++;
	}

	ReportItem->PreviousValue = ReportItem->Value;
    155e:	8a a1       	ldd	r24, Y+34	; 0x22
    1560:	9b a1       	ldd	r25, Y+35	; 0x23
    1562:	ac a1       	ldd	r26, Y+36	; 0x24
    1564:	bd a1       	ldd	r27, Y+37	; 0x25
    1566:	8e a3       	std	Y+38, r24	; 0x26
    1568:	9f a3       	std	Y+39, r25	; 0x27
    156a:	a8 a7       	std	Y+40, r26	; 0x28
    156c:	b9 a7       	std	Y+41, r27	; 0x29
	ReportItem->Value = 0;
    156e:	1a a2       	std	Y+34, r1	; 0x22
    1570:	1b a2       	std	Y+35, r1	; 0x23
    1572:	1c a2       	std	Y+36, r1	; 0x24
    1574:	1d a2       	std	Y+37, r1	; 0x25
    1576:	41 e0       	ldi	r20, 0x01	; 1
    1578:	50 e0       	ldi	r21, 0x00	; 0
    157a:	60 e0       	ldi	r22, 0x00	; 0
    157c:	70 e0       	ldi	r23, 0x00	; 0
    157e:	29 c0       	rjmp	.+82     	; 0x15d2 <USB_GetHIDReportItemInfo+0xb0>

	while (DataBitsRem--)
	{
		if (ReportData[CurrentBit / 8] & (1 << (CurrentBit % 8)))
    1580:	f7 01       	movw	r30, r14
    1582:	93 e0       	ldi	r25, 0x03	; 3
    1584:	f6 95       	lsr	r31
    1586:	e7 95       	ror	r30
    1588:	9a 95       	dec	r25
    158a:	e1 f7       	brne	.-8      	; 0x1584 <USB_GetHIDReportItemInfo+0x62>
    158c:	ec 0d       	add	r30, r12
    158e:	fd 1d       	adc	r31, r13
    1590:	80 81       	ld	r24, Z
    1592:	90 e0       	ldi	r25, 0x00	; 0
    1594:	97 01       	movw	r18, r14
    1596:	27 70       	andi	r18, 0x07	; 7
    1598:	30 70       	andi	r19, 0x00	; 0
    159a:	02 c0       	rjmp	.+4      	; 0x15a0 <USB_GetHIDReportItemInfo+0x7e>
    159c:	95 95       	asr	r25
    159e:	87 95       	ror	r24
    15a0:	2a 95       	dec	r18
    15a2:	e2 f7       	brpl	.-8      	; 0x159c <USB_GetHIDReportItemInfo+0x7a>
    15a4:	80 ff       	sbrs	r24, 0
    15a6:	0c c0       	rjmp	.+24     	; 0x15c0 <USB_GetHIDReportItemInfo+0x9e>
		  ReportItem->Value |= BitMask;
    15a8:	8a a1       	ldd	r24, Y+34	; 0x22
    15aa:	9b a1       	ldd	r25, Y+35	; 0x23
    15ac:	ac a1       	ldd	r26, Y+36	; 0x24
    15ae:	bd a1       	ldd	r27, Y+37	; 0x25
    15b0:	84 2b       	or	r24, r20
    15b2:	95 2b       	or	r25, r21
    15b4:	a6 2b       	or	r26, r22
    15b6:	b7 2b       	or	r27, r23
    15b8:	8a a3       	std	Y+34, r24	; 0x22
    15ba:	9b a3       	std	Y+35, r25	; 0x23
    15bc:	ac a3       	std	Y+36, r26	; 0x24
    15be:	bd a3       	std	Y+37, r27	; 0x25

		CurrentBit++;
    15c0:	08 94       	sec
    15c2:	e1 1c       	adc	r14, r1
    15c4:	f1 1c       	adc	r15, r1
		BitMask <<= 1;
    15c6:	44 0f       	add	r20, r20
    15c8:	55 1f       	adc	r21, r21
    15ca:	66 1f       	adc	r22, r22
    15cc:	77 1f       	adc	r23, r23
    15ce:	01 50       	subi	r16, 0x01	; 1
    15d0:	10 40       	sbci	r17, 0x00	; 0
	}

	ReportItem->PreviousValue = ReportItem->Value;
	ReportItem->Value = 0;

	while (DataBitsRem--)
    15d2:	01 15       	cp	r16, r1
    15d4:	11 05       	cpc	r17, r1
    15d6:	a1 f6       	brne	.-88     	; 0x1580 <USB_GetHIDReportItemInfo+0x5e>
    15d8:	81 e0       	ldi	r24, 0x01	; 1
    15da:	01 c0       	rjmp	.+2      	; 0x15de <USB_GetHIDReportItemInfo+0xbc>
    15dc:	80 e0       	ldi	r24, 0x00	; 0
		CurrentBit++;
		BitMask <<= 1;
	}

	return true;
}
    15de:	df 91       	pop	r29
    15e0:	cf 91       	pop	r28
    15e2:	1f 91       	pop	r17
    15e4:	0f 91       	pop	r16
    15e6:	ff 90       	pop	r15
    15e8:	ef 90       	pop	r14
    15ea:	df 90       	pop	r13
    15ec:	cf 90       	pop	r12
    15ee:	08 95       	ret

000015f0 <USB_ProcessHIDReport>:
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
    15f0:	2f 92       	push	r2
    15f2:	3f 92       	push	r3
    15f4:	4f 92       	push	r4
    15f6:	5f 92       	push	r5
    15f8:	6f 92       	push	r6
    15fa:	7f 92       	push	r7
    15fc:	8f 92       	push	r8
    15fe:	9f 92       	push	r9
    1600:	af 92       	push	r10
    1602:	bf 92       	push	r11
    1604:	cf 92       	push	r12
    1606:	df 92       	push	r13
    1608:	ef 92       	push	r14
    160a:	ff 92       	push	r15
    160c:	0f 93       	push	r16
    160e:	1f 93       	push	r17
    1610:	df 93       	push	r29
    1612:	cf 93       	push	r28
    1614:	cd b7       	in	r28, 0x3d	; 61
    1616:	de b7       	in	r29, 0x3e	; 62
    1618:	c5 59       	subi	r28, 0x95	; 149
    161a:	d0 40       	sbci	r29, 0x00	; 0
    161c:	0f b6       	in	r0, 0x3f	; 63
    161e:	f8 94       	cli
    1620:	de bf       	out	0x3e, r29	; 62
    1622:	0f be       	out	0x3f, r0	; 63
    1624:	cd bf       	out	0x3d, r28	; 61
    1626:	cf 57       	subi	r28, 0x7F	; 127
    1628:	df 4f       	sbci	r29, 0xFF	; 255
    162a:	99 83       	std	Y+1, r25	; 0x01
    162c:	88 83       	st	Y, r24
    162e:	c1 58       	subi	r28, 0x81	; 129
    1630:	d0 40       	sbci	r29, 0x00	; 0
    1632:	cd 57       	subi	r28, 0x7D	; 125
    1634:	df 4f       	sbci	r29, 0xFF	; 255
    1636:	79 83       	std	Y+1, r23	; 0x01
    1638:	68 83       	st	Y, r22
    163a:	c3 58       	subi	r28, 0x83	; 131
    163c:	d0 40       	sbci	r29, 0x00	; 0
    163e:	1a 01       	movw	r2, r20
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath      = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo        = &ParserData->ReportIDSizes[0];
    1640:	20 e9       	ldi	r18, 0x90	; 144
    1642:	82 2e       	mov	r8, r18
    1644:	23 e0       	ldi	r18, 0x03	; 3
    1646:	92 2e       	mov	r9, r18
    1648:	84 0e       	add	r8, r20
    164a:	95 1e       	adc	r9, r21
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize           = 0;
	HID_MinMax_t          UsageMinMax             = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
    164c:	89 ed       	ldi	r24, 0xD9	; 217
    164e:	93 e0       	ldi	r25, 0x03	; 3
    1650:	da 01       	movw	r26, r20
    1652:	fc 01       	movw	r30, r24
    1654:	1d 92       	st	X+, r1
    1656:	31 97       	sbiw	r30, 0x01	; 1
    1658:	e9 f7       	brne	.-6      	; 0x1654 <USB_ProcessHIDReport+0x64>
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
    165a:	fe 01       	movw	r30, r28
    165c:	fb 96       	adiw	r30, 0x3b	; 59
    165e:	8c e1       	ldi	r24, 0x1C	; 28
    1660:	df 01       	movw	r26, r30
    1662:	1d 92       	st	X+, r1
    1664:	8a 95       	dec	r24
    1666:	e9 f7       	brne	.-6      	; 0x1662 <USB_ProcessHIDReport+0x72>
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
    1668:	87 e0       	ldi	r24, 0x07	; 7
    166a:	d4 01       	movw	r26, r8
    166c:	1d 92       	st	X+, r1
    166e:	8a 95       	dec	r24
    1670:	e9 f7       	brne	.-6      	; 0x166c <USB_ProcessHIDReport+0x7c>

	ParserData->TotalDeviceReports = 1;
    1672:	da 01       	movw	r26, r20
    1674:	a1 57       	subi	r26, 0x71	; 113
    1676:	bc 4f       	sbci	r27, 0xFC	; 252
    1678:	81 e0       	ldi	r24, 0x01	; 1
    167a:	8c 93       	st	X, r24
				UsageMinMax.Maximum = ReportItemData;
				break;
			case HID_RI_COLLECTION(0):
				if (CurrCollectionPath == NULL)
				{
					CurrCollectionPath = &ParserData->CollectionPaths[0];
    167c:	9a 01       	movw	r18, r20
    167e:	27 5b       	subi	r18, 0xB7	; 183
    1680:	3c 4f       	sbci	r19, 0xFC	; 252
    1682:	e7 96       	adiw	r28, 0x37	; 55
    1684:	3f af       	std	Y+63, r19	; 0x3f
    1686:	2e af       	std	Y+62, r18	; 0x3e
    1688:	e7 97       	sbiw	r28, 0x37	; 55
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
    168a:	40 5b       	subi	r20, 0xB0	; 176
    168c:	5c 4f       	sbci	r21, 0xFC	; 252
    168e:	e5 96       	adiw	r28, 0x35	; 53
    1690:	5f af       	std	Y+63, r21	; 0x3f
    1692:	4e af       	std	Y+62, r20	; 0x3e
    1694:	e5 97       	sbiw	r28, 0x35	; 53

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
    1696:	c1 01       	movw	r24, r2
    1698:	88 57       	subi	r24, 0x78	; 120
    169a:	9c 4f       	sbci	r25, 0xFC	; 252
    169c:	ef 96       	adiw	r28, 0x3f	; 63
    169e:	9f af       	std	Y+63, r25	; 0x3f
    16a0:	8e af       	std	Y+62, r24	; 0x3e
    16a2:	ef 97       	sbiw	r28, 0x3f	; 63
    16a4:	6f 01       	movw	r12, r30
    16a6:	aa 24       	eor	r10, r10
    16a8:	bb 24       	eor	r11, r11
    16aa:	ed 96       	adiw	r28, 0x3d	; 61
    16ac:	1f ae       	std	Y+63, r1	; 0x3f
    16ae:	ed 97       	sbiw	r28, 0x3d	; 61
    16b0:	eb 96       	adiw	r28, 0x3b	; 59
    16b2:	1c ae       	std	Y+60, r1	; 0x3c
    16b4:	1d ae       	std	Y+61, r1	; 0x3d
    16b6:	1e ae       	std	Y+62, r1	; 0x3e
    16b8:	1f ae       	std	Y+63, r1	; 0x3f
    16ba:	eb 97       	sbiw	r28, 0x3b	; 59
    16bc:	44 24       	eor	r4, r4
    16be:	55 24       	eor	r5, r5
    16c0:	32 01       	movw	r6, r4

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
    16c2:	f1 01       	movw	r30, r2
    16c4:	ea 52       	subi	r30, 0x2A	; 42
    16c6:	fc 4f       	sbci	r31, 0xFC	; 252
    16c8:	c6 57       	subi	r28, 0x76	; 118
    16ca:	df 4f       	sbci	r29, 0xFF	; 255
    16cc:	f9 83       	std	Y+1, r31	; 0x01
    16ce:	e8 83       	st	Y, r30
    16d0:	ca 58       	subi	r28, 0x8A	; 138
    16d2:	d0 40       	sbci	r29, 0x00	; 0
				       sizeof(HID_ReportItem_t));

				CurrStateTable++;
				break;
			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
    16d4:	cc 56       	subi	r28, 0x6C	; 108
    16d6:	df 4f       	sbci	r29, 0xFF	; 255
    16d8:	d9 82       	std	Y+1, r13	; 0x01
    16da:	c8 82       	st	Y, r12
    16dc:	c4 59       	subi	r28, 0x94	; 148
    16de:	d0 40       	sbci	r29, 0x00	; 0
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
    16e0:	96 01       	movw	r18, r12
    16e2:	24 5e       	subi	r18, 0xE4	; 228
    16e4:	3f 4f       	sbci	r19, 0xFF	; 255
    16e6:	c4 57       	subi	r28, 0x74	; 116
    16e8:	df 4f       	sbci	r29, 0xFF	; 255
    16ea:	39 83       	std	Y+1, r19	; 0x01
    16ec:	28 83       	st	Y, r18
    16ee:	cc 58       	subi	r28, 0x8C	; 140
    16f0:	d0 40       	sbci	r29, 0x00	; 0
				CurrStateTable->ReportCount                 = ReportItemData;
				break;
			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;

				if (ParserData->UsingReportIDs)
    16f2:	a1 01       	movw	r20, r2
    16f4:	48 52       	subi	r20, 0x28	; 40
    16f6:	5c 4f       	sbci	r21, 0xFC	; 252
    16f8:	c2 57       	subi	r28, 0x72	; 114
    16fa:	df 4f       	sbci	r29, 0xFF	; 255
    16fc:	59 83       	std	Y+1, r21	; 0x01
    16fe:	48 83       	st	Y, r20
    1700:	ce 58       	subi	r28, 0x8E	; 142
    1702:	d0 40       	sbci	r29, 0x00	; 0
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
    1704:	c0 57       	subi	r28, 0x70	; 112
    1706:	df 4f       	sbci	r29, 0xFF	; 255
    1708:	b9 83       	std	Y+1, r27	; 0x01
    170a:	a8 83       	st	Y, r26
    170c:	c0 59       	subi	r28, 0x90	; 144
    170e:	d0 40       	sbci	r29, 0x00	; 0
    1710:	c4 01       	movw	r24, r8
    1712:	ce 56       	subi	r28, 0x6E	; 110
    1714:	df 4f       	sbci	r29, 0xFF	; 255
    1716:	88 82       	st	Y, r8
    1718:	c2 59       	subi	r28, 0x92	; 146
    171a:	d0 40       	sbci	r29, 0x00	; 0
    171c:	cd 56       	subi	r28, 0x6D	; 109
    171e:	df 4f       	sbci	r29, 0xFF	; 255
    1720:	98 83       	st	Y, r25
    1722:	c3 59       	subi	r28, 0x93	; 147
    1724:	d0 40       	sbci	r29, 0x00	; 0
    1726:	3e c3       	rjmp	.+1660   	; 0x1da4 <USB_ProcessHIDReport+0x7b4>

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
	{
		uint8_t  HIDReportItem  = *ReportData;
    1728:	cf 57       	subi	r28, 0x7F	; 127
    172a:	df 4f       	sbci	r29, 0xFF	; 255
    172c:	a8 81       	ld	r26, Y
    172e:	b9 81       	ldd	r27, Y+1	; 0x01
    1730:	c1 58       	subi	r28, 0x81	; 129
    1732:	d0 40       	sbci	r29, 0x00	; 0
    1734:	4d 91       	ld	r20, X+
    1736:	cf 57       	subi	r28, 0x7F	; 127
    1738:	df 4f       	sbci	r29, 0xFF	; 255
    173a:	b9 83       	std	Y+1, r27	; 0x01
    173c:	a8 83       	st	Y, r26
    173e:	c1 58       	subi	r28, 0x81	; 129
    1740:	d0 40       	sbci	r29, 0x00	; 0
		uint32_t ReportItemData = 0;

		ReportData++;
		ReportSize--;
    1742:	cd 57       	subi	r28, 0x7D	; 125
    1744:	df 4f       	sbci	r29, 0xFF	; 255
    1746:	e8 81       	ld	r30, Y
    1748:	f9 81       	ldd	r31, Y+1	; 0x01
    174a:	c3 58       	subi	r28, 0x83	; 131
    174c:	d0 40       	sbci	r29, 0x00	; 0
    174e:	31 97       	sbiw	r30, 0x01	; 1
    1750:	cd 57       	subi	r28, 0x7D	; 125
    1752:	df 4f       	sbci	r29, 0xFF	; 255
    1754:	f9 83       	std	Y+1, r31	; 0x01
    1756:	e8 83       	st	Y, r30
    1758:	c3 58       	subi	r28, 0x83	; 131
    175a:	d0 40       	sbci	r29, 0x00	; 0

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
    175c:	24 2f       	mov	r18, r20
    175e:	30 e0       	ldi	r19, 0x00	; 0
    1760:	c1 58       	subi	r28, 0x81	; 129
    1762:	df 4f       	sbci	r29, 0xFF	; 255
    1764:	39 83       	std	Y+1, r19	; 0x01
    1766:	28 83       	st	Y, r18
    1768:	cf 57       	subi	r28, 0x7F	; 127
    176a:	d0 40       	sbci	r29, 0x00	; 0
    176c:	23 70       	andi	r18, 0x03	; 3
    176e:	30 70       	andi	r19, 0x00	; 0
    1770:	22 30       	cpi	r18, 0x02	; 2
    1772:	31 05       	cpc	r19, r1
    1774:	11 f1       	breq	.+68     	; 0x17ba <USB_ProcessHIDReport+0x1ca>
    1776:	23 30       	cpi	r18, 0x03	; 3
    1778:	31 05       	cpc	r19, r1
    177a:	39 f0       	breq	.+14     	; 0x178a <USB_ProcessHIDReport+0x19a>
    177c:	21 30       	cpi	r18, 0x01	; 1
    177e:	31 05       	cpc	r19, r1
    1780:	a9 f1       	breq	.+106    	; 0x17ec <USB_ProcessHIDReport+0x1fc>
    1782:	ee 24       	eor	r14, r14
    1784:	ff 24       	eor	r15, r15
    1786:	87 01       	movw	r16, r14
    1788:	4f c0       	rjmp	.+158    	; 0x1828 <USB_ProcessHIDReport+0x238>
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = le32_to_cpu(*((uint32_t*)ReportData));
    178a:	cf 57       	subi	r28, 0x7F	; 127
    178c:	df 4f       	sbci	r29, 0xFF	; 255
    178e:	a8 81       	ld	r26, Y
    1790:	b9 81       	ldd	r27, Y+1	; 0x01
    1792:	c1 58       	subi	r28, 0x81	; 129
    1794:	d0 40       	sbci	r29, 0x00	; 0
    1796:	ed 90       	ld	r14, X+
    1798:	fd 90       	ld	r15, X+
    179a:	0d 91       	ld	r16, X+
    179c:	1d 91       	ld	r17, X+
    179e:	cf 57       	subi	r28, 0x7F	; 127
    17a0:	df 4f       	sbci	r29, 0xFF	; 255
    17a2:	b9 83       	std	Y+1, r27	; 0x01
    17a4:	a8 83       	st	Y, r26
    17a6:	c1 58       	subi	r28, 0x81	; 129
    17a8:	d0 40       	sbci	r29, 0x00	; 0
				ReportSize     -= 4;
    17aa:	cd 57       	subi	r28, 0x7D	; 125
    17ac:	df 4f       	sbci	r29, 0xFF	; 255
    17ae:	e8 81       	ld	r30, Y
    17b0:	f9 81       	ldd	r31, Y+1	; 0x01
    17b2:	c3 58       	subi	r28, 0x83	; 131
    17b4:	d0 40       	sbci	r29, 0x00	; 0
    17b6:	34 97       	sbiw	r30, 0x04	; 4
    17b8:	31 c0       	rjmp	.+98     	; 0x181c <USB_ProcessHIDReport+0x22c>
				ReportData     += 4;
				break;
			case HID_RI_DATA_BITS_16:
				ReportItemData  = le16_to_cpu(*((uint16_t*)ReportData));
    17ba:	cf 57       	subi	r28, 0x7F	; 127
    17bc:	df 4f       	sbci	r29, 0xFF	; 255
    17be:	a8 81       	ld	r26, Y
    17c0:	b9 81       	ldd	r27, Y+1	; 0x01
    17c2:	c1 58       	subi	r28, 0x81	; 129
    17c4:	d0 40       	sbci	r29, 0x00	; 0
    17c6:	8d 91       	ld	r24, X+
    17c8:	9d 91       	ld	r25, X+
    17ca:	cf 57       	subi	r28, 0x7F	; 127
    17cc:	df 4f       	sbci	r29, 0xFF	; 255
    17ce:	b9 83       	std	Y+1, r27	; 0x01
    17d0:	a8 83       	st	Y, r26
    17d2:	c1 58       	subi	r28, 0x81	; 129
    17d4:	d0 40       	sbci	r29, 0x00	; 0
    17d6:	7c 01       	movw	r14, r24
    17d8:	00 e0       	ldi	r16, 0x00	; 0
    17da:	10 e0       	ldi	r17, 0x00	; 0
				ReportSize     -= 2;
    17dc:	cd 57       	subi	r28, 0x7D	; 125
    17de:	df 4f       	sbci	r29, 0xFF	; 255
    17e0:	e8 81       	ld	r30, Y
    17e2:	f9 81       	ldd	r31, Y+1	; 0x01
    17e4:	c3 58       	subi	r28, 0x83	; 131
    17e6:	d0 40       	sbci	r29, 0x00	; 0
    17e8:	32 97       	sbiw	r30, 0x02	; 2
    17ea:	18 c0       	rjmp	.+48     	; 0x181c <USB_ProcessHIDReport+0x22c>
				ReportData     += 2;
				break;
			case HID_RI_DATA_BITS_8:
				ReportItemData  = *((uint8_t*)ReportData);
    17ec:	cf 57       	subi	r28, 0x7F	; 127
    17ee:	df 4f       	sbci	r29, 0xFF	; 255
    17f0:	a8 81       	ld	r26, Y
    17f2:	b9 81       	ldd	r27, Y+1	; 0x01
    17f4:	c1 58       	subi	r28, 0x81	; 129
    17f6:	d0 40       	sbci	r29, 0x00	; 0
    17f8:	8d 91       	ld	r24, X+
    17fa:	cf 57       	subi	r28, 0x7F	; 127
    17fc:	df 4f       	sbci	r29, 0xFF	; 255
    17fe:	b9 83       	std	Y+1, r27	; 0x01
    1800:	a8 83       	st	Y, r26
    1802:	c1 58       	subi	r28, 0x81	; 129
    1804:	d0 40       	sbci	r29, 0x00	; 0
    1806:	e8 2e       	mov	r14, r24
    1808:	ff 24       	eor	r15, r15
    180a:	00 e0       	ldi	r16, 0x00	; 0
    180c:	10 e0       	ldi	r17, 0x00	; 0
				ReportSize     -= 1;
    180e:	cd 57       	subi	r28, 0x7D	; 125
    1810:	df 4f       	sbci	r29, 0xFF	; 255
    1812:	e8 81       	ld	r30, Y
    1814:	f9 81       	ldd	r31, Y+1	; 0x01
    1816:	c3 58       	subi	r28, 0x83	; 131
    1818:	d0 40       	sbci	r29, 0x00	; 0
    181a:	31 97       	sbiw	r30, 0x01	; 1
    181c:	cd 57       	subi	r28, 0x7D	; 125
    181e:	df 4f       	sbci	r29, 0xFF	; 255
    1820:	f9 83       	std	Y+1, r31	; 0x01
    1822:	e8 83       	st	Y, r30
    1824:	c3 58       	subi	r28, 0x83	; 131
    1826:	d0 40       	sbci	r29, 0x00	; 0
				ReportData     += 1;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
    1828:	c1 58       	subi	r28, 0x81	; 129
    182a:	df 4f       	sbci	r29, 0xFF	; 255
    182c:	88 81       	ld	r24, Y
    182e:	99 81       	ldd	r25, Y+1	; 0x01
    1830:	cf 57       	subi	r28, 0x7F	; 127
    1832:	d0 40       	sbci	r29, 0x00	; 0
    1834:	8c 7f       	andi	r24, 0xFC	; 252
    1836:	90 70       	andi	r25, 0x00	; 0
    1838:	84 36       	cpi	r24, 0x64	; 100
    183a:	91 05       	cpc	r25, r1
    183c:	09 f4       	brne	.+2      	; 0x1840 <USB_ProcessHIDReport+0x250>
    183e:	db c0       	rjmp	.+438    	; 0x19f6 <USB_ProcessHIDReport+0x406>
    1840:	85 36       	cpi	r24, 0x65	; 101
    1842:	91 05       	cpc	r25, r1
    1844:	74 f5       	brge	.+92     	; 0x18a2 <USB_ProcessHIDReport+0x2b2>
    1846:	84 32       	cpi	r24, 0x24	; 36
    1848:	91 05       	cpc	r25, r1
    184a:	09 f4       	brne	.+2      	; 0x184e <USB_ProcessHIDReport+0x25e>
    184c:	bb c0       	rjmp	.+374    	; 0x19c4 <USB_ProcessHIDReport+0x3d4>
    184e:	85 32       	cpi	r24, 0x25	; 37
    1850:	91 05       	cpc	r25, r1
    1852:	9c f4       	brge	.+38     	; 0x187a <USB_ProcessHIDReport+0x28a>
    1854:	88 30       	cpi	r24, 0x08	; 8
    1856:	91 05       	cpc	r25, r1
    1858:	09 f4       	brne	.+2      	; 0x185c <USB_ProcessHIDReport+0x26c>
    185a:	37 c1       	rjmp	.+622    	; 0x1aca <USB_ProcessHIDReport+0x4da>
    185c:	89 30       	cpi	r24, 0x09	; 9
    185e:	91 05       	cpc	r25, r1
    1860:	24 f4       	brge	.+8      	; 0x186a <USB_ProcessHIDReport+0x27a>
    1862:	04 97       	sbiw	r24, 0x04	; 4
    1864:	09 f0       	breq	.+2      	; 0x1868 <USB_ProcessHIDReport+0x278>
    1866:	86 c2       	rjmp	.+1292   	; 0x1d74 <USB_ProcessHIDReport+0x784>
    1868:	98 c0       	rjmp	.+304    	; 0x199a <USB_ProcessHIDReport+0x3aa>
    186a:	84 31       	cpi	r24, 0x14	; 20
    186c:	91 05       	cpc	r25, r1
    186e:	09 f4       	brne	.+2      	; 0x1872 <USB_ProcessHIDReport+0x282>
    1870:	a3 c0       	rjmp	.+326    	; 0x19b8 <USB_ProcessHIDReport+0x3c8>
    1872:	48 97       	sbiw	r24, 0x18	; 24
    1874:	09 f0       	breq	.+2      	; 0x1878 <USB_ProcessHIDReport+0x288>
    1876:	7e c2       	rjmp	.+1276   	; 0x1d74 <USB_ProcessHIDReport+0x784>
    1878:	47 c0       	rjmp	.+142    	; 0x1908 <USB_ProcessHIDReport+0x318>
    187a:	84 33       	cpi	r24, 0x34	; 52
    187c:	91 05       	cpc	r25, r1
    187e:	09 f4       	brne	.+2      	; 0x1882 <USB_ProcessHIDReport+0x292>
    1880:	a9 c0       	rjmp	.+338    	; 0x19d4 <USB_ProcessHIDReport+0x3e4>
    1882:	85 33       	cpi	r24, 0x35	; 53
    1884:	91 05       	cpc	r25, r1
    1886:	24 f4       	brge	.+8      	; 0x1890 <USB_ProcessHIDReport+0x2a0>
    1888:	88 97       	sbiw	r24, 0x28	; 40
    188a:	09 f0       	breq	.+2      	; 0x188e <USB_ProcessHIDReport+0x29e>
    188c:	73 c2       	rjmp	.+1254   	; 0x1d74 <USB_ProcessHIDReport+0x784>
    188e:	38 c1       	rjmp	.+624    	; 0x1b00 <USB_ProcessHIDReport+0x510>
    1890:	84 34       	cpi	r24, 0x44	; 68
    1892:	91 05       	cpc	r25, r1
    1894:	09 f4       	brne	.+2      	; 0x1898 <USB_ProcessHIDReport+0x2a8>
    1896:	a4 c0       	rjmp	.+328    	; 0x19e0 <USB_ProcessHIDReport+0x3f0>
    1898:	84 35       	cpi	r24, 0x54	; 84
    189a:	91 05       	cpc	r25, r1
    189c:	09 f0       	breq	.+2      	; 0x18a0 <USB_ProcessHIDReport+0x2b0>
    189e:	6a c2       	rjmp	.+1236   	; 0x1d74 <USB_ProcessHIDReport+0x784>
    18a0:	a7 c0       	rjmp	.+334    	; 0x19f0 <USB_ProcessHIDReport+0x400>
    18a2:	84 39       	cpi	r24, 0x94	; 148
    18a4:	91 05       	cpc	r25, r1
    18a6:	09 f4       	brne	.+2      	; 0x18aa <USB_ProcessHIDReport+0x2ba>
    18a8:	b1 c0       	rjmp	.+354    	; 0x1a0c <USB_ProcessHIDReport+0x41c>
    18aa:	85 39       	cpi	r24, 0x95	; 149
    18ac:	91 05       	cpc	r25, r1
    18ae:	a4 f4       	brge	.+40     	; 0x18d8 <USB_ProcessHIDReport+0x2e8>
    18b0:	80 38       	cpi	r24, 0x80	; 128
    18b2:	91 05       	cpc	r25, r1
    18b4:	69 f1       	breq	.+90     	; 0x1910 <USB_ProcessHIDReport+0x320>
    18b6:	81 38       	cpi	r24, 0x81	; 129
    18b8:	91 05       	cpc	r25, r1
    18ba:	2c f4       	brge	.+10     	; 0x18c6 <USB_ProcessHIDReport+0x2d6>
    18bc:	84 37       	cpi	r24, 0x74	; 116
    18be:	91 05       	cpc	r25, r1
    18c0:	09 f0       	breq	.+2      	; 0x18c4 <USB_ProcessHIDReport+0x2d4>
    18c2:	58 c2       	rjmp	.+1200   	; 0x1d74 <USB_ProcessHIDReport+0x784>
    18c4:	a0 c0       	rjmp	.+320    	; 0x1a06 <USB_ProcessHIDReport+0x416>
    18c6:	84 38       	cpi	r24, 0x84	; 132
    18c8:	91 05       	cpc	r25, r1
    18ca:	09 f4       	brne	.+2      	; 0x18ce <USB_ProcessHIDReport+0x2de>
    18cc:	a3 c0       	rjmp	.+326    	; 0x1a14 <USB_ProcessHIDReport+0x424>
    18ce:	80 39       	cpi	r24, 0x90	; 144
    18d0:	91 05       	cpc	r25, r1
    18d2:	09 f0       	breq	.+2      	; 0x18d6 <USB_ProcessHIDReport+0x2e6>
    18d4:	4f c2       	rjmp	.+1182   	; 0x1d74 <USB_ProcessHIDReport+0x784>
    18d6:	1c c0       	rjmp	.+56     	; 0x1910 <USB_ProcessHIDReport+0x320>
    18d8:	80 3b       	cpi	r24, 0xB0	; 176
    18da:	91 05       	cpc	r25, r1
    18dc:	c9 f0       	breq	.+50     	; 0x1910 <USB_ProcessHIDReport+0x320>
    18de:	81 3b       	cpi	r24, 0xB1	; 177
    18e0:	91 05       	cpc	r25, r1
    18e2:	4c f4       	brge	.+18     	; 0x18f6 <USB_ProcessHIDReport+0x306>
    18e4:	80 3a       	cpi	r24, 0xA0	; 160
    18e6:	91 05       	cpc	r25, r1
    18e8:	09 f4       	brne	.+2      	; 0x18ec <USB_ProcessHIDReport+0x2fc>
    18ea:	12 c1       	rjmp	.+548    	; 0x1b10 <USB_ProcessHIDReport+0x520>
    18ec:	84 3a       	cpi	r24, 0xA4	; 164
    18ee:	91 05       	cpc	r25, r1
    18f0:	09 f0       	breq	.+2      	; 0x18f4 <USB_ProcessHIDReport+0x304>
    18f2:	40 c2       	rjmp	.+1152   	; 0x1d74 <USB_ProcessHIDReport+0x784>
    18f4:	2a c0       	rjmp	.+84     	; 0x194a <USB_ProcessHIDReport+0x35a>
    18f6:	84 3b       	cpi	r24, 0xB4	; 180
    18f8:	91 05       	cpc	r25, r1
    18fa:	09 f4       	brne	.+2      	; 0x18fe <USB_ProcessHIDReport+0x30e>
    18fc:	3e c0       	rjmp	.+124    	; 0x197a <USB_ProcessHIDReport+0x38a>
    18fe:	80 3c       	cpi	r24, 0xC0	; 192
    1900:	91 05       	cpc	r25, r1
    1902:	09 f0       	breq	.+2      	; 0x1906 <USB_ProcessHIDReport+0x316>
    1904:	37 c2       	rjmp	.+1134   	; 0x1d74 <USB_ProcessHIDReport+0x784>
    1906:	63 c1       	rjmp	.+710    	; 0x1bce <USB_ProcessHIDReport+0x5de>
    1908:	f5 01       	movw	r30, r10
    190a:	27 01       	movw	r4, r14
    190c:	38 01       	movw	r6, r16
    190e:	33 c2       	rjmp	.+1126   	; 0x1d76 <USB_ProcessHIDReport+0x786>
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
    1910:	cb 57       	subi	r28, 0x7B	; 123
    1912:	df 4f       	sbci	r29, 0xFF	; 255
    1914:	c8 82       	st	Y, r12
    1916:	c5 58       	subi	r28, 0x85	; 133
    1918:	d0 40       	sbci	r29, 0x00	; 0
    191a:	ca 57       	subi	r28, 0x7A	; 122
    191c:	df 4f       	sbci	r29, 0xFF	; 255
    191e:	d8 82       	st	Y, r13
    1920:	c6 58       	subi	r28, 0x86	; 134
    1922:	d0 40       	sbci	r29, 0x00	; 0
    1924:	ec 96       	adiw	r28, 0x3c	; 60
    1926:	1f ae       	std	Y+63, r1	; 0x3f
    1928:	ec 97       	sbiw	r28, 0x3c	; 60
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
					}

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));
    192a:	4c 7f       	andi	r20, 0xFC	; 252
    192c:	c9 57       	subi	r28, 0x79	; 121
    192e:	df 4f       	sbci	r29, 0xFF	; 255
    1930:	48 83       	st	Y, r20
    1932:	c7 58       	subi	r28, 0x87	; 135
    1934:	d0 40       	sbci	r29, 0x00	; 0
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
    1936:	97 01       	movw	r18, r14
    1938:	21 70       	andi	r18, 0x01	; 1
    193a:	30 70       	andi	r19, 0x00	; 0
    193c:	c8 57       	subi	r28, 0x78	; 120
    193e:	df 4f       	sbci	r29, 0xFF	; 255
    1940:	39 83       	std	Y+1, r19	; 0x01
    1942:	28 83       	st	Y, r18
    1944:	c8 58       	subi	r28, 0x88	; 136
    1946:	d0 40       	sbci	r29, 0x00	; 0
    1948:	0d c2       	rjmp	.+1050   	; 0x1d64 <USB_ProcessHIDReport+0x774>
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
    194a:	c4 57       	subi	r28, 0x74	; 116
    194c:	df 4f       	sbci	r29, 0xFF	; 255
    194e:	48 81       	ld	r20, Y
    1950:	59 81       	ldd	r21, Y+1	; 0x01
    1952:	cc 58       	subi	r28, 0x8C	; 140
    1954:	d0 40       	sbci	r29, 0x00	; 0
    1956:	c4 16       	cp	r12, r20
    1958:	d5 06       	cpc	r13, r21
    195a:	11 f4       	brne	.+4      	; 0x1960 <USB_ProcessHIDReport+0x370>
    195c:	81 e0       	ldi	r24, 0x01	; 1
    195e:	32 c2       	rjmp	.+1124   	; 0x1dc4 <USB_ProcessHIDReport+0x7d4>
				  return HID_PARSE_HIDStackOverflow;

				memcpy((CurrStateTable + 1),
    1960:	d6 01       	movw	r26, r12
    1962:	5c 96       	adiw	r26, 0x1c	; 28
    1964:	f6 01       	movw	r30, r12
    1966:	8a e2       	ldi	r24, 0x2A	; 42
    1968:	01 90       	ld	r0, Z+
    196a:	0d 92       	st	X+, r0
    196c:	81 50       	subi	r24, 0x01	; 1
    196e:	e1 f7       	brne	.-8      	; 0x1968 <USB_ProcessHIDReport+0x378>
				       CurrStateTable,
				       sizeof(HID_ReportItem_t));

				CurrStateTable++;
    1970:	8c e1       	ldi	r24, 0x1C	; 28
    1972:	90 e0       	ldi	r25, 0x00	; 0
    1974:	c8 0e       	add	r12, r24
    1976:	d9 1e       	adc	r13, r25
    1978:	fd c1       	rjmp	.+1018   	; 0x1d74 <USB_ProcessHIDReport+0x784>
				break;
			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
    197a:	cc 56       	subi	r28, 0x6C	; 108
    197c:	df 4f       	sbci	r29, 0xFF	; 255
    197e:	a8 81       	ld	r26, Y
    1980:	b9 81       	ldd	r27, Y+1	; 0x01
    1982:	c4 59       	subi	r28, 0x94	; 148
    1984:	d0 40       	sbci	r29, 0x00	; 0
    1986:	ca 16       	cp	r12, r26
    1988:	db 06       	cpc	r13, r27
    198a:	11 f4       	brne	.+4      	; 0x1990 <USB_ProcessHIDReport+0x3a0>
    198c:	82 e0       	ldi	r24, 0x02	; 2
    198e:	1a c2       	rjmp	.+1076   	; 0x1dc4 <USB_ProcessHIDReport+0x7d4>
				  return HID_PARSE_HIDStackUnderflow;

				CurrStateTable--;
    1990:	e4 ee       	ldi	r30, 0xE4	; 228
    1992:	ff ef       	ldi	r31, 0xFF	; 255
    1994:	ce 0e       	add	r12, r30
    1996:	df 1e       	adc	r13, r31
    1998:	ed c1       	rjmp	.+986    	; 0x1d74 <USB_ProcessHIDReport+0x784>
				break;
			case HID_RI_USAGE_PAGE(0):
				if ((HIDReportItem & HID_RI_DATA_SIZE_MASK) == HID_RI_DATA_BITS_32)
    199a:	23 30       	cpi	r18, 0x03	; 3
    199c:	31 05       	cpc	r19, r1
    199e:	31 f4       	brne	.+12     	; 0x19ac <USB_ProcessHIDReport+0x3bc>
				  CurrStateTable->Attributes.Usage.Page = (ReportItemData >> 16);
    19a0:	c8 01       	movw	r24, r16
    19a2:	aa 27       	eor	r26, r26
    19a4:	bb 27       	eor	r27, r27
    19a6:	f6 01       	movw	r30, r12
    19a8:	92 83       	std	Z+2, r25	; 0x02
    19aa:	81 83       	std	Z+1, r24	; 0x01
				
				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
    19ac:	d6 01       	movw	r26, r12
    19ae:	12 96       	adiw	r26, 0x02	; 2
    19b0:	fc 92       	st	X, r15
    19b2:	ee 92       	st	-X, r14
    19b4:	11 97       	sbiw	r26, 0x01	; 1
    19b6:	de c1       	rjmp	.+956    	; 0x1d74 <USB_ProcessHIDReport+0x784>
				break;
			case HID_RI_LOGICAL_MINIMUM(0):
				CurrStateTable->Attributes.Logical.Minimum  = ReportItemData;
    19b8:	f6 01       	movw	r30, r12
    19ba:	e2 86       	std	Z+10, r14	; 0x0a
    19bc:	f3 86       	std	Z+11, r15	; 0x0b
    19be:	04 87       	std	Z+12, r16	; 0x0c
    19c0:	15 87       	std	Z+13, r17	; 0x0d
    19c2:	d8 c1       	rjmp	.+944    	; 0x1d74 <USB_ProcessHIDReport+0x784>
				break;
			case HID_RI_LOGICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Logical.Maximum  = ReportItemData;
    19c4:	d6 01       	movw	r26, r12
    19c6:	1e 96       	adiw	r26, 0x0e	; 14
    19c8:	ed 92       	st	X+, r14
    19ca:	fd 92       	st	X+, r15
    19cc:	0d 93       	st	X+, r16
    19ce:	1c 93       	st	X, r17
    19d0:	51 97       	sbiw	r26, 0x11	; 17
    19d2:	d0 c1       	rjmp	.+928    	; 0x1d74 <USB_ProcessHIDReport+0x784>
				break;
			case HID_RI_PHYSICAL_MINIMUM(0):
				CurrStateTable->Attributes.Physical.Minimum = ReportItemData;
    19d4:	f6 01       	movw	r30, r12
    19d6:	e2 8a       	std	Z+18, r14	; 0x12
    19d8:	f3 8a       	std	Z+19, r15	; 0x13
    19da:	04 8b       	std	Z+20, r16	; 0x14
    19dc:	15 8b       	std	Z+21, r17	; 0x15
    19de:	ca c1       	rjmp	.+916    	; 0x1d74 <USB_ProcessHIDReport+0x784>
				break;
			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
    19e0:	d6 01       	movw	r26, r12
    19e2:	56 96       	adiw	r26, 0x16	; 22
    19e4:	ed 92       	st	X+, r14
    19e6:	fd 92       	st	X+, r15
    19e8:	0d 93       	st	X+, r16
    19ea:	1c 93       	st	X, r17
    19ec:	59 97       	sbiw	r26, 0x19	; 25
    19ee:	c2 c1       	rjmp	.+900    	; 0x1d74 <USB_ProcessHIDReport+0x784>
				break;
			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
    19f0:	f6 01       	movw	r30, r12
    19f2:	e1 86       	std	Z+9, r14	; 0x09
    19f4:	bf c1       	rjmp	.+894    	; 0x1d74 <USB_ProcessHIDReport+0x784>
				break;
			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
    19f6:	d6 01       	movw	r26, r12
    19f8:	15 96       	adiw	r26, 0x05	; 5
    19fa:	ed 92       	st	X+, r14
    19fc:	fd 92       	st	X+, r15
    19fe:	0d 93       	st	X+, r16
    1a00:	1c 93       	st	X, r17
    1a02:	18 97       	sbiw	r26, 0x08	; 8
    1a04:	b7 c1       	rjmp	.+878    	; 0x1d74 <USB_ProcessHIDReport+0x784>
				break;
			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
    1a06:	f6 01       	movw	r30, r12
    1a08:	e0 82       	st	Z, r14
    1a0a:	b4 c1       	rjmp	.+872    	; 0x1d74 <USB_ProcessHIDReport+0x784>
				break;
			case HID_RI_REPORT_COUNT(0):
				CurrStateTable->ReportCount                 = ReportItemData;
    1a0c:	d6 01       	movw	r26, r12
    1a0e:	5a 96       	adiw	r26, 0x1a	; 26
    1a10:	ec 92       	st	X, r14
    1a12:	b0 c1       	rjmp	.+864    	; 0x1d74 <USB_ProcessHIDReport+0x784>
				break;
			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;
    1a14:	3e 2d       	mov	r19, r14
    1a16:	f6 01       	movw	r30, r12
    1a18:	e3 8e       	std	Z+27, r14	; 0x1b

				if (ParserData->UsingReportIDs)
    1a1a:	c2 57       	subi	r28, 0x72	; 114
    1a1c:	df 4f       	sbci	r29, 0xFF	; 255
    1a1e:	a8 81       	ld	r26, Y
    1a20:	b9 81       	ldd	r27, Y+1	; 0x01
    1a22:	ce 58       	subi	r28, 0x8E	; 142
    1a24:	d0 40       	sbci	r29, 0x00	; 0
    1a26:	8c 91       	ld	r24, X
    1a28:	88 23       	and	r24, r24
    1a2a:	09 f4       	brne	.+2      	; 0x1a2e <USB_ProcessHIDReport+0x43e>
    1a2c:	40 c0       	rjmp	.+128    	; 0x1aae <USB_ProcessHIDReport+0x4be>
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
    1a2e:	c0 57       	subi	r28, 0x70	; 112
    1a30:	df 4f       	sbci	r29, 0xFF	; 255
    1a32:	e8 81       	ld	r30, Y
    1a34:	f9 81       	ldd	r31, Y+1	; 0x01
    1a36:	c0 59       	subi	r28, 0x90	; 144
    1a38:	d0 40       	sbci	r29, 0x00	; 0
    1a3a:	20 81       	ld	r18, Z
    1a3c:	ce 56       	subi	r28, 0x6E	; 110
    1a3e:	df 4f       	sbci	r29, 0xFF	; 255
    1a40:	88 81       	ld	r24, Y
    1a42:	c2 59       	subi	r28, 0x92	; 146
    1a44:	d0 40       	sbci	r29, 0x00	; 0
    1a46:	cd 56       	subi	r28, 0x6D	; 109
    1a48:	df 4f       	sbci	r29, 0xFF	; 255
    1a4a:	98 81       	ld	r25, Y
    1a4c:	c3 59       	subi	r28, 0x93	; 147
    1a4e:	d0 40       	sbci	r29, 0x00	; 0
    1a50:	dc 01       	movw	r26, r24
    1a52:	e0 e0       	ldi	r30, 0x00	; 0
    1a54:	10 c0       	rjmp	.+32     	; 0x1a76 <USB_ProcessHIDReport+0x486>
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
    1a56:	8c 91       	ld	r24, X
    1a58:	17 96       	adiw	r26, 0x07	; 7
    1a5a:	83 17       	cp	r24, r19
    1a5c:	59 f4       	brne	.+22     	; 0x1a74 <USB_ProcessHIDReport+0x484>
						{
							CurrReportIDInfo = &ParserData->ReportIDSizes[i];
    1a5e:	87 e0       	ldi	r24, 0x07	; 7
    1a60:	e8 9f       	mul	r30, r24
    1a62:	40 01       	movw	r8, r0
    1a64:	11 24       	eor	r1, r1
    1a66:	20 e9       	ldi	r18, 0x90	; 144
    1a68:	33 e0       	ldi	r19, 0x03	; 3
    1a6a:	82 0e       	add	r8, r18
    1a6c:	93 1e       	adc	r9, r19
    1a6e:	82 0c       	add	r8, r2
    1a70:	93 1c       	adc	r9, r3
    1a72:	1d c0       	rjmp	.+58     	; 0x1aae <USB_ProcessHIDReport+0x4be>

				if (ParserData->UsingReportIDs)
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
    1a74:	ef 5f       	subi	r30, 0xFF	; 255
    1a76:	e2 17       	cp	r30, r18
    1a78:	70 f3       	brcs	.-36     	; 0x1a56 <USB_ProcessHIDReport+0x466>
						}
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
    1a7a:	2a 30       	cpi	r18, 0x0A	; 10
    1a7c:	11 f4       	brne	.+4      	; 0x1a82 <USB_ProcessHIDReport+0x492>
    1a7e:	87 e0       	ldi	r24, 0x07	; 7
    1a80:	a1 c1       	rjmp	.+834    	; 0x1dc4 <USB_ProcessHIDReport+0x7d4>
						  return HID_PARSE_InsufficientReportIDItems;

						CurrReportIDInfo = &ParserData->ReportIDSizes[ParserData->TotalDeviceReports++];
    1a82:	87 e0       	ldi	r24, 0x07	; 7
    1a84:	28 9f       	mul	r18, r24
    1a86:	40 01       	movw	r8, r0
    1a88:	11 24       	eor	r1, r1
    1a8a:	40 e9       	ldi	r20, 0x90	; 144
    1a8c:	53 e0       	ldi	r21, 0x03	; 3
    1a8e:	84 0e       	add	r8, r20
    1a90:	95 1e       	adc	r9, r21
    1a92:	82 0c       	add	r8, r2
    1a94:	93 1c       	adc	r9, r3
    1a96:	2f 5f       	subi	r18, 0xFF	; 255
    1a98:	c0 57       	subi	r28, 0x70	; 112
    1a9a:	df 4f       	sbci	r29, 0xFF	; 255
    1a9c:	a8 81       	ld	r26, Y
    1a9e:	b9 81       	ldd	r27, Y+1	; 0x01
    1aa0:	c0 59       	subi	r28, 0x90	; 144
    1aa2:	d0 40       	sbci	r29, 0x00	; 0
    1aa4:	2c 93       	st	X, r18
						memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
    1aa6:	f4 01       	movw	r30, r8
    1aa8:	11 92       	st	Z+, r1
    1aaa:	8a 95       	dec	r24
    1aac:	e9 f7       	brne	.-6      	; 0x1aa8 <USB_ProcessHIDReport+0x4b8>
					}
				}

				ParserData->UsingReportIDs = true;
    1aae:	e1 e0       	ldi	r30, 0x01	; 1
    1ab0:	c2 57       	subi	r28, 0x72	; 114
    1ab2:	df 4f       	sbci	r29, 0xFF	; 255
    1ab4:	a8 81       	ld	r26, Y
    1ab6:	b9 81       	ldd	r27, Y+1	; 0x01
    1ab8:	ce 58       	subi	r28, 0x8E	; 142
    1aba:	d0 40       	sbci	r29, 0x00	; 0
    1abc:	ec 93       	st	X, r30

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
    1abe:	d6 01       	movw	r26, r12
    1ac0:	5b 96       	adiw	r26, 0x1b	; 27
    1ac2:	8c 91       	ld	r24, X
    1ac4:	f4 01       	movw	r30, r8
    1ac6:	80 83       	st	Z, r24
    1ac8:	55 c1       	rjmp	.+682    	; 0x1d74 <USB_ProcessHIDReport+0x784>
				break;
			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
    1aca:	ed 96       	adiw	r28, 0x3d	; 61
    1acc:	ff ad       	ldd	r31, Y+63	; 0x3f
    1ace:	ed 97       	sbiw	r28, 0x3d	; 61
    1ad0:	f8 30       	cpi	r31, 0x08	; 8
    1ad2:	11 f4       	brne	.+4      	; 0x1ad8 <USB_ProcessHIDReport+0x4e8>
    1ad4:	86 e0       	ldi	r24, 0x06	; 6
    1ad6:	76 c1       	rjmp	.+748    	; 0x1dc4 <USB_ProcessHIDReport+0x7d4>
				  return HID_PARSE_UsageListOverflow;

				UsageList[UsageListSize++] = ReportItemData;
    1ad8:	ed 96       	adiw	r28, 0x3d	; 61
    1ada:	2f ad       	ldd	r18, Y+63	; 0x3f
    1adc:	ed 97       	sbiw	r28, 0x3d	; 61
    1ade:	e2 2f       	mov	r30, r18
    1ae0:	f0 e0       	ldi	r31, 0x00	; 0
    1ae2:	ee 0f       	add	r30, r30
    1ae4:	ff 1f       	adc	r31, r31
    1ae6:	41 e0       	ldi	r20, 0x01	; 1
    1ae8:	50 e0       	ldi	r21, 0x00	; 0
    1aea:	4c 0f       	add	r20, r28
    1aec:	5d 1f       	adc	r21, r29
    1aee:	e4 0f       	add	r30, r20
    1af0:	f5 1f       	adc	r31, r21
    1af2:	f1 82       	std	Z+1, r15	; 0x01
    1af4:	e0 82       	st	Z, r14
    1af6:	2f 5f       	subi	r18, 0xFF	; 255
    1af8:	ed 96       	adiw	r28, 0x3d	; 61
    1afa:	2f af       	std	Y+63, r18	; 0x3f
    1afc:	ed 97       	sbiw	r28, 0x3d	; 61
    1afe:	3a c1       	rjmp	.+628    	; 0x1d74 <USB_ProcessHIDReport+0x784>
				break;
    1b00:	f5 01       	movw	r30, r10
    1b02:	eb 96       	adiw	r28, 0x3b	; 59
    1b04:	ec ae       	std	Y+60, r14	; 0x3c
    1b06:	fd ae       	std	Y+61, r15	; 0x3d
    1b08:	0e af       	std	Y+62, r16	; 0x3e
    1b0a:	1f af       	std	Y+63, r17	; 0x3f
    1b0c:	eb 97       	sbiw	r28, 0x3b	; 59
    1b0e:	33 c1       	rjmp	.+614    	; 0x1d76 <USB_ProcessHIDReport+0x786>
				break;
			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;
			case HID_RI_COLLECTION(0):
				if (CurrCollectionPath == NULL)
    1b10:	a1 14       	cp	r10, r1
    1b12:	b1 04       	cpc	r11, r1
    1b14:	29 f4       	brne	.+10     	; 0x1b20 <USB_ProcessHIDReport+0x530>
    1b16:	e7 96       	adiw	r28, 0x37	; 55
    1b18:	ee ad       	ldd	r30, Y+62	; 0x3e
    1b1a:	ff ad       	ldd	r31, Y+63	; 0x3f
    1b1c:	e7 97       	sbiw	r28, 0x37	; 55
    1b1e:	15 c0       	rjmp	.+42     	; 0x1b4a <USB_ProcessHIDReport+0x55a>
    1b20:	e5 96       	adiw	r28, 0x35	; 53
    1b22:	ee ad       	ldd	r30, Y+62	; 0x3e
    1b24:	ff ad       	ldd	r31, Y+63	; 0x3f
    1b26:	e5 97       	sbiw	r28, 0x35	; 53
    1b28:	0a c0       	rjmp	.+20     	; 0x1b3e <USB_ProcessHIDReport+0x54e>

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
    1b2a:	ef 96       	adiw	r28, 0x3f	; 63
    1b2c:	8e ad       	ldd	r24, Y+62	; 0x3e
    1b2e:	9f ad       	ldd	r25, Y+63	; 0x3f
    1b30:	ef 97       	sbiw	r28, 0x3f	; 63
    1b32:	e8 17       	cp	r30, r24
    1b34:	f9 07       	cpc	r31, r25
    1b36:	11 f4       	brne	.+4      	; 0x1b3c <USB_ProcessHIDReport+0x54c>
    1b38:	85 e0       	ldi	r24, 0x05	; 5
    1b3a:	44 c1       	rjmp	.+648    	; 0x1dc4 <USB_ProcessHIDReport+0x7d4>
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
    1b3c:	37 96       	adiw	r30, 0x07	; 7
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
    1b3e:	85 81       	ldd	r24, Z+5	; 0x05
    1b40:	96 81       	ldd	r25, Z+6	; 0x06
    1b42:	89 2b       	or	r24, r25
    1b44:	91 f7       	brne	.-28     	; 0x1b2a <USB_ProcessHIDReport+0x53a>
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
					}

					CurrCollectionPath->Parent = ParentCollectionPath;
    1b46:	b6 82       	std	Z+6, r11	; 0x06
    1b48:	a5 82       	std	Z+5, r10	; 0x05
				}

				CurrCollectionPath->Type       = ReportItemData;
    1b4a:	e0 82       	st	Z, r14
				CurrCollectionPath->Usage.Page = CurrStateTable->Attributes.Usage.Page;
    1b4c:	d6 01       	movw	r26, r12
    1b4e:	11 96       	adiw	r26, 0x01	; 1
    1b50:	8d 91       	ld	r24, X+
    1b52:	9c 91       	ld	r25, X
    1b54:	12 97       	sbiw	r26, 0x02	; 2
    1b56:	92 83       	std	Z+2, r25	; 0x02
    1b58:	81 83       	std	Z+1, r24	; 0x01

				if (UsageListSize)
    1b5a:	ed 96       	adiw	r28, 0x3d	; 61
    1b5c:	bf ad       	ldd	r27, Y+63	; 0x3f
    1b5e:	ed 97       	sbiw	r28, 0x3d	; 61
    1b60:	bb 23       	and	r27, r27
    1b62:	09 f1       	breq	.+66     	; 0x1ba6 <USB_ProcessHIDReport+0x5b6>
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];
    1b64:	89 81       	ldd	r24, Y+1	; 0x01
    1b66:	9a 81       	ldd	r25, Y+2	; 0x02
    1b68:	94 83       	std	Z+4, r25	; 0x04
    1b6a:	83 83       	std	Z+3, r24	; 0x03
    1b6c:	de 01       	movw	r26, r28
    1b6e:	11 96       	adiw	r26, 0x01	; 1

					for (uint8_t i = 0; i < UsageListSize; i++)
    1b70:	ed 96       	adiw	r28, 0x3d	; 61
    1b72:	4f ad       	ldd	r20, Y+63	; 0x3f
    1b74:	ed 97       	sbiw	r28, 0x3d	; 61
    1b76:	24 2f       	mov	r18, r20
    1b78:	30 e0       	ldi	r19, 0x00	; 0
    1b7a:	22 0f       	add	r18, r18
    1b7c:	33 1f       	adc	r19, r19
    1b7e:	2a 0f       	add	r18, r26
    1b80:	3b 1f       	adc	r19, r27
    1b82:	06 c0       	rjmp	.+12     	; 0x1b90 <USB_ProcessHIDReport+0x5a0>
					  UsageList[i] = UsageList[i + 1];
    1b84:	12 96       	adiw	r26, 0x02	; 2
    1b86:	8d 91       	ld	r24, X+
    1b88:	9c 91       	ld	r25, X
    1b8a:	13 97       	sbiw	r26, 0x03	; 3
    1b8c:	8d 93       	st	X+, r24
    1b8e:	9d 93       	st	X+, r25

				if (UsageListSize)
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];

					for (uint8_t i = 0; i < UsageListSize; i++)
    1b90:	a2 17       	cp	r26, r18
    1b92:	b3 07       	cpc	r27, r19
    1b94:	b9 f7       	brne	.-18     	; 0x1b84 <USB_ProcessHIDReport+0x594>
					  UsageList[i] = UsageList[i + 1];

					UsageListSize--;
    1b96:	ed 96       	adiw	r28, 0x3d	; 61
    1b98:	9f ad       	ldd	r25, Y+63	; 0x3f
    1b9a:	ed 97       	sbiw	r28, 0x3d	; 61
    1b9c:	91 50       	subi	r25, 0x01	; 1
    1b9e:	ed 96       	adiw	r28, 0x3d	; 61
    1ba0:	9f af       	std	Y+63, r25	; 0x3f
    1ba2:	ed 97       	sbiw	r28, 0x3d	; 61
    1ba4:	e8 c0       	rjmp	.+464    	; 0x1d76 <USB_ProcessHIDReport+0x786>
				}
				else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
    1ba6:	eb 96       	adiw	r28, 0x3b	; 59
    1ba8:	2c ad       	ldd	r18, Y+60	; 0x3c
    1baa:	3d ad       	ldd	r19, Y+61	; 0x3d
    1bac:	4e ad       	ldd	r20, Y+62	; 0x3e
    1bae:	5f ad       	ldd	r21, Y+63	; 0x3f
    1bb0:	eb 97       	sbiw	r28, 0x3b	; 59
    1bb2:	24 15       	cp	r18, r4
    1bb4:	35 05       	cpc	r19, r5
    1bb6:	46 05       	cpc	r20, r6
    1bb8:	57 05       	cpc	r21, r7
    1bba:	08 f4       	brcc	.+2      	; 0x1bbe <USB_ProcessHIDReport+0x5ce>
    1bbc:	dc c0       	rjmp	.+440    	; 0x1d76 <USB_ProcessHIDReport+0x786>
				{
					CurrCollectionPath->Usage.Usage = UsageMinMax.Minimum++;
    1bbe:	54 82       	std	Z+4, r5	; 0x04
    1bc0:	43 82       	std	Z+3, r4	; 0x03
    1bc2:	08 94       	sec
    1bc4:	41 1c       	adc	r4, r1
    1bc6:	51 1c       	adc	r5, r1
    1bc8:	61 1c       	adc	r6, r1
    1bca:	71 1c       	adc	r7, r1
    1bcc:	d4 c0       	rjmp	.+424    	; 0x1d76 <USB_ProcessHIDReport+0x786>
				}

				break;
			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
    1bce:	a1 14       	cp	r10, r1
    1bd0:	b1 04       	cpc	r11, r1
    1bd2:	11 f4       	brne	.+4      	; 0x1bd8 <USB_ProcessHIDReport+0x5e8>
    1bd4:	84 e0       	ldi	r24, 0x04	; 4
    1bd6:	f6 c0       	rjmp	.+492    	; 0x1dc4 <USB_ProcessHIDReport+0x7d4>
				  return HID_PARSE_UnexpectedEndCollection;

				CurrCollectionPath = CurrCollectionPath->Parent;
    1bd8:	d5 01       	movw	r26, r10
    1bda:	15 96       	adiw	r26, 0x05	; 5
    1bdc:	ed 91       	ld	r30, X+
    1bde:	fc 91       	ld	r31, X
    1be0:	16 97       	sbiw	r26, 0x06	; 6
    1be2:	c9 c0       	rjmp	.+402    	; 0x1d76 <USB_ProcessHIDReport+0x786>
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
    1be4:	de 01       	movw	r26, r28
    1be6:	59 96       	adiw	r26, 0x19	; 25
    1be8:	cb 57       	subi	r28, 0x7B	; 123
    1bea:	df 4f       	sbci	r29, 0xFF	; 255
    1bec:	88 81       	ld	r24, Y
    1bee:	c5 58       	subi	r28, 0x85	; 133
    1bf0:	d0 40       	sbci	r29, 0x00	; 0
    1bf2:	ca 57       	subi	r28, 0x7A	; 122
    1bf4:	df 4f       	sbci	r29, 0xFF	; 255
    1bf6:	98 81       	ld	r25, Y
    1bf8:	c6 58       	subi	r28, 0x86	; 134
    1bfa:	d0 40       	sbci	r29, 0x00	; 0
    1bfc:	9c 01       	movw	r18, r24
    1bfe:	f9 01       	movw	r30, r18
    1c00:	8a e1       	ldi	r24, 0x1A	; 26
    1c02:	01 90       	ld	r0, Z+
    1c04:	0d 92       	st	X+, r0
    1c06:	81 50       	subi	r24, 0x01	; 1
    1c08:	e1 f7       	brne	.-8      	; 0x1c02 <USB_ProcessHIDReport+0x612>
					       &CurrStateTable->Attributes,
					       sizeof(HID_ReportItem_Attributes_t));

					NewReportItem.ItemFlags      = ReportItemData;
    1c0a:	fd 8a       	std	Y+21, r15	; 0x15
    1c0c:	ec 8a       	std	Y+20, r14	; 0x14
					NewReportItem.CollectionPath = CurrCollectionPath;
    1c0e:	b8 8e       	std	Y+24, r11	; 0x18
    1c10:	af 8a       	std	Y+23, r10	; 0x17
					NewReportItem.ReportID       = CurrStateTable->ReportID;
    1c12:	f6 01       	movw	r30, r12
    1c14:	83 8d       	ldd	r24, Z+27	; 0x1b
    1c16:	8e 8b       	std	Y+22, r24	; 0x16

					if (UsageListSize)
    1c18:	ed 96       	adiw	r28, 0x3d	; 61
    1c1a:	ff ad       	ldd	r31, Y+63	; 0x3f
    1c1c:	ed 97       	sbiw	r28, 0x3d	; 61
    1c1e:	ff 23       	and	r31, r31
    1c20:	f9 f0       	breq	.+62     	; 0x1c60 <USB_ProcessHIDReport+0x670>
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
    1c22:	49 81       	ldd	r20, Y+1	; 0x01
    1c24:	5a 81       	ldd	r21, Y+2	; 0x02
    1c26:	fe 01       	movw	r30, r28
    1c28:	31 96       	adiw	r30, 0x01	; 1

						for (uint8_t i = 0; i < UsageListSize; i++)
    1c2a:	ed 96       	adiw	r28, 0x3d	; 61
    1c2c:	8f ad       	ldd	r24, Y+63	; 0x3f
    1c2e:	ed 97       	sbiw	r28, 0x3d	; 61
    1c30:	28 2f       	mov	r18, r24
    1c32:	30 e0       	ldi	r19, 0x00	; 0
    1c34:	22 0f       	add	r18, r18
    1c36:	33 1f       	adc	r19, r19
    1c38:	2e 0f       	add	r18, r30
    1c3a:	3f 1f       	adc	r19, r31
    1c3c:	04 c0       	rjmp	.+8      	; 0x1c46 <USB_ProcessHIDReport+0x656>
						  UsageList[i] = UsageList[i + 1];
    1c3e:	82 81       	ldd	r24, Z+2	; 0x02
    1c40:	93 81       	ldd	r25, Z+3	; 0x03
    1c42:	81 93       	st	Z+, r24
    1c44:	91 93       	st	Z+, r25

					if (UsageListSize)
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];

						for (uint8_t i = 0; i < UsageListSize; i++)
    1c46:	e2 17       	cp	r30, r18
    1c48:	f3 07       	cpc	r31, r19
    1c4a:	c9 f7       	brne	.-14     	; 0x1c3e <USB_ProcessHIDReport+0x64e>
					NewReportItem.CollectionPath = CurrCollectionPath;
					NewReportItem.ReportID       = CurrStateTable->ReportID;

					if (UsageListSize)
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
    1c4c:	5d 8f       	std	Y+29, r21	; 0x1d
    1c4e:	4c 8f       	std	Y+28, r20	; 0x1c

						for (uint8_t i = 0; i < UsageListSize; i++)
						  UsageList[i] = UsageList[i + 1];

						UsageListSize--;
    1c50:	ed 96       	adiw	r28, 0x3d	; 61
    1c52:	bf ad       	ldd	r27, Y+63	; 0x3f
    1c54:	ed 97       	sbiw	r28, 0x3d	; 61
    1c56:	b1 50       	subi	r27, 0x01	; 1
    1c58:	ed 96       	adiw	r28, 0x3d	; 61
    1c5a:	bf af       	std	Y+63, r27	; 0x3f
    1c5c:	ed 97       	sbiw	r28, 0x3d	; 61
    1c5e:	12 c0       	rjmp	.+36     	; 0x1c84 <USB_ProcessHIDReport+0x694>
					}
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
    1c60:	eb 96       	adiw	r28, 0x3b	; 59
    1c62:	2c ad       	ldd	r18, Y+60	; 0x3c
    1c64:	3d ad       	ldd	r19, Y+61	; 0x3d
    1c66:	4e ad       	ldd	r20, Y+62	; 0x3e
    1c68:	5f ad       	ldd	r21, Y+63	; 0x3f
    1c6a:	eb 97       	sbiw	r28, 0x3b	; 59
    1c6c:	24 15       	cp	r18, r4
    1c6e:	35 05       	cpc	r19, r5
    1c70:	46 05       	cpc	r20, r6
    1c72:	57 05       	cpc	r21, r7
    1c74:	38 f0       	brcs	.+14     	; 0x1c84 <USB_ProcessHIDReport+0x694>
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
    1c76:	5d 8e       	std	Y+29, r5	; 0x1d
    1c78:	4c 8e       	std	Y+28, r4	; 0x1c
    1c7a:	08 94       	sec
    1c7c:	41 1c       	adc	r4, r1
    1c7e:	51 1c       	adc	r5, r1
    1c80:	61 1c       	adc	r6, r1
    1c82:	71 1c       	adc	r7, r1
					}

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));

					if (ItemTypeTag == HID_RI_INPUT(0))
    1c84:	c9 57       	subi	r28, 0x79	; 121
    1c86:	df 4f       	sbci	r29, 0xFF	; 255
    1c88:	38 81       	ld	r19, Y
    1c8a:	c7 58       	subi	r28, 0x87	; 135
    1c8c:	d0 40       	sbci	r29, 0x00	; 0
    1c8e:	30 38       	cpi	r19, 0x80	; 128
    1c90:	11 f4       	brne	.+4      	; 0x1c96 <USB_ProcessHIDReport+0x6a6>
					  NewReportItem.ItemType = HID_REPORT_ITEM_In;
    1c92:	1b 8a       	std	Y+19, r1	; 0x13
    1c94:	0c c0       	rjmp	.+24     	; 0x1cae <USB_ProcessHIDReport+0x6be>
					else if (ItemTypeTag == HID_RI_OUTPUT(0))
    1c96:	c9 57       	subi	r28, 0x79	; 121
    1c98:	df 4f       	sbci	r29, 0xFF	; 255
    1c9a:	48 81       	ld	r20, Y
    1c9c:	c7 58       	subi	r28, 0x87	; 135
    1c9e:	d0 40       	sbci	r29, 0x00	; 0
    1ca0:	40 39       	cpi	r20, 0x90	; 144
    1ca2:	19 f4       	brne	.+6      	; 0x1caa <USB_ProcessHIDReport+0x6ba>
					  NewReportItem.ItemType = HID_REPORT_ITEM_Out;
    1ca4:	51 e0       	ldi	r21, 0x01	; 1
    1ca6:	5b 8b       	std	Y+19, r21	; 0x13
    1ca8:	02 c0       	rjmp	.+4      	; 0x1cae <USB_ProcessHIDReport+0x6be>
					else
					  NewReportItem.ItemType = HID_REPORT_ITEM_Feature;
    1caa:	82 e0       	ldi	r24, 0x02	; 2
    1cac:	8b 8b       	std	Y+19, r24	; 0x13

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];
    1cae:	eb 89       	ldd	r30, Y+19	; 0x13
    1cb0:	f0 e0       	ldi	r31, 0x00	; 0
    1cb2:	ee 0f       	add	r30, r30
    1cb4:	ff 1f       	adc	r31, r31
    1cb6:	e8 0d       	add	r30, r8
    1cb8:	f9 1d       	adc	r31, r9
    1cba:	81 81       	ldd	r24, Z+1	; 0x01
    1cbc:	92 81       	ldd	r25, Z+2	; 0x02
    1cbe:	9a 8b       	std	Y+18, r25	; 0x12
    1cc0:	89 8b       	std	Y+17, r24	; 0x11

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;
    1cc2:	d6 01       	movw	r26, r12
    1cc4:	2c 91       	ld	r18, X
    1cc6:	81 81       	ldd	r24, Z+1	; 0x01
    1cc8:	92 81       	ldd	r25, Z+2	; 0x02
    1cca:	82 0f       	add	r24, r18
    1ccc:	91 1d       	adc	r25, r1
    1cce:	92 83       	std	Z+2, r25	; 0x02
    1cd0:	81 83       	std	Z+1, r24	; 0x01

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
    1cd2:	eb 89       	ldd	r30, Y+19	; 0x13
    1cd4:	f0 e0       	ldi	r31, 0x00	; 0
    1cd6:	ee 0f       	add	r30, r30
    1cd8:	ff 1f       	adc	r31, r31
    1cda:	e8 0d       	add	r30, r8
    1cdc:	f9 1d       	adc	r31, r9
    1cde:	c6 57       	subi	r28, 0x76	; 118
    1ce0:	df 4f       	sbci	r29, 0xFF	; 255
    1ce2:	a8 81       	ld	r26, Y
    1ce4:	b9 81       	ldd	r27, Y+1	; 0x01
    1ce6:	ca 58       	subi	r28, 0x8A	; 138
    1ce8:	d0 40       	sbci	r29, 0x00	; 0
    1cea:	2d 91       	ld	r18, X+
    1cec:	3c 91       	ld	r19, X
    1cee:	81 81       	ldd	r24, Z+1	; 0x01
    1cf0:	92 81       	ldd	r25, Z+2	; 0x02
    1cf2:	82 17       	cp	r24, r18
    1cf4:	93 07       	cpc	r25, r19
    1cf6:	08 f4       	brcc	.+2      	; 0x1cfa <USB_ProcessHIDReport+0x70a>
    1cf8:	c9 01       	movw	r24, r18
    1cfa:	c6 57       	subi	r28, 0x76	; 118
    1cfc:	df 4f       	sbci	r29, 0xFF	; 255
    1cfe:	e8 81       	ld	r30, Y
    1d00:	f9 81       	ldd	r31, Y+1	; 0x01
    1d02:	ca 58       	subi	r28, 0x8A	; 138
    1d04:	d0 40       	sbci	r29, 0x00	; 0
    1d06:	91 83       	std	Z+1, r25	; 0x01
    1d08:	80 83       	st	Z, r24

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
    1d0a:	d1 01       	movw	r26, r2
    1d0c:	8c 91       	ld	r24, X
    1d0e:	84 31       	cpi	r24, 0x14	; 20
    1d10:	11 f4       	brne	.+4      	; 0x1d16 <USB_ProcessHIDReport+0x726>
    1d12:	83 e0       	ldi	r24, 0x03	; 3
    1d14:	57 c0       	rjmp	.+174    	; 0x1dc4 <USB_ProcessHIDReport+0x7d4>
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
    1d16:	ba e2       	ldi	r27, 0x2A	; 42
    1d18:	8b 9f       	mul	r24, r27
    1d1a:	f0 01       	movw	r30, r0
    1d1c:	11 24       	eor	r1, r1
    1d1e:	31 96       	adiw	r30, 0x01	; 1
    1d20:	e2 0d       	add	r30, r2
    1d22:	f3 1d       	adc	r31, r3
    1d24:	de 01       	movw	r26, r28
    1d26:	51 96       	adiw	r26, 0x11	; 17
    1d28:	8a e2       	ldi	r24, 0x2A	; 42
    1d2a:	0d 90       	ld	r0, X+
    1d2c:	01 92       	st	Z+, r0
    1d2e:	81 50       	subi	r24, 0x01	; 1
    1d30:	e1 f7       	brne	.-8      	; 0x1d2a <USB_ProcessHIDReport+0x73a>
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
    1d32:	c8 57       	subi	r28, 0x78	; 120
    1d34:	df 4f       	sbci	r29, 0xFF	; 255
    1d36:	e8 81       	ld	r30, Y
    1d38:	f9 81       	ldd	r31, Y+1	; 0x01
    1d3a:	c8 58       	subi	r28, 0x88	; 136
    1d3c:	d0 40       	sbci	r29, 0x00	; 0
    1d3e:	ef 2b       	or	r30, r31
    1d40:	51 f4       	brne	.+20     	; 0x1d56 <USB_ProcessHIDReport+0x766>
    1d42:	ce 01       	movw	r24, r28
    1d44:	41 96       	adiw	r24, 0x11	; 17
    1d46:	0e 94 49 04 	call	0x892	; 0x892 <CALLBACK_HIDParser_FilterHIDReportItem>
    1d4a:	88 23       	and	r24, r24
    1d4c:	21 f0       	breq	.+8      	; 0x1d56 <USB_ProcessHIDReport+0x766>
					  ParserData->TotalReportItems++;
    1d4e:	d1 01       	movw	r26, r2
    1d50:	8c 91       	ld	r24, X
    1d52:	8f 5f       	subi	r24, 0xFF	; 255
    1d54:	8c 93       	st	X, r24
				CurrCollectionPath = CurrCollectionPath->Parent;
				break;
			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
    1d56:	ec 96       	adiw	r28, 0x3c	; 60
    1d58:	bf ad       	ldd	r27, Y+63	; 0x3f
    1d5a:	ec 97       	sbiw	r28, 0x3c	; 60
    1d5c:	bf 5f       	subi	r27, 0xFF	; 255
    1d5e:	ec 96       	adiw	r28, 0x3c	; 60
    1d60:	bf af       	std	Y+63, r27	; 0x3f
    1d62:	ec 97       	sbiw	r28, 0x3c	; 60
    1d64:	f6 01       	movw	r30, r12
    1d66:	82 8d       	ldd	r24, Z+26	; 0x1a
    1d68:	ec 96       	adiw	r28, 0x3c	; 60
    1d6a:	ff ad       	ldd	r31, Y+63	; 0x3f
    1d6c:	ec 97       	sbiw	r28, 0x3c	; 60
    1d6e:	f8 17       	cp	r31, r24
    1d70:	08 f4       	brcc	.+2      	; 0x1d74 <USB_ProcessHIDReport+0x784>
    1d72:	38 cf       	rjmp	.-400    	; 0x1be4 <USB_ProcessHIDReport+0x5f4>
    1d74:	f5 01       	movw	r30, r10
				}

				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
    1d76:	c1 58       	subi	r28, 0x81	; 129
    1d78:	df 4f       	sbci	r29, 0xFF	; 255
    1d7a:	28 81       	ld	r18, Y
    1d7c:	39 81       	ldd	r19, Y+1	; 0x01
    1d7e:	cf 57       	subi	r28, 0x7F	; 127
    1d80:	d0 40       	sbci	r29, 0x00	; 0
    1d82:	2c 70       	andi	r18, 0x0C	; 12
    1d84:	30 70       	andi	r19, 0x00	; 0
    1d86:	23 2b       	or	r18, r19
    1d88:	61 f4       	brne	.+24     	; 0x1da2 <USB_ProcessHIDReport+0x7b2>
    1d8a:	ed 96       	adiw	r28, 0x3d	; 61
    1d8c:	1f ae       	std	Y+63, r1	; 0x3f
    1d8e:	ed 97       	sbiw	r28, 0x3d	; 61
    1d90:	eb 96       	adiw	r28, 0x3b	; 59
    1d92:	1c ae       	std	Y+60, r1	; 0x3c
    1d94:	1d ae       	std	Y+61, r1	; 0x3d
    1d96:	1e ae       	std	Y+62, r1	; 0x3e
    1d98:	1f ae       	std	Y+63, r1	; 0x3f
    1d9a:	eb 97       	sbiw	r28, 0x3b	; 59
    1d9c:	44 24       	eor	r4, r4
    1d9e:	55 24       	eor	r5, r5
    1da0:	32 01       	movw	r6, r4
    1da2:	5f 01       	movw	r10, r30
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
    1da4:	cd 57       	subi	r28, 0x7D	; 125
    1da6:	df 4f       	sbci	r29, 0xFF	; 255
    1da8:	48 81       	ld	r20, Y
    1daa:	59 81       	ldd	r21, Y+1	; 0x01
    1dac:	c3 58       	subi	r28, 0x83	; 131
    1dae:	d0 40       	sbci	r29, 0x00	; 0
    1db0:	45 2b       	or	r20, r21
    1db2:	09 f0       	breq	.+2      	; 0x1db6 <USB_ProcessHIDReport+0x7c6>
    1db4:	b9 cc       	rjmp	.-1678   	; 0x1728 <USB_ProcessHIDReport+0x138>
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
		}
	}

	if (!(ParserData->TotalReportItems))
    1db6:	d1 01       	movw	r26, r2
    1db8:	8c 91       	ld	r24, X
    1dba:	88 23       	and	r24, r24
    1dbc:	11 f0       	breq	.+4      	; 0x1dc2 <USB_ProcessHIDReport+0x7d2>
    1dbe:	80 e0       	ldi	r24, 0x00	; 0
    1dc0:	01 c0       	rjmp	.+2      	; 0x1dc4 <USB_ProcessHIDReport+0x7d4>
    1dc2:	88 e0       	ldi	r24, 0x08	; 8
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
}
    1dc4:	cb 56       	subi	r28, 0x6B	; 107
    1dc6:	df 4f       	sbci	r29, 0xFF	; 255
    1dc8:	0f b6       	in	r0, 0x3f	; 63
    1dca:	f8 94       	cli
    1dcc:	de bf       	out	0x3e, r29	; 62
    1dce:	0f be       	out	0x3f, r0	; 63
    1dd0:	cd bf       	out	0x3d, r28	; 61
    1dd2:	cf 91       	pop	r28
    1dd4:	df 91       	pop	r29
    1dd6:	1f 91       	pop	r17
    1dd8:	0f 91       	pop	r16
    1dda:	ff 90       	pop	r15
    1ddc:	ef 90       	pop	r14
    1dde:	df 90       	pop	r13
    1de0:	cf 90       	pop	r12
    1de2:	bf 90       	pop	r11
    1de4:	af 90       	pop	r10
    1de6:	9f 90       	pop	r9
    1de8:	8f 90       	pop	r8
    1dea:	7f 90       	pop	r7
    1dec:	6f 90       	pop	r6
    1dee:	5f 90       	pop	r5
    1df0:	4f 90       	pop	r4
    1df2:	3f 90       	pop	r3
    1df4:	2f 90       	pop	r2
    1df6:	08 95       	ret

00001df8 <Serial_putchar>:

FILE USARTSerialStream;

int Serial_putchar(char DataByte,
                   FILE *Stream)
{
    1df8:	98 2f       	mov	r25, r24
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
    1dfa:	80 91 c8 00 	lds	r24, 0x00C8
    1dfe:	85 ff       	sbrs	r24, 5
    1e00:	fc cf       	rjmp	.-8      	; 0x1dfa <Serial_putchar+0x2>
				UDR1 = DataByte;
    1e02:	90 93 ce 00 	sts	0x00CE, r25
	(void)Stream;

	Serial_SendByte(DataByte);
	return 0;
}
    1e06:	80 e0       	ldi	r24, 0x00	; 0
    1e08:	90 e0       	ldi	r25, 0x00	; 0
    1e0a:	08 95       	ret

00001e0c <Serial_getchar>:
			 *  \return Boolean \c true if a character has been received, \c false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    1e0c:	80 91 c8 00 	lds	r24, 0x00C8

int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    1e10:	87 fd       	sbrc	r24, 7
    1e12:	03 c0       	rjmp	.+6      	; 0x1e1a <Serial_getchar+0xe>
    1e14:	2e ef       	ldi	r18, 0xFE	; 254
    1e16:	3f ef       	ldi	r19, 0xFF	; 255
    1e18:	0b c0       	rjmp	.+22     	; 0x1e30 <Serial_getchar+0x24>
    1e1a:	80 91 c8 00 	lds	r24, 0x00C8
			 *  \return Next byte received from the USART, or a negative value if no byte has been received.
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
    1e1e:	87 fd       	sbrc	r24, 7
    1e20:	03 c0       	rjmp	.+6      	; 0x1e28 <Serial_getchar+0x1c>
    1e22:	2f ef       	ldi	r18, 0xFF	; 255
    1e24:	3f ef       	ldi	r19, 0xFF	; 255
    1e26:	04 c0       	rjmp	.+8      	; 0x1e30 <Serial_getchar+0x24>
				  return -1;
				
				return UDR1;
    1e28:	80 91 ce 00 	lds	r24, 0x00CE
    1e2c:	28 2f       	mov	r18, r24
    1e2e:	30 e0       	ldi	r19, 0x00	; 0
	  return _FDEV_EOF;

	return Serial_ReceiveByte();
}
    1e30:	c9 01       	movw	r24, r18
    1e32:	08 95       	ret

00001e34 <printf_P>:
    1e34:	df 93       	push	r29
    1e36:	cf 93       	push	r28
    1e38:	cd b7       	in	r28, 0x3d	; 61
    1e3a:	de b7       	in	r29, 0x3e	; 62
    1e3c:	fe 01       	movw	r30, r28
    1e3e:	35 96       	adiw	r30, 0x05	; 5
    1e40:	61 91       	ld	r22, Z+
    1e42:	71 91       	ld	r23, Z+
    1e44:	a0 91 0b 05 	lds	r26, 0x050B
    1e48:	b0 91 0c 05 	lds	r27, 0x050C
    1e4c:	13 96       	adiw	r26, 0x03	; 3
    1e4e:	8c 91       	ld	r24, X
    1e50:	13 97       	sbiw	r26, 0x03	; 3
    1e52:	88 60       	ori	r24, 0x08	; 8
    1e54:	13 96       	adiw	r26, 0x03	; 3
    1e56:	8c 93       	st	X, r24
    1e58:	80 91 0b 05 	lds	r24, 0x050B
    1e5c:	90 91 0c 05 	lds	r25, 0x050C
    1e60:	af 01       	movw	r20, r30
    1e62:	3f d0       	rcall	.+126    	; 0x1ee2 <vfprintf>
    1e64:	e0 91 0b 05 	lds	r30, 0x050B
    1e68:	f0 91 0c 05 	lds	r31, 0x050C
    1e6c:	23 81       	ldd	r18, Z+3	; 0x03
    1e6e:	27 7f       	andi	r18, 0xF7	; 247
    1e70:	23 83       	std	Z+3, r18	; 0x03
    1e72:	cf 91       	pop	r28
    1e74:	df 91       	pop	r29
    1e76:	08 95       	ret

00001e78 <puts_P>:
    1e78:	0f 93       	push	r16
    1e7a:	1f 93       	push	r17
    1e7c:	cf 93       	push	r28
    1e7e:	df 93       	push	r29
    1e80:	ec 01       	movw	r28, r24
    1e82:	e0 91 0b 05 	lds	r30, 0x050B
    1e86:	f0 91 0c 05 	lds	r31, 0x050C
    1e8a:	83 81       	ldd	r24, Z+3	; 0x03
    1e8c:	81 ff       	sbrs	r24, 1
    1e8e:	21 c0       	rjmp	.+66     	; 0x1ed2 <puts_P+0x5a>
    1e90:	00 e0       	ldi	r16, 0x00	; 0
    1e92:	10 e0       	ldi	r17, 0x00	; 0
    1e94:	0e c0       	rjmp	.+28     	; 0x1eb2 <puts_P+0x3a>
    1e96:	e0 91 0b 05 	lds	r30, 0x050B
    1e9a:	f0 91 0c 05 	lds	r31, 0x050C
    1e9e:	20 85       	ldd	r18, Z+8	; 0x08
    1ea0:	31 85       	ldd	r19, Z+9	; 0x09
    1ea2:	bf 01       	movw	r22, r30
    1ea4:	f9 01       	movw	r30, r18
    1ea6:	09 95       	icall
    1ea8:	89 2b       	or	r24, r25
    1eaa:	11 f0       	breq	.+4      	; 0x1eb0 <puts_P+0x38>
    1eac:	0f ef       	ldi	r16, 0xFF	; 255
    1eae:	1f ef       	ldi	r17, 0xFF	; 255
    1eb0:	21 96       	adiw	r28, 0x01	; 1
    1eb2:	fe 01       	movw	r30, r28
    1eb4:	84 91       	lpm	r24, Z+
    1eb6:	88 23       	and	r24, r24
    1eb8:	71 f7       	brne	.-36     	; 0x1e96 <puts_P+0x1e>
    1eba:	e0 91 0b 05 	lds	r30, 0x050B
    1ebe:	f0 91 0c 05 	lds	r31, 0x050C
    1ec2:	20 85       	ldd	r18, Z+8	; 0x08
    1ec4:	31 85       	ldd	r19, Z+9	; 0x09
    1ec6:	8a e0       	ldi	r24, 0x0A	; 10
    1ec8:	bf 01       	movw	r22, r30
    1eca:	f9 01       	movw	r30, r18
    1ecc:	09 95       	icall
    1ece:	89 2b       	or	r24, r25
    1ed0:	11 f0       	breq	.+4      	; 0x1ed6 <puts_P+0x5e>
    1ed2:	0f ef       	ldi	r16, 0xFF	; 255
    1ed4:	1f ef       	ldi	r17, 0xFF	; 255
    1ed6:	c8 01       	movw	r24, r16
    1ed8:	df 91       	pop	r29
    1eda:	cf 91       	pop	r28
    1edc:	1f 91       	pop	r17
    1ede:	0f 91       	pop	r16
    1ee0:	08 95       	ret

00001ee2 <vfprintf>:
    1ee2:	2f 92       	push	r2
    1ee4:	3f 92       	push	r3
    1ee6:	4f 92       	push	r4
    1ee8:	5f 92       	push	r5
    1eea:	6f 92       	push	r6
    1eec:	7f 92       	push	r7
    1eee:	8f 92       	push	r8
    1ef0:	9f 92       	push	r9
    1ef2:	af 92       	push	r10
    1ef4:	bf 92       	push	r11
    1ef6:	cf 92       	push	r12
    1ef8:	df 92       	push	r13
    1efa:	ef 92       	push	r14
    1efc:	ff 92       	push	r15
    1efe:	0f 93       	push	r16
    1f00:	1f 93       	push	r17
    1f02:	df 93       	push	r29
    1f04:	cf 93       	push	r28
    1f06:	cd b7       	in	r28, 0x3d	; 61
    1f08:	de b7       	in	r29, 0x3e	; 62
    1f0a:	2b 97       	sbiw	r28, 0x0b	; 11
    1f0c:	0f b6       	in	r0, 0x3f	; 63
    1f0e:	f8 94       	cli
    1f10:	de bf       	out	0x3e, r29	; 62
    1f12:	0f be       	out	0x3f, r0	; 63
    1f14:	cd bf       	out	0x3d, r28	; 61
    1f16:	3c 01       	movw	r6, r24
    1f18:	2b 01       	movw	r4, r22
    1f1a:	5a 01       	movw	r10, r20
    1f1c:	fc 01       	movw	r30, r24
    1f1e:	17 82       	std	Z+7, r1	; 0x07
    1f20:	16 82       	std	Z+6, r1	; 0x06
    1f22:	83 81       	ldd	r24, Z+3	; 0x03
    1f24:	81 fd       	sbrc	r24, 1
    1f26:	03 c0       	rjmp	.+6      	; 0x1f2e <vfprintf+0x4c>
    1f28:	6f ef       	ldi	r22, 0xFF	; 255
    1f2a:	7f ef       	ldi	r23, 0xFF	; 255
    1f2c:	b9 c1       	rjmp	.+882    	; 0x22a0 <__stack+0x1a1>
    1f2e:	9a e0       	ldi	r25, 0x0A	; 10
    1f30:	89 2e       	mov	r8, r25
    1f32:	1e 01       	movw	r2, r28
    1f34:	08 94       	sec
    1f36:	21 1c       	adc	r2, r1
    1f38:	31 1c       	adc	r3, r1
    1f3a:	f3 01       	movw	r30, r6
    1f3c:	23 81       	ldd	r18, Z+3	; 0x03
    1f3e:	f2 01       	movw	r30, r4
    1f40:	23 fd       	sbrc	r18, 3
    1f42:	85 91       	lpm	r24, Z+
    1f44:	23 ff       	sbrs	r18, 3
    1f46:	81 91       	ld	r24, Z+
    1f48:	2f 01       	movw	r4, r30
    1f4a:	88 23       	and	r24, r24
    1f4c:	09 f4       	brne	.+2      	; 0x1f50 <vfprintf+0x6e>
    1f4e:	a5 c1       	rjmp	.+842    	; 0x229a <__stack+0x19b>
    1f50:	85 32       	cpi	r24, 0x25	; 37
    1f52:	39 f4       	brne	.+14     	; 0x1f62 <vfprintf+0x80>
    1f54:	23 fd       	sbrc	r18, 3
    1f56:	85 91       	lpm	r24, Z+
    1f58:	23 ff       	sbrs	r18, 3
    1f5a:	81 91       	ld	r24, Z+
    1f5c:	2f 01       	movw	r4, r30
    1f5e:	85 32       	cpi	r24, 0x25	; 37
    1f60:	21 f4       	brne	.+8      	; 0x1f6a <vfprintf+0x88>
    1f62:	90 e0       	ldi	r25, 0x00	; 0
    1f64:	b3 01       	movw	r22, r6
    1f66:	cc d1       	rcall	.+920    	; 0x2300 <fputc>
    1f68:	e8 cf       	rjmp	.-48     	; 0x1f3a <vfprintf+0x58>
    1f6a:	98 2f       	mov	r25, r24
    1f6c:	ff 24       	eor	r15, r15
    1f6e:	ee 24       	eor	r14, r14
    1f70:	99 24       	eor	r9, r9
    1f72:	ff e1       	ldi	r31, 0x1F	; 31
    1f74:	ff 15       	cp	r31, r15
    1f76:	d0 f0       	brcs	.+52     	; 0x1fac <vfprintf+0xca>
    1f78:	9b 32       	cpi	r25, 0x2B	; 43
    1f7a:	69 f0       	breq	.+26     	; 0x1f96 <vfprintf+0xb4>
    1f7c:	9c 32       	cpi	r25, 0x2C	; 44
    1f7e:	28 f4       	brcc	.+10     	; 0x1f8a <vfprintf+0xa8>
    1f80:	90 32       	cpi	r25, 0x20	; 32
    1f82:	59 f0       	breq	.+22     	; 0x1f9a <vfprintf+0xb8>
    1f84:	93 32       	cpi	r25, 0x23	; 35
    1f86:	91 f4       	brne	.+36     	; 0x1fac <vfprintf+0xca>
    1f88:	0e c0       	rjmp	.+28     	; 0x1fa6 <vfprintf+0xc4>
    1f8a:	9d 32       	cpi	r25, 0x2D	; 45
    1f8c:	49 f0       	breq	.+18     	; 0x1fa0 <vfprintf+0xbe>
    1f8e:	90 33       	cpi	r25, 0x30	; 48
    1f90:	69 f4       	brne	.+26     	; 0x1fac <vfprintf+0xca>
    1f92:	41 e0       	ldi	r20, 0x01	; 1
    1f94:	24 c0       	rjmp	.+72     	; 0x1fde <vfprintf+0xfc>
    1f96:	52 e0       	ldi	r21, 0x02	; 2
    1f98:	f5 2a       	or	r15, r21
    1f9a:	84 e0       	ldi	r24, 0x04	; 4
    1f9c:	f8 2a       	or	r15, r24
    1f9e:	28 c0       	rjmp	.+80     	; 0x1ff0 <vfprintf+0x10e>
    1fa0:	98 e0       	ldi	r25, 0x08	; 8
    1fa2:	f9 2a       	or	r15, r25
    1fa4:	25 c0       	rjmp	.+74     	; 0x1ff0 <vfprintf+0x10e>
    1fa6:	e0 e1       	ldi	r30, 0x10	; 16
    1fa8:	fe 2a       	or	r15, r30
    1faa:	22 c0       	rjmp	.+68     	; 0x1ff0 <vfprintf+0x10e>
    1fac:	f7 fc       	sbrc	r15, 7
    1fae:	29 c0       	rjmp	.+82     	; 0x2002 <vfprintf+0x120>
    1fb0:	89 2f       	mov	r24, r25
    1fb2:	80 53       	subi	r24, 0x30	; 48
    1fb4:	8a 30       	cpi	r24, 0x0A	; 10
    1fb6:	70 f4       	brcc	.+28     	; 0x1fd4 <vfprintf+0xf2>
    1fb8:	f6 fe       	sbrs	r15, 6
    1fba:	05 c0       	rjmp	.+10     	; 0x1fc6 <vfprintf+0xe4>
    1fbc:	98 9c       	mul	r9, r8
    1fbe:	90 2c       	mov	r9, r0
    1fc0:	11 24       	eor	r1, r1
    1fc2:	98 0e       	add	r9, r24
    1fc4:	15 c0       	rjmp	.+42     	; 0x1ff0 <vfprintf+0x10e>
    1fc6:	e8 9c       	mul	r14, r8
    1fc8:	e0 2c       	mov	r14, r0
    1fca:	11 24       	eor	r1, r1
    1fcc:	e8 0e       	add	r14, r24
    1fce:	f0 e2       	ldi	r31, 0x20	; 32
    1fd0:	ff 2a       	or	r15, r31
    1fd2:	0e c0       	rjmp	.+28     	; 0x1ff0 <vfprintf+0x10e>
    1fd4:	9e 32       	cpi	r25, 0x2E	; 46
    1fd6:	29 f4       	brne	.+10     	; 0x1fe2 <vfprintf+0x100>
    1fd8:	f6 fc       	sbrc	r15, 6
    1fda:	5f c1       	rjmp	.+702    	; 0x229a <__stack+0x19b>
    1fdc:	40 e4       	ldi	r20, 0x40	; 64
    1fde:	f4 2a       	or	r15, r20
    1fe0:	07 c0       	rjmp	.+14     	; 0x1ff0 <vfprintf+0x10e>
    1fe2:	9c 36       	cpi	r25, 0x6C	; 108
    1fe4:	19 f4       	brne	.+6      	; 0x1fec <vfprintf+0x10a>
    1fe6:	50 e8       	ldi	r21, 0x80	; 128
    1fe8:	f5 2a       	or	r15, r21
    1fea:	02 c0       	rjmp	.+4      	; 0x1ff0 <vfprintf+0x10e>
    1fec:	98 36       	cpi	r25, 0x68	; 104
    1fee:	49 f4       	brne	.+18     	; 0x2002 <vfprintf+0x120>
    1ff0:	f2 01       	movw	r30, r4
    1ff2:	23 fd       	sbrc	r18, 3
    1ff4:	95 91       	lpm	r25, Z+
    1ff6:	23 ff       	sbrs	r18, 3
    1ff8:	91 91       	ld	r25, Z+
    1ffa:	2f 01       	movw	r4, r30
    1ffc:	99 23       	and	r25, r25
    1ffe:	09 f0       	breq	.+2      	; 0x2002 <vfprintf+0x120>
    2000:	b8 cf       	rjmp	.-144    	; 0x1f72 <vfprintf+0x90>
    2002:	89 2f       	mov	r24, r25
    2004:	85 54       	subi	r24, 0x45	; 69
    2006:	83 30       	cpi	r24, 0x03	; 3
    2008:	18 f0       	brcs	.+6      	; 0x2010 <vfprintf+0x12e>
    200a:	80 52       	subi	r24, 0x20	; 32
    200c:	83 30       	cpi	r24, 0x03	; 3
    200e:	38 f4       	brcc	.+14     	; 0x201e <vfprintf+0x13c>
    2010:	44 e0       	ldi	r20, 0x04	; 4
    2012:	50 e0       	ldi	r21, 0x00	; 0
    2014:	a4 0e       	add	r10, r20
    2016:	b5 1e       	adc	r11, r21
    2018:	5f e3       	ldi	r21, 0x3F	; 63
    201a:	59 83       	std	Y+1, r21	; 0x01
    201c:	0f c0       	rjmp	.+30     	; 0x203c <vfprintf+0x15a>
    201e:	93 36       	cpi	r25, 0x63	; 99
    2020:	31 f0       	breq	.+12     	; 0x202e <vfprintf+0x14c>
    2022:	93 37       	cpi	r25, 0x73	; 115
    2024:	79 f0       	breq	.+30     	; 0x2044 <vfprintf+0x162>
    2026:	93 35       	cpi	r25, 0x53	; 83
    2028:	09 f0       	breq	.+2      	; 0x202c <vfprintf+0x14a>
    202a:	52 c0       	rjmp	.+164    	; 0x20d0 <vfprintf+0x1ee>
    202c:	1f c0       	rjmp	.+62     	; 0x206c <vfprintf+0x18a>
    202e:	f5 01       	movw	r30, r10
    2030:	80 81       	ld	r24, Z
    2032:	89 83       	std	Y+1, r24	; 0x01
    2034:	42 e0       	ldi	r20, 0x02	; 2
    2036:	50 e0       	ldi	r21, 0x00	; 0
    2038:	a4 0e       	add	r10, r20
    203a:	b5 1e       	adc	r11, r21
    203c:	61 01       	movw	r12, r2
    203e:	01 e0       	ldi	r16, 0x01	; 1
    2040:	10 e0       	ldi	r17, 0x00	; 0
    2042:	11 c0       	rjmp	.+34     	; 0x2066 <vfprintf+0x184>
    2044:	f5 01       	movw	r30, r10
    2046:	c0 80       	ld	r12, Z
    2048:	d1 80       	ldd	r13, Z+1	; 0x01
    204a:	f6 fc       	sbrc	r15, 6
    204c:	03 c0       	rjmp	.+6      	; 0x2054 <vfprintf+0x172>
    204e:	6f ef       	ldi	r22, 0xFF	; 255
    2050:	7f ef       	ldi	r23, 0xFF	; 255
    2052:	02 c0       	rjmp	.+4      	; 0x2058 <vfprintf+0x176>
    2054:	69 2d       	mov	r22, r9
    2056:	70 e0       	ldi	r23, 0x00	; 0
    2058:	42 e0       	ldi	r20, 0x02	; 2
    205a:	50 e0       	ldi	r21, 0x00	; 0
    205c:	a4 0e       	add	r10, r20
    205e:	b5 1e       	adc	r11, r21
    2060:	c6 01       	movw	r24, r12
    2062:	43 d1       	rcall	.+646    	; 0x22ea <strnlen>
    2064:	8c 01       	movw	r16, r24
    2066:	5f e7       	ldi	r21, 0x7F	; 127
    2068:	f5 22       	and	r15, r21
    206a:	13 c0       	rjmp	.+38     	; 0x2092 <vfprintf+0x1b0>
    206c:	f5 01       	movw	r30, r10
    206e:	c0 80       	ld	r12, Z
    2070:	d1 80       	ldd	r13, Z+1	; 0x01
    2072:	f6 fc       	sbrc	r15, 6
    2074:	03 c0       	rjmp	.+6      	; 0x207c <vfprintf+0x19a>
    2076:	6f ef       	ldi	r22, 0xFF	; 255
    2078:	7f ef       	ldi	r23, 0xFF	; 255
    207a:	02 c0       	rjmp	.+4      	; 0x2080 <vfprintf+0x19e>
    207c:	69 2d       	mov	r22, r9
    207e:	70 e0       	ldi	r23, 0x00	; 0
    2080:	42 e0       	ldi	r20, 0x02	; 2
    2082:	50 e0       	ldi	r21, 0x00	; 0
    2084:	a4 0e       	add	r10, r20
    2086:	b5 1e       	adc	r11, r21
    2088:	c6 01       	movw	r24, r12
    208a:	24 d1       	rcall	.+584    	; 0x22d4 <strnlen_P>
    208c:	8c 01       	movw	r16, r24
    208e:	50 e8       	ldi	r21, 0x80	; 128
    2090:	f5 2a       	or	r15, r21
    2092:	f3 fe       	sbrs	r15, 3
    2094:	06 c0       	rjmp	.+12     	; 0x20a2 <vfprintf+0x1c0>
    2096:	18 c0       	rjmp	.+48     	; 0x20c8 <vfprintf+0x1e6>
    2098:	80 e2       	ldi	r24, 0x20	; 32
    209a:	90 e0       	ldi	r25, 0x00	; 0
    209c:	b3 01       	movw	r22, r6
    209e:	30 d1       	rcall	.+608    	; 0x2300 <fputc>
    20a0:	ea 94       	dec	r14
    20a2:	8e 2d       	mov	r24, r14
    20a4:	90 e0       	ldi	r25, 0x00	; 0
    20a6:	08 17       	cp	r16, r24
    20a8:	19 07       	cpc	r17, r25
    20aa:	b0 f3       	brcs	.-20     	; 0x2098 <vfprintf+0x1b6>
    20ac:	0d c0       	rjmp	.+26     	; 0x20c8 <vfprintf+0x1e6>
    20ae:	f6 01       	movw	r30, r12
    20b0:	f7 fc       	sbrc	r15, 7
    20b2:	85 91       	lpm	r24, Z+
    20b4:	f7 fe       	sbrs	r15, 7
    20b6:	81 91       	ld	r24, Z+
    20b8:	6f 01       	movw	r12, r30
    20ba:	90 e0       	ldi	r25, 0x00	; 0
    20bc:	b3 01       	movw	r22, r6
    20be:	20 d1       	rcall	.+576    	; 0x2300 <fputc>
    20c0:	e1 10       	cpse	r14, r1
    20c2:	ea 94       	dec	r14
    20c4:	01 50       	subi	r16, 0x01	; 1
    20c6:	10 40       	sbci	r17, 0x00	; 0
    20c8:	01 15       	cp	r16, r1
    20ca:	11 05       	cpc	r17, r1
    20cc:	81 f7       	brne	.-32     	; 0x20ae <vfprintf+0x1cc>
    20ce:	e2 c0       	rjmp	.+452    	; 0x2294 <__stack+0x195>
    20d0:	94 36       	cpi	r25, 0x64	; 100
    20d2:	11 f0       	breq	.+4      	; 0x20d8 <vfprintf+0x1f6>
    20d4:	99 36       	cpi	r25, 0x69	; 105
    20d6:	61 f5       	brne	.+88     	; 0x2130 <__stack+0x31>
    20d8:	f7 fe       	sbrs	r15, 7
    20da:	08 c0       	rjmp	.+16     	; 0x20ec <vfprintf+0x20a>
    20dc:	f5 01       	movw	r30, r10
    20de:	20 81       	ld	r18, Z
    20e0:	31 81       	ldd	r19, Z+1	; 0x01
    20e2:	42 81       	ldd	r20, Z+2	; 0x02
    20e4:	53 81       	ldd	r21, Z+3	; 0x03
    20e6:	84 e0       	ldi	r24, 0x04	; 4
    20e8:	90 e0       	ldi	r25, 0x00	; 0
    20ea:	0a c0       	rjmp	.+20     	; 0x2100 <__stack+0x1>
    20ec:	f5 01       	movw	r30, r10
    20ee:	80 81       	ld	r24, Z
    20f0:	91 81       	ldd	r25, Z+1	; 0x01
    20f2:	9c 01       	movw	r18, r24
    20f4:	44 27       	eor	r20, r20
    20f6:	37 fd       	sbrc	r19, 7
    20f8:	40 95       	com	r20
    20fa:	54 2f       	mov	r21, r20
    20fc:	82 e0       	ldi	r24, 0x02	; 2
    20fe:	90 e0       	ldi	r25, 0x00	; 0
    2100:	a8 0e       	add	r10, r24
    2102:	b9 1e       	adc	r11, r25
    2104:	9f e6       	ldi	r25, 0x6F	; 111
    2106:	f9 22       	and	r15, r25
    2108:	57 ff       	sbrs	r21, 7
    210a:	09 c0       	rjmp	.+18     	; 0x211e <__stack+0x1f>
    210c:	50 95       	com	r21
    210e:	40 95       	com	r20
    2110:	30 95       	com	r19
    2112:	21 95       	neg	r18
    2114:	3f 4f       	sbci	r19, 0xFF	; 255
    2116:	4f 4f       	sbci	r20, 0xFF	; 255
    2118:	5f 4f       	sbci	r21, 0xFF	; 255
    211a:	e0 e8       	ldi	r30, 0x80	; 128
    211c:	fe 2a       	or	r15, r30
    211e:	ca 01       	movw	r24, r20
    2120:	b9 01       	movw	r22, r18
    2122:	a1 01       	movw	r20, r2
    2124:	2a e0       	ldi	r18, 0x0A	; 10
    2126:	30 e0       	ldi	r19, 0x00	; 0
    2128:	17 d1       	rcall	.+558    	; 0x2358 <__ultoa_invert>
    212a:	d8 2e       	mov	r13, r24
    212c:	d2 18       	sub	r13, r2
    212e:	3f c0       	rjmp	.+126    	; 0x21ae <__stack+0xaf>
    2130:	95 37       	cpi	r25, 0x75	; 117
    2132:	29 f4       	brne	.+10     	; 0x213e <__stack+0x3f>
    2134:	1f 2d       	mov	r17, r15
    2136:	1f 7e       	andi	r17, 0xEF	; 239
    2138:	2a e0       	ldi	r18, 0x0A	; 10
    213a:	30 e0       	ldi	r19, 0x00	; 0
    213c:	1d c0       	rjmp	.+58     	; 0x2178 <__stack+0x79>
    213e:	1f 2d       	mov	r17, r15
    2140:	19 7f       	andi	r17, 0xF9	; 249
    2142:	9f 36       	cpi	r25, 0x6F	; 111
    2144:	61 f0       	breq	.+24     	; 0x215e <__stack+0x5f>
    2146:	90 37       	cpi	r25, 0x70	; 112
    2148:	20 f4       	brcc	.+8      	; 0x2152 <__stack+0x53>
    214a:	98 35       	cpi	r25, 0x58	; 88
    214c:	09 f0       	breq	.+2      	; 0x2150 <__stack+0x51>
    214e:	a5 c0       	rjmp	.+330    	; 0x229a <__stack+0x19b>
    2150:	0f c0       	rjmp	.+30     	; 0x2170 <__stack+0x71>
    2152:	90 37       	cpi	r25, 0x70	; 112
    2154:	39 f0       	breq	.+14     	; 0x2164 <__stack+0x65>
    2156:	98 37       	cpi	r25, 0x78	; 120
    2158:	09 f0       	breq	.+2      	; 0x215c <__stack+0x5d>
    215a:	9f c0       	rjmp	.+318    	; 0x229a <__stack+0x19b>
    215c:	04 c0       	rjmp	.+8      	; 0x2166 <__stack+0x67>
    215e:	28 e0       	ldi	r18, 0x08	; 8
    2160:	30 e0       	ldi	r19, 0x00	; 0
    2162:	0a c0       	rjmp	.+20     	; 0x2178 <__stack+0x79>
    2164:	10 61       	ori	r17, 0x10	; 16
    2166:	14 fd       	sbrc	r17, 4
    2168:	14 60       	ori	r17, 0x04	; 4
    216a:	20 e1       	ldi	r18, 0x10	; 16
    216c:	30 e0       	ldi	r19, 0x00	; 0
    216e:	04 c0       	rjmp	.+8      	; 0x2178 <__stack+0x79>
    2170:	14 fd       	sbrc	r17, 4
    2172:	16 60       	ori	r17, 0x06	; 6
    2174:	20 e1       	ldi	r18, 0x10	; 16
    2176:	32 e0       	ldi	r19, 0x02	; 2
    2178:	17 ff       	sbrs	r17, 7
    217a:	08 c0       	rjmp	.+16     	; 0x218c <__stack+0x8d>
    217c:	f5 01       	movw	r30, r10
    217e:	60 81       	ld	r22, Z
    2180:	71 81       	ldd	r23, Z+1	; 0x01
    2182:	82 81       	ldd	r24, Z+2	; 0x02
    2184:	93 81       	ldd	r25, Z+3	; 0x03
    2186:	44 e0       	ldi	r20, 0x04	; 4
    2188:	50 e0       	ldi	r21, 0x00	; 0
    218a:	08 c0       	rjmp	.+16     	; 0x219c <__stack+0x9d>
    218c:	f5 01       	movw	r30, r10
    218e:	80 81       	ld	r24, Z
    2190:	91 81       	ldd	r25, Z+1	; 0x01
    2192:	bc 01       	movw	r22, r24
    2194:	80 e0       	ldi	r24, 0x00	; 0
    2196:	90 e0       	ldi	r25, 0x00	; 0
    2198:	42 e0       	ldi	r20, 0x02	; 2
    219a:	50 e0       	ldi	r21, 0x00	; 0
    219c:	a4 0e       	add	r10, r20
    219e:	b5 1e       	adc	r11, r21
    21a0:	a1 01       	movw	r20, r2
    21a2:	da d0       	rcall	.+436    	; 0x2358 <__ultoa_invert>
    21a4:	d8 2e       	mov	r13, r24
    21a6:	d2 18       	sub	r13, r2
    21a8:	8f e7       	ldi	r24, 0x7F	; 127
    21aa:	f8 2e       	mov	r15, r24
    21ac:	f1 22       	and	r15, r17
    21ae:	f6 fe       	sbrs	r15, 6
    21b0:	0b c0       	rjmp	.+22     	; 0x21c8 <__stack+0xc9>
    21b2:	5e ef       	ldi	r21, 0xFE	; 254
    21b4:	f5 22       	and	r15, r21
    21b6:	d9 14       	cp	r13, r9
    21b8:	38 f4       	brcc	.+14     	; 0x21c8 <__stack+0xc9>
    21ba:	f4 fe       	sbrs	r15, 4
    21bc:	07 c0       	rjmp	.+14     	; 0x21cc <__stack+0xcd>
    21be:	f2 fc       	sbrc	r15, 2
    21c0:	05 c0       	rjmp	.+10     	; 0x21cc <__stack+0xcd>
    21c2:	8f ee       	ldi	r24, 0xEF	; 239
    21c4:	f8 22       	and	r15, r24
    21c6:	02 c0       	rjmp	.+4      	; 0x21cc <__stack+0xcd>
    21c8:	1d 2d       	mov	r17, r13
    21ca:	01 c0       	rjmp	.+2      	; 0x21ce <__stack+0xcf>
    21cc:	19 2d       	mov	r17, r9
    21ce:	f4 fe       	sbrs	r15, 4
    21d0:	0d c0       	rjmp	.+26     	; 0x21ec <__stack+0xed>
    21d2:	fe 01       	movw	r30, r28
    21d4:	ed 0d       	add	r30, r13
    21d6:	f1 1d       	adc	r31, r1
    21d8:	80 81       	ld	r24, Z
    21da:	80 33       	cpi	r24, 0x30	; 48
    21dc:	19 f4       	brne	.+6      	; 0x21e4 <__stack+0xe5>
    21de:	99 ee       	ldi	r25, 0xE9	; 233
    21e0:	f9 22       	and	r15, r25
    21e2:	08 c0       	rjmp	.+16     	; 0x21f4 <__stack+0xf5>
    21e4:	1f 5f       	subi	r17, 0xFF	; 255
    21e6:	f2 fe       	sbrs	r15, 2
    21e8:	05 c0       	rjmp	.+10     	; 0x21f4 <__stack+0xf5>
    21ea:	03 c0       	rjmp	.+6      	; 0x21f2 <__stack+0xf3>
    21ec:	8f 2d       	mov	r24, r15
    21ee:	86 78       	andi	r24, 0x86	; 134
    21f0:	09 f0       	breq	.+2      	; 0x21f4 <__stack+0xf5>
    21f2:	1f 5f       	subi	r17, 0xFF	; 255
    21f4:	0f 2d       	mov	r16, r15
    21f6:	f3 fc       	sbrc	r15, 3
    21f8:	13 c0       	rjmp	.+38     	; 0x2220 <__stack+0x121>
    21fa:	f0 fe       	sbrs	r15, 0
    21fc:	0e c0       	rjmp	.+28     	; 0x221a <__stack+0x11b>
    21fe:	1e 15       	cp	r17, r14
    2200:	10 f0       	brcs	.+4      	; 0x2206 <__stack+0x107>
    2202:	9d 2c       	mov	r9, r13
    2204:	0a c0       	rjmp	.+20     	; 0x221a <__stack+0x11b>
    2206:	9d 2c       	mov	r9, r13
    2208:	9e 0c       	add	r9, r14
    220a:	91 1a       	sub	r9, r17
    220c:	1e 2d       	mov	r17, r14
    220e:	05 c0       	rjmp	.+10     	; 0x221a <__stack+0x11b>
    2210:	80 e2       	ldi	r24, 0x20	; 32
    2212:	90 e0       	ldi	r25, 0x00	; 0
    2214:	b3 01       	movw	r22, r6
    2216:	74 d0       	rcall	.+232    	; 0x2300 <fputc>
    2218:	1f 5f       	subi	r17, 0xFF	; 255
    221a:	1e 15       	cp	r17, r14
    221c:	c8 f3       	brcs	.-14     	; 0x2210 <__stack+0x111>
    221e:	04 c0       	rjmp	.+8      	; 0x2228 <__stack+0x129>
    2220:	1e 15       	cp	r17, r14
    2222:	10 f4       	brcc	.+4      	; 0x2228 <__stack+0x129>
    2224:	e1 1a       	sub	r14, r17
    2226:	01 c0       	rjmp	.+2      	; 0x222a <__stack+0x12b>
    2228:	ee 24       	eor	r14, r14
    222a:	04 ff       	sbrs	r16, 4
    222c:	0e c0       	rjmp	.+28     	; 0x224a <__stack+0x14b>
    222e:	80 e3       	ldi	r24, 0x30	; 48
    2230:	90 e0       	ldi	r25, 0x00	; 0
    2232:	b3 01       	movw	r22, r6
    2234:	65 d0       	rcall	.+202    	; 0x2300 <fputc>
    2236:	02 ff       	sbrs	r16, 2
    2238:	1b c0       	rjmp	.+54     	; 0x2270 <__stack+0x171>
    223a:	01 fd       	sbrc	r16, 1
    223c:	03 c0       	rjmp	.+6      	; 0x2244 <__stack+0x145>
    223e:	88 e7       	ldi	r24, 0x78	; 120
    2240:	90 e0       	ldi	r25, 0x00	; 0
    2242:	0e c0       	rjmp	.+28     	; 0x2260 <__stack+0x161>
    2244:	88 e5       	ldi	r24, 0x58	; 88
    2246:	90 e0       	ldi	r25, 0x00	; 0
    2248:	0b c0       	rjmp	.+22     	; 0x2260 <__stack+0x161>
    224a:	80 2f       	mov	r24, r16
    224c:	86 78       	andi	r24, 0x86	; 134
    224e:	81 f0       	breq	.+32     	; 0x2270 <__stack+0x171>
    2250:	01 ff       	sbrs	r16, 1
    2252:	02 c0       	rjmp	.+4      	; 0x2258 <__stack+0x159>
    2254:	8b e2       	ldi	r24, 0x2B	; 43
    2256:	01 c0       	rjmp	.+2      	; 0x225a <__stack+0x15b>
    2258:	80 e2       	ldi	r24, 0x20	; 32
    225a:	f7 fc       	sbrc	r15, 7
    225c:	8d e2       	ldi	r24, 0x2D	; 45
    225e:	90 e0       	ldi	r25, 0x00	; 0
    2260:	b3 01       	movw	r22, r6
    2262:	4e d0       	rcall	.+156    	; 0x2300 <fputc>
    2264:	05 c0       	rjmp	.+10     	; 0x2270 <__stack+0x171>
    2266:	80 e3       	ldi	r24, 0x30	; 48
    2268:	90 e0       	ldi	r25, 0x00	; 0
    226a:	b3 01       	movw	r22, r6
    226c:	49 d0       	rcall	.+146    	; 0x2300 <fputc>
    226e:	9a 94       	dec	r9
    2270:	d9 14       	cp	r13, r9
    2272:	c8 f3       	brcs	.-14     	; 0x2266 <__stack+0x167>
    2274:	da 94       	dec	r13
    2276:	f1 01       	movw	r30, r2
    2278:	ed 0d       	add	r30, r13
    227a:	f1 1d       	adc	r31, r1
    227c:	80 81       	ld	r24, Z
    227e:	90 e0       	ldi	r25, 0x00	; 0
    2280:	b3 01       	movw	r22, r6
    2282:	3e d0       	rcall	.+124    	; 0x2300 <fputc>
    2284:	dd 20       	and	r13, r13
    2286:	b1 f7       	brne	.-20     	; 0x2274 <__stack+0x175>
    2288:	05 c0       	rjmp	.+10     	; 0x2294 <__stack+0x195>
    228a:	80 e2       	ldi	r24, 0x20	; 32
    228c:	90 e0       	ldi	r25, 0x00	; 0
    228e:	b3 01       	movw	r22, r6
    2290:	37 d0       	rcall	.+110    	; 0x2300 <fputc>
    2292:	ea 94       	dec	r14
    2294:	ee 20       	and	r14, r14
    2296:	c9 f7       	brne	.-14     	; 0x228a <__stack+0x18b>
    2298:	50 ce       	rjmp	.-864    	; 0x1f3a <vfprintf+0x58>
    229a:	f3 01       	movw	r30, r6
    229c:	66 81       	ldd	r22, Z+6	; 0x06
    229e:	77 81       	ldd	r23, Z+7	; 0x07
    22a0:	cb 01       	movw	r24, r22
    22a2:	2b 96       	adiw	r28, 0x0b	; 11
    22a4:	0f b6       	in	r0, 0x3f	; 63
    22a6:	f8 94       	cli
    22a8:	de bf       	out	0x3e, r29	; 62
    22aa:	0f be       	out	0x3f, r0	; 63
    22ac:	cd bf       	out	0x3d, r28	; 61
    22ae:	cf 91       	pop	r28
    22b0:	df 91       	pop	r29
    22b2:	1f 91       	pop	r17
    22b4:	0f 91       	pop	r16
    22b6:	ff 90       	pop	r15
    22b8:	ef 90       	pop	r14
    22ba:	df 90       	pop	r13
    22bc:	cf 90       	pop	r12
    22be:	bf 90       	pop	r11
    22c0:	af 90       	pop	r10
    22c2:	9f 90       	pop	r9
    22c4:	8f 90       	pop	r8
    22c6:	7f 90       	pop	r7
    22c8:	6f 90       	pop	r6
    22ca:	5f 90       	pop	r5
    22cc:	4f 90       	pop	r4
    22ce:	3f 90       	pop	r3
    22d0:	2f 90       	pop	r2
    22d2:	08 95       	ret

000022d4 <strnlen_P>:
    22d4:	fc 01       	movw	r30, r24
    22d6:	05 90       	lpm	r0, Z+
    22d8:	61 50       	subi	r22, 0x01	; 1
    22da:	70 40       	sbci	r23, 0x00	; 0
    22dc:	01 10       	cpse	r0, r1
    22de:	d8 f7       	brcc	.-10     	; 0x22d6 <strnlen_P+0x2>
    22e0:	80 95       	com	r24
    22e2:	90 95       	com	r25
    22e4:	8e 0f       	add	r24, r30
    22e6:	9f 1f       	adc	r25, r31
    22e8:	08 95       	ret

000022ea <strnlen>:
    22ea:	fc 01       	movw	r30, r24
    22ec:	61 50       	subi	r22, 0x01	; 1
    22ee:	70 40       	sbci	r23, 0x00	; 0
    22f0:	01 90       	ld	r0, Z+
    22f2:	01 10       	cpse	r0, r1
    22f4:	d8 f7       	brcc	.-10     	; 0x22ec <strnlen+0x2>
    22f6:	80 95       	com	r24
    22f8:	90 95       	com	r25
    22fa:	8e 0f       	add	r24, r30
    22fc:	9f 1f       	adc	r25, r31
    22fe:	08 95       	ret

00002300 <fputc>:
    2300:	0f 93       	push	r16
    2302:	1f 93       	push	r17
    2304:	cf 93       	push	r28
    2306:	df 93       	push	r29
    2308:	8c 01       	movw	r16, r24
    230a:	eb 01       	movw	r28, r22
    230c:	8b 81       	ldd	r24, Y+3	; 0x03
    230e:	81 ff       	sbrs	r24, 1
    2310:	1b c0       	rjmp	.+54     	; 0x2348 <fputc+0x48>
    2312:	82 ff       	sbrs	r24, 2
    2314:	0d c0       	rjmp	.+26     	; 0x2330 <fputc+0x30>
    2316:	2e 81       	ldd	r18, Y+6	; 0x06
    2318:	3f 81       	ldd	r19, Y+7	; 0x07
    231a:	8c 81       	ldd	r24, Y+4	; 0x04
    231c:	9d 81       	ldd	r25, Y+5	; 0x05
    231e:	28 17       	cp	r18, r24
    2320:	39 07       	cpc	r19, r25
    2322:	64 f4       	brge	.+24     	; 0x233c <fputc+0x3c>
    2324:	e8 81       	ld	r30, Y
    2326:	f9 81       	ldd	r31, Y+1	; 0x01
    2328:	01 93       	st	Z+, r16
    232a:	f9 83       	std	Y+1, r31	; 0x01
    232c:	e8 83       	st	Y, r30
    232e:	06 c0       	rjmp	.+12     	; 0x233c <fputc+0x3c>
    2330:	e8 85       	ldd	r30, Y+8	; 0x08
    2332:	f9 85       	ldd	r31, Y+9	; 0x09
    2334:	80 2f       	mov	r24, r16
    2336:	09 95       	icall
    2338:	89 2b       	or	r24, r25
    233a:	31 f4       	brne	.+12     	; 0x2348 <fputc+0x48>
    233c:	8e 81       	ldd	r24, Y+6	; 0x06
    233e:	9f 81       	ldd	r25, Y+7	; 0x07
    2340:	01 96       	adiw	r24, 0x01	; 1
    2342:	9f 83       	std	Y+7, r25	; 0x07
    2344:	8e 83       	std	Y+6, r24	; 0x06
    2346:	02 c0       	rjmp	.+4      	; 0x234c <fputc+0x4c>
    2348:	0f ef       	ldi	r16, 0xFF	; 255
    234a:	1f ef       	ldi	r17, 0xFF	; 255
    234c:	c8 01       	movw	r24, r16
    234e:	df 91       	pop	r29
    2350:	cf 91       	pop	r28
    2352:	1f 91       	pop	r17
    2354:	0f 91       	pop	r16
    2356:	08 95       	ret

00002358 <__ultoa_invert>:
    2358:	fa 01       	movw	r30, r20
    235a:	aa 27       	eor	r26, r26
    235c:	28 30       	cpi	r18, 0x08	; 8
    235e:	51 f1       	breq	.+84     	; 0x23b4 <__ultoa_invert+0x5c>
    2360:	20 31       	cpi	r18, 0x10	; 16
    2362:	81 f1       	breq	.+96     	; 0x23c4 <__ultoa_invert+0x6c>
    2364:	e8 94       	clt
    2366:	6f 93       	push	r22
    2368:	6e 7f       	andi	r22, 0xFE	; 254
    236a:	6e 5f       	subi	r22, 0xFE	; 254
    236c:	7f 4f       	sbci	r23, 0xFF	; 255
    236e:	8f 4f       	sbci	r24, 0xFF	; 255
    2370:	9f 4f       	sbci	r25, 0xFF	; 255
    2372:	af 4f       	sbci	r26, 0xFF	; 255
    2374:	b1 e0       	ldi	r27, 0x01	; 1
    2376:	3e d0       	rcall	.+124    	; 0x23f4 <__ultoa_invert+0x9c>
    2378:	b4 e0       	ldi	r27, 0x04	; 4
    237a:	3c d0       	rcall	.+120    	; 0x23f4 <__ultoa_invert+0x9c>
    237c:	67 0f       	add	r22, r23
    237e:	78 1f       	adc	r23, r24
    2380:	89 1f       	adc	r24, r25
    2382:	9a 1f       	adc	r25, r26
    2384:	a1 1d       	adc	r26, r1
    2386:	68 0f       	add	r22, r24
    2388:	79 1f       	adc	r23, r25
    238a:	8a 1f       	adc	r24, r26
    238c:	91 1d       	adc	r25, r1
    238e:	a1 1d       	adc	r26, r1
    2390:	6a 0f       	add	r22, r26
    2392:	71 1d       	adc	r23, r1
    2394:	81 1d       	adc	r24, r1
    2396:	91 1d       	adc	r25, r1
    2398:	a1 1d       	adc	r26, r1
    239a:	20 d0       	rcall	.+64     	; 0x23dc <__ultoa_invert+0x84>
    239c:	09 f4       	brne	.+2      	; 0x23a0 <__ultoa_invert+0x48>
    239e:	68 94       	set
    23a0:	3f 91       	pop	r19
    23a2:	2a e0       	ldi	r18, 0x0A	; 10
    23a4:	26 9f       	mul	r18, r22
    23a6:	11 24       	eor	r1, r1
    23a8:	30 19       	sub	r19, r0
    23aa:	30 5d       	subi	r19, 0xD0	; 208
    23ac:	31 93       	st	Z+, r19
    23ae:	de f6       	brtc	.-74     	; 0x2366 <__ultoa_invert+0xe>
    23b0:	cf 01       	movw	r24, r30
    23b2:	08 95       	ret
    23b4:	46 2f       	mov	r20, r22
    23b6:	47 70       	andi	r20, 0x07	; 7
    23b8:	40 5d       	subi	r20, 0xD0	; 208
    23ba:	41 93       	st	Z+, r20
    23bc:	b3 e0       	ldi	r27, 0x03	; 3
    23be:	0f d0       	rcall	.+30     	; 0x23de <__ultoa_invert+0x86>
    23c0:	c9 f7       	brne	.-14     	; 0x23b4 <__ultoa_invert+0x5c>
    23c2:	f6 cf       	rjmp	.-20     	; 0x23b0 <__ultoa_invert+0x58>
    23c4:	46 2f       	mov	r20, r22
    23c6:	4f 70       	andi	r20, 0x0F	; 15
    23c8:	40 5d       	subi	r20, 0xD0	; 208
    23ca:	4a 33       	cpi	r20, 0x3A	; 58
    23cc:	18 f0       	brcs	.+6      	; 0x23d4 <__ultoa_invert+0x7c>
    23ce:	49 5d       	subi	r20, 0xD9	; 217
    23d0:	31 fd       	sbrc	r19, 1
    23d2:	40 52       	subi	r20, 0x20	; 32
    23d4:	41 93       	st	Z+, r20
    23d6:	02 d0       	rcall	.+4      	; 0x23dc <__ultoa_invert+0x84>
    23d8:	a9 f7       	brne	.-22     	; 0x23c4 <__ultoa_invert+0x6c>
    23da:	ea cf       	rjmp	.-44     	; 0x23b0 <__ultoa_invert+0x58>
    23dc:	b4 e0       	ldi	r27, 0x04	; 4
    23de:	a6 95       	lsr	r26
    23e0:	97 95       	ror	r25
    23e2:	87 95       	ror	r24
    23e4:	77 95       	ror	r23
    23e6:	67 95       	ror	r22
    23e8:	ba 95       	dec	r27
    23ea:	c9 f7       	brne	.-14     	; 0x23de <__ultoa_invert+0x86>
    23ec:	00 97       	sbiw	r24, 0x00	; 0
    23ee:	61 05       	cpc	r22, r1
    23f0:	71 05       	cpc	r23, r1
    23f2:	08 95       	ret
    23f4:	9b 01       	movw	r18, r22
    23f6:	ac 01       	movw	r20, r24
    23f8:	0a 2e       	mov	r0, r26
    23fa:	06 94       	lsr	r0
    23fc:	57 95       	ror	r21
    23fe:	47 95       	ror	r20
    2400:	37 95       	ror	r19
    2402:	27 95       	ror	r18
    2404:	ba 95       	dec	r27
    2406:	c9 f7       	brne	.-14     	; 0x23fa <__ultoa_invert+0xa2>
    2408:	62 0f       	add	r22, r18
    240a:	73 1f       	adc	r23, r19
    240c:	84 1f       	adc	r24, r20
    240e:	95 1f       	adc	r25, r21
    2410:	a0 1d       	adc	r26, r0
    2412:	08 95       	ret

00002414 <_exit>:
    2414:	f8 94       	cli

00002416 <__stop_program>:
    2416:	ff cf       	rjmp	.-2      	; 0x2416 <__stop_program>
