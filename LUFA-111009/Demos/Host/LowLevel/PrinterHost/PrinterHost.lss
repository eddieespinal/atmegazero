
PrinterHost.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003a  00800100  00001bd2  00001c66  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001bd2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000024  0080013a  0080013a  00001ca0  2**0
                  ALLOC
  3 .debug_aranges 00000358  00000000  00000000  00001ca0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000875  00000000  00000000  00001ff8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00004f9a  00000000  00000000  0000286d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001781  00000000  00000000  00007807  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00004063  00000000  00000000  00008f88  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000004f0  00000000  00000000  0000cfec  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00002347  00000000  00000000  0000d4dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000022e4  00000000  00000000  0000f823  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000400  00000000  00000000  00011b07  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	return USB_Host_SendControlRequest(PortStatus);
}
       0:	b2 c1       	rjmp	.+868    	; 0x366 <__ctors_end>
		Pipe_DisablePipe();
	}
}

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
       2:	00 00       	nop
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
       4:	ce c1       	rjmp	.+924    	; 0x3a2 <__bad_interrupt>
{
	USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, AfterType);

	if (*BytesRem)
	  USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, Type);
}
       6:	00 00       	nop

	return USB_Host_SendControlRequest(FeatureStatus);
}

uint8_t USB_Host_ClearEndpointStall(const uint8_t EndpointAddress)
{
       8:	cc c1       	rjmp	.+920    	; 0x3a2 <__bad_interrupt>

	return Serial_ReceiveByte();
}

int Serial_getchar_Blocking(FILE *Stream)
{
       a:	00 00       	nop
       c:	ca c1       	rjmp	.+916    	; 0x3a2 <__bad_interrupt>
       e:	00 00       	nop
      10:	c8 c1       	rjmp	.+912    	; 0x3a2 <__bad_interrupt>
      12:	00 00       	nop
      14:	c6 c1       	rjmp	.+908    	; 0x3a2 <__bad_interrupt>
      16:	00 00       	nop
      18:	c4 c1       	rjmp	.+904    	; 0x3a2 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	c2 c1       	rjmp	.+900    	; 0x3a2 <__bad_interrupt>
      1e:	00 00       	nop
      20:	c0 c1       	rjmp	.+896    	; 0x3a2 <__bad_interrupt>
      22:	00 00       	nop
      24:	be c1       	rjmp	.+892    	; 0x3a2 <__bad_interrupt>
      26:	00 00       	nop
      28:	a3 c7       	rjmp	.+3910   	; 0xf70 <__vector_10>
      2a:	00 00       	nop
      2c:	ba c1       	rjmp	.+884    	; 0x3a2 <__bad_interrupt>
      2e:	00 00       	nop
      30:	b8 c1       	rjmp	.+880    	; 0x3a2 <__bad_interrupt>
      32:	00 00       	nop
      34:	b6 c1       	rjmp	.+876    	; 0x3a2 <__bad_interrupt>
      36:	00 00       	nop
      38:	b4 c1       	rjmp	.+872    	; 0x3a2 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	b2 c1       	rjmp	.+868    	; 0x3a2 <__bad_interrupt>
      3e:	00 00       	nop
      40:	b0 c1       	rjmp	.+864    	; 0x3a2 <__bad_interrupt>
      42:	00 00       	nop
      44:	ae c1       	rjmp	.+860    	; 0x3a2 <__bad_interrupt>
      46:	00 00       	nop
      48:	ac c1       	rjmp	.+856    	; 0x3a2 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	aa c1       	rjmp	.+852    	; 0x3a2 <__bad_interrupt>
      4e:	00 00       	nop
      50:	a8 c1       	rjmp	.+848    	; 0x3a2 <__bad_interrupt>
      52:	00 00       	nop
      54:	a6 c1       	rjmp	.+844    	; 0x3a2 <__bad_interrupt>
      56:	00 00       	nop
      58:	a4 c1       	rjmp	.+840    	; 0x3a2 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	a2 c1       	rjmp	.+836    	; 0x3a2 <__bad_interrupt>
      5e:	00 00       	nop
      60:	a0 c1       	rjmp	.+832    	; 0x3a2 <__bad_interrupt>
      62:	00 00       	nop
      64:	9e c1       	rjmp	.+828    	; 0x3a2 <__bad_interrupt>
      66:	00 00       	nop
      68:	9c c1       	rjmp	.+824    	; 0x3a2 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	9a c1       	rjmp	.+820    	; 0x3a2 <__bad_interrupt>
      6e:	00 00       	nop
      70:	98 c1       	rjmp	.+816    	; 0x3a2 <__bad_interrupt>
      72:	00 00       	nop
      74:	96 c1       	rjmp	.+812    	; 0x3a2 <__bad_interrupt>
      76:	00 00       	nop
      78:	94 c1       	rjmp	.+808    	; 0x3a2 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	92 c1       	rjmp	.+804    	; 0x3a2 <__bad_interrupt>
      7e:	00 00       	nop
      80:	90 c1       	rjmp	.+800    	; 0x3a2 <__bad_interrupt>
      82:	00 00       	nop
      84:	8e c1       	rjmp	.+796    	; 0x3a2 <__bad_interrupt>
      86:	00 00       	nop
      88:	8c c1       	rjmp	.+792    	; 0x3a2 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	8a c1       	rjmp	.+788    	; 0x3a2 <__bad_interrupt>
      8e:	00 00       	nop
      90:	88 c1       	rjmp	.+784    	; 0x3a2 <__bad_interrupt>
      92:	00 00       	nop
      94:	86 c1       	rjmp	.+780    	; 0x3a2 <__bad_interrupt>
      96:	00 00       	nop

00000098 <__c.4607>:
      98:	54 65 73 74 20 50 61 67 65 20 53 65 6e 74 2e 0d     Test Page Sent..
      a8:	0a 00                                               ..

000000aa <__c.4605>:
      aa:	1b 5b 33 31 6d 45 72 72 6f 72 20 53 65 6e 64 69     .[31mError Sendi
      ba:	6e 67 20 54 65 73 74 20 50 61 67 65 2e 0d 0a 20     ng Test Page... 
      ca:	2d 2d 20 45 72 72 6f 72 20 43 6f 64 65 3a 20 25     -- Error Code: %
      da:	64 0d 0a 1b 5b 33 37 6d 00                          d...[37m.

000000e3 <__c.4603>:
      e3:	53 65 6e 64 69 6e 67 20 54 65 73 74 20 50 61 67     Sending Test Pag
      f3:	65 20 28 25 64 20 62 79 74 65 73 29 2e 2e 2e 0d     e (%d bytes)....
     103:	0a 00                                               ..

00000105 <__c.4591>:
     105:	1b 5b 33 31 6d 44 65 76 20 45 6e 75 6d 20 45 72     .[31mDev Enum Er
     115:	72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     ror.. -- Error C
     125:	6f 64 65 20 25 64 0d 0a 20 2d 2d 20 53 75 62 20     ode %d.. -- Sub 
     135:	45 72 72 6f 72 20 43 6f 64 65 20 25 64 0d 0a 20     Error Code %d.. 
     145:	2d 2d 20 49 6e 20 53 74 61 74 65 20 25 64 0d 0a     -- In State %d..
     155:	1b 5b 33 37 6d 00                                   .[37m.

0000015b <__c.4583>:
     15b:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
     16b:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 
     17b:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

0000018a <__c.4571>:
     18a:	50 72 69 6e 74 65 72 20 45 6e 75 6d 65 72 61 74     Printer Enumerat
     19a:	65 64 2e 0d 0a 00                                   ed....

000001a0 <__c.4569>:
     1a0:	50 72 69 6e 74 65 72 20 44 65 76 69 63 65 20 49     Printer Device I
     1b0:	44 3a 20 25 73 0d 0a 00                             D: %s...

000001b8 <__c.4567>:
     1b8:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
     1c8:	6f 72 20 28 47 65 74 20 44 65 76 69 63 65 20 49     or (Get Device I
     1d8:	44 29 2e 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     D)... -- Error C
     1e8:	6f 64 65 3a 20 25 64 0d 0a 1b 5b 33 37 6d 00        ode: %d...[37m.

000001f7 <__c.4564>:
     1f7:	52 65 74 72 69 65 76 69 6e 67 20 44 65 76 69 63     Retrieving Devic
     207:	65 20 49 44 2e 2e 2e 0d 0a 00                       e ID......

00000211 <__c.4562>:
     211:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
     221:	6f 72 20 28 53 65 74 20 49 6e 74 65 72 66 61 63     or (Set Interfac
     231:	65 29 2e 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     e)... -- Error C
     241:	6f 64 65 3a 20 25 64 0d 0a 1b 5b 33 37 6d 00        ode: %d...[37m.

00000250 <__c.4560>:
     250:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
     260:	6f 72 20 28 53 65 74 20 43 6f 6e 66 69 67 75 72     or (Set Configur
     270:	61 74 69 6f 6e 29 2e 0d 0a 20 2d 2d 20 45 72 72     ation)... -- Err
     280:	6f 72 20 43 6f 64 65 3a 20 25 64 0d 0a 1b 5b 33     or Code: %d...[3
     290:	37 6d 00                                            7m.

00000293 <__c.4558>:
     293:	20 2d 2d 20 45 72 72 6f 72 20 43 6f 64 65 3a 20      -- Error Code: 
     2a3:	25 64 0d 0a 00                                      %d...

000002a8 <__c.4556>:
     2a8:	1b 5b 33 31 6d 49 6e 76 61 6c 69 64 20 44 65 76     .[31mInvalid Dev
     2b8:	69 63 65 2e 0d 0a 00                                ice....

000002bf <__c.4554>:
     2bf:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
     2cf:	6f 72 20 28 47 65 74 20 43 6f 6e 66 69 67 75 72     or (Get Configur
     2df:	61 74 69 6f 6e 29 2e 0d 0a 00                       ation)....

000002e9 <__c.4551>:
     2e9:	47 65 74 74 69 6e 67 20 43 6f 6e 66 69 67 20 44     Getting Config D
     2f9:	61 74 61 2e 0d 0a 00                                ata....

00000300 <__c.4546>:
     300:	1b 5b 33 32 6d 0d 0a 44 65 76 69 63 65 20 55 6e     .[32m..Device Un
     310:	61 74 74 61 63 68 65 64 2e 0d 0a 1b 5b 33 37 6d     attached....[37m
     320:	00                                                  .

00000321 <__c.4541>:
     321:	1b 5b 33 32 6d 44 65 76 69 63 65 20 41 74 74 61     .[32mDevice Atta
     331:	63 68 65 64 2e 0d 0a 1b 5b 33 37 6d 00              ched....[37m.

0000033e <__c.4527>:
     33e:	1b 5b 33 36 6d 50 72 69 6e 74 65 72 20 48 6f 73     .[36mPrinter Hos
     34e:	74 20 44 65 6d 6f 20 72 75 6e 6e 69 6e 67 2e 0d     t Demo running..
     35e:	0a 1b 5b 33 37 6d 00 00                             ..[37m..

00000366 <__ctors_end>:
     366:	11 24       	eor	r1, r1
     368:	1f be       	out	0x3f, r1	; 63
     36a:	cf ef       	ldi	r28, 0xFF	; 255
     36c:	d0 e2       	ldi	r29, 0x20	; 32
     36e:	de bf       	out	0x3e, r29	; 62
     370:	cd bf       	out	0x3d, r28	; 61

00000372 <__do_copy_data>:
     372:	11 e0       	ldi	r17, 0x01	; 1
     374:	a0 e0       	ldi	r26, 0x00	; 0
     376:	b1 e0       	ldi	r27, 0x01	; 1
     378:	e2 ed       	ldi	r30, 0xD2	; 210
     37a:	fb e1       	ldi	r31, 0x1B	; 27
     37c:	00 e0       	ldi	r16, 0x00	; 0
     37e:	0b bf       	out	0x3b, r16	; 59
     380:	02 c0       	rjmp	.+4      	; 0x386 <__do_copy_data+0x14>
     382:	07 90       	elpm	r0, Z+
     384:	0d 92       	st	X+, r0
     386:	aa 33       	cpi	r26, 0x3A	; 58
     388:	b1 07       	cpc	r27, r17
     38a:	d9 f7       	brne	.-10     	; 0x382 <__do_copy_data+0x10>

0000038c <__do_clear_bss>:
     38c:	11 e0       	ldi	r17, 0x01	; 1
     38e:	aa e3       	ldi	r26, 0x3A	; 58
     390:	b1 e0       	ldi	r27, 0x01	; 1
     392:	01 c0       	rjmp	.+2      	; 0x396 <.do_clear_bss_start>

00000394 <.do_clear_bss_loop>:
     394:	1d 92       	st	X+, r1

00000396 <.do_clear_bss_start>:
     396:	ae 35       	cpi	r26, 0x5E	; 94
     398:	b1 07       	cpc	r27, r17
     39a:	e1 f7       	brne	.-8      	; 0x394 <.do_clear_bss_loop>
     39c:	c6 d1       	rcall	.+908    	; 0x72a <main>
     39e:	0c 94 e7 0d 	jmp	0x1bce	; 0x1bce <_exit>

000003a2 <__bad_interrupt>:
     3a2:	2e ce       	rjmp	.-932    	; 0x0 <__vectors>

000003a4 <EVENT_USB_Host_DeviceEnumerationFailed>:
 *  enumerating an attached USB device.
 */
void EVENT_USB_Host_DeviceEnumerationFailed(const uint8_t ErrorCode,
                                            const uint8_t SubErrorCode)
{
	printf_P(PSTR(ESC_FG_RED "Dev Enum Error\r\n"
     3a4:	90 91 49 01 	lds	r25, 0x0149
     3a8:	2d b7       	in	r18, 0x3d	; 61
     3aa:	3e b7       	in	r19, 0x3e	; 62
     3ac:	28 50       	subi	r18, 0x08	; 8
     3ae:	30 40       	sbci	r19, 0x00	; 0
     3b0:	0f b6       	in	r0, 0x3f	; 63
     3b2:	f8 94       	cli
     3b4:	3e bf       	out	0x3e, r19	; 62
     3b6:	0f be       	out	0x3f, r0	; 63
     3b8:	2d bf       	out	0x3d, r18	; 61
     3ba:	ed b7       	in	r30, 0x3d	; 61
     3bc:	fe b7       	in	r31, 0x3e	; 62
     3be:	31 96       	adiw	r30, 0x01	; 1
     3c0:	25 e0       	ldi	r18, 0x05	; 5
     3c2:	31 e0       	ldi	r19, 0x01	; 1
     3c4:	ad b7       	in	r26, 0x3d	; 61
     3c6:	be b7       	in	r27, 0x3e	; 62
     3c8:	12 96       	adiw	r26, 0x02	; 2
     3ca:	3c 93       	st	X, r19
     3cc:	2e 93       	st	-X, r18
     3ce:	11 97       	sbiw	r26, 0x01	; 1
     3d0:	82 83       	std	Z+2, r24	; 0x02
     3d2:	13 82       	std	Z+3, r1	; 0x03
     3d4:	64 83       	std	Z+4, r22	; 0x04
     3d6:	15 82       	std	Z+5, r1	; 0x05
     3d8:	96 83       	std	Z+6, r25	; 0x06
     3da:	17 82       	std	Z+7, r1	; 0x07
     3dc:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <printf_P>
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     3e0:	8b b1       	in	r24, 0x0b	; 11
     3e2:	8f 70       	andi	r24, 0x0F	; 15
     3e4:	80 69       	ori	r24, 0x90	; 144
     3e6:	8b b9       	out	0x0b, r24	; 11
     3e8:	2d b7       	in	r18, 0x3d	; 61
     3ea:	3e b7       	in	r19, 0x3e	; 62
     3ec:	28 5f       	subi	r18, 0xF8	; 248
     3ee:	3f 4f       	sbci	r19, 0xFF	; 255
     3f0:	0f b6       	in	r0, 0x3f	; 63
     3f2:	f8 94       	cli
     3f4:	3e bf       	out	0x3e, r19	; 62
     3f6:	0f be       	out	0x3f, r0	; 63
     3f8:	2d bf       	out	0x3d, r18	; 61
	                         " -- Error Code %d\r\n"
	                         " -- Sub Error Code %d\r\n"
	                         " -- In State %d\r\n" ESC_FG_WHITE), ErrorCode, SubErrorCode, USB_HostState);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
}
     3fa:	08 95       	ret

000003fc <PrinterHost_Task>:

/** Task to manage an enumerated USB printer once connected, to display device
 *  information and print a test PCL page.
 */
void PrinterHost_Task(void)
{
     3fc:	ef 92       	push	r14
     3fe:	ff 92       	push	r15
     400:	0f 93       	push	r16
     402:	1f 93       	push	r17
     404:	df 93       	push	r29
     406:	cf 93       	push	r28
     408:	cd b7       	in	r28, 0x3d	; 61
     40a:	de b7       	in	r29, 0x3e	; 62
     40c:	a9 97       	sbiw	r28, 0x29	; 41
     40e:	0f b6       	in	r0, 0x3f	; 63
     410:	f8 94       	cli
     412:	de bf       	out	0x3e, r29	; 62
     414:	0f be       	out	0x3f, r0	; 63
     416:	cd bf       	out	0x3d, r28	; 61
	if (USB_HostState != HOST_STATE_Configured)
     418:	80 91 49 01 	lds	r24, 0x0149
     41c:	8b 30       	cpi	r24, 0x0B	; 11
     41e:	09 f0       	breq	.+2      	; 0x422 <PrinterHost_Task+0x26>
     420:	55 c0       	rjmp	.+170    	; 0x4cc <PrinterHost_Task+0xd0>
     422:	8b b1       	in	r24, 0x0b	; 11
     424:	8f 70       	andi	r24, 0x0F	; 15
     426:	80 62       	ori	r24, 0x20	; 32
     428:	8b b9       	out	0x0b, r24	; 11
	uint8_t ErrorCode;

	/* Indicate device busy via the status LEDs */
	LEDs_SetAllLEDs(LEDMASK_USB_BUSY);

	char  TestPageData[]    = "\033%-12345X\033E" "LUFA PCL Test Page" "\033E\033%-12345X";
     42a:	de 01       	movw	r26, r28
     42c:	11 96       	adiw	r26, 0x01	; 1
     42e:	e0 e0       	ldi	r30, 0x00	; 0
     430:	f1 e0       	ldi	r31, 0x01	; 1
     432:	89 e2       	ldi	r24, 0x29	; 41
     434:	01 90       	ld	r0, Z+
     436:	0d 92       	st	X+, r0
     438:	81 50       	subi	r24, 0x01	; 1
     43a:	e1 f7       	brne	.-8      	; 0x434 <PrinterHost_Task+0x38>
	uint16_t TestPageLength = strlen(TestPageData);
     43c:	7e 01       	movw	r14, r28
     43e:	08 94       	sec
     440:	e1 1c       	adc	r14, r1
     442:	f1 1c       	adc	r15, r1
     444:	d7 01       	movw	r26, r14
     446:	0d 90       	ld	r0, X+
     448:	00 20       	and	r0, r0
     44a:	e9 f7       	brne	.-6      	; 0x446 <PrinterHost_Task+0x4a>
     44c:	8d 01       	movw	r16, r26
     44e:	01 50       	subi	r16, 0x01	; 1
     450:	10 40       	sbci	r17, 0x00	; 0
     452:	0e 19       	sub	r16, r14
     454:	1f 09       	sbc	r17, r15

	printf_P(PSTR("Sending Test Page (%d bytes)...\r\n"), TestPageLength);
     456:	00 d0       	rcall	.+0      	; 0x458 <PrinterHost_Task+0x5c>
     458:	00 d0       	rcall	.+0      	; 0x45a <PrinterHost_Task+0x5e>
     45a:	83 ee       	ldi	r24, 0xE3	; 227
     45c:	90 e0       	ldi	r25, 0x00	; 0
     45e:	ed b7       	in	r30, 0x3d	; 61
     460:	fe b7       	in	r31, 0x3e	; 62
     462:	92 83       	std	Z+2, r25	; 0x02
     464:	81 83       	std	Z+1, r24	; 0x01
     466:	14 83       	std	Z+4, r17	; 0x04
     468:	03 83       	std	Z+3, r16	; 0x03
     46a:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <printf_P>

	/* Send the test page to the attached printer */
	if ((ErrorCode = Printer_SendData(&TestPageData, TestPageLength)) != PIPE_RWSTREAM_NoError)
     46e:	0f 90       	pop	r0
     470:	0f 90       	pop	r0
     472:	0f 90       	pop	r0
     474:	0f 90       	pop	r0
     476:	c7 01       	movw	r24, r14
     478:	b8 01       	movw	r22, r16
     47a:	76 d2       	rcall	.+1260   	; 0x968 <Printer_SendData>
     47c:	28 2f       	mov	r18, r24
     47e:	88 23       	and	r24, r24
     480:	d1 f0       	breq	.+52     	; 0x4b6 <PrinterHost_Task+0xba>
	{
		printf_P(PSTR(ESC_FG_RED "Error Sending Test Page.\r\n"
     482:	00 d0       	rcall	.+0      	; 0x484 <PrinterHost_Task+0x88>
     484:	00 d0       	rcall	.+0      	; 0x486 <PrinterHost_Task+0x8a>
     486:	ed b7       	in	r30, 0x3d	; 61
     488:	fe b7       	in	r31, 0x3e	; 62
     48a:	31 96       	adiw	r30, 0x01	; 1
     48c:	8a ea       	ldi	r24, 0xAA	; 170
     48e:	90 e0       	ldi	r25, 0x00	; 0
     490:	ad b7       	in	r26, 0x3d	; 61
     492:	be b7       	in	r27, 0x3e	; 62
     494:	12 96       	adiw	r26, 0x02	; 2
     496:	9c 93       	st	X, r25
     498:	8e 93       	st	-X, r24
     49a:	11 97       	sbiw	r26, 0x01	; 1
     49c:	22 83       	std	Z+2, r18	; 0x02
     49e:	13 82       	std	Z+3, r1	; 0x03
     4a0:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <printf_P>
     4a4:	8b b1       	in	r24, 0x0b	; 11
     4a6:	8f 70       	andi	r24, 0x0F	; 15
     4a8:	80 69       	ori	r24, 0x90	; 144
     4aa:	8b b9       	out	0x0b, r24	; 11
		                         " -- Error Code: %d\r\n" ESC_FG_WHITE), ErrorCode);

		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		USB_Host_SetDeviceConfiguration(0);
     4ac:	0f 90       	pop	r0
     4ae:	0f 90       	pop	r0
     4b0:	0f 90       	pop	r0
     4b2:	0f 90       	pop	r0
     4b4:	08 c0       	rjmp	.+16     	; 0x4c6 <PrinterHost_Task+0xca>
		return;
	}

	puts_P(PSTR("Test Page Sent.\r\n"));
     4b6:	88 e9       	ldi	r24, 0x98	; 152
     4b8:	90 e0       	ldi	r25, 0x00	; 0
     4ba:	0e 94 10 0b 	call	0x1620	; 0x1620 <puts_P>
     4be:	8b b1       	in	r24, 0x0b	; 11
     4c0:	8f 70       	andi	r24, 0x0F	; 15
     4c2:	80 66       	ori	r24, 0x60	; 96
     4c4:	8b b9       	out	0x0b, r24	; 11

	/* Indicate device no longer busy */
	LEDs_SetAllLEDs(LEDMASK_USB_READY);	
	USB_Host_SetDeviceConfiguration(0);
     4c6:	80 e0       	ldi	r24, 0x00	; 0
     4c8:	0e 94 88 0a 	call	0x1510	; 0x1510 <USB_Host_SetDeviceConfiguration>
}
     4cc:	a9 96       	adiw	r28, 0x29	; 41
     4ce:	0f b6       	in	r0, 0x3f	; 63
     4d0:	f8 94       	cli
     4d2:	de bf       	out	0x3e, r29	; 62
     4d4:	0f be       	out	0x3f, r0	; 63
     4d6:	cd bf       	out	0x3d, r28	; 61
     4d8:	cf 91       	pop	r28
     4da:	df 91       	pop	r29
     4dc:	1f 91       	pop	r17
     4de:	0f 91       	pop	r16
     4e0:	ff 90       	pop	r15
     4e2:	ef 90       	pop	r14
     4e4:	08 95       	ret

000004e6 <EVENT_USB_Host_DeviceUnattached>:
/** Event handler for the USB_DeviceUnattached event. This indicates that a device has been removed from the host, and
 *  stops the library USB task management process.
 */
void EVENT_USB_Host_DeviceUnattached(void)
{
	puts_P(PSTR(ESC_FG_GREEN "\r\nDevice Unattached.\r\n" ESC_FG_WHITE));
     4e6:	80 e0       	ldi	r24, 0x00	; 0
     4e8:	93 e0       	ldi	r25, 0x03	; 3
     4ea:	0e 94 10 0b 	call	0x1620	; 0x1620 <puts_P>
     4ee:	8b b1       	in	r24, 0x0b	; 11
     4f0:	8f 70       	andi	r24, 0x0F	; 15
     4f2:	80 61       	ori	r24, 0x10	; 16
     4f4:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
}
     4f6:	08 95       	ret

000004f8 <EVENT_USB_Host_DeviceAttached>:
/** Event handler for the USB_DeviceAttached event. This indicates that a device has been attached to the host, and
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Host_DeviceAttached(void)
{
	puts_P(PSTR(ESC_FG_GREEN "Device Attached.\r\n" ESC_FG_WHITE));
     4f8:	81 e2       	ldi	r24, 0x21	; 33
     4fa:	93 e0       	ldi	r25, 0x03	; 3
     4fc:	0e 94 10 0b 	call	0x1620	; 0x1620 <puts_P>
     500:	8b b1       	in	r24, 0x0b	; 11
     502:	8f 70       	andi	r24, 0x0F	; 15
     504:	80 6a       	ori	r24, 0xA0	; 160
     506:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
}
     508:	08 95       	ret

0000050a <EVENT_USB_Host_HostError>:
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
}

/** Event handler for the USB_HostError event. This indicates that a hardware error occurred while in host mode. */
void EVENT_USB_Host_HostError(const uint8_t ErrorCode)
{
     50a:	1f 93       	push	r17
     50c:	18 2f       	mov	r17, r24
	USB_Disable();
     50e:	0b d5       	rcall	.+2582   	; 0xf26 <USB_Disable>

	printf_P(PSTR(ESC_FG_RED "Host Mode Error\r\n"
     510:	00 d0       	rcall	.+0      	; 0x512 <EVENT_USB_Host_HostError+0x8>
     512:	00 d0       	rcall	.+0      	; 0x514 <EVENT_USB_Host_HostError+0xa>
     514:	ed b7       	in	r30, 0x3d	; 61
     516:	fe b7       	in	r31, 0x3e	; 62
     518:	31 96       	adiw	r30, 0x01	; 1
     51a:	8b e5       	ldi	r24, 0x5B	; 91
     51c:	91 e0       	ldi	r25, 0x01	; 1
     51e:	ad b7       	in	r26, 0x3d	; 61
     520:	be b7       	in	r27, 0x3e	; 62
     522:	12 96       	adiw	r26, 0x02	; 2
     524:	9c 93       	st	X, r25
     526:	8e 93       	st	-X, r24
     528:	11 97       	sbiw	r26, 0x01	; 1
     52a:	12 83       	std	Z+2, r17	; 0x02
     52c:	13 82       	std	Z+3, r1	; 0x03
     52e:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <printf_P>
     532:	8b b1       	in	r24, 0x0b	; 11
     534:	8f 70       	andi	r24, 0x0F	; 15
     536:	80 69       	ori	r24, 0x90	; 144
     538:	8b b9       	out	0x0b, r24	; 11
     53a:	0f 90       	pop	r0
     53c:	0f 90       	pop	r0
     53e:	0f 90       	pop	r0
     540:	0f 90       	pop	r0
     542:	ff cf       	rjmp	.-2      	; 0x542 <EVENT_USB_Host_HostError+0x38>

00000544 <EVENT_USB_Host_DeviceEnumerationComplete>:

/** Event handler for the USB_DeviceEnumerationComplete event. This indicates that a device has been successfully
 *  enumerated by the host and is now ready to be used by the application.
 */
void EVENT_USB_Host_DeviceEnumerationComplete(void)
{
     544:	0f 93       	push	r16
     546:	1f 93       	push	r17
     548:	df 93       	push	r29
     54a:	cf 93       	push	r28
     54c:	cd b7       	in	r28, 0x3d	; 61
     54e:	de b7       	in	r29, 0x3e	; 62
     550:	cc 52       	subi	r28, 0x2C	; 44
     552:	d1 40       	sbci	r29, 0x01	; 1
     554:	0f b6       	in	r0, 0x3f	; 63
     556:	f8 94       	cli
     558:	de bf       	out	0x3e, r29	; 62
     55a:	0f be       	out	0x3f, r0	; 63
     55c:	cd bf       	out	0x3d, r28	; 61
	puts_P(PSTR("Getting Config Data.\r\n"));
     55e:	89 ee       	ldi	r24, 0xE9	; 233
     560:	92 e0       	ldi	r25, 0x02	; 2
     562:	0e 94 10 0b 	call	0x1620	; 0x1620 <puts_P>

	uint8_t ErrorCode;

	/* Get and process the configuration descriptor data */
	if ((ErrorCode = ProcessConfigurationDescriptor()) != SuccessfulConfigRead)
     566:	0e d1       	rcall	.+540    	; 0x784 <ProcessConfigurationDescriptor>
     568:	18 2f       	mov	r17, r24
     56a:	88 23       	and	r24, r24
     56c:	c1 f0       	breq	.+48     	; 0x59e <EVENT_USB_Host_DeviceEnumerationComplete+0x5a>
	{
		if (ErrorCode == ControlError)
     56e:	81 30       	cpi	r24, 0x01	; 1
     570:	19 f4       	brne	.+6      	; 0x578 <EVENT_USB_Host_DeviceEnumerationComplete+0x34>
		  puts_P(PSTR(ESC_FG_RED "Control Error (Get Configuration).\r\n"));
     572:	8f eb       	ldi	r24, 0xBF	; 191
     574:	92 e0       	ldi	r25, 0x02	; 2
     576:	02 c0       	rjmp	.+4      	; 0x57c <EVENT_USB_Host_DeviceEnumerationComplete+0x38>
		else
		  puts_P(PSTR(ESC_FG_RED "Invalid Device.\r\n"));
     578:	88 ea       	ldi	r24, 0xA8	; 168
     57a:	92 e0       	ldi	r25, 0x02	; 2
     57c:	0e 94 10 0b 	call	0x1620	; 0x1620 <puts_P>

		printf_P(PSTR(" -- Error Code: %d\r\n"), ErrorCode);
     580:	00 d0       	rcall	.+0      	; 0x582 <EVENT_USB_Host_DeviceEnumerationComplete+0x3e>
     582:	00 d0       	rcall	.+0      	; 0x584 <EVENT_USB_Host_DeviceEnumerationComplete+0x40>
     584:	ed b7       	in	r30, 0x3d	; 61
     586:	fe b7       	in	r31, 0x3e	; 62
     588:	31 96       	adiw	r30, 0x01	; 1
     58a:	83 e9       	ldi	r24, 0x93	; 147
     58c:	92 e0       	ldi	r25, 0x02	; 2
     58e:	ad b7       	in	r26, 0x3d	; 61
     590:	be b7       	in	r27, 0x3e	; 62
     592:	12 96       	adiw	r26, 0x02	; 2
     594:	9c 93       	st	X, r25
     596:	8e 93       	st	-X, r24
     598:	11 97       	sbiw	r26, 0x01	; 1
     59a:	12 83       	std	Z+2, r17	; 0x02
     59c:	13 c0       	rjmp	.+38     	; 0x5c4 <EVENT_USB_Host_DeviceEnumerationComplete+0x80>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	/* Set the device configuration to the first configuration (rarely do devices use multiple configurations) */
	if ((ErrorCode = USB_Host_SetDeviceConfiguration(1)) != HOST_SENDCONTROL_Successful)
     59e:	81 e0       	ldi	r24, 0x01	; 1
     5a0:	b7 d7       	rcall	.+3950   	; 0x1510 <USB_Host_SetDeviceConfiguration>
     5a2:	28 2f       	mov	r18, r24
     5a4:	88 23       	and	r24, r24
     5a6:	d1 f0       	breq	.+52     	; 0x5dc <EVENT_USB_Host_DeviceEnumerationComplete+0x98>
	{
		printf_P(PSTR(ESC_FG_RED "Control Error (Set Configuration).\r\n"
     5a8:	00 d0       	rcall	.+0      	; 0x5aa <EVENT_USB_Host_DeviceEnumerationComplete+0x66>
     5aa:	00 d0       	rcall	.+0      	; 0x5ac <EVENT_USB_Host_DeviceEnumerationComplete+0x68>
     5ac:	ed b7       	in	r30, 0x3d	; 61
     5ae:	fe b7       	in	r31, 0x3e	; 62
     5b0:	31 96       	adiw	r30, 0x01	; 1
     5b2:	80 e5       	ldi	r24, 0x50	; 80
     5b4:	92 e0       	ldi	r25, 0x02	; 2
     5b6:	ad b7       	in	r26, 0x3d	; 61
     5b8:	be b7       	in	r27, 0x3e	; 62
     5ba:	12 96       	adiw	r26, 0x02	; 2
     5bc:	9c 93       	st	X, r25
     5be:	8e 93       	st	-X, r24
     5c0:	11 97       	sbiw	r26, 0x01	; 1
     5c2:	22 83       	std	Z+2, r18	; 0x02
     5c4:	13 82       	std	Z+3, r1	; 0x03
     5c6:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <printf_P>
     5ca:	8b b1       	in	r24, 0x0b	; 11
     5cc:	8f 70       	andi	r24, 0x0F	; 15
     5ce:	80 69       	ori	r24, 0x90	; 144
     5d0:	8b b9       	out	0x0b, r24	; 11
     5d2:	0f 90       	pop	r0
     5d4:	0f 90       	pop	r0
     5d6:	0f 90       	pop	r0
     5d8:	0f 90       	pop	r0
     5da:	51 c0       	rjmp	.+162    	; 0x67e <EVENT_USB_Host_DeviceEnumerationComplete+0x13a>
		return;
	}

	/* Some printers use alternate settings to determine the communication protocol used - if so, send a SetInterface
	 * request to switch to the interface alternate setting with the Bidirectional protocol */
	if (PrinterAltSetting)
     5dc:	60 91 3d 01 	lds	r22, 0x013D
     5e0:	66 23       	and	r22, r22
     5e2:	71 f0       	breq	.+28     	; 0x600 <EVENT_USB_Host_DeviceEnumerationComplete+0xbc>
	{
		if ((ErrorCode = USB_Host_SetInterfaceAltSetting(PrinterInterfaceNumber, PrinterAltSetting)) != HOST_SENDCONTROL_Successful)
     5e4:	80 91 3e 01 	lds	r24, 0x013E
     5e8:	7c d7       	rcall	.+3832   	; 0x14e2 <USB_Host_SetInterfaceAltSetting>
     5ea:	28 2f       	mov	r18, r24
     5ec:	88 23       	and	r24, r24
     5ee:	41 f0       	breq	.+16     	; 0x600 <EVENT_USB_Host_DeviceEnumerationComplete+0xbc>
		{
			printf_P(PSTR(ESC_FG_RED "Control Error (Set Interface).\r\n"
     5f0:	00 d0       	rcall	.+0      	; 0x5f2 <EVENT_USB_Host_DeviceEnumerationComplete+0xae>
     5f2:	00 d0       	rcall	.+0      	; 0x5f4 <EVENT_USB_Host_DeviceEnumerationComplete+0xb0>
     5f4:	ed b7       	in	r30, 0x3d	; 61
     5f6:	fe b7       	in	r31, 0x3e	; 62
     5f8:	31 96       	adiw	r30, 0x01	; 1
     5fa:	81 e1       	ldi	r24, 0x11	; 17
     5fc:	92 e0       	ldi	r25, 0x02	; 2
     5fe:	15 c0       	rjmp	.+42     	; 0x62a <EVENT_USB_Host_DeviceEnumerationComplete+0xe6>
			USB_Host_SetDeviceConfiguration(0);
			return;
		}
	}

	puts_P(PSTR("Retrieving Device ID...\r\n"));
     600:	87 ef       	ldi	r24, 0xF7	; 247
     602:	91 e0       	ldi	r25, 0x01	; 1
     604:	0e 94 10 0b 	call	0x1620	; 0x1620 <puts_P>

	char DeviceIDString[300];
	if ((ErrorCode = Printer_GetDeviceID(DeviceIDString, sizeof(DeviceIDString))) != HOST_SENDCONTROL_Successful)
     608:	8e 01       	movw	r16, r28
     60a:	0f 5f       	subi	r16, 0xFF	; 255
     60c:	1f 4f       	sbci	r17, 0xFF	; 255
     60e:	c8 01       	movw	r24, r16
     610:	6c e2       	ldi	r22, 0x2C	; 44
     612:	71 e0       	ldi	r23, 0x01	; 1
     614:	49 d1       	rcall	.+658    	; 0x8a8 <Printer_GetDeviceID>
     616:	28 2f       	mov	r18, r24
     618:	88 23       	and	r24, r24
     61a:	d9 f0       	breq	.+54     	; 0x652 <EVENT_USB_Host_DeviceEnumerationComplete+0x10e>
	{
		printf_P(PSTR(ESC_FG_RED "Control Error (Get Device ID).\r\n"
     61c:	00 d0       	rcall	.+0      	; 0x61e <EVENT_USB_Host_DeviceEnumerationComplete+0xda>
     61e:	00 d0       	rcall	.+0      	; 0x620 <EVENT_USB_Host_DeviceEnumerationComplete+0xdc>
     620:	ed b7       	in	r30, 0x3d	; 61
     622:	fe b7       	in	r31, 0x3e	; 62
     624:	31 96       	adiw	r30, 0x01	; 1
     626:	88 eb       	ldi	r24, 0xB8	; 184
     628:	91 e0       	ldi	r25, 0x01	; 1
     62a:	ad b7       	in	r26, 0x3d	; 61
     62c:	be b7       	in	r27, 0x3e	; 62
     62e:	12 96       	adiw	r26, 0x02	; 2
     630:	9c 93       	st	X, r25
     632:	8e 93       	st	-X, r24
     634:	11 97       	sbiw	r26, 0x01	; 1
     636:	22 83       	std	Z+2, r18	; 0x02
     638:	13 82       	std	Z+3, r1	; 0x03
     63a:	d0 d7       	rcall	.+4000   	; 0x15dc <printf_P>
     63c:	8b b1       	in	r24, 0x0b	; 11
     63e:	8f 70       	andi	r24, 0x0F	; 15
     640:	80 69       	ori	r24, 0x90	; 144
     642:	8b b9       	out	0x0b, r24	; 11
		                         " -- Error Code: %d\r\n" ESC_FG_WHITE), ErrorCode);

		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		USB_Host_SetDeviceConfiguration(0);
     644:	0f 90       	pop	r0
     646:	0f 90       	pop	r0
     648:	0f 90       	pop	r0
     64a:	0f 90       	pop	r0
     64c:	80 e0       	ldi	r24, 0x00	; 0
     64e:	60 d7       	rcall	.+3776   	; 0x1510 <USB_Host_SetDeviceConfiguration>
     650:	16 c0       	rjmp	.+44     	; 0x67e <EVENT_USB_Host_DeviceEnumerationComplete+0x13a>
		return;
	}

	printf_P(PSTR("Printer Device ID: %s\r\n"), DeviceIDString);
     652:	00 d0       	rcall	.+0      	; 0x654 <EVENT_USB_Host_DeviceEnumerationComplete+0x110>
     654:	00 d0       	rcall	.+0      	; 0x656 <EVENT_USB_Host_DeviceEnumerationComplete+0x112>
     656:	80 ea       	ldi	r24, 0xA0	; 160
     658:	91 e0       	ldi	r25, 0x01	; 1
     65a:	ed b7       	in	r30, 0x3d	; 61
     65c:	fe b7       	in	r31, 0x3e	; 62
     65e:	92 83       	std	Z+2, r25	; 0x02
     660:	81 83       	std	Z+1, r24	; 0x01
     662:	14 83       	std	Z+4, r17	; 0x04
     664:	03 83       	std	Z+3, r16	; 0x03
     666:	ba d7       	rcall	.+3956   	; 0x15dc <printf_P>

	puts_P(PSTR("Printer Enumerated.\r\n"));
     668:	0f 90       	pop	r0
     66a:	0f 90       	pop	r0
     66c:	0f 90       	pop	r0
     66e:	0f 90       	pop	r0
     670:	8a e8       	ldi	r24, 0x8A	; 138
     672:	91 e0       	ldi	r25, 0x01	; 1
     674:	d5 d7       	rcall	.+4010   	; 0x1620 <puts_P>
     676:	8b b1       	in	r24, 0x0b	; 11
     678:	8f 70       	andi	r24, 0x0F	; 15
     67a:	80 66       	ori	r24, 0x60	; 96
     67c:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
}
     67e:	c4 5d       	subi	r28, 0xD4	; 212
     680:	de 4f       	sbci	r29, 0xFE	; 254
     682:	0f b6       	in	r0, 0x3f	; 63
     684:	f8 94       	cli
     686:	de bf       	out	0x3e, r29	; 62
     688:	0f be       	out	0x3f, r0	; 63
     68a:	cd bf       	out	0x3d, r28	; 61
     68c:	cf 91       	pop	r28
     68e:	df 91       	pop	r29
     690:	1f 91       	pop	r17
     692:	0f 91       	pop	r16
     694:	08 95       	ret

00000696 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     696:	84 b7       	in	r24, 0x34	; 52
     698:	87 7f       	andi	r24, 0xF7	; 247
     69a:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     69c:	38 e1       	ldi	r19, 0x18	; 24
     69e:	0f b6       	in	r0, 0x3f	; 63
     6a0:	f8 94       	cli
     6a2:	30 93 60 00 	sts	0x0060, r19
     6a6:	10 92 60 00 	sts	0x0060, r1
     6aa:	0f be       	out	0x3f, r0	; 63

	/* Disable clock division */
	clock_prescale_set(clock_div_1);
     6ac:	80 e0       	ldi	r24, 0x00	; 0
     6ae:	90 e0       	ldi	r25, 0x00	; 0
     6b0:	20 e8       	ldi	r18, 0x80	; 128
     6b2:	0f b6       	in	r0, 0x3f	; 63
     6b4:	f8 94       	cli
     6b6:	20 93 61 00 	sts	0x0061, r18
     6ba:	80 93 61 00 	sts	0x0061, r24
     6be:	0f be       	out	0x3f, r0	; 63
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     6c0:	83 e3       	ldi	r24, 0x33	; 51
     6c2:	90 e0       	ldi	r25, 0x00	; 0
     6c4:	90 93 cd 00 	sts	0x00CD, r25
     6c8:	80 93 cc 00 	sts	0x00CC, r24

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     6cc:	86 e0       	ldi	r24, 0x06	; 6
     6ce:	80 93 ca 00 	sts	0x00CA, r24
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     6d2:	10 92 c8 00 	sts	0x00C8, r1
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     6d6:	30 93 c9 00 	sts	0x00C9, r19

				DDRD  |= (1 << 3);
     6da:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     6dc:	5a 9a       	sbi	0x0b, 2	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     6de:	8a b1       	in	r24, 0x0a	; 10
     6e0:	80 6f       	ori	r24, 0xF0	; 240
     6e2:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     6e4:	8b b1       	in	r24, 0x0b	; 11
     6e6:	8f 70       	andi	r24, 0x0F	; 15
     6e8:	8b b9       	out	0x0b, r24	; 11

	/* Hardware Initialization */
	Serial_Init(9600, false);
	LEDs_Init();
	USB_Init();
     6ea:	14 d4       	rcall	.+2088   	; 0xf14 <USB_Init>
			static inline void Serial_CreateStream(FILE* Stream)
			{
				if (!(Stream))
				{
					Stream = &USARTSerialStream;
					stdin  = Stream;
     6ec:	ea e4       	ldi	r30, 0x4A	; 74
     6ee:	f1 e0       	ldi	r31, 0x01	; 1
     6f0:	f0 93 59 01 	sts	0x0159, r31
     6f4:	e0 93 58 01 	sts	0x0158, r30
					stdout = Stream;
     6f8:	f0 93 5b 01 	sts	0x015B, r31
     6fc:	e0 93 5a 01 	sts	0x015A, r30
				}
			
				*Stream = (FILE)FDEV_SETUP_STREAM(Serial_putchar, Serial_getchar, _FDEV_SETUP_RW);
     700:	8e e0       	ldi	r24, 0x0E	; 14
     702:	df 01       	movw	r26, r30
     704:	1d 92       	st	X+, r1
     706:	8a 95       	dec	r24
     708:	e9 f7       	brne	.-6      	; 0x704 <SetupHardware+0x6e>
     70a:	83 e0       	ldi	r24, 0x03	; 3
     70c:	80 93 4d 01 	sts	0x014D, r24
     710:	8f eb       	ldi	r24, 0xBF	; 191
     712:	9a e0       	ldi	r25, 0x0A	; 10
     714:	90 93 53 01 	sts	0x0153, r25
     718:	80 93 52 01 	sts	0x0152, r24
     71c:	89 ec       	ldi	r24, 0xC9	; 201
     71e:	9a e0       	ldi	r25, 0x0A	; 10
     720:	90 93 55 01 	sts	0x0155, r25
     724:	80 93 54 01 	sts	0x0154, r24

	/* Create a stdio stream for the serial port for stdin and stdout */
	Serial_CreateStream(NULL);
}
     728:	08 95       	ret

0000072a <main>:
/** Main program entry point. This routine configures the hardware required by the application, then
 *  enters a loop to run the application tasks in sequence.
 */
int main(void)
{
	SetupHardware();
     72a:	b5 df       	rcall	.-150    	; 0x696 <SetupHardware>
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     72c:	8b b1       	in	r24, 0x0b	; 11
     72e:	8f 70       	andi	r24, 0x0F	; 15
     730:	80 61       	ori	r24, 0x10	; 16
     732:	8b b9       	out	0x0b, r24	; 11

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);

	puts_P(PSTR(ESC_FG_CYAN "Printer Host Demo running.\r\n" ESC_FG_WHITE));
     734:	8e e3       	ldi	r24, 0x3E	; 62
     736:	93 e0       	ldi	r25, 0x03	; 3
     738:	73 d7       	rcall	.+3814   	; 0x1620 <puts_P>
	sei();
     73a:	78 94       	sei

	for (;;)
	{
		PrinterHost_Task();
     73c:	5f de       	rcall	.-834    	; 0x3fc <PrinterHost_Task>

		USB_USBTask();
     73e:	0d d7       	rcall	.+3610   	; 0x155a <USB_USBTask>
     740:	fd cf       	rjmp	.-6      	; 0x73c <main+0x12>

00000742 <DComp_NextBidirectionalPrinterInterface>:
 *  aborting the search if the end of the descriptors is found.
 *
 *  \return A value from the DSEARCH_Return_ErrorCodes_t enum
 */
uint8_t DComp_NextBidirectionalPrinterInterface(void* CurrentDescriptor)
{
     742:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
     744:	81 81       	ldd	r24, Z+1	; 0x01
     746:	84 30       	cpi	r24, 0x04	; 4
     748:	59 f4       	brne	.+22     	; 0x760 <DComp_NextBidirectionalPrinterInterface+0x1e>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		/* Check the descriptor class, subclass and protocol, break out if correct value interface found */
		if ((Interface->Class    == PRNT_CSCP_PrinterClass)    &&
     74a:	85 81       	ldd	r24, Z+5	; 0x05
     74c:	87 30       	cpi	r24, 0x07	; 7
     74e:	41 f4       	brne	.+16     	; 0x760 <DComp_NextBidirectionalPrinterInterface+0x1e>
     750:	86 81       	ldd	r24, Z+6	; 0x06
     752:	81 30       	cpi	r24, 0x01	; 1
     754:	29 f4       	brne	.+10     	; 0x760 <DComp_NextBidirectionalPrinterInterface+0x1e>
     756:	87 81       	ldd	r24, Z+7	; 0x07
     758:	82 30       	cpi	r24, 0x02	; 2
     75a:	11 f4       	brne	.+4      	; 0x760 <DComp_NextBidirectionalPrinterInterface+0x1e>
     75c:	80 e0       	ldi	r24, 0x00	; 0
     75e:	08 95       	ret
     760:	82 e0       	ldi	r24, 0x02	; 2
			return DESCRIPTOR_SEARCH_Found;
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
     762:	08 95       	ret

00000764 <DComp_NextPrinterInterfaceBulkDataEndpoint>:
 *  search if another interface descriptor is found before the next endpoint.
 *
 *  \return A value from the DSEARCH_Return_ErrorCodes_t enum
 */
uint8_t DComp_NextPrinterInterfaceBulkDataEndpoint(void* CurrentDescriptor)
{
     764:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Endpoint)
     766:	81 81       	ldd	r24, Z+1	; 0x01
     768:	85 30       	cpi	r24, 0x05	; 5
     76a:	31 f4       	brne	.+12     	; 0x778 <DComp_NextPrinterInterfaceBulkDataEndpoint+0x14>
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		/* Check the endpoint type, break out if correct BULK type endpoint found */
		if ((Endpoint->Attributes & EP_TYPE_MASK) == EP_TYPE_BULK)
     76c:	83 81       	ldd	r24, Z+3	; 0x03
     76e:	83 70       	andi	r24, 0x03	; 3
     770:	82 30       	cpi	r24, 0x02	; 2
     772:	31 f4       	brne	.+12     	; 0x780 <DComp_NextPrinterInterfaceBulkDataEndpoint+0x1c>
     774:	80 e0       	ldi	r24, 0x00	; 0
     776:	08 95       	ret
		  return DESCRIPTOR_SEARCH_Found;
	}
	else if (Header->Type == DTYPE_Interface)
     778:	84 30       	cpi	r24, 0x04	; 4
     77a:	11 f4       	brne	.+4      	; 0x780 <DComp_NextPrinterInterfaceBulkDataEndpoint+0x1c>
     77c:	81 e0       	ldi	r24, 0x01	; 1
     77e:	08 95       	ret
     780:	82 e0       	ldi	r24, 0x02	; 2
	{
		return DESCRIPTOR_SEARCH_Fail;
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
     782:	08 95       	ret

00000784 <ProcessConfigurationDescriptor>:
 *  This routine searches for a bidirectional Printer interface descriptor containing bulk IN and OUT data endpoints.
 *
 *  \return An error code from the \ref PrinterHost_GetConfigDescriptorDataCodes_t enum.
 */
uint8_t ProcessConfigurationDescriptor(void)
{
     784:	8f 92       	push	r8
     786:	9f 92       	push	r9
     788:	af 92       	push	r10
     78a:	bf 92       	push	r11
     78c:	cf 92       	push	r12
     78e:	df 92       	push	r13
     790:	ef 92       	push	r14
     792:	ff 92       	push	r15
     794:	0f 93       	push	r16
     796:	1f 93       	push	r17
     798:	df 93       	push	r29
     79a:	cf 93       	push	r28
     79c:	cd b7       	in	r28, 0x3d	; 61
     79e:	de b7       	in	r29, 0x3e	; 62
     7a0:	c4 50       	subi	r28, 0x04	; 4
     7a2:	d2 40       	sbci	r29, 0x02	; 2
     7a4:	0f b6       	in	r0, 0x3f	; 63
     7a6:	f8 94       	cli
     7a8:	de bf       	out	0x3e, r29	; 62
     7aa:	0f be       	out	0x3f, r0	; 63
     7ac:	cd bf       	out	0x3d, r28	; 61
	uint8_t  ConfigDescriptorData[512];
	void*    CurrConfigLocation = ConfigDescriptorData;
     7ae:	ae 01       	movw	r20, r28
     7b0:	4b 5f       	subi	r20, 0xFB	; 251
     7b2:	5f 4f       	sbci	r21, 0xFF	; 255
     7b4:	5a 83       	std	Y+2, r21	; 0x02
     7b6:	49 83       	std	Y+1, r20	; 0x01
	USB_Descriptor_Interface_t* PrinterInterface = NULL;
	USB_Descriptor_Endpoint_t*  DataINEndpoint   = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint  = NULL;

	/* Retrieve the entire configuration descriptor into the allocated buffer */
	switch (USB_Host_GetDeviceConfigDescriptor(1, &CurrConfigBytesRem, ConfigDescriptorData, sizeof(ConfigDescriptorData)))
     7b8:	83 e0       	ldi	r24, 0x03	; 3
     7ba:	a8 2e       	mov	r10, r24
     7bc:	b1 2c       	mov	r11, r1
     7be:	ac 0e       	add	r10, r28
     7c0:	bd 1e       	adc	r11, r29
     7c2:	81 e0       	ldi	r24, 0x01	; 1
     7c4:	b5 01       	movw	r22, r10
     7c6:	20 e0       	ldi	r18, 0x00	; 0
     7c8:	32 e0       	ldi	r19, 0x02	; 2
     7ca:	00 d5       	rcall	.+2560   	; 0x11cc <USB_Host_GetDeviceConfigDescriptor>
     7cc:	85 30       	cpi	r24, 0x05	; 5
     7ce:	29 f0       	breq	.+10     	; 0x7da <ProcessConfigurationDescriptor+0x56>
     7d0:	86 30       	cpi	r24, 0x06	; 6
     7d2:	89 f0       	breq	.+34     	; 0x7f6 <ProcessConfigurationDescriptor+0x72>
     7d4:	88 23       	and	r24, r24
     7d6:	19 f0       	breq	.+6      	; 0x7de <ProcessConfigurationDescriptor+0x5a>
     7d8:	10 c0       	rjmp	.+32     	; 0x7fa <ProcessConfigurationDescriptor+0x76>
     7da:	82 e0       	ldi	r24, 0x02	; 2
     7dc:	51 c0       	rjmp	.+162    	; 0x880 <ProcessConfigurationDescriptor+0xfc>
     7de:	00 e0       	ldi	r16, 0x00	; 0
     7e0:	10 e0       	ldi	r17, 0x00	; 0
     7e2:	ee 24       	eor	r14, r14
     7e4:	ff 24       	eor	r15, r15
     7e6:	cc 24       	eor	r12, r12
     7e8:	dd 24       	eor	r13, r13
	}

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(PrinterInterface) ||
     7ea:	45 01       	movw	r8, r10
     7ec:	5e 01       	movw	r10, r28
     7ee:	08 94       	sec
     7f0:	a1 1c       	adc	r10, r1
     7f2:	b1 1c       	adc	r11, r1
     7f4:	04 c0       	rjmp	.+8      	; 0x7fe <ProcessConfigurationDescriptor+0x7a>
	USB_Descriptor_Interface_t* PrinterInterface = NULL;
	USB_Descriptor_Endpoint_t*  DataINEndpoint   = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint  = NULL;

	/* Retrieve the entire configuration descriptor into the allocated buffer */
	switch (USB_Host_GetDeviceConfigDescriptor(1, &CurrConfigBytesRem, ConfigDescriptorData, sizeof(ConfigDescriptorData)))
     7f6:	83 e0       	ldi	r24, 0x03	; 3
     7f8:	43 c0       	rjmp	.+134    	; 0x880 <ProcessConfigurationDescriptor+0xfc>
     7fa:	81 e0       	ldi	r24, 0x01	; 1
     7fc:	41 c0       	rjmp	.+130    	; 0x880 <ProcessConfigurationDescriptor+0xfc>
	}

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(PrinterInterface) ||
     7fe:	01 15       	cp	r16, r1
     800:	11 05       	cpc	r17, r1
     802:	39 f0       	breq	.+14     	; 0x812 <ProcessConfigurationDescriptor+0x8e>
     804:	c4 01       	movw	r24, r8
     806:	b5 01       	movw	r22, r10
     808:	42 eb       	ldi	r20, 0xB2	; 178
     80a:	53 e0       	ldi	r21, 0x03	; 3
     80c:	9b d4       	rcall	.+2358   	; 0x1144 <USB_GetNextDescriptorComp>
     80e:	88 23       	and	r24, r24
     810:	81 f0       	breq	.+32     	; 0x832 <ProcessConfigurationDescriptor+0xae>
		    USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
		                              DComp_NextPrinterInterfaceBulkDataEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			/* Get the next Printer interface from the configuration descriptor */
			if (USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     812:	c4 01       	movw	r24, r8
     814:	b5 01       	movw	r22, r10
     816:	41 ea       	ldi	r20, 0xA1	; 161
     818:	53 e0       	ldi	r21, 0x03	; 3
     81a:	94 d4       	rcall	.+2344   	; 0x1144 <USB_GetNextDescriptorComp>
     81c:	88 23       	and	r24, r24
     81e:	11 f0       	breq	.+4      	; 0x824 <ProcessConfigurationDescriptor+0xa0>
     820:	84 e0       	ldi	r24, 0x04	; 4
     822:	2e c0       	rjmp	.+92     	; 0x880 <ProcessConfigurationDescriptor+0xfc>
				/* Descriptor not found, error out */
				return NoCompatibleInterfaceFound;
			}

			/* Save the interface in case we need to refer back to it later */
			PrinterInterface = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Interface_t);
     824:	09 81       	ldd	r16, Y+1	; 0x01
     826:	1a 81       	ldd	r17, Y+2	; 0x02
     828:	cc 24       	eor	r12, r12
     82a:	dd 24       	eor	r13, r13
     82c:	ee 24       	eor	r14, r14
     82e:	ff 24       	eor	r15, r15
     830:	e6 cf       	rjmp	.-52     	; 0x7fe <ProcessConfigurationDescriptor+0x7a>
			/* Skip the remainder of the loop as we have not found an endpoint yet */
			continue;
		}

		/* Retrieve the endpoint address from the endpoint descriptor */
		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Endpoint_t);
     832:	e9 81       	ldd	r30, Y+1	; 0x01
     834:	fa 81       	ldd	r31, Y+2	; 0x02

		/* If the endpoint is a IN type endpoint */
		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
     836:	82 81       	ldd	r24, Z+2	; 0x02
     838:	87 fd       	sbrc	r24, 7
     83a:	02 c0       	rjmp	.+4      	; 0x840 <ProcessConfigurationDescriptor+0xbc>
     83c:	6f 01       	movw	r12, r30
     83e:	01 c0       	rjmp	.+2      	; 0x842 <ProcessConfigurationDescriptor+0xbe>
     840:	7f 01       	movw	r14, r30
			return DescriptorTooLarge;
		default:
			return ControlError;
	}

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
     842:	e1 14       	cp	r14, r1
     844:	f1 04       	cpc	r15, r1
     846:	d9 f2       	breq	.-74     	; 0x7fe <ProcessConfigurationDescriptor+0x7a>
     848:	c1 14       	cp	r12, r1
     84a:	d1 04       	cpc	r13, r1
     84c:	c1 f2       	breq	.-80     	; 0x7fe <ProcessConfigurationDescriptor+0x7a>
		else
		  DataOUTEndpoint = EndpointData;
	}

	/* Save Printer interface details for later use */
	PrinterInterfaceNumber = PrinterInterface->InterfaceNumber;
     84e:	f8 01       	movw	r30, r16
     850:	82 81       	ldd	r24, Z+2	; 0x02
     852:	80 93 3e 01 	sts	0x013E, r24
	PrinterAltSetting      = PrinterInterface->AlternateSetting;
     856:	83 81       	ldd	r24, Z+3	; 0x03
     858:	80 93 3d 01 	sts	0x013D, r24

	/* Configure the Printer data IN pipe */
	Pipe_ConfigurePipe(PRINTER_DATA_IN_PIPE, EP_TYPE_BULK, PIPE_TOKEN_IN,
     85c:	f7 01       	movw	r30, r14
     85e:	04 81       	ldd	r16, Z+4	; 0x04
     860:	15 81       	ldd	r17, Z+5	; 0x05
     862:	81 e0       	ldi	r24, 0x01	; 1
     864:	62 e0       	ldi	r22, 0x02	; 2
     866:	40 e1       	ldi	r20, 0x10	; 16
     868:	22 81       	ldd	r18, Z+2	; 0x02
     86a:	ee 24       	eor	r14, r14
     86c:	62 d2       	rcall	.+1220   	; 0xd32 <Pipe_ConfigurePipe>
	                   DataINEndpoint->EndpointAddress, DataINEndpoint->EndpointSize, PIPE_BANK_SINGLE);

	/* Configure the Printer data OUT pipe */
	Pipe_ConfigurePipe(PRINTER_DATA_OUT_PIPE, EP_TYPE_BULK, PIPE_TOKEN_OUT,
     86e:	f6 01       	movw	r30, r12
     870:	04 81       	ldd	r16, Z+4	; 0x04
     872:	15 81       	ldd	r17, Z+5	; 0x05
     874:	82 e0       	ldi	r24, 0x02	; 2
     876:	62 e0       	ldi	r22, 0x02	; 2
     878:	40 e2       	ldi	r20, 0x20	; 32
     87a:	22 81       	ldd	r18, Z+2	; 0x02
     87c:	5a d2       	rcall	.+1204   	; 0xd32 <Pipe_ConfigurePipe>
     87e:	80 e0       	ldi	r24, 0x00	; 0
					   DataOUTEndpoint->EndpointAddress, DataOUTEndpoint->EndpointSize, PIPE_BANK_SINGLE);

	/* Valid data found, return success */
	return SuccessfulConfigRead;
}
     880:	cc 5f       	subi	r28, 0xFC	; 252
     882:	dd 4f       	sbci	r29, 0xFD	; 253
     884:	0f b6       	in	r0, 0x3f	; 63
     886:	f8 94       	cli
     888:	de bf       	out	0x3e, r29	; 62
     88a:	0f be       	out	0x3f, r0	; 63
     88c:	cd bf       	out	0x3d, r28	; 61
     88e:	cf 91       	pop	r28
     890:	df 91       	pop	r29
     892:	1f 91       	pop	r17
     894:	0f 91       	pop	r16
     896:	ff 90       	pop	r15
     898:	ef 90       	pop	r14
     89a:	df 90       	pop	r13
     89c:	cf 90       	pop	r12
     89e:	bf 90       	pop	r11
     8a0:	af 90       	pop	r10
     8a2:	9f 90       	pop	r9
     8a4:	8f 90       	pop	r8
     8a6:	08 95       	ret

000008a8 <Printer_GetDeviceID>:
 *
 *  \return A value from the USB_Host_SendControlErrorCodes_t enum
 */
uint8_t Printer_GetDeviceID(char* DeviceIDString,
                            const uint16_t BufferSize)
{
     8a8:	cf 92       	push	r12
     8aa:	df 92       	push	r13
     8ac:	ff 92       	push	r15
     8ae:	0f 93       	push	r16
     8b0:	1f 93       	push	r17
     8b2:	df 93       	push	r29
     8b4:	cf 93       	push	r28
     8b6:	00 d0       	rcall	.+0      	; 0x8b8 <Printer_GetDeviceID+0x10>
     8b8:	cd b7       	in	r28, 0x3d	; 61
     8ba:	de b7       	in	r29, 0x3e	; 62
     8bc:	8c 01       	movw	r16, r24
     8be:	6b 01       	movw	r12, r22
	uint8_t  ErrorCode = HOST_SENDCONTROL_Successful;
	uint16_t DeviceIDStringLength = 0;
     8c0:	1a 82       	std	Y+2, r1	; 0x02
     8c2:	19 82       	std	Y+1, r1	; 0x01

	USB_ControlRequest = (USB_Request_Header_t)
     8c4:	90 91 3e 01 	lds	r25, 0x013E
     8c8:	81 ea       	ldi	r24, 0xA1	; 161
     8ca:	80 93 41 01 	sts	0x0141, r24
     8ce:	10 92 42 01 	sts	0x0142, r1
     8d2:	10 92 44 01 	sts	0x0144, r1
     8d6:	10 92 43 01 	sts	0x0143, r1
     8da:	90 93 45 01 	sts	0x0145, r25
     8de:	10 92 46 01 	sts	0x0146, r1
     8e2:	82 e0       	ldi	r24, 0x02	; 2
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	90 93 48 01 	sts	0x0148, r25
     8ea:	80 93 47 01 	sts	0x0147, r24
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     8ee:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = sizeof(DeviceIDStringLength),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(&DeviceIDStringLength)) != HOST_SENDCONTROL_Successful)
     8f2:	ce 01       	movw	r24, r28
     8f4:	01 96       	adiw	r24, 0x01	; 1
     8f6:	ee d4       	rcall	.+2524   	; 0x12d4 <USB_Host_SendControlRequest>
     8f8:	f8 2e       	mov	r15, r24
     8fa:	88 23       	and	r24, r24
     8fc:	51 f5       	brne	.+84     	; 0x952 <Printer_GetDeviceID+0xaa>
	  return ErrorCode;

	if (!(DeviceIDStringLength))
     8fe:	29 81       	ldd	r18, Y+1	; 0x01
     900:	3a 81       	ldd	r19, Y+2	; 0x02
     902:	21 15       	cp	r18, r1
     904:	31 05       	cpc	r19, r1
     906:	19 f1       	breq	.+70     	; 0x94e <Printer_GetDeviceID+0xa6>

				Temp = Data.Bytes[0];
				Data.Bytes[0] = Data.Bytes[1];
				Data.Bytes[1] = Temp;

				return Data.Word;
     908:	83 2f       	mov	r24, r19
     90a:	92 2f       	mov	r25, r18
	{
		DeviceIDString[0] = 0x00;
		return HOST_SENDCONTROL_Successful;
	}

	DeviceIDStringLength = SwapEndian_16(DeviceIDStringLength);
     90c:	9a 83       	std	Y+2, r25	; 0x02
     90e:	89 83       	std	Y+1, r24	; 0x01

	if (DeviceIDStringLength > BufferSize)
     910:	c8 16       	cp	r12, r24
     912:	d9 06       	cpc	r13, r25
     914:	10 f4       	brcc	.+4      	; 0x91a <Printer_GetDeviceID+0x72>
	  DeviceIDStringLength = BufferSize;
     916:	da 82       	std	Y+2, r13	; 0x02
     918:	c9 82       	std	Y+1, r12	; 0x01

	USB_ControlRequest.wLength = DeviceIDStringLength;
     91a:	89 81       	ldd	r24, Y+1	; 0x01
     91c:	9a 81       	ldd	r25, Y+2	; 0x02
     91e:	90 93 48 01 	sts	0x0148, r25
     922:	80 93 47 01 	sts	0x0147, r24

	if ((ErrorCode = USB_Host_SendControlRequest(DeviceIDString)) != HOST_SENDCONTROL_Successful)
     926:	c8 01       	movw	r24, r16
     928:	d5 d4       	rcall	.+2474   	; 0x12d4 <USB_Host_SendControlRequest>
     92a:	f8 2e       	mov	r15, r24
     92c:	88 23       	and	r24, r24
     92e:	89 f4       	brne	.+34     	; 0x952 <Printer_GetDeviceID+0xaa>
	  return ErrorCode;

	/* Move string back two characters to remove the string length value from the start of the array */
	memmove(&DeviceIDString[0], &DeviceIDString[2], DeviceIDStringLength - 2);
     930:	b8 01       	movw	r22, r16
     932:	6e 5f       	subi	r22, 0xFE	; 254
     934:	7f 4f       	sbci	r23, 0xFF	; 255
     936:	49 81       	ldd	r20, Y+1	; 0x01
     938:	5a 81       	ldd	r21, Y+2	; 0x02
     93a:	42 50       	subi	r20, 0x02	; 2
     93c:	50 40       	sbci	r21, 0x00	; 0
     93e:	c8 01       	movw	r24, r16
     940:	3c d6       	rcall	.+3192   	; 0x15ba <memmove>

	DeviceIDString[DeviceIDStringLength - 2] = 0x00;
     942:	89 81       	ldd	r24, Y+1	; 0x01
     944:	9a 81       	ldd	r25, Y+2	; 0x02
     946:	08 0f       	add	r16, r24
     948:	19 1f       	adc	r17, r25
     94a:	02 50       	subi	r16, 0x02	; 2
     94c:	10 40       	sbci	r17, 0x00	; 0
     94e:	f8 01       	movw	r30, r16
     950:	10 82       	st	Z, r1

	return HOST_SENDCONTROL_Successful;
}
     952:	8f 2d       	mov	r24, r15
     954:	0f 90       	pop	r0
     956:	0f 90       	pop	r0
     958:	cf 91       	pop	r28
     95a:	df 91       	pop	r29
     95c:	1f 91       	pop	r17
     95e:	0f 91       	pop	r16
     960:	ff 90       	pop	r15
     962:	df 90       	pop	r13
     964:	cf 90       	pop	r12
     966:	08 95       	ret

00000968 <Printer_SendData>:
 *
 *  \return A value from the Pipe_Stream_RW_ErrorCodes_t enum
 */
uint8_t Printer_SendData(const void* const PrinterCommands,
                         const uint16_t CommandSize)
{
     968:	1f 93       	push	r17
     96a:	22 e0       	ldi	r18, 0x02	; 2
     96c:	20 93 a7 00 	sts	0x00A7, r18

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     970:	20 91 a9 00 	lds	r18, 0x00A9
     974:	2f 7b       	andi	r18, 0xBF	; 191
     976:	20 93 a9 00 	sts	0x00A9, r18
	uint8_t ErrorCode;

	Pipe_SelectPipe(PRINTER_DATA_OUT_PIPE);
	Pipe_Unfreeze();

	if ((ErrorCode = Pipe_Write_Stream_LE(PrinterCommands, CommandSize, NULL)) != PIPE_RWSTREAM_NoError)
     97a:	40 e0       	ldi	r20, 0x00	; 0
     97c:	50 e0       	ldi	r21, 0x00	; 0
     97e:	8b d3       	rcall	.+1814   	; 0x1096 <Pipe_Write_Stream_LE>
     980:	18 2f       	mov	r17, r24
     982:	88 23       	and	r24, r24
     984:	59 f4       	brne	.+22     	; 0x99c <Printer_SendData+0x34>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
     986:	80 91 a6 00 	lds	r24, 0x00A6
     98a:	8b 77       	andi	r24, 0x7B	; 123
     98c:	80 93 a6 00 	sts	0x00A6, r24
	  return ErrorCode;

	Pipe_ClearOUT();

	Pipe_WaitUntilReady();
     990:	42 d2       	rcall	.+1156   	; 0xe16 <Pipe_WaitUntilReady>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     992:	80 91 a9 00 	lds	r24, 0x00A9
     996:	80 64       	ori	r24, 0x40	; 64
     998:	80 93 a9 00 	sts	0x00A9, r24

	Pipe_Freeze();

	return PIPE_RWSTREAM_NoError;
}
     99c:	81 2f       	mov	r24, r17
     99e:	1f 91       	pop	r17
     9a0:	08 95       	ret

000009a2 <USB_Host_WaitMS>:
		USB_ResetInterface();
	}
}

uint8_t USB_Host_WaitMS(uint8_t MS)
{
     9a2:	98 2f       	mov	r25, r24
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     9a4:	20 91 9e 00 	lds	r18, 0x009E
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     9a8:	30 91 a0 00 	lds	r19, 0x00A0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     9ac:	80 91 a0 00 	lds	r24, 0x00A0
     9b0:	8f 7d       	andi	r24, 0xDF	; 223
     9b2:	80 93 a0 00 	sts	0x00A0, r24
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     9b6:	80 91 9f 00 	lds	r24, 0x009F
     9ba:	8f 7d       	andi	r24, 0xDF	; 223
     9bc:	80 93 9f 00 	sts	0x009F, r24
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     9c0:	80 91 9e 00 	lds	r24, 0x009E
     9c4:	81 60       	ori	r24, 0x01	; 1
     9c6:	80 93 9e 00 	sts	0x009E, r24
     9ca:	28 c0       	rjmp	.+80     	; 0xa1c <USB_Host_WaitMS+0x7a>
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     9cc:	80 91 9f 00 	lds	r24, 0x009F

	USB_Host_ResumeBus();

	while (MS)
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     9d0:	85 ff       	sbrs	r24, 5
     9d2:	06 c0       	rjmp	.+12     	; 0x9e0 <USB_Host_WaitMS+0x3e>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     9d4:	80 91 9f 00 	lds	r24, 0x009F
     9d8:	8f 7d       	andi	r24, 0xDF	; 223
     9da:	80 93 9f 00 	sts	0x009F, r24
		{
			USB_INT_Clear(USB_INT_HSOFI);
			MS--;
     9de:	91 50       	subi	r25, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
     9e0:	80 91 49 01 	lds	r24, 0x0149
     9e4:	81 30       	cpi	r24, 0x01	; 1
     9e6:	11 f4       	brne	.+4      	; 0x9ec <USB_Host_WaitMS+0x4a>
     9e8:	91 e0       	ldi	r25, 0x01	; 1
     9ea:	1a c0       	rjmp	.+52     	; 0xa20 <USB_Host_WaitMS+0x7e>
			 *  \return Boolean \c true if an error has occurred on the selected pipe, \c false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
     9ec:	80 91 a6 00 	lds	r24, 0x00A6
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError() == true)
     9f0:	84 ff       	sbrs	r24, 4
     9f2:	09 c0       	rjmp	.+18     	; 0xa06 <USB_Host_WaitMS+0x64>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     9f4:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
     9f8:	80 91 a6 00 	lds	r24, 0x00A6
     9fc:	8f 7e       	andi	r24, 0xEF	; 239
     9fe:	80 93 a6 00 	sts	0x00A6, r24
     a02:	92 e0       	ldi	r25, 0x02	; 2
     a04:	0d c0       	rjmp	.+26     	; 0xa20 <USB_Host_WaitMS+0x7e>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     a06:	80 91 a6 00 	lds	r24, 0x00A6
			ErrorCode = HOST_WAITERROR_PipeError;

			break;
		}

		if (Pipe_IsStalled() == true)
     a0a:	81 ff       	sbrs	r24, 1
     a0c:	07 c0       	rjmp	.+14     	; 0xa1c <USB_Host_WaitMS+0x7a>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
     a0e:	80 91 a6 00 	lds	r24, 0x00A6
     a12:	8d 7f       	andi	r24, 0xFD	; 253
     a14:	80 93 a6 00 	sts	0x00A6, r24
     a18:	93 e0       	ldi	r25, 0x03	; 3
     a1a:	02 c0       	rjmp	.+4      	; 0xa20 <USB_Host_WaitMS+0x7e>
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     a1c:	99 23       	and	r25, r25
     a1e:	b1 f6       	brne	.-84     	; 0x9cc <USB_Host_WaitMS+0x2a>

			break;
		}
	}

	if (BusSuspended)
     a20:	20 fd       	sbrc	r18, 0
     a22:	05 c0       	rjmp	.+10     	; 0xa2e <USB_Host_WaitMS+0x8c>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     a24:	80 91 9e 00 	lds	r24, 0x009E
     a28:	8e 7f       	andi	r24, 0xFE	; 254
     a2a:	80 93 9e 00 	sts	0x009E, r24
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
     a2e:	35 ff       	sbrs	r19, 5
     a30:	05 c0       	rjmp	.+10     	; 0xa3c <USB_Host_WaitMS+0x9a>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     a32:	80 91 a0 00 	lds	r24, 0x00A0
     a36:	80 62       	ori	r24, 0x20	; 32
     a38:	80 93 a0 00 	sts	0x00A0, r24
	  USB_INT_Enable(USB_INT_HSOFI);

	return ErrorCode;
}
     a3c:	89 2f       	mov	r24, r25
     a3e:	08 95       	ret

00000a40 <USB_Host_ResetDevice>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     a40:	60 91 9e 00 	lds	r22, 0x009E
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     a44:	80 91 a0 00 	lds	r24, 0x00A0
     a48:	8d 7f       	andi	r24, 0xFD	; 253
     a4a:	80 93 a0 00 	sts	0x00A0, r24
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
     a4e:	80 91 9e 00 	lds	r24, 0x009E
     a52:	82 60       	ori	r24, 0x02	; 2
     a54:	80 93 9e 00 	sts	0x009E, r24
			 *  \return Boolean \c true if no bus reset is currently being sent, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
     a58:	80 91 9e 00 	lds	r24, 0x009E
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
     a5c:	81 fd       	sbrc	r24, 1
     a5e:	fc cf       	rjmp	.-8      	; 0xa58 <USB_Host_ResetDevice+0x18>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     a60:	80 91 9e 00 	lds	r24, 0x009E
     a64:	81 60       	ori	r24, 0x01	; 1
     a66:	80 93 9e 00 	sts	0x009E, r24
	USB_Host_ResumeBus();
	
	USB_Host_ConfigurationNumber = 0;
     a6a:	10 92 3f 01 	sts	0x013F, r1
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     a6e:	30 91 a0 00 	lds	r19, 0x00A0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     a72:	80 91 a0 00 	lds	r24, 0x00A0
     a76:	8f 7d       	andi	r24, 0xDF	; 223
     a78:	80 93 a0 00 	sts	0x00A0, r24
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     a7c:	80 91 9f 00 	lds	r24, 0x009F
     a80:	8f 7d       	andi	r24, 0xDF	; 223
     a82:	80 93 9f 00 	sts	0x009F, r24
     a86:	2a e0       	ldi	r18, 0x0A	; 10
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     a88:	40 ed       	ldi	r20, 0xD0	; 208
     a8a:	57 e0       	ldi	r21, 0x07	; 7
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     a8c:	80 91 9f 00 	lds	r24, 0x009F
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     a90:	85 ff       	sbrs	r24, 5
     a92:	0b c0       	rjmp	.+22     	; 0xaaa <USB_Host_ResetDevice+0x6a>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     a94:	80 91 9f 00 	lds	r24, 0x009F
     a98:	8f 7d       	andi	r24, 0xDF	; 223
     a9a:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     a9e:	80 91 9f 00 	lds	r24, 0x009F
     aa2:	8d 7f       	andi	r24, 0xFD	; 253
     aa4:	80 93 9f 00 	sts	0x009F, r24
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <USB_Host_ResetDevice+0x74>
     aaa:	ca 01       	movw	r24, r20
     aac:	01 97       	sbiw	r24, 0x01	; 1
     aae:	f1 f7       	brne	.-4      	; 0xaac <USB_Host_ResetDevice+0x6c>
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
     ab0:	21 50       	subi	r18, 0x01	; 1
     ab2:	61 f7       	brne	.-40     	; 0xa8c <USB_Host_ResetDevice+0x4c>
		}

		Delay_MS(1);
	}

	if (HSOFIEnabled)
     ab4:	35 ff       	sbrs	r19, 5
     ab6:	05 c0       	rjmp	.+10     	; 0xac2 <USB_Host_ResetDevice+0x82>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     ab8:	80 91 a0 00 	lds	r24, 0x00A0
     abc:	80 62       	ori	r24, 0x20	; 32
     abe:	80 93 a0 00 	sts	0x00A0, r24
	  USB_INT_Enable(USB_INT_HSOFI);

	if (BusSuspended)
     ac2:	60 fd       	sbrc	r22, 0
     ac4:	05 c0       	rjmp	.+10     	; 0xad0 <USB_Host_ResetDevice+0x90>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     ac6:	80 91 9e 00 	lds	r24, 0x009E
     aca:	8e 7f       	andi	r24, 0xFE	; 254
     acc:	80 93 9e 00 	sts	0x009E, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     ad0:	80 91 a0 00 	lds	r24, 0x00A0
     ad4:	82 60       	ori	r24, 0x02	; 2
     ad6:	80 93 a0 00 	sts	0x00A0, r24
	  USB_Host_SuspendBus();

	USB_INT_Enable(USB_INT_DDISCI);
}
     ada:	08 95       	ret

00000adc <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "../Host.h"

void USB_Host_ProcessNextHostState(void)
{
     adc:	ef 92       	push	r14
     ade:	0f 93       	push	r16
     ae0:	1f 93       	push	r17
     ae2:	df 93       	push	r29
     ae4:	cf 93       	push	r28
     ae6:	cd b7       	in	r28, 0x3d	; 61
     ae8:	de b7       	in	r29, 0x3e	; 62
     aea:	28 97       	sbiw	r28, 0x08	; 8
     aec:	0f b6       	in	r0, 0x3f	; 63
     aee:	f8 94       	cli
     af0:	de bf       	out	0x3e, r29	; 62
     af2:	0f be       	out	0x3f, r0	; 63
     af4:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
     af6:	80 91 49 01 	lds	r24, 0x0149
     afa:	85 30       	cpi	r24, 0x05	; 5
     afc:	09 f4       	brne	.+2      	; 0xb00 <USB_Host_ProcessNextHostState+0x24>
     afe:	94 c0       	rjmp	.+296    	; 0xc28 <USB_Host_ProcessNextHostState+0x14c>
     b00:	86 30       	cpi	r24, 0x06	; 6
     b02:	68 f4       	brcc	.+26     	; 0xb1e <USB_Host_ProcessNextHostState+0x42>
     b04:	82 30       	cpi	r24, 0x02	; 2
     b06:	b9 f1       	breq	.+110    	; 0xb76 <USB_Host_ProcessNextHostState+0x9a>
     b08:	83 30       	cpi	r24, 0x03	; 3
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <USB_Host_ProcessNextHostState+0x36>
     b0c:	88 23       	and	r24, r24
     b0e:	a1 f0       	breq	.+40     	; 0xb38 <USB_Host_ProcessNextHostState+0x5c>
     b10:	04 c1       	rjmp	.+520    	; 0xd1a <USB_Host_ProcessNextHostState+0x23e>
     b12:	83 30       	cpi	r24, 0x03	; 3
     b14:	d1 f1       	breq	.+116    	; 0xb8a <USB_Host_ProcessNextHostState+0xae>
     b16:	84 30       	cpi	r24, 0x04	; 4
     b18:	09 f0       	breq	.+2      	; 0xb1c <USB_Host_ProcessNextHostState+0x40>
     b1a:	ff c0       	rjmp	.+510    	; 0xd1a <USB_Host_ProcessNextHostState+0x23e>
     b1c:	5d c0       	rjmp	.+186    	; 0xbd8 <USB_Host_ProcessNextHostState+0xfc>
     b1e:	87 30       	cpi	r24, 0x07	; 7
     b20:	09 f4       	brne	.+2      	; 0xb24 <USB_Host_ProcessNextHostState+0x48>
     b22:	9b c0       	rjmp	.+310    	; 0xc5a <USB_Host_ProcessNextHostState+0x17e>
     b24:	87 30       	cpi	r24, 0x07	; 7
     b26:	08 f4       	brcc	.+2      	; 0xb2a <USB_Host_ProcessNextHostState+0x4e>
     b28:	8a c0       	rjmp	.+276    	; 0xc3e <USB_Host_ProcessNextHostState+0x162>
     b2a:	88 30       	cpi	r24, 0x08	; 8
     b2c:	09 f4       	brne	.+2      	; 0xb30 <USB_Host_ProcessNextHostState+0x54>
     b2e:	b3 c0       	rjmp	.+358    	; 0xc96 <USB_Host_ProcessNextHostState+0x1ba>
     b30:	89 30       	cpi	r24, 0x09	; 9
     b32:	09 f0       	breq	.+2      	; 0xb36 <USB_Host_ProcessNextHostState+0x5a>
     b34:	f2 c0       	rjmp	.+484    	; 0xd1a <USB_Host_ProcessNextHostState+0x23e>
     b36:	d7 c0       	rjmp	.+430    	; 0xce6 <USB_Host_ProcessNextHostState+0x20a>
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
     b38:	00 91 3b 01 	lds	r16, 0x013B
     b3c:	10 91 3c 01 	lds	r17, 0x013C
     b40:	01 15       	cp	r16, r1
     b42:	11 05       	cpc	r17, r1
     b44:	09 f4       	brne	.+2      	; 0xb48 <USB_Host_ProcessNextHostState+0x6c>
     b46:	e9 c0       	rjmp	.+466    	; 0xd1a <USB_Host_ProcessNextHostState+0x23e>
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     b48:	81 e0       	ldi	r24, 0x01	; 1
     b4a:	2b df       	rcall	.-426    	; 0x9a2 <USB_Host_WaitMS>
     b4c:	68 2f       	mov	r22, r24
     b4e:	88 23       	and	r24, r24
     b50:	31 f0       	breq	.+12     	; 0xb5e <USB_Host_ProcessNextHostState+0x82>
				{
					USB_HostState = PostWaitState;
     b52:	80 91 3a 01 	lds	r24, 0x013A
     b56:	80 93 49 01 	sts	0x0149, r24
     b5a:	91 e0       	ldi	r25, 0x01	; 1
     b5c:	da c0       	rjmp	.+436    	; 0xd12 <USB_Host_ProcessNextHostState+0x236>
					ErrorCode     = HOST_ENUMERROR_WaitStage;
					break;
				}

				if (!(--WaitMSRemaining))
     b5e:	c8 01       	movw	r24, r16
     b60:	01 97       	sbiw	r24, 0x01	; 1
     b62:	90 93 3c 01 	sts	0x013C, r25
     b66:	80 93 3b 01 	sts	0x013B, r24
     b6a:	89 2b       	or	r24, r25
     b6c:	09 f0       	breq	.+2      	; 0xb70 <USB_Host_ProcessNextHostState+0x94>
     b6e:	d5 c0       	rjmp	.+426    	; 0xd1a <USB_Host_ProcessNextHostState+0x23e>
				  USB_HostState = PostWaitState;
     b70:	80 91 3a 01 	lds	r24, 0x013A
     b74:	07 c0       	rjmp	.+14     	; 0xb84 <USB_Host_ProcessNextHostState+0xa8>
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
     b76:	88 ee       	ldi	r24, 0xE8	; 232
     b78:	93 e0       	ldi	r25, 0x03	; 3
     b7a:	90 93 3c 01 	sts	0x013C, r25
     b7e:	80 93 3b 01 	sts	0x013B, r24

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
     b82:	83 e0       	ldi	r24, 0x03	; 3
     b84:	80 93 49 01 	sts	0x0149, r24
     b88:	c8 c0       	rjmp	.+400    	; 0xd1a <USB_Host_ProcessNextHostState+0x23e>
			break;
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
     b8a:	80 91 3b 01 	lds	r24, 0x013B
     b8e:	90 91 3c 01 	lds	r25, 0x013C
     b92:	01 97       	sbiw	r24, 0x01	; 1
     b94:	90 93 3c 01 	sts	0x013C, r25
     b98:	80 93 3b 01 	sts	0x013B, r24
     b9c:	01 96       	adiw	r24, 0x01	; 1
     b9e:	29 f0       	breq	.+10     	; 0xbaa <USB_Host_ProcessNextHostState+0xce>
     ba0:	80 ed       	ldi	r24, 0xD0	; 208
     ba2:	97 e0       	ldi	r25, 0x07	; 7
     ba4:	01 97       	sbiw	r24, 0x01	; 1
     ba6:	f1 f7       	brne	.-4      	; 0xba4 <USB_Host_ProcessNextHostState+0xc8>
     ba8:	b8 c0       	rjmp	.+368    	; 0xd1a <USB_Host_ProcessNextHostState+0x23e>
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
     baa:	77 98       	cbi	0x0e, 7	; 14

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     bac:	80 91 d8 00 	lds	r24, 0x00D8
     bb0:	80 61       	ori	r24, 0x10	; 16
     bb2:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
     bb6:	80 91 dd 00 	lds	r24, 0x00DD
     bba:	8b 7f       	andi	r24, 0xFB	; 251
     bbc:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON |=  (1 << UVCONE);
     bc0:	80 91 d7 00 	lds	r24, 0x00D7
     bc4:	80 61       	ori	r24, 0x10	; 16
     bc6:	80 93 d7 00 	sts	0x00D7, r24
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
     bca:	80 91 dd 00 	lds	r24, 0x00DD
     bce:	82 60       	ori	r24, 0x02	; 2
     bd0:	80 93 dd 00 	sts	0x00DD, r24

				USB_OTGPAD_On();
				USB_Host_VBUS_Auto_Enable();
				USB_Host_VBUS_Auto_On();

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
     bd4:	84 e0       	ldi	r24, 0x04	; 4
     bd6:	d6 cf       	rjmp	.-84     	; 0xb84 <USB_Host_ProcessNextHostState+0xa8>
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
     bd8:	80 91 9f 00 	lds	r24, 0x009F
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
     bdc:	80 ff       	sbrs	r24, 0
     bde:	9d c0       	rjmp	.+314    	; 0xd1a <USB_Host_ProcessNextHostState+0x23e>
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     be0:	80 91 9f 00 	lds	r24, 0x009F
     be4:	8e 7f       	andi	r24, 0xFE	; 254
     be6:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     bea:	80 91 9f 00 	lds	r24, 0x009F
     bee:	8d 7f       	andi	r24, 0xFD	; 253
     bf0:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     bf4:	80 91 df 00 	lds	r24, 0x00DF
     bf8:	8d 7f       	andi	r24, 0xFD	; 253
     bfa:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
     bfe:	80 91 de 00 	lds	r24, 0x00DE
     c02:	82 60       	ori	r24, 0x02	; 2
     c04:	80 93 de 00 	sts	0x00DE, r24
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     c08:	80 91 9e 00 	lds	r24, 0x009E
     c0c:	81 60       	ori	r24, 0x01	; 1
     c0e:	80 93 9e 00 	sts	0x009E, r24

				USB_INT_Clear(USB_INT_VBERRI);
				USB_INT_Enable(USB_INT_VBERRI);

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
     c12:	ed d0       	rcall	.+474    	; 0xdee <Pipe_ClearPipes>

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
     c14:	10 92 49 01 	sts	0x0149, r1
     c18:	84 e6       	ldi	r24, 0x64	; 100
     c1a:	90 e0       	ldi	r25, 0x00	; 0
     c1c:	90 93 3c 01 	sts	0x013C, r25
     c20:	80 93 3b 01 	sts	0x013B, r24
     c24:	85 e0       	ldi	r24, 0x05	; 5
     c26:	5c c0       	rjmp	.+184    	; 0xce0 <USB_Host_ProcessNextHostState+0x204>
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
     c28:	0b df       	rcall	.-490    	; 0xa40 <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
     c2a:	10 92 49 01 	sts	0x0149, r1
     c2e:	88 ec       	ldi	r24, 0xC8	; 200
     c30:	90 e0       	ldi	r25, 0x00	; 0
     c32:	90 93 3c 01 	sts	0x013C, r25
     c36:	80 93 3b 01 	sts	0x013B, r24
     c3a:	86 e0       	ldi	r24, 0x06	; 6
     c3c:	51 c0       	rjmp	.+162    	; 0xce0 <USB_Host_ProcessNextHostState+0x204>
			break;
		case HOST_STATE_Powered_ConfigPipe:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
     c3e:	80 e0       	ldi	r24, 0x00	; 0
     c40:	60 e0       	ldi	r22, 0x00	; 0
     c42:	40 e0       	ldi	r20, 0x00	; 0
     c44:	20 e0       	ldi	r18, 0x00	; 0
     c46:	00 e4       	ldi	r16, 0x40	; 64
     c48:	10 e0       	ldi	r17, 0x00	; 0
     c4a:	ee 24       	eor	r14, r14
     c4c:	72 d0       	rcall	.+228    	; 0xd32 <Pipe_ConfigurePipe>
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     c4e:	80 91 ac 00 	lds	r24, 0x00AC
							   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
							   PIPE_CONTROLPIPE_DEFAULT_SIZE, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
     c52:	87 ff       	sbrs	r24, 7
     c54:	5c c0       	rjmp	.+184    	; 0xd0e <USB_Host_ProcessNextHostState+0x232>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
     c56:	87 e0       	ldi	r24, 0x07	; 7
     c58:	95 cf       	rjmp	.-214    	; 0xb84 <USB_Host_ProcessNextHostState+0xa8>
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
     c5a:	a1 e4       	ldi	r26, 0x41	; 65
     c5c:	b1 e0       	ldi	r27, 0x01	; 1
     c5e:	e1 e3       	ldi	r30, 0x31	; 49
     c60:	f1 e0       	ldi	r31, 0x01	; 1
     c62:	88 e0       	ldi	r24, 0x08	; 8
     c64:	01 90       	ld	r0, Z+
     c66:	0d 92       	st	X+, r0
     c68:	81 50       	subi	r24, 0x01	; 1
     c6a:	e1 f7       	brne	.-8      	; 0xc64 <USB_Host_ProcessNextHostState+0x188>
					.wLength       = 8,
				};

			uint8_t DataBuffer[8];

			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
     c6c:	ce 01       	movw	r24, r28
     c6e:	01 96       	adiw	r24, 0x01	; 1
     c70:	31 d3       	rcall	.+1634   	; 0x12d4 <USB_Host_SendControlRequest>
     c72:	68 2f       	mov	r22, r24
     c74:	88 23       	and	r24, r24
     c76:	09 f0       	breq	.+2      	; 0xc7a <USB_Host_ProcessNextHostState+0x19e>
     c78:	48 c0       	rjmp	.+144    	; 0xd0a <USB_Host_ProcessNextHostState+0x22e>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_Host_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
     c7a:	88 85       	ldd	r24, Y+8	; 0x08
     c7c:	80 93 39 01 	sts	0x0139, r24

			USB_Host_ResetDevice();
     c80:	df de       	rcall	.-578    	; 0xa40 <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
     c82:	10 92 49 01 	sts	0x0149, r1
     c86:	88 ec       	ldi	r24, 0xC8	; 200
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	90 93 3c 01 	sts	0x013C, r25
     c8e:	80 93 3b 01 	sts	0x013B, r24
     c92:	88 e0       	ldi	r24, 0x08	; 8
     c94:	25 c0       	rjmp	.+74     	; 0xce0 <USB_Host_ProcessNextHostState+0x204>
			break;
		case HOST_STATE_Default_PostReset:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
     c96:	00 91 39 01 	lds	r16, 0x0139
     c9a:	80 e0       	ldi	r24, 0x00	; 0
     c9c:	60 e0       	ldi	r22, 0x00	; 0
     c9e:	40 e0       	ldi	r20, 0x00	; 0
     ca0:	20 e0       	ldi	r18, 0x00	; 0
     ca2:	10 e0       	ldi	r17, 0x00	; 0
     ca4:	ee 24       	eor	r14, r14
     ca6:	45 d0       	rcall	.+138    	; 0xd32 <Pipe_ConfigurePipe>
     ca8:	80 91 ac 00 	lds	r24, 0x00AC
			                   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
			                   USB_Host_ControlPipeSize, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
     cac:	87 ff       	sbrs	r24, 7
     cae:	2f c0       	rjmp	.+94     	; 0xd0e <USB_Host_ProcessNextHostState+0x232>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
     cb0:	a1 e4       	ldi	r26, 0x41	; 65
     cb2:	b1 e0       	ldi	r27, 0x01	; 1
     cb4:	e9 e2       	ldi	r30, 0x29	; 41
     cb6:	f1 e0       	ldi	r31, 0x01	; 1
     cb8:	88 e0       	ldi	r24, 0x08	; 8
     cba:	01 90       	ld	r0, Z+
     cbc:	0d 92       	st	X+, r0
     cbe:	81 50       	subi	r24, 0x01	; 1
     cc0:	e1 f7       	brne	.-8      	; 0xcba <USB_Host_ProcessNextHostState+0x1de>
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
     cc2:	80 e0       	ldi	r24, 0x00	; 0
     cc4:	90 e0       	ldi	r25, 0x00	; 0
     cc6:	06 d3       	rcall	.+1548   	; 0x12d4 <USB_Host_SendControlRequest>
     cc8:	68 2f       	mov	r22, r24
     cca:	88 23       	and	r24, r24
     ccc:	f1 f4       	brne	.+60     	; 0xd0a <USB_Host_ProcessNextHostState+0x22e>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
     cce:	10 92 49 01 	sts	0x0149, r1
     cd2:	84 e6       	ldi	r24, 0x64	; 100
     cd4:	90 e0       	ldi	r25, 0x00	; 0
     cd6:	90 93 3c 01 	sts	0x013C, r25
     cda:	80 93 3b 01 	sts	0x013B, r24
     cde:	89 e0       	ldi	r24, 0x09	; 9
     ce0:	80 93 3a 01 	sts	0x013A, r24
     ce4:	1a c0       	rjmp	.+52     	; 0xd1a <USB_Host_ProcessNextHostState+0x23e>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
     ce6:	81 e0       	ldi	r24, 0x01	; 1
     ce8:	80 93 a1 00 	sts	0x00A1, r24
			break;
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			USB_HostState = HOST_STATE_Addressed;
     cec:	8a e0       	ldi	r24, 0x0A	; 10
     cee:	80 93 49 01 	sts	0x0149, r24

			EVENT_USB_Host_DeviceEnumerationComplete();
     cf2:	28 dc       	rcall	.-1968   	; 0x544 <EVENT_USB_Host_DeviceEnumerationComplete>
     cf4:	12 c0       	rjmp	.+36     	; 0xd1a <USB_Host_ProcessNextHostState+0x23e>
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
     cf6:	89 2f       	mov	r24, r25
     cf8:	55 db       	rcall	.-2390   	; 0x3a4 <EVENT_USB_Host_DeviceEnumerationFailed>
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     cfa:	80 91 dd 00 	lds	r24, 0x00DD
     cfe:	81 60       	ori	r24, 0x01	; 1
     d00:	80 93 dd 00 	sts	0x00DD, r24

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
     d04:	f0 db       	rcall	.-2080   	; 0x4e6 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     d06:	b6 d0       	rcall	.+364    	; 0xe74 <USB_ResetInterface>
     d08:	08 c0       	rjmp	.+16     	; 0xd1a <USB_Host_ProcessNextHostState+0x23e>
	}
}
     d0a:	93 e0       	ldi	r25, 0x03	; 3
     d0c:	02 c0       	rjmp	.+4      	; 0xd12 <USB_Host_ProcessNextHostState+0x236>
     d0e:	94 e0       	ldi	r25, 0x04	; 4
     d10:	60 e0       	ldi	r22, 0x00	; 0

			EVENT_USB_Host_DeviceEnumerationComplete();
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
     d12:	80 91 49 01 	lds	r24, 0x0149
     d16:	81 30       	cpi	r24, 0x01	; 1
     d18:	71 f7       	brne	.-36     	; 0xcf6 <USB_Host_ProcessNextHostState+0x21a>

		EVENT_USB_Host_DeviceUnattached();

		USB_ResetInterface();
	}
}
     d1a:	28 96       	adiw	r28, 0x08	; 8
     d1c:	0f b6       	in	r0, 0x3f	; 63
     d1e:	f8 94       	cli
     d20:	de bf       	out	0x3e, r29	; 62
     d22:	0f be       	out	0x3f, r0	; 63
     d24:	cd bf       	out	0x3d, r28	; 61
     d26:	cf 91       	pop	r28
     d28:	df 91       	pop	r29
     d2a:	1f 91       	pop	r17
     d2c:	0f 91       	pop	r16
     d2e:	ef 90       	pop	r14
     d30:	08 95       	ret

00000d32 <Pipe_ConfigurePipe>:
                        const uint8_t Type,
                        const uint8_t Token,
                        const uint8_t EndpointNumber,
                        const uint16_t Size,
                        const uint8_t Banks)
{
     d32:	ef 92       	push	r14
     d34:	0f 93       	push	r16
     d36:	1f 93       	push	r17
     d38:	e8 2f       	mov	r30, r24
     d3a:	7e 2d       	mov	r23, r14

		Pipe_SelectPipe(PNum);
		
		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
     d3c:	62 95       	swap	r22
     d3e:	66 0f       	add	r22, r22
     d40:	66 0f       	add	r22, r22
     d42:	60 7c       	andi	r22, 0xC0	; 192
     d44:	64 2b       	or	r22, r20
     d46:	2f 70       	andi	r18, 0x0F	; 15
     d48:	62 2b       	or	r22, r18
     d4a:	38 2f       	mov	r19, r24
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     d4c:	72 60       	ori	r23, 0x02	; 2
     d4e:	45 c0       	rjmp	.+138    	; 0xdda <Pipe_ConfigurePipe+0xa8>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     d50:	30 93 a7 00 	sts	0x00A7, r19
		uint8_t UPCFG2XTemp;
		uint8_t UPIENXTemp;

		Pipe_SelectPipe(PNum);
		
		if (PNum == Number)
     d54:	3e 17       	cp	r19, r30
     d56:	a1 f4       	brne	.+40     	; 0xd80 <Pipe_ConfigurePipe+0x4e>
     d58:	88 e0       	ldi	r24, 0x08	; 8
     d5a:	90 e0       	ldi	r25, 0x00	; 0
     d5c:	20 e0       	ldi	r18, 0x00	; 0
     d5e:	03 c0       	rjmp	.+6      	; 0xd66 <Pipe_ConfigurePipe+0x34>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
				{
					MaskVal++;
     d60:	2f 5f       	subi	r18, 0xFF	; 255
					CheckBytes <<= 1;
     d62:	88 0f       	add	r24, r24
     d64:	99 1f       	adc	r25, r25
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
     d66:	80 17       	cp	r24, r16
     d68:	91 07       	cpc	r25, r17
     d6a:	10 f4       	brcc	.+4      	; 0xd70 <Pipe_ConfigurePipe+0x3e>
     d6c:	25 30       	cpi	r18, 0x05	; 5
     d6e:	c1 f7       	brne	.-16     	; 0xd60 <Pipe_ConfigurePipe+0x2e>
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     d70:	92 2f       	mov	r25, r18
     d72:	92 95       	swap	r25
     d74:	90 7f       	andi	r25, 0xF0	; 240
     d76:	97 2b       	or	r25, r23
     d78:	56 2f       	mov	r21, r22
     d7a:	40 e0       	ldi	r20, 0x00	; 0
     d7c:	20 e0       	ldi	r18, 0x00	; 0
     d7e:	08 c0       	rjmp	.+16     	; 0xd90 <Pipe_ConfigurePipe+0x5e>
			UPCFG2XTemp = 0;
			UPIENXTemp  = 0;
		}
		else
		{
			UPCFG0XTemp = UPCFG0X;
     d80:	50 91 aa 00 	lds	r21, 0x00AA
			UPCFG1XTemp = UPCFG1X;
     d84:	90 91 ab 00 	lds	r25, 0x00AB
			UPCFG2XTemp = UPCFG2X;
     d88:	40 91 ad 00 	lds	r20, 0x00AD
			UPIENXTemp  = UPIENX;
     d8c:	20 91 ae 00 	lds	r18, 0x00AE
		}

		if (!(UPCFG1XTemp & (1 << ALLOC)))
     d90:	91 ff       	sbrs	r25, 1
     d92:	22 c0       	rjmp	.+68     	; 0xdd8 <Pipe_ConfigurePipe+0xa6>
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     d94:	80 91 a9 00 	lds	r24, 0x00A9
     d98:	8e 7f       	andi	r24, 0xFE	; 254
     d9a:	80 93 a9 00 	sts	0x00A9, r24
		  continue;
		  
		Pipe_DisablePipe();
		UPCFG1X &= ~(1 << ALLOC);
     d9e:	80 91 ab 00 	lds	r24, 0x00AB
     da2:	8d 7f       	andi	r24, 0xFD	; 253
     da4:	80 93 ab 00 	sts	0x00AB, r24
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
     da8:	80 91 a9 00 	lds	r24, 0x00A9
     dac:	81 60       	ori	r24, 0x01	; 1
     dae:	80 93 a9 00 	sts	0x00A9, r24

		Pipe_EnablePipe();
		UPCFG0X = UPCFG0XTemp;
     db2:	50 93 aa 00 	sts	0x00AA, r21
		UPCFG1X = UPCFG1XTemp;
     db6:	90 93 ab 00 	sts	0x00AB, r25
		UPCFG2X = UPCFG2XTemp;
     dba:	40 93 ad 00 	sts	0x00AD, r20
		UPIENX  = UPIENXTemp;
     dbe:	20 93 ae 00 	sts	0x00AE, r18

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
     dc2:	80 91 a9 00 	lds	r24, 0x00A9
     dc6:	80 62       	ori	r24, 0x20	; 32
     dc8:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     dcc:	80 91 ac 00 	lds	r24, 0x00AC

		Pipe_SetInfiniteINRequests();
	
		if (!(Pipe_IsConfigured()))
     dd0:	87 fd       	sbrc	r24, 7
     dd2:	02 c0       	rjmp	.+4      	; 0xdd8 <Pipe_ConfigurePipe+0xa6>
     dd4:	80 e0       	ldi	r24, 0x00	; 0
     dd6:	07 c0       	rjmp	.+14     	; 0xde6 <Pipe_ConfigurePipe+0xb4>

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else	
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
     dd8:	3f 5f       	subi	r19, 0xFF	; 255
     dda:	37 30       	cpi	r19, 0x07	; 7
     ddc:	08 f4       	brcc	.+2      	; 0xde0 <Pipe_ConfigurePipe+0xae>
     dde:	b8 cf       	rjmp	.-144    	; 0xd50 <Pipe_ConfigurePipe+0x1e>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     de0:	e0 93 a7 00 	sts	0x00A7, r30
     de4:	81 e0       	ldi	r24, 0x01	; 1
	}
		
	Pipe_SelectPipe(Number);	
	return true;
#endif
}
     de6:	1f 91       	pop	r17
     de8:	0f 91       	pop	r16
     dea:	ef 90       	pop	r14
     dec:	08 95       	ret

00000dee <Pipe_ClearPipes>:

void Pipe_ClearPipes(void)
{
	UPINT = 0;
     dee:	10 92 f8 00 	sts	0x00F8, r1
     df2:	90 e0       	ldi	r25, 0x00	; 0
     df4:	90 93 a7 00 	sts	0x00A7, r25

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
     df8:	10 92 ae 00 	sts	0x00AE, r1
		UPINTX  = 0;
     dfc:	10 92 a6 00 	sts	0x00A6, r1
		UPCFG1X = 0;
     e00:	10 92 ab 00 	sts	0x00AB, r1
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     e04:	80 91 a9 00 	lds	r24, 0x00A9
     e08:	8e 7f       	andi	r24, 0xFE	; 254
     e0a:	80 93 a9 00 	sts	0x00A9, r24

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     e0e:	9f 5f       	subi	r25, 0xFF	; 255
     e10:	97 30       	cpi	r25, 0x07	; 7
     e12:	81 f7       	brne	.-32     	; 0xdf4 <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
     e14:	08 95       	ret

00000e16 <Pipe_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
     e16:	40 91 a2 00 	lds	r20, 0x00A2
     e1a:	50 91 a3 00 	lds	r21, 0x00A3
     e1e:	24 e6       	ldi	r18, 0x64	; 100
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
     e20:	80 91 aa 00 	lds	r24, 0x00AA

	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
     e24:	80 73       	andi	r24, 0x30	; 48
     e26:	80 31       	cpi	r24, 0x10	; 16
     e28:	29 f4       	brne	.+10     	; 0xe34 <Pipe_WaitUntilReady+0x1e>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     e2a:	80 91 a6 00 	lds	r24, 0x00A6
		{
			if (Pipe_IsINReceived())
     e2e:	80 ff       	sbrs	r24, 0
     e30:	05 c0       	rjmp	.+10     	; 0xe3c <Pipe_WaitUntilReady+0x26>
     e32:	1e c0       	rjmp	.+60     	; 0xe70 <Pipe_WaitUntilReady+0x5a>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     e34:	80 91 a6 00 	lds	r24, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
     e38:	82 fd       	sbrc	r24, 2
     e3a:	1a c0       	rjmp	.+52     	; 0xe70 <Pipe_WaitUntilReady+0x5a>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     e3c:	80 91 a6 00 	lds	r24, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
     e40:	81 ff       	sbrs	r24, 1
     e42:	02 c0       	rjmp	.+4      	; 0xe48 <Pipe_WaitUntilReady+0x32>
     e44:	81 e0       	ldi	r24, 0x01	; 1
     e46:	08 95       	ret
		  return PIPE_READYWAIT_PipeStalled;
		else if (USB_HostState == HOST_STATE_Unattached)
     e48:	80 91 49 01 	lds	r24, 0x0149
     e4c:	81 30       	cpi	r24, 0x01	; 1
     e4e:	11 f4       	brne	.+4      	; 0xe54 <Pipe_WaitUntilReady+0x3e>
     e50:	82 e0       	ldi	r24, 0x02	; 2
     e52:	08 95       	ret
     e54:	80 91 a2 00 	lds	r24, 0x00A2
     e58:	90 91 a3 00 	lds	r25, 0x00A3
		  return PIPE_READYWAIT_DeviceDisconnected;

		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     e5c:	84 17       	cp	r24, r20
     e5e:	95 07       	cpc	r25, r21
     e60:	f9 f2       	breq	.-66     	; 0xe20 <Pipe_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     e62:	22 23       	and	r18, r18
     e64:	11 f4       	brne	.+4      	; 0xe6a <Pipe_WaitUntilReady+0x54>
     e66:	83 e0       	ldi	r24, 0x03	; 3
     e68:	08 95       	ret
     e6a:	21 50       	subi	r18, 0x01	; 1
     e6c:	ac 01       	movw	r20, r24
     e6e:	d8 cf       	rjmp	.-80     	; 0xe20 <Pipe_WaitUntilReady+0xa>
     e70:	80 e0       	ldi	r24, 0x00	; 0
			  return PIPE_READYWAIT_Timeout;
		}
	}
}
     e72:	08 95       	ret

00000e74 <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     e74:	70 d0       	rcall	.+224    	; 0xf56 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     e76:	77 d0       	rcall	.+238    	; 0xf66 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     e78:	80 91 d8 00 	lds	r24, 0x00D8
     e7c:	8f 77       	andi	r24, 0x7F	; 127
     e7e:	80 93 d8 00 	sts	0x00D8, r24
				USBCON |=  (1 << USBE);
     e82:	80 91 d8 00 	lds	r24, 0x00D8
     e86:	80 68       	ori	r24, 0x80	; 128
     e88:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
     e8c:	80 91 d8 00 	lds	r24, 0x00D8
     e90:	8f 7d       	andi	r24, 0xDF	; 223
     e92:	80 93 d8 00 	sts	0x00D8, r24
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
     e96:	80 91 d7 00 	lds	r24, 0x00D7
     e9a:	8f 77       	andi	r24, 0x7F	; 127
     e9c:	80 93 d7 00 	sts	0x00D7, r24

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     ea0:	8c e0       	ldi	r24, 0x0C	; 12
     ea2:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     ea4:	8e e0       	ldi	r24, 0x0E	; 14
     ea6:	89 bd       	out	0x29, r24	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_CAN_BE_HOST)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));		
     ea8:	09 b4       	in	r0, 0x29	; 41
     eaa:	00 fe       	sbrs	r0, 0
     eac:	fd cf       	rjmp	.-6      	; 0xea8 <USB_ResetInterface+0x34>
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState                = HOST_STATE_Unattached;
     eae:	81 e0       	ldi	r24, 0x01	; 1
     eb0:	80 93 49 01 	sts	0x0149, r24
	USB_Host_ConfigurationNumber = 0;
     eb4:	10 92 3f 01 	sts	0x013F, r1
	USB_Host_ControlPipeSize     = PIPE_CONTROLPIPE_DEFAULT_SIZE;
     eb8:	80 e4       	ldi	r24, 0x40	; 64
     eba:	80 93 39 01 	sts	0x0139, r24
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
     ebe:	80 91 d8 00 	lds	r24, 0x00D8
     ec2:	80 64       	ori	r24, 0x40	; 64
     ec4:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     ec8:	80 91 dd 00 	lds	r24, 0x00DD
     ecc:	81 60       	ori	r24, 0x01	; 1
     ece:	80 93 dd 00 	sts	0x00DD, r24
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
     ed2:	80 91 dd 00 	lds	r24, 0x00DD
     ed6:	84 60       	ori	r24, 0x04	; 4
     ed8:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON &= ~(1 << UVCONE);
     edc:	80 91 d7 00 	lds	r24, 0x00D7
     ee0:	8f 7e       	andi	r24, 0xEF	; 239
     ee2:	80 93 d7 00 	sts	0x00D7, r24

				DDRE   |=  (1 << 7);
     ee6:	6f 9a       	sbi	0x0d, 7	; 13
			}

			static inline void USB_Host_VBUS_Manual_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_On(void)
			{
				PORTE  |=  (1 << 7);
     ee8:	77 9a       	sbi	0x0e, 7	; 14
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN |= (1 << SRPE);						
     eea:	80 91 de 00 	lds	r24, 0x00DE
     eee:	81 60       	ori	r24, 0x01	; 1
     ef0:	80 93 de 00 	sts	0x00DE, r24
						break;
					case USB_INT_RSTI:
						UHIEN  |= (1 << RSTE);
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
     ef4:	80 91 de 00 	lds	r24, 0x00DE
     ef8:	84 60       	ori	r24, 0x04	; 4
     efa:	80 93 de 00 	sts	0x00DE, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     efe:	80 91 e0 00 	lds	r24, 0x00E0
     f02:	8e 7f       	andi	r24, 0xFE	; 254
     f04:	80 93 e0 00 	sts	0x00E0, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     f08:	80 91 d8 00 	lds	r24, 0x00D8
     f0c:	80 61       	ori	r24, 0x10	; 16
     f0e:	80 93 d8 00 	sts	0x00D8, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     f12:	08 95       	ret

00000f14 <USB_Init>:

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
     f14:	e7 ed       	ldi	r30, 0xD7	; 215
     f16:	f0 e0       	ldi	r31, 0x00	; 0
     f18:	80 81       	ld	r24, Z
     f1a:	81 60       	ori	r24, 0x01	; 1
     f1c:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     f1e:	81 e0       	ldi	r24, 0x01	; 1
     f20:	80 93 40 01 	sts	0x0140, r24

	USB_ResetInterface();
}
     f24:	a7 cf       	rjmp	.-178    	; 0xe74 <USB_ResetInterface>

00000f26 <USB_Disable>:

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
     f26:	17 d0       	rcall	.+46     	; 0xf56 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     f28:	1e d0       	rcall	.+60     	; 0xf66 <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
     f2a:	e0 ee       	ldi	r30, 0xE0	; 224
     f2c:	f0 e0       	ldi	r31, 0x00	; 0
     f2e:	80 81       	ld	r24, Z
     f30:	81 60       	ori	r24, 0x01	; 1
     f32:	80 83       	st	Z, r24
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON  &= ~(1 << USBE);
     f34:	a8 ed       	ldi	r26, 0xD8	; 216
     f36:	b0 e0       	ldi	r27, 0x00	; 0
     f38:	8c 91       	ld	r24, X
     f3a:	8f 77       	andi	r24, 0x7F	; 127
     f3c:	8c 93       	st	X, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     f3e:	19 bc       	out	0x29, r1	; 41

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  &= ~(1 << UVREGE);
     f40:	e7 ed       	ldi	r30, 0xD7	; 215
     f42:	f0 e0       	ldi	r31, 0x00	; 0
     f44:	80 81       	ld	r24, Z
     f46:	8e 7f       	andi	r24, 0xFE	; 254
     f48:	80 83       	st	Z, r24
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON  &= ~(1 << OTGPADE);
     f4a:	8c 91       	ld	r24, X
     f4c:	8f 7e       	andi	r24, 0xEF	; 239
     f4e:	8c 93       	st	X, r24

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
     f50:	10 92 40 01 	sts	0x0140, r1
}
     f54:	08 95       	ret

00000f56 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     f56:	e8 ed       	ldi	r30, 0xD8	; 216
     f58:	f0 e0       	ldi	r31, 0x00	; 0
     f5a:	80 81       	ld	r24, Z
     f5c:	8c 7f       	andi	r24, 0xFC	; 252
     f5e:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
     f60:	10 92 a0 00 	sts	0x00A0, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
	#endif
}
     f64:	08 95       	ret

00000f66 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     f66:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_BOTH)
	OTGINT = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
     f6a:	10 92 9f 00 	sts	0x009F, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
	#endif
}
     f6e:	08 95       	ret

00000f70 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
     f70:	1f 92       	push	r1
     f72:	0f 92       	push	r0
     f74:	0f b6       	in	r0, 0x3f	; 63
     f76:	0f 92       	push	r0
     f78:	0b b6       	in	r0, 0x3b	; 59
     f7a:	0f 92       	push	r0
     f7c:	11 24       	eor	r1, r1
     f7e:	2f 93       	push	r18
     f80:	3f 93       	push	r19
     f82:	4f 93       	push	r20
     f84:	5f 93       	push	r21
     f86:	6f 93       	push	r22
     f88:	7f 93       	push	r23
     f8a:	8f 93       	push	r24
     f8c:	9f 93       	push	r25
     f8e:	af 93       	push	r26
     f90:	bf 93       	push	r27
     f92:	ef 93       	push	r30
     f94:	ff 93       	push	r31
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     f96:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	#if defined(USB_CAN_BE_HOST)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
     f9a:	85 ff       	sbrs	r24, 5
     f9c:	0a c0       	rjmp	.+20     	; 0xfb2 <__vector_10+0x42>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     f9e:	80 91 a0 00 	lds	r24, 0x00A0
     fa2:	85 ff       	sbrs	r24, 5
     fa4:	06 c0       	rjmp	.+12     	; 0xfb2 <__vector_10+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     fa6:	80 91 9f 00 	lds	r24, 0x009F
     faa:	8f 7d       	andi	r24, 0xDF	; 223
     fac:	80 93 9f 00 	sts	0x009F, r24
	{
		USB_INT_Clear(USB_INT_HSOFI);

		EVENT_USB_Host_StartOfFrame();
     fb0:	67 d1       	rcall	.+718    	; 0x1280 <USB_Event_Stub>
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
     fb2:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
     fb6:	81 ff       	sbrs	r24, 1
     fb8:	15 c0       	rjmp	.+42     	; 0xfe4 <__vector_10+0x74>
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
					case USB_INT_DCONNI:
						return (UHIEN  & (1 << DCONNE));
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
     fba:	80 91 a0 00 	lds	r24, 0x00A0
     fbe:	81 ff       	sbrs	r24, 1
     fc0:	11 c0       	rjmp	.+34     	; 0xfe4 <__vector_10+0x74>
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     fc2:	80 91 9f 00 	lds	r24, 0x009F
     fc6:	8d 7f       	andi	r24, 0xFD	; 253
     fc8:	80 93 9f 00 	sts	0x009F, r24
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     fcc:	80 91 9f 00 	lds	r24, 0x009F
     fd0:	8e 7f       	andi	r24, 0xFE	; 254
     fd2:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     fd6:	80 91 a0 00 	lds	r24, 0x00A0
     fda:	8d 7f       	andi	r24, 0xFD	; 253
     fdc:	80 93 a0 00 	sts	0x00A0, r24
	{
		USB_INT_Clear(USB_INT_DDISCI);
		USB_INT_Clear(USB_INT_DCONNI);
		USB_INT_Disable(USB_INT_DDISCI);

		EVENT_USB_Host_DeviceUnattached();
     fe0:	82 da       	rcall	.-2812   	; 0x4e6 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     fe2:	48 df       	rcall	.-368    	; 0xe74 <USB_ResetInterface>
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
     fe4:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
     fe8:	81 ff       	sbrs	r24, 1
     fea:	15 c0       	rjmp	.+42     	; 0x1016 <__vector_10+0xa6>
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
     fec:	80 91 de 00 	lds	r24, 0x00DE
     ff0:	81 ff       	sbrs	r24, 1
     ff2:	11 c0       	rjmp	.+34     	; 0x1016 <__vector_10+0xa6>
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     ff4:	80 91 df 00 	lds	r24, 0x00DF
     ff8:	8d 7f       	andi	r24, 0xFD	; 253
     ffa:	80 93 df 00 	sts	0x00DF, r24
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
     ffe:	77 98       	cbi	0x0e, 7	; 14
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
    1000:	80 91 dd 00 	lds	r24, 0x00DD
    1004:	81 60       	ori	r24, 0x01	; 1
    1006:	80 93 dd 00 	sts	0x00DD, r24
		USB_INT_Clear(USB_INT_VBERRI);

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
    100a:	80 e0       	ldi	r24, 0x00	; 0
    100c:	7e da       	rcall	.-2820   	; 0x50a <EVENT_USB_Host_HostError>
		EVENT_USB_Host_DeviceUnattached();
    100e:	6b da       	rcall	.-2858   	; 0x4e6 <EVENT_USB_Host_DeviceUnattached>

		USB_HostState = HOST_STATE_Unattached;
    1010:	81 e0       	ldi	r24, 0x01	; 1
    1012:	80 93 49 01 	sts	0x0149, r24
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
					case USB_INT_SRPI:
						return (OTGINT & (1 << SRPI));
    1016:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
    101a:	80 ff       	sbrs	r24, 0
    101c:	17 c0       	rjmp	.+46     	; 0x104c <__vector_10+0xdc>
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
					case USB_INT_SRPI:
						return (OTGIEN & (1 << SRPE));
    101e:	80 91 de 00 	lds	r24, 0x00DE
    1022:	80 ff       	sbrs	r24, 0
    1024:	13 c0       	rjmp	.+38     	; 0x104c <__vector_10+0xdc>
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
						break;
					case USB_INT_SRPI:
						OTGINT &= ~(1 << SRPI);
    1026:	80 91 df 00 	lds	r24, 0x00DF
    102a:	8e 7f       	andi	r24, 0xFE	; 254
    102c:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_VBERRI:
						OTGIEN &= ~(1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN &= ~(1 << SRPE);						
    1030:	80 91 de 00 	lds	r24, 0x00DE
    1034:	8e 7f       	andi	r24, 0xFE	; 254
    1036:	80 93 de 00 	sts	0x00DE, r24
	{
		USB_INT_Clear(USB_INT_SRPI);
		USB_INT_Disable(USB_INT_SRPI);

		EVENT_USB_Host_DeviceAttached();
    103a:	5e da       	rcall	.-2884   	; 0x4f8 <EVENT_USB_Host_DeviceAttached>
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
    103c:	80 91 a0 00 	lds	r24, 0x00A0
    1040:	82 60       	ori	r24, 0x02	; 2
    1042:	80 93 a0 00 	sts	0x00A0, r24

		USB_INT_Enable(USB_INT_DDISCI);

		USB_HostState = HOST_STATE_Powered;
    1046:	82 e0       	ldi	r24, 0x02	; 2
    1048:	80 93 49 01 	sts	0x0149, r24
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
    104c:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
    1050:	82 ff       	sbrs	r24, 2
    1052:	0e c0       	rjmp	.+28     	; 0x1070 <__vector_10+0x100>
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
    1054:	80 91 de 00 	lds	r24, 0x00DE
    1058:	82 ff       	sbrs	r24, 2
    105a:	0a c0       	rjmp	.+20     	; 0x1070 <__vector_10+0x100>
						break;
					case USB_INT_RSTI:
						UHINT  &= ~(1 << RSTI);
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
    105c:	80 91 df 00 	lds	r24, 0x00DF
    1060:	8b 7f       	andi	r24, 0xFB	; 251
    1062:	80 93 df 00 	sts	0x00DF, r24
	{
		USB_INT_Clear(USB_INT_BCERRI);

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
    1066:	82 e0       	ldi	r24, 0x02	; 2
    1068:	60 e0       	ldi	r22, 0x00	; 0
    106a:	9c d9       	rcall	.-3272   	; 0x3a4 <EVENT_USB_Host_DeviceEnumerationFailed>
		EVENT_USB_Host_DeviceUnattached();
    106c:	3c da       	rcall	.-2952   	; 0x4e6 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
    106e:	02 df       	rcall	.-508    	; 0xe74 <USB_ResetInterface>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    1070:	ff 91       	pop	r31
    1072:	ef 91       	pop	r30
    1074:	bf 91       	pop	r27
    1076:	af 91       	pop	r26
    1078:	9f 91       	pop	r25
    107a:	8f 91       	pop	r24
    107c:	7f 91       	pop	r23
    107e:	6f 91       	pop	r22
    1080:	5f 91       	pop	r21
    1082:	4f 91       	pop	r20
    1084:	3f 91       	pop	r19
    1086:	2f 91       	pop	r18
    1088:	0f 90       	pop	r0
    108a:	0b be       	out	0x3b, r0	; 59
    108c:	0f 90       	pop	r0
    108e:	0f be       	out	0x3f, r0	; 63
    1090:	0f 90       	pop	r0
    1092:	1f 90       	pop	r1
    1094:	18 95       	reti

00001096 <Pipe_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    1096:	bf 92       	push	r11
    1098:	cf 92       	push	r12
    109a:	df 92       	push	r13
    109c:	ef 92       	push	r14
    109e:	ff 92       	push	r15
    10a0:	0f 93       	push	r16
    10a2:	1f 93       	push	r17
    10a4:	cf 93       	push	r28
    10a6:	df 93       	push	r29
    10a8:	18 2f       	mov	r17, r24
    10aa:	09 2f       	mov	r16, r25
    10ac:	7b 01       	movw	r14, r22
    10ae:	6a 01       	movw	r12, r20
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    10b0:	80 91 aa 00 	lds	r24, 0x00AA
    10b4:	8f 7c       	andi	r24, 0xCF	; 207
    10b6:	80 62       	ori	r24, 0x20	; 32
    10b8:	80 93 aa 00 	sts	0x00AA, r24
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
    10bc:	ac de       	rcall	.-680    	; 0xe16 <Pipe_WaitUntilReady>
    10be:	b8 2e       	mov	r11, r24
    10c0:	88 23       	and	r24, r24
    10c2:	a9 f5       	brne	.+106    	; 0x112e <Pipe_Write_Stream_LE+0x98>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    10c4:	81 2f       	mov	r24, r17
    10c6:	90 2f       	mov	r25, r16
    10c8:	9c 01       	movw	r18, r24
    10ca:	e9 01       	movw	r28, r18
	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
    10cc:	c1 14       	cp	r12, r1
    10ce:	d1 04       	cpc	r13, r1
    10d0:	39 f0       	breq	.+14     	; 0x10e0 <Pipe_Write_Stream_LE+0x4a>
	{
		Length -= *BytesProcessed;
    10d2:	f6 01       	movw	r30, r12
    10d4:	80 81       	ld	r24, Z
    10d6:	91 81       	ldd	r25, Z+1	; 0x01
    10d8:	e8 1a       	sub	r14, r24
    10da:	f9 0a       	sbc	r15, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    10dc:	c8 0f       	add	r28, r24
    10de:	d9 1f       	adc	r29, r25
    10e0:	00 e0       	ldi	r16, 0x00	; 0
    10e2:	10 e0       	ldi	r17, 0x00	; 0
    10e4:	21 c0       	rjmp	.+66     	; 0x1128 <Pipe_Write_Stream_LE+0x92>
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
    10e6:	80 91 a6 00 	lds	r24, 0x00A6
	}
	
	while (Length)
	{
		if (!(Pipe_IsReadWriteAllowed()))
    10ea:	85 fd       	sbrc	r24, 5
    10ec:	15 c0       	rjmp	.+42     	; 0x1118 <Pipe_Write_Stream_LE+0x82>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    10ee:	80 91 a6 00 	lds	r24, 0x00A6
    10f2:	8b 77       	andi	r24, 0x7B	; 123
    10f4:	80 93 a6 00 	sts	0x00A6, r24
		{
			TEMPLATE_CLEAR_PIPE();

			if (BytesProcessed != NULL)
    10f8:	c1 14       	cp	r12, r1
    10fa:	d1 04       	cpc	r13, r1
    10fc:	49 f0       	breq	.+18     	; 0x1110 <Pipe_Write_Stream_LE+0x7a>
			{
				*BytesProcessed += BytesInTransfer;
    10fe:	f6 01       	movw	r30, r12
    1100:	80 81       	ld	r24, Z
    1102:	91 81       	ldd	r25, Z+1	; 0x01
    1104:	80 0f       	add	r24, r16
    1106:	91 1f       	adc	r25, r17
    1108:	91 83       	std	Z+1, r25	; 0x01
    110a:	80 83       	st	Z, r24
    110c:	84 e0       	ldi	r24, 0x04	; 4
    110e:	10 c0       	rjmp	.+32     	; 0x1130 <Pipe_Write_Stream_LE+0x9a>
				return PIPE_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
    1110:	82 de       	rcall	.-764    	; 0xe16 <Pipe_WaitUntilReady>
    1112:	88 23       	and	r24, r24
    1114:	49 f0       	breq	.+18     	; 0x1128 <Pipe_Write_Stream_LE+0x92>
    1116:	0c c0       	rjmp	.+24     	; 0x1130 <Pipe_Write_Stream_LE+0x9a>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    1118:	89 91       	ld	r24, Y+
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    111a:	80 93 af 00 	sts	0x00AF, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    111e:	08 94       	sec
    1120:	e1 08       	sbc	r14, r1
    1122:	f1 08       	sbc	r15, r1
			BytesInTransfer++;
    1124:	0f 5f       	subi	r16, 0xFF	; 255
    1126:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}
	
	while (Length)
    1128:	e1 14       	cp	r14, r1
    112a:	f1 04       	cpc	r15, r1
    112c:	e1 f6       	brne	.-72     	; 0x10e6 <Pipe_Write_Stream_LE+0x50>
    112e:	8b 2d       	mov	r24, r11
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
    1130:	df 91       	pop	r29
    1132:	cf 91       	pop	r28
    1134:	1f 91       	pop	r17
    1136:	0f 91       	pop	r16
    1138:	ff 90       	pop	r15
    113a:	ef 90       	pop	r14
    113c:	df 90       	pop	r13
    113e:	cf 90       	pop	r12
    1140:	bf 90       	pop	r11
    1142:	08 95       	ret

00001144 <USB_GetNextDescriptorComp>:

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
    1144:	af 92       	push	r10
    1146:	bf 92       	push	r11
    1148:	cf 92       	push	r12
    114a:	df 92       	push	r13
    114c:	ef 92       	push	r14
    114e:	ff 92       	push	r15
    1150:	0f 93       	push	r16
    1152:	1f 93       	push	r17
    1154:	cf 93       	push	r28
    1156:	df 93       	push	r29
    1158:	7c 01       	movw	r14, r24
    115a:	eb 01       	movw	r28, r22
    115c:	6a 01       	movw	r12, r20
    115e:	24 c0       	rjmp	.+72     	; 0x11a8 <USB_GetNextDescriptorComp+0x64>
	uint8_t ErrorCode;

	while (*BytesRem)
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
    1160:	e8 81       	ld	r30, Y
    1162:	f9 81       	ldd	r31, Y+1	; 0x01
    1164:	be 2e       	mov	r11, r30
    1166:	af 2e       	mov	r10, r31
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc)
			{
				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;
    1168:	80 81       	ld	r24, Z
    116a:	90 e0       	ldi	r25, 0x00	; 0
    116c:	98 01       	movw	r18, r16
    116e:	80 17       	cp	r24, r16
    1170:	91 07       	cpc	r25, r17
    1172:	08 f4       	brcc	.+2      	; 0x1176 <USB_GetNextDescriptorComp+0x32>
    1174:	9c 01       	movw	r18, r24
				
				if (*BytesRem < CurrDescriptorSize)
				  CurrDescriptorSize = *BytesRem;

				*CurrConfigLoc  = (void*)((uintptr_t)*CurrConfigLoc + CurrDescriptorSize);
    1176:	e2 0f       	add	r30, r18
    1178:	f3 1f       	adc	r31, r19
    117a:	f9 83       	std	Y+1, r31	; 0x01
    117c:	e8 83       	st	Y, r30
				*BytesRem      -= CurrDescriptorSize;
    117e:	f7 01       	movw	r30, r14
    1180:	80 81       	ld	r24, Z
    1182:	91 81       	ldd	r25, Z+1	; 0x01
    1184:	82 1b       	sub	r24, r18
    1186:	93 0b       	sbc	r25, r19
    1188:	91 83       	std	Z+1, r25	; 0x01
    118a:	80 83       	st	Z, r24
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
    118c:	88 81       	ld	r24, Y
    118e:	99 81       	ldd	r25, Y+1	; 0x01
    1190:	f6 01       	movw	r30, r12
    1192:	09 95       	icall
    1194:	82 30       	cpi	r24, 0x02	; 2
    1196:	41 f0       	breq	.+16     	; 0x11a8 <USB_GetNextDescriptorComp+0x64>
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
    1198:	81 30       	cpi	r24, 0x01	; 1
    119a:	69 f4       	brne	.+26     	; 0x11b6 <USB_GetNextDescriptorComp+0x72>
			{
				*CurrConfigLoc = PrevDescLoc;
    119c:	b8 82       	st	Y, r11
    119e:	a9 82       	std	Y+1, r10	; 0x01
				*BytesRem      = PrevBytesRem;
    11a0:	f7 01       	movw	r30, r14
    11a2:	11 83       	std	Z+1, r17	; 0x01
    11a4:	00 83       	st	Z, r16
    11a6:	07 c0       	rjmp	.+14     	; 0x11b6 <USB_GetNextDescriptorComp+0x72>
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
	uint8_t ErrorCode;

	while (*BytesRem)
    11a8:	f7 01       	movw	r30, r14
    11aa:	00 81       	ld	r16, Z
    11ac:	11 81       	ldd	r17, Z+1	; 0x01
    11ae:	01 15       	cp	r16, r1
    11b0:	11 05       	cpc	r17, r1
    11b2:	b1 f6       	brne	.-84     	; 0x1160 <USB_GetNextDescriptorComp+0x1c>
    11b4:	82 e0       	ldi	r24, 0x02	; 2
			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
}
    11b6:	df 91       	pop	r29
    11b8:	cf 91       	pop	r28
    11ba:	1f 91       	pop	r17
    11bc:	0f 91       	pop	r16
    11be:	ff 90       	pop	r15
    11c0:	ef 90       	pop	r14
    11c2:	df 90       	pop	r13
    11c4:	cf 90       	pop	r12
    11c6:	bf 90       	pop	r11
    11c8:	af 90       	pop	r10
    11ca:	08 95       	ret

000011cc <USB_Host_GetDeviceConfigDescriptor>:
#if defined(USB_CAN_BE_HOST)
uint8_t USB_Host_GetDeviceConfigDescriptor(const uint8_t ConfigNumber,
                                           uint16_t* const ConfigSizePtr,
                                           void* const BufferPtr,
                                           const uint16_t BufferSize)
{
    11cc:	cf 92       	push	r12
    11ce:	df 92       	push	r13
    11d0:	ef 92       	push	r14
    11d2:	ff 92       	push	r15
    11d4:	0f 93       	push	r16
    11d6:	1f 93       	push	r17
    11d8:	df 93       	push	r29
    11da:	cf 93       	push	r28
    11dc:	cd b7       	in	r28, 0x3d	; 61
    11de:	de b7       	in	r29, 0x3e	; 62
    11e0:	29 97       	sbiw	r28, 0x09	; 9
    11e2:	0f b6       	in	r0, 0x3f	; 63
    11e4:	f8 94       	cli
    11e6:	de bf       	out	0x3e, r29	; 62
    11e8:	0f be       	out	0x3f, r0	; 63
    11ea:	cd bf       	out	0x3d, r28	; 61
    11ec:	6b 01       	movw	r12, r22
    11ee:	8a 01       	movw	r16, r20
    11f0:	79 01       	movw	r14, r18
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
    11f2:	90 e8       	ldi	r25, 0x80	; 128
    11f4:	90 93 41 01 	sts	0x0141, r25
    11f8:	96 e0       	ldi	r25, 0x06	; 6
    11fa:	90 93 42 01 	sts	0x0142, r25
    11fe:	90 e0       	ldi	r25, 0x00	; 0
    1200:	01 97       	sbiw	r24, 0x01	; 1
    1202:	92 60       	ori	r25, 0x02	; 2
    1204:	90 93 44 01 	sts	0x0144, r25
    1208:	80 93 43 01 	sts	0x0143, r24
    120c:	10 92 46 01 	sts	0x0146, r1
    1210:	10 92 45 01 	sts	0x0145, r1
    1214:	89 e0       	ldi	r24, 0x09	; 9
    1216:	90 e0       	ldi	r25, 0x00	; 0
    1218:	90 93 48 01 	sts	0x0148, r25
    121c:	80 93 47 01 	sts	0x0147, r24
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1220:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = sizeof(USB_Descriptor_Configuration_Header_t),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(ConfigHeader)) != HOST_SENDCONTROL_Successful)
    1224:	ce 01       	movw	r24, r28
    1226:	01 96       	adiw	r24, 0x01	; 1
    1228:	55 d0       	rcall	.+170    	; 0x12d4 <USB_Host_SendControlRequest>
    122a:	28 2f       	mov	r18, r24
    122c:	88 23       	and	r24, r24
    122e:	c1 f4       	brne	.+48     	; 0x1260 <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);
    1230:	8b 81       	ldd	r24, Y+3	; 0x03
    1232:	9c 81       	ldd	r25, Y+4	; 0x04
    1234:	f6 01       	movw	r30, r12
    1236:	91 83       	std	Z+1, r25	; 0x01
    1238:	80 83       	st	Z, r24

	if (*ConfigSizePtr > BufferSize)
    123a:	e8 16       	cp	r14, r24
    123c:	f9 06       	cpc	r15, r25
    123e:	10 f4       	brcc	.+4      	; 0x1244 <USB_Host_GetDeviceConfigDescriptor+0x78>
    1240:	25 e0       	ldi	r18, 0x05	; 5
    1242:	0e c0       	rjmp	.+28     	; 0x1260 <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return HOST_GETCONFIG_BuffOverflow;

	USB_ControlRequest.wLength = *ConfigSizePtr;
    1244:	90 93 48 01 	sts	0x0148, r25
    1248:	80 93 47 01 	sts	0x0147, r24

	if ((ErrorCode = USB_Host_SendControlRequest(BufferPtr)) != HOST_SENDCONTROL_Successful)
    124c:	c8 01       	movw	r24, r16
    124e:	42 d0       	rcall	.+132    	; 0x12d4 <USB_Host_SendControlRequest>
    1250:	28 2f       	mov	r18, r24
    1252:	88 23       	and	r24, r24
    1254:	29 f4       	brne	.+10     	; 0x1260 <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
    1256:	f8 01       	movw	r30, r16
    1258:	81 81       	ldd	r24, Z+1	; 0x01
    125a:	82 30       	cpi	r24, 0x02	; 2
    125c:	09 f0       	breq	.+2      	; 0x1260 <USB_Host_GetDeviceConfigDescriptor+0x94>
    125e:	26 e0       	ldi	r18, 0x06	; 6
	  return HOST_GETCONFIG_InvalidData;

	return HOST_GETCONFIG_Successful;
}
    1260:	82 2f       	mov	r24, r18
    1262:	29 96       	adiw	r28, 0x09	; 9
    1264:	0f b6       	in	r0, 0x3f	; 63
    1266:	f8 94       	cli
    1268:	de bf       	out	0x3e, r29	; 62
    126a:	0f be       	out	0x3f, r0	; 63
    126c:	cd bf       	out	0x3d, r28	; 61
    126e:	cf 91       	pop	r28
    1270:	df 91       	pop	r29
    1272:	1f 91       	pop	r17
    1274:	0f 91       	pop	r16
    1276:	ff 90       	pop	r15
    1278:	ef 90       	pop	r14
    127a:	df 90       	pop	r13
    127c:	cf 90       	pop	r12
    127e:	08 95       	ret

00001280 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
    1280:	08 95       	ret

00001282 <USB_Host_WaitForIOS>:

	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
    1282:	1f 93       	push	r17
    1284:	cf 93       	push	r28
    1286:	df 93       	push	r29
    1288:	18 2f       	mov	r17, r24
    128a:	c8 ee       	ldi	r28, 0xE8	; 232
    128c:	d3 e0       	ldi	r29, 0x03	; 3
    128e:	09 c0       	rjmp	.+18     	; 0x12a2 <USB_Host_WaitForIOS+0x20>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1290:	81 e0       	ldi	r24, 0x01	; 1
    1292:	87 db       	rcall	.-2290   	; 0x9a2 <USB_Host_WaitMS>
    1294:	88 23       	and	r24, r24
    1296:	d1 f4       	brne	.+52     	; 0x12cc <USB_Host_WaitForIOS+0x4a>
		  return ErrorCode;

		if (!(TimeoutCounter--))
    1298:	20 97       	sbiw	r28, 0x00	; 0
    129a:	11 f4       	brne	.+4      	; 0x12a0 <USB_Host_WaitForIOS+0x1e>
    129c:	84 e0       	ldi	r24, 0x04	; 4
    129e:	16 c0       	rjmp	.+44     	; 0x12cc <USB_Host_WaitForIOS+0x4a>
    12a0:	21 97       	sbiw	r28, 0x01	; 1
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    12a2:	11 23       	and	r17, r17
    12a4:	29 f4       	brne	.+10     	; 0x12b0 <USB_Host_WaitForIOS+0x2e>
			 *  \return Boolean \c true if the current pipe is ready for a SETUP packet, \c false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
    12a6:	80 91 a6 00 	lds	r24, 0x00A6
    12aa:	83 ff       	sbrs	r24, 3
    12ac:	f1 cf       	rjmp	.-30     	; 0x1290 <USB_Host_WaitForIOS+0xe>
    12ae:	0d c0       	rjmp	.+26     	; 0x12ca <USB_Host_WaitForIOS+0x48>
    12b0:	11 30       	cpi	r17, 0x01	; 1
    12b2:	29 f4       	brne	.+10     	; 0x12be <USB_Host_WaitForIOS+0x3c>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    12b4:	80 91 a6 00 	lds	r24, 0x00A6
    12b8:	80 ff       	sbrs	r24, 0
    12ba:	ea cf       	rjmp	.-44     	; 0x1290 <USB_Host_WaitForIOS+0xe>
    12bc:	06 c0       	rjmp	.+12     	; 0x12ca <USB_Host_WaitForIOS+0x48>
    12be:	12 30       	cpi	r17, 0x02	; 2
    12c0:	39 f7       	brne	.-50     	; 0x1290 <USB_Host_WaitForIOS+0xe>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
    12c2:	80 91 a6 00 	lds	r24, 0x00A6
    12c6:	82 ff       	sbrs	r24, 2
    12c8:	e3 cf       	rjmp	.-58     	; 0x1290 <USB_Host_WaitForIOS+0xe>
    12ca:	80 e0       	ldi	r24, 0x00	; 0
		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
}
    12cc:	df 91       	pop	r29
    12ce:	cf 91       	pop	r28
    12d0:	1f 91       	pop	r17
    12d2:	08 95       	ret

000012d4 <USB_Host_SendControlRequest>:
#include "HostStandardReq.h"

uint8_t USB_Host_ConfigurationNumber;

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
    12d4:	ff 92       	push	r15
    12d6:	0f 93       	push	r16
    12d8:	1f 93       	push	r17
    12da:	cf 93       	push	r28
    12dc:	df 93       	push	r29
    12de:	18 2f       	mov	r17, r24
    12e0:	09 2f       	mov	r16, r25
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
    12e2:	f0 90 9e 00 	lds	r15, 0x009E
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
	bool     BusSuspended = USB_Host_IsBusSuspended();
	uint8_t  ReturnStatus = HOST_SENDCONTROL_Successful;
	uint16_t DataLen      = USB_ControlRequest.wLength;
    12e6:	c0 91 47 01 	lds	r28, 0x0147
    12ea:	d0 91 48 01 	lds	r29, 0x0148
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    12ee:	80 91 9e 00 	lds	r24, 0x009E
    12f2:	81 60       	ori	r24, 0x01	; 1
    12f4:	80 93 9e 00 	sts	0x009E, r24

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    12f8:	81 e0       	ldi	r24, 0x01	; 1
    12fa:	53 db       	rcall	.-2394   	; 0x9a2 <USB_Host_WaitMS>
    12fc:	98 2f       	mov	r25, r24
    12fe:	88 23       	and	r24, r24
    1300:	09 f0       	breq	.+2      	; 0x1304 <USB_Host_SendControlRequest+0x30>
    1302:	d7 c0       	rjmp	.+430    	; 0x14b2 <USB_Host_SendControlRequest+0x1de>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1304:	80 91 aa 00 	lds	r24, 0x00AA
    1308:	8f 7c       	andi	r24, 0xCF	; 207
    130a:	80 93 aa 00 	sts	0x00AA, r24

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
    130e:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
    1312:	80 91 a6 00 	lds	r24, 0x00A6
    1316:	8f 7e       	andi	r24, 0xEF	; 239
    1318:	80 93 a6 00 	sts	0x00A6, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    131c:	80 91 a9 00 	lds	r24, 0x00A9
    1320:	8f 7b       	andi	r24, 0xBF	; 191
    1322:	80 93 a9 00 	sts	0x00A9, r24
    1326:	e1 e4       	ldi	r30, 0x41	; 65
    1328:	f1 e0       	ldi	r31, 0x01	; 1
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
	  Pipe_Write_8(*(HeaderStream++));	
    132a:	81 91       	ld	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    132c:	80 93 af 00 	sts	0x00AF, r24
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
    1330:	81 e0       	ldi	r24, 0x01	; 1
    1332:	e9 34       	cpi	r30, 0x49	; 73
    1334:	f8 07       	cpc	r31, r24
    1336:	c9 f7       	brne	.-14     	; 0x132a <USB_Host_SendControlRequest+0x56>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
    1338:	80 91 a6 00 	lds	r24, 0x00A6
    133c:	87 77       	andi	r24, 0x77	; 119
    133e:	80 93 a6 00 	sts	0x00A6, r24
	  Pipe_Write_8(*(HeaderStream++));	
	#endif
	
	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
    1342:	80 e0       	ldi	r24, 0x00	; 0
    1344:	9e df       	rcall	.-196    	; 0x1282 <USB_Host_WaitForIOS>
    1346:	98 2f       	mov	r25, r24
    1348:	88 23       	and	r24, r24
    134a:	09 f0       	breq	.+2      	; 0x134e <USB_Host_SendControlRequest+0x7a>
    134c:	b2 c0       	rjmp	.+356    	; 0x14b2 <USB_Host_SendControlRequest+0x1de>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    134e:	80 91 a9 00 	lds	r24, 0x00A9
    1352:	80 64       	ori	r24, 0x40	; 64
    1354:	80 93 a9 00 	sts	0x00A9, r24
	  goto End_Of_Control_Send;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1358:	81 e0       	ldi	r24, 0x01	; 1
    135a:	23 db       	rcall	.-2490   	; 0x9a2 <USB_Host_WaitMS>
    135c:	98 2f       	mov	r25, r24
    135e:	88 23       	and	r24, r24
    1360:	09 f0       	breq	.+2      	; 0x1364 <USB_Host_SendControlRequest+0x90>
    1362:	a7 c0       	rjmp	.+334    	; 0x14b2 <USB_Host_SendControlRequest+0x1de>

uint8_t USB_Host_ConfigurationNumber;

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
    1364:	21 2f       	mov	r18, r17
    1366:	30 2f       	mov	r19, r16
    1368:	c9 01       	movw	r24, r18
    136a:	8c 01       	movw	r16, r24
	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
	  goto End_Of_Control_Send;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
    136c:	80 91 41 01 	lds	r24, 0x0141
    1370:	87 ff       	sbrs	r24, 7
    1372:	52 c0       	rjmp	.+164    	; 0x1418 <USB_Host_SendControlRequest+0x144>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1374:	80 91 aa 00 	lds	r24, 0x00AA
    1378:	8f 7c       	andi	r24, 0xCF	; 207
    137a:	80 61       	ori	r24, 0x10	; 16
    137c:	80 93 aa 00 	sts	0x00AA, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
    1380:	01 15       	cp	r16, r1
    1382:	11 05       	cpc	r17, r1
    1384:	69 f5       	brne	.+90     	; 0x13e0 <USB_Host_SendControlRequest+0x10c>
    1386:	2e c0       	rjmp	.+92     	; 0x13e4 <USB_Host_SendControlRequest+0x110>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1388:	80 91 a9 00 	lds	r24, 0x00A9
    138c:	8f 7b       	andi	r24, 0xBF	; 191
    138e:	80 93 a9 00 	sts	0x00A9, r24
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    1392:	81 e0       	ldi	r24, 0x01	; 1
    1394:	76 df       	rcall	.-276    	; 0x1282 <USB_Host_WaitForIOS>
    1396:	98 2f       	mov	r25, r24
    1398:	88 23       	and	r24, r24
    139a:	09 f0       	breq	.+2      	; 0x139e <USB_Host_SendControlRequest+0xca>
    139c:	8a c0       	rjmp	.+276    	; 0x14b2 <USB_Host_SendControlRequest+0x1de>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    139e:	80 91 f6 00 	lds	r24, 0x00F6
    13a2:	90 91 f7 00 	lds	r25, 0x00F7
				  goto End_Of_Control_Send;

				if (!(Pipe_BytesInPipe()))
    13a6:	89 2b       	or	r24, r25
    13a8:	49 f4       	brne	.+18     	; 0x13bc <USB_Host_SendControlRequest+0xe8>
    13aa:	c0 e0       	ldi	r28, 0x00	; 0
    13ac:	d0 e0       	ldi	r29, 0x00	; 0
    13ae:	06 c0       	rjmp	.+12     	; 0x13bc <USB_Host_SendControlRequest+0xe8>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    13b0:	80 91 af 00 	lds	r24, 0x00AF
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
				{
					*(DataStream++) = Pipe_Read_8();
    13b4:	f8 01       	movw	r30, r16
    13b6:	81 93       	st	Z+, r24
    13b8:	8f 01       	movw	r16, r30
					DataLen--;
    13ba:	21 97       	sbiw	r28, 0x01	; 1
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    13bc:	80 91 f6 00 	lds	r24, 0x00F6
    13c0:	90 91 f7 00 	lds	r25, 0x00F7
				  goto End_Of_Control_Send;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
    13c4:	89 2b       	or	r24, r25
    13c6:	11 f0       	breq	.+4      	; 0x13cc <USB_Host_SendControlRequest+0xf8>
    13c8:	20 97       	sbiw	r28, 0x00	; 0
    13ca:	91 f7       	brne	.-28     	; 0x13b0 <USB_Host_SendControlRequest+0xdc>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    13cc:	80 91 a9 00 	lds	r24, 0x00A9
    13d0:	80 64       	ori	r24, 0x40	; 64
    13d2:	80 93 a9 00 	sts	0x00A9, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    13d6:	80 91 a6 00 	lds	r24, 0x00A6
    13da:	8e 77       	andi	r24, 0x7E	; 126
    13dc:	80 93 a6 00 	sts	0x00A6, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
    13e0:	20 97       	sbiw	r28, 0x00	; 0
    13e2:	91 f6       	brne	.-92     	; 0x1388 <USB_Host_SendControlRequest+0xb4>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    13e4:	80 91 aa 00 	lds	r24, 0x00AA
    13e8:	8f 7c       	andi	r24, 0xCF	; 207
    13ea:	80 62       	ori	r24, 0x20	; 32
    13ec:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    13f0:	80 91 a9 00 	lds	r24, 0x00A9
    13f4:	8f 7b       	andi	r24, 0xBF	; 191
    13f6:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    13fa:	82 e0       	ldi	r24, 0x02	; 2
    13fc:	42 df       	rcall	.-380    	; 0x1282 <USB_Host_WaitForIOS>
    13fe:	98 2f       	mov	r25, r24
    1400:	88 23       	and	r24, r24
    1402:	09 f0       	breq	.+2      	; 0x1406 <USB_Host_SendControlRequest+0x132>
    1404:	56 c0       	rjmp	.+172    	; 0x14b2 <USB_Host_SendControlRequest+0x1de>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1406:	80 91 a6 00 	lds	r24, 0x00A6
    140a:	8b 77       	andi	r24, 0x7B	; 123
    140c:	80 93 a6 00 	sts	0x00A6, r24
		  goto End_Of_Control_Send;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1410:	82 e0       	ldi	r24, 0x02	; 2
    1412:	37 df       	rcall	.-402    	; 0x1282 <USB_Host_WaitForIOS>
    1414:	98 2f       	mov	r25, r24
    1416:	4d c0       	rjmp	.+154    	; 0x14b2 <USB_Host_SendControlRequest+0x1de>
		  goto End_Of_Control_Send;
	}
	else
	{
		if (DataStream != NULL)
    1418:	01 15       	cp	r16, r1
    141a:	11 05       	cpc	r17, r1
    141c:	a9 f1       	breq	.+106    	; 0x1488 <USB_Host_SendControlRequest+0x1b4>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    141e:	80 91 aa 00 	lds	r24, 0x00AA
    1422:	8f 7c       	andi	r24, 0xCF	; 207
    1424:	80 62       	ori	r24, 0x20	; 32
    1426:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    142a:	80 91 a9 00 	lds	r24, 0x00A9
    142e:	8f 7b       	andi	r24, 0xBF	; 191
    1430:	80 93 a9 00 	sts	0x00A9, r24
    1434:	1d c0       	rjmp	.+58     	; 0x1470 <USB_Host_SendControlRequest+0x19c>
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1436:	82 e0       	ldi	r24, 0x02	; 2
    1438:	24 df       	rcall	.-440    	; 0x1282 <USB_Host_WaitForIOS>
    143a:	98 2f       	mov	r25, r24
    143c:	88 23       	and	r24, r24
    143e:	c9 f5       	brne	.+114    	; 0x14b2 <USB_Host_SendControlRequest+0x1de>
				  goto End_Of_Control_Send;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    1440:	80 91 39 01 	lds	r24, 0x0139
    1444:	28 2f       	mov	r18, r24
    1446:	30 e0       	ldi	r19, 0x00	; 0
    1448:	07 c0       	rjmp	.+14     	; 0x1458 <USB_Host_SendControlRequest+0x184>
				{
					Pipe_Write_8(*(DataStream++));
    144a:	f8 01       	movw	r30, r16
    144c:	81 91       	ld	r24, Z+
    144e:	8f 01       	movw	r16, r30
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    1450:	80 93 af 00 	sts	0x00AF, r24
					DataLen--;
    1454:	21 97       	sbiw	r28, 0x01	; 1
			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
				  goto End_Of_Control_Send;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    1456:	39 f0       	breq	.+14     	; 0x1466 <USB_Host_SendControlRequest+0x192>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1458:	80 91 f6 00 	lds	r24, 0x00F6
    145c:	90 91 f7 00 	lds	r25, 0x00F7
    1460:	82 17       	cp	r24, r18
    1462:	93 07       	cpc	r25, r19
    1464:	90 f3       	brcs	.-28     	; 0x144a <USB_Host_SendControlRequest+0x176>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1466:	80 91 a6 00 	lds	r24, 0x00A6
    146a:	8b 77       	andi	r24, 0x7B	; 123
    146c:	80 93 a6 00 	sts	0x00A6, r24
		if (DataStream != NULL)
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
    1470:	20 97       	sbiw	r28, 0x00	; 0
    1472:	09 f7       	brne	.-62     	; 0x1436 <USB_Host_SendControlRequest+0x162>
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1474:	82 e0       	ldi	r24, 0x02	; 2
    1476:	05 df       	rcall	.-502    	; 0x1282 <USB_Host_WaitForIOS>
    1478:	98 2f       	mov	r25, r24
    147a:	88 23       	and	r24, r24
    147c:	d1 f4       	brne	.+52     	; 0x14b2 <USB_Host_SendControlRequest+0x1de>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    147e:	80 91 a9 00 	lds	r24, 0x00A9
    1482:	80 64       	ori	r24, 0x40	; 64
    1484:	80 93 a9 00 	sts	0x00A9, r24
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1488:	80 91 aa 00 	lds	r24, 0x00AA
    148c:	8f 7c       	andi	r24, 0xCF	; 207
    148e:	80 61       	ori	r24, 0x10	; 16
    1490:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1494:	80 91 a9 00 	lds	r24, 0x00A9
    1498:	8f 7b       	andi	r24, 0xBF	; 191
    149a:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    149e:	81 e0       	ldi	r24, 0x01	; 1
    14a0:	f0 de       	rcall	.-544    	; 0x1282 <USB_Host_WaitForIOS>
    14a2:	98 2f       	mov	r25, r24
    14a4:	88 23       	and	r24, r24
    14a6:	29 f4       	brne	.+10     	; 0x14b2 <USB_Host_SendControlRequest+0x1de>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    14a8:	80 91 a6 00 	lds	r24, 0x00A6
    14ac:	8e 77       	andi	r24, 0x7E	; 126
    14ae:	80 93 a6 00 	sts	0x00A6, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    14b2:	80 91 a9 00 	lds	r24, 0x00A9
    14b6:	80 64       	ori	r24, 0x40	; 64
    14b8:	80 93 a9 00 	sts	0x00A9, r24
	}

End_Of_Control_Send:
	Pipe_Freeze();

	if (BusSuspended)
    14bc:	f0 fc       	sbrc	r15, 0
    14be:	05 c0       	rjmp	.+10     	; 0x14ca <USB_Host_SendControlRequest+0x1f6>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    14c0:	80 91 9e 00 	lds	r24, 0x009E
    14c4:	8e 7f       	andi	r24, 0xFE	; 254
    14c6:	80 93 9e 00 	sts	0x009E, r24
			 *  \param[in] PipeNumber  Index of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t PipeNumber)
			{
				UPRST = (1 << PipeNumber);
    14ca:	81 e0       	ldi	r24, 0x01	; 1
    14cc:	80 93 a8 00 	sts	0x00A8, r24
				UPRST = 0;
    14d0:	10 92 a8 00 	sts	0x00A8, r1
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
    14d4:	89 2f       	mov	r24, r25
    14d6:	df 91       	pop	r29
    14d8:	cf 91       	pop	r28
    14da:	1f 91       	pop	r17
    14dc:	0f 91       	pop	r16
    14de:	ff 90       	pop	r15
    14e0:	08 95       	ret

000014e2 <USB_Host_SetInterfaceAltSetting>:
}

uint8_t USB_Host_SetInterfaceAltSetting(const uint8_t InterfaceIndex,
                                        const uint8_t AltSetting)
{
	USB_ControlRequest = (USB_Request_Header_t)
    14e2:	e1 e4       	ldi	r30, 0x41	; 65
    14e4:	f1 e0       	ldi	r31, 0x01	; 1
    14e6:	91 e0       	ldi	r25, 0x01	; 1
    14e8:	90 93 41 01 	sts	0x0141, r25
    14ec:	9b e0       	ldi	r25, 0x0B	; 11
    14ee:	90 93 42 01 	sts	0x0142, r25
    14f2:	60 93 43 01 	sts	0x0143, r22
    14f6:	13 82       	std	Z+3, r1	; 0x03
    14f8:	80 93 45 01 	sts	0x0145, r24
    14fc:	15 82       	std	Z+5, r1	; 0x05
    14fe:	10 92 48 01 	sts	0x0148, r1
    1502:	10 92 47 01 	sts	0x0147, r1
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1506:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	return USB_Host_SendControlRequest(NULL);
    150a:	80 e0       	ldi	r24, 0x00	; 0
    150c:	90 e0       	ldi	r25, 0x00	; 0
}
    150e:	e2 ce       	rjmp	.-572    	; 0x12d4 <USB_Host_SendControlRequest>

00001510 <USB_Host_SetDeviceConfiguration>:

	return HOST_SENDCONTROL_Successful;
}

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
    1510:	1f 93       	push	r17
    1512:	18 2f       	mov	r17, r24
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
    1514:	10 92 41 01 	sts	0x0141, r1
    1518:	89 e0       	ldi	r24, 0x09	; 9
    151a:	80 93 42 01 	sts	0x0142, r24
    151e:	10 93 43 01 	sts	0x0143, r17
    1522:	10 92 44 01 	sts	0x0144, r1
    1526:	10 92 46 01 	sts	0x0146, r1
    152a:	10 92 45 01 	sts	0x0145, r1
    152e:	10 92 48 01 	sts	0x0148, r1
    1532:	10 92 47 01 	sts	0x0147, r1
    1536:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);
	
	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) == HOST_SENDCONTROL_Successful)
    153a:	80 e0       	ldi	r24, 0x00	; 0
    153c:	90 e0       	ldi	r25, 0x00	; 0
    153e:	ca de       	rcall	.-620    	; 0x12d4 <USB_Host_SendControlRequest>
    1540:	88 23       	and	r24, r24
    1542:	49 f4       	brne	.+18     	; 0x1556 <USB_Host_SetDeviceConfiguration+0x46>
	{
		USB_Host_ConfigurationNumber = ConfigNumber;
    1544:	10 93 3f 01 	sts	0x013F, r17
		USB_HostState                = (ConfigNumber) ? HOST_STATE_Configured : HOST_STATE_Addressed;
    1548:	11 23       	and	r17, r17
    154a:	11 f4       	brne	.+4      	; 0x1550 <USB_Host_SetDeviceConfiguration+0x40>
    154c:	9a e0       	ldi	r25, 0x0A	; 10
    154e:	01 c0       	rjmp	.+2      	; 0x1552 <USB_Host_SetDeviceConfiguration+0x42>
    1550:	9b e0       	ldi	r25, 0x0B	; 11
    1552:	90 93 49 01 	sts	0x0149, r25
	}

	return ErrorCode;
}
    1556:	1f 91       	pop	r17
    1558:	08 95       	ret

0000155a <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    155a:	ff 92       	push	r15
    155c:	0f 93       	push	r16
    155e:	1f 93       	push	r17
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
    1560:	07 ea       	ldi	r16, 0xA7	; 167
    1562:	10 e0       	ldi	r17, 0x00	; 0
    1564:	f8 01       	movw	r30, r16
    1566:	f0 80       	ld	r15, Z
    1568:	f7 e0       	ldi	r31, 0x07	; 7
    156a:	ff 22       	and	r15, r31
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    156c:	f8 01       	movw	r30, r16
    156e:	10 82       	st	Z, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    1570:	b5 da       	rcall	.-2710   	; 0xadc <USB_Host_ProcessNextHostState>
    1572:	f8 01       	movw	r30, r16
    1574:	f0 82       	st	Z, r15
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
    1576:	1f 91       	pop	r17
    1578:	0f 91       	pop	r16
    157a:	ff 90       	pop	r15
    157c:	08 95       	ret

0000157e <Serial_putchar>:

FILE USARTSerialStream;

int Serial_putchar(char DataByte,
                   FILE *Stream)
{
    157e:	98 2f       	mov	r25, r24
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
    1580:	80 91 c8 00 	lds	r24, 0x00C8
    1584:	85 ff       	sbrs	r24, 5
    1586:	fc cf       	rjmp	.-8      	; 0x1580 <Serial_putchar+0x2>
				UDR1 = DataByte;
    1588:	90 93 ce 00 	sts	0x00CE, r25
	(void)Stream;

	Serial_SendByte(DataByte);
	return 0;
}
    158c:	80 e0       	ldi	r24, 0x00	; 0
    158e:	90 e0       	ldi	r25, 0x00	; 0
    1590:	08 95       	ret

00001592 <Serial_getchar>:
			 *  \return Boolean \c true if a character has been received, \c false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    1592:	80 91 c8 00 	lds	r24, 0x00C8

int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    1596:	87 fd       	sbrc	r24, 7
    1598:	03 c0       	rjmp	.+6      	; 0x15a0 <Serial_getchar+0xe>
    159a:	2e ef       	ldi	r18, 0xFE	; 254
    159c:	3f ef       	ldi	r19, 0xFF	; 255
    159e:	0b c0       	rjmp	.+22     	; 0x15b6 <Serial_getchar+0x24>
    15a0:	80 91 c8 00 	lds	r24, 0x00C8
			 *  \return Next byte received from the USART, or a negative value if no byte has been received.
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
    15a4:	87 fd       	sbrc	r24, 7
    15a6:	03 c0       	rjmp	.+6      	; 0x15ae <Serial_getchar+0x1c>
    15a8:	2f ef       	ldi	r18, 0xFF	; 255
    15aa:	3f ef       	ldi	r19, 0xFF	; 255
    15ac:	04 c0       	rjmp	.+8      	; 0x15b6 <Serial_getchar+0x24>
				  return -1;
				
				return UDR1;
    15ae:	80 91 ce 00 	lds	r24, 0x00CE
    15b2:	28 2f       	mov	r18, r24
    15b4:	30 e0       	ldi	r19, 0x00	; 0
	  return _FDEV_EOF;

	return Serial_ReceiveByte();
}
    15b6:	c9 01       	movw	r24, r18
    15b8:	08 95       	ret

000015ba <memmove>:
    15ba:	68 17       	cp	r22, r24
    15bc:	79 07       	cpc	r23, r25
    15be:	68 f4       	brcc	.+26     	; 0x15da <memmove+0x20>
    15c0:	fb 01       	movw	r30, r22
    15c2:	dc 01       	movw	r26, r24
    15c4:	e4 0f       	add	r30, r20
    15c6:	f5 1f       	adc	r31, r21
    15c8:	a4 0f       	add	r26, r20
    15ca:	b5 1f       	adc	r27, r21
    15cc:	02 c0       	rjmp	.+4      	; 0x15d2 <memmove+0x18>
    15ce:	02 90       	ld	r0, -Z
    15d0:	0e 92       	st	-X, r0
    15d2:	41 50       	subi	r20, 0x01	; 1
    15d4:	50 40       	sbci	r21, 0x00	; 0
    15d6:	d8 f7       	brcc	.-10     	; 0x15ce <memmove+0x14>
    15d8:	08 95       	ret
    15da:	5b c2       	rjmp	.+1206   	; 0x1a92 <memcpy>

000015dc <printf_P>:
    15dc:	df 93       	push	r29
    15de:	cf 93       	push	r28
    15e0:	cd b7       	in	r28, 0x3d	; 61
    15e2:	de b7       	in	r29, 0x3e	; 62
    15e4:	fe 01       	movw	r30, r28
    15e6:	35 96       	adiw	r30, 0x05	; 5
    15e8:	61 91       	ld	r22, Z+
    15ea:	71 91       	ld	r23, Z+
    15ec:	a0 91 5a 01 	lds	r26, 0x015A
    15f0:	b0 91 5b 01 	lds	r27, 0x015B
    15f4:	13 96       	adiw	r26, 0x03	; 3
    15f6:	8c 91       	ld	r24, X
    15f8:	13 97       	sbiw	r26, 0x03	; 3
    15fa:	88 60       	ori	r24, 0x08	; 8
    15fc:	13 96       	adiw	r26, 0x03	; 3
    15fe:	8c 93       	st	X, r24
    1600:	80 91 5a 01 	lds	r24, 0x015A
    1604:	90 91 5b 01 	lds	r25, 0x015B
    1608:	af 01       	movw	r20, r30
    160a:	3f d0       	rcall	.+126    	; 0x168a <vfprintf>
    160c:	e0 91 5a 01 	lds	r30, 0x015A
    1610:	f0 91 5b 01 	lds	r31, 0x015B
    1614:	23 81       	ldd	r18, Z+3	; 0x03
    1616:	27 7f       	andi	r18, 0xF7	; 247
    1618:	23 83       	std	Z+3, r18	; 0x03
    161a:	cf 91       	pop	r28
    161c:	df 91       	pop	r29
    161e:	08 95       	ret

00001620 <puts_P>:
    1620:	0f 93       	push	r16
    1622:	1f 93       	push	r17
    1624:	cf 93       	push	r28
    1626:	df 93       	push	r29
    1628:	ec 01       	movw	r28, r24
    162a:	e0 91 5a 01 	lds	r30, 0x015A
    162e:	f0 91 5b 01 	lds	r31, 0x015B
    1632:	83 81       	ldd	r24, Z+3	; 0x03
    1634:	81 ff       	sbrs	r24, 1
    1636:	21 c0       	rjmp	.+66     	; 0x167a <puts_P+0x5a>
    1638:	00 e0       	ldi	r16, 0x00	; 0
    163a:	10 e0       	ldi	r17, 0x00	; 0
    163c:	0e c0       	rjmp	.+28     	; 0x165a <puts_P+0x3a>
    163e:	e0 91 5a 01 	lds	r30, 0x015A
    1642:	f0 91 5b 01 	lds	r31, 0x015B
    1646:	20 85       	ldd	r18, Z+8	; 0x08
    1648:	31 85       	ldd	r19, Z+9	; 0x09
    164a:	bf 01       	movw	r22, r30
    164c:	f9 01       	movw	r30, r18
    164e:	09 95       	icall
    1650:	89 2b       	or	r24, r25
    1652:	11 f0       	breq	.+4      	; 0x1658 <puts_P+0x38>
    1654:	0f ef       	ldi	r16, 0xFF	; 255
    1656:	1f ef       	ldi	r17, 0xFF	; 255
    1658:	21 96       	adiw	r28, 0x01	; 1
    165a:	fe 01       	movw	r30, r28
    165c:	84 91       	lpm	r24, Z+
    165e:	88 23       	and	r24, r24
    1660:	71 f7       	brne	.-36     	; 0x163e <puts_P+0x1e>
    1662:	e0 91 5a 01 	lds	r30, 0x015A
    1666:	f0 91 5b 01 	lds	r31, 0x015B
    166a:	20 85       	ldd	r18, Z+8	; 0x08
    166c:	31 85       	ldd	r19, Z+9	; 0x09
    166e:	8a e0       	ldi	r24, 0x0A	; 10
    1670:	bf 01       	movw	r22, r30
    1672:	f9 01       	movw	r30, r18
    1674:	09 95       	icall
    1676:	89 2b       	or	r24, r25
    1678:	11 f0       	breq	.+4      	; 0x167e <puts_P+0x5e>
    167a:	0f ef       	ldi	r16, 0xFF	; 255
    167c:	1f ef       	ldi	r17, 0xFF	; 255
    167e:	c8 01       	movw	r24, r16
    1680:	df 91       	pop	r29
    1682:	cf 91       	pop	r28
    1684:	1f 91       	pop	r17
    1686:	0f 91       	pop	r16
    1688:	08 95       	ret

0000168a <vfprintf>:
    168a:	2f 92       	push	r2
    168c:	3f 92       	push	r3
    168e:	4f 92       	push	r4
    1690:	5f 92       	push	r5
    1692:	6f 92       	push	r6
    1694:	7f 92       	push	r7
    1696:	8f 92       	push	r8
    1698:	9f 92       	push	r9
    169a:	af 92       	push	r10
    169c:	bf 92       	push	r11
    169e:	cf 92       	push	r12
    16a0:	df 92       	push	r13
    16a2:	ef 92       	push	r14
    16a4:	ff 92       	push	r15
    16a6:	0f 93       	push	r16
    16a8:	1f 93       	push	r17
    16aa:	df 93       	push	r29
    16ac:	cf 93       	push	r28
    16ae:	cd b7       	in	r28, 0x3d	; 61
    16b0:	de b7       	in	r29, 0x3e	; 62
    16b2:	2b 97       	sbiw	r28, 0x0b	; 11
    16b4:	0f b6       	in	r0, 0x3f	; 63
    16b6:	f8 94       	cli
    16b8:	de bf       	out	0x3e, r29	; 62
    16ba:	0f be       	out	0x3f, r0	; 63
    16bc:	cd bf       	out	0x3d, r28	; 61
    16be:	3c 01       	movw	r6, r24
    16c0:	2b 01       	movw	r4, r22
    16c2:	5a 01       	movw	r10, r20
    16c4:	fc 01       	movw	r30, r24
    16c6:	17 82       	std	Z+7, r1	; 0x07
    16c8:	16 82       	std	Z+6, r1	; 0x06
    16ca:	83 81       	ldd	r24, Z+3	; 0x03
    16cc:	81 fd       	sbrc	r24, 1
    16ce:	03 c0       	rjmp	.+6      	; 0x16d6 <vfprintf+0x4c>
    16d0:	6f ef       	ldi	r22, 0xFF	; 255
    16d2:	7f ef       	ldi	r23, 0xFF	; 255
    16d4:	b9 c1       	rjmp	.+882    	; 0x1a48 <vfprintf+0x3be>
    16d6:	9a e0       	ldi	r25, 0x0A	; 10
    16d8:	89 2e       	mov	r8, r25
    16da:	1e 01       	movw	r2, r28
    16dc:	08 94       	sec
    16de:	21 1c       	adc	r2, r1
    16e0:	31 1c       	adc	r3, r1
    16e2:	f3 01       	movw	r30, r6
    16e4:	23 81       	ldd	r18, Z+3	; 0x03
    16e6:	f2 01       	movw	r30, r4
    16e8:	23 fd       	sbrc	r18, 3
    16ea:	85 91       	lpm	r24, Z+
    16ec:	23 ff       	sbrs	r18, 3
    16ee:	81 91       	ld	r24, Z+
    16f0:	2f 01       	movw	r4, r30
    16f2:	88 23       	and	r24, r24
    16f4:	09 f4       	brne	.+2      	; 0x16f8 <vfprintf+0x6e>
    16f6:	a5 c1       	rjmp	.+842    	; 0x1a42 <vfprintf+0x3b8>
    16f8:	85 32       	cpi	r24, 0x25	; 37
    16fa:	39 f4       	brne	.+14     	; 0x170a <vfprintf+0x80>
    16fc:	23 fd       	sbrc	r18, 3
    16fe:	85 91       	lpm	r24, Z+
    1700:	23 ff       	sbrs	r18, 3
    1702:	81 91       	ld	r24, Z+
    1704:	2f 01       	movw	r4, r30
    1706:	85 32       	cpi	r24, 0x25	; 37
    1708:	21 f4       	brne	.+8      	; 0x1712 <vfprintf+0x88>
    170a:	90 e0       	ldi	r25, 0x00	; 0
    170c:	b3 01       	movw	r22, r6
    170e:	d5 d1       	rcall	.+938    	; 0x1aba <fputc>
    1710:	e8 cf       	rjmp	.-48     	; 0x16e2 <vfprintf+0x58>
    1712:	98 2f       	mov	r25, r24
    1714:	ff 24       	eor	r15, r15
    1716:	ee 24       	eor	r14, r14
    1718:	99 24       	eor	r9, r9
    171a:	ff e1       	ldi	r31, 0x1F	; 31
    171c:	ff 15       	cp	r31, r15
    171e:	d0 f0       	brcs	.+52     	; 0x1754 <vfprintf+0xca>
    1720:	9b 32       	cpi	r25, 0x2B	; 43
    1722:	69 f0       	breq	.+26     	; 0x173e <vfprintf+0xb4>
    1724:	9c 32       	cpi	r25, 0x2C	; 44
    1726:	28 f4       	brcc	.+10     	; 0x1732 <vfprintf+0xa8>
    1728:	90 32       	cpi	r25, 0x20	; 32
    172a:	59 f0       	breq	.+22     	; 0x1742 <vfprintf+0xb8>
    172c:	93 32       	cpi	r25, 0x23	; 35
    172e:	91 f4       	brne	.+36     	; 0x1754 <vfprintf+0xca>
    1730:	0e c0       	rjmp	.+28     	; 0x174e <vfprintf+0xc4>
    1732:	9d 32       	cpi	r25, 0x2D	; 45
    1734:	49 f0       	breq	.+18     	; 0x1748 <vfprintf+0xbe>
    1736:	90 33       	cpi	r25, 0x30	; 48
    1738:	69 f4       	brne	.+26     	; 0x1754 <vfprintf+0xca>
    173a:	41 e0       	ldi	r20, 0x01	; 1
    173c:	24 c0       	rjmp	.+72     	; 0x1786 <vfprintf+0xfc>
    173e:	52 e0       	ldi	r21, 0x02	; 2
    1740:	f5 2a       	or	r15, r21
    1742:	84 e0       	ldi	r24, 0x04	; 4
    1744:	f8 2a       	or	r15, r24
    1746:	28 c0       	rjmp	.+80     	; 0x1798 <vfprintf+0x10e>
    1748:	98 e0       	ldi	r25, 0x08	; 8
    174a:	f9 2a       	or	r15, r25
    174c:	25 c0       	rjmp	.+74     	; 0x1798 <vfprintf+0x10e>
    174e:	e0 e1       	ldi	r30, 0x10	; 16
    1750:	fe 2a       	or	r15, r30
    1752:	22 c0       	rjmp	.+68     	; 0x1798 <vfprintf+0x10e>
    1754:	f7 fc       	sbrc	r15, 7
    1756:	29 c0       	rjmp	.+82     	; 0x17aa <vfprintf+0x120>
    1758:	89 2f       	mov	r24, r25
    175a:	80 53       	subi	r24, 0x30	; 48
    175c:	8a 30       	cpi	r24, 0x0A	; 10
    175e:	70 f4       	brcc	.+28     	; 0x177c <vfprintf+0xf2>
    1760:	f6 fe       	sbrs	r15, 6
    1762:	05 c0       	rjmp	.+10     	; 0x176e <vfprintf+0xe4>
    1764:	98 9c       	mul	r9, r8
    1766:	90 2c       	mov	r9, r0
    1768:	11 24       	eor	r1, r1
    176a:	98 0e       	add	r9, r24
    176c:	15 c0       	rjmp	.+42     	; 0x1798 <vfprintf+0x10e>
    176e:	e8 9c       	mul	r14, r8
    1770:	e0 2c       	mov	r14, r0
    1772:	11 24       	eor	r1, r1
    1774:	e8 0e       	add	r14, r24
    1776:	f0 e2       	ldi	r31, 0x20	; 32
    1778:	ff 2a       	or	r15, r31
    177a:	0e c0       	rjmp	.+28     	; 0x1798 <vfprintf+0x10e>
    177c:	9e 32       	cpi	r25, 0x2E	; 46
    177e:	29 f4       	brne	.+10     	; 0x178a <vfprintf+0x100>
    1780:	f6 fc       	sbrc	r15, 6
    1782:	5f c1       	rjmp	.+702    	; 0x1a42 <vfprintf+0x3b8>
    1784:	40 e4       	ldi	r20, 0x40	; 64
    1786:	f4 2a       	or	r15, r20
    1788:	07 c0       	rjmp	.+14     	; 0x1798 <vfprintf+0x10e>
    178a:	9c 36       	cpi	r25, 0x6C	; 108
    178c:	19 f4       	brne	.+6      	; 0x1794 <vfprintf+0x10a>
    178e:	50 e8       	ldi	r21, 0x80	; 128
    1790:	f5 2a       	or	r15, r21
    1792:	02 c0       	rjmp	.+4      	; 0x1798 <vfprintf+0x10e>
    1794:	98 36       	cpi	r25, 0x68	; 104
    1796:	49 f4       	brne	.+18     	; 0x17aa <vfprintf+0x120>
    1798:	f2 01       	movw	r30, r4
    179a:	23 fd       	sbrc	r18, 3
    179c:	95 91       	lpm	r25, Z+
    179e:	23 ff       	sbrs	r18, 3
    17a0:	91 91       	ld	r25, Z+
    17a2:	2f 01       	movw	r4, r30
    17a4:	99 23       	and	r25, r25
    17a6:	09 f0       	breq	.+2      	; 0x17aa <vfprintf+0x120>
    17a8:	b8 cf       	rjmp	.-144    	; 0x171a <vfprintf+0x90>
    17aa:	89 2f       	mov	r24, r25
    17ac:	85 54       	subi	r24, 0x45	; 69
    17ae:	83 30       	cpi	r24, 0x03	; 3
    17b0:	18 f0       	brcs	.+6      	; 0x17b8 <vfprintf+0x12e>
    17b2:	80 52       	subi	r24, 0x20	; 32
    17b4:	83 30       	cpi	r24, 0x03	; 3
    17b6:	38 f4       	brcc	.+14     	; 0x17c6 <vfprintf+0x13c>
    17b8:	44 e0       	ldi	r20, 0x04	; 4
    17ba:	50 e0       	ldi	r21, 0x00	; 0
    17bc:	a4 0e       	add	r10, r20
    17be:	b5 1e       	adc	r11, r21
    17c0:	5f e3       	ldi	r21, 0x3F	; 63
    17c2:	59 83       	std	Y+1, r21	; 0x01
    17c4:	0f c0       	rjmp	.+30     	; 0x17e4 <vfprintf+0x15a>
    17c6:	93 36       	cpi	r25, 0x63	; 99
    17c8:	31 f0       	breq	.+12     	; 0x17d6 <vfprintf+0x14c>
    17ca:	93 37       	cpi	r25, 0x73	; 115
    17cc:	79 f0       	breq	.+30     	; 0x17ec <vfprintf+0x162>
    17ce:	93 35       	cpi	r25, 0x53	; 83
    17d0:	09 f0       	breq	.+2      	; 0x17d4 <vfprintf+0x14a>
    17d2:	52 c0       	rjmp	.+164    	; 0x1878 <vfprintf+0x1ee>
    17d4:	1f c0       	rjmp	.+62     	; 0x1814 <vfprintf+0x18a>
    17d6:	f5 01       	movw	r30, r10
    17d8:	80 81       	ld	r24, Z
    17da:	89 83       	std	Y+1, r24	; 0x01
    17dc:	42 e0       	ldi	r20, 0x02	; 2
    17de:	50 e0       	ldi	r21, 0x00	; 0
    17e0:	a4 0e       	add	r10, r20
    17e2:	b5 1e       	adc	r11, r21
    17e4:	61 01       	movw	r12, r2
    17e6:	01 e0       	ldi	r16, 0x01	; 1
    17e8:	10 e0       	ldi	r17, 0x00	; 0
    17ea:	11 c0       	rjmp	.+34     	; 0x180e <vfprintf+0x184>
    17ec:	f5 01       	movw	r30, r10
    17ee:	c0 80       	ld	r12, Z
    17f0:	d1 80       	ldd	r13, Z+1	; 0x01
    17f2:	f6 fc       	sbrc	r15, 6
    17f4:	03 c0       	rjmp	.+6      	; 0x17fc <vfprintf+0x172>
    17f6:	6f ef       	ldi	r22, 0xFF	; 255
    17f8:	7f ef       	ldi	r23, 0xFF	; 255
    17fa:	02 c0       	rjmp	.+4      	; 0x1800 <vfprintf+0x176>
    17fc:	69 2d       	mov	r22, r9
    17fe:	70 e0       	ldi	r23, 0x00	; 0
    1800:	42 e0       	ldi	r20, 0x02	; 2
    1802:	50 e0       	ldi	r21, 0x00	; 0
    1804:	a4 0e       	add	r10, r20
    1806:	b5 1e       	adc	r11, r21
    1808:	c6 01       	movw	r24, r12
    180a:	4c d1       	rcall	.+664    	; 0x1aa4 <strnlen>
    180c:	8c 01       	movw	r16, r24
    180e:	5f e7       	ldi	r21, 0x7F	; 127
    1810:	f5 22       	and	r15, r21
    1812:	13 c0       	rjmp	.+38     	; 0x183a <vfprintf+0x1b0>
    1814:	f5 01       	movw	r30, r10
    1816:	c0 80       	ld	r12, Z
    1818:	d1 80       	ldd	r13, Z+1	; 0x01
    181a:	f6 fc       	sbrc	r15, 6
    181c:	03 c0       	rjmp	.+6      	; 0x1824 <vfprintf+0x19a>
    181e:	6f ef       	ldi	r22, 0xFF	; 255
    1820:	7f ef       	ldi	r23, 0xFF	; 255
    1822:	02 c0       	rjmp	.+4      	; 0x1828 <vfprintf+0x19e>
    1824:	69 2d       	mov	r22, r9
    1826:	70 e0       	ldi	r23, 0x00	; 0
    1828:	42 e0       	ldi	r20, 0x02	; 2
    182a:	50 e0       	ldi	r21, 0x00	; 0
    182c:	a4 0e       	add	r10, r20
    182e:	b5 1e       	adc	r11, r21
    1830:	c6 01       	movw	r24, r12
    1832:	24 d1       	rcall	.+584    	; 0x1a7c <strnlen_P>
    1834:	8c 01       	movw	r16, r24
    1836:	50 e8       	ldi	r21, 0x80	; 128
    1838:	f5 2a       	or	r15, r21
    183a:	f3 fe       	sbrs	r15, 3
    183c:	06 c0       	rjmp	.+12     	; 0x184a <vfprintf+0x1c0>
    183e:	18 c0       	rjmp	.+48     	; 0x1870 <vfprintf+0x1e6>
    1840:	80 e2       	ldi	r24, 0x20	; 32
    1842:	90 e0       	ldi	r25, 0x00	; 0
    1844:	b3 01       	movw	r22, r6
    1846:	39 d1       	rcall	.+626    	; 0x1aba <fputc>
    1848:	ea 94       	dec	r14
    184a:	8e 2d       	mov	r24, r14
    184c:	90 e0       	ldi	r25, 0x00	; 0
    184e:	08 17       	cp	r16, r24
    1850:	19 07       	cpc	r17, r25
    1852:	b0 f3       	brcs	.-20     	; 0x1840 <vfprintf+0x1b6>
    1854:	0d c0       	rjmp	.+26     	; 0x1870 <vfprintf+0x1e6>
    1856:	f6 01       	movw	r30, r12
    1858:	f7 fc       	sbrc	r15, 7
    185a:	85 91       	lpm	r24, Z+
    185c:	f7 fe       	sbrs	r15, 7
    185e:	81 91       	ld	r24, Z+
    1860:	6f 01       	movw	r12, r30
    1862:	90 e0       	ldi	r25, 0x00	; 0
    1864:	b3 01       	movw	r22, r6
    1866:	29 d1       	rcall	.+594    	; 0x1aba <fputc>
    1868:	e1 10       	cpse	r14, r1
    186a:	ea 94       	dec	r14
    186c:	01 50       	subi	r16, 0x01	; 1
    186e:	10 40       	sbci	r17, 0x00	; 0
    1870:	01 15       	cp	r16, r1
    1872:	11 05       	cpc	r17, r1
    1874:	81 f7       	brne	.-32     	; 0x1856 <vfprintf+0x1cc>
    1876:	e2 c0       	rjmp	.+452    	; 0x1a3c <vfprintf+0x3b2>
    1878:	94 36       	cpi	r25, 0x64	; 100
    187a:	11 f0       	breq	.+4      	; 0x1880 <vfprintf+0x1f6>
    187c:	99 36       	cpi	r25, 0x69	; 105
    187e:	61 f5       	brne	.+88     	; 0x18d8 <vfprintf+0x24e>
    1880:	f7 fe       	sbrs	r15, 7
    1882:	08 c0       	rjmp	.+16     	; 0x1894 <vfprintf+0x20a>
    1884:	f5 01       	movw	r30, r10
    1886:	20 81       	ld	r18, Z
    1888:	31 81       	ldd	r19, Z+1	; 0x01
    188a:	42 81       	ldd	r20, Z+2	; 0x02
    188c:	53 81       	ldd	r21, Z+3	; 0x03
    188e:	84 e0       	ldi	r24, 0x04	; 4
    1890:	90 e0       	ldi	r25, 0x00	; 0
    1892:	0a c0       	rjmp	.+20     	; 0x18a8 <vfprintf+0x21e>
    1894:	f5 01       	movw	r30, r10
    1896:	80 81       	ld	r24, Z
    1898:	91 81       	ldd	r25, Z+1	; 0x01
    189a:	9c 01       	movw	r18, r24
    189c:	44 27       	eor	r20, r20
    189e:	37 fd       	sbrc	r19, 7
    18a0:	40 95       	com	r20
    18a2:	54 2f       	mov	r21, r20
    18a4:	82 e0       	ldi	r24, 0x02	; 2
    18a6:	90 e0       	ldi	r25, 0x00	; 0
    18a8:	a8 0e       	add	r10, r24
    18aa:	b9 1e       	adc	r11, r25
    18ac:	9f e6       	ldi	r25, 0x6F	; 111
    18ae:	f9 22       	and	r15, r25
    18b0:	57 ff       	sbrs	r21, 7
    18b2:	09 c0       	rjmp	.+18     	; 0x18c6 <vfprintf+0x23c>
    18b4:	50 95       	com	r21
    18b6:	40 95       	com	r20
    18b8:	30 95       	com	r19
    18ba:	21 95       	neg	r18
    18bc:	3f 4f       	sbci	r19, 0xFF	; 255
    18be:	4f 4f       	sbci	r20, 0xFF	; 255
    18c0:	5f 4f       	sbci	r21, 0xFF	; 255
    18c2:	e0 e8       	ldi	r30, 0x80	; 128
    18c4:	fe 2a       	or	r15, r30
    18c6:	ca 01       	movw	r24, r20
    18c8:	b9 01       	movw	r22, r18
    18ca:	a1 01       	movw	r20, r2
    18cc:	2a e0       	ldi	r18, 0x0A	; 10
    18ce:	30 e0       	ldi	r19, 0x00	; 0
    18d0:	20 d1       	rcall	.+576    	; 0x1b12 <__ultoa_invert>
    18d2:	d8 2e       	mov	r13, r24
    18d4:	d2 18       	sub	r13, r2
    18d6:	3f c0       	rjmp	.+126    	; 0x1956 <vfprintf+0x2cc>
    18d8:	95 37       	cpi	r25, 0x75	; 117
    18da:	29 f4       	brne	.+10     	; 0x18e6 <vfprintf+0x25c>
    18dc:	1f 2d       	mov	r17, r15
    18de:	1f 7e       	andi	r17, 0xEF	; 239
    18e0:	2a e0       	ldi	r18, 0x0A	; 10
    18e2:	30 e0       	ldi	r19, 0x00	; 0
    18e4:	1d c0       	rjmp	.+58     	; 0x1920 <vfprintf+0x296>
    18e6:	1f 2d       	mov	r17, r15
    18e8:	19 7f       	andi	r17, 0xF9	; 249
    18ea:	9f 36       	cpi	r25, 0x6F	; 111
    18ec:	61 f0       	breq	.+24     	; 0x1906 <vfprintf+0x27c>
    18ee:	90 37       	cpi	r25, 0x70	; 112
    18f0:	20 f4       	brcc	.+8      	; 0x18fa <vfprintf+0x270>
    18f2:	98 35       	cpi	r25, 0x58	; 88
    18f4:	09 f0       	breq	.+2      	; 0x18f8 <vfprintf+0x26e>
    18f6:	a5 c0       	rjmp	.+330    	; 0x1a42 <vfprintf+0x3b8>
    18f8:	0f c0       	rjmp	.+30     	; 0x1918 <vfprintf+0x28e>
    18fa:	90 37       	cpi	r25, 0x70	; 112
    18fc:	39 f0       	breq	.+14     	; 0x190c <vfprintf+0x282>
    18fe:	98 37       	cpi	r25, 0x78	; 120
    1900:	09 f0       	breq	.+2      	; 0x1904 <vfprintf+0x27a>
    1902:	9f c0       	rjmp	.+318    	; 0x1a42 <vfprintf+0x3b8>
    1904:	04 c0       	rjmp	.+8      	; 0x190e <vfprintf+0x284>
    1906:	28 e0       	ldi	r18, 0x08	; 8
    1908:	30 e0       	ldi	r19, 0x00	; 0
    190a:	0a c0       	rjmp	.+20     	; 0x1920 <vfprintf+0x296>
    190c:	10 61       	ori	r17, 0x10	; 16
    190e:	14 fd       	sbrc	r17, 4
    1910:	14 60       	ori	r17, 0x04	; 4
    1912:	20 e1       	ldi	r18, 0x10	; 16
    1914:	30 e0       	ldi	r19, 0x00	; 0
    1916:	04 c0       	rjmp	.+8      	; 0x1920 <vfprintf+0x296>
    1918:	14 fd       	sbrc	r17, 4
    191a:	16 60       	ori	r17, 0x06	; 6
    191c:	20 e1       	ldi	r18, 0x10	; 16
    191e:	32 e0       	ldi	r19, 0x02	; 2
    1920:	17 ff       	sbrs	r17, 7
    1922:	08 c0       	rjmp	.+16     	; 0x1934 <vfprintf+0x2aa>
    1924:	f5 01       	movw	r30, r10
    1926:	60 81       	ld	r22, Z
    1928:	71 81       	ldd	r23, Z+1	; 0x01
    192a:	82 81       	ldd	r24, Z+2	; 0x02
    192c:	93 81       	ldd	r25, Z+3	; 0x03
    192e:	44 e0       	ldi	r20, 0x04	; 4
    1930:	50 e0       	ldi	r21, 0x00	; 0
    1932:	08 c0       	rjmp	.+16     	; 0x1944 <vfprintf+0x2ba>
    1934:	f5 01       	movw	r30, r10
    1936:	80 81       	ld	r24, Z
    1938:	91 81       	ldd	r25, Z+1	; 0x01
    193a:	bc 01       	movw	r22, r24
    193c:	80 e0       	ldi	r24, 0x00	; 0
    193e:	90 e0       	ldi	r25, 0x00	; 0
    1940:	42 e0       	ldi	r20, 0x02	; 2
    1942:	50 e0       	ldi	r21, 0x00	; 0
    1944:	a4 0e       	add	r10, r20
    1946:	b5 1e       	adc	r11, r21
    1948:	a1 01       	movw	r20, r2
    194a:	e3 d0       	rcall	.+454    	; 0x1b12 <__ultoa_invert>
    194c:	d8 2e       	mov	r13, r24
    194e:	d2 18       	sub	r13, r2
    1950:	8f e7       	ldi	r24, 0x7F	; 127
    1952:	f8 2e       	mov	r15, r24
    1954:	f1 22       	and	r15, r17
    1956:	f6 fe       	sbrs	r15, 6
    1958:	0b c0       	rjmp	.+22     	; 0x1970 <vfprintf+0x2e6>
    195a:	5e ef       	ldi	r21, 0xFE	; 254
    195c:	f5 22       	and	r15, r21
    195e:	d9 14       	cp	r13, r9
    1960:	38 f4       	brcc	.+14     	; 0x1970 <vfprintf+0x2e6>
    1962:	f4 fe       	sbrs	r15, 4
    1964:	07 c0       	rjmp	.+14     	; 0x1974 <vfprintf+0x2ea>
    1966:	f2 fc       	sbrc	r15, 2
    1968:	05 c0       	rjmp	.+10     	; 0x1974 <vfprintf+0x2ea>
    196a:	8f ee       	ldi	r24, 0xEF	; 239
    196c:	f8 22       	and	r15, r24
    196e:	02 c0       	rjmp	.+4      	; 0x1974 <vfprintf+0x2ea>
    1970:	1d 2d       	mov	r17, r13
    1972:	01 c0       	rjmp	.+2      	; 0x1976 <vfprintf+0x2ec>
    1974:	19 2d       	mov	r17, r9
    1976:	f4 fe       	sbrs	r15, 4
    1978:	0d c0       	rjmp	.+26     	; 0x1994 <vfprintf+0x30a>
    197a:	fe 01       	movw	r30, r28
    197c:	ed 0d       	add	r30, r13
    197e:	f1 1d       	adc	r31, r1
    1980:	80 81       	ld	r24, Z
    1982:	80 33       	cpi	r24, 0x30	; 48
    1984:	19 f4       	brne	.+6      	; 0x198c <vfprintf+0x302>
    1986:	99 ee       	ldi	r25, 0xE9	; 233
    1988:	f9 22       	and	r15, r25
    198a:	08 c0       	rjmp	.+16     	; 0x199c <vfprintf+0x312>
    198c:	1f 5f       	subi	r17, 0xFF	; 255
    198e:	f2 fe       	sbrs	r15, 2
    1990:	05 c0       	rjmp	.+10     	; 0x199c <vfprintf+0x312>
    1992:	03 c0       	rjmp	.+6      	; 0x199a <vfprintf+0x310>
    1994:	8f 2d       	mov	r24, r15
    1996:	86 78       	andi	r24, 0x86	; 134
    1998:	09 f0       	breq	.+2      	; 0x199c <vfprintf+0x312>
    199a:	1f 5f       	subi	r17, 0xFF	; 255
    199c:	0f 2d       	mov	r16, r15
    199e:	f3 fc       	sbrc	r15, 3
    19a0:	13 c0       	rjmp	.+38     	; 0x19c8 <vfprintf+0x33e>
    19a2:	f0 fe       	sbrs	r15, 0
    19a4:	0e c0       	rjmp	.+28     	; 0x19c2 <vfprintf+0x338>
    19a6:	1e 15       	cp	r17, r14
    19a8:	10 f0       	brcs	.+4      	; 0x19ae <vfprintf+0x324>
    19aa:	9d 2c       	mov	r9, r13
    19ac:	0a c0       	rjmp	.+20     	; 0x19c2 <vfprintf+0x338>
    19ae:	9d 2c       	mov	r9, r13
    19b0:	9e 0c       	add	r9, r14
    19b2:	91 1a       	sub	r9, r17
    19b4:	1e 2d       	mov	r17, r14
    19b6:	05 c0       	rjmp	.+10     	; 0x19c2 <vfprintf+0x338>
    19b8:	80 e2       	ldi	r24, 0x20	; 32
    19ba:	90 e0       	ldi	r25, 0x00	; 0
    19bc:	b3 01       	movw	r22, r6
    19be:	7d d0       	rcall	.+250    	; 0x1aba <fputc>
    19c0:	1f 5f       	subi	r17, 0xFF	; 255
    19c2:	1e 15       	cp	r17, r14
    19c4:	c8 f3       	brcs	.-14     	; 0x19b8 <vfprintf+0x32e>
    19c6:	04 c0       	rjmp	.+8      	; 0x19d0 <vfprintf+0x346>
    19c8:	1e 15       	cp	r17, r14
    19ca:	10 f4       	brcc	.+4      	; 0x19d0 <vfprintf+0x346>
    19cc:	e1 1a       	sub	r14, r17
    19ce:	01 c0       	rjmp	.+2      	; 0x19d2 <vfprintf+0x348>
    19d0:	ee 24       	eor	r14, r14
    19d2:	04 ff       	sbrs	r16, 4
    19d4:	0e c0       	rjmp	.+28     	; 0x19f2 <vfprintf+0x368>
    19d6:	80 e3       	ldi	r24, 0x30	; 48
    19d8:	90 e0       	ldi	r25, 0x00	; 0
    19da:	b3 01       	movw	r22, r6
    19dc:	6e d0       	rcall	.+220    	; 0x1aba <fputc>
    19de:	02 ff       	sbrs	r16, 2
    19e0:	1b c0       	rjmp	.+54     	; 0x1a18 <vfprintf+0x38e>
    19e2:	01 fd       	sbrc	r16, 1
    19e4:	03 c0       	rjmp	.+6      	; 0x19ec <vfprintf+0x362>
    19e6:	88 e7       	ldi	r24, 0x78	; 120
    19e8:	90 e0       	ldi	r25, 0x00	; 0
    19ea:	0e c0       	rjmp	.+28     	; 0x1a08 <vfprintf+0x37e>
    19ec:	88 e5       	ldi	r24, 0x58	; 88
    19ee:	90 e0       	ldi	r25, 0x00	; 0
    19f0:	0b c0       	rjmp	.+22     	; 0x1a08 <vfprintf+0x37e>
    19f2:	80 2f       	mov	r24, r16
    19f4:	86 78       	andi	r24, 0x86	; 134
    19f6:	81 f0       	breq	.+32     	; 0x1a18 <vfprintf+0x38e>
    19f8:	01 ff       	sbrs	r16, 1
    19fa:	02 c0       	rjmp	.+4      	; 0x1a00 <vfprintf+0x376>
    19fc:	8b e2       	ldi	r24, 0x2B	; 43
    19fe:	01 c0       	rjmp	.+2      	; 0x1a02 <vfprintf+0x378>
    1a00:	80 e2       	ldi	r24, 0x20	; 32
    1a02:	f7 fc       	sbrc	r15, 7
    1a04:	8d e2       	ldi	r24, 0x2D	; 45
    1a06:	90 e0       	ldi	r25, 0x00	; 0
    1a08:	b3 01       	movw	r22, r6
    1a0a:	57 d0       	rcall	.+174    	; 0x1aba <fputc>
    1a0c:	05 c0       	rjmp	.+10     	; 0x1a18 <vfprintf+0x38e>
    1a0e:	80 e3       	ldi	r24, 0x30	; 48
    1a10:	90 e0       	ldi	r25, 0x00	; 0
    1a12:	b3 01       	movw	r22, r6
    1a14:	52 d0       	rcall	.+164    	; 0x1aba <fputc>
    1a16:	9a 94       	dec	r9
    1a18:	d9 14       	cp	r13, r9
    1a1a:	c8 f3       	brcs	.-14     	; 0x1a0e <vfprintf+0x384>
    1a1c:	da 94       	dec	r13
    1a1e:	f1 01       	movw	r30, r2
    1a20:	ed 0d       	add	r30, r13
    1a22:	f1 1d       	adc	r31, r1
    1a24:	80 81       	ld	r24, Z
    1a26:	90 e0       	ldi	r25, 0x00	; 0
    1a28:	b3 01       	movw	r22, r6
    1a2a:	47 d0       	rcall	.+142    	; 0x1aba <fputc>
    1a2c:	dd 20       	and	r13, r13
    1a2e:	b1 f7       	brne	.-20     	; 0x1a1c <vfprintf+0x392>
    1a30:	05 c0       	rjmp	.+10     	; 0x1a3c <vfprintf+0x3b2>
    1a32:	80 e2       	ldi	r24, 0x20	; 32
    1a34:	90 e0       	ldi	r25, 0x00	; 0
    1a36:	b3 01       	movw	r22, r6
    1a38:	40 d0       	rcall	.+128    	; 0x1aba <fputc>
    1a3a:	ea 94       	dec	r14
    1a3c:	ee 20       	and	r14, r14
    1a3e:	c9 f7       	brne	.-14     	; 0x1a32 <vfprintf+0x3a8>
    1a40:	50 ce       	rjmp	.-864    	; 0x16e2 <vfprintf+0x58>
    1a42:	f3 01       	movw	r30, r6
    1a44:	66 81       	ldd	r22, Z+6	; 0x06
    1a46:	77 81       	ldd	r23, Z+7	; 0x07
    1a48:	cb 01       	movw	r24, r22
    1a4a:	2b 96       	adiw	r28, 0x0b	; 11
    1a4c:	0f b6       	in	r0, 0x3f	; 63
    1a4e:	f8 94       	cli
    1a50:	de bf       	out	0x3e, r29	; 62
    1a52:	0f be       	out	0x3f, r0	; 63
    1a54:	cd bf       	out	0x3d, r28	; 61
    1a56:	cf 91       	pop	r28
    1a58:	df 91       	pop	r29
    1a5a:	1f 91       	pop	r17
    1a5c:	0f 91       	pop	r16
    1a5e:	ff 90       	pop	r15
    1a60:	ef 90       	pop	r14
    1a62:	df 90       	pop	r13
    1a64:	cf 90       	pop	r12
    1a66:	bf 90       	pop	r11
    1a68:	af 90       	pop	r10
    1a6a:	9f 90       	pop	r9
    1a6c:	8f 90       	pop	r8
    1a6e:	7f 90       	pop	r7
    1a70:	6f 90       	pop	r6
    1a72:	5f 90       	pop	r5
    1a74:	4f 90       	pop	r4
    1a76:	3f 90       	pop	r3
    1a78:	2f 90       	pop	r2
    1a7a:	08 95       	ret

00001a7c <strnlen_P>:
    1a7c:	fc 01       	movw	r30, r24
    1a7e:	05 90       	lpm	r0, Z+
    1a80:	61 50       	subi	r22, 0x01	; 1
    1a82:	70 40       	sbci	r23, 0x00	; 0
    1a84:	01 10       	cpse	r0, r1
    1a86:	d8 f7       	brcc	.-10     	; 0x1a7e <strnlen_P+0x2>
    1a88:	80 95       	com	r24
    1a8a:	90 95       	com	r25
    1a8c:	8e 0f       	add	r24, r30
    1a8e:	9f 1f       	adc	r25, r31
    1a90:	08 95       	ret

00001a92 <memcpy>:
    1a92:	fb 01       	movw	r30, r22
    1a94:	dc 01       	movw	r26, r24
    1a96:	02 c0       	rjmp	.+4      	; 0x1a9c <memcpy+0xa>
    1a98:	01 90       	ld	r0, Z+
    1a9a:	0d 92       	st	X+, r0
    1a9c:	41 50       	subi	r20, 0x01	; 1
    1a9e:	50 40       	sbci	r21, 0x00	; 0
    1aa0:	d8 f7       	brcc	.-10     	; 0x1a98 <memcpy+0x6>
    1aa2:	08 95       	ret

00001aa4 <strnlen>:
    1aa4:	fc 01       	movw	r30, r24
    1aa6:	61 50       	subi	r22, 0x01	; 1
    1aa8:	70 40       	sbci	r23, 0x00	; 0
    1aaa:	01 90       	ld	r0, Z+
    1aac:	01 10       	cpse	r0, r1
    1aae:	d8 f7       	brcc	.-10     	; 0x1aa6 <strnlen+0x2>
    1ab0:	80 95       	com	r24
    1ab2:	90 95       	com	r25
    1ab4:	8e 0f       	add	r24, r30
    1ab6:	9f 1f       	adc	r25, r31
    1ab8:	08 95       	ret

00001aba <fputc>:
    1aba:	0f 93       	push	r16
    1abc:	1f 93       	push	r17
    1abe:	cf 93       	push	r28
    1ac0:	df 93       	push	r29
    1ac2:	8c 01       	movw	r16, r24
    1ac4:	eb 01       	movw	r28, r22
    1ac6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ac8:	81 ff       	sbrs	r24, 1
    1aca:	1b c0       	rjmp	.+54     	; 0x1b02 <fputc+0x48>
    1acc:	82 ff       	sbrs	r24, 2
    1ace:	0d c0       	rjmp	.+26     	; 0x1aea <fputc+0x30>
    1ad0:	2e 81       	ldd	r18, Y+6	; 0x06
    1ad2:	3f 81       	ldd	r19, Y+7	; 0x07
    1ad4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ad6:	9d 81       	ldd	r25, Y+5	; 0x05
    1ad8:	28 17       	cp	r18, r24
    1ada:	39 07       	cpc	r19, r25
    1adc:	64 f4       	brge	.+24     	; 0x1af6 <fputc+0x3c>
    1ade:	e8 81       	ld	r30, Y
    1ae0:	f9 81       	ldd	r31, Y+1	; 0x01
    1ae2:	01 93       	st	Z+, r16
    1ae4:	f9 83       	std	Y+1, r31	; 0x01
    1ae6:	e8 83       	st	Y, r30
    1ae8:	06 c0       	rjmp	.+12     	; 0x1af6 <fputc+0x3c>
    1aea:	e8 85       	ldd	r30, Y+8	; 0x08
    1aec:	f9 85       	ldd	r31, Y+9	; 0x09
    1aee:	80 2f       	mov	r24, r16
    1af0:	09 95       	icall
    1af2:	89 2b       	or	r24, r25
    1af4:	31 f4       	brne	.+12     	; 0x1b02 <fputc+0x48>
    1af6:	8e 81       	ldd	r24, Y+6	; 0x06
    1af8:	9f 81       	ldd	r25, Y+7	; 0x07
    1afa:	01 96       	adiw	r24, 0x01	; 1
    1afc:	9f 83       	std	Y+7, r25	; 0x07
    1afe:	8e 83       	std	Y+6, r24	; 0x06
    1b00:	02 c0       	rjmp	.+4      	; 0x1b06 <fputc+0x4c>
    1b02:	0f ef       	ldi	r16, 0xFF	; 255
    1b04:	1f ef       	ldi	r17, 0xFF	; 255
    1b06:	c8 01       	movw	r24, r16
    1b08:	df 91       	pop	r29
    1b0a:	cf 91       	pop	r28
    1b0c:	1f 91       	pop	r17
    1b0e:	0f 91       	pop	r16
    1b10:	08 95       	ret

00001b12 <__ultoa_invert>:
    1b12:	fa 01       	movw	r30, r20
    1b14:	aa 27       	eor	r26, r26
    1b16:	28 30       	cpi	r18, 0x08	; 8
    1b18:	51 f1       	breq	.+84     	; 0x1b6e <__ultoa_invert+0x5c>
    1b1a:	20 31       	cpi	r18, 0x10	; 16
    1b1c:	81 f1       	breq	.+96     	; 0x1b7e <__ultoa_invert+0x6c>
    1b1e:	e8 94       	clt
    1b20:	6f 93       	push	r22
    1b22:	6e 7f       	andi	r22, 0xFE	; 254
    1b24:	6e 5f       	subi	r22, 0xFE	; 254
    1b26:	7f 4f       	sbci	r23, 0xFF	; 255
    1b28:	8f 4f       	sbci	r24, 0xFF	; 255
    1b2a:	9f 4f       	sbci	r25, 0xFF	; 255
    1b2c:	af 4f       	sbci	r26, 0xFF	; 255
    1b2e:	b1 e0       	ldi	r27, 0x01	; 1
    1b30:	3e d0       	rcall	.+124    	; 0x1bae <__ultoa_invert+0x9c>
    1b32:	b4 e0       	ldi	r27, 0x04	; 4
    1b34:	3c d0       	rcall	.+120    	; 0x1bae <__ultoa_invert+0x9c>
    1b36:	67 0f       	add	r22, r23
    1b38:	78 1f       	adc	r23, r24
    1b3a:	89 1f       	adc	r24, r25
    1b3c:	9a 1f       	adc	r25, r26
    1b3e:	a1 1d       	adc	r26, r1
    1b40:	68 0f       	add	r22, r24
    1b42:	79 1f       	adc	r23, r25
    1b44:	8a 1f       	adc	r24, r26
    1b46:	91 1d       	adc	r25, r1
    1b48:	a1 1d       	adc	r26, r1
    1b4a:	6a 0f       	add	r22, r26
    1b4c:	71 1d       	adc	r23, r1
    1b4e:	81 1d       	adc	r24, r1
    1b50:	91 1d       	adc	r25, r1
    1b52:	a1 1d       	adc	r26, r1
    1b54:	20 d0       	rcall	.+64     	; 0x1b96 <__ultoa_invert+0x84>
    1b56:	09 f4       	brne	.+2      	; 0x1b5a <__ultoa_invert+0x48>
    1b58:	68 94       	set
    1b5a:	3f 91       	pop	r19
    1b5c:	2a e0       	ldi	r18, 0x0A	; 10
    1b5e:	26 9f       	mul	r18, r22
    1b60:	11 24       	eor	r1, r1
    1b62:	30 19       	sub	r19, r0
    1b64:	30 5d       	subi	r19, 0xD0	; 208
    1b66:	31 93       	st	Z+, r19
    1b68:	de f6       	brtc	.-74     	; 0x1b20 <__ultoa_invert+0xe>
    1b6a:	cf 01       	movw	r24, r30
    1b6c:	08 95       	ret
    1b6e:	46 2f       	mov	r20, r22
    1b70:	47 70       	andi	r20, 0x07	; 7
    1b72:	40 5d       	subi	r20, 0xD0	; 208
    1b74:	41 93       	st	Z+, r20
    1b76:	b3 e0       	ldi	r27, 0x03	; 3
    1b78:	0f d0       	rcall	.+30     	; 0x1b98 <__ultoa_invert+0x86>
    1b7a:	c9 f7       	brne	.-14     	; 0x1b6e <__ultoa_invert+0x5c>
    1b7c:	f6 cf       	rjmp	.-20     	; 0x1b6a <__ultoa_invert+0x58>
    1b7e:	46 2f       	mov	r20, r22
    1b80:	4f 70       	andi	r20, 0x0F	; 15
    1b82:	40 5d       	subi	r20, 0xD0	; 208
    1b84:	4a 33       	cpi	r20, 0x3A	; 58
    1b86:	18 f0       	brcs	.+6      	; 0x1b8e <__ultoa_invert+0x7c>
    1b88:	49 5d       	subi	r20, 0xD9	; 217
    1b8a:	31 fd       	sbrc	r19, 1
    1b8c:	40 52       	subi	r20, 0x20	; 32
    1b8e:	41 93       	st	Z+, r20
    1b90:	02 d0       	rcall	.+4      	; 0x1b96 <__ultoa_invert+0x84>
    1b92:	a9 f7       	brne	.-22     	; 0x1b7e <__ultoa_invert+0x6c>
    1b94:	ea cf       	rjmp	.-44     	; 0x1b6a <__ultoa_invert+0x58>
    1b96:	b4 e0       	ldi	r27, 0x04	; 4
    1b98:	a6 95       	lsr	r26
    1b9a:	97 95       	ror	r25
    1b9c:	87 95       	ror	r24
    1b9e:	77 95       	ror	r23
    1ba0:	67 95       	ror	r22
    1ba2:	ba 95       	dec	r27
    1ba4:	c9 f7       	brne	.-14     	; 0x1b98 <__ultoa_invert+0x86>
    1ba6:	00 97       	sbiw	r24, 0x00	; 0
    1ba8:	61 05       	cpc	r22, r1
    1baa:	71 05       	cpc	r23, r1
    1bac:	08 95       	ret
    1bae:	9b 01       	movw	r18, r22
    1bb0:	ac 01       	movw	r20, r24
    1bb2:	0a 2e       	mov	r0, r26
    1bb4:	06 94       	lsr	r0
    1bb6:	57 95       	ror	r21
    1bb8:	47 95       	ror	r20
    1bba:	37 95       	ror	r19
    1bbc:	27 95       	ror	r18
    1bbe:	ba 95       	dec	r27
    1bc0:	c9 f7       	brne	.-14     	; 0x1bb4 <__ultoa_invert+0xa2>
    1bc2:	62 0f       	add	r22, r18
    1bc4:	73 1f       	adc	r23, r19
    1bc6:	84 1f       	adc	r24, r20
    1bc8:	95 1f       	adc	r25, r21
    1bca:	a0 1d       	adc	r26, r0
    1bcc:	08 95       	ret

00001bce <_exit>:
    1bce:	f8 94       	cli

00001bd0 <__stop_program>:
    1bd0:	ff cf       	rjmp	.-2      	; 0x1bd0 <__stop_program>
