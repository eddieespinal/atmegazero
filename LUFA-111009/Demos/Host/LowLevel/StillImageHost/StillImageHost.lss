
StillImageHost.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  00001f7c  00002010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001f7c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000006a  00800112  00800112  00002022  2**0
                  ALLOC
  3 .debug_aranges 00000378  00000000  00000000  00002022  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000008df  00000000  00000000  0000239a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000541a  00000000  00000000  00002c79  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001842  00000000  00000000  00008093  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000441f  00000000  00000000  000098d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000530  00000000  00000000  0000dcf4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000024cb  00000000  00000000  0000e224  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000023db  00000000  00000000  000106ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000450  00000000  00000000  00012aca  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:

	/* Freeze the pipe after use */
	Pipe_Freeze();

	return IsEventReceived;
}
       0:	9f c1       	rjmp	.+830    	; 0x340 <__ctors_end>
		Pipe_DisablePipe();
	}
}

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
       2:	00 00       	nop
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
       4:	bb c1       	rjmp	.+886    	; 0x37c <__bad_interrupt>
{
	USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, AfterType);

	if (*BytesRem)
	  USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, Type);
}
       6:	00 00       	nop
	return USB_Host_SendControlRequest(NULL);
}

uint8_t USB_Host_SetInterfaceAltSetting(const uint8_t InterfaceIndex,
                                        const uint8_t AltSetting)
{
       8:	b9 c1       	rjmp	.+882    	; 0x37c <__bad_interrupt>

	return Serial_ReceiveByte();
}

int Serial_getchar_Blocking(FILE *Stream)
{
       a:	00 00       	nop
       c:	b7 c1       	rjmp	.+878    	; 0x37c <__bad_interrupt>
       e:	00 00       	nop
      10:	b5 c1       	rjmp	.+874    	; 0x37c <__bad_interrupt>
      12:	00 00       	nop
      14:	b3 c1       	rjmp	.+870    	; 0x37c <__bad_interrupt>
      16:	00 00       	nop
      18:	b1 c1       	rjmp	.+866    	; 0x37c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	af c1       	rjmp	.+862    	; 0x37c <__bad_interrupt>
      1e:	00 00       	nop
      20:	ad c1       	rjmp	.+858    	; 0x37c <__bad_interrupt>
      22:	00 00       	nop
      24:	ab c1       	rjmp	.+854    	; 0x37c <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 50 09 	jmp	0x12a0	; 0x12a0 <__vector_10>
      2c:	a7 c1       	rjmp	.+846    	; 0x37c <__bad_interrupt>
      2e:	00 00       	nop
      30:	a5 c1       	rjmp	.+842    	; 0x37c <__bad_interrupt>
      32:	00 00       	nop
      34:	a3 c1       	rjmp	.+838    	; 0x37c <__bad_interrupt>
      36:	00 00       	nop
      38:	a1 c1       	rjmp	.+834    	; 0x37c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	9f c1       	rjmp	.+830    	; 0x37c <__bad_interrupt>
      3e:	00 00       	nop
      40:	9d c1       	rjmp	.+826    	; 0x37c <__bad_interrupt>
      42:	00 00       	nop
      44:	9b c1       	rjmp	.+822    	; 0x37c <__bad_interrupt>
      46:	00 00       	nop
      48:	99 c1       	rjmp	.+818    	; 0x37c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	97 c1       	rjmp	.+814    	; 0x37c <__bad_interrupt>
      4e:	00 00       	nop
      50:	95 c1       	rjmp	.+810    	; 0x37c <__bad_interrupt>
      52:	00 00       	nop
      54:	93 c1       	rjmp	.+806    	; 0x37c <__bad_interrupt>
      56:	00 00       	nop
      58:	91 c1       	rjmp	.+802    	; 0x37c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	8f c1       	rjmp	.+798    	; 0x37c <__bad_interrupt>
      5e:	00 00       	nop
      60:	8d c1       	rjmp	.+794    	; 0x37c <__bad_interrupt>
      62:	00 00       	nop
      64:	8b c1       	rjmp	.+790    	; 0x37c <__bad_interrupt>
      66:	00 00       	nop
      68:	89 c1       	rjmp	.+786    	; 0x37c <__bad_interrupt>
      6a:	00 00       	nop
      6c:	87 c1       	rjmp	.+782    	; 0x37c <__bad_interrupt>
      6e:	00 00       	nop
      70:	85 c1       	rjmp	.+778    	; 0x37c <__bad_interrupt>
      72:	00 00       	nop
      74:	83 c1       	rjmp	.+774    	; 0x37c <__bad_interrupt>
      76:	00 00       	nop
      78:	81 c1       	rjmp	.+770    	; 0x37c <__bad_interrupt>
      7a:	00 00       	nop
      7c:	7f c1       	rjmp	.+766    	; 0x37c <__bad_interrupt>
      7e:	00 00       	nop
      80:	7d c1       	rjmp	.+762    	; 0x37c <__bad_interrupt>
      82:	00 00       	nop
      84:	7b c1       	rjmp	.+758    	; 0x37c <__bad_interrupt>
      86:	00 00       	nop
      88:	79 c1       	rjmp	.+754    	; 0x37c <__bad_interrupt>
      8a:	00 00       	nop
      8c:	77 c1       	rjmp	.+750    	; 0x37c <__bad_interrupt>
      8e:	00 00       	nop
      90:	75 c1       	rjmp	.+746    	; 0x37c <__bad_interrupt>
      92:	00 00       	nop
      94:	73 c1       	rjmp	.+742    	; 0x37c <__bad_interrupt>
      96:	00 00       	nop

00000098 <__c.4708>:
      98:	1b 5b 33 31 6d 43 6f 6d 6d 61 6e 64 20 45 72 72     .[31mCommand Err
      a8:	6f 72 20 28 25 53 29 2e 0d 0a 20 2d 2d 20 45 72     or (%S)... -- Er
      b8:	72 6f 72 20 43 6f 64 65 20 25 64 0d 0a 1b 5b 33     ror Code %d...[3
      c8:	37 6d 00                                            7m.

000000cb <__c.4706>:
      cb:	54 72 61 6e 73 61 63 74 69 6f 6e 20 46 61 69 6c     Transaction Fail
      db:	00                                                  .

000000dc <__c.4704>:
      dc:	52 65 73 70 6f 6e 73 65 20 43 6f 64 65 20 21 3d     Response Code !=
      ec:	20 4f 4b 00                                          OK.

000000f0 <__c.4619>:
      f0:	44 6f 6e 65 2e 0d 0a 00                             Done....

000000f8 <__c.4616>:
      f8:	43 6c 6f 73 69 6e 67 20 53 65 73 73 69 6f 6e 2e     Closing Session.
     108:	2e 2e 0d 0a 00                                      .....

0000010d <__c.4613>:
     10d:	4f 70 65 6e 69 6e 67 20 53 65 73 73 69 6f 6e 2e     Opening Session.
     11d:	2e 2e 0d 0a 00                                      .....

00000122 <__c.4611>:
     122:	20 20 20 44 65 76 69 63 65 20 56 65 72 73 69 6f        Device Versio
     132:	6e 3a 20 25 73 0d 0a 00                             n: %s...

0000013a <__c.4608>:
     13a:	20 20 20 4d 6f 64 65 6c 3a 20 25 73 0d 0a 00           Model: %s...

00000149 <__c.4605>:
     149:	20 20 20 4d 61 6e 75 66 61 63 74 75 72 65 72 3a        Manufacturer:
     159:	20 25 73 0d 0a 00                                    %s...

0000015f <__c.4598>:
     15f:	52 65 74 72 69 65 76 69 6e 67 20 44 65 76 69 63     Retrieving Devic
     16f:	65 20 49 6e 66 6f 2e 2e 2e 0d 0a 00                 e Info......

0000017b <__c.4588>:
     17b:	1b 5b 33 31 6d 44 65 76 20 45 6e 75 6d 20 45 72     .[31mDev Enum Er
     18b:	72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     ror.. -- Error C
     19b:	6f 64 65 20 25 64 0d 0a 20 2d 2d 20 53 75 62 20     ode %d.. -- Sub 
     1ab:	45 72 72 6f 72 20 43 6f 64 65 20 25 64 0d 0a 20     Error Code %d.. 
     1bb:	2d 2d 20 49 6e 20 53 74 61 74 65 20 25 64 0d 0a     -- In State %d..
     1cb:	1b 5b 33 37 6d 00                                   .[37m.

000001d1 <__c.4580>:
     1d1:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
     1e1:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 
     1f1:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

00000200 <__c.4572>:
     200:	53 74 69 6c 6c 20 49 6d 61 67 65 20 44 65 76 69     Still Image Devi
     210:	63 65 20 45 6e 75 6d 65 72 61 74 65 64 2e 0d 0a     ce Enumerated...
     220:	00                                                  .

00000221 <__c.4570>:
     221:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
     231:	6f 72 20 28 53 65 74 20 43 6f 6e 66 69 67 75 72     or (Set Configur
     241:	61 74 69 6f 6e 29 2e 0d 0a 20 2d 2d 20 45 72 72     ation)... -- Err
     251:	6f 72 20 43 6f 64 65 3a 20 25 64 0d 0a 1b 5b 33     or Code: %d...[3
     261:	37 6d 00                                            7m.

00000264 <__c.4568>:
     264:	20 2d 2d 20 45 72 72 6f 72 20 43 6f 64 65 3a 20      -- Error Code: 
     274:	25 64 0d 0a 1b 5b 33 37 6d 00                       %d...[37m.

0000027e <__c.4566>:
     27e:	1b 5b 33 31 6d 49 6e 76 61 6c 69 64 20 44 65 76     .[31mInvalid Dev
     28e:	69 63 65 2e 0d 0a 00                                ice....

00000295 <__c.4564>:
     295:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
     2a5:	6f 72 20 28 47 65 74 20 43 6f 6e 66 69 67 75 72     or (Get Configur
     2b5:	61 74 69 6f 6e 29 2e 0d 0a 00                       ation)....

000002bf <__c.4561>:
     2bf:	47 65 74 74 69 6e 67 20 43 6f 6e 66 69 67 20 44     Getting Config D
     2cf:	61 74 61 2e 0d 0a 00                                ata....

000002d6 <__c.4556>:
     2d6:	1b 5b 33 32 6d 0d 0a 44 65 76 69 63 65 20 55 6e     .[32m..Device Un
     2e6:	61 74 74 61 63 68 65 64 2e 0d 0a 1b 5b 33 37 6d     attached....[37m
     2f6:	00                                                  .

000002f7 <__c.4551>:
     2f7:	1b 5b 33 32 6d 44 65 76 69 63 65 20 41 74 74 61     .[32mDevice Atta
     307:	63 68 65 64 2e 0d 0a 1b 5b 33 37 6d 00              ched....[37m.

00000314 <__c.4537>:
     314:	1b 5b 33 36 6d 53 74 69 6c 6c 20 49 6d 61 67 65     .[36mStill Image
     324:	20 48 6f 73 74 20 44 65 6d 6f 20 72 75 6e 6e 69      Host Demo runni
     334:	6e 67 2e 0d 0a 1b 5b 33 37 6d 00 00                 ng....[37m..

00000340 <__ctors_end>:
     340:	11 24       	eor	r1, r1
     342:	1f be       	out	0x3f, r1	; 63
     344:	cf ef       	ldi	r28, 0xFF	; 255
     346:	d0 e2       	ldi	r29, 0x20	; 32
     348:	de bf       	out	0x3e, r29	; 62
     34a:	cd bf       	out	0x3d, r28	; 61

0000034c <__do_copy_data>:
     34c:	11 e0       	ldi	r17, 0x01	; 1
     34e:	a0 e0       	ldi	r26, 0x00	; 0
     350:	b1 e0       	ldi	r27, 0x01	; 1
     352:	ec e7       	ldi	r30, 0x7C	; 124
     354:	ff e1       	ldi	r31, 0x1F	; 31
     356:	00 e0       	ldi	r16, 0x00	; 0
     358:	0b bf       	out	0x3b, r16	; 59
     35a:	02 c0       	rjmp	.+4      	; 0x360 <__do_copy_data+0x14>
     35c:	07 90       	elpm	r0, Z+
     35e:	0d 92       	st	X+, r0
     360:	a2 31       	cpi	r26, 0x12	; 18
     362:	b1 07       	cpc	r27, r17
     364:	d9 f7       	brne	.-10     	; 0x35c <__do_copy_data+0x10>

00000366 <__do_clear_bss>:
     366:	11 e0       	ldi	r17, 0x01	; 1
     368:	a2 e1       	ldi	r26, 0x12	; 18
     36a:	b1 e0       	ldi	r27, 0x01	; 1
     36c:	01 c0       	rjmp	.+2      	; 0x370 <.do_clear_bss_start>

0000036e <.do_clear_bss_loop>:
     36e:	1d 92       	st	X+, r1

00000370 <.do_clear_bss_start>:
     370:	ac 37       	cpi	r26, 0x7C	; 124
     372:	b1 07       	cpc	r27, r17
     374:	e1 f7       	brne	.-8      	; 0x36e <.do_clear_bss_loop>
     376:	21 d3       	rcall	.+1602   	; 0x9ba <main>
     378:	0c 94 bc 0f 	jmp	0x1f78	; 0x1f78 <_exit>

0000037c <__bad_interrupt>:
     37c:	41 ce       	rjmp	.-894    	; 0x0 <__vectors>

0000037e <UnicodeToASCII>:
 *  \param[in] UnicodeString  Pointer to a Unicode encoded input string
 *  \param[out] Buffer        Pointer to a buffer where the converted ASCII string should be stored
 */
void UnicodeToASCII(uint8_t* UnicodeString,
                    char* Buffer)
{
     37e:	cf 93       	push	r28
     380:	df 93       	push	r29
     382:	fc 01       	movw	r30, r24
     384:	db 01       	movw	r26, r22
	/* Get the number of characters in the string, skip to the start of the string data */
	uint8_t CharactersRemaining = *(UnicodeString++);
     386:	20 81       	ld	r18, Z
     388:	eb 01       	movw	r28, r22
     38a:	92 2f       	mov	r25, r18
     38c:	04 c0       	rjmp	.+8      	; 0x396 <UnicodeToASCII+0x18>

	/* Loop through the entire unicode string */
	while (CharactersRemaining--)
	{
		/* Load in the next unicode character (only the lower byte, as only Unicode coded ASCII is supported) */
		*(Buffer++) = *UnicodeString;
     38e:	81 81       	ldd	r24, Z+1	; 0x01
     390:	89 93       	st	Y+, r24
     392:	91 50       	subi	r25, 0x01	; 1
     394:	32 96       	adiw	r30, 0x02	; 2
{
	/* Get the number of characters in the string, skip to the start of the string data */
	uint8_t CharactersRemaining = *(UnicodeString++);

	/* Loop through the entire unicode string */
	while (CharactersRemaining--)
     396:	99 23       	and	r25, r25
     398:	d1 f7       	brne	.-12     	; 0x38e <UnicodeToASCII+0x10>
		/* Jump to the next unicode character */
		UnicodeString += 2;
	}

	/* Null terminate the string */
	*Buffer = 0;
     39a:	a2 0f       	add	r26, r18
     39c:	b1 1d       	adc	r27, r1
     39e:	1c 92       	st	X, r1
}
     3a0:	df 91       	pop	r29
     3a2:	cf 91       	pop	r28
     3a4:	08 95       	ret

000003a6 <ShowCommandError>:
 *  \param[in] ErrorCode          Error code of the function which failed to complete successfully
 *  \param[in] ResponseCodeError  Indicates if the error is due to a command failed indication from the device, or a communication failure
 */
void ShowCommandError(uint8_t ErrorCode,
                      bool ResponseCodeError)
{
     3a6:	48 2f       	mov	r20, r24
	const char* FailureType = ((ResponseCodeError) ? PSTR("Response Code != OK") : PSTR("Transaction Fail"));
     3a8:	66 23       	and	r22, r22
     3aa:	19 f4       	brne	.+6      	; 0x3b2 <ShowCommandError+0xc>
     3ac:	2b ec       	ldi	r18, 0xCB	; 203
     3ae:	30 e0       	ldi	r19, 0x00	; 0
     3b0:	02 c0       	rjmp	.+4      	; 0x3b6 <ShowCommandError+0x10>
     3b2:	2c ed       	ldi	r18, 0xDC	; 220
     3b4:	30 e0       	ldi	r19, 0x00	; 0

	printf_P(PSTR(ESC_FG_RED "Command Error (%S).\r\n"
     3b6:	00 d0       	rcall	.+0      	; 0x3b8 <ShowCommandError+0x12>
     3b8:	00 d0       	rcall	.+0      	; 0x3ba <ShowCommandError+0x14>
     3ba:	00 d0       	rcall	.+0      	; 0x3bc <ShowCommandError+0x16>
     3bc:	ed b7       	in	r30, 0x3d	; 61
     3be:	fe b7       	in	r31, 0x3e	; 62
     3c0:	31 96       	adiw	r30, 0x01	; 1
     3c2:	88 e9       	ldi	r24, 0x98	; 152
     3c4:	90 e0       	ldi	r25, 0x00	; 0
     3c6:	ad b7       	in	r26, 0x3d	; 61
     3c8:	be b7       	in	r27, 0x3e	; 62
     3ca:	12 96       	adiw	r26, 0x02	; 2
     3cc:	9c 93       	st	X, r25
     3ce:	8e 93       	st	-X, r24
     3d0:	11 97       	sbiw	r26, 0x01	; 1
     3d2:	33 83       	std	Z+3, r19	; 0x03
     3d4:	22 83       	std	Z+2, r18	; 0x02
     3d6:	44 83       	std	Z+4, r20	; 0x04
     3d8:	15 82       	std	Z+5, r1	; 0x05
     3da:	0e 94 cc 0c 	call	0x1998	; 0x1998 <printf_P>
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     3de:	8b b1       	in	r24, 0x0b	; 11
     3e0:	8f 70       	andi	r24, 0x0F	; 15
     3e2:	80 69       	ori	r24, 0x90	; 144
     3e4:	8b b9       	out	0x0b, r24	; 11
     3e6:	8d b7       	in	r24, 0x3d	; 61
     3e8:	9e b7       	in	r25, 0x3e	; 62
     3ea:	06 96       	adiw	r24, 0x06	; 6
     3ec:	0f b6       	in	r0, 0x3f	; 63
     3ee:	f8 94       	cli
     3f0:	9e bf       	out	0x3e, r25	; 62
     3f2:	0f be       	out	0x3f, r0	; 63
     3f4:	8d bf       	out	0x3d, r24	; 61
	                         " -- Error Code %d\r\n" ESC_FG_WHITE), FailureType, ErrorCode);

	/* Indicate error via status LEDs */
	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
}
     3f6:	08 95       	ret

000003f8 <EVENT_USB_Host_DeviceEnumerationFailed>:
 *  enumerating an attached USB device.
 */
void EVENT_USB_Host_DeviceEnumerationFailed(const uint8_t ErrorCode,
                                            const uint8_t SubErrorCode)
{
	printf_P(PSTR(ESC_FG_RED "Dev Enum Error\r\n"
     3f8:	90 91 67 01 	lds	r25, 0x0167
     3fc:	2d b7       	in	r18, 0x3d	; 61
     3fe:	3e b7       	in	r19, 0x3e	; 62
     400:	28 50       	subi	r18, 0x08	; 8
     402:	30 40       	sbci	r19, 0x00	; 0
     404:	0f b6       	in	r0, 0x3f	; 63
     406:	f8 94       	cli
     408:	3e bf       	out	0x3e, r19	; 62
     40a:	0f be       	out	0x3f, r0	; 63
     40c:	2d bf       	out	0x3d, r18	; 61
     40e:	ed b7       	in	r30, 0x3d	; 61
     410:	fe b7       	in	r31, 0x3e	; 62
     412:	31 96       	adiw	r30, 0x01	; 1
     414:	2b e7       	ldi	r18, 0x7B	; 123
     416:	31 e0       	ldi	r19, 0x01	; 1
     418:	ad b7       	in	r26, 0x3d	; 61
     41a:	be b7       	in	r27, 0x3e	; 62
     41c:	12 96       	adiw	r26, 0x02	; 2
     41e:	3c 93       	st	X, r19
     420:	2e 93       	st	-X, r18
     422:	11 97       	sbiw	r26, 0x01	; 1
     424:	82 83       	std	Z+2, r24	; 0x02
     426:	13 82       	std	Z+3, r1	; 0x03
     428:	64 83       	std	Z+4, r22	; 0x04
     42a:	15 82       	std	Z+5, r1	; 0x05
     42c:	96 83       	std	Z+6, r25	; 0x06
     42e:	17 82       	std	Z+7, r1	; 0x07
     430:	0e 94 cc 0c 	call	0x1998	; 0x1998 <printf_P>
     434:	8b b1       	in	r24, 0x0b	; 11
     436:	8f 70       	andi	r24, 0x0F	; 15
     438:	80 69       	ori	r24, 0x90	; 144
     43a:	8b b9       	out	0x0b, r24	; 11
     43c:	2d b7       	in	r18, 0x3d	; 61
     43e:	3e b7       	in	r19, 0x3e	; 62
     440:	28 5f       	subi	r18, 0xF8	; 248
     442:	3f 4f       	sbci	r19, 0xFF	; 255
     444:	0f b6       	in	r0, 0x3f	; 63
     446:	f8 94       	cli
     448:	3e bf       	out	0x3e, r19	; 62
     44a:	0f be       	out	0x3f, r0	; 63
     44c:	2d bf       	out	0x3d, r18	; 61
	                         " -- Error Code %d\r\n"
	                         " -- Sub Error Code %d\r\n"
	                         " -- In State %d\r\n" ESC_FG_WHITE), ErrorCode, SubErrorCode, USB_HostState);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
}
     44e:	08 95       	ret

00000450 <EVENT_USB_Host_DeviceUnattached>:
/** Event handler for the USB_DeviceUnattached event. This indicates that a device has been removed from the host, and
 *  stops the library USB task management process.
 */
void EVENT_USB_Host_DeviceUnattached(void)
{
	puts_P(PSTR(ESC_FG_GREEN "\r\nDevice Unattached.\r\n" ESC_FG_WHITE));
     450:	86 ed       	ldi	r24, 0xD6	; 214
     452:	92 e0       	ldi	r25, 0x02	; 2
     454:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <puts_P>
     458:	8b b1       	in	r24, 0x0b	; 11
     45a:	8f 70       	andi	r24, 0x0F	; 15
     45c:	80 61       	ori	r24, 0x10	; 16
     45e:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
}
     460:	08 95       	ret

00000462 <EVENT_USB_Host_DeviceAttached>:
/** Event handler for the USB_DeviceAttached event. This indicates that a device has been attached to the host, and
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Host_DeviceAttached(void)
{
	puts_P(PSTR(ESC_FG_GREEN "Device Attached.\r\n" ESC_FG_WHITE));
     462:	87 ef       	ldi	r24, 0xF7	; 247
     464:	92 e0       	ldi	r25, 0x02	; 2
     466:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <puts_P>
     46a:	8b b1       	in	r24, 0x0b	; 11
     46c:	8f 70       	andi	r24, 0x0F	; 15
     46e:	80 6a       	ori	r24, 0xA0	; 160
     470:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
}
     472:	08 95       	ret

00000474 <StillImageHost_Task>:

/** Task to print device information through the serial port, and open/close a test PIMA session with the
 *  attached Still Image device.
 */
void StillImageHost_Task(void)
{
     474:	2f 92       	push	r2
     476:	3f 92       	push	r3
     478:	4f 92       	push	r4
     47a:	5f 92       	push	r5
     47c:	6f 92       	push	r6
     47e:	7f 92       	push	r7
     480:	8f 92       	push	r8
     482:	9f 92       	push	r9
     484:	af 92       	push	r10
     486:	bf 92       	push	r11
     488:	cf 92       	push	r12
     48a:	df 92       	push	r13
     48c:	ef 92       	push	r14
     48e:	ff 92       	push	r15
     490:	0f 93       	push	r16
     492:	1f 93       	push	r17
     494:	df 93       	push	r29
     496:	cf 93       	push	r28
     498:	00 d0       	rcall	.+0      	; 0x49a <StillImageHost_Task+0x26>
     49a:	0f 92       	push	r0
     49c:	cd b7       	in	r28, 0x3d	; 61
     49e:	de b7       	in	r29, 0x3e	; 62
	puts_P(PSTR("Done.\r\n"));

	/* Indicate device no longer busy */
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
	USB_Host_SetDeviceConfiguration(0);
}
     4a0:	2d b7       	in	r18, 0x3d	; 61
     4a2:	3e b7       	in	r19, 0x3e	; 62
     4a4:	3a 83       	std	Y+2, r19	; 0x02
     4a6:	29 83       	std	Y+1, r18	; 0x01

/** Task to print device information through the serial port, and open/close a test PIMA session with the
 *  attached Still Image device.
 */
void StillImageHost_Task(void)
{
     4a8:	2d b6       	in	r2, 0x3d	; 61
     4aa:	3e b7       	in	r19, 0x3e	; 62
     4ac:	3b 83       	std	Y+3, r19	; 0x03
	if (USB_HostState != HOST_STATE_Configured)
     4ae:	80 91 67 01 	lds	r24, 0x0167
     4b2:	8b 30       	cpi	r24, 0x0B	; 11
     4b4:	09 f0       	breq	.+2      	; 0x4b8 <StillImageHost_Task+0x44>
     4b6:	af c1       	rjmp	.+862    	; 0x816 <StillImageHost_Task+0x3a2>
     4b8:	8b b1       	in	r24, 0x0b	; 11
     4ba:	8f 70       	andi	r24, 0x0F	; 15
     4bc:	80 62       	ori	r24, 0x20	; 32
     4be:	8b b9       	out	0x0b, r24	; 11
	uint8_t ErrorCode;

	/* Indicate device busy via the status LEDs */
	LEDs_SetAllLEDs(LEDMASK_USB_BUSY);

	puts_P(PSTR("Retrieving Device Info...\r\n"));
     4c0:	8f e5       	ldi	r24, 0x5F	; 95
     4c2:	91 e0       	ldi	r25, 0x01	; 1
     4c4:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <puts_P>

	PIMA_SendBlock = (PIMA_Container_t)
     4c8:	28 e1       	ldi	r18, 0x18	; 24
     4ca:	32 2e       	mov	r3, r18
     4cc:	9d e2       	ldi	r25, 0x2D	; 45
     4ce:	49 2e       	mov	r4, r25
     4d0:	91 e0       	ldi	r25, 0x01	; 1
     4d2:	59 2e       	mov	r5, r25
     4d4:	d2 01       	movw	r26, r4
     4d6:	e3 2d       	mov	r30, r3
     4d8:	1d 92       	st	X+, r1
     4da:	ea 95       	dec	r30
     4dc:	e9 f7       	brne	.-6      	; 0x4d8 <StillImageHost_Task+0x64>
     4de:	8c e0       	ldi	r24, 0x0C	; 12
     4e0:	90 e0       	ldi	r25, 0x00	; 0
     4e2:	a0 e0       	ldi	r26, 0x00	; 0
     4e4:	b0 e0       	ldi	r27, 0x00	; 0
     4e6:	80 93 2d 01 	sts	0x012D, r24
     4ea:	90 93 2e 01 	sts	0x012E, r25
     4ee:	a0 93 2f 01 	sts	0x012F, r26
     4f2:	b0 93 30 01 	sts	0x0130, r27
     4f6:	81 e0       	ldi	r24, 0x01	; 1
     4f8:	90 e0       	ldi	r25, 0x00	; 0
     4fa:	90 93 32 01 	sts	0x0132, r25
     4fe:	80 93 31 01 	sts	0x0131, r24
     502:	81 e0       	ldi	r24, 0x01	; 1
     504:	90 e1       	ldi	r25, 0x10	; 16
     506:	90 93 34 01 	sts	0x0134, r25
     50a:	80 93 33 01 	sts	0x0133, r24
			.TransactionID = 0x00000000,
			.Params        = {},
		};

	/* Send the GETDEVICEINFO block */
	SImage_SendBlockHeader();
     50e:	3d d3       	rcall	.+1658   	; 0xb8a <SImage_SendBlockHeader>

	/* Receive the response data block */
	if ((ErrorCode = SImage_ReceiveBlockHeader()) != PIPE_RWSTREAM_NoError)
     510:	66 d3       	rcall	.+1740   	; 0xbde <SImage_ReceiveBlockHeader>
     512:	88 23       	and	r24, r24
     514:	09 f0       	breq	.+2      	; 0x518 <StillImageHost_Task+0xa4>
     516:	55 c1       	rjmp	.+682    	; 0x7c2 <StillImageHost_Task+0x34e>
		USB_Host_SetDeviceConfiguration(0);
		return;
	}

	/* Calculate the size of the returned device info data structure */
	uint16_t DeviceInfoSize = (PIMA_ReceivedBlock.DataLength - PIMA_COMMAND_SIZE(0));
     518:	60 91 45 01 	lds	r22, 0x0145
     51c:	70 91 46 01 	lds	r23, 0x0146
     520:	6c 50       	subi	r22, 0x0C	; 12
     522:	70 40       	sbci	r23, 0x00	; 0

	/* Create a buffer large enough to hold the entire device info */
	uint8_t DeviceInfo[DeviceInfoSize];
     524:	2d b7       	in	r18, 0x3d	; 61
     526:	3e b7       	in	r19, 0x3e	; 62
     528:	26 1b       	sub	r18, r22
     52a:	37 0b       	sbc	r19, r23
     52c:	0f b6       	in	r0, 0x3f	; 63
     52e:	f8 94       	cli
     530:	3e bf       	out	0x3e, r19	; 62
     532:	0f be       	out	0x3f, r0	; 63
     534:	2d bf       	out	0x3d, r18	; 61
     536:	0d b7       	in	r16, 0x3d	; 61
     538:	1e b7       	in	r17, 0x3e	; 62
     53a:	0f 5f       	subi	r16, 0xFF	; 255
     53c:	1f 4f       	sbci	r17, 0xFF	; 255

	/* Read in the data block data (containing device info) */
	SImage_ReadData(DeviceInfo, DeviceInfoSize);
     53e:	c8 01       	movw	r24, r16
     540:	0f d3       	rcall	.+1566   	; 0xb60 <SImage_ReadData>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     542:	80 91 a6 00 	lds	r24, 0x00A6
     546:	8e 77       	andi	r24, 0x7E	; 126
     548:	80 93 a6 00 	sts	0x00A6, r24
	/* Create a pointer for walking through the info dataset */
	uint8_t* DeviceInfoPos = DeviceInfo;

	/* Skip over the data before the unicode device information strings */
	DeviceInfoPos +=  8;                                          // Skip to VendorExtensionDesc String
	DeviceInfoPos += (1 + UNICODE_STRING_LENGTH(*DeviceInfoPos)); // Skip over VendorExtensionDesc String
     54c:	d8 01       	movw	r26, r16
     54e:	18 96       	adiw	r26, 0x08	; 8
     550:	ec 91       	ld	r30, X
     552:	f0 e0       	ldi	r31, 0x00	; 0
     554:	ee 0f       	add	r30, r30
     556:	ff 1f       	adc	r31, r31
     558:	e0 0f       	add	r30, r16
     55a:	f1 1f       	adc	r31, r17
     55c:	39 96       	adiw	r30, 0x09	; 9
	DeviceInfoPos +=  2;                                          // Skip over FunctionalMode
	DeviceInfoPos += (4 + (*(uint32_t*)DeviceInfoPos << 1));      // Skip over Supported Operations Array
     55e:	a2 81       	ldd	r26, Z+2	; 0x02
     560:	b3 81       	ldd	r27, Z+3	; 0x03
     562:	aa 0f       	add	r26, r26
     564:	bb 1f       	adc	r27, r27
     566:	ae 0f       	add	r26, r30
     568:	bf 1f       	adc	r27, r31
     56a:	16 96       	adiw	r26, 0x06	; 6
	DeviceInfoPos += (4 + (*(uint32_t*)DeviceInfoPos << 1));      // Skip over Supported Events Array
     56c:	ed 91       	ld	r30, X+
     56e:	fc 91       	ld	r31, X
     570:	11 97       	sbiw	r26, 0x01	; 1
     572:	ee 0f       	add	r30, r30
     574:	ff 1f       	adc	r31, r31
     576:	34 96       	adiw	r30, 0x04	; 4
     578:	ea 0f       	add	r30, r26
     57a:	fb 1f       	adc	r31, r27
	DeviceInfoPos += (4 + (*(uint32_t*)DeviceInfoPos << 1));      // Skip over Supported Device Properties Array
     57c:	a0 81       	ld	r26, Z
     57e:	b1 81       	ldd	r27, Z+1	; 0x01
     580:	aa 0f       	add	r26, r26
     582:	bb 1f       	adc	r27, r27
     584:	14 96       	adiw	r26, 0x04	; 4
     586:	ae 0f       	add	r26, r30
     588:	bf 1f       	adc	r27, r31
	DeviceInfoPos += (4 + (*(uint32_t*)DeviceInfoPos << 1));      // Skip over Capture Formats Array
     58a:	ed 91       	ld	r30, X+
     58c:	fc 91       	ld	r31, X
     58e:	11 97       	sbiw	r26, 0x01	; 1
     590:	ee 0f       	add	r30, r30
     592:	ff 1f       	adc	r31, r31
     594:	34 96       	adiw	r30, 0x04	; 4
     596:	ea 0f       	add	r30, r26
     598:	fb 1f       	adc	r31, r27
	DeviceInfoPos += (4 + (*(uint32_t*)DeviceInfoPos << 1));      // Skip over Image Formats Array
     59a:	00 81       	ld	r16, Z
     59c:	11 81       	ldd	r17, Z+1	; 0x01
     59e:	00 0f       	add	r16, r16
     5a0:	11 1f       	adc	r17, r17
     5a2:	0c 5f       	subi	r16, 0xFC	; 252
     5a4:	1f 4f       	sbci	r17, 0xFF	; 255
     5a6:	0e 0f       	add	r16, r30
     5a8:	1f 1f       	adc	r17, r31

	/* Extract and convert the Manufacturer Unicode string to ASCII and print it through the USART */
	char Manufacturer[*DeviceInfoPos];
     5aa:	f8 01       	movw	r30, r16
     5ac:	80 81       	ld	r24, Z
     5ae:	2d b7       	in	r18, 0x3d	; 61
     5b0:	3e b7       	in	r19, 0x3e	; 62
     5b2:	28 1b       	sub	r18, r24
     5b4:	31 09       	sbc	r19, r1
     5b6:	0f b6       	in	r0, 0x3f	; 63
     5b8:	f8 94       	cli
     5ba:	3e bf       	out	0x3e, r19	; 62
     5bc:	0f be       	out	0x3f, r0	; 63
     5be:	2d bf       	out	0x3d, r18	; 61
     5c0:	ed b6       	in	r14, 0x3d	; 61
     5c2:	fe b6       	in	r15, 0x3e	; 62
     5c4:	08 94       	sec
     5c6:	e1 1c       	adc	r14, r1
     5c8:	f1 1c       	adc	r15, r1
	UnicodeToASCII(DeviceInfoPos, Manufacturer);
     5ca:	c8 01       	movw	r24, r16
     5cc:	b7 01       	movw	r22, r14
     5ce:	d7 de       	rcall	.-594    	; 0x37e <UnicodeToASCII>
	printf_P(PSTR("   Manufacturer: %s\r\n"), Manufacturer);
     5d0:	00 d0       	rcall	.+0      	; 0x5d2 <StillImageHost_Task+0x15e>
     5d2:	00 d0       	rcall	.+0      	; 0x5d4 <StillImageHost_Task+0x160>
     5d4:	ed b7       	in	r30, 0x3d	; 61
     5d6:	fe b7       	in	r31, 0x3e	; 62
     5d8:	31 96       	adiw	r30, 0x01	; 1
     5da:	89 e4       	ldi	r24, 0x49	; 73
     5dc:	91 e0       	ldi	r25, 0x01	; 1
     5de:	ad b7       	in	r26, 0x3d	; 61
     5e0:	be b7       	in	r27, 0x3e	; 62
     5e2:	12 96       	adiw	r26, 0x02	; 2
     5e4:	9c 93       	st	X, r25
     5e6:	8e 93       	st	-X, r24
     5e8:	11 97       	sbiw	r26, 0x01	; 1
     5ea:	e2 82       	std	Z+2, r14	; 0x02
     5ec:	f3 82       	std	Z+3, r15	; 0x03
     5ee:	0e 94 cc 0c 	call	0x1998	; 0x1998 <printf_P>

	DeviceInfoPos += 1 + UNICODE_STRING_LENGTH(*DeviceInfoPos);   // Skip over Manufacturer String
     5f2:	f8 01       	movw	r30, r16
     5f4:	80 81       	ld	r24, Z
     5f6:	e8 2e       	mov	r14, r24
     5f8:	ff 24       	eor	r15, r15
     5fa:	ee 0c       	add	r14, r14
     5fc:	ff 1c       	adc	r15, r15
     5fe:	08 94       	sec
     600:	e1 1c       	adc	r14, r1
     602:	f1 1c       	adc	r15, r1
     604:	e0 0e       	add	r14, r16
     606:	f1 1e       	adc	r15, r17

	/* Extract and convert the Model Unicode string to ASCII and print it through the USART */
	char Model[*DeviceInfoPos];
     608:	d7 01       	movw	r26, r14
     60a:	8c 91       	ld	r24, X
     60c:	0f 90       	pop	r0
     60e:	0f 90       	pop	r0
     610:	0f 90       	pop	r0
     612:	0f 90       	pop	r0
     614:	ed b7       	in	r30, 0x3d	; 61
     616:	fe b7       	in	r31, 0x3e	; 62
     618:	e8 1b       	sub	r30, r24
     61a:	f1 09       	sbc	r31, r1
     61c:	0f b6       	in	r0, 0x3f	; 63
     61e:	f8 94       	cli
     620:	fe bf       	out	0x3e, r31	; 62
     622:	0f be       	out	0x3f, r0	; 63
     624:	ed bf       	out	0x3d, r30	; 61
     626:	0d b7       	in	r16, 0x3d	; 61
     628:	1e b7       	in	r17, 0x3e	; 62
     62a:	0f 5f       	subi	r16, 0xFF	; 255
     62c:	1f 4f       	sbci	r17, 0xFF	; 255
	UnicodeToASCII(DeviceInfoPos, Model);
     62e:	c7 01       	movw	r24, r14
     630:	b8 01       	movw	r22, r16
     632:	a5 de       	rcall	.-694    	; 0x37e <UnicodeToASCII>
	printf_P(PSTR("   Model: %s\r\n"), Model);
     634:	00 d0       	rcall	.+0      	; 0x636 <StillImageHost_Task+0x1c2>
     636:	00 d0       	rcall	.+0      	; 0x638 <StillImageHost_Task+0x1c4>
     638:	ed b7       	in	r30, 0x3d	; 61
     63a:	fe b7       	in	r31, 0x3e	; 62
     63c:	31 96       	adiw	r30, 0x01	; 1
     63e:	8a e3       	ldi	r24, 0x3A	; 58
     640:	91 e0       	ldi	r25, 0x01	; 1
     642:	ad b7       	in	r26, 0x3d	; 61
     644:	be b7       	in	r27, 0x3e	; 62
     646:	12 96       	adiw	r26, 0x02	; 2
     648:	9c 93       	st	X, r25
     64a:	8e 93       	st	-X, r24
     64c:	11 97       	sbiw	r26, 0x01	; 1
     64e:	02 83       	std	Z+2, r16	; 0x02
     650:	13 83       	std	Z+3, r17	; 0x03
     652:	0e 94 cc 0c 	call	0x1998	; 0x1998 <printf_P>

	DeviceInfoPos += 1 + UNICODE_STRING_LENGTH(*DeviceInfoPos);   // Skip over Model String
     656:	d7 01       	movw	r26, r14
     658:	ec 91       	ld	r30, X
     65a:	f0 e0       	ldi	r31, 0x00	; 0
     65c:	ee 0f       	add	r30, r30
     65e:	ff 1f       	adc	r31, r31
     660:	31 96       	adiw	r30, 0x01	; 1
     662:	ee 0d       	add	r30, r14
     664:	ff 1d       	adc	r31, r15

	/* Extract and convert the Device Version Unicode string to ASCII and print it through the USART */
	char DeviceVersion[*DeviceInfoPos];
     666:	80 81       	ld	r24, Z
     668:	0f 90       	pop	r0
     66a:	0f 90       	pop	r0
     66c:	0f 90       	pop	r0
     66e:	0f 90       	pop	r0
     670:	2d b7       	in	r18, 0x3d	; 61
     672:	3e b7       	in	r19, 0x3e	; 62
     674:	28 1b       	sub	r18, r24
     676:	31 09       	sbc	r19, r1
     678:	0f b6       	in	r0, 0x3f	; 63
     67a:	f8 94       	cli
     67c:	3e bf       	out	0x3e, r19	; 62
     67e:	0f be       	out	0x3f, r0	; 63
     680:	2d bf       	out	0x3d, r18	; 61
     682:	0d b7       	in	r16, 0x3d	; 61
     684:	1e b7       	in	r17, 0x3e	; 62
     686:	0f 5f       	subi	r16, 0xFF	; 255
     688:	1f 4f       	sbci	r17, 0xFF	; 255
	UnicodeToASCII(DeviceInfoPos, DeviceVersion);
     68a:	cf 01       	movw	r24, r30
     68c:	b8 01       	movw	r22, r16
     68e:	77 de       	rcall	.-786    	; 0x37e <UnicodeToASCII>
	printf_P(PSTR("   Device Version: %s\r\n"), DeviceVersion);
     690:	00 d0       	rcall	.+0      	; 0x692 <StillImageHost_Task+0x21e>
     692:	00 d0       	rcall	.+0      	; 0x694 <StillImageHost_Task+0x220>
     694:	ed b7       	in	r30, 0x3d	; 61
     696:	fe b7       	in	r31, 0x3e	; 62
     698:	31 96       	adiw	r30, 0x01	; 1
     69a:	82 e2       	ldi	r24, 0x22	; 34
     69c:	91 e0       	ldi	r25, 0x01	; 1
     69e:	ad b7       	in	r26, 0x3d	; 61
     6a0:	be b7       	in	r27, 0x3e	; 62
     6a2:	12 96       	adiw	r26, 0x02	; 2
     6a4:	9c 93       	st	X, r25
     6a6:	8e 93       	st	-X, r24
     6a8:	11 97       	sbiw	r26, 0x01	; 1
     6aa:	02 83       	std	Z+2, r16	; 0x02
     6ac:	13 83       	std	Z+3, r17	; 0x03
     6ae:	0e 94 cc 0c 	call	0x1998	; 0x1998 <printf_P>

	/* Receive the final response block from the device */
	if ((ErrorCode = SImage_ReceiveBlockHeader()) != PIPE_RWSTREAM_NoError)
     6b2:	0f 90       	pop	r0
     6b4:	0f 90       	pop	r0
     6b6:	0f 90       	pop	r0
     6b8:	0f 90       	pop	r0
     6ba:	91 d2       	rcall	.+1314   	; 0xbde <SImage_ReceiveBlockHeader>
     6bc:	88 23       	and	r24, r24
     6be:	09 f0       	breq	.+2      	; 0x6c2 <StillImageHost_Task+0x24e>
     6c0:	80 c0       	rjmp	.+256    	; 0x7c2 <StillImageHost_Task+0x34e>
		USB_Host_SetDeviceConfiguration(0);
		return;
	}

	/* Verify that the command completed successfully */
	if ((PIMA_ReceivedBlock.Type != PIMA_CONTAINER_ResponseBlock) || (PIMA_ReceivedBlock.Code != PIMA_RESPONSE_OK))
     6c2:	80 91 49 01 	lds	r24, 0x0149
     6c6:	90 91 4a 01 	lds	r25, 0x014A
     6ca:	03 97       	sbiw	r24, 0x03	; 3
     6cc:	09 f0       	breq	.+2      	; 0x6d0 <StillImageHost_Task+0x25c>
     6ce:	87 c0       	rjmp	.+270    	; 0x7de <StillImageHost_Task+0x36a>
     6d0:	e0 90 4b 01 	lds	r14, 0x014B
     6d4:	f0 90 4c 01 	lds	r15, 0x014C
     6d8:	b1 e0       	ldi	r27, 0x01	; 1
     6da:	eb 16       	cp	r14, r27
     6dc:	f1 04       	cpc	r15, r1
     6de:	09 f0       	breq	.+2      	; 0x6e2 <StillImageHost_Task+0x26e>
     6e0:	7e c0       	rjmp	.+252    	; 0x7de <StillImageHost_Task+0x36a>
		ShowCommandError(PIMA_ReceivedBlock.Code, true);
		USB_Host_SetDeviceConfiguration(0);
		return;
	}

	puts_P(PSTR("Opening Session...\r\n"));
     6e2:	8d e0       	ldi	r24, 0x0D	; 13
     6e4:	91 e0       	ldi	r25, 0x01	; 1
     6e6:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <puts_P>

	PIMA_SendBlock = (PIMA_Container_t)
     6ea:	f2 01       	movw	r30, r4
     6ec:	23 2d       	mov	r18, r3
     6ee:	11 92       	st	Z+, r1
     6f0:	2a 95       	dec	r18
     6f2:	e9 f7       	brne	.-6      	; 0x6ee <StillImageHost_Task+0x27a>
     6f4:	90 e1       	ldi	r25, 0x10	; 16
     6f6:	69 2e       	mov	r6, r25
     6f8:	71 2c       	mov	r7, r1
     6fa:	81 2c       	mov	r8, r1
     6fc:	91 2c       	mov	r9, r1
     6fe:	60 92 2d 01 	sts	0x012D, r6
     702:	70 92 2e 01 	sts	0x012E, r7
     706:	80 92 2f 01 	sts	0x012F, r8
     70a:	90 92 30 01 	sts	0x0130, r9
     70e:	f0 92 32 01 	sts	0x0132, r15
     712:	e0 92 31 01 	sts	0x0131, r14
     716:	82 e0       	ldi	r24, 0x02	; 2
     718:	90 e1       	ldi	r25, 0x10	; 16
     71a:	90 93 34 01 	sts	0x0134, r25
     71e:	80 93 33 01 	sts	0x0133, r24
     722:	81 e0       	ldi	r24, 0x01	; 1
     724:	a8 2e       	mov	r10, r24
     726:	b1 2c       	mov	r11, r1
     728:	c1 2c       	mov	r12, r1
     72a:	d1 2c       	mov	r13, r1
     72c:	a0 92 39 01 	sts	0x0139, r10
     730:	b0 92 3a 01 	sts	0x013A, r11
     734:	c0 92 3b 01 	sts	0x013B, r12
     738:	d0 92 3c 01 	sts	0x013C, r13
			.TransactionID = 0x00000000,
			.Params        = {0x00000001},
		};

	/* Send the OPENSESSION block, open a session with an ID of 0x0001 */
	SImage_SendBlockHeader();
     73c:	26 d2       	rcall	.+1100   	; 0xb8a <SImage_SendBlockHeader>

	/* Receive the response block from the device */
	if ((ErrorCode = SImage_ReceiveBlockHeader()) != PIPE_RWSTREAM_NoError)
     73e:	4f d2       	rcall	.+1182   	; 0xbde <SImage_ReceiveBlockHeader>
     740:	88 23       	and	r24, r24
     742:	09 f0       	breq	.+2      	; 0x746 <StillImageHost_Task+0x2d2>
     744:	3e c0       	rjmp	.+124    	; 0x7c2 <StillImageHost_Task+0x34e>
		USB_Host_SetDeviceConfiguration(0);
		return;
	}

	/* Verify that the command completed successfully */
	if ((PIMA_ReceivedBlock.Type != PIMA_CONTAINER_ResponseBlock) || (PIMA_ReceivedBlock.Code != PIMA_RESPONSE_OK))
     746:	80 91 49 01 	lds	r24, 0x0149
     74a:	90 91 4a 01 	lds	r25, 0x014A
     74e:	03 97       	sbiw	r24, 0x03	; 3
     750:	09 f0       	breq	.+2      	; 0x754 <StillImageHost_Task+0x2e0>
     752:	45 c0       	rjmp	.+138    	; 0x7de <StillImageHost_Task+0x36a>
     754:	e0 90 4b 01 	lds	r14, 0x014B
     758:	f0 90 4c 01 	lds	r15, 0x014C
     75c:	31 e0       	ldi	r19, 0x01	; 1
     75e:	e3 16       	cp	r14, r19
     760:	f1 04       	cpc	r15, r1
     762:	09 f0       	breq	.+2      	; 0x766 <StillImageHost_Task+0x2f2>
     764:	3c c0       	rjmp	.+120    	; 0x7de <StillImageHost_Task+0x36a>
		ShowCommandError(PIMA_ReceivedBlock.Code, true);
		USB_Host_SetDeviceConfiguration(0);
		return;
	}

	puts_P(PSTR("Closing Session...\r\n"));
     766:	88 ef       	ldi	r24, 0xF8	; 248
     768:	90 e0       	ldi	r25, 0x00	; 0
     76a:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <puts_P>

	PIMA_SendBlock = (PIMA_Container_t)
     76e:	d2 01       	movw	r26, r4
     770:	1d 92       	st	X+, r1
     772:	3a 94       	dec	r3
     774:	e9 f7       	brne	.-6      	; 0x770 <StillImageHost_Task+0x2fc>
     776:	60 92 2d 01 	sts	0x012D, r6
     77a:	70 92 2e 01 	sts	0x012E, r7
     77e:	80 92 2f 01 	sts	0x012F, r8
     782:	90 92 30 01 	sts	0x0130, r9
     786:	f0 92 32 01 	sts	0x0132, r15
     78a:	e0 92 31 01 	sts	0x0131, r14
     78e:	83 e0       	ldi	r24, 0x03	; 3
     790:	90 e1       	ldi	r25, 0x10	; 16
     792:	90 93 34 01 	sts	0x0134, r25
     796:	80 93 33 01 	sts	0x0133, r24
     79a:	a0 92 35 01 	sts	0x0135, r10
     79e:	b0 92 36 01 	sts	0x0136, r11
     7a2:	c0 92 37 01 	sts	0x0137, r12
     7a6:	d0 92 38 01 	sts	0x0138, r13
     7aa:	a0 92 39 01 	sts	0x0139, r10
     7ae:	b0 92 3a 01 	sts	0x013A, r11
     7b2:	c0 92 3b 01 	sts	0x013B, r12
     7b6:	d0 92 3c 01 	sts	0x013C, r13
			.TransactionID = 0x00000001,
			.Params        = {0x00000001},
		};

	/* Send the CLOSESESSION block, close the session with an ID of 0x0001 */
	SImage_SendBlockHeader();
     7ba:	e7 d1       	rcall	.+974    	; 0xb8a <SImage_SendBlockHeader>

	/* Receive the response block from the device */
	if ((ErrorCode = SImage_ReceiveBlockHeader()) != PIPE_RWSTREAM_NoError)
     7bc:	10 d2       	rcall	.+1056   	; 0xbde <SImage_ReceiveBlockHeader>
     7be:	88 23       	and	r24, r24
     7c0:	11 f0       	breq	.+4      	; 0x7c6 <StillImageHost_Task+0x352>
	{
		ShowCommandError(ErrorCode, false);
     7c2:	60 e0       	ldi	r22, 0x00	; 0
     7c4:	0f c0       	rjmp	.+30     	; 0x7e4 <StillImageHost_Task+0x370>
		USB_Host_SetDeviceConfiguration(0);
		return;
	}

	/* Verify that the command completed successfully */
	if ((PIMA_ReceivedBlock.Type != PIMA_CONTAINER_ResponseBlock) || (PIMA_ReceivedBlock.Code != PIMA_RESPONSE_OK))
     7c6:	80 91 49 01 	lds	r24, 0x0149
     7ca:	90 91 4a 01 	lds	r25, 0x014A
     7ce:	03 97       	sbiw	r24, 0x03	; 3
     7d0:	31 f4       	brne	.+12     	; 0x7de <StillImageHost_Task+0x36a>
     7d2:	80 91 4b 01 	lds	r24, 0x014B
     7d6:	90 91 4c 01 	lds	r25, 0x014C
     7da:	01 97       	sbiw	r24, 0x01	; 1
     7dc:	41 f0       	breq	.+16     	; 0x7ee <StillImageHost_Task+0x37a>
	{
		ShowCommandError(PIMA_ReceivedBlock.Code, true);
     7de:	80 91 4b 01 	lds	r24, 0x014B
     7e2:	61 e0       	ldi	r22, 0x01	; 1
     7e4:	e0 dd       	rcall	.-1088   	; 0x3a6 <ShowCommandError>
		USB_Host_SetDeviceConfiguration(0);
     7e6:	80 e0       	ldi	r24, 0x00	; 0
     7e8:	0e 94 77 0c 	call	0x18ee	; 0x18ee <USB_Host_SetDeviceConfiguration>
     7ec:	14 c0       	rjmp	.+40     	; 0x816 <StillImageHost_Task+0x3a2>
		return;
	}

	puts_P(PSTR("Done.\r\n"));
     7ee:	80 ef       	ldi	r24, 0xF0	; 240
     7f0:	90 e0       	ldi	r25, 0x00	; 0
     7f2:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <puts_P>
     7f6:	8b b1       	in	r24, 0x0b	; 11
     7f8:	8f 70       	andi	r24, 0x0F	; 15
     7fa:	80 66       	ori	r24, 0x60	; 96
     7fc:	8b b9       	out	0x0b, r24	; 11

	/* Indicate device no longer busy */
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
	USB_Host_SetDeviceConfiguration(0);
     7fe:	80 e0       	ldi	r24, 0x00	; 0
     800:	0e 94 77 0c 	call	0x18ee	; 0x18ee <USB_Host_SetDeviceConfiguration>
     804:	22 2d       	mov	r18, r2
     806:	3b 81       	ldd	r19, Y+3	; 0x03
     808:	c9 01       	movw	r24, r18
     80a:	0f b6       	in	r0, 0x3f	; 63
     80c:	f8 94       	cli
     80e:	9e bf       	out	0x3e, r25	; 62
     810:	0f be       	out	0x3f, r0	; 63
     812:	8d bf       	out	0x3d, r24	; 61
     814:	08 c0       	rjmp	.+16     	; 0x826 <StillImageHost_Task+0x3b2>
     816:	82 2d       	mov	r24, r2
     818:	9b 81       	ldd	r25, Y+3	; 0x03
     81a:	9c 01       	movw	r18, r24
     81c:	0f b6       	in	r0, 0x3f	; 63
     81e:	f8 94       	cli
     820:	3e bf       	out	0x3e, r19	; 62
     822:	0f be       	out	0x3f, r0	; 63
     824:	2d bf       	out	0x3d, r18	; 61
}
     826:	e9 81       	ldd	r30, Y+1	; 0x01
     828:	fa 81       	ldd	r31, Y+2	; 0x02
     82a:	0f b6       	in	r0, 0x3f	; 63
     82c:	f8 94       	cli
     82e:	fe bf       	out	0x3e, r31	; 62
     830:	0f be       	out	0x3f, r0	; 63
     832:	ed bf       	out	0x3d, r30	; 61
     834:	0f 90       	pop	r0
     836:	0f 90       	pop	r0
     838:	0f 90       	pop	r0
     83a:	cf 91       	pop	r28
     83c:	df 91       	pop	r29
     83e:	1f 91       	pop	r17
     840:	0f 91       	pop	r16
     842:	ff 90       	pop	r15
     844:	ef 90       	pop	r14
     846:	df 90       	pop	r13
     848:	cf 90       	pop	r12
     84a:	bf 90       	pop	r11
     84c:	af 90       	pop	r10
     84e:	9f 90       	pop	r9
     850:	8f 90       	pop	r8
     852:	7f 90       	pop	r7
     854:	6f 90       	pop	r6
     856:	5f 90       	pop	r5
     858:	4f 90       	pop	r4
     85a:	3f 90       	pop	r3
     85c:	2f 90       	pop	r2
     85e:	08 95       	ret

00000860 <EVENT_USB_Host_HostError>:
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
}

/** Event handler for the USB_HostError event. This indicates that a hardware error occurred while in host mode. */
void EVENT_USB_Host_HostError(const uint8_t ErrorCode)
{
     860:	1f 93       	push	r17
     862:	18 2f       	mov	r17, r24
	USB_Disable();
     864:	f8 d4       	rcall	.+2544   	; 0x1256 <USB_Disable>

	printf_P(PSTR(ESC_FG_RED "Host Mode Error\r\n"
     866:	00 d0       	rcall	.+0      	; 0x868 <EVENT_USB_Host_HostError+0x8>
     868:	00 d0       	rcall	.+0      	; 0x86a <EVENT_USB_Host_HostError+0xa>
     86a:	ed b7       	in	r30, 0x3d	; 61
     86c:	fe b7       	in	r31, 0x3e	; 62
     86e:	31 96       	adiw	r30, 0x01	; 1
     870:	81 ed       	ldi	r24, 0xD1	; 209
     872:	91 e0       	ldi	r25, 0x01	; 1
     874:	ad b7       	in	r26, 0x3d	; 61
     876:	be b7       	in	r27, 0x3e	; 62
     878:	12 96       	adiw	r26, 0x02	; 2
     87a:	9c 93       	st	X, r25
     87c:	8e 93       	st	-X, r24
     87e:	11 97       	sbiw	r26, 0x01	; 1
     880:	12 83       	std	Z+2, r17	; 0x02
     882:	13 82       	std	Z+3, r1	; 0x03
     884:	0e 94 cc 0c 	call	0x1998	; 0x1998 <printf_P>
     888:	8b b1       	in	r24, 0x0b	; 11
     88a:	8f 70       	andi	r24, 0x0F	; 15
     88c:	80 69       	ori	r24, 0x90	; 144
     88e:	8b b9       	out	0x0b, r24	; 11
     890:	0f 90       	pop	r0
     892:	0f 90       	pop	r0
     894:	0f 90       	pop	r0
     896:	0f 90       	pop	r0
     898:	ff cf       	rjmp	.-2      	; 0x898 <EVENT_USB_Host_HostError+0x38>

0000089a <EVENT_USB_Host_DeviceEnumerationComplete>:

/** Event handler for the USB_DeviceEnumerationComplete event. This indicates that a device has been successfully
 *  enumerated by the host and is now ready to be used by the application.
 */
void EVENT_USB_Host_DeviceEnumerationComplete(void)
{
     89a:	1f 93       	push	r17
	puts_P(PSTR("Getting Config Data.\r\n"));
     89c:	8f eb       	ldi	r24, 0xBF	; 191
     89e:	92 e0       	ldi	r25, 0x02	; 2
     8a0:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <puts_P>

	uint8_t ErrorCode;

	/* Get and process the configuration descriptor data */
	if ((ErrorCode = ProcessConfigurationDescriptor()) != SuccessfulConfigRead)
     8a4:	bb d0       	rcall	.+374    	; 0xa1c <ProcessConfigurationDescriptor>
     8a6:	18 2f       	mov	r17, r24
     8a8:	88 23       	and	r24, r24
     8aa:	c1 f0       	breq	.+48     	; 0x8dc <EVENT_USB_Host_DeviceEnumerationComplete+0x42>
	{
		if (ErrorCode == ControlError)
     8ac:	81 30       	cpi	r24, 0x01	; 1
     8ae:	19 f4       	brne	.+6      	; 0x8b6 <EVENT_USB_Host_DeviceEnumerationComplete+0x1c>
		  puts_P(PSTR(ESC_FG_RED "Control Error (Get Configuration).\r\n"));
     8b0:	85 e9       	ldi	r24, 0x95	; 149
     8b2:	92 e0       	ldi	r25, 0x02	; 2
     8b4:	02 c0       	rjmp	.+4      	; 0x8ba <EVENT_USB_Host_DeviceEnumerationComplete+0x20>
		else
		  puts_P(PSTR(ESC_FG_RED "Invalid Device.\r\n"));
     8b6:	8e e7       	ldi	r24, 0x7E	; 126
     8b8:	92 e0       	ldi	r25, 0x02	; 2
     8ba:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <puts_P>

		printf_P(PSTR(" -- Error Code: %d\r\n" ESC_FG_WHITE), ErrorCode);
     8be:	00 d0       	rcall	.+0      	; 0x8c0 <EVENT_USB_Host_DeviceEnumerationComplete+0x26>
     8c0:	00 d0       	rcall	.+0      	; 0x8c2 <EVENT_USB_Host_DeviceEnumerationComplete+0x28>
     8c2:	ed b7       	in	r30, 0x3d	; 61
     8c4:	fe b7       	in	r31, 0x3e	; 62
     8c6:	31 96       	adiw	r30, 0x01	; 1
     8c8:	84 e6       	ldi	r24, 0x64	; 100
     8ca:	92 e0       	ldi	r25, 0x02	; 2
     8cc:	ad b7       	in	r26, 0x3d	; 61
     8ce:	be b7       	in	r27, 0x3e	; 62
     8d0:	12 96       	adiw	r26, 0x02	; 2
     8d2:	9c 93       	st	X, r25
     8d4:	8e 93       	st	-X, r24
     8d6:	11 97       	sbiw	r26, 0x01	; 1
     8d8:	12 83       	std	Z+2, r17	; 0x02
     8da:	14 c0       	rjmp	.+40     	; 0x904 <EVENT_USB_Host_DeviceEnumerationComplete+0x6a>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	/* Set the device configuration to the first configuration (rarely do devices use multiple configurations) */
	if ((ErrorCode = USB_Host_SetDeviceConfiguration(1)) != HOST_SENDCONTROL_Successful)
     8dc:	81 e0       	ldi	r24, 0x01	; 1
     8de:	0e 94 77 0c 	call	0x18ee	; 0x18ee <USB_Host_SetDeviceConfiguration>
     8e2:	28 2f       	mov	r18, r24
     8e4:	88 23       	and	r24, r24
     8e6:	d1 f0       	breq	.+52     	; 0x91c <EVENT_USB_Host_DeviceEnumerationComplete+0x82>
	{
		printf_P(PSTR(ESC_FG_RED "Control Error (Set Configuration).\r\n"
     8e8:	00 d0       	rcall	.+0      	; 0x8ea <EVENT_USB_Host_DeviceEnumerationComplete+0x50>
     8ea:	00 d0       	rcall	.+0      	; 0x8ec <EVENT_USB_Host_DeviceEnumerationComplete+0x52>
     8ec:	ed b7       	in	r30, 0x3d	; 61
     8ee:	fe b7       	in	r31, 0x3e	; 62
     8f0:	31 96       	adiw	r30, 0x01	; 1
     8f2:	81 e2       	ldi	r24, 0x21	; 33
     8f4:	92 e0       	ldi	r25, 0x02	; 2
     8f6:	ad b7       	in	r26, 0x3d	; 61
     8f8:	be b7       	in	r27, 0x3e	; 62
     8fa:	12 96       	adiw	r26, 0x02	; 2
     8fc:	9c 93       	st	X, r25
     8fe:	8e 93       	st	-X, r24
     900:	11 97       	sbiw	r26, 0x01	; 1
     902:	22 83       	std	Z+2, r18	; 0x02
     904:	13 82       	std	Z+3, r1	; 0x03
     906:	0e 94 cc 0c 	call	0x1998	; 0x1998 <printf_P>
     90a:	8b b1       	in	r24, 0x0b	; 11
     90c:	8f 70       	andi	r24, 0x0F	; 15
     90e:	80 69       	ori	r24, 0x90	; 144
     910:	8b b9       	out	0x0b, r24	; 11
     912:	0f 90       	pop	r0
     914:	0f 90       	pop	r0
     916:	0f 90       	pop	r0
     918:	0f 90       	pop	r0
     91a:	08 c0       	rjmp	.+16     	; 0x92c <EVENT_USB_Host_DeviceEnumerationComplete+0x92>

		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	puts_P(PSTR("Still Image Device Enumerated.\r\n"));
     91c:	80 e0       	ldi	r24, 0x00	; 0
     91e:	92 e0       	ldi	r25, 0x02	; 2
     920:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <puts_P>
     924:	8b b1       	in	r24, 0x0b	; 11
     926:	8f 70       	andi	r24, 0x0F	; 15
     928:	80 66       	ori	r24, 0x60	; 96
     92a:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
}
     92c:	1f 91       	pop	r17
     92e:	08 95       	ret

00000930 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     930:	84 b7       	in	r24, 0x34	; 52
     932:	87 7f       	andi	r24, 0xF7	; 247
     934:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     936:	28 e1       	ldi	r18, 0x18	; 24
     938:	0f b6       	in	r0, 0x3f	; 63
     93a:	f8 94       	cli
     93c:	20 93 60 00 	sts	0x0060, r18
     940:	10 92 60 00 	sts	0x0060, r1
     944:	0f be       	out	0x3f, r0	; 63

	/* Disable Clock Division */
	CLKPR = (1 << CLKPCE);
     946:	e1 e6       	ldi	r30, 0x61	; 97
     948:	f0 e0       	ldi	r31, 0x00	; 0
     94a:	80 e8       	ldi	r24, 0x80	; 128
     94c:	80 83       	st	Z, r24
	CLKPR = 0;
     94e:	10 82       	st	Z, r1
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     950:	83 e3       	ldi	r24, 0x33	; 51
     952:	90 e0       	ldi	r25, 0x00	; 0
     954:	90 93 cd 00 	sts	0x00CD, r25
     958:	80 93 cc 00 	sts	0x00CC, r24

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     95c:	86 e0       	ldi	r24, 0x06	; 6
     95e:	80 93 ca 00 	sts	0x00CA, r24
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     962:	10 92 c8 00 	sts	0x00C8, r1
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     966:	20 93 c9 00 	sts	0x00C9, r18

				DDRD  |= (1 << 3);
     96a:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     96c:	5a 9a       	sbi	0x0b, 2	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     96e:	8a b1       	in	r24, 0x0a	; 10
     970:	80 6f       	ori	r24, 0xF0	; 240
     972:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     974:	8b b1       	in	r24, 0x0b	; 11
     976:	8f 70       	andi	r24, 0x0F	; 15
     978:	8b b9       	out	0x0b, r24	; 11

	/* Hardware Initialization */
	Serial_Init(9600, false);
	LEDs_Init();
	USB_Init();
     97a:	64 d4       	rcall	.+2248   	; 0x1244 <USB_Init>
			static inline void Serial_CreateStream(FILE* Stream)
			{
				if (!(Stream))
				{
					Stream = &USARTSerialStream;
					stdin  = Stream;
     97c:	e8 e6       	ldi	r30, 0x68	; 104
     97e:	f1 e0       	ldi	r31, 0x01	; 1
     980:	f0 93 77 01 	sts	0x0177, r31
     984:	e0 93 76 01 	sts	0x0176, r30
					stdout = Stream;
     988:	f0 93 79 01 	sts	0x0179, r31
     98c:	e0 93 78 01 	sts	0x0178, r30
				}
			
				*Stream = (FILE)FDEV_SETUP_STREAM(Serial_putchar, Serial_getchar, _FDEV_SETUP_RW);
     990:	8e e0       	ldi	r24, 0x0E	; 14
     992:	df 01       	movw	r26, r30
     994:	1d 92       	st	X+, r1
     996:	8a 95       	dec	r24
     998:	e9 f7       	brne	.-6      	; 0x994 <SetupHardware+0x64>
     99a:	83 e0       	ldi	r24, 0x03	; 3
     99c:	80 93 6b 01 	sts	0x016B, r24
     9a0:	8e ea       	ldi	r24, 0xAE	; 174
     9a2:	9c e0       	ldi	r25, 0x0C	; 12
     9a4:	90 93 71 01 	sts	0x0171, r25
     9a8:	80 93 70 01 	sts	0x0170, r24
     9ac:	88 eb       	ldi	r24, 0xB8	; 184
     9ae:	9c e0       	ldi	r25, 0x0C	; 12
     9b0:	90 93 73 01 	sts	0x0173, r25
     9b4:	80 93 72 01 	sts	0x0172, r24

	/* Create a stdio stream for the serial port for stdin and stdout */
	Serial_CreateStream(NULL);
}
     9b8:	08 95       	ret

000009ba <main>:
/** Main program entry point. This routine configures the hardware required by the application, then
 *  enters a loop to run the application tasks in sequence.
 */
int main(void)
{
	SetupHardware();
     9ba:	ba df       	rcall	.-140    	; 0x930 <SetupHardware>

	puts_P(PSTR(ESC_FG_CYAN "Still Image Host Demo running.\r\n" ESC_FG_WHITE));
     9bc:	84 e1       	ldi	r24, 0x14	; 20
     9be:	93 e0       	ldi	r25, 0x03	; 3
     9c0:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <puts_P>
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     9c4:	8b b1       	in	r24, 0x0b	; 11
     9c6:	8f 70       	andi	r24, 0x0F	; 15
     9c8:	80 61       	ori	r24, 0x10	; 16
     9ca:	8b b9       	out	0x0b, r24	; 11

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
	sei();
     9cc:	78 94       	sei

	for (;;)
	{
		StillImageHost_Task();
     9ce:	52 dd       	rcall	.-1372   	; 0x474 <StillImageHost_Task>

		USB_USBTask();
     9d0:	b3 d7       	rcall	.+3942   	; 0x1938 <USB_USBTask>
     9d2:	fd cf       	rjmp	.-6      	; 0x9ce <main+0x14>

000009d4 <DComp_NextStillImageInterface>:
 *  This comparator searches for the next Interface descriptor of the correct Still Image Class, Subclass and Protocol values.
 *
 *  \return A value from the DSEARCH_Return_ErrorCodes_t enum
 */
uint8_t DComp_NextStillImageInterface(void* CurrentDescriptor)
{
     9d4:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
     9d6:	81 81       	ldd	r24, Z+1	; 0x01
     9d8:	84 30       	cpi	r24, 0x04	; 4
     9da:	59 f4       	brne	.+22     	; 0x9f2 <DComp_NextStillImageInterface+0x1e>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		/* Check the descriptor class, subclass and protocol, break out if correct interface found */
		if ((Interface->Class    == SI_CSCP_StillImageClass)    &&
     9dc:	85 81       	ldd	r24, Z+5	; 0x05
     9de:	86 30       	cpi	r24, 0x06	; 6
     9e0:	41 f4       	brne	.+16     	; 0x9f2 <DComp_NextStillImageInterface+0x1e>
     9e2:	86 81       	ldd	r24, Z+6	; 0x06
     9e4:	81 30       	cpi	r24, 0x01	; 1
     9e6:	29 f4       	brne	.+10     	; 0x9f2 <DComp_NextStillImageInterface+0x1e>
     9e8:	87 81       	ldd	r24, Z+7	; 0x07
     9ea:	81 30       	cpi	r24, 0x01	; 1
     9ec:	11 f4       	brne	.+4      	; 0x9f2 <DComp_NextStillImageInterface+0x1e>
     9ee:	80 e0       	ldi	r24, 0x00	; 0
     9f0:	08 95       	ret
     9f2:	82 e0       	ldi	r24, 0x02	; 2
			return DESCRIPTOR_SEARCH_Found;
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
     9f4:	08 95       	ret

000009f6 <DComp_NextStillImageInterfaceDataEndpoint>:
 *  search if another interface descriptor is found before the next endpoint.
 *
 *  \return A value from the DSEARCH_Return_ErrorCodes_t enum
 */
uint8_t DComp_NextStillImageInterfaceDataEndpoint(void* CurrentDescriptor)
{
     9f6:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Endpoint)
     9f8:	81 81       	ldd	r24, Z+1	; 0x01
     9fa:	85 30       	cpi	r24, 0x05	; 5
     9fc:	49 f4       	brne	.+18     	; 0xa10 <DComp_NextStillImageInterfaceDataEndpoint+0x1a>
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		/* Check the endpoint type, break out if correct BULK or INTERRUPT type endpoint found */
		if (((Endpoint->Attributes & EP_TYPE_MASK) == EP_TYPE_BULK) || 
     9fe:	83 81       	ldd	r24, Z+3	; 0x03
     a00:	90 e0       	ldi	r25, 0x00	; 0
     a02:	83 70       	andi	r24, 0x03	; 3
     a04:	90 70       	andi	r25, 0x00	; 0
     a06:	02 97       	sbiw	r24, 0x02	; 2
     a08:	02 97       	sbiw	r24, 0x02	; 2
     a0a:	30 f4       	brcc	.+12     	; 0xa18 <DComp_NextStillImageInterfaceDataEndpoint+0x22>
     a0c:	80 e0       	ldi	r24, 0x00	; 0
     a0e:	08 95       	ret
		    ((Endpoint->Attributes & EP_TYPE_MASK) == EP_TYPE_INTERRUPT))
		{
			return DESCRIPTOR_SEARCH_Found;
		}
	}
	else if (Header->Type == DTYPE_Interface)
     a10:	84 30       	cpi	r24, 0x04	; 4
     a12:	11 f4       	brne	.+4      	; 0xa18 <DComp_NextStillImageInterfaceDataEndpoint+0x22>
     a14:	81 e0       	ldi	r24, 0x01	; 1
     a16:	08 95       	ret
     a18:	82 e0       	ldi	r24, 0x02	; 2
	{
		return DESCRIPTOR_SEARCH_Fail;
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
     a1a:	08 95       	ret

00000a1c <ProcessConfigurationDescriptor>:
 *  This routine searches for a SI interface descriptor containing bulk IN and OUT data endpoints.
 *
 *  \return An error code from the \ref StillImageHost_GetConfigDescriptorDataCodes_t enum.
 */
uint8_t ProcessConfigurationDescriptor(void)
{
     a1c:	6f 92       	push	r6
     a1e:	7f 92       	push	r7
     a20:	8f 92       	push	r8
     a22:	9f 92       	push	r9
     a24:	af 92       	push	r10
     a26:	bf 92       	push	r11
     a28:	cf 92       	push	r12
     a2a:	df 92       	push	r13
     a2c:	ef 92       	push	r14
     a2e:	ff 92       	push	r15
     a30:	0f 93       	push	r16
     a32:	1f 93       	push	r17
     a34:	df 93       	push	r29
     a36:	cf 93       	push	r28
     a38:	cd b7       	in	r28, 0x3d	; 61
     a3a:	de b7       	in	r29, 0x3e	; 62
     a3c:	c4 50       	subi	r28, 0x04	; 4
     a3e:	d2 40       	sbci	r29, 0x02	; 2
     a40:	0f b6       	in	r0, 0x3f	; 63
     a42:	f8 94       	cli
     a44:	de bf       	out	0x3e, r29	; 62
     a46:	0f be       	out	0x3f, r0	; 63
     a48:	cd bf       	out	0x3d, r28	; 61
	uint8_t  ConfigDescriptorData[512];
	void*    CurrConfigLocation = ConfigDescriptorData;
     a4a:	ae 01       	movw	r20, r28
     a4c:	4b 5f       	subi	r20, 0xFB	; 251
     a4e:	5f 4f       	sbci	r21, 0xFF	; 255
     a50:	5a 83       	std	Y+2, r21	; 0x02
     a52:	49 83       	std	Y+1, r20	; 0x01
	USB_Descriptor_Endpoint_t*  DataINEndpoint      = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint     = NULL;
	USB_Descriptor_Endpoint_t*  EventsEndpoint      = NULL;

	/* Retrieve the entire configuration descriptor into the allocated buffer */
	switch (USB_Host_GetDeviceConfigDescriptor(1, &CurrConfigBytesRem, ConfigDescriptorData, sizeof(ConfigDescriptorData)))
     a54:	8e 01       	movw	r16, r28
     a56:	0d 5f       	subi	r16, 0xFD	; 253
     a58:	1f 4f       	sbci	r17, 0xFF	; 255
     a5a:	81 e0       	ldi	r24, 0x01	; 1
     a5c:	b8 01       	movw	r22, r16
     a5e:	20 e0       	ldi	r18, 0x00	; 0
     a60:	32 e0       	ldi	r19, 0x02	; 2
     a62:	a3 d5       	rcall	.+2886   	; 0x15aa <USB_Host_GetDeviceConfigDescriptor>
     a64:	85 30       	cpi	r24, 0x05	; 5
     a66:	29 f0       	breq	.+10     	; 0xa72 <ProcessConfigurationDescriptor+0x56>
     a68:	86 30       	cpi	r24, 0x06	; 6
     a6a:	91 f0       	breq	.+36     	; 0xa90 <ProcessConfigurationDescriptor+0x74>
     a6c:	88 23       	and	r24, r24
     a6e:	19 f0       	breq	.+6      	; 0xa76 <ProcessConfigurationDescriptor+0x5a>
     a70:	11 c0       	rjmp	.+34     	; 0xa94 <ProcessConfigurationDescriptor+0x78>
     a72:	82 e0       	ldi	r24, 0x02	; 2
     a74:	5f c0       	rjmp	.+190    	; 0xb34 <ProcessConfigurationDescriptor+0x118>
     a76:	88 24       	eor	r8, r8
     a78:	99 24       	eor	r9, r9
     a7a:	ee 24       	eor	r14, r14
     a7c:	ff 24       	eor	r15, r15
     a7e:	cc 24       	eor	r12, r12
     a80:	dd 24       	eor	r13, r13
     a82:	aa 24       	eor	r10, r10
     a84:	bb 24       	eor	r11, r11
	}

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(StillImageInterface) ||
     a86:	38 01       	movw	r6, r16
     a88:	8e 01       	movw	r16, r28
     a8a:	0f 5f       	subi	r16, 0xFF	; 255
     a8c:	1f 4f       	sbci	r17, 0xFF	; 255
     a8e:	04 c0       	rjmp	.+8      	; 0xa98 <ProcessConfigurationDescriptor+0x7c>
	USB_Descriptor_Endpoint_t*  DataINEndpoint      = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint     = NULL;
	USB_Descriptor_Endpoint_t*  EventsEndpoint      = NULL;

	/* Retrieve the entire configuration descriptor into the allocated buffer */
	switch (USB_Host_GetDeviceConfigDescriptor(1, &CurrConfigBytesRem, ConfigDescriptorData, sizeof(ConfigDescriptorData)))
     a90:	83 e0       	ldi	r24, 0x03	; 3
     a92:	50 c0       	rjmp	.+160    	; 0xb34 <ProcessConfigurationDescriptor+0x118>
     a94:	81 e0       	ldi	r24, 0x01	; 1
     a96:	4e c0       	rjmp	.+156    	; 0xb34 <ProcessConfigurationDescriptor+0x118>
	}

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(StillImageInterface) ||
     a98:	81 14       	cp	r8, r1
     a9a:	91 04       	cpc	r9, r1
     a9c:	39 f0       	breq	.+14     	; 0xaac <ProcessConfigurationDescriptor+0x90>
     a9e:	c3 01       	movw	r24, r6
     aa0:	b8 01       	movw	r22, r16
     aa2:	4b ef       	ldi	r20, 0xFB	; 251
     aa4:	54 e0       	ldi	r21, 0x04	; 4
     aa6:	3d d5       	rcall	.+2682   	; 0x1522 <USB_GetNextDescriptorComp>
     aa8:	88 23       	and	r24, r24
     aaa:	91 f0       	breq	.+36     	; 0xad0 <ProcessConfigurationDescriptor+0xb4>
		    USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
		                              DComp_NextStillImageInterfaceDataEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			/* Get the next Still Image interface from the configuration descriptor */
			if (USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     aac:	c3 01       	movw	r24, r6
     aae:	b8 01       	movw	r22, r16
     ab0:	4a ee       	ldi	r20, 0xEA	; 234
     ab2:	54 e0       	ldi	r21, 0x04	; 4
     ab4:	36 d5       	rcall	.+2668   	; 0x1522 <USB_GetNextDescriptorComp>
     ab6:	88 23       	and	r24, r24
     ab8:	11 f0       	breq	.+4      	; 0xabe <ProcessConfigurationDescriptor+0xa2>
     aba:	84 e0       	ldi	r24, 0x04	; 4
     abc:	3b c0       	rjmp	.+118    	; 0xb34 <ProcessConfigurationDescriptor+0x118>
				/* Descriptor not found, error out */
				return NoCompatibleInterfaceFound;
			}

			/* Save the interface in case we need to refer back to it later */
			StillImageInterface = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Interface_t);
     abe:	89 80       	ldd	r8, Y+1	; 0x01
     ac0:	9a 80       	ldd	r9, Y+2	; 0x02
     ac2:	aa 24       	eor	r10, r10
     ac4:	bb 24       	eor	r11, r11
     ac6:	cc 24       	eor	r12, r12
     ac8:	dd 24       	eor	r13, r13
     aca:	ee 24       	eor	r14, r14
     acc:	ff 24       	eor	r15, r15
     ace:	e4 cf       	rjmp	.-56     	; 0xa98 <ProcessConfigurationDescriptor+0x7c>
			/* Skip the remainder of the loop as we have not found an endpoint yet */
			continue;
		}

		/* Retrieve the endpoint address from the endpoint descriptor */
		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Endpoint_t);
     ad0:	e9 81       	ldd	r30, Y+1	; 0x01
     ad2:	fa 81       	ldd	r31, Y+2	; 0x02

		/* If the endpoint is a IN type endpoint */
		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
     ad4:	82 81       	ldd	r24, Z+2	; 0x02
     ad6:	87 fd       	sbrc	r24, 7
     ad8:	02 c0       	rjmp	.+4      	; 0xade <ProcessConfigurationDescriptor+0xc2>
     ada:	6f 01       	movw	r12, r30
     adc:	07 c0       	rjmp	.+14     	; 0xaec <ProcessConfigurationDescriptor+0xd0>
		{
			/* Check if the found endpoint is a interrupt or bulk type descriptor */
			if ((EndpointData->Attributes & EP_TYPE_MASK) == EP_TYPE_INTERRUPT)
     ade:	83 81       	ldd	r24, Z+3	; 0x03
     ae0:	83 70       	andi	r24, 0x03	; 3
     ae2:	83 30       	cpi	r24, 0x03	; 3
     ae4:	11 f0       	breq	.+4      	; 0xaea <ProcessConfigurationDescriptor+0xce>
     ae6:	7f 01       	movw	r14, r30
     ae8:	01 c0       	rjmp	.+2      	; 0xaec <ProcessConfigurationDescriptor+0xd0>
     aea:	5f 01       	movw	r10, r30
			return DescriptorTooLarge;
		default:
			return ControlError;
	}

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
     aec:	e1 14       	cp	r14, r1
     aee:	f1 04       	cpc	r15, r1
     af0:	99 f2       	breq	.-90     	; 0xa98 <ProcessConfigurationDescriptor+0x7c>
     af2:	c1 14       	cp	r12, r1
     af4:	d1 04       	cpc	r13, r1
     af6:	81 f2       	breq	.-96     	; 0xa98 <ProcessConfigurationDescriptor+0x7c>
			DataOUTEndpoint = EndpointData;
		}
	}

	/* Configure the Still Image data IN pipe */
	Pipe_ConfigurePipe(SIMAGE_DATA_IN_PIPE, EP_TYPE_BULK, PIPE_TOKEN_IN,
     af8:	f7 01       	movw	r30, r14
     afa:	04 81       	ldd	r16, Z+4	; 0x04
     afc:	15 81       	ldd	r17, Z+5	; 0x05
     afe:	81 e0       	ldi	r24, 0x01	; 1
     b00:	62 e0       	ldi	r22, 0x02	; 2
     b02:	40 e1       	ldi	r20, 0x10	; 16
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	ee 24       	eor	r14, r14
     b08:	ac d2       	rcall	.+1368   	; 0x1062 <Pipe_ConfigurePipe>
	                   DataINEndpoint->EndpointAddress, DataINEndpoint->EndpointSize, PIPE_BANK_SINGLE);

	/* Configure the Still Image data OUT pipe */
	Pipe_ConfigurePipe(SIMAGE_DATA_OUT_PIPE, EP_TYPE_BULK, PIPE_TOKEN_OUT,
     b0a:	f6 01       	movw	r30, r12
     b0c:	04 81       	ldd	r16, Z+4	; 0x04
     b0e:	15 81       	ldd	r17, Z+5	; 0x05
     b10:	82 e0       	ldi	r24, 0x02	; 2
     b12:	62 e0       	ldi	r22, 0x02	; 2
     b14:	40 e2       	ldi	r20, 0x20	; 32
     b16:	22 81       	ldd	r18, Z+2	; 0x02
     b18:	a4 d2       	rcall	.+1352   	; 0x1062 <Pipe_ConfigurePipe>
					   DataOUTEndpoint->EndpointAddress, DataOUTEndpoint->EndpointSize, PIPE_BANK_SINGLE);

	/* Configure the Still Image events pipe */
	Pipe_ConfigurePipe(SIMAGE_EVENTS_PIPE, EP_TYPE_INTERRUPT, PIPE_TOKEN_IN,
     b1a:	f5 01       	movw	r30, r10
     b1c:	04 81       	ldd	r16, Z+4	; 0x04
     b1e:	15 81       	ldd	r17, Z+5	; 0x05
     b20:	83 e0       	ldi	r24, 0x03	; 3
     b22:	63 e0       	ldi	r22, 0x03	; 3
     b24:	40 e1       	ldi	r20, 0x10	; 16
     b26:	22 81       	ldd	r18, Z+2	; 0x02
     b28:	9c d2       	rcall	.+1336   	; 0x1062 <Pipe_ConfigurePipe>
					   EventsEndpoint->EndpointAddress, EventsEndpoint->EndpointSize, PIPE_BANK_SINGLE);
	Pipe_SetInterruptPeriod(EventsEndpoint->PollingIntervalMS);
     b2a:	f5 01       	movw	r30, r10
     b2c:	86 81       	ldd	r24, Z+6	; 0x06
			 *  \param[in] Milliseconds  Number of milliseconds between each pipe poll.
			 */
			static inline void Pipe_SetInterruptPeriod(const uint8_t Milliseconds) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInterruptPeriod(const uint8_t Milliseconds)
			{
				UPCFG2X = Milliseconds;
     b2e:	80 93 ad 00 	sts	0x00AD, r24
     b32:	80 e0       	ldi	r24, 0x00	; 0

	/* Valid data found, return success */
	return SuccessfulConfigRead;
}
     b34:	cc 5f       	subi	r28, 0xFC	; 252
     b36:	dd 4f       	sbci	r29, 0xFD	; 253
     b38:	0f b6       	in	r0, 0x3f	; 63
     b3a:	f8 94       	cli
     b3c:	de bf       	out	0x3e, r29	; 62
     b3e:	0f be       	out	0x3f, r0	; 63
     b40:	cd bf       	out	0x3d, r28	; 61
     b42:	cf 91       	pop	r28
     b44:	df 91       	pop	r29
     b46:	1f 91       	pop	r17
     b48:	0f 91       	pop	r16
     b4a:	ff 90       	pop	r15
     b4c:	ef 90       	pop	r14
     b4e:	df 90       	pop	r13
     b50:	cf 90       	pop	r12
     b52:	bf 90       	pop	r11
     b54:	af 90       	pop	r10
     b56:	9f 90       	pop	r9
     b58:	8f 90       	pop	r8
     b5a:	7f 90       	pop	r7
     b5c:	6f 90       	pop	r6
     b5e:	08 95       	ret

00000b60 <SImage_ReadData>:
 *
 *  \return A value from the Pipe_Stream_RW_ErrorCodes_t enum
 */
uint8_t SImage_ReadData(void* const Buffer,
                        const uint16_t Bytes)
{
     b60:	0f 93       	push	r16
     b62:	1f 93       	push	r17
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     b64:	21 e0       	ldi	r18, 0x01	; 1
     b66:	20 93 a7 00 	sts	0x00A7, r18

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     b6a:	09 ea       	ldi	r16, 0xA9	; 169
     b6c:	10 e0       	ldi	r17, 0x00	; 0
     b6e:	f8 01       	movw	r30, r16
     b70:	20 81       	ld	r18, Z
     b72:	2f 7b       	andi	r18, 0xBF	; 191
     b74:	20 83       	st	Z, r18
	/* Unfreeze the data IN pipe */
	Pipe_SelectPipe(SIMAGE_DATA_IN_PIPE);
	Pipe_Unfreeze();

	/* Read in the data into the buffer */
	ErrorCode = Pipe_Read_Stream_LE(Buffer, Bytes, NULL);
     b76:	40 e0       	ldi	r20, 0x00	; 0
     b78:	50 e0       	ldi	r21, 0x00	; 0
     b7a:	25 d4       	rcall	.+2122   	; 0x13c6 <Pipe_Read_Stream_LE>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     b7c:	f8 01       	movw	r30, r16
     b7e:	90 81       	ld	r25, Z
     b80:	90 64       	ori	r25, 0x40	; 64
     b82:	90 83       	st	Z, r25

	/* Freeze the pipe again after use */
	Pipe_Freeze();

	return ErrorCode;
}
     b84:	1f 91       	pop	r17
     b86:	0f 91       	pop	r16
     b88:	08 95       	ret

00000b8a <SImage_SendBlockHeader>:
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     b8a:	82 e0       	ldi	r24, 0x02	; 2
     b8c:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     b90:	80 91 a9 00 	lds	r24, 0x00A9
     b94:	8f 7b       	andi	r24, 0xBF	; 191
     b96:	80 93 a9 00 	sts	0x00A9, r24
	/* Unfreeze the data OUT pipe ready for data transmission */
	Pipe_SelectPipe(SIMAGE_DATA_OUT_PIPE);
	Pipe_Unfreeze();

	/* Write the PIMA block to the data OUT pipe */
	Pipe_Write_Stream_LE(&PIMA_SendBlock, PIMA_COMMAND_SIZE(0), NULL);
     b9a:	8d e2       	ldi	r24, 0x2D	; 45
     b9c:	91 e0       	ldi	r25, 0x01	; 1
     b9e:	6c e0       	ldi	r22, 0x0C	; 12
     ba0:	70 e0       	ldi	r23, 0x00	; 0
     ba2:	40 e0       	ldi	r20, 0x00	; 0
     ba4:	50 e0       	ldi	r21, 0x00	; 0
     ba6:	66 d4       	rcall	.+2252   	; 0x1474 <Pipe_Write_Stream_LE>

	/* If the block type is a command, send its parameters (if any) */
	if (PIMA_SendBlock.Type == PIMA_CONTAINER_CommandBlock)
     ba8:	80 91 31 01 	lds	r24, 0x0131
     bac:	90 91 32 01 	lds	r25, 0x0132
     bb0:	01 97       	sbiw	r24, 0x01	; 1
     bb2:	79 f4       	brne	.+30     	; 0xbd2 <SImage_SendBlockHeader+0x48>
	{
		/* Determine the size of the parameters in the block via the data length attribute */
		uint8_t ParamBytes = (PIMA_SendBlock.DataLength - PIMA_COMMAND_SIZE(0));
     bb4:	60 91 2d 01 	lds	r22, 0x012D
     bb8:	6c 50       	subi	r22, 0x0C	; 12

		/* Check if any parameters in the command block */
		if (ParamBytes)
     bba:	31 f0       	breq	.+12     	; 0xbc8 <SImage_SendBlockHeader+0x3e>
		{
			/* Write the PIMA parameters to the data OUT pipe */
			Pipe_Write_Stream_LE(&PIMA_SendBlock.Params, ParamBytes, NULL);
     bbc:	89 e3       	ldi	r24, 0x39	; 57
     bbe:	91 e0       	ldi	r25, 0x01	; 1
     bc0:	70 e0       	ldi	r23, 0x00	; 0
     bc2:	40 e0       	ldi	r20, 0x00	; 0
     bc4:	50 e0       	ldi	r21, 0x00	; 0
     bc6:	56 d4       	rcall	.+2220   	; 0x1474 <Pipe_Write_Stream_LE>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
     bc8:	80 91 a6 00 	lds	r24, 0x00A6
     bcc:	8b 77       	andi	r24, 0x7B	; 123
     bce:	80 93 a6 00 	sts	0x00A6, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     bd2:	80 91 a9 00 	lds	r24, 0x00A9
     bd6:	80 64       	ori	r24, 0x40	; 64
     bd8:	80 93 a9 00 	sts	0x00A9, r24
		Pipe_ClearOUT();
	}

	/* Freeze pipe after use */
	Pipe_Freeze();
}
     bdc:	08 95       	ret

00000bde <SImage_ReceiveBlockHeader>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
     bde:	40 91 a2 00 	lds	r20, 0x00A2
     be2:	50 91 a3 00 	lds	r21, 0x00A3
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     be6:	81 e0       	ldi	r24, 0x01	; 1
     be8:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     bec:	80 91 a9 00 	lds	r24, 0x00A9
     bf0:	8f 7b       	andi	r24, 0xBF	; 191
     bf2:	80 93 a9 00 	sts	0x00A9, r24
     bf6:	20 e1       	ldi	r18, 0x10	; 16
     bf8:	37 e2       	ldi	r19, 0x27	; 39
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     bfa:	72 e0       	ldi	r23, 0x02	; 2
     bfc:	61 e0       	ldi	r22, 0x01	; 1
     bfe:	42 c0       	rjmp	.+132    	; 0xc84 <SImage_ReceiveBlockHeader+0xa6>
     c00:	80 91 a2 00 	lds	r24, 0x00A2
     c04:	90 91 a3 00 	lds	r25, 0x00A3
	while (!(Pipe_IsINReceived()))
	{
		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		/* Check to see if a new frame has been issued (1ms elapsed) */
		if (CurrentFrameNumber != PreviousFrameNumber)
     c08:	84 17       	cp	r24, r20
     c0a:	95 07       	cpc	r25, r21
     c0c:	31 f0       	breq	.+12     	; 0xc1a <SImage_ReceiveBlockHeader+0x3c>
		{
			/* Save the new frame number and decrement the timeout period */
			PreviousFrameNumber = CurrentFrameNumber;
			TimeoutMSRem--;
     c0e:	21 50       	subi	r18, 0x01	; 1
     c10:	30 40       	sbci	r19, 0x00	; 0

			/* Check to see if the timeout period for the command has elapsed */
			if (!(TimeoutMSRem))
     c12:	11 f4       	brne	.+4      	; 0xc18 <SImage_ReceiveBlockHeader+0x3a>
     c14:	83 e0       	ldi	r24, 0x03	; 3
     c16:	08 95       	ret
     c18:	ac 01       	movw	r20, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     c1a:	80 91 a9 00 	lds	r24, 0x00A9
     c1e:	80 64       	ori	r24, 0x40	; 64
     c20:	80 93 a9 00 	sts	0x00A9, r24
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     c24:	70 93 a7 00 	sts	0x00A7, r23

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     c28:	80 91 a9 00 	lds	r24, 0x00A9
     c2c:	8f 7b       	andi	r24, 0xBF	; 191
     c2e:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     c32:	80 91 a6 00 	lds	r24, 0x00A6
		Pipe_Freeze();
		Pipe_SelectPipe(SIMAGE_DATA_OUT_PIPE);
		Pipe_Unfreeze();

		/* Check if pipe stalled (command failed by device) */
		if (Pipe_IsStalled())
     c36:	81 fd       	sbrc	r24, 1
     c38:	10 c0       	rjmp	.+32     	; 0xc5a <SImage_ReceiveBlockHeader+0x7c>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     c3a:	80 91 a9 00 	lds	r24, 0x00A9
     c3e:	80 64       	ori	r24, 0x40	; 64
     c40:	80 93 a9 00 	sts	0x00A9, r24
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     c44:	60 93 a7 00 	sts	0x00A7, r22

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     c48:	80 91 a9 00 	lds	r24, 0x00A9
     c4c:	8f 7b       	andi	r24, 0xBF	; 191
     c4e:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     c52:	80 91 a6 00 	lds	r24, 0x00A6
		Pipe_Freeze();
		Pipe_SelectPipe(SIMAGE_DATA_IN_PIPE);
		Pipe_Unfreeze();

		/* Check if pipe stalled (command failed by device) */
		if (Pipe_IsStalled())
     c56:	81 ff       	sbrs	r24, 1
     c58:	0f c0       	rjmp	.+30     	; 0xc78 <SImage_ReceiveBlockHeader+0x9a>
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				return (((UPCFG0X >> PEPNUM0) & PIPE_EPNUM_MASK) |
     c5a:	90 91 aa 00 	lds	r25, 0x00AA
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
     c5e:	80 91 aa 00 	lds	r24, 0x00AA
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				return (((UPCFG0X >> PEPNUM0) & PIPE_EPNUM_MASK) |
     c62:	80 73       	andi	r24, 0x30	; 48
     c64:	80 31       	cpi	r24, 0x10	; 16
     c66:	11 f0       	breq	.+4      	; 0xc6c <SImage_ReceiveBlockHeader+0x8e>
     c68:	80 e0       	ldi	r24, 0x00	; 0
     c6a:	01 c0       	rjmp	.+2      	; 0xc6e <SImage_ReceiveBlockHeader+0x90>
     c6c:	80 e8       	ldi	r24, 0x80	; 128
		{
			/* Clear the stall condition on the IN pipe */
			USB_Host_ClearEndpointStall(Pipe_GetBoundEndpointAddress());
     c6e:	9f 70       	andi	r25, 0x0F	; 15
     c70:	89 2b       	or	r24, r25
     c72:	26 d6       	rcall	.+3148   	; 0x18c0 <USB_Host_ClearEndpointStall>
     c74:	81 e0       	ldi	r24, 0x01	; 1
     c76:	08 95       	ret
			/* Return error code */
			return PIPE_RWSTREAM_PipeStalled;
		}

		/* Check to see if the device was disconnected, if so exit function */
		if (USB_HostState == HOST_STATE_Unattached)
     c78:	80 91 67 01 	lds	r24, 0x0167
     c7c:	81 30       	cpi	r24, 0x01	; 1
     c7e:	11 f4       	brne	.+4      	; 0xc84 <SImage_ReceiveBlockHeader+0xa6>
     c80:	82 e0       	ldi	r24, 0x02	; 2
     c82:	08 95       	ret
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     c84:	80 91 a6 00 	lds	r24, 0x00A6
	/* Unfreeze the data IN pipe */
	Pipe_SelectPipe(SIMAGE_DATA_IN_PIPE);
	Pipe_Unfreeze();

	/* Wait until data received on the IN pipe */
	while (!(Pipe_IsINReceived()))
     c88:	80 ff       	sbrs	r24, 0
     c8a:	ba cf       	rjmp	.-140    	; 0xc00 <SImage_ReceiveBlockHeader+0x22>
		if (USB_HostState == HOST_STATE_Unattached)
		  return PIPE_RWSTREAM_DeviceDisconnected;
	}

	/* Load in the response from the attached device */
	Pipe_Read_Stream_LE(&PIMA_ReceivedBlock, PIMA_COMMAND_SIZE(0), NULL);
     c8c:	85 e4       	ldi	r24, 0x45	; 69
     c8e:	91 e0       	ldi	r25, 0x01	; 1
     c90:	6c e0       	ldi	r22, 0x0C	; 12
     c92:	70 e0       	ldi	r23, 0x00	; 0
     c94:	40 e0       	ldi	r20, 0x00	; 0
     c96:	50 e0       	ldi	r21, 0x00	; 0
     c98:	96 d3       	rcall	.+1836   	; 0x13c6 <Pipe_Read_Stream_LE>

	/* Check if the returned block type is a response block */
	if (PIMA_ReceivedBlock.Type == PIMA_CONTAINER_ResponseBlock)
     c9a:	80 91 49 01 	lds	r24, 0x0149
     c9e:	90 91 4a 01 	lds	r25, 0x014A
     ca2:	03 97       	sbiw	r24, 0x03	; 3
     ca4:	79 f4       	brne	.+30     	; 0xcc4 <SImage_ReceiveBlockHeader+0xe6>
	{
		/* Determine the size of the parameters in the block via the data length attribute */
		uint8_t ParamBytes = (PIMA_ReceivedBlock.DataLength - PIMA_COMMAND_SIZE(0));
     ca6:	60 91 45 01 	lds	r22, 0x0145
     caa:	6c 50       	subi	r22, 0x0C	; 12

		/* Check if the device has returned any parameters */
		if (ParamBytes)
     cac:	31 f0       	breq	.+12     	; 0xcba <SImage_ReceiveBlockHeader+0xdc>
		{
			/* Read the PIMA parameters from the data IN pipe */
			Pipe_Read_Stream_LE(&PIMA_ReceivedBlock.Params, ParamBytes, NULL);
     cae:	81 e5       	ldi	r24, 0x51	; 81
     cb0:	91 e0       	ldi	r25, 0x01	; 1
     cb2:	70 e0       	ldi	r23, 0x00	; 0
     cb4:	40 e0       	ldi	r20, 0x00	; 0
     cb6:	50 e0       	ldi	r21, 0x00	; 0
     cb8:	86 d3       	rcall	.+1804   	; 0x13c6 <Pipe_Read_Stream_LE>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     cba:	80 91 a6 00 	lds	r24, 0x00A6
     cbe:	8e 77       	andi	r24, 0x7E	; 126
     cc0:	80 93 a6 00 	sts	0x00A6, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     cc4:	80 91 a9 00 	lds	r24, 0x00A9
     cc8:	80 64       	ori	r24, 0x40	; 64
     cca:	80 93 a9 00 	sts	0x00A9, r24
     cce:	80 e0       	ldi	r24, 0x00	; 0

	/* Freeze the IN pipe after use */
	Pipe_Freeze();

	return PIPE_RWSTREAM_NoError;
}
     cd0:	08 95       	ret

00000cd2 <USB_Host_WaitMS>:
		USB_ResetInterface();
	}
}

uint8_t USB_Host_WaitMS(uint8_t MS)
{
     cd2:	98 2f       	mov	r25, r24
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     cd4:	20 91 9e 00 	lds	r18, 0x009E
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     cd8:	30 91 a0 00 	lds	r19, 0x00A0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     cdc:	80 91 a0 00 	lds	r24, 0x00A0
     ce0:	8f 7d       	andi	r24, 0xDF	; 223
     ce2:	80 93 a0 00 	sts	0x00A0, r24
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     ce6:	80 91 9f 00 	lds	r24, 0x009F
     cea:	8f 7d       	andi	r24, 0xDF	; 223
     cec:	80 93 9f 00 	sts	0x009F, r24
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     cf0:	80 91 9e 00 	lds	r24, 0x009E
     cf4:	81 60       	ori	r24, 0x01	; 1
     cf6:	80 93 9e 00 	sts	0x009E, r24
     cfa:	28 c0       	rjmp	.+80     	; 0xd4c <USB_Host_WaitMS+0x7a>
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     cfc:	80 91 9f 00 	lds	r24, 0x009F

	USB_Host_ResumeBus();

	while (MS)
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     d00:	85 ff       	sbrs	r24, 5
     d02:	06 c0       	rjmp	.+12     	; 0xd10 <USB_Host_WaitMS+0x3e>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     d04:	80 91 9f 00 	lds	r24, 0x009F
     d08:	8f 7d       	andi	r24, 0xDF	; 223
     d0a:	80 93 9f 00 	sts	0x009F, r24
		{
			USB_INT_Clear(USB_INT_HSOFI);
			MS--;
     d0e:	91 50       	subi	r25, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
     d10:	80 91 67 01 	lds	r24, 0x0167
     d14:	81 30       	cpi	r24, 0x01	; 1
     d16:	11 f4       	brne	.+4      	; 0xd1c <USB_Host_WaitMS+0x4a>
     d18:	91 e0       	ldi	r25, 0x01	; 1
     d1a:	1a c0       	rjmp	.+52     	; 0xd50 <USB_Host_WaitMS+0x7e>
			 *  \return Boolean \c true if an error has occurred on the selected pipe, \c false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
     d1c:	80 91 a6 00 	lds	r24, 0x00A6
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError() == true)
     d20:	84 ff       	sbrs	r24, 4
     d22:	09 c0       	rjmp	.+18     	; 0xd36 <USB_Host_WaitMS+0x64>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     d24:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
     d28:	80 91 a6 00 	lds	r24, 0x00A6
     d2c:	8f 7e       	andi	r24, 0xEF	; 239
     d2e:	80 93 a6 00 	sts	0x00A6, r24
     d32:	92 e0       	ldi	r25, 0x02	; 2
     d34:	0d c0       	rjmp	.+26     	; 0xd50 <USB_Host_WaitMS+0x7e>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     d36:	80 91 a6 00 	lds	r24, 0x00A6
			ErrorCode = HOST_WAITERROR_PipeError;

			break;
		}

		if (Pipe_IsStalled() == true)
     d3a:	81 ff       	sbrs	r24, 1
     d3c:	07 c0       	rjmp	.+14     	; 0xd4c <USB_Host_WaitMS+0x7a>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
     d3e:	80 91 a6 00 	lds	r24, 0x00A6
     d42:	8d 7f       	andi	r24, 0xFD	; 253
     d44:	80 93 a6 00 	sts	0x00A6, r24
     d48:	93 e0       	ldi	r25, 0x03	; 3
     d4a:	02 c0       	rjmp	.+4      	; 0xd50 <USB_Host_WaitMS+0x7e>
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     d4c:	99 23       	and	r25, r25
     d4e:	b1 f6       	brne	.-84     	; 0xcfc <USB_Host_WaitMS+0x2a>

			break;
		}
	}

	if (BusSuspended)
     d50:	20 fd       	sbrc	r18, 0
     d52:	05 c0       	rjmp	.+10     	; 0xd5e <USB_Host_WaitMS+0x8c>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     d54:	80 91 9e 00 	lds	r24, 0x009E
     d58:	8e 7f       	andi	r24, 0xFE	; 254
     d5a:	80 93 9e 00 	sts	0x009E, r24
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
     d5e:	35 ff       	sbrs	r19, 5
     d60:	05 c0       	rjmp	.+10     	; 0xd6c <USB_Host_WaitMS+0x9a>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     d62:	80 91 a0 00 	lds	r24, 0x00A0
     d66:	80 62       	ori	r24, 0x20	; 32
     d68:	80 93 a0 00 	sts	0x00A0, r24
	  USB_INT_Enable(USB_INT_HSOFI);

	return ErrorCode;
}
     d6c:	89 2f       	mov	r24, r25
     d6e:	08 95       	ret

00000d70 <USB_Host_ResetDevice>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     d70:	60 91 9e 00 	lds	r22, 0x009E
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     d74:	80 91 a0 00 	lds	r24, 0x00A0
     d78:	8d 7f       	andi	r24, 0xFD	; 253
     d7a:	80 93 a0 00 	sts	0x00A0, r24
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
     d7e:	80 91 9e 00 	lds	r24, 0x009E
     d82:	82 60       	ori	r24, 0x02	; 2
     d84:	80 93 9e 00 	sts	0x009E, r24
			 *  \return Boolean \c true if no bus reset is currently being sent, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
     d88:	80 91 9e 00 	lds	r24, 0x009E
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
     d8c:	81 fd       	sbrc	r24, 1
     d8e:	fc cf       	rjmp	.-8      	; 0xd88 <USB_Host_ResetDevice+0x18>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     d90:	80 91 9e 00 	lds	r24, 0x009E
     d94:	81 60       	ori	r24, 0x01	; 1
     d96:	80 93 9e 00 	sts	0x009E, r24
	USB_Host_ResumeBus();
	
	USB_Host_ConfigurationNumber = 0;
     d9a:	10 92 5d 01 	sts	0x015D, r1
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     d9e:	30 91 a0 00 	lds	r19, 0x00A0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     da2:	80 91 a0 00 	lds	r24, 0x00A0
     da6:	8f 7d       	andi	r24, 0xDF	; 223
     da8:	80 93 a0 00 	sts	0x00A0, r24
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     dac:	80 91 9f 00 	lds	r24, 0x009F
     db0:	8f 7d       	andi	r24, 0xDF	; 223
     db2:	80 93 9f 00 	sts	0x009F, r24
     db6:	2a e0       	ldi	r18, 0x0A	; 10
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     db8:	40 ed       	ldi	r20, 0xD0	; 208
     dba:	57 e0       	ldi	r21, 0x07	; 7
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     dbc:	80 91 9f 00 	lds	r24, 0x009F
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     dc0:	85 ff       	sbrs	r24, 5
     dc2:	0b c0       	rjmp	.+22     	; 0xdda <USB_Host_ResetDevice+0x6a>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     dc4:	80 91 9f 00 	lds	r24, 0x009F
     dc8:	8f 7d       	andi	r24, 0xDF	; 223
     dca:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     dce:	80 91 9f 00 	lds	r24, 0x009F
     dd2:	8d 7f       	andi	r24, 0xFD	; 253
     dd4:	80 93 9f 00 	sts	0x009F, r24
     dd8:	05 c0       	rjmp	.+10     	; 0xde4 <USB_Host_ResetDevice+0x74>
     dda:	ca 01       	movw	r24, r20
     ddc:	01 97       	sbiw	r24, 0x01	; 1
     dde:	f1 f7       	brne	.-4      	; 0xddc <USB_Host_ResetDevice+0x6c>
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
     de0:	21 50       	subi	r18, 0x01	; 1
     de2:	61 f7       	brne	.-40     	; 0xdbc <USB_Host_ResetDevice+0x4c>
		}

		Delay_MS(1);
	}

	if (HSOFIEnabled)
     de4:	35 ff       	sbrs	r19, 5
     de6:	05 c0       	rjmp	.+10     	; 0xdf2 <USB_Host_ResetDevice+0x82>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     de8:	80 91 a0 00 	lds	r24, 0x00A0
     dec:	80 62       	ori	r24, 0x20	; 32
     dee:	80 93 a0 00 	sts	0x00A0, r24
	  USB_INT_Enable(USB_INT_HSOFI);

	if (BusSuspended)
     df2:	60 fd       	sbrc	r22, 0
     df4:	05 c0       	rjmp	.+10     	; 0xe00 <USB_Host_ResetDevice+0x90>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     df6:	80 91 9e 00 	lds	r24, 0x009E
     dfa:	8e 7f       	andi	r24, 0xFE	; 254
     dfc:	80 93 9e 00 	sts	0x009E, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     e00:	80 91 a0 00 	lds	r24, 0x00A0
     e04:	82 60       	ori	r24, 0x02	; 2
     e06:	80 93 a0 00 	sts	0x00A0, r24
	  USB_Host_SuspendBus();

	USB_INT_Enable(USB_INT_DDISCI);
}
     e0a:	08 95       	ret

00000e0c <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "../Host.h"

void USB_Host_ProcessNextHostState(void)
{
     e0c:	ef 92       	push	r14
     e0e:	0f 93       	push	r16
     e10:	1f 93       	push	r17
     e12:	df 93       	push	r29
     e14:	cf 93       	push	r28
     e16:	cd b7       	in	r28, 0x3d	; 61
     e18:	de b7       	in	r29, 0x3e	; 62
     e1a:	28 97       	sbiw	r28, 0x08	; 8
     e1c:	0f b6       	in	r0, 0x3f	; 63
     e1e:	f8 94       	cli
     e20:	de bf       	out	0x3e, r29	; 62
     e22:	0f be       	out	0x3f, r0	; 63
     e24:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
     e26:	80 91 67 01 	lds	r24, 0x0167
     e2a:	85 30       	cpi	r24, 0x05	; 5
     e2c:	09 f4       	brne	.+2      	; 0xe30 <USB_Host_ProcessNextHostState+0x24>
     e2e:	94 c0       	rjmp	.+296    	; 0xf58 <USB_Host_ProcessNextHostState+0x14c>
     e30:	86 30       	cpi	r24, 0x06	; 6
     e32:	68 f4       	brcc	.+26     	; 0xe4e <USB_Host_ProcessNextHostState+0x42>
     e34:	82 30       	cpi	r24, 0x02	; 2
     e36:	b9 f1       	breq	.+110    	; 0xea6 <USB_Host_ProcessNextHostState+0x9a>
     e38:	83 30       	cpi	r24, 0x03	; 3
     e3a:	18 f4       	brcc	.+6      	; 0xe42 <USB_Host_ProcessNextHostState+0x36>
     e3c:	88 23       	and	r24, r24
     e3e:	a1 f0       	breq	.+40     	; 0xe68 <USB_Host_ProcessNextHostState+0x5c>
     e40:	04 c1       	rjmp	.+520    	; 0x104a <USB_Host_ProcessNextHostState+0x23e>
     e42:	83 30       	cpi	r24, 0x03	; 3
     e44:	d1 f1       	breq	.+116    	; 0xeba <USB_Host_ProcessNextHostState+0xae>
     e46:	84 30       	cpi	r24, 0x04	; 4
     e48:	09 f0       	breq	.+2      	; 0xe4c <USB_Host_ProcessNextHostState+0x40>
     e4a:	ff c0       	rjmp	.+510    	; 0x104a <USB_Host_ProcessNextHostState+0x23e>
     e4c:	5d c0       	rjmp	.+186    	; 0xf08 <USB_Host_ProcessNextHostState+0xfc>
     e4e:	87 30       	cpi	r24, 0x07	; 7
     e50:	09 f4       	brne	.+2      	; 0xe54 <USB_Host_ProcessNextHostState+0x48>
     e52:	9b c0       	rjmp	.+310    	; 0xf8a <USB_Host_ProcessNextHostState+0x17e>
     e54:	87 30       	cpi	r24, 0x07	; 7
     e56:	08 f4       	brcc	.+2      	; 0xe5a <USB_Host_ProcessNextHostState+0x4e>
     e58:	8a c0       	rjmp	.+276    	; 0xf6e <USB_Host_ProcessNextHostState+0x162>
     e5a:	88 30       	cpi	r24, 0x08	; 8
     e5c:	09 f4       	brne	.+2      	; 0xe60 <USB_Host_ProcessNextHostState+0x54>
     e5e:	b3 c0       	rjmp	.+358    	; 0xfc6 <USB_Host_ProcessNextHostState+0x1ba>
     e60:	89 30       	cpi	r24, 0x09	; 9
     e62:	09 f0       	breq	.+2      	; 0xe66 <USB_Host_ProcessNextHostState+0x5a>
     e64:	f2 c0       	rjmp	.+484    	; 0x104a <USB_Host_ProcessNextHostState+0x23e>
     e66:	d7 c0       	rjmp	.+430    	; 0x1016 <USB_Host_ProcessNextHostState+0x20a>
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
     e68:	00 91 13 01 	lds	r16, 0x0113
     e6c:	10 91 14 01 	lds	r17, 0x0114
     e70:	01 15       	cp	r16, r1
     e72:	11 05       	cpc	r17, r1
     e74:	09 f4       	brne	.+2      	; 0xe78 <USB_Host_ProcessNextHostState+0x6c>
     e76:	e9 c0       	rjmp	.+466    	; 0x104a <USB_Host_ProcessNextHostState+0x23e>
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     e78:	81 e0       	ldi	r24, 0x01	; 1
     e7a:	2b df       	rcall	.-426    	; 0xcd2 <USB_Host_WaitMS>
     e7c:	68 2f       	mov	r22, r24
     e7e:	88 23       	and	r24, r24
     e80:	31 f0       	breq	.+12     	; 0xe8e <USB_Host_ProcessNextHostState+0x82>
				{
					USB_HostState = PostWaitState;
     e82:	80 91 12 01 	lds	r24, 0x0112
     e86:	80 93 67 01 	sts	0x0167, r24
     e8a:	91 e0       	ldi	r25, 0x01	; 1
     e8c:	da c0       	rjmp	.+436    	; 0x1042 <USB_Host_ProcessNextHostState+0x236>
					ErrorCode     = HOST_ENUMERROR_WaitStage;
					break;
				}

				if (!(--WaitMSRemaining))
     e8e:	c8 01       	movw	r24, r16
     e90:	01 97       	sbiw	r24, 0x01	; 1
     e92:	90 93 14 01 	sts	0x0114, r25
     e96:	80 93 13 01 	sts	0x0113, r24
     e9a:	89 2b       	or	r24, r25
     e9c:	09 f0       	breq	.+2      	; 0xea0 <USB_Host_ProcessNextHostState+0x94>
     e9e:	d5 c0       	rjmp	.+426    	; 0x104a <USB_Host_ProcessNextHostState+0x23e>
				  USB_HostState = PostWaitState;
     ea0:	80 91 12 01 	lds	r24, 0x0112
     ea4:	07 c0       	rjmp	.+14     	; 0xeb4 <USB_Host_ProcessNextHostState+0xa8>
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
     ea6:	88 ee       	ldi	r24, 0xE8	; 232
     ea8:	93 e0       	ldi	r25, 0x03	; 3
     eaa:	90 93 14 01 	sts	0x0114, r25
     eae:	80 93 13 01 	sts	0x0113, r24

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
     eb2:	83 e0       	ldi	r24, 0x03	; 3
     eb4:	80 93 67 01 	sts	0x0167, r24
     eb8:	c8 c0       	rjmp	.+400    	; 0x104a <USB_Host_ProcessNextHostState+0x23e>
			break;
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
     eba:	80 91 13 01 	lds	r24, 0x0113
     ebe:	90 91 14 01 	lds	r25, 0x0114
     ec2:	01 97       	sbiw	r24, 0x01	; 1
     ec4:	90 93 14 01 	sts	0x0114, r25
     ec8:	80 93 13 01 	sts	0x0113, r24
     ecc:	01 96       	adiw	r24, 0x01	; 1
     ece:	29 f0       	breq	.+10     	; 0xeda <USB_Host_ProcessNextHostState+0xce>
     ed0:	80 ed       	ldi	r24, 0xD0	; 208
     ed2:	97 e0       	ldi	r25, 0x07	; 7
     ed4:	01 97       	sbiw	r24, 0x01	; 1
     ed6:	f1 f7       	brne	.-4      	; 0xed4 <USB_Host_ProcessNextHostState+0xc8>
     ed8:	b8 c0       	rjmp	.+368    	; 0x104a <USB_Host_ProcessNextHostState+0x23e>
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
     eda:	77 98       	cbi	0x0e, 7	; 14

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     edc:	80 91 d8 00 	lds	r24, 0x00D8
     ee0:	80 61       	ori	r24, 0x10	; 16
     ee2:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
     ee6:	80 91 dd 00 	lds	r24, 0x00DD
     eea:	8b 7f       	andi	r24, 0xFB	; 251
     eec:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON |=  (1 << UVCONE);
     ef0:	80 91 d7 00 	lds	r24, 0x00D7
     ef4:	80 61       	ori	r24, 0x10	; 16
     ef6:	80 93 d7 00 	sts	0x00D7, r24
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
     efa:	80 91 dd 00 	lds	r24, 0x00DD
     efe:	82 60       	ori	r24, 0x02	; 2
     f00:	80 93 dd 00 	sts	0x00DD, r24

				USB_OTGPAD_On();
				USB_Host_VBUS_Auto_Enable();
				USB_Host_VBUS_Auto_On();

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
     f04:	84 e0       	ldi	r24, 0x04	; 4
     f06:	d6 cf       	rjmp	.-84     	; 0xeb4 <USB_Host_ProcessNextHostState+0xa8>
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
     f08:	80 91 9f 00 	lds	r24, 0x009F
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
     f0c:	80 ff       	sbrs	r24, 0
     f0e:	9d c0       	rjmp	.+314    	; 0x104a <USB_Host_ProcessNextHostState+0x23e>
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     f10:	80 91 9f 00 	lds	r24, 0x009F
     f14:	8e 7f       	andi	r24, 0xFE	; 254
     f16:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     f1a:	80 91 9f 00 	lds	r24, 0x009F
     f1e:	8d 7f       	andi	r24, 0xFD	; 253
     f20:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     f24:	80 91 df 00 	lds	r24, 0x00DF
     f28:	8d 7f       	andi	r24, 0xFD	; 253
     f2a:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
     f2e:	80 91 de 00 	lds	r24, 0x00DE
     f32:	82 60       	ori	r24, 0x02	; 2
     f34:	80 93 de 00 	sts	0x00DE, r24
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     f38:	80 91 9e 00 	lds	r24, 0x009E
     f3c:	81 60       	ori	r24, 0x01	; 1
     f3e:	80 93 9e 00 	sts	0x009E, r24

				USB_INT_Clear(USB_INT_VBERRI);
				USB_INT_Enable(USB_INT_VBERRI);

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
     f42:	ed d0       	rcall	.+474    	; 0x111e <Pipe_ClearPipes>

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
     f44:	10 92 67 01 	sts	0x0167, r1
     f48:	84 e6       	ldi	r24, 0x64	; 100
     f4a:	90 e0       	ldi	r25, 0x00	; 0
     f4c:	90 93 14 01 	sts	0x0114, r25
     f50:	80 93 13 01 	sts	0x0113, r24
     f54:	85 e0       	ldi	r24, 0x05	; 5
     f56:	5c c0       	rjmp	.+184    	; 0x1010 <USB_Host_ProcessNextHostState+0x204>
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
     f58:	0b df       	rcall	.-490    	; 0xd70 <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
     f5a:	10 92 67 01 	sts	0x0167, r1
     f5e:	88 ec       	ldi	r24, 0xC8	; 200
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	90 93 14 01 	sts	0x0114, r25
     f66:	80 93 13 01 	sts	0x0113, r24
     f6a:	86 e0       	ldi	r24, 0x06	; 6
     f6c:	51 c0       	rjmp	.+162    	; 0x1010 <USB_Host_ProcessNextHostState+0x204>
			break;
		case HOST_STATE_Powered_ConfigPipe:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
     f6e:	80 e0       	ldi	r24, 0x00	; 0
     f70:	60 e0       	ldi	r22, 0x00	; 0
     f72:	40 e0       	ldi	r20, 0x00	; 0
     f74:	20 e0       	ldi	r18, 0x00	; 0
     f76:	00 e4       	ldi	r16, 0x40	; 64
     f78:	10 e0       	ldi	r17, 0x00	; 0
     f7a:	ee 24       	eor	r14, r14
     f7c:	72 d0       	rcall	.+228    	; 0x1062 <Pipe_ConfigurePipe>
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     f7e:	80 91 ac 00 	lds	r24, 0x00AC
							   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
							   PIPE_CONTROLPIPE_DEFAULT_SIZE, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
     f82:	87 ff       	sbrs	r24, 7
     f84:	5c c0       	rjmp	.+184    	; 0x103e <USB_Host_ProcessNextHostState+0x232>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
     f86:	87 e0       	ldi	r24, 0x07	; 7
     f88:	95 cf       	rjmp	.-214    	; 0xeb4 <USB_Host_ProcessNextHostState+0xa8>
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
     f8a:	af e5       	ldi	r26, 0x5F	; 95
     f8c:	b1 e0       	ldi	r27, 0x01	; 1
     f8e:	e8 e0       	ldi	r30, 0x08	; 8
     f90:	f1 e0       	ldi	r31, 0x01	; 1
     f92:	88 e0       	ldi	r24, 0x08	; 8
     f94:	01 90       	ld	r0, Z+
     f96:	0d 92       	st	X+, r0
     f98:	81 50       	subi	r24, 0x01	; 1
     f9a:	e1 f7       	brne	.-8      	; 0xf94 <USB_Host_ProcessNextHostState+0x188>
					.wLength       = 8,
				};

			uint8_t DataBuffer[8];

			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
     f9c:	ce 01       	movw	r24, r28
     f9e:	01 96       	adiw	r24, 0x01	; 1
     fa0:	88 d3       	rcall	.+1808   	; 0x16b2 <USB_Host_SendControlRequest>
     fa2:	68 2f       	mov	r22, r24
     fa4:	88 23       	and	r24, r24
     fa6:	09 f0       	breq	.+2      	; 0xfaa <USB_Host_ProcessNextHostState+0x19e>
     fa8:	48 c0       	rjmp	.+144    	; 0x103a <USB_Host_ProcessNextHostState+0x22e>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_Host_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
     faa:	88 85       	ldd	r24, Y+8	; 0x08
     fac:	80 93 10 01 	sts	0x0110, r24

			USB_Host_ResetDevice();
     fb0:	df de       	rcall	.-578    	; 0xd70 <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
     fb2:	10 92 67 01 	sts	0x0167, r1
     fb6:	88 ec       	ldi	r24, 0xC8	; 200
     fb8:	90 e0       	ldi	r25, 0x00	; 0
     fba:	90 93 14 01 	sts	0x0114, r25
     fbe:	80 93 13 01 	sts	0x0113, r24
     fc2:	88 e0       	ldi	r24, 0x08	; 8
     fc4:	25 c0       	rjmp	.+74     	; 0x1010 <USB_Host_ProcessNextHostState+0x204>
			break;
		case HOST_STATE_Default_PostReset:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
     fc6:	00 91 10 01 	lds	r16, 0x0110
     fca:	80 e0       	ldi	r24, 0x00	; 0
     fcc:	60 e0       	ldi	r22, 0x00	; 0
     fce:	40 e0       	ldi	r20, 0x00	; 0
     fd0:	20 e0       	ldi	r18, 0x00	; 0
     fd2:	10 e0       	ldi	r17, 0x00	; 0
     fd4:	ee 24       	eor	r14, r14
     fd6:	45 d0       	rcall	.+138    	; 0x1062 <Pipe_ConfigurePipe>
     fd8:	80 91 ac 00 	lds	r24, 0x00AC
			                   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
			                   USB_Host_ControlPipeSize, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
     fdc:	87 ff       	sbrs	r24, 7
     fde:	2f c0       	rjmp	.+94     	; 0x103e <USB_Host_ProcessNextHostState+0x232>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
     fe0:	af e5       	ldi	r26, 0x5F	; 95
     fe2:	b1 e0       	ldi	r27, 0x01	; 1
     fe4:	e0 e0       	ldi	r30, 0x00	; 0
     fe6:	f1 e0       	ldi	r31, 0x01	; 1
     fe8:	88 e0       	ldi	r24, 0x08	; 8
     fea:	01 90       	ld	r0, Z+
     fec:	0d 92       	st	X+, r0
     fee:	81 50       	subi	r24, 0x01	; 1
     ff0:	e1 f7       	brne	.-8      	; 0xfea <USB_Host_ProcessNextHostState+0x1de>
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
     ff2:	80 e0       	ldi	r24, 0x00	; 0
     ff4:	90 e0       	ldi	r25, 0x00	; 0
     ff6:	5d d3       	rcall	.+1722   	; 0x16b2 <USB_Host_SendControlRequest>
     ff8:	68 2f       	mov	r22, r24
     ffa:	88 23       	and	r24, r24
     ffc:	f1 f4       	brne	.+60     	; 0x103a <USB_Host_ProcessNextHostState+0x22e>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
     ffe:	10 92 67 01 	sts	0x0167, r1
    1002:	84 e6       	ldi	r24, 0x64	; 100
    1004:	90 e0       	ldi	r25, 0x00	; 0
    1006:	90 93 14 01 	sts	0x0114, r25
    100a:	80 93 13 01 	sts	0x0113, r24
    100e:	89 e0       	ldi	r24, 0x09	; 9
    1010:	80 93 12 01 	sts	0x0112, r24
    1014:	1a c0       	rjmp	.+52     	; 0x104a <USB_Host_ProcessNextHostState+0x23e>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
    1016:	81 e0       	ldi	r24, 0x01	; 1
    1018:	80 93 a1 00 	sts	0x00A1, r24
			break;
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			USB_HostState = HOST_STATE_Addressed;
    101c:	8a e0       	ldi	r24, 0x0A	; 10
    101e:	80 93 67 01 	sts	0x0167, r24

			EVENT_USB_Host_DeviceEnumerationComplete();
    1022:	3b dc       	rcall	.-1930   	; 0x89a <EVENT_USB_Host_DeviceEnumerationComplete>
    1024:	12 c0       	rjmp	.+36     	; 0x104a <USB_Host_ProcessNextHostState+0x23e>
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
    1026:	89 2f       	mov	r24, r25
    1028:	e7 d9       	rcall	.-3122   	; 0x3f8 <EVENT_USB_Host_DeviceEnumerationFailed>
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
    102a:	80 91 dd 00 	lds	r24, 0x00DD
    102e:	81 60       	ori	r24, 0x01	; 1
    1030:	80 93 dd 00 	sts	0x00DD, r24

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
    1034:	0d da       	rcall	.-3046   	; 0x450 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
    1036:	b6 d0       	rcall	.+364    	; 0x11a4 <USB_ResetInterface>
    1038:	08 c0       	rjmp	.+16     	; 0x104a <USB_Host_ProcessNextHostState+0x23e>
	}
}
    103a:	93 e0       	ldi	r25, 0x03	; 3
    103c:	02 c0       	rjmp	.+4      	; 0x1042 <USB_Host_ProcessNextHostState+0x236>
    103e:	94 e0       	ldi	r25, 0x04	; 4
    1040:	60 e0       	ldi	r22, 0x00	; 0

			EVENT_USB_Host_DeviceEnumerationComplete();
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
    1042:	80 91 67 01 	lds	r24, 0x0167
    1046:	81 30       	cpi	r24, 0x01	; 1
    1048:	71 f7       	brne	.-36     	; 0x1026 <USB_Host_ProcessNextHostState+0x21a>

		EVENT_USB_Host_DeviceUnattached();

		USB_ResetInterface();
	}
}
    104a:	28 96       	adiw	r28, 0x08	; 8
    104c:	0f b6       	in	r0, 0x3f	; 63
    104e:	f8 94       	cli
    1050:	de bf       	out	0x3e, r29	; 62
    1052:	0f be       	out	0x3f, r0	; 63
    1054:	cd bf       	out	0x3d, r28	; 61
    1056:	cf 91       	pop	r28
    1058:	df 91       	pop	r29
    105a:	1f 91       	pop	r17
    105c:	0f 91       	pop	r16
    105e:	ef 90       	pop	r14
    1060:	08 95       	ret

00001062 <Pipe_ConfigurePipe>:
                        const uint8_t Type,
                        const uint8_t Token,
                        const uint8_t EndpointNumber,
                        const uint16_t Size,
                        const uint8_t Banks)
{
    1062:	ef 92       	push	r14
    1064:	0f 93       	push	r16
    1066:	1f 93       	push	r17
    1068:	e8 2f       	mov	r30, r24
    106a:	7e 2d       	mov	r23, r14

		Pipe_SelectPipe(PNum);
		
		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
    106c:	62 95       	swap	r22
    106e:	66 0f       	add	r22, r22
    1070:	66 0f       	add	r22, r22
    1072:	60 7c       	andi	r22, 0xC0	; 192
    1074:	64 2b       	or	r22, r20
    1076:	2f 70       	andi	r18, 0x0F	; 15
    1078:	62 2b       	or	r22, r18
    107a:	38 2f       	mov	r19, r24
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
    107c:	72 60       	ori	r23, 0x02	; 2
    107e:	45 c0       	rjmp	.+138    	; 0x110a <Pipe_ConfigurePipe+0xa8>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1080:	30 93 a7 00 	sts	0x00A7, r19
		uint8_t UPCFG2XTemp;
		uint8_t UPIENXTemp;

		Pipe_SelectPipe(PNum);
		
		if (PNum == Number)
    1084:	3e 17       	cp	r19, r30
    1086:	a1 f4       	brne	.+40     	; 0x10b0 <Pipe_ConfigurePipe+0x4e>
    1088:	88 e0       	ldi	r24, 0x08	; 8
    108a:	90 e0       	ldi	r25, 0x00	; 0
    108c:	20 e0       	ldi	r18, 0x00	; 0
    108e:	03 c0       	rjmp	.+6      	; 0x1096 <Pipe_ConfigurePipe+0x34>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
				{
					MaskVal++;
    1090:	2f 5f       	subi	r18, 0xFF	; 255
					CheckBytes <<= 1;
    1092:	88 0f       	add	r24, r24
    1094:	99 1f       	adc	r25, r25
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
    1096:	80 17       	cp	r24, r16
    1098:	91 07       	cpc	r25, r17
    109a:	10 f4       	brcc	.+4      	; 0x10a0 <Pipe_ConfigurePipe+0x3e>
    109c:	25 30       	cpi	r18, 0x05	; 5
    109e:	c1 f7       	brne	.-16     	; 0x1090 <Pipe_ConfigurePipe+0x2e>
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
    10a0:	92 2f       	mov	r25, r18
    10a2:	92 95       	swap	r25
    10a4:	90 7f       	andi	r25, 0xF0	; 240
    10a6:	97 2b       	or	r25, r23
    10a8:	56 2f       	mov	r21, r22
    10aa:	40 e0       	ldi	r20, 0x00	; 0
    10ac:	20 e0       	ldi	r18, 0x00	; 0
    10ae:	08 c0       	rjmp	.+16     	; 0x10c0 <Pipe_ConfigurePipe+0x5e>
			UPCFG2XTemp = 0;
			UPIENXTemp  = 0;
		}
		else
		{
			UPCFG0XTemp = UPCFG0X;
    10b0:	50 91 aa 00 	lds	r21, 0x00AA
			UPCFG1XTemp = UPCFG1X;
    10b4:	90 91 ab 00 	lds	r25, 0x00AB
			UPCFG2XTemp = UPCFG2X;
    10b8:	40 91 ad 00 	lds	r20, 0x00AD
			UPIENXTemp  = UPIENX;
    10bc:	20 91 ae 00 	lds	r18, 0x00AE
		}

		if (!(UPCFG1XTemp & (1 << ALLOC)))
    10c0:	91 ff       	sbrs	r25, 1
    10c2:	22 c0       	rjmp	.+68     	; 0x1108 <Pipe_ConfigurePipe+0xa6>
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
    10c4:	80 91 a9 00 	lds	r24, 0x00A9
    10c8:	8e 7f       	andi	r24, 0xFE	; 254
    10ca:	80 93 a9 00 	sts	0x00A9, r24
		  continue;
		  
		Pipe_DisablePipe();
		UPCFG1X &= ~(1 << ALLOC);
    10ce:	80 91 ab 00 	lds	r24, 0x00AB
    10d2:	8d 7f       	andi	r24, 0xFD	; 253
    10d4:	80 93 ab 00 	sts	0x00AB, r24
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
    10d8:	80 91 a9 00 	lds	r24, 0x00A9
    10dc:	81 60       	ori	r24, 0x01	; 1
    10de:	80 93 a9 00 	sts	0x00A9, r24

		Pipe_EnablePipe();
		UPCFG0X = UPCFG0XTemp;
    10e2:	50 93 aa 00 	sts	0x00AA, r21
		UPCFG1X = UPCFG1XTemp;
    10e6:	90 93 ab 00 	sts	0x00AB, r25
		UPCFG2X = UPCFG2XTemp;
    10ea:	40 93 ad 00 	sts	0x00AD, r20
		UPIENX  = UPIENXTemp;
    10ee:	20 93 ae 00 	sts	0x00AE, r18

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
    10f2:	80 91 a9 00 	lds	r24, 0x00A9
    10f6:	80 62       	ori	r24, 0x20	; 32
    10f8:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
    10fc:	80 91 ac 00 	lds	r24, 0x00AC

		Pipe_SetInfiniteINRequests();
	
		if (!(Pipe_IsConfigured()))
    1100:	87 fd       	sbrc	r24, 7
    1102:	02 c0       	rjmp	.+4      	; 0x1108 <Pipe_ConfigurePipe+0xa6>
    1104:	80 e0       	ldi	r24, 0x00	; 0
    1106:	07 c0       	rjmp	.+14     	; 0x1116 <Pipe_ConfigurePipe+0xb4>

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else	
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
    1108:	3f 5f       	subi	r19, 0xFF	; 255
    110a:	37 30       	cpi	r19, 0x07	; 7
    110c:	08 f4       	brcc	.+2      	; 0x1110 <Pipe_ConfigurePipe+0xae>
    110e:	b8 cf       	rjmp	.-144    	; 0x1080 <Pipe_ConfigurePipe+0x1e>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1110:	e0 93 a7 00 	sts	0x00A7, r30
    1114:	81 e0       	ldi	r24, 0x01	; 1
	}
		
	Pipe_SelectPipe(Number);	
	return true;
#endif
}
    1116:	1f 91       	pop	r17
    1118:	0f 91       	pop	r16
    111a:	ef 90       	pop	r14
    111c:	08 95       	ret

0000111e <Pipe_ClearPipes>:

void Pipe_ClearPipes(void)
{
	UPINT = 0;
    111e:	10 92 f8 00 	sts	0x00F8, r1
    1122:	90 e0       	ldi	r25, 0x00	; 0
    1124:	90 93 a7 00 	sts	0x00A7, r25

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
    1128:	10 92 ae 00 	sts	0x00AE, r1
		UPINTX  = 0;
    112c:	10 92 a6 00 	sts	0x00A6, r1
		UPCFG1X = 0;
    1130:	10 92 ab 00 	sts	0x00AB, r1
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
    1134:	80 91 a9 00 	lds	r24, 0x00A9
    1138:	8e 7f       	andi	r24, 0xFE	; 254
    113a:	80 93 a9 00 	sts	0x00A9, r24

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
    113e:	9f 5f       	subi	r25, 0xFF	; 255
    1140:	97 30       	cpi	r25, 0x07	; 7
    1142:	81 f7       	brne	.-32     	; 0x1124 <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
    1144:	08 95       	ret

00001146 <Pipe_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
    1146:	40 91 a2 00 	lds	r20, 0x00A2
    114a:	50 91 a3 00 	lds	r21, 0x00A3
    114e:	24 e6       	ldi	r18, 0x64	; 100
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
    1150:	80 91 aa 00 	lds	r24, 0x00AA

	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
    1154:	80 73       	andi	r24, 0x30	; 48
    1156:	80 31       	cpi	r24, 0x10	; 16
    1158:	29 f4       	brne	.+10     	; 0x1164 <Pipe_WaitUntilReady+0x1e>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    115a:	80 91 a6 00 	lds	r24, 0x00A6
		{
			if (Pipe_IsINReceived())
    115e:	80 ff       	sbrs	r24, 0
    1160:	05 c0       	rjmp	.+10     	; 0x116c <Pipe_WaitUntilReady+0x26>
    1162:	1e c0       	rjmp	.+60     	; 0x11a0 <Pipe_WaitUntilReady+0x5a>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
    1164:	80 91 a6 00 	lds	r24, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
    1168:	82 fd       	sbrc	r24, 2
    116a:	1a c0       	rjmp	.+52     	; 0x11a0 <Pipe_WaitUntilReady+0x5a>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
    116c:	80 91 a6 00 	lds	r24, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
    1170:	81 ff       	sbrs	r24, 1
    1172:	02 c0       	rjmp	.+4      	; 0x1178 <Pipe_WaitUntilReady+0x32>
    1174:	81 e0       	ldi	r24, 0x01	; 1
    1176:	08 95       	ret
		  return PIPE_READYWAIT_PipeStalled;
		else if (USB_HostState == HOST_STATE_Unattached)
    1178:	80 91 67 01 	lds	r24, 0x0167
    117c:	81 30       	cpi	r24, 0x01	; 1
    117e:	11 f4       	brne	.+4      	; 0x1184 <Pipe_WaitUntilReady+0x3e>
    1180:	82 e0       	ldi	r24, 0x02	; 2
    1182:	08 95       	ret
    1184:	80 91 a2 00 	lds	r24, 0x00A2
    1188:	90 91 a3 00 	lds	r25, 0x00A3
		  return PIPE_READYWAIT_DeviceDisconnected;

		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    118c:	84 17       	cp	r24, r20
    118e:	95 07       	cpc	r25, r21
    1190:	f9 f2       	breq	.-66     	; 0x1150 <Pipe_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    1192:	22 23       	and	r18, r18
    1194:	11 f4       	brne	.+4      	; 0x119a <Pipe_WaitUntilReady+0x54>
    1196:	83 e0       	ldi	r24, 0x03	; 3
    1198:	08 95       	ret
    119a:	21 50       	subi	r18, 0x01	; 1
    119c:	ac 01       	movw	r20, r24
    119e:	d8 cf       	rjmp	.-80     	; 0x1150 <Pipe_WaitUntilReady+0xa>
    11a0:	80 e0       	ldi	r24, 0x00	; 0
			  return PIPE_READYWAIT_Timeout;
		}
	}
}
    11a2:	08 95       	ret

000011a4 <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    11a4:	70 d0       	rcall	.+224    	; 0x1286 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    11a6:	77 d0       	rcall	.+238    	; 0x1296 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    11a8:	80 91 d8 00 	lds	r24, 0x00D8
    11ac:	8f 77       	andi	r24, 0x7F	; 127
    11ae:	80 93 d8 00 	sts	0x00D8, r24
				USBCON |=  (1 << USBE);
    11b2:	80 91 d8 00 	lds	r24, 0x00D8
    11b6:	80 68       	ori	r24, 0x80	; 128
    11b8:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
    11bc:	80 91 d8 00 	lds	r24, 0x00D8
    11c0:	8f 7d       	andi	r24, 0xDF	; 223
    11c2:	80 93 d8 00 	sts	0x00D8, r24
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
    11c6:	80 91 d7 00 	lds	r24, 0x00D7
    11ca:	8f 77       	andi	r24, 0x7F	; 127
    11cc:	80 93 d7 00 	sts	0x00D7, r24

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    11d0:	8c e0       	ldi	r24, 0x0C	; 12
    11d2:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    11d4:	8e e0       	ldi	r24, 0x0E	; 14
    11d6:	89 bd       	out	0x29, r24	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_CAN_BE_HOST)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));		
    11d8:	09 b4       	in	r0, 0x29	; 41
    11da:	00 fe       	sbrs	r0, 0
    11dc:	fd cf       	rjmp	.-6      	; 0x11d8 <USB_ResetInterface+0x34>
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState                = HOST_STATE_Unattached;
    11de:	81 e0       	ldi	r24, 0x01	; 1
    11e0:	80 93 67 01 	sts	0x0167, r24
	USB_Host_ConfigurationNumber = 0;
    11e4:	10 92 5d 01 	sts	0x015D, r1
	USB_Host_ControlPipeSize     = PIPE_CONTROLPIPE_DEFAULT_SIZE;
    11e8:	80 e4       	ldi	r24, 0x40	; 64
    11ea:	80 93 10 01 	sts	0x0110, r24
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
    11ee:	80 91 d8 00 	lds	r24, 0x00D8
    11f2:	80 64       	ori	r24, 0x40	; 64
    11f4:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
    11f8:	80 91 dd 00 	lds	r24, 0x00DD
    11fc:	81 60       	ori	r24, 0x01	; 1
    11fe:	80 93 dd 00 	sts	0x00DD, r24
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
    1202:	80 91 dd 00 	lds	r24, 0x00DD
    1206:	84 60       	ori	r24, 0x04	; 4
    1208:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON &= ~(1 << UVCONE);
    120c:	80 91 d7 00 	lds	r24, 0x00D7
    1210:	8f 7e       	andi	r24, 0xEF	; 239
    1212:	80 93 d7 00 	sts	0x00D7, r24

				DDRE   |=  (1 << 7);
    1216:	6f 9a       	sbi	0x0d, 7	; 13
			}

			static inline void USB_Host_VBUS_Manual_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_On(void)
			{
				PORTE  |=  (1 << 7);
    1218:	77 9a       	sbi	0x0e, 7	; 14
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN |= (1 << SRPE);						
    121a:	80 91 de 00 	lds	r24, 0x00DE
    121e:	81 60       	ori	r24, 0x01	; 1
    1220:	80 93 de 00 	sts	0x00DE, r24
						break;
					case USB_INT_RSTI:
						UHIEN  |= (1 << RSTE);
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
    1224:	80 91 de 00 	lds	r24, 0x00DE
    1228:	84 60       	ori	r24, 0x04	; 4
    122a:	80 93 de 00 	sts	0x00DE, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    122e:	80 91 e0 00 	lds	r24, 0x00E0
    1232:	8e 7f       	andi	r24, 0xFE	; 254
    1234:	80 93 e0 00 	sts	0x00E0, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
    1238:	80 91 d8 00 	lds	r24, 0x00D8
    123c:	80 61       	ori	r24, 0x10	; 16
    123e:	80 93 d8 00 	sts	0x00D8, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    1242:	08 95       	ret

00001244 <USB_Init>:

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
    1244:	e7 ed       	ldi	r30, 0xD7	; 215
    1246:	f0 e0       	ldi	r31, 0x00	; 0
    1248:	80 81       	ld	r24, Z
    124a:	81 60       	ori	r24, 0x01	; 1
    124c:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    124e:	81 e0       	ldi	r24, 0x01	; 1
    1250:	80 93 5e 01 	sts	0x015E, r24

	USB_ResetInterface();
}
    1254:	a7 cf       	rjmp	.-178    	; 0x11a4 <USB_ResetInterface>

00001256 <USB_Disable>:

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
    1256:	17 d0       	rcall	.+46     	; 0x1286 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    1258:	1e d0       	rcall	.+60     	; 0x1296 <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
    125a:	e0 ee       	ldi	r30, 0xE0	; 224
    125c:	f0 e0       	ldi	r31, 0x00	; 0
    125e:	80 81       	ld	r24, Z
    1260:	81 60       	ori	r24, 0x01	; 1
    1262:	80 83       	st	Z, r24
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON  &= ~(1 << USBE);
    1264:	a8 ed       	ldi	r26, 0xD8	; 216
    1266:	b0 e0       	ldi	r27, 0x00	; 0
    1268:	8c 91       	ld	r24, X
    126a:	8f 77       	andi	r24, 0x7F	; 127
    126c:	8c 93       	st	X, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    126e:	19 bc       	out	0x29, r1	; 41

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  &= ~(1 << UVREGE);
    1270:	e7 ed       	ldi	r30, 0xD7	; 215
    1272:	f0 e0       	ldi	r31, 0x00	; 0
    1274:	80 81       	ld	r24, Z
    1276:	8e 7f       	andi	r24, 0xFE	; 254
    1278:	80 83       	st	Z, r24
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON  &= ~(1 << OTGPADE);
    127a:	8c 91       	ld	r24, X
    127c:	8f 7e       	andi	r24, 0xEF	; 239
    127e:	8c 93       	st	X, r24

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
    1280:	10 92 5e 01 	sts	0x015E, r1
}
    1284:	08 95       	ret

00001286 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
    1286:	e8 ed       	ldi	r30, 0xD8	; 216
    1288:	f0 e0       	ldi	r31, 0x00	; 0
    128a:	80 81       	ld	r24, Z
    128c:	8c 7f       	andi	r24, 0xFC	; 252
    128e:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
    1290:	10 92 a0 00 	sts	0x00A0, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
	#endif
}
    1294:	08 95       	ret

00001296 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    1296:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_BOTH)
	OTGINT = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
    129a:	10 92 9f 00 	sts	0x009F, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
	#endif
}
    129e:	08 95       	ret

000012a0 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
    12a0:	1f 92       	push	r1
    12a2:	0f 92       	push	r0
    12a4:	0f b6       	in	r0, 0x3f	; 63
    12a6:	0f 92       	push	r0
    12a8:	0b b6       	in	r0, 0x3b	; 59
    12aa:	0f 92       	push	r0
    12ac:	11 24       	eor	r1, r1
    12ae:	2f 93       	push	r18
    12b0:	3f 93       	push	r19
    12b2:	4f 93       	push	r20
    12b4:	5f 93       	push	r21
    12b6:	6f 93       	push	r22
    12b8:	7f 93       	push	r23
    12ba:	8f 93       	push	r24
    12bc:	9f 93       	push	r25
    12be:	af 93       	push	r26
    12c0:	bf 93       	push	r27
    12c2:	ef 93       	push	r30
    12c4:	ff 93       	push	r31
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
    12c6:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	#if defined(USB_CAN_BE_HOST)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
    12ca:	85 ff       	sbrs	r24, 5
    12cc:	0a c0       	rjmp	.+20     	; 0x12e2 <__vector_10+0x42>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
    12ce:	80 91 a0 00 	lds	r24, 0x00A0
    12d2:	85 ff       	sbrs	r24, 5
    12d4:	06 c0       	rjmp	.+12     	; 0x12e2 <__vector_10+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
    12d6:	80 91 9f 00 	lds	r24, 0x009F
    12da:	8f 7d       	andi	r24, 0xDF	; 223
    12dc:	80 93 9f 00 	sts	0x009F, r24
	{
		USB_INT_Clear(USB_INT_HSOFI);

		EVENT_USB_Host_StartOfFrame();
    12e0:	be d1       	rcall	.+892    	; 0x165e <USB_Event_Stub>
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
    12e2:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
    12e6:	81 ff       	sbrs	r24, 1
    12e8:	15 c0       	rjmp	.+42     	; 0x1314 <__vector_10+0x74>
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
					case USB_INT_DCONNI:
						return (UHIEN  & (1 << DCONNE));
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
    12ea:	80 91 a0 00 	lds	r24, 0x00A0
    12ee:	81 ff       	sbrs	r24, 1
    12f0:	11 c0       	rjmp	.+34     	; 0x1314 <__vector_10+0x74>
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
    12f2:	80 91 9f 00 	lds	r24, 0x009F
    12f6:	8d 7f       	andi	r24, 0xFD	; 253
    12f8:	80 93 9f 00 	sts	0x009F, r24
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
    12fc:	80 91 9f 00 	lds	r24, 0x009F
    1300:	8e 7f       	andi	r24, 0xFE	; 254
    1302:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
    1306:	80 91 a0 00 	lds	r24, 0x00A0
    130a:	8d 7f       	andi	r24, 0xFD	; 253
    130c:	80 93 a0 00 	sts	0x00A0, r24
	{
		USB_INT_Clear(USB_INT_DDISCI);
		USB_INT_Clear(USB_INT_DCONNI);
		USB_INT_Disable(USB_INT_DDISCI);

		EVENT_USB_Host_DeviceUnattached();
    1310:	9f d8       	rcall	.-3778   	; 0x450 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
    1312:	48 df       	rcall	.-368    	; 0x11a4 <USB_ResetInterface>
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
    1314:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
    1318:	81 ff       	sbrs	r24, 1
    131a:	15 c0       	rjmp	.+42     	; 0x1346 <__vector_10+0xa6>
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
    131c:	80 91 de 00 	lds	r24, 0x00DE
    1320:	81 ff       	sbrs	r24, 1
    1322:	11 c0       	rjmp	.+34     	; 0x1346 <__vector_10+0xa6>
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
    1324:	80 91 df 00 	lds	r24, 0x00DF
    1328:	8d 7f       	andi	r24, 0xFD	; 253
    132a:	80 93 df 00 	sts	0x00DF, r24
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
    132e:	77 98       	cbi	0x0e, 7	; 14
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
    1330:	80 91 dd 00 	lds	r24, 0x00DD
    1334:	81 60       	ori	r24, 0x01	; 1
    1336:	80 93 dd 00 	sts	0x00DD, r24
		USB_INT_Clear(USB_INT_VBERRI);

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
    133a:	80 e0       	ldi	r24, 0x00	; 0
    133c:	91 da       	rcall	.-2782   	; 0x860 <EVENT_USB_Host_HostError>
		EVENT_USB_Host_DeviceUnattached();
    133e:	88 d8       	rcall	.-3824   	; 0x450 <EVENT_USB_Host_DeviceUnattached>

		USB_HostState = HOST_STATE_Unattached;
    1340:	81 e0       	ldi	r24, 0x01	; 1
    1342:	80 93 67 01 	sts	0x0167, r24
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
					case USB_INT_SRPI:
						return (OTGINT & (1 << SRPI));
    1346:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
    134a:	80 ff       	sbrs	r24, 0
    134c:	17 c0       	rjmp	.+46     	; 0x137c <__vector_10+0xdc>
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
					case USB_INT_SRPI:
						return (OTGIEN & (1 << SRPE));
    134e:	80 91 de 00 	lds	r24, 0x00DE
    1352:	80 ff       	sbrs	r24, 0
    1354:	13 c0       	rjmp	.+38     	; 0x137c <__vector_10+0xdc>
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
						break;
					case USB_INT_SRPI:
						OTGINT &= ~(1 << SRPI);
    1356:	80 91 df 00 	lds	r24, 0x00DF
    135a:	8e 7f       	andi	r24, 0xFE	; 254
    135c:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_VBERRI:
						OTGIEN &= ~(1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN &= ~(1 << SRPE);						
    1360:	80 91 de 00 	lds	r24, 0x00DE
    1364:	8e 7f       	andi	r24, 0xFE	; 254
    1366:	80 93 de 00 	sts	0x00DE, r24
	{
		USB_INT_Clear(USB_INT_SRPI);
		USB_INT_Disable(USB_INT_SRPI);

		EVENT_USB_Host_DeviceAttached();
    136a:	7b d8       	rcall	.-3850   	; 0x462 <EVENT_USB_Host_DeviceAttached>
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
    136c:	80 91 a0 00 	lds	r24, 0x00A0
    1370:	82 60       	ori	r24, 0x02	; 2
    1372:	80 93 a0 00 	sts	0x00A0, r24

		USB_INT_Enable(USB_INT_DDISCI);

		USB_HostState = HOST_STATE_Powered;
    1376:	82 e0       	ldi	r24, 0x02	; 2
    1378:	80 93 67 01 	sts	0x0167, r24
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
    137c:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
    1380:	82 ff       	sbrs	r24, 2
    1382:	0e c0       	rjmp	.+28     	; 0x13a0 <__vector_10+0x100>
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
    1384:	80 91 de 00 	lds	r24, 0x00DE
    1388:	82 ff       	sbrs	r24, 2
    138a:	0a c0       	rjmp	.+20     	; 0x13a0 <__vector_10+0x100>
						break;
					case USB_INT_RSTI:
						UHINT  &= ~(1 << RSTI);
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
    138c:	80 91 df 00 	lds	r24, 0x00DF
    1390:	8b 7f       	andi	r24, 0xFB	; 251
    1392:	80 93 df 00 	sts	0x00DF, r24
	{
		USB_INT_Clear(USB_INT_BCERRI);

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
    1396:	82 e0       	ldi	r24, 0x02	; 2
    1398:	60 e0       	ldi	r22, 0x00	; 0
    139a:	2e d8       	rcall	.-4004   	; 0x3f8 <EVENT_USB_Host_DeviceEnumerationFailed>
		EVENT_USB_Host_DeviceUnattached();
    139c:	59 d8       	rcall	.-3918   	; 0x450 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
    139e:	02 df       	rcall	.-508    	; 0x11a4 <USB_ResetInterface>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    13a0:	ff 91       	pop	r31
    13a2:	ef 91       	pop	r30
    13a4:	bf 91       	pop	r27
    13a6:	af 91       	pop	r26
    13a8:	9f 91       	pop	r25
    13aa:	8f 91       	pop	r24
    13ac:	7f 91       	pop	r23
    13ae:	6f 91       	pop	r22
    13b0:	5f 91       	pop	r21
    13b2:	4f 91       	pop	r20
    13b4:	3f 91       	pop	r19
    13b6:	2f 91       	pop	r18
    13b8:	0f 90       	pop	r0
    13ba:	0b be       	out	0x3b, r0	; 59
    13bc:	0f 90       	pop	r0
    13be:	0f be       	out	0x3f, r0	; 63
    13c0:	0f 90       	pop	r0
    13c2:	1f 90       	pop	r1
    13c4:	18 95       	reti

000013c6 <Pipe_Read_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    13c6:	bf 92       	push	r11
    13c8:	cf 92       	push	r12
    13ca:	df 92       	push	r13
    13cc:	ef 92       	push	r14
    13ce:	ff 92       	push	r15
    13d0:	0f 93       	push	r16
    13d2:	1f 93       	push	r17
    13d4:	cf 93       	push	r28
    13d6:	df 93       	push	r29
    13d8:	18 2f       	mov	r17, r24
    13da:	09 2f       	mov	r16, r25
    13dc:	7b 01       	movw	r14, r22
    13de:	6a 01       	movw	r12, r20
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    13e0:	80 91 aa 00 	lds	r24, 0x00AA
    13e4:	8f 7c       	andi	r24, 0xCF	; 207
    13e6:	80 61       	ori	r24, 0x10	; 16
    13e8:	80 93 aa 00 	sts	0x00AA, r24
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
    13ec:	ac de       	rcall	.-680    	; 0x1146 <Pipe_WaitUntilReady>
    13ee:	b8 2e       	mov	r11, r24
    13f0:	88 23       	and	r24, r24
    13f2:	a9 f5       	brne	.+106    	; 0x145e <Pipe_Read_Stream_LE+0x98>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    13f4:	81 2f       	mov	r24, r17
    13f6:	90 2f       	mov	r25, r16
    13f8:	9c 01       	movw	r18, r24
    13fa:	e9 01       	movw	r28, r18
	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
    13fc:	c1 14       	cp	r12, r1
    13fe:	d1 04       	cpc	r13, r1
    1400:	39 f0       	breq	.+14     	; 0x1410 <Pipe_Read_Stream_LE+0x4a>
	{
		Length -= *BytesProcessed;
    1402:	f6 01       	movw	r30, r12
    1404:	80 81       	ld	r24, Z
    1406:	91 81       	ldd	r25, Z+1	; 0x01
    1408:	e8 1a       	sub	r14, r24
    140a:	f9 0a       	sbc	r15, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    140c:	c8 0f       	add	r28, r24
    140e:	d9 1f       	adc	r29, r25
    1410:	00 e0       	ldi	r16, 0x00	; 0
    1412:	10 e0       	ldi	r17, 0x00	; 0
    1414:	21 c0       	rjmp	.+66     	; 0x1458 <Pipe_Read_Stream_LE+0x92>
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
    1416:	80 91 a6 00 	lds	r24, 0x00A6
	}
	
	while (Length)
	{
		if (!(Pipe_IsReadWriteAllowed()))
    141a:	85 fd       	sbrc	r24, 5
    141c:	15 c0       	rjmp	.+42     	; 0x1448 <Pipe_Read_Stream_LE+0x82>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    141e:	80 91 a6 00 	lds	r24, 0x00A6
    1422:	8e 77       	andi	r24, 0x7E	; 126
    1424:	80 93 a6 00 	sts	0x00A6, r24
		{
			TEMPLATE_CLEAR_PIPE();

			if (BytesProcessed != NULL)
    1428:	c1 14       	cp	r12, r1
    142a:	d1 04       	cpc	r13, r1
    142c:	49 f0       	breq	.+18     	; 0x1440 <Pipe_Read_Stream_LE+0x7a>
			{
				*BytesProcessed += BytesInTransfer;
    142e:	f6 01       	movw	r30, r12
    1430:	80 81       	ld	r24, Z
    1432:	91 81       	ldd	r25, Z+1	; 0x01
    1434:	80 0f       	add	r24, r16
    1436:	91 1f       	adc	r25, r17
    1438:	91 83       	std	Z+1, r25	; 0x01
    143a:	80 83       	st	Z, r24
    143c:	84 e0       	ldi	r24, 0x04	; 4
    143e:	10 c0       	rjmp	.+32     	; 0x1460 <Pipe_Read_Stream_LE+0x9a>
				return PIPE_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
    1440:	82 de       	rcall	.-764    	; 0x1146 <Pipe_WaitUntilReady>
    1442:	88 23       	and	r24, r24
    1444:	49 f0       	breq	.+18     	; 0x1458 <Pipe_Read_Stream_LE+0x92>
    1446:	0c c0       	rjmp	.+24     	; 0x1460 <Pipe_Read_Stream_LE+0x9a>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    1448:	80 91 af 00 	lds	r24, 0x00AF
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    144c:	89 93       	st	Y+, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    144e:	08 94       	sec
    1450:	e1 08       	sbc	r14, r1
    1452:	f1 08       	sbc	r15, r1
			BytesInTransfer++;
    1454:	0f 5f       	subi	r16, 0xFF	; 255
    1456:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}
	
	while (Length)
    1458:	e1 14       	cp	r14, r1
    145a:	f1 04       	cpc	r15, r1
    145c:	e1 f6       	brne	.-72     	; 0x1416 <Pipe_Read_Stream_LE+0x50>
    145e:	8b 2d       	mov	r24, r11
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
    1460:	df 91       	pop	r29
    1462:	cf 91       	pop	r28
    1464:	1f 91       	pop	r17
    1466:	0f 91       	pop	r16
    1468:	ff 90       	pop	r15
    146a:	ef 90       	pop	r14
    146c:	df 90       	pop	r13
    146e:	cf 90       	pop	r12
    1470:	bf 90       	pop	r11
    1472:	08 95       	ret

00001474 <Pipe_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    1474:	bf 92       	push	r11
    1476:	cf 92       	push	r12
    1478:	df 92       	push	r13
    147a:	ef 92       	push	r14
    147c:	ff 92       	push	r15
    147e:	0f 93       	push	r16
    1480:	1f 93       	push	r17
    1482:	cf 93       	push	r28
    1484:	df 93       	push	r29
    1486:	18 2f       	mov	r17, r24
    1488:	09 2f       	mov	r16, r25
    148a:	7b 01       	movw	r14, r22
    148c:	6a 01       	movw	r12, r20
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    148e:	80 91 aa 00 	lds	r24, 0x00AA
    1492:	8f 7c       	andi	r24, 0xCF	; 207
    1494:	80 62       	ori	r24, 0x20	; 32
    1496:	80 93 aa 00 	sts	0x00AA, r24
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
    149a:	55 de       	rcall	.-854    	; 0x1146 <Pipe_WaitUntilReady>
    149c:	b8 2e       	mov	r11, r24
    149e:	88 23       	and	r24, r24
    14a0:	a9 f5       	brne	.+106    	; 0x150c <Pipe_Write_Stream_LE+0x98>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    14a2:	81 2f       	mov	r24, r17
    14a4:	90 2f       	mov	r25, r16
    14a6:	9c 01       	movw	r18, r24
    14a8:	e9 01       	movw	r28, r18
	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
    14aa:	c1 14       	cp	r12, r1
    14ac:	d1 04       	cpc	r13, r1
    14ae:	39 f0       	breq	.+14     	; 0x14be <Pipe_Write_Stream_LE+0x4a>
	{
		Length -= *BytesProcessed;
    14b0:	f6 01       	movw	r30, r12
    14b2:	80 81       	ld	r24, Z
    14b4:	91 81       	ldd	r25, Z+1	; 0x01
    14b6:	e8 1a       	sub	r14, r24
    14b8:	f9 0a       	sbc	r15, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    14ba:	c8 0f       	add	r28, r24
    14bc:	d9 1f       	adc	r29, r25
    14be:	00 e0       	ldi	r16, 0x00	; 0
    14c0:	10 e0       	ldi	r17, 0x00	; 0
    14c2:	21 c0       	rjmp	.+66     	; 0x1506 <Pipe_Write_Stream_LE+0x92>
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
    14c4:	80 91 a6 00 	lds	r24, 0x00A6
	}
	
	while (Length)
	{
		if (!(Pipe_IsReadWriteAllowed()))
    14c8:	85 fd       	sbrc	r24, 5
    14ca:	15 c0       	rjmp	.+42     	; 0x14f6 <Pipe_Write_Stream_LE+0x82>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    14cc:	80 91 a6 00 	lds	r24, 0x00A6
    14d0:	8b 77       	andi	r24, 0x7B	; 123
    14d2:	80 93 a6 00 	sts	0x00A6, r24
		{
			TEMPLATE_CLEAR_PIPE();

			if (BytesProcessed != NULL)
    14d6:	c1 14       	cp	r12, r1
    14d8:	d1 04       	cpc	r13, r1
    14da:	49 f0       	breq	.+18     	; 0x14ee <Pipe_Write_Stream_LE+0x7a>
			{
				*BytesProcessed += BytesInTransfer;
    14dc:	f6 01       	movw	r30, r12
    14de:	80 81       	ld	r24, Z
    14e0:	91 81       	ldd	r25, Z+1	; 0x01
    14e2:	80 0f       	add	r24, r16
    14e4:	91 1f       	adc	r25, r17
    14e6:	91 83       	std	Z+1, r25	; 0x01
    14e8:	80 83       	st	Z, r24
    14ea:	84 e0       	ldi	r24, 0x04	; 4
    14ec:	10 c0       	rjmp	.+32     	; 0x150e <Pipe_Write_Stream_LE+0x9a>
				return PIPE_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
    14ee:	2b de       	rcall	.-938    	; 0x1146 <Pipe_WaitUntilReady>
    14f0:	88 23       	and	r24, r24
    14f2:	49 f0       	breq	.+18     	; 0x1506 <Pipe_Write_Stream_LE+0x92>
    14f4:	0c c0       	rjmp	.+24     	; 0x150e <Pipe_Write_Stream_LE+0x9a>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    14f6:	89 91       	ld	r24, Y+
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    14f8:	80 93 af 00 	sts	0x00AF, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    14fc:	08 94       	sec
    14fe:	e1 08       	sbc	r14, r1
    1500:	f1 08       	sbc	r15, r1
			BytesInTransfer++;
    1502:	0f 5f       	subi	r16, 0xFF	; 255
    1504:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}
	
	while (Length)
    1506:	e1 14       	cp	r14, r1
    1508:	f1 04       	cpc	r15, r1
    150a:	e1 f6       	brne	.-72     	; 0x14c4 <Pipe_Write_Stream_LE+0x50>
    150c:	8b 2d       	mov	r24, r11
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
    150e:	df 91       	pop	r29
    1510:	cf 91       	pop	r28
    1512:	1f 91       	pop	r17
    1514:	0f 91       	pop	r16
    1516:	ff 90       	pop	r15
    1518:	ef 90       	pop	r14
    151a:	df 90       	pop	r13
    151c:	cf 90       	pop	r12
    151e:	bf 90       	pop	r11
    1520:	08 95       	ret

00001522 <USB_GetNextDescriptorComp>:

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
    1522:	af 92       	push	r10
    1524:	bf 92       	push	r11
    1526:	cf 92       	push	r12
    1528:	df 92       	push	r13
    152a:	ef 92       	push	r14
    152c:	ff 92       	push	r15
    152e:	0f 93       	push	r16
    1530:	1f 93       	push	r17
    1532:	cf 93       	push	r28
    1534:	df 93       	push	r29
    1536:	7c 01       	movw	r14, r24
    1538:	eb 01       	movw	r28, r22
    153a:	6a 01       	movw	r12, r20
    153c:	24 c0       	rjmp	.+72     	; 0x1586 <USB_GetNextDescriptorComp+0x64>
	uint8_t ErrorCode;

	while (*BytesRem)
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
    153e:	e8 81       	ld	r30, Y
    1540:	f9 81       	ldd	r31, Y+1	; 0x01
    1542:	be 2e       	mov	r11, r30
    1544:	af 2e       	mov	r10, r31
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc)
			{
				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;
    1546:	80 81       	ld	r24, Z
    1548:	90 e0       	ldi	r25, 0x00	; 0
    154a:	98 01       	movw	r18, r16
    154c:	80 17       	cp	r24, r16
    154e:	91 07       	cpc	r25, r17
    1550:	08 f4       	brcc	.+2      	; 0x1554 <USB_GetNextDescriptorComp+0x32>
    1552:	9c 01       	movw	r18, r24
				
				if (*BytesRem < CurrDescriptorSize)
				  CurrDescriptorSize = *BytesRem;

				*CurrConfigLoc  = (void*)((uintptr_t)*CurrConfigLoc + CurrDescriptorSize);
    1554:	e2 0f       	add	r30, r18
    1556:	f3 1f       	adc	r31, r19
    1558:	f9 83       	std	Y+1, r31	; 0x01
    155a:	e8 83       	st	Y, r30
				*BytesRem      -= CurrDescriptorSize;
    155c:	f7 01       	movw	r30, r14
    155e:	80 81       	ld	r24, Z
    1560:	91 81       	ldd	r25, Z+1	; 0x01
    1562:	82 1b       	sub	r24, r18
    1564:	93 0b       	sbc	r25, r19
    1566:	91 83       	std	Z+1, r25	; 0x01
    1568:	80 83       	st	Z, r24
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
    156a:	88 81       	ld	r24, Y
    156c:	99 81       	ldd	r25, Y+1	; 0x01
    156e:	f6 01       	movw	r30, r12
    1570:	09 95       	icall
    1572:	82 30       	cpi	r24, 0x02	; 2
    1574:	41 f0       	breq	.+16     	; 0x1586 <USB_GetNextDescriptorComp+0x64>
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
    1576:	81 30       	cpi	r24, 0x01	; 1
    1578:	69 f4       	brne	.+26     	; 0x1594 <USB_GetNextDescriptorComp+0x72>
			{
				*CurrConfigLoc = PrevDescLoc;
    157a:	b8 82       	st	Y, r11
    157c:	a9 82       	std	Y+1, r10	; 0x01
				*BytesRem      = PrevBytesRem;
    157e:	f7 01       	movw	r30, r14
    1580:	11 83       	std	Z+1, r17	; 0x01
    1582:	00 83       	st	Z, r16
    1584:	07 c0       	rjmp	.+14     	; 0x1594 <USB_GetNextDescriptorComp+0x72>
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
	uint8_t ErrorCode;

	while (*BytesRem)
    1586:	f7 01       	movw	r30, r14
    1588:	00 81       	ld	r16, Z
    158a:	11 81       	ldd	r17, Z+1	; 0x01
    158c:	01 15       	cp	r16, r1
    158e:	11 05       	cpc	r17, r1
    1590:	b1 f6       	brne	.-84     	; 0x153e <USB_GetNextDescriptorComp+0x1c>
    1592:	82 e0       	ldi	r24, 0x02	; 2
			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
}
    1594:	df 91       	pop	r29
    1596:	cf 91       	pop	r28
    1598:	1f 91       	pop	r17
    159a:	0f 91       	pop	r16
    159c:	ff 90       	pop	r15
    159e:	ef 90       	pop	r14
    15a0:	df 90       	pop	r13
    15a2:	cf 90       	pop	r12
    15a4:	bf 90       	pop	r11
    15a6:	af 90       	pop	r10
    15a8:	08 95       	ret

000015aa <USB_Host_GetDeviceConfigDescriptor>:
#if defined(USB_CAN_BE_HOST)
uint8_t USB_Host_GetDeviceConfigDescriptor(const uint8_t ConfigNumber,
                                           uint16_t* const ConfigSizePtr,
                                           void* const BufferPtr,
                                           const uint16_t BufferSize)
{
    15aa:	cf 92       	push	r12
    15ac:	df 92       	push	r13
    15ae:	ef 92       	push	r14
    15b0:	ff 92       	push	r15
    15b2:	0f 93       	push	r16
    15b4:	1f 93       	push	r17
    15b6:	df 93       	push	r29
    15b8:	cf 93       	push	r28
    15ba:	cd b7       	in	r28, 0x3d	; 61
    15bc:	de b7       	in	r29, 0x3e	; 62
    15be:	29 97       	sbiw	r28, 0x09	; 9
    15c0:	0f b6       	in	r0, 0x3f	; 63
    15c2:	f8 94       	cli
    15c4:	de bf       	out	0x3e, r29	; 62
    15c6:	0f be       	out	0x3f, r0	; 63
    15c8:	cd bf       	out	0x3d, r28	; 61
    15ca:	6b 01       	movw	r12, r22
    15cc:	8a 01       	movw	r16, r20
    15ce:	79 01       	movw	r14, r18
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
    15d0:	90 e8       	ldi	r25, 0x80	; 128
    15d2:	90 93 5f 01 	sts	0x015F, r25
    15d6:	96 e0       	ldi	r25, 0x06	; 6
    15d8:	90 93 60 01 	sts	0x0160, r25
    15dc:	90 e0       	ldi	r25, 0x00	; 0
    15de:	01 97       	sbiw	r24, 0x01	; 1
    15e0:	92 60       	ori	r25, 0x02	; 2
    15e2:	90 93 62 01 	sts	0x0162, r25
    15e6:	80 93 61 01 	sts	0x0161, r24
    15ea:	10 92 64 01 	sts	0x0164, r1
    15ee:	10 92 63 01 	sts	0x0163, r1
    15f2:	89 e0       	ldi	r24, 0x09	; 9
    15f4:	90 e0       	ldi	r25, 0x00	; 0
    15f6:	90 93 66 01 	sts	0x0166, r25
    15fa:	80 93 65 01 	sts	0x0165, r24
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    15fe:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = sizeof(USB_Descriptor_Configuration_Header_t),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(ConfigHeader)) != HOST_SENDCONTROL_Successful)
    1602:	ce 01       	movw	r24, r28
    1604:	01 96       	adiw	r24, 0x01	; 1
    1606:	55 d0       	rcall	.+170    	; 0x16b2 <USB_Host_SendControlRequest>
    1608:	28 2f       	mov	r18, r24
    160a:	88 23       	and	r24, r24
    160c:	c1 f4       	brne	.+48     	; 0x163e <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);
    160e:	8b 81       	ldd	r24, Y+3	; 0x03
    1610:	9c 81       	ldd	r25, Y+4	; 0x04
    1612:	f6 01       	movw	r30, r12
    1614:	91 83       	std	Z+1, r25	; 0x01
    1616:	80 83       	st	Z, r24

	if (*ConfigSizePtr > BufferSize)
    1618:	e8 16       	cp	r14, r24
    161a:	f9 06       	cpc	r15, r25
    161c:	10 f4       	brcc	.+4      	; 0x1622 <USB_Host_GetDeviceConfigDescriptor+0x78>
    161e:	25 e0       	ldi	r18, 0x05	; 5
    1620:	0e c0       	rjmp	.+28     	; 0x163e <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return HOST_GETCONFIG_BuffOverflow;

	USB_ControlRequest.wLength = *ConfigSizePtr;
    1622:	90 93 66 01 	sts	0x0166, r25
    1626:	80 93 65 01 	sts	0x0165, r24

	if ((ErrorCode = USB_Host_SendControlRequest(BufferPtr)) != HOST_SENDCONTROL_Successful)
    162a:	c8 01       	movw	r24, r16
    162c:	42 d0       	rcall	.+132    	; 0x16b2 <USB_Host_SendControlRequest>
    162e:	28 2f       	mov	r18, r24
    1630:	88 23       	and	r24, r24
    1632:	29 f4       	brne	.+10     	; 0x163e <USB_Host_GetDeviceConfigDescriptor+0x94>
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
    1634:	f8 01       	movw	r30, r16
    1636:	81 81       	ldd	r24, Z+1	; 0x01
    1638:	82 30       	cpi	r24, 0x02	; 2
    163a:	09 f0       	breq	.+2      	; 0x163e <USB_Host_GetDeviceConfigDescriptor+0x94>
    163c:	26 e0       	ldi	r18, 0x06	; 6
	  return HOST_GETCONFIG_InvalidData;

	return HOST_GETCONFIG_Successful;
}
    163e:	82 2f       	mov	r24, r18
    1640:	29 96       	adiw	r28, 0x09	; 9
    1642:	0f b6       	in	r0, 0x3f	; 63
    1644:	f8 94       	cli
    1646:	de bf       	out	0x3e, r29	; 62
    1648:	0f be       	out	0x3f, r0	; 63
    164a:	cd bf       	out	0x3d, r28	; 61
    164c:	cf 91       	pop	r28
    164e:	df 91       	pop	r29
    1650:	1f 91       	pop	r17
    1652:	0f 91       	pop	r16
    1654:	ff 90       	pop	r15
    1656:	ef 90       	pop	r14
    1658:	df 90       	pop	r13
    165a:	cf 90       	pop	r12
    165c:	08 95       	ret

0000165e <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
    165e:	08 95       	ret

00001660 <USB_Host_WaitForIOS>:

	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
    1660:	1f 93       	push	r17
    1662:	cf 93       	push	r28
    1664:	df 93       	push	r29
    1666:	18 2f       	mov	r17, r24
    1668:	c8 ee       	ldi	r28, 0xE8	; 232
    166a:	d3 e0       	ldi	r29, 0x03	; 3
    166c:	09 c0       	rjmp	.+18     	; 0x1680 <USB_Host_WaitForIOS+0x20>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    166e:	81 e0       	ldi	r24, 0x01	; 1
    1670:	30 db       	rcall	.-2464   	; 0xcd2 <USB_Host_WaitMS>
    1672:	88 23       	and	r24, r24
    1674:	d1 f4       	brne	.+52     	; 0x16aa <USB_Host_WaitForIOS+0x4a>
		  return ErrorCode;

		if (!(TimeoutCounter--))
    1676:	20 97       	sbiw	r28, 0x00	; 0
    1678:	11 f4       	brne	.+4      	; 0x167e <USB_Host_WaitForIOS+0x1e>
    167a:	84 e0       	ldi	r24, 0x04	; 4
    167c:	16 c0       	rjmp	.+44     	; 0x16aa <USB_Host_WaitForIOS+0x4a>
    167e:	21 97       	sbiw	r28, 0x01	; 1
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    1680:	11 23       	and	r17, r17
    1682:	29 f4       	brne	.+10     	; 0x168e <USB_Host_WaitForIOS+0x2e>
			 *  \return Boolean \c true if the current pipe is ready for a SETUP packet, \c false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
    1684:	80 91 a6 00 	lds	r24, 0x00A6
    1688:	83 ff       	sbrs	r24, 3
    168a:	f1 cf       	rjmp	.-30     	; 0x166e <USB_Host_WaitForIOS+0xe>
    168c:	0d c0       	rjmp	.+26     	; 0x16a8 <USB_Host_WaitForIOS+0x48>
    168e:	11 30       	cpi	r17, 0x01	; 1
    1690:	29 f4       	brne	.+10     	; 0x169c <USB_Host_WaitForIOS+0x3c>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    1692:	80 91 a6 00 	lds	r24, 0x00A6
    1696:	80 ff       	sbrs	r24, 0
    1698:	ea cf       	rjmp	.-44     	; 0x166e <USB_Host_WaitForIOS+0xe>
    169a:	06 c0       	rjmp	.+12     	; 0x16a8 <USB_Host_WaitForIOS+0x48>
    169c:	12 30       	cpi	r17, 0x02	; 2
    169e:	39 f7       	brne	.-50     	; 0x166e <USB_Host_WaitForIOS+0xe>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
    16a0:	80 91 a6 00 	lds	r24, 0x00A6
    16a4:	82 ff       	sbrs	r24, 2
    16a6:	e3 cf       	rjmp	.-58     	; 0x166e <USB_Host_WaitForIOS+0xe>
    16a8:	80 e0       	ldi	r24, 0x00	; 0
		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
}
    16aa:	df 91       	pop	r29
    16ac:	cf 91       	pop	r28
    16ae:	1f 91       	pop	r17
    16b0:	08 95       	ret

000016b2 <USB_Host_SendControlRequest>:
#include "HostStandardReq.h"

uint8_t USB_Host_ConfigurationNumber;

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
    16b2:	ff 92       	push	r15
    16b4:	0f 93       	push	r16
    16b6:	1f 93       	push	r17
    16b8:	cf 93       	push	r28
    16ba:	df 93       	push	r29
    16bc:	18 2f       	mov	r17, r24
    16be:	09 2f       	mov	r16, r25
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
    16c0:	f0 90 9e 00 	lds	r15, 0x009E
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
	bool     BusSuspended = USB_Host_IsBusSuspended();
	uint8_t  ReturnStatus = HOST_SENDCONTROL_Successful;
	uint16_t DataLen      = USB_ControlRequest.wLength;
    16c4:	c0 91 65 01 	lds	r28, 0x0165
    16c8:	d0 91 66 01 	lds	r29, 0x0166
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    16cc:	80 91 9e 00 	lds	r24, 0x009E
    16d0:	81 60       	ori	r24, 0x01	; 1
    16d2:	80 93 9e 00 	sts	0x009E, r24

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    16d6:	81 e0       	ldi	r24, 0x01	; 1
    16d8:	fc da       	rcall	.-2568   	; 0xcd2 <USB_Host_WaitMS>
    16da:	98 2f       	mov	r25, r24
    16dc:	88 23       	and	r24, r24
    16de:	09 f0       	breq	.+2      	; 0x16e2 <USB_Host_SendControlRequest+0x30>
    16e0:	d7 c0       	rjmp	.+430    	; 0x1890 <USB_Host_SendControlRequest+0x1de>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    16e2:	80 91 aa 00 	lds	r24, 0x00AA
    16e6:	8f 7c       	andi	r24, 0xCF	; 207
    16e8:	80 93 aa 00 	sts	0x00AA, r24

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
    16ec:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
    16f0:	80 91 a6 00 	lds	r24, 0x00A6
    16f4:	8f 7e       	andi	r24, 0xEF	; 239
    16f6:	80 93 a6 00 	sts	0x00A6, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    16fa:	80 91 a9 00 	lds	r24, 0x00A9
    16fe:	8f 7b       	andi	r24, 0xBF	; 191
    1700:	80 93 a9 00 	sts	0x00A9, r24
    1704:	ef e5       	ldi	r30, 0x5F	; 95
    1706:	f1 e0       	ldi	r31, 0x01	; 1
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
	  Pipe_Write_8(*(HeaderStream++));	
    1708:	81 91       	ld	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    170a:	80 93 af 00 	sts	0x00AF, r24
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
    170e:	81 e0       	ldi	r24, 0x01	; 1
    1710:	e7 36       	cpi	r30, 0x67	; 103
    1712:	f8 07       	cpc	r31, r24
    1714:	c9 f7       	brne	.-14     	; 0x1708 <USB_Host_SendControlRequest+0x56>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
    1716:	80 91 a6 00 	lds	r24, 0x00A6
    171a:	87 77       	andi	r24, 0x77	; 119
    171c:	80 93 a6 00 	sts	0x00A6, r24
	  Pipe_Write_8(*(HeaderStream++));	
	#endif
	
	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
    1720:	80 e0       	ldi	r24, 0x00	; 0
    1722:	9e df       	rcall	.-196    	; 0x1660 <USB_Host_WaitForIOS>
    1724:	98 2f       	mov	r25, r24
    1726:	88 23       	and	r24, r24
    1728:	09 f0       	breq	.+2      	; 0x172c <USB_Host_SendControlRequest+0x7a>
    172a:	b2 c0       	rjmp	.+356    	; 0x1890 <USB_Host_SendControlRequest+0x1de>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    172c:	80 91 a9 00 	lds	r24, 0x00A9
    1730:	80 64       	ori	r24, 0x40	; 64
    1732:	80 93 a9 00 	sts	0x00A9, r24
	  goto End_Of_Control_Send;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1736:	81 e0       	ldi	r24, 0x01	; 1
    1738:	cc da       	rcall	.-2664   	; 0xcd2 <USB_Host_WaitMS>
    173a:	98 2f       	mov	r25, r24
    173c:	88 23       	and	r24, r24
    173e:	09 f0       	breq	.+2      	; 0x1742 <USB_Host_SendControlRequest+0x90>
    1740:	a7 c0       	rjmp	.+334    	; 0x1890 <USB_Host_SendControlRequest+0x1de>

uint8_t USB_Host_ConfigurationNumber;

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
    1742:	21 2f       	mov	r18, r17
    1744:	30 2f       	mov	r19, r16
    1746:	c9 01       	movw	r24, r18
    1748:	8c 01       	movw	r16, r24
	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
	  goto End_Of_Control_Send;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
    174a:	80 91 5f 01 	lds	r24, 0x015F
    174e:	87 ff       	sbrs	r24, 7
    1750:	52 c0       	rjmp	.+164    	; 0x17f6 <USB_Host_SendControlRequest+0x144>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1752:	80 91 aa 00 	lds	r24, 0x00AA
    1756:	8f 7c       	andi	r24, 0xCF	; 207
    1758:	80 61       	ori	r24, 0x10	; 16
    175a:	80 93 aa 00 	sts	0x00AA, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
    175e:	01 15       	cp	r16, r1
    1760:	11 05       	cpc	r17, r1
    1762:	69 f5       	brne	.+90     	; 0x17be <USB_Host_SendControlRequest+0x10c>
    1764:	2e c0       	rjmp	.+92     	; 0x17c2 <USB_Host_SendControlRequest+0x110>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1766:	80 91 a9 00 	lds	r24, 0x00A9
    176a:	8f 7b       	andi	r24, 0xBF	; 191
    176c:	80 93 a9 00 	sts	0x00A9, r24
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    1770:	81 e0       	ldi	r24, 0x01	; 1
    1772:	76 df       	rcall	.-276    	; 0x1660 <USB_Host_WaitForIOS>
    1774:	98 2f       	mov	r25, r24
    1776:	88 23       	and	r24, r24
    1778:	09 f0       	breq	.+2      	; 0x177c <USB_Host_SendControlRequest+0xca>
    177a:	8a c0       	rjmp	.+276    	; 0x1890 <USB_Host_SendControlRequest+0x1de>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    177c:	80 91 f6 00 	lds	r24, 0x00F6
    1780:	90 91 f7 00 	lds	r25, 0x00F7
				  goto End_Of_Control_Send;

				if (!(Pipe_BytesInPipe()))
    1784:	89 2b       	or	r24, r25
    1786:	49 f4       	brne	.+18     	; 0x179a <USB_Host_SendControlRequest+0xe8>
    1788:	c0 e0       	ldi	r28, 0x00	; 0
    178a:	d0 e0       	ldi	r29, 0x00	; 0
    178c:	06 c0       	rjmp	.+12     	; 0x179a <USB_Host_SendControlRequest+0xe8>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    178e:	80 91 af 00 	lds	r24, 0x00AF
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
				{
					*(DataStream++) = Pipe_Read_8();
    1792:	f8 01       	movw	r30, r16
    1794:	81 93       	st	Z+, r24
    1796:	8f 01       	movw	r16, r30
					DataLen--;
    1798:	21 97       	sbiw	r28, 0x01	; 1
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    179a:	80 91 f6 00 	lds	r24, 0x00F6
    179e:	90 91 f7 00 	lds	r25, 0x00F7
				  goto End_Of_Control_Send;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
    17a2:	89 2b       	or	r24, r25
    17a4:	11 f0       	breq	.+4      	; 0x17aa <USB_Host_SendControlRequest+0xf8>
    17a6:	20 97       	sbiw	r28, 0x00	; 0
    17a8:	91 f7       	brne	.-28     	; 0x178e <USB_Host_SendControlRequest+0xdc>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    17aa:	80 91 a9 00 	lds	r24, 0x00A9
    17ae:	80 64       	ori	r24, 0x40	; 64
    17b0:	80 93 a9 00 	sts	0x00A9, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    17b4:	80 91 a6 00 	lds	r24, 0x00A6
    17b8:	8e 77       	andi	r24, 0x7E	; 126
    17ba:	80 93 a6 00 	sts	0x00A6, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
    17be:	20 97       	sbiw	r28, 0x00	; 0
    17c0:	91 f6       	brne	.-92     	; 0x1766 <USB_Host_SendControlRequest+0xb4>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    17c2:	80 91 aa 00 	lds	r24, 0x00AA
    17c6:	8f 7c       	andi	r24, 0xCF	; 207
    17c8:	80 62       	ori	r24, 0x20	; 32
    17ca:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    17ce:	80 91 a9 00 	lds	r24, 0x00A9
    17d2:	8f 7b       	andi	r24, 0xBF	; 191
    17d4:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    17d8:	82 e0       	ldi	r24, 0x02	; 2
    17da:	42 df       	rcall	.-380    	; 0x1660 <USB_Host_WaitForIOS>
    17dc:	98 2f       	mov	r25, r24
    17de:	88 23       	and	r24, r24
    17e0:	09 f0       	breq	.+2      	; 0x17e4 <USB_Host_SendControlRequest+0x132>
    17e2:	56 c0       	rjmp	.+172    	; 0x1890 <USB_Host_SendControlRequest+0x1de>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    17e4:	80 91 a6 00 	lds	r24, 0x00A6
    17e8:	8b 77       	andi	r24, 0x7B	; 123
    17ea:	80 93 a6 00 	sts	0x00A6, r24
		  goto End_Of_Control_Send;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    17ee:	82 e0       	ldi	r24, 0x02	; 2
    17f0:	37 df       	rcall	.-402    	; 0x1660 <USB_Host_WaitForIOS>
    17f2:	98 2f       	mov	r25, r24
    17f4:	4d c0       	rjmp	.+154    	; 0x1890 <USB_Host_SendControlRequest+0x1de>
		  goto End_Of_Control_Send;
	}
	else
	{
		if (DataStream != NULL)
    17f6:	01 15       	cp	r16, r1
    17f8:	11 05       	cpc	r17, r1
    17fa:	a9 f1       	breq	.+106    	; 0x1866 <USB_Host_SendControlRequest+0x1b4>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    17fc:	80 91 aa 00 	lds	r24, 0x00AA
    1800:	8f 7c       	andi	r24, 0xCF	; 207
    1802:	80 62       	ori	r24, 0x20	; 32
    1804:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1808:	80 91 a9 00 	lds	r24, 0x00A9
    180c:	8f 7b       	andi	r24, 0xBF	; 191
    180e:	80 93 a9 00 	sts	0x00A9, r24
    1812:	1d c0       	rjmp	.+58     	; 0x184e <USB_Host_SendControlRequest+0x19c>
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1814:	82 e0       	ldi	r24, 0x02	; 2
    1816:	24 df       	rcall	.-440    	; 0x1660 <USB_Host_WaitForIOS>
    1818:	98 2f       	mov	r25, r24
    181a:	88 23       	and	r24, r24
    181c:	c9 f5       	brne	.+114    	; 0x1890 <USB_Host_SendControlRequest+0x1de>
				  goto End_Of_Control_Send;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    181e:	80 91 10 01 	lds	r24, 0x0110
    1822:	28 2f       	mov	r18, r24
    1824:	30 e0       	ldi	r19, 0x00	; 0
    1826:	07 c0       	rjmp	.+14     	; 0x1836 <USB_Host_SendControlRequest+0x184>
				{
					Pipe_Write_8(*(DataStream++));
    1828:	f8 01       	movw	r30, r16
    182a:	81 91       	ld	r24, Z+
    182c:	8f 01       	movw	r16, r30
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    182e:	80 93 af 00 	sts	0x00AF, r24
					DataLen--;
    1832:	21 97       	sbiw	r28, 0x01	; 1
			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
				  goto End_Of_Control_Send;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    1834:	39 f0       	breq	.+14     	; 0x1844 <USB_Host_SendControlRequest+0x192>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1836:	80 91 f6 00 	lds	r24, 0x00F6
    183a:	90 91 f7 00 	lds	r25, 0x00F7
    183e:	82 17       	cp	r24, r18
    1840:	93 07       	cpc	r25, r19
    1842:	90 f3       	brcs	.-28     	; 0x1828 <USB_Host_SendControlRequest+0x176>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1844:	80 91 a6 00 	lds	r24, 0x00A6
    1848:	8b 77       	andi	r24, 0x7B	; 123
    184a:	80 93 a6 00 	sts	0x00A6, r24
		if (DataStream != NULL)
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
    184e:	20 97       	sbiw	r28, 0x00	; 0
    1850:	09 f7       	brne	.-62     	; 0x1814 <USB_Host_SendControlRequest+0x162>
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1852:	82 e0       	ldi	r24, 0x02	; 2
    1854:	05 df       	rcall	.-502    	; 0x1660 <USB_Host_WaitForIOS>
    1856:	98 2f       	mov	r25, r24
    1858:	88 23       	and	r24, r24
    185a:	d1 f4       	brne	.+52     	; 0x1890 <USB_Host_SendControlRequest+0x1de>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    185c:	80 91 a9 00 	lds	r24, 0x00A9
    1860:	80 64       	ori	r24, 0x40	; 64
    1862:	80 93 a9 00 	sts	0x00A9, r24
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1866:	80 91 aa 00 	lds	r24, 0x00AA
    186a:	8f 7c       	andi	r24, 0xCF	; 207
    186c:	80 61       	ori	r24, 0x10	; 16
    186e:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1872:	80 91 a9 00 	lds	r24, 0x00A9
    1876:	8f 7b       	andi	r24, 0xBF	; 191
    1878:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    187c:	81 e0       	ldi	r24, 0x01	; 1
    187e:	f0 de       	rcall	.-544    	; 0x1660 <USB_Host_WaitForIOS>
    1880:	98 2f       	mov	r25, r24
    1882:	88 23       	and	r24, r24
    1884:	29 f4       	brne	.+10     	; 0x1890 <USB_Host_SendControlRequest+0x1de>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1886:	80 91 a6 00 	lds	r24, 0x00A6
    188a:	8e 77       	andi	r24, 0x7E	; 126
    188c:	80 93 a6 00 	sts	0x00A6, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1890:	80 91 a9 00 	lds	r24, 0x00A9
    1894:	80 64       	ori	r24, 0x40	; 64
    1896:	80 93 a9 00 	sts	0x00A9, r24
	}

End_Of_Control_Send:
	Pipe_Freeze();

	if (BusSuspended)
    189a:	f0 fc       	sbrc	r15, 0
    189c:	05 c0       	rjmp	.+10     	; 0x18a8 <USB_Host_SendControlRequest+0x1f6>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    189e:	80 91 9e 00 	lds	r24, 0x009E
    18a2:	8e 7f       	andi	r24, 0xFE	; 254
    18a4:	80 93 9e 00 	sts	0x009E, r24
			 *  \param[in] PipeNumber  Index of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t PipeNumber)
			{
				UPRST = (1 << PipeNumber);
    18a8:	81 e0       	ldi	r24, 0x01	; 1
    18aa:	80 93 a8 00 	sts	0x00A8, r24
				UPRST = 0;
    18ae:	10 92 a8 00 	sts	0x00A8, r1
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
    18b2:	89 2f       	mov	r24, r25
    18b4:	df 91       	pop	r29
    18b6:	cf 91       	pop	r28
    18b8:	1f 91       	pop	r17
    18ba:	0f 91       	pop	r16
    18bc:	ff 90       	pop	r15
    18be:	08 95       	ret

000018c0 <USB_Host_ClearEndpointStall>:
	return USB_Host_SendControlRequest(FeatureStatus);
}

uint8_t USB_Host_ClearEndpointStall(const uint8_t EndpointAddress)
{
	USB_ControlRequest = (USB_Request_Header_t)
    18c0:	92 e0       	ldi	r25, 0x02	; 2
    18c2:	90 93 5f 01 	sts	0x015F, r25
    18c6:	91 e0       	ldi	r25, 0x01	; 1
    18c8:	90 93 60 01 	sts	0x0160, r25
    18cc:	10 92 62 01 	sts	0x0162, r1
    18d0:	10 92 61 01 	sts	0x0161, r1
    18d4:	80 93 63 01 	sts	0x0163, r24
    18d8:	10 92 64 01 	sts	0x0164, r1
    18dc:	10 92 66 01 	sts	0x0166, r1
    18e0:	10 92 65 01 	sts	0x0165, r1
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    18e4:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	return USB_Host_SendControlRequest(NULL);
    18e8:	80 e0       	ldi	r24, 0x00	; 0
    18ea:	90 e0       	ldi	r25, 0x00	; 0
}
    18ec:	e2 ce       	rjmp	.-572    	; 0x16b2 <USB_Host_SendControlRequest>

000018ee <USB_Host_SetDeviceConfiguration>:

	return HOST_SENDCONTROL_Successful;
}

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
    18ee:	1f 93       	push	r17
    18f0:	18 2f       	mov	r17, r24
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
    18f2:	10 92 5f 01 	sts	0x015F, r1
    18f6:	89 e0       	ldi	r24, 0x09	; 9
    18f8:	80 93 60 01 	sts	0x0160, r24
    18fc:	10 93 61 01 	sts	0x0161, r17
    1900:	10 92 62 01 	sts	0x0162, r1
    1904:	10 92 64 01 	sts	0x0164, r1
    1908:	10 92 63 01 	sts	0x0163, r1
    190c:	10 92 66 01 	sts	0x0166, r1
    1910:	10 92 65 01 	sts	0x0165, r1
    1914:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);
	
	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) == HOST_SENDCONTROL_Successful)
    1918:	80 e0       	ldi	r24, 0x00	; 0
    191a:	90 e0       	ldi	r25, 0x00	; 0
    191c:	ca de       	rcall	.-620    	; 0x16b2 <USB_Host_SendControlRequest>
    191e:	88 23       	and	r24, r24
    1920:	49 f4       	brne	.+18     	; 0x1934 <USB_Host_SetDeviceConfiguration+0x46>
	{
		USB_Host_ConfigurationNumber = ConfigNumber;
    1922:	10 93 5d 01 	sts	0x015D, r17
		USB_HostState                = (ConfigNumber) ? HOST_STATE_Configured : HOST_STATE_Addressed;
    1926:	11 23       	and	r17, r17
    1928:	11 f4       	brne	.+4      	; 0x192e <USB_Host_SetDeviceConfiguration+0x40>
    192a:	9a e0       	ldi	r25, 0x0A	; 10
    192c:	01 c0       	rjmp	.+2      	; 0x1930 <USB_Host_SetDeviceConfiguration+0x42>
    192e:	9b e0       	ldi	r25, 0x0B	; 11
    1930:	90 93 67 01 	sts	0x0167, r25
	}

	return ErrorCode;
}
    1934:	1f 91       	pop	r17
    1936:	08 95       	ret

00001938 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    1938:	ff 92       	push	r15
    193a:	0f 93       	push	r16
    193c:	1f 93       	push	r17
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
    193e:	07 ea       	ldi	r16, 0xA7	; 167
    1940:	10 e0       	ldi	r17, 0x00	; 0
    1942:	f8 01       	movw	r30, r16
    1944:	f0 80       	ld	r15, Z
    1946:	f7 e0       	ldi	r31, 0x07	; 7
    1948:	ff 22       	and	r15, r31
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    194a:	f8 01       	movw	r30, r16
    194c:	10 82       	st	Z, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    194e:	5e da       	rcall	.-2884   	; 0xe0c <USB_Host_ProcessNextHostState>
    1950:	f8 01       	movw	r30, r16
    1952:	f0 82       	st	Z, r15
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
    1954:	1f 91       	pop	r17
    1956:	0f 91       	pop	r16
    1958:	ff 90       	pop	r15
    195a:	08 95       	ret

0000195c <Serial_putchar>:

FILE USARTSerialStream;

int Serial_putchar(char DataByte,
                   FILE *Stream)
{
    195c:	98 2f       	mov	r25, r24
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
    195e:	80 91 c8 00 	lds	r24, 0x00C8
    1962:	85 ff       	sbrs	r24, 5
    1964:	fc cf       	rjmp	.-8      	; 0x195e <Serial_putchar+0x2>
				UDR1 = DataByte;
    1966:	90 93 ce 00 	sts	0x00CE, r25
	(void)Stream;

	Serial_SendByte(DataByte);
	return 0;
}
    196a:	80 e0       	ldi	r24, 0x00	; 0
    196c:	90 e0       	ldi	r25, 0x00	; 0
    196e:	08 95       	ret

00001970 <Serial_getchar>:
			 *  \return Boolean \c true if a character has been received, \c false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    1970:	80 91 c8 00 	lds	r24, 0x00C8

int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    1974:	87 fd       	sbrc	r24, 7
    1976:	03 c0       	rjmp	.+6      	; 0x197e <Serial_getchar+0xe>
    1978:	2e ef       	ldi	r18, 0xFE	; 254
    197a:	3f ef       	ldi	r19, 0xFF	; 255
    197c:	0b c0       	rjmp	.+22     	; 0x1994 <Serial_getchar+0x24>
    197e:	80 91 c8 00 	lds	r24, 0x00C8
			 *  \return Next byte received from the USART, or a negative value if no byte has been received.
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
    1982:	87 fd       	sbrc	r24, 7
    1984:	03 c0       	rjmp	.+6      	; 0x198c <Serial_getchar+0x1c>
    1986:	2f ef       	ldi	r18, 0xFF	; 255
    1988:	3f ef       	ldi	r19, 0xFF	; 255
    198a:	04 c0       	rjmp	.+8      	; 0x1994 <Serial_getchar+0x24>
				  return -1;
				
				return UDR1;
    198c:	80 91 ce 00 	lds	r24, 0x00CE
    1990:	28 2f       	mov	r18, r24
    1992:	30 e0       	ldi	r19, 0x00	; 0
	  return _FDEV_EOF;

	return Serial_ReceiveByte();
}
    1994:	c9 01       	movw	r24, r18
    1996:	08 95       	ret

00001998 <printf_P>:
    1998:	df 93       	push	r29
    199a:	cf 93       	push	r28
    199c:	cd b7       	in	r28, 0x3d	; 61
    199e:	de b7       	in	r29, 0x3e	; 62
    19a0:	fe 01       	movw	r30, r28
    19a2:	35 96       	adiw	r30, 0x05	; 5
    19a4:	61 91       	ld	r22, Z+
    19a6:	71 91       	ld	r23, Z+
    19a8:	a0 91 78 01 	lds	r26, 0x0178
    19ac:	b0 91 79 01 	lds	r27, 0x0179
    19b0:	13 96       	adiw	r26, 0x03	; 3
    19b2:	8c 91       	ld	r24, X
    19b4:	13 97       	sbiw	r26, 0x03	; 3
    19b6:	88 60       	ori	r24, 0x08	; 8
    19b8:	13 96       	adiw	r26, 0x03	; 3
    19ba:	8c 93       	st	X, r24
    19bc:	80 91 78 01 	lds	r24, 0x0178
    19c0:	90 91 79 01 	lds	r25, 0x0179
    19c4:	af 01       	movw	r20, r30
    19c6:	3f d0       	rcall	.+126    	; 0x1a46 <vfprintf>
    19c8:	e0 91 78 01 	lds	r30, 0x0178
    19cc:	f0 91 79 01 	lds	r31, 0x0179
    19d0:	23 81       	ldd	r18, Z+3	; 0x03
    19d2:	27 7f       	andi	r18, 0xF7	; 247
    19d4:	23 83       	std	Z+3, r18	; 0x03
    19d6:	cf 91       	pop	r28
    19d8:	df 91       	pop	r29
    19da:	08 95       	ret

000019dc <puts_P>:
    19dc:	0f 93       	push	r16
    19de:	1f 93       	push	r17
    19e0:	cf 93       	push	r28
    19e2:	df 93       	push	r29
    19e4:	ec 01       	movw	r28, r24
    19e6:	e0 91 78 01 	lds	r30, 0x0178
    19ea:	f0 91 79 01 	lds	r31, 0x0179
    19ee:	83 81       	ldd	r24, Z+3	; 0x03
    19f0:	81 ff       	sbrs	r24, 1
    19f2:	21 c0       	rjmp	.+66     	; 0x1a36 <puts_P+0x5a>
    19f4:	00 e0       	ldi	r16, 0x00	; 0
    19f6:	10 e0       	ldi	r17, 0x00	; 0
    19f8:	0e c0       	rjmp	.+28     	; 0x1a16 <puts_P+0x3a>
    19fa:	e0 91 78 01 	lds	r30, 0x0178
    19fe:	f0 91 79 01 	lds	r31, 0x0179
    1a02:	20 85       	ldd	r18, Z+8	; 0x08
    1a04:	31 85       	ldd	r19, Z+9	; 0x09
    1a06:	bf 01       	movw	r22, r30
    1a08:	f9 01       	movw	r30, r18
    1a0a:	09 95       	icall
    1a0c:	89 2b       	or	r24, r25
    1a0e:	11 f0       	breq	.+4      	; 0x1a14 <puts_P+0x38>
    1a10:	0f ef       	ldi	r16, 0xFF	; 255
    1a12:	1f ef       	ldi	r17, 0xFF	; 255
    1a14:	21 96       	adiw	r28, 0x01	; 1
    1a16:	fe 01       	movw	r30, r28
    1a18:	84 91       	lpm	r24, Z+
    1a1a:	88 23       	and	r24, r24
    1a1c:	71 f7       	brne	.-36     	; 0x19fa <puts_P+0x1e>
    1a1e:	e0 91 78 01 	lds	r30, 0x0178
    1a22:	f0 91 79 01 	lds	r31, 0x0179
    1a26:	20 85       	ldd	r18, Z+8	; 0x08
    1a28:	31 85       	ldd	r19, Z+9	; 0x09
    1a2a:	8a e0       	ldi	r24, 0x0A	; 10
    1a2c:	bf 01       	movw	r22, r30
    1a2e:	f9 01       	movw	r30, r18
    1a30:	09 95       	icall
    1a32:	89 2b       	or	r24, r25
    1a34:	11 f0       	breq	.+4      	; 0x1a3a <puts_P+0x5e>
    1a36:	0f ef       	ldi	r16, 0xFF	; 255
    1a38:	1f ef       	ldi	r17, 0xFF	; 255
    1a3a:	c8 01       	movw	r24, r16
    1a3c:	df 91       	pop	r29
    1a3e:	cf 91       	pop	r28
    1a40:	1f 91       	pop	r17
    1a42:	0f 91       	pop	r16
    1a44:	08 95       	ret

00001a46 <vfprintf>:
    1a46:	2f 92       	push	r2
    1a48:	3f 92       	push	r3
    1a4a:	4f 92       	push	r4
    1a4c:	5f 92       	push	r5
    1a4e:	6f 92       	push	r6
    1a50:	7f 92       	push	r7
    1a52:	8f 92       	push	r8
    1a54:	9f 92       	push	r9
    1a56:	af 92       	push	r10
    1a58:	bf 92       	push	r11
    1a5a:	cf 92       	push	r12
    1a5c:	df 92       	push	r13
    1a5e:	ef 92       	push	r14
    1a60:	ff 92       	push	r15
    1a62:	0f 93       	push	r16
    1a64:	1f 93       	push	r17
    1a66:	df 93       	push	r29
    1a68:	cf 93       	push	r28
    1a6a:	cd b7       	in	r28, 0x3d	; 61
    1a6c:	de b7       	in	r29, 0x3e	; 62
    1a6e:	2b 97       	sbiw	r28, 0x0b	; 11
    1a70:	0f b6       	in	r0, 0x3f	; 63
    1a72:	f8 94       	cli
    1a74:	de bf       	out	0x3e, r29	; 62
    1a76:	0f be       	out	0x3f, r0	; 63
    1a78:	cd bf       	out	0x3d, r28	; 61
    1a7a:	3c 01       	movw	r6, r24
    1a7c:	2b 01       	movw	r4, r22
    1a7e:	5a 01       	movw	r10, r20
    1a80:	fc 01       	movw	r30, r24
    1a82:	17 82       	std	Z+7, r1	; 0x07
    1a84:	16 82       	std	Z+6, r1	; 0x06
    1a86:	83 81       	ldd	r24, Z+3	; 0x03
    1a88:	81 fd       	sbrc	r24, 1
    1a8a:	03 c0       	rjmp	.+6      	; 0x1a92 <vfprintf+0x4c>
    1a8c:	6f ef       	ldi	r22, 0xFF	; 255
    1a8e:	7f ef       	ldi	r23, 0xFF	; 255
    1a90:	b9 c1       	rjmp	.+882    	; 0x1e04 <vfprintf+0x3be>
    1a92:	9a e0       	ldi	r25, 0x0A	; 10
    1a94:	89 2e       	mov	r8, r25
    1a96:	1e 01       	movw	r2, r28
    1a98:	08 94       	sec
    1a9a:	21 1c       	adc	r2, r1
    1a9c:	31 1c       	adc	r3, r1
    1a9e:	f3 01       	movw	r30, r6
    1aa0:	23 81       	ldd	r18, Z+3	; 0x03
    1aa2:	f2 01       	movw	r30, r4
    1aa4:	23 fd       	sbrc	r18, 3
    1aa6:	85 91       	lpm	r24, Z+
    1aa8:	23 ff       	sbrs	r18, 3
    1aaa:	81 91       	ld	r24, Z+
    1aac:	2f 01       	movw	r4, r30
    1aae:	88 23       	and	r24, r24
    1ab0:	09 f4       	brne	.+2      	; 0x1ab4 <vfprintf+0x6e>
    1ab2:	a5 c1       	rjmp	.+842    	; 0x1dfe <vfprintf+0x3b8>
    1ab4:	85 32       	cpi	r24, 0x25	; 37
    1ab6:	39 f4       	brne	.+14     	; 0x1ac6 <vfprintf+0x80>
    1ab8:	23 fd       	sbrc	r18, 3
    1aba:	85 91       	lpm	r24, Z+
    1abc:	23 ff       	sbrs	r18, 3
    1abe:	81 91       	ld	r24, Z+
    1ac0:	2f 01       	movw	r4, r30
    1ac2:	85 32       	cpi	r24, 0x25	; 37
    1ac4:	21 f4       	brne	.+8      	; 0x1ace <vfprintf+0x88>
    1ac6:	90 e0       	ldi	r25, 0x00	; 0
    1ac8:	b3 01       	movw	r22, r6
    1aca:	cc d1       	rcall	.+920    	; 0x1e64 <fputc>
    1acc:	e8 cf       	rjmp	.-48     	; 0x1a9e <vfprintf+0x58>
    1ace:	98 2f       	mov	r25, r24
    1ad0:	ff 24       	eor	r15, r15
    1ad2:	ee 24       	eor	r14, r14
    1ad4:	99 24       	eor	r9, r9
    1ad6:	ff e1       	ldi	r31, 0x1F	; 31
    1ad8:	ff 15       	cp	r31, r15
    1ada:	d0 f0       	brcs	.+52     	; 0x1b10 <vfprintf+0xca>
    1adc:	9b 32       	cpi	r25, 0x2B	; 43
    1ade:	69 f0       	breq	.+26     	; 0x1afa <vfprintf+0xb4>
    1ae0:	9c 32       	cpi	r25, 0x2C	; 44
    1ae2:	28 f4       	brcc	.+10     	; 0x1aee <vfprintf+0xa8>
    1ae4:	90 32       	cpi	r25, 0x20	; 32
    1ae6:	59 f0       	breq	.+22     	; 0x1afe <vfprintf+0xb8>
    1ae8:	93 32       	cpi	r25, 0x23	; 35
    1aea:	91 f4       	brne	.+36     	; 0x1b10 <vfprintf+0xca>
    1aec:	0e c0       	rjmp	.+28     	; 0x1b0a <vfprintf+0xc4>
    1aee:	9d 32       	cpi	r25, 0x2D	; 45
    1af0:	49 f0       	breq	.+18     	; 0x1b04 <vfprintf+0xbe>
    1af2:	90 33       	cpi	r25, 0x30	; 48
    1af4:	69 f4       	brne	.+26     	; 0x1b10 <vfprintf+0xca>
    1af6:	41 e0       	ldi	r20, 0x01	; 1
    1af8:	24 c0       	rjmp	.+72     	; 0x1b42 <vfprintf+0xfc>
    1afa:	52 e0       	ldi	r21, 0x02	; 2
    1afc:	f5 2a       	or	r15, r21
    1afe:	84 e0       	ldi	r24, 0x04	; 4
    1b00:	f8 2a       	or	r15, r24
    1b02:	28 c0       	rjmp	.+80     	; 0x1b54 <vfprintf+0x10e>
    1b04:	98 e0       	ldi	r25, 0x08	; 8
    1b06:	f9 2a       	or	r15, r25
    1b08:	25 c0       	rjmp	.+74     	; 0x1b54 <vfprintf+0x10e>
    1b0a:	e0 e1       	ldi	r30, 0x10	; 16
    1b0c:	fe 2a       	or	r15, r30
    1b0e:	22 c0       	rjmp	.+68     	; 0x1b54 <vfprintf+0x10e>
    1b10:	f7 fc       	sbrc	r15, 7
    1b12:	29 c0       	rjmp	.+82     	; 0x1b66 <vfprintf+0x120>
    1b14:	89 2f       	mov	r24, r25
    1b16:	80 53       	subi	r24, 0x30	; 48
    1b18:	8a 30       	cpi	r24, 0x0A	; 10
    1b1a:	70 f4       	brcc	.+28     	; 0x1b38 <vfprintf+0xf2>
    1b1c:	f6 fe       	sbrs	r15, 6
    1b1e:	05 c0       	rjmp	.+10     	; 0x1b2a <vfprintf+0xe4>
    1b20:	98 9c       	mul	r9, r8
    1b22:	90 2c       	mov	r9, r0
    1b24:	11 24       	eor	r1, r1
    1b26:	98 0e       	add	r9, r24
    1b28:	15 c0       	rjmp	.+42     	; 0x1b54 <vfprintf+0x10e>
    1b2a:	e8 9c       	mul	r14, r8
    1b2c:	e0 2c       	mov	r14, r0
    1b2e:	11 24       	eor	r1, r1
    1b30:	e8 0e       	add	r14, r24
    1b32:	f0 e2       	ldi	r31, 0x20	; 32
    1b34:	ff 2a       	or	r15, r31
    1b36:	0e c0       	rjmp	.+28     	; 0x1b54 <vfprintf+0x10e>
    1b38:	9e 32       	cpi	r25, 0x2E	; 46
    1b3a:	29 f4       	brne	.+10     	; 0x1b46 <vfprintf+0x100>
    1b3c:	f6 fc       	sbrc	r15, 6
    1b3e:	5f c1       	rjmp	.+702    	; 0x1dfe <vfprintf+0x3b8>
    1b40:	40 e4       	ldi	r20, 0x40	; 64
    1b42:	f4 2a       	or	r15, r20
    1b44:	07 c0       	rjmp	.+14     	; 0x1b54 <vfprintf+0x10e>
    1b46:	9c 36       	cpi	r25, 0x6C	; 108
    1b48:	19 f4       	brne	.+6      	; 0x1b50 <vfprintf+0x10a>
    1b4a:	50 e8       	ldi	r21, 0x80	; 128
    1b4c:	f5 2a       	or	r15, r21
    1b4e:	02 c0       	rjmp	.+4      	; 0x1b54 <vfprintf+0x10e>
    1b50:	98 36       	cpi	r25, 0x68	; 104
    1b52:	49 f4       	brne	.+18     	; 0x1b66 <vfprintf+0x120>
    1b54:	f2 01       	movw	r30, r4
    1b56:	23 fd       	sbrc	r18, 3
    1b58:	95 91       	lpm	r25, Z+
    1b5a:	23 ff       	sbrs	r18, 3
    1b5c:	91 91       	ld	r25, Z+
    1b5e:	2f 01       	movw	r4, r30
    1b60:	99 23       	and	r25, r25
    1b62:	09 f0       	breq	.+2      	; 0x1b66 <vfprintf+0x120>
    1b64:	b8 cf       	rjmp	.-144    	; 0x1ad6 <vfprintf+0x90>
    1b66:	89 2f       	mov	r24, r25
    1b68:	85 54       	subi	r24, 0x45	; 69
    1b6a:	83 30       	cpi	r24, 0x03	; 3
    1b6c:	18 f0       	brcs	.+6      	; 0x1b74 <vfprintf+0x12e>
    1b6e:	80 52       	subi	r24, 0x20	; 32
    1b70:	83 30       	cpi	r24, 0x03	; 3
    1b72:	38 f4       	brcc	.+14     	; 0x1b82 <vfprintf+0x13c>
    1b74:	44 e0       	ldi	r20, 0x04	; 4
    1b76:	50 e0       	ldi	r21, 0x00	; 0
    1b78:	a4 0e       	add	r10, r20
    1b7a:	b5 1e       	adc	r11, r21
    1b7c:	5f e3       	ldi	r21, 0x3F	; 63
    1b7e:	59 83       	std	Y+1, r21	; 0x01
    1b80:	0f c0       	rjmp	.+30     	; 0x1ba0 <vfprintf+0x15a>
    1b82:	93 36       	cpi	r25, 0x63	; 99
    1b84:	31 f0       	breq	.+12     	; 0x1b92 <vfprintf+0x14c>
    1b86:	93 37       	cpi	r25, 0x73	; 115
    1b88:	79 f0       	breq	.+30     	; 0x1ba8 <vfprintf+0x162>
    1b8a:	93 35       	cpi	r25, 0x53	; 83
    1b8c:	09 f0       	breq	.+2      	; 0x1b90 <vfprintf+0x14a>
    1b8e:	52 c0       	rjmp	.+164    	; 0x1c34 <vfprintf+0x1ee>
    1b90:	1f c0       	rjmp	.+62     	; 0x1bd0 <vfprintf+0x18a>
    1b92:	f5 01       	movw	r30, r10
    1b94:	80 81       	ld	r24, Z
    1b96:	89 83       	std	Y+1, r24	; 0x01
    1b98:	42 e0       	ldi	r20, 0x02	; 2
    1b9a:	50 e0       	ldi	r21, 0x00	; 0
    1b9c:	a4 0e       	add	r10, r20
    1b9e:	b5 1e       	adc	r11, r21
    1ba0:	61 01       	movw	r12, r2
    1ba2:	01 e0       	ldi	r16, 0x01	; 1
    1ba4:	10 e0       	ldi	r17, 0x00	; 0
    1ba6:	11 c0       	rjmp	.+34     	; 0x1bca <vfprintf+0x184>
    1ba8:	f5 01       	movw	r30, r10
    1baa:	c0 80       	ld	r12, Z
    1bac:	d1 80       	ldd	r13, Z+1	; 0x01
    1bae:	f6 fc       	sbrc	r15, 6
    1bb0:	03 c0       	rjmp	.+6      	; 0x1bb8 <vfprintf+0x172>
    1bb2:	6f ef       	ldi	r22, 0xFF	; 255
    1bb4:	7f ef       	ldi	r23, 0xFF	; 255
    1bb6:	02 c0       	rjmp	.+4      	; 0x1bbc <vfprintf+0x176>
    1bb8:	69 2d       	mov	r22, r9
    1bba:	70 e0       	ldi	r23, 0x00	; 0
    1bbc:	42 e0       	ldi	r20, 0x02	; 2
    1bbe:	50 e0       	ldi	r21, 0x00	; 0
    1bc0:	a4 0e       	add	r10, r20
    1bc2:	b5 1e       	adc	r11, r21
    1bc4:	c6 01       	movw	r24, r12
    1bc6:	43 d1       	rcall	.+646    	; 0x1e4e <strnlen>
    1bc8:	8c 01       	movw	r16, r24
    1bca:	5f e7       	ldi	r21, 0x7F	; 127
    1bcc:	f5 22       	and	r15, r21
    1bce:	13 c0       	rjmp	.+38     	; 0x1bf6 <vfprintf+0x1b0>
    1bd0:	f5 01       	movw	r30, r10
    1bd2:	c0 80       	ld	r12, Z
    1bd4:	d1 80       	ldd	r13, Z+1	; 0x01
    1bd6:	f6 fc       	sbrc	r15, 6
    1bd8:	03 c0       	rjmp	.+6      	; 0x1be0 <vfprintf+0x19a>
    1bda:	6f ef       	ldi	r22, 0xFF	; 255
    1bdc:	7f ef       	ldi	r23, 0xFF	; 255
    1bde:	02 c0       	rjmp	.+4      	; 0x1be4 <vfprintf+0x19e>
    1be0:	69 2d       	mov	r22, r9
    1be2:	70 e0       	ldi	r23, 0x00	; 0
    1be4:	42 e0       	ldi	r20, 0x02	; 2
    1be6:	50 e0       	ldi	r21, 0x00	; 0
    1be8:	a4 0e       	add	r10, r20
    1bea:	b5 1e       	adc	r11, r21
    1bec:	c6 01       	movw	r24, r12
    1bee:	24 d1       	rcall	.+584    	; 0x1e38 <strnlen_P>
    1bf0:	8c 01       	movw	r16, r24
    1bf2:	50 e8       	ldi	r21, 0x80	; 128
    1bf4:	f5 2a       	or	r15, r21
    1bf6:	f3 fe       	sbrs	r15, 3
    1bf8:	06 c0       	rjmp	.+12     	; 0x1c06 <vfprintf+0x1c0>
    1bfa:	18 c0       	rjmp	.+48     	; 0x1c2c <vfprintf+0x1e6>
    1bfc:	80 e2       	ldi	r24, 0x20	; 32
    1bfe:	90 e0       	ldi	r25, 0x00	; 0
    1c00:	b3 01       	movw	r22, r6
    1c02:	30 d1       	rcall	.+608    	; 0x1e64 <fputc>
    1c04:	ea 94       	dec	r14
    1c06:	8e 2d       	mov	r24, r14
    1c08:	90 e0       	ldi	r25, 0x00	; 0
    1c0a:	08 17       	cp	r16, r24
    1c0c:	19 07       	cpc	r17, r25
    1c0e:	b0 f3       	brcs	.-20     	; 0x1bfc <vfprintf+0x1b6>
    1c10:	0d c0       	rjmp	.+26     	; 0x1c2c <vfprintf+0x1e6>
    1c12:	f6 01       	movw	r30, r12
    1c14:	f7 fc       	sbrc	r15, 7
    1c16:	85 91       	lpm	r24, Z+
    1c18:	f7 fe       	sbrs	r15, 7
    1c1a:	81 91       	ld	r24, Z+
    1c1c:	6f 01       	movw	r12, r30
    1c1e:	90 e0       	ldi	r25, 0x00	; 0
    1c20:	b3 01       	movw	r22, r6
    1c22:	20 d1       	rcall	.+576    	; 0x1e64 <fputc>
    1c24:	e1 10       	cpse	r14, r1
    1c26:	ea 94       	dec	r14
    1c28:	01 50       	subi	r16, 0x01	; 1
    1c2a:	10 40       	sbci	r17, 0x00	; 0
    1c2c:	01 15       	cp	r16, r1
    1c2e:	11 05       	cpc	r17, r1
    1c30:	81 f7       	brne	.-32     	; 0x1c12 <vfprintf+0x1cc>
    1c32:	e2 c0       	rjmp	.+452    	; 0x1df8 <vfprintf+0x3b2>
    1c34:	94 36       	cpi	r25, 0x64	; 100
    1c36:	11 f0       	breq	.+4      	; 0x1c3c <vfprintf+0x1f6>
    1c38:	99 36       	cpi	r25, 0x69	; 105
    1c3a:	61 f5       	brne	.+88     	; 0x1c94 <vfprintf+0x24e>
    1c3c:	f7 fe       	sbrs	r15, 7
    1c3e:	08 c0       	rjmp	.+16     	; 0x1c50 <vfprintf+0x20a>
    1c40:	f5 01       	movw	r30, r10
    1c42:	20 81       	ld	r18, Z
    1c44:	31 81       	ldd	r19, Z+1	; 0x01
    1c46:	42 81       	ldd	r20, Z+2	; 0x02
    1c48:	53 81       	ldd	r21, Z+3	; 0x03
    1c4a:	84 e0       	ldi	r24, 0x04	; 4
    1c4c:	90 e0       	ldi	r25, 0x00	; 0
    1c4e:	0a c0       	rjmp	.+20     	; 0x1c64 <vfprintf+0x21e>
    1c50:	f5 01       	movw	r30, r10
    1c52:	80 81       	ld	r24, Z
    1c54:	91 81       	ldd	r25, Z+1	; 0x01
    1c56:	9c 01       	movw	r18, r24
    1c58:	44 27       	eor	r20, r20
    1c5a:	37 fd       	sbrc	r19, 7
    1c5c:	40 95       	com	r20
    1c5e:	54 2f       	mov	r21, r20
    1c60:	82 e0       	ldi	r24, 0x02	; 2
    1c62:	90 e0       	ldi	r25, 0x00	; 0
    1c64:	a8 0e       	add	r10, r24
    1c66:	b9 1e       	adc	r11, r25
    1c68:	9f e6       	ldi	r25, 0x6F	; 111
    1c6a:	f9 22       	and	r15, r25
    1c6c:	57 ff       	sbrs	r21, 7
    1c6e:	09 c0       	rjmp	.+18     	; 0x1c82 <vfprintf+0x23c>
    1c70:	50 95       	com	r21
    1c72:	40 95       	com	r20
    1c74:	30 95       	com	r19
    1c76:	21 95       	neg	r18
    1c78:	3f 4f       	sbci	r19, 0xFF	; 255
    1c7a:	4f 4f       	sbci	r20, 0xFF	; 255
    1c7c:	5f 4f       	sbci	r21, 0xFF	; 255
    1c7e:	e0 e8       	ldi	r30, 0x80	; 128
    1c80:	fe 2a       	or	r15, r30
    1c82:	ca 01       	movw	r24, r20
    1c84:	b9 01       	movw	r22, r18
    1c86:	a1 01       	movw	r20, r2
    1c88:	2a e0       	ldi	r18, 0x0A	; 10
    1c8a:	30 e0       	ldi	r19, 0x00	; 0
    1c8c:	17 d1       	rcall	.+558    	; 0x1ebc <__ultoa_invert>
    1c8e:	d8 2e       	mov	r13, r24
    1c90:	d2 18       	sub	r13, r2
    1c92:	3f c0       	rjmp	.+126    	; 0x1d12 <vfprintf+0x2cc>
    1c94:	95 37       	cpi	r25, 0x75	; 117
    1c96:	29 f4       	brne	.+10     	; 0x1ca2 <vfprintf+0x25c>
    1c98:	1f 2d       	mov	r17, r15
    1c9a:	1f 7e       	andi	r17, 0xEF	; 239
    1c9c:	2a e0       	ldi	r18, 0x0A	; 10
    1c9e:	30 e0       	ldi	r19, 0x00	; 0
    1ca0:	1d c0       	rjmp	.+58     	; 0x1cdc <vfprintf+0x296>
    1ca2:	1f 2d       	mov	r17, r15
    1ca4:	19 7f       	andi	r17, 0xF9	; 249
    1ca6:	9f 36       	cpi	r25, 0x6F	; 111
    1ca8:	61 f0       	breq	.+24     	; 0x1cc2 <vfprintf+0x27c>
    1caa:	90 37       	cpi	r25, 0x70	; 112
    1cac:	20 f4       	brcc	.+8      	; 0x1cb6 <vfprintf+0x270>
    1cae:	98 35       	cpi	r25, 0x58	; 88
    1cb0:	09 f0       	breq	.+2      	; 0x1cb4 <vfprintf+0x26e>
    1cb2:	a5 c0       	rjmp	.+330    	; 0x1dfe <vfprintf+0x3b8>
    1cb4:	0f c0       	rjmp	.+30     	; 0x1cd4 <vfprintf+0x28e>
    1cb6:	90 37       	cpi	r25, 0x70	; 112
    1cb8:	39 f0       	breq	.+14     	; 0x1cc8 <vfprintf+0x282>
    1cba:	98 37       	cpi	r25, 0x78	; 120
    1cbc:	09 f0       	breq	.+2      	; 0x1cc0 <vfprintf+0x27a>
    1cbe:	9f c0       	rjmp	.+318    	; 0x1dfe <vfprintf+0x3b8>
    1cc0:	04 c0       	rjmp	.+8      	; 0x1cca <vfprintf+0x284>
    1cc2:	28 e0       	ldi	r18, 0x08	; 8
    1cc4:	30 e0       	ldi	r19, 0x00	; 0
    1cc6:	0a c0       	rjmp	.+20     	; 0x1cdc <vfprintf+0x296>
    1cc8:	10 61       	ori	r17, 0x10	; 16
    1cca:	14 fd       	sbrc	r17, 4
    1ccc:	14 60       	ori	r17, 0x04	; 4
    1cce:	20 e1       	ldi	r18, 0x10	; 16
    1cd0:	30 e0       	ldi	r19, 0x00	; 0
    1cd2:	04 c0       	rjmp	.+8      	; 0x1cdc <vfprintf+0x296>
    1cd4:	14 fd       	sbrc	r17, 4
    1cd6:	16 60       	ori	r17, 0x06	; 6
    1cd8:	20 e1       	ldi	r18, 0x10	; 16
    1cda:	32 e0       	ldi	r19, 0x02	; 2
    1cdc:	17 ff       	sbrs	r17, 7
    1cde:	08 c0       	rjmp	.+16     	; 0x1cf0 <vfprintf+0x2aa>
    1ce0:	f5 01       	movw	r30, r10
    1ce2:	60 81       	ld	r22, Z
    1ce4:	71 81       	ldd	r23, Z+1	; 0x01
    1ce6:	82 81       	ldd	r24, Z+2	; 0x02
    1ce8:	93 81       	ldd	r25, Z+3	; 0x03
    1cea:	44 e0       	ldi	r20, 0x04	; 4
    1cec:	50 e0       	ldi	r21, 0x00	; 0
    1cee:	08 c0       	rjmp	.+16     	; 0x1d00 <vfprintf+0x2ba>
    1cf0:	f5 01       	movw	r30, r10
    1cf2:	80 81       	ld	r24, Z
    1cf4:	91 81       	ldd	r25, Z+1	; 0x01
    1cf6:	bc 01       	movw	r22, r24
    1cf8:	80 e0       	ldi	r24, 0x00	; 0
    1cfa:	90 e0       	ldi	r25, 0x00	; 0
    1cfc:	42 e0       	ldi	r20, 0x02	; 2
    1cfe:	50 e0       	ldi	r21, 0x00	; 0
    1d00:	a4 0e       	add	r10, r20
    1d02:	b5 1e       	adc	r11, r21
    1d04:	a1 01       	movw	r20, r2
    1d06:	da d0       	rcall	.+436    	; 0x1ebc <__ultoa_invert>
    1d08:	d8 2e       	mov	r13, r24
    1d0a:	d2 18       	sub	r13, r2
    1d0c:	8f e7       	ldi	r24, 0x7F	; 127
    1d0e:	f8 2e       	mov	r15, r24
    1d10:	f1 22       	and	r15, r17
    1d12:	f6 fe       	sbrs	r15, 6
    1d14:	0b c0       	rjmp	.+22     	; 0x1d2c <vfprintf+0x2e6>
    1d16:	5e ef       	ldi	r21, 0xFE	; 254
    1d18:	f5 22       	and	r15, r21
    1d1a:	d9 14       	cp	r13, r9
    1d1c:	38 f4       	brcc	.+14     	; 0x1d2c <vfprintf+0x2e6>
    1d1e:	f4 fe       	sbrs	r15, 4
    1d20:	07 c0       	rjmp	.+14     	; 0x1d30 <vfprintf+0x2ea>
    1d22:	f2 fc       	sbrc	r15, 2
    1d24:	05 c0       	rjmp	.+10     	; 0x1d30 <vfprintf+0x2ea>
    1d26:	8f ee       	ldi	r24, 0xEF	; 239
    1d28:	f8 22       	and	r15, r24
    1d2a:	02 c0       	rjmp	.+4      	; 0x1d30 <vfprintf+0x2ea>
    1d2c:	1d 2d       	mov	r17, r13
    1d2e:	01 c0       	rjmp	.+2      	; 0x1d32 <vfprintf+0x2ec>
    1d30:	19 2d       	mov	r17, r9
    1d32:	f4 fe       	sbrs	r15, 4
    1d34:	0d c0       	rjmp	.+26     	; 0x1d50 <vfprintf+0x30a>
    1d36:	fe 01       	movw	r30, r28
    1d38:	ed 0d       	add	r30, r13
    1d3a:	f1 1d       	adc	r31, r1
    1d3c:	80 81       	ld	r24, Z
    1d3e:	80 33       	cpi	r24, 0x30	; 48
    1d40:	19 f4       	brne	.+6      	; 0x1d48 <vfprintf+0x302>
    1d42:	99 ee       	ldi	r25, 0xE9	; 233
    1d44:	f9 22       	and	r15, r25
    1d46:	08 c0       	rjmp	.+16     	; 0x1d58 <vfprintf+0x312>
    1d48:	1f 5f       	subi	r17, 0xFF	; 255
    1d4a:	f2 fe       	sbrs	r15, 2
    1d4c:	05 c0       	rjmp	.+10     	; 0x1d58 <vfprintf+0x312>
    1d4e:	03 c0       	rjmp	.+6      	; 0x1d56 <vfprintf+0x310>
    1d50:	8f 2d       	mov	r24, r15
    1d52:	86 78       	andi	r24, 0x86	; 134
    1d54:	09 f0       	breq	.+2      	; 0x1d58 <vfprintf+0x312>
    1d56:	1f 5f       	subi	r17, 0xFF	; 255
    1d58:	0f 2d       	mov	r16, r15
    1d5a:	f3 fc       	sbrc	r15, 3
    1d5c:	13 c0       	rjmp	.+38     	; 0x1d84 <vfprintf+0x33e>
    1d5e:	f0 fe       	sbrs	r15, 0
    1d60:	0e c0       	rjmp	.+28     	; 0x1d7e <vfprintf+0x338>
    1d62:	1e 15       	cp	r17, r14
    1d64:	10 f0       	brcs	.+4      	; 0x1d6a <vfprintf+0x324>
    1d66:	9d 2c       	mov	r9, r13
    1d68:	0a c0       	rjmp	.+20     	; 0x1d7e <vfprintf+0x338>
    1d6a:	9d 2c       	mov	r9, r13
    1d6c:	9e 0c       	add	r9, r14
    1d6e:	91 1a       	sub	r9, r17
    1d70:	1e 2d       	mov	r17, r14
    1d72:	05 c0       	rjmp	.+10     	; 0x1d7e <vfprintf+0x338>
    1d74:	80 e2       	ldi	r24, 0x20	; 32
    1d76:	90 e0       	ldi	r25, 0x00	; 0
    1d78:	b3 01       	movw	r22, r6
    1d7a:	74 d0       	rcall	.+232    	; 0x1e64 <fputc>
    1d7c:	1f 5f       	subi	r17, 0xFF	; 255
    1d7e:	1e 15       	cp	r17, r14
    1d80:	c8 f3       	brcs	.-14     	; 0x1d74 <vfprintf+0x32e>
    1d82:	04 c0       	rjmp	.+8      	; 0x1d8c <vfprintf+0x346>
    1d84:	1e 15       	cp	r17, r14
    1d86:	10 f4       	brcc	.+4      	; 0x1d8c <vfprintf+0x346>
    1d88:	e1 1a       	sub	r14, r17
    1d8a:	01 c0       	rjmp	.+2      	; 0x1d8e <vfprintf+0x348>
    1d8c:	ee 24       	eor	r14, r14
    1d8e:	04 ff       	sbrs	r16, 4
    1d90:	0e c0       	rjmp	.+28     	; 0x1dae <vfprintf+0x368>
    1d92:	80 e3       	ldi	r24, 0x30	; 48
    1d94:	90 e0       	ldi	r25, 0x00	; 0
    1d96:	b3 01       	movw	r22, r6
    1d98:	65 d0       	rcall	.+202    	; 0x1e64 <fputc>
    1d9a:	02 ff       	sbrs	r16, 2
    1d9c:	1b c0       	rjmp	.+54     	; 0x1dd4 <vfprintf+0x38e>
    1d9e:	01 fd       	sbrc	r16, 1
    1da0:	03 c0       	rjmp	.+6      	; 0x1da8 <vfprintf+0x362>
    1da2:	88 e7       	ldi	r24, 0x78	; 120
    1da4:	90 e0       	ldi	r25, 0x00	; 0
    1da6:	0e c0       	rjmp	.+28     	; 0x1dc4 <vfprintf+0x37e>
    1da8:	88 e5       	ldi	r24, 0x58	; 88
    1daa:	90 e0       	ldi	r25, 0x00	; 0
    1dac:	0b c0       	rjmp	.+22     	; 0x1dc4 <vfprintf+0x37e>
    1dae:	80 2f       	mov	r24, r16
    1db0:	86 78       	andi	r24, 0x86	; 134
    1db2:	81 f0       	breq	.+32     	; 0x1dd4 <vfprintf+0x38e>
    1db4:	01 ff       	sbrs	r16, 1
    1db6:	02 c0       	rjmp	.+4      	; 0x1dbc <vfprintf+0x376>
    1db8:	8b e2       	ldi	r24, 0x2B	; 43
    1dba:	01 c0       	rjmp	.+2      	; 0x1dbe <vfprintf+0x378>
    1dbc:	80 e2       	ldi	r24, 0x20	; 32
    1dbe:	f7 fc       	sbrc	r15, 7
    1dc0:	8d e2       	ldi	r24, 0x2D	; 45
    1dc2:	90 e0       	ldi	r25, 0x00	; 0
    1dc4:	b3 01       	movw	r22, r6
    1dc6:	4e d0       	rcall	.+156    	; 0x1e64 <fputc>
    1dc8:	05 c0       	rjmp	.+10     	; 0x1dd4 <vfprintf+0x38e>
    1dca:	80 e3       	ldi	r24, 0x30	; 48
    1dcc:	90 e0       	ldi	r25, 0x00	; 0
    1dce:	b3 01       	movw	r22, r6
    1dd0:	49 d0       	rcall	.+146    	; 0x1e64 <fputc>
    1dd2:	9a 94       	dec	r9
    1dd4:	d9 14       	cp	r13, r9
    1dd6:	c8 f3       	brcs	.-14     	; 0x1dca <vfprintf+0x384>
    1dd8:	da 94       	dec	r13
    1dda:	f1 01       	movw	r30, r2
    1ddc:	ed 0d       	add	r30, r13
    1dde:	f1 1d       	adc	r31, r1
    1de0:	80 81       	ld	r24, Z
    1de2:	90 e0       	ldi	r25, 0x00	; 0
    1de4:	b3 01       	movw	r22, r6
    1de6:	3e d0       	rcall	.+124    	; 0x1e64 <fputc>
    1de8:	dd 20       	and	r13, r13
    1dea:	b1 f7       	brne	.-20     	; 0x1dd8 <vfprintf+0x392>
    1dec:	05 c0       	rjmp	.+10     	; 0x1df8 <vfprintf+0x3b2>
    1dee:	80 e2       	ldi	r24, 0x20	; 32
    1df0:	90 e0       	ldi	r25, 0x00	; 0
    1df2:	b3 01       	movw	r22, r6
    1df4:	37 d0       	rcall	.+110    	; 0x1e64 <fputc>
    1df6:	ea 94       	dec	r14
    1df8:	ee 20       	and	r14, r14
    1dfa:	c9 f7       	brne	.-14     	; 0x1dee <vfprintf+0x3a8>
    1dfc:	50 ce       	rjmp	.-864    	; 0x1a9e <vfprintf+0x58>
    1dfe:	f3 01       	movw	r30, r6
    1e00:	66 81       	ldd	r22, Z+6	; 0x06
    1e02:	77 81       	ldd	r23, Z+7	; 0x07
    1e04:	cb 01       	movw	r24, r22
    1e06:	2b 96       	adiw	r28, 0x0b	; 11
    1e08:	0f b6       	in	r0, 0x3f	; 63
    1e0a:	f8 94       	cli
    1e0c:	de bf       	out	0x3e, r29	; 62
    1e0e:	0f be       	out	0x3f, r0	; 63
    1e10:	cd bf       	out	0x3d, r28	; 61
    1e12:	cf 91       	pop	r28
    1e14:	df 91       	pop	r29
    1e16:	1f 91       	pop	r17
    1e18:	0f 91       	pop	r16
    1e1a:	ff 90       	pop	r15
    1e1c:	ef 90       	pop	r14
    1e1e:	df 90       	pop	r13
    1e20:	cf 90       	pop	r12
    1e22:	bf 90       	pop	r11
    1e24:	af 90       	pop	r10
    1e26:	9f 90       	pop	r9
    1e28:	8f 90       	pop	r8
    1e2a:	7f 90       	pop	r7
    1e2c:	6f 90       	pop	r6
    1e2e:	5f 90       	pop	r5
    1e30:	4f 90       	pop	r4
    1e32:	3f 90       	pop	r3
    1e34:	2f 90       	pop	r2
    1e36:	08 95       	ret

00001e38 <strnlen_P>:
    1e38:	fc 01       	movw	r30, r24
    1e3a:	05 90       	lpm	r0, Z+
    1e3c:	61 50       	subi	r22, 0x01	; 1
    1e3e:	70 40       	sbci	r23, 0x00	; 0
    1e40:	01 10       	cpse	r0, r1
    1e42:	d8 f7       	brcc	.-10     	; 0x1e3a <strnlen_P+0x2>
    1e44:	80 95       	com	r24
    1e46:	90 95       	com	r25
    1e48:	8e 0f       	add	r24, r30
    1e4a:	9f 1f       	adc	r25, r31
    1e4c:	08 95       	ret

00001e4e <strnlen>:
    1e4e:	fc 01       	movw	r30, r24
    1e50:	61 50       	subi	r22, 0x01	; 1
    1e52:	70 40       	sbci	r23, 0x00	; 0
    1e54:	01 90       	ld	r0, Z+
    1e56:	01 10       	cpse	r0, r1
    1e58:	d8 f7       	brcc	.-10     	; 0x1e50 <strnlen+0x2>
    1e5a:	80 95       	com	r24
    1e5c:	90 95       	com	r25
    1e5e:	8e 0f       	add	r24, r30
    1e60:	9f 1f       	adc	r25, r31
    1e62:	08 95       	ret

00001e64 <fputc>:
    1e64:	0f 93       	push	r16
    1e66:	1f 93       	push	r17
    1e68:	cf 93       	push	r28
    1e6a:	df 93       	push	r29
    1e6c:	8c 01       	movw	r16, r24
    1e6e:	eb 01       	movw	r28, r22
    1e70:	8b 81       	ldd	r24, Y+3	; 0x03
    1e72:	81 ff       	sbrs	r24, 1
    1e74:	1b c0       	rjmp	.+54     	; 0x1eac <fputc+0x48>
    1e76:	82 ff       	sbrs	r24, 2
    1e78:	0d c0       	rjmp	.+26     	; 0x1e94 <fputc+0x30>
    1e7a:	2e 81       	ldd	r18, Y+6	; 0x06
    1e7c:	3f 81       	ldd	r19, Y+7	; 0x07
    1e7e:	8c 81       	ldd	r24, Y+4	; 0x04
    1e80:	9d 81       	ldd	r25, Y+5	; 0x05
    1e82:	28 17       	cp	r18, r24
    1e84:	39 07       	cpc	r19, r25
    1e86:	64 f4       	brge	.+24     	; 0x1ea0 <fputc+0x3c>
    1e88:	e8 81       	ld	r30, Y
    1e8a:	f9 81       	ldd	r31, Y+1	; 0x01
    1e8c:	01 93       	st	Z+, r16
    1e8e:	f9 83       	std	Y+1, r31	; 0x01
    1e90:	e8 83       	st	Y, r30
    1e92:	06 c0       	rjmp	.+12     	; 0x1ea0 <fputc+0x3c>
    1e94:	e8 85       	ldd	r30, Y+8	; 0x08
    1e96:	f9 85       	ldd	r31, Y+9	; 0x09
    1e98:	80 2f       	mov	r24, r16
    1e9a:	09 95       	icall
    1e9c:	89 2b       	or	r24, r25
    1e9e:	31 f4       	brne	.+12     	; 0x1eac <fputc+0x48>
    1ea0:	8e 81       	ldd	r24, Y+6	; 0x06
    1ea2:	9f 81       	ldd	r25, Y+7	; 0x07
    1ea4:	01 96       	adiw	r24, 0x01	; 1
    1ea6:	9f 83       	std	Y+7, r25	; 0x07
    1ea8:	8e 83       	std	Y+6, r24	; 0x06
    1eaa:	02 c0       	rjmp	.+4      	; 0x1eb0 <fputc+0x4c>
    1eac:	0f ef       	ldi	r16, 0xFF	; 255
    1eae:	1f ef       	ldi	r17, 0xFF	; 255
    1eb0:	c8 01       	movw	r24, r16
    1eb2:	df 91       	pop	r29
    1eb4:	cf 91       	pop	r28
    1eb6:	1f 91       	pop	r17
    1eb8:	0f 91       	pop	r16
    1eba:	08 95       	ret

00001ebc <__ultoa_invert>:
    1ebc:	fa 01       	movw	r30, r20
    1ebe:	aa 27       	eor	r26, r26
    1ec0:	28 30       	cpi	r18, 0x08	; 8
    1ec2:	51 f1       	breq	.+84     	; 0x1f18 <__ultoa_invert+0x5c>
    1ec4:	20 31       	cpi	r18, 0x10	; 16
    1ec6:	81 f1       	breq	.+96     	; 0x1f28 <__ultoa_invert+0x6c>
    1ec8:	e8 94       	clt
    1eca:	6f 93       	push	r22
    1ecc:	6e 7f       	andi	r22, 0xFE	; 254
    1ece:	6e 5f       	subi	r22, 0xFE	; 254
    1ed0:	7f 4f       	sbci	r23, 0xFF	; 255
    1ed2:	8f 4f       	sbci	r24, 0xFF	; 255
    1ed4:	9f 4f       	sbci	r25, 0xFF	; 255
    1ed6:	af 4f       	sbci	r26, 0xFF	; 255
    1ed8:	b1 e0       	ldi	r27, 0x01	; 1
    1eda:	3e d0       	rcall	.+124    	; 0x1f58 <__ultoa_invert+0x9c>
    1edc:	b4 e0       	ldi	r27, 0x04	; 4
    1ede:	3c d0       	rcall	.+120    	; 0x1f58 <__ultoa_invert+0x9c>
    1ee0:	67 0f       	add	r22, r23
    1ee2:	78 1f       	adc	r23, r24
    1ee4:	89 1f       	adc	r24, r25
    1ee6:	9a 1f       	adc	r25, r26
    1ee8:	a1 1d       	adc	r26, r1
    1eea:	68 0f       	add	r22, r24
    1eec:	79 1f       	adc	r23, r25
    1eee:	8a 1f       	adc	r24, r26
    1ef0:	91 1d       	adc	r25, r1
    1ef2:	a1 1d       	adc	r26, r1
    1ef4:	6a 0f       	add	r22, r26
    1ef6:	71 1d       	adc	r23, r1
    1ef8:	81 1d       	adc	r24, r1
    1efa:	91 1d       	adc	r25, r1
    1efc:	a1 1d       	adc	r26, r1
    1efe:	20 d0       	rcall	.+64     	; 0x1f40 <__ultoa_invert+0x84>
    1f00:	09 f4       	brne	.+2      	; 0x1f04 <__ultoa_invert+0x48>
    1f02:	68 94       	set
    1f04:	3f 91       	pop	r19
    1f06:	2a e0       	ldi	r18, 0x0A	; 10
    1f08:	26 9f       	mul	r18, r22
    1f0a:	11 24       	eor	r1, r1
    1f0c:	30 19       	sub	r19, r0
    1f0e:	30 5d       	subi	r19, 0xD0	; 208
    1f10:	31 93       	st	Z+, r19
    1f12:	de f6       	brtc	.-74     	; 0x1eca <__ultoa_invert+0xe>
    1f14:	cf 01       	movw	r24, r30
    1f16:	08 95       	ret
    1f18:	46 2f       	mov	r20, r22
    1f1a:	47 70       	andi	r20, 0x07	; 7
    1f1c:	40 5d       	subi	r20, 0xD0	; 208
    1f1e:	41 93       	st	Z+, r20
    1f20:	b3 e0       	ldi	r27, 0x03	; 3
    1f22:	0f d0       	rcall	.+30     	; 0x1f42 <__ultoa_invert+0x86>
    1f24:	c9 f7       	brne	.-14     	; 0x1f18 <__ultoa_invert+0x5c>
    1f26:	f6 cf       	rjmp	.-20     	; 0x1f14 <__ultoa_invert+0x58>
    1f28:	46 2f       	mov	r20, r22
    1f2a:	4f 70       	andi	r20, 0x0F	; 15
    1f2c:	40 5d       	subi	r20, 0xD0	; 208
    1f2e:	4a 33       	cpi	r20, 0x3A	; 58
    1f30:	18 f0       	brcs	.+6      	; 0x1f38 <__ultoa_invert+0x7c>
    1f32:	49 5d       	subi	r20, 0xD9	; 217
    1f34:	31 fd       	sbrc	r19, 1
    1f36:	40 52       	subi	r20, 0x20	; 32
    1f38:	41 93       	st	Z+, r20
    1f3a:	02 d0       	rcall	.+4      	; 0x1f40 <__ultoa_invert+0x84>
    1f3c:	a9 f7       	brne	.-22     	; 0x1f28 <__ultoa_invert+0x6c>
    1f3e:	ea cf       	rjmp	.-44     	; 0x1f14 <__ultoa_invert+0x58>
    1f40:	b4 e0       	ldi	r27, 0x04	; 4
    1f42:	a6 95       	lsr	r26
    1f44:	97 95       	ror	r25
    1f46:	87 95       	ror	r24
    1f48:	77 95       	ror	r23
    1f4a:	67 95       	ror	r22
    1f4c:	ba 95       	dec	r27
    1f4e:	c9 f7       	brne	.-14     	; 0x1f42 <__ultoa_invert+0x86>
    1f50:	00 97       	sbiw	r24, 0x00	; 0
    1f52:	61 05       	cpc	r22, r1
    1f54:	71 05       	cpc	r23, r1
    1f56:	08 95       	ret
    1f58:	9b 01       	movw	r18, r22
    1f5a:	ac 01       	movw	r20, r24
    1f5c:	0a 2e       	mov	r0, r26
    1f5e:	06 94       	lsr	r0
    1f60:	57 95       	ror	r21
    1f62:	47 95       	ror	r20
    1f64:	37 95       	ror	r19
    1f66:	27 95       	ror	r18
    1f68:	ba 95       	dec	r27
    1f6a:	c9 f7       	brne	.-14     	; 0x1f5e <__ultoa_invert+0xa2>
    1f6c:	62 0f       	add	r22, r18
    1f6e:	73 1f       	adc	r23, r19
    1f70:	84 1f       	adc	r24, r20
    1f72:	95 1f       	adc	r25, r21
    1f74:	a0 1d       	adc	r26, r0
    1f76:	08 95       	ret

00001f78 <_exit>:
    1f78:	f8 94       	cli

00001f7a <__stop_program>:
    1f7a:	ff cf       	rjmp	.-2      	; 0x1f7a <__stop_program>
