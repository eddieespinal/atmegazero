
VirtualSerial.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000068  00800100  00000e5c  00000ef0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e5c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001c  00800168  00800168  00000f58  2**0
                  ALLOC
  3 .debug_aranges 00000470  00000000  00000000  00000f58  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000c6d  00000000  00000000  000013c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00007e26  00000000  00000000  00002035  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001faa  00000000  00000000  00009e5b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00006253  00000000  00000000  0000be05  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000006a0  00000000  00000000  00012058  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000032ed  00000000  00000000  000126f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00003509  00000000  00000000  000159e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000578  00000000  00000000  00018eee  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	return true;
#endif
}

void Endpoint_ClearEndpoints(void)
{
   0:	91 c0       	rjmp	.+290    	; 0x124 <__ctors_end>
	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
}
   2:	00 00       	nop

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
   4:	ac c0       	rjmp	.+344    	; 0x15e <__bad_interrupt>
	}
	else
	{
		return 0;
	}
}
   6:	00 00       	nop
   8:	aa c0       	rjmp	.+340    	; 0x15e <__bad_interrupt>
   a:	00 00       	nop
   c:	a8 c0       	rjmp	.+336    	; 0x15e <__bad_interrupt>
   e:	00 00       	nop
  10:	a6 c0       	rjmp	.+332    	; 0x15e <__bad_interrupt>
  12:	00 00       	nop
  14:	a4 c0       	rjmp	.+328    	; 0x15e <__bad_interrupt>
  16:	00 00       	nop
  18:	a2 c0       	rjmp	.+324    	; 0x15e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	a0 c0       	rjmp	.+320    	; 0x15e <__bad_interrupt>
  1e:	00 00       	nop
  20:	9e c0       	rjmp	.+316    	; 0x15e <__bad_interrupt>
  22:	00 00       	nop
  24:	9c c0       	rjmp	.+312    	; 0x15e <__bad_interrupt>
  26:	00 00       	nop
  28:	38 c2       	rjmp	.+1136   	; 0x49a <__vector_10>
  2a:	00 00       	nop
  2c:	98 c0       	rjmp	.+304    	; 0x15e <__bad_interrupt>
  2e:	00 00       	nop
  30:	96 c0       	rjmp	.+300    	; 0x15e <__bad_interrupt>
  32:	00 00       	nop
  34:	94 c0       	rjmp	.+296    	; 0x15e <__bad_interrupt>
  36:	00 00       	nop
  38:	92 c0       	rjmp	.+292    	; 0x15e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	90 c0       	rjmp	.+288    	; 0x15e <__bad_interrupt>
  3e:	00 00       	nop
  40:	8e c0       	rjmp	.+284    	; 0x15e <__bad_interrupt>
  42:	00 00       	nop
  44:	8c c0       	rjmp	.+280    	; 0x15e <__bad_interrupt>
  46:	00 00       	nop
  48:	8a c0       	rjmp	.+276    	; 0x15e <__bad_interrupt>
  4a:	00 00       	nop
  4c:	88 c0       	rjmp	.+272    	; 0x15e <__bad_interrupt>
  4e:	00 00       	nop
  50:	86 c0       	rjmp	.+268    	; 0x15e <__bad_interrupt>
  52:	00 00       	nop
  54:	84 c0       	rjmp	.+264    	; 0x15e <__bad_interrupt>
  56:	00 00       	nop
  58:	82 c0       	rjmp	.+260    	; 0x15e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	80 c0       	rjmp	.+256    	; 0x15e <__bad_interrupt>
  5e:	00 00       	nop
  60:	7e c0       	rjmp	.+252    	; 0x15e <__bad_interrupt>
  62:	00 00       	nop
  64:	7c c0       	rjmp	.+248    	; 0x15e <__bad_interrupt>
  66:	00 00       	nop
  68:	7a c0       	rjmp	.+244    	; 0x15e <__bad_interrupt>
  6a:	00 00       	nop
  6c:	78 c0       	rjmp	.+240    	; 0x15e <__bad_interrupt>
  6e:	00 00       	nop
  70:	76 c0       	rjmp	.+236    	; 0x15e <__bad_interrupt>
  72:	00 00       	nop
  74:	74 c0       	rjmp	.+232    	; 0x15e <__bad_interrupt>
  76:	00 00       	nop
  78:	72 c0       	rjmp	.+228    	; 0x15e <__bad_interrupt>
  7a:	00 00       	nop
  7c:	70 c0       	rjmp	.+224    	; 0x15e <__bad_interrupt>
  7e:	00 00       	nop
  80:	6e c0       	rjmp	.+220    	; 0x15e <__bad_interrupt>
  82:	00 00       	nop
  84:	6c c0       	rjmp	.+216    	; 0x15e <__bad_interrupt>
  86:	00 00       	nop
  88:	6a c0       	rjmp	.+212    	; 0x15e <__bad_interrupt>
  8a:	00 00       	nop
  8c:	68 c0       	rjmp	.+208    	; 0x15e <__bad_interrupt>
  8e:	00 00       	nop
  90:	66 c0       	rjmp	.+204    	; 0x15e <__bad_interrupt>
  92:	00 00       	nop
  94:	64 c0       	rjmp	.+200    	; 0x15e <__bad_interrupt>
  96:	00 00       	nop

00000098 <DeviceDescriptor>:
  98:	12 01 10 01 02 00 00 08 eb 03 44 20 01 00 01 02     ..........D ....
  a8:	dc 01                                               ..

000000aa <ConfigurationDescriptor>:
  aa:	09 02 3e 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..>.....2.......
  ba:	01 00 05 24 00 10 01 04 24 02 06 05 24 06 00 01     ...$....$...$...
  ca:	07 05 82 03 08 00 ff 09 04 01 00 02 0a 00 00 00     ................
  da:	07 05 04 02 10 00 01 07 05 83 02 10 00 01           ..............

000000e8 <LanguageString>:
  e8:	04 03 09 04                                         ....

000000ec <ManufacturerString>:
  ec:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
  fc:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

00000106 <ProductString>:
 106:	1c 03 4c 00 55 00 46 00 41 00 20 00 43 00 44 00     ..L.U.F.A. .C.D.
 116:	43 00 20 00 44 00 65 00 6d 00 6f 00 00 00           C. .D.e.m.o...

00000124 <__ctors_end>:
 124:	11 24       	eor	r1, r1
 126:	1f be       	out	0x3f, r1	; 63
 128:	cf ef       	ldi	r28, 0xFF	; 255
 12a:	d0 e2       	ldi	r29, 0x20	; 32
 12c:	de bf       	out	0x3e, r29	; 62
 12e:	cd bf       	out	0x3d, r28	; 61

00000130 <__do_copy_data>:
 130:	11 e0       	ldi	r17, 0x01	; 1
 132:	a0 e0       	ldi	r26, 0x00	; 0
 134:	b1 e0       	ldi	r27, 0x01	; 1
 136:	ec e5       	ldi	r30, 0x5C	; 92
 138:	fe e0       	ldi	r31, 0x0E	; 14
 13a:	00 e0       	ldi	r16, 0x00	; 0
 13c:	0b bf       	out	0x3b, r16	; 59
 13e:	02 c0       	rjmp	.+4      	; 0x144 <__do_copy_data+0x14>
 140:	07 90       	elpm	r0, Z+
 142:	0d 92       	st	X+, r0
 144:	a8 36       	cpi	r26, 0x68	; 104
 146:	b1 07       	cpc	r27, r17
 148:	d9 f7       	brne	.-10     	; 0x140 <__do_copy_data+0x10>

0000014a <__do_clear_bss>:
 14a:	11 e0       	ldi	r17, 0x01	; 1
 14c:	a8 e6       	ldi	r26, 0x68	; 104
 14e:	b1 e0       	ldi	r27, 0x01	; 1
 150:	01 c0       	rjmp	.+2      	; 0x154 <.do_clear_bss_start>

00000152 <.do_clear_bss_loop>:
 152:	1d 92       	st	X+, r1

00000154 <.do_clear_bss_start>:
 154:	a4 38       	cpi	r26, 0x84	; 132
 156:	b1 07       	cpc	r27, r17
 158:	e1 f7       	brne	.-8      	; 0x152 <.do_clear_bss_loop>
 15a:	76 d0       	rcall	.+236    	; 0x248 <main>
 15c:	7d c6       	rjmp	.+3322   	; 0xe58 <_exit>

0000015e <__bad_interrupt>:
 15e:	50 cf       	rjmp	.-352    	; 0x0 <__vectors>

00000160 <EVENT_USB_Device_Connect>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
 160:	8b b1       	in	r24, 0x0b	; 11
 162:	8f 70       	andi	r24, 0x0F	; 15
 164:	80 6a       	ori	r24, 0xA0	; 160
 166:	8b b9       	out	0x0b, r24	; 11

/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_Connect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
}
 168:	08 95       	ret

0000016a <EVENT_USB_Device_Disconnect>:
 16a:	8b b1       	in	r24, 0x0b	; 11
 16c:	8f 70       	andi	r24, 0x0F	; 15
 16e:	80 61       	ori	r24, 0x10	; 16
 170:	8b b9       	out	0x0b, r24	; 11

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
}
 172:	08 95       	ret

00000174 <EVENT_USB_Device_ControlRequest>:
}

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	CDC_Device_ProcessControlRequest(&VirtualSerial_CDC_Interface);
 174:	82 e5       	ldi	r24, 0x52	; 82
 176:	91 e0       	ldi	r25, 0x01	; 1
}
 178:	a8 c5       	rjmp	.+2896   	; 0xcca <CDC_Device_ProcessControlRequest>

0000017a <EVENT_USB_Device_ConfigurationChanged>:
/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
	bool ConfigSuccess = true;

	ConfigSuccess &= CDC_Device_ConfigureEndpoints(&VirtualSerial_CDC_Interface);
 17a:	82 e5       	ldi	r24, 0x52	; 82
 17c:	91 e0       	ldi	r25, 0x01	; 1
 17e:	55 d5       	rcall	.+2730   	; 0xc2a <CDC_Device_ConfigureEndpoints>

	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
 180:	80 fd       	sbrc	r24, 0
 182:	02 c0       	rjmp	.+4      	; 0x188 <EVENT_USB_Device_ConfigurationChanged+0xe>
 184:	90 e9       	ldi	r25, 0x90	; 144
 186:	01 c0       	rjmp	.+2      	; 0x18a <EVENT_USB_Device_ConfigurationChanged+0x10>
 188:	90 e6       	ldi	r25, 0x60	; 96
 18a:	8b b1       	in	r24, 0x0b	; 11
 18c:	8f 70       	andi	r24, 0x0F	; 15
 18e:	98 2b       	or	r25, r24
 190:	9b b9       	out	0x0b, r25	; 11
}
 192:	08 95       	ret

00000194 <CheckJoystickMovement>:
			}

			static inline uint8_t Joystick_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Joystick_GetStatus(void)
			{
				return (((uint8_t)~PINB & JOY_BMASK) | (((uint8_t)~PINE & JOY_EMASK) >> JOY_PORTE_MASK_SHIFT));
 194:	23 b1       	in	r18, 0x03	; 3
 196:	8c b1       	in	r24, 0x0c	; 12
 198:	80 95       	com	r24
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	80 73       	andi	r24, 0x30	; 48
 19e:	90 70       	andi	r25, 0x00	; 0
 1a0:	95 95       	asr	r25
 1a2:	87 95       	ror	r24
 1a4:	20 95       	com	r18
 1a6:	20 7e       	andi	r18, 0xE0	; 224
 1a8:	28 2b       	or	r18, r24
{
	uint8_t     JoyStatus_LCL = Joystick_GetStatus();
	char*       ReportString  = NULL;
	static bool ActionSent    = false;

	if (JoyStatus_LCL & JOY_UP)
 1aa:	27 fd       	sbrc	r18, 7
 1ac:	17 c0       	rjmp	.+46     	; 0x1dc <CheckJoystickMovement+0x48>
	  ReportString = "Joystick Up\r\n";
	else if (JoyStatus_LCL & JOY_DOWN)
 1ae:	24 ff       	sbrs	r18, 4
 1b0:	03 c0       	rjmp	.+6      	; 0x1b8 <CheckJoystickMovement+0x24>
 1b2:	20 e0       	ldi	r18, 0x00	; 0
 1b4:	31 e0       	ldi	r19, 0x01	; 1
 1b6:	14 c0       	rjmp	.+40     	; 0x1e0 <CheckJoystickMovement+0x4c>
	  ReportString = "Joystick Down\r\n";
	else if (JoyStatus_LCL & JOY_LEFT)
 1b8:	26 ff       	sbrs	r18, 6
 1ba:	03 c0       	rjmp	.+6      	; 0x1c2 <CheckJoystickMovement+0x2e>
 1bc:	20 e1       	ldi	r18, 0x10	; 16
 1be:	31 e0       	ldi	r19, 0x01	; 1
 1c0:	0f c0       	rjmp	.+30     	; 0x1e0 <CheckJoystickMovement+0x4c>
	  ReportString = "Joystick Left\r\n";
	else if (JoyStatus_LCL & JOY_RIGHT)
 1c2:	23 ff       	sbrs	r18, 3
 1c4:	03 c0       	rjmp	.+6      	; 0x1cc <CheckJoystickMovement+0x38>
 1c6:	20 e2       	ldi	r18, 0x20	; 32
 1c8:	31 e0       	ldi	r19, 0x01	; 1
 1ca:	0a c0       	rjmp	.+20     	; 0x1e0 <CheckJoystickMovement+0x4c>
	  ReportString = "Joystick Right\r\n";
	else if (JoyStatus_LCL & JOY_PRESS)
 1cc:	25 ff       	sbrs	r18, 5
 1ce:	03 c0       	rjmp	.+6      	; 0x1d6 <CheckJoystickMovement+0x42>
 1d0:	21 e3       	ldi	r18, 0x31	; 49
 1d2:	31 e0       	ldi	r19, 0x01	; 1
 1d4:	05 c0       	rjmp	.+10     	; 0x1e0 <CheckJoystickMovement+0x4c>
	  ReportString = "Joystick Pressed\r\n";
	else
	  ActionSent = false;
 1d6:	10 92 68 01 	sts	0x0168, r1
 1da:	08 95       	ret
 1dc:	24 e4       	ldi	r18, 0x44	; 68
 1de:	31 e0       	ldi	r19, 0x01	; 1

	if ((ReportString != NULL) && (ActionSent == false))
 1e0:	80 91 68 01 	lds	r24, 0x0168
 1e4:	88 23       	and	r24, r24
 1e6:	39 f4       	brne	.+14     	; 0x1f6 <CheckJoystickMovement+0x62>
	{
		ActionSent = true;
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	80 93 68 01 	sts	0x0168, r24

		/* Write the string to the virtual COM port via the created character stream */
		fputs(ReportString, &USBSerialStream);
 1ee:	c9 01       	movw	r24, r18
 1f0:	69 e6       	ldi	r22, 0x69	; 105
 1f2:	71 e0       	ldi	r23, 0x01	; 1
 1f4:	06 c6       	rjmp	.+3084   	; 0xe02 <fputs>
 1f6:	08 95       	ret

000001f8 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
 1f8:	84 b7       	in	r24, 0x34	; 52
 1fa:	87 7f       	andi	r24, 0xF7	; 247
 1fc:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
 1fe:	88 e1       	ldi	r24, 0x18	; 24
 200:	0f b6       	in	r0, 0x3f	; 63
 202:	f8 94       	cli
 204:	80 93 60 00 	sts	0x0060, r24
 208:	10 92 60 00 	sts	0x0060, r1
 20c:	0f be       	out	0x3f, r0	; 63

	/* Disable clock division */
	clock_prescale_set(clock_div_1);
 20e:	80 e0       	ldi	r24, 0x00	; 0
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	20 e8       	ldi	r18, 0x80	; 128
 214:	0f b6       	in	r0, 0x3f	; 63
 216:	f8 94       	cli
 218:	20 93 61 00 	sts	0x0061, r18
 21c:	80 93 61 00 	sts	0x0061, r24
 220:	0f be       	out	0x3f, r0	; 63

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Joystick_Init(void)
			{
				DDRB  &= ~(JOY_BMASK);
 222:	84 b1       	in	r24, 0x04	; 4
 224:	8f 71       	andi	r24, 0x1F	; 31
 226:	84 b9       	out	0x04, r24	; 4
				DDRE  &= ~(JOY_EMASK);
 228:	8d b1       	in	r24, 0x0d	; 13
 22a:	8f 7c       	andi	r24, 0xCF	; 207
 22c:	8d b9       	out	0x0d, r24	; 13

				PORTB |= JOY_BMASK;
 22e:	85 b1       	in	r24, 0x05	; 5
 230:	80 6e       	ori	r24, 0xE0	; 224
 232:	85 b9       	out	0x05, r24	; 5
				PORTE |= JOY_EMASK;
 234:	8e b1       	in	r24, 0x0e	; 14
 236:	80 63       	ori	r24, 0x30	; 48
 238:	8e b9       	out	0x0e, r24	; 14

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
 23a:	8a b1       	in	r24, 0x0a	; 10
 23c:	80 6f       	ori	r24, 0xF0	; 240
 23e:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
 240:	8b b1       	in	r24, 0x0b	; 11
 242:	8f 70       	andi	r24, 0x0F	; 15
 244:	8b b9       	out	0x0b, r24	; 11

	/* Hardware Initialization */
	Joystick_Init();
	LEDs_Init();
	USB_Init();
}
 246:	13 c1       	rjmp	.+550    	; 0x46e <USB_Init>

00000248 <main>:
/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
	SetupHardware();
 248:	d7 df       	rcall	.-82     	; 0x1f8 <SetupHardware>

	/* Create a regular character stream for the interface so that it can be used with the stdio.h functions */
	CDC_Device_CreateStream(&VirtualSerial_CDC_Interface, &USBSerialStream);
 24a:	82 e5       	ldi	r24, 0x52	; 82
 24c:	91 e0       	ldi	r25, 0x01	; 1
 24e:	69 e6       	ldi	r22, 0x69	; 105
 250:	71 e0       	ldi	r23, 0x01	; 1
 252:	5a d4       	rcall	.+2228   	; 0xb08 <CDC_Device_CreateStream>
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
 254:	8b b1       	in	r24, 0x0b	; 11
 256:	8f 70       	andi	r24, 0x0F	; 15
 258:	80 61       	ori	r24, 0x10	; 16
 25a:	8b b9       	out	0x0b, r24	; 11

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
	sei();
 25c:	78 94       	sei

	for (;;)
	{
		CheckJoystickMovement();
 25e:	9a df       	rcall	.-204    	; 0x194 <CheckJoystickMovement>

		/* Must throw away unused bytes from the host, or it will lock up while waiting for the device */
		CDC_Device_ReceiveByte(&VirtualSerial_CDC_Interface);
 260:	82 e5       	ldi	r24, 0x52	; 82
 262:	91 e0       	ldi	r25, 0x01	; 1
 264:	20 d4       	rcall	.+2112   	; 0xaa6 <CDC_Device_ReceiveByte>

		CDC_Device_USBTask(&VirtualSerial_CDC_Interface);
 266:	82 e5       	ldi	r24, 0x52	; 82
 268:	91 e0       	ldi	r25, 0x01	; 1
 26a:	9b d4       	rcall	.+2358   	; 0xba2 <CDC_Device_USBTask>
		USB_USBTask();
 26c:	09 d4       	rcall	.+2066   	; 0xa80 <USB_USBTask>
 26e:	f7 cf       	rjmp	.-18     	; 0x25e <main+0x16>

00000270 <CALLBACK_USB_GetDescriptor>:
 *  USB host.
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
 270:	da 01       	movw	r26, r20
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
 272:	92 30       	cpi	r25, 0x02	; 2
 274:	49 f0       	breq	.+18     	; 0x288 <CALLBACK_USB_GetDescriptor+0x18>
 276:	93 30       	cpi	r25, 0x03	; 3
 278:	61 f0       	breq	.+24     	; 0x292 <CALLBACK_USB_GetDescriptor+0x22>
 27a:	91 30       	cpi	r25, 0x01	; 1
 27c:	f9 f4       	brne	.+62     	; 0x2bc <CALLBACK_USB_GetDescriptor+0x4c>
 27e:	e8 e9       	ldi	r30, 0x98	; 152
 280:	f0 e0       	ldi	r31, 0x00	; 0
 282:	22 e1       	ldi	r18, 0x12	; 18
 284:	30 e0       	ldi	r19, 0x00	; 0
 286:	1e c0       	rjmp	.+60     	; 0x2c4 <CALLBACK_USB_GetDescriptor+0x54>
 288:	ea ea       	ldi	r30, 0xAA	; 170
 28a:	f0 e0       	ldi	r31, 0x00	; 0
 28c:	2e e3       	ldi	r18, 0x3E	; 62
 28e:	30 e0       	ldi	r19, 0x00	; 0
 290:	19 c0       	rjmp	.+50     	; 0x2c4 <CALLBACK_USB_GetDescriptor+0x54>
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
 292:	81 30       	cpi	r24, 0x01	; 1
 294:	49 f0       	breq	.+18     	; 0x2a8 <CALLBACK_USB_GetDescriptor+0x38>
 296:	81 30       	cpi	r24, 0x01	; 1
 298:	18 f0       	brcs	.+6      	; 0x2a0 <CALLBACK_USB_GetDescriptor+0x30>
 29a:	82 30       	cpi	r24, 0x02	; 2
 29c:	79 f4       	brne	.+30     	; 0x2bc <CALLBACK_USB_GetDescriptor+0x4c>
 29e:	08 c0       	rjmp	.+16     	; 0x2b0 <CALLBACK_USB_GetDescriptor+0x40>
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
 2a0:	e8 ee       	ldi	r30, 0xE8	; 232
 2a2:	f0 e0       	ldi	r31, 0x00	; 0
 2a4:	84 91       	lpm	r24, Z+
 2a6:	07 c0       	rjmp	.+14     	; 0x2b6 <CALLBACK_USB_GetDescriptor+0x46>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
 2a8:	ec ee       	ldi	r30, 0xEC	; 236
 2aa:	f0 e0       	ldi	r31, 0x00	; 0
 2ac:	84 91       	lpm	r24, Z+
 2ae:	03 c0       	rjmp	.+6      	; 0x2b6 <CALLBACK_USB_GetDescriptor+0x46>
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
 2b0:	e6 e0       	ldi	r30, 0x06	; 6
 2b2:	f1 e0       	ldi	r31, 0x01	; 1
 2b4:	84 91       	lpm	r24, Z+
 2b6:	28 2f       	mov	r18, r24
 2b8:	30 e0       	ldi	r19, 0x00	; 0
 2ba:	04 c0       	rjmp	.+8      	; 0x2c4 <CALLBACK_USB_GetDescriptor+0x54>
 2bc:	e0 e0       	ldi	r30, 0x00	; 0
 2be:	f0 e0       	ldi	r31, 0x00	; 0
 2c0:	20 e0       	ldi	r18, 0x00	; 0
 2c2:	30 e0       	ldi	r19, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
 2c4:	ed 93       	st	X+, r30
 2c6:	fc 93       	st	X, r31
	return Size;
}
 2c8:	c9 01       	movw	r24, r18
 2ca:	08 95       	ret

000002cc <Endpoint_ConfigureEndpoint_Prv>:
#endif

bool Endpoint_ConfigureEndpoint_Prv(const uint8_t Number,
                                    const uint8_t UECFG0XData,
                                    const uint8_t UECFG1XData)
{
 2cc:	38 2f       	mov	r19, r24
 2ce:	28 2f       	mov	r18, r24
 2d0:	2c c0       	rjmp	.+88     	; 0x32a <Endpoint_ConfigureEndpoint_Prv+0x5e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 2d2:	20 93 e9 00 	sts	0x00E9, r18
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);
		
		if (EPNum == Number)
 2d6:	23 17       	cp	r18, r19
 2d8:	21 f4       	brne	.+8      	; 0x2e2 <Endpoint_ConfigureEndpoint_Prv+0x16>
 2da:	76 2f       	mov	r23, r22
 2dc:	94 2f       	mov	r25, r20
 2de:	50 e0       	ldi	r21, 0x00	; 0
 2e0:	06 c0       	rjmp	.+12     	; 0x2ee <Endpoint_ConfigureEndpoint_Prv+0x22>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
 2e2:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
 2e6:	90 91 ed 00 	lds	r25, 0x00ED
			UEIENXTemp  = UEIENX;
 2ea:	50 91 f0 00 	lds	r21, 0x00F0
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
 2ee:	91 ff       	sbrs	r25, 1
 2f0:	1b c0       	rjmp	.+54     	; 0x328 <Endpoint_ConfigureEndpoint_Prv+0x5c>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
 2f2:	80 91 eb 00 	lds	r24, 0x00EB
 2f6:	8e 7f       	andi	r24, 0xFE	; 254
 2f8:	80 93 eb 00 	sts	0x00EB, r24
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
 2fc:	80 91 ed 00 	lds	r24, 0x00ED
 300:	8d 7f       	andi	r24, 0xFD	; 253
 302:	80 93 ed 00 	sts	0x00ED, r24
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
 306:	80 91 eb 00 	lds	r24, 0x00EB
 30a:	81 60       	ori	r24, 0x01	; 1
 30c:	80 93 eb 00 	sts	0x00EB, r24

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
 310:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
 314:	90 93 ed 00 	sts	0x00ED, r25
		UEIENX  = UEIENXTemp;
 318:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
 31c:	80 91 ee 00 	lds	r24, 0x00EE
			
		if (!(Endpoint_IsConfigured()))
 320:	87 fd       	sbrc	r24, 7
 322:	02 c0       	rjmp	.+4      	; 0x328 <Endpoint_ConfigureEndpoint_Prv+0x5c>
 324:	80 e0       	ldi	r24, 0x00	; 0
 326:	08 95       	ret
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else	
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
 328:	2f 5f       	subi	r18, 0xFF	; 255
 32a:	27 30       	cpi	r18, 0x07	; 7
 32c:	90 f2       	brcs	.-92     	; 0x2d2 <Endpoint_ConfigureEndpoint_Prv+0x6>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 32e:	30 93 e9 00 	sts	0x00E9, r19
 332:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
 334:	08 95       	ret

00000336 <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
 336:	80 91 7c 01 	lds	r24, 0x017C
 33a:	88 23       	and	r24, r24
 33c:	9c f4       	brge	.+38     	; 0x364 <Endpoint_ClearStatusStage+0x2e>
 33e:	04 c0       	rjmp	.+8      	; 0x348 <Endpoint_ClearStatusStage+0x12>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 340:	80 91 7b 01 	lds	r24, 0x017B
 344:	88 23       	and	r24, r24
 346:	b9 f0       	breq	.+46     	; 0x376 <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 348:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
 34c:	82 ff       	sbrs	r24, 2
 34e:	f8 cf       	rjmp	.-16     	; 0x340 <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 350:	80 91 e8 00 	lds	r24, 0x00E8
 354:	8b 77       	andi	r24, 0x7B	; 123
 356:	80 93 e8 00 	sts	0x00E8, r24
 35a:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 35c:	80 91 7b 01 	lds	r24, 0x017B
 360:	88 23       	and	r24, r24
 362:	49 f0       	breq	.+18     	; 0x376 <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 364:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
 368:	80 ff       	sbrs	r24, 0
 36a:	f8 cf       	rjmp	.-16     	; 0x35c <Endpoint_ClearStatusStage+0x26>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 36c:	80 91 e8 00 	lds	r24, 0x00E8
 370:	8e 77       	andi	r24, 0x7E	; 126
 372:	80 93 e8 00 	sts	0x00E8, r24
 376:	08 95       	ret

00000378 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
 378:	40 91 e4 00 	lds	r20, 0x00E4
 37c:	50 91 e5 00 	lds	r21, 0x00E5
 380:	24 e6       	ldi	r18, 0x64	; 100
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 382:	80 91 ec 00 	lds	r24, 0x00EC
 386:	80 ff       	sbrs	r24, 0
 388:	24 c0       	rjmp	.+72     	; 0x3d2 <Endpoint_WaitUntilReady+0x5a>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 38a:	80 91 e8 00 	lds	r24, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
 38e:	80 fd       	sbrc	r24, 0
 390:	1e c0       	rjmp	.+60     	; 0x3ce <Endpoint_WaitUntilReady+0x56>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}
		
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 392:	80 91 7b 01 	lds	r24, 0x017B

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 396:	88 23       	and	r24, r24
 398:	11 f4       	brne	.+4      	; 0x39e <Endpoint_WaitUntilReady+0x26>
 39a:	82 e0       	ldi	r24, 0x02	; 2
 39c:	08 95       	ret
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 39e:	85 30       	cpi	r24, 0x05	; 5
 3a0:	11 f4       	brne	.+4      	; 0x3a6 <Endpoint_WaitUntilReady+0x2e>
 3a2:	83 e0       	ldi	r24, 0x03	; 3
 3a4:	08 95       	ret
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 3a6:	80 91 eb 00 	lds	r24, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
 3aa:	85 ff       	sbrs	r24, 5
 3ac:	02 c0       	rjmp	.+4      	; 0x3b2 <Endpoint_WaitUntilReady+0x3a>
 3ae:	81 e0       	ldi	r24, 0x01	; 1
 3b0:	08 95       	ret
 3b2:	80 91 e4 00 	lds	r24, 0x00E4
 3b6:	90 91 e5 00 	lds	r25, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
 3ba:	84 17       	cp	r24, r20
 3bc:	95 07       	cpc	r25, r21
 3be:	09 f3       	breq	.-62     	; 0x382 <Endpoint_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
 3c0:	22 23       	and	r18, r18
 3c2:	11 f4       	brne	.+4      	; 0x3c8 <Endpoint_WaitUntilReady+0x50>
 3c4:	84 e0       	ldi	r24, 0x04	; 4
 3c6:	08 95       	ret
 3c8:	21 50       	subi	r18, 0x01	; 1
 3ca:	ac 01       	movw	r20, r24
 3cc:	da cf       	rjmp	.-76     	; 0x382 <Endpoint_WaitUntilReady+0xa>
 3ce:	80 e0       	ldi	r24, 0x00	; 0
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
 3d0:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 3d2:	80 91 e8 00 	lds	r24, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
 3d6:	82 ff       	sbrs	r24, 2
 3d8:	dc cf       	rjmp	.-72     	; 0x392 <Endpoint_WaitUntilReady+0x1a>
 3da:	f9 cf       	rjmp	.-14     	; 0x3ce <Endpoint_WaitUntilReady+0x56>

000003dc <USB_ResetInterface>:

void USB_ResetInterface(void)
{
 3dc:	ef 92       	push	r14
 3de:	ff 92       	push	r15
 3e0:	0f 93       	push	r16
 3e2:	1f 93       	push	r17
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
 3e4:	4d d0       	rcall	.+154    	; 0x480 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
 3e6:	54 d0       	rcall	.+168    	; 0x490 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
 3e8:	08 ed       	ldi	r16, 0xD8	; 216
 3ea:	10 e0       	ldi	r17, 0x00	; 0
 3ec:	f8 01       	movw	r30, r16
 3ee:	80 81       	ld	r24, Z
 3f0:	8f 77       	andi	r24, 0x7F	; 127
 3f2:	80 83       	st	Z, r24
				USBCON |=  (1 << USBE);
 3f4:	80 81       	ld	r24, Z
 3f6:	80 68       	ori	r24, 0x80	; 128
 3f8:	80 83       	st	Z, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
 3fa:	80 81       	ld	r24, Z
 3fc:	8f 7d       	andi	r24, 0xDF	; 223
 3fe:	80 83       	st	Z, r24

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
 400:	e7 ed       	ldi	r30, 0xD7	; 215
 402:	f0 e0       	ldi	r31, 0x00	; 0
 404:	80 81       	ld	r24, Z
 406:	80 68       	ori	r24, 0x80	; 128
 408:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
 40a:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
 40c:	10 92 7b 01 	sts	0x017B, r1
	USB_Device_ConfigurationNumber  = 0;
 410:	10 92 77 01 	sts	0x0177, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
 414:	10 92 79 01 	sts	0x0179, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
 418:	10 92 78 01 	sts	0x0178, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
 41c:	80 ee       	ldi	r24, 0xE0	; 224
 41e:	e8 2e       	mov	r14, r24
 420:	f1 2c       	mov	r15, r1
 422:	f7 01       	movw	r30, r14
 424:	80 81       	ld	r24, Z
 426:	8b 7f       	andi	r24, 0xFB	; 251
 428:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
 42a:	f8 01       	movw	r30, r16
 42c:	80 81       	ld	r24, Z
 42e:	81 60       	ori	r24, 0x01	; 1
 430:	80 83       	st	Z, r24
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
 432:	80 e0       	ldi	r24, 0x00	; 0
 434:	60 e0       	ldi	r22, 0x00	; 0
 436:	42 e0       	ldi	r20, 0x02	; 2
 438:	49 df       	rcall	.-366    	; 0x2cc <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 43a:	e1 ee       	ldi	r30, 0xE1	; 225
 43c:	f0 e0       	ldi	r31, 0x00	; 0
 43e:	80 81       	ld	r24, Z
 440:	8e 7f       	andi	r24, 0xFE	; 254
 442:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 444:	e2 ee       	ldi	r30, 0xE2	; 226
 446:	f0 e0       	ldi	r31, 0x00	; 0
 448:	80 81       	ld	r24, Z
 44a:	81 60       	ori	r24, 0x01	; 1
 44c:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
 44e:	80 81       	ld	r24, Z
 450:	88 60       	ori	r24, 0x08	; 8
 452:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
 454:	f7 01       	movw	r30, r14
 456:	80 81       	ld	r24, Z
 458:	8e 7f       	andi	r24, 0xFE	; 254
 45a:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
 45c:	f8 01       	movw	r30, r16
 45e:	80 81       	ld	r24, Z
 460:	80 61       	ori	r24, 0x10	; 16
 462:	80 83       	st	Z, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
 464:	1f 91       	pop	r17
 466:	0f 91       	pop	r16
 468:	ff 90       	pop	r15
 46a:	ef 90       	pop	r14
 46c:	08 95       	ret

0000046e <USB_Init>:

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
 46e:	e7 ed       	ldi	r30, 0xD7	; 215
 470:	f0 e0       	ldi	r31, 0x00	; 0
 472:	80 81       	ld	r24, Z
 474:	81 60       	ori	r24, 0x01	; 1
 476:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
 478:	81 e0       	ldi	r24, 0x01	; 1
 47a:	80 93 7a 01 	sts	0x017A, r24

	USB_ResetInterface();
}
 47e:	ae cf       	rjmp	.-164    	; 0x3dc <USB_ResetInterface>

00000480 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
 480:	e8 ed       	ldi	r30, 0xD8	; 216
 482:	f0 e0       	ldi	r31, 0x00	; 0
 484:	80 81       	ld	r24, Z
 486:	8c 7f       	andi	r24, 0xFC	; 252
 488:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
 48a:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
 48e:	08 95       	ret

00000490 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
 490:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
 494:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
 498:	08 95       	ret

0000049a <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
 49a:	1f 92       	push	r1
 49c:	0f 92       	push	r0
 49e:	0f b6       	in	r0, 0x3f	; 63
 4a0:	0f 92       	push	r0
 4a2:	0b b6       	in	r0, 0x3b	; 59
 4a4:	0f 92       	push	r0
 4a6:	11 24       	eor	r1, r1
 4a8:	2f 93       	push	r18
 4aa:	3f 93       	push	r19
 4ac:	4f 93       	push	r20
 4ae:	5f 93       	push	r21
 4b0:	6f 93       	push	r22
 4b2:	7f 93       	push	r23
 4b4:	8f 93       	push	r24
 4b6:	9f 93       	push	r25
 4b8:	af 93       	push	r26
 4ba:	bf 93       	push	r27
 4bc:	ef 93       	push	r30
 4be:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
 4c0:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
 4c4:	82 ff       	sbrs	r24, 2
 4c6:	0a c0       	rjmp	.+20     	; 0x4dc <__vector_10+0x42>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
 4c8:	80 91 e2 00 	lds	r24, 0x00E2
 4cc:	82 ff       	sbrs	r24, 2
 4ce:	06 c0       	rjmp	.+12     	; 0x4dc <__vector_10+0x42>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
 4d0:	80 91 e1 00 	lds	r24, 0x00E1
 4d4:	8b 7f       	andi	r24, 0xFB	; 251
 4d6:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
 4da:	d1 d2       	rcall	.+1442   	; 0xa7e <USB_Event_Stub>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
 4dc:	80 91 da 00 	lds	r24, 0x00DA
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
 4e0:	80 ff       	sbrs	r24, 0
 4e2:	1d c0       	rjmp	.+58     	; 0x51e <__vector_10+0x84>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
 4e4:	80 91 d8 00 	lds	r24, 0x00D8
 4e8:	80 ff       	sbrs	r24, 0
 4ea:	19 c0       	rjmp	.+50     	; 0x51e <__vector_10+0x84>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
 4ec:	80 91 da 00 	lds	r24, 0x00DA
 4f0:	8e 7f       	andi	r24, 0xFE	; 254
 4f2:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
 4f6:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
 4fa:	80 ff       	sbrs	r24, 0
 4fc:	0c c0       	rjmp	.+24     	; 0x516 <__vector_10+0x7c>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 4fe:	8c e0       	ldi	r24, 0x0C	; 12
 500:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 502:	8e e0       	ldi	r24, 0x0E	; 14
 504:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
 506:	09 b4       	in	r0, 0x29	; 41
 508:	00 fe       	sbrs	r0, 0
 50a:	fd cf       	rjmp	.-6      	; 0x506 <__vector_10+0x6c>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
 50c:	81 e0       	ldi	r24, 0x01	; 1
 50e:	80 93 7b 01 	sts	0x017B, r24
			EVENT_USB_Device_Connect();
 512:	26 de       	rcall	.-948    	; 0x160 <EVENT_USB_Device_Connect>
 514:	04 c0       	rjmp	.+8      	; 0x51e <__vector_10+0x84>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
 516:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
 518:	10 92 7b 01 	sts	0x017B, r1
			EVENT_USB_Device_Disconnect();
 51c:	26 de       	rcall	.-948    	; 0x16a <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
 51e:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
 522:	80 ff       	sbrs	r24, 0
 524:	18 c0       	rjmp	.+48     	; 0x556 <__vector_10+0xbc>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
 526:	80 91 e2 00 	lds	r24, 0x00E2
 52a:	80 ff       	sbrs	r24, 0
 52c:	14 c0       	rjmp	.+40     	; 0x556 <__vector_10+0xbc>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 52e:	80 91 e2 00 	lds	r24, 0x00E2
 532:	8e 7f       	andi	r24, 0xFE	; 254
 534:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 538:	80 91 e2 00 	lds	r24, 0x00E2
 53c:	80 61       	ori	r24, 0x10	; 16
 53e:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON  |=  (1 << FRZCLK);
 542:	80 91 d8 00 	lds	r24, 0x00D8
 546:	80 62       	ori	r24, 0x20	; 32
 548:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
 54c:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
 54e:	85 e0       	ldi	r24, 0x05	; 5
 550:	80 93 7b 01 	sts	0x017B, r24
		EVENT_USB_Device_Suspend();
 554:	94 d2       	rcall	.+1320   	; 0xa7e <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
 556:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
 55a:	84 ff       	sbrs	r24, 4
 55c:	2d c0       	rjmp	.+90     	; 0x5b8 <__vector_10+0x11e>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
 55e:	80 91 e2 00 	lds	r24, 0x00E2
 562:	84 ff       	sbrs	r24, 4
 564:	29 c0       	rjmp	.+82     	; 0x5b8 <__vector_10+0x11e>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 566:	8c e0       	ldi	r24, 0x0C	; 12
 568:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 56a:	8e e0       	ldi	r24, 0x0E	; 14
 56c:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 56e:	09 b4       	in	r0, 0x29	; 41
 570:	00 fe       	sbrs	r0, 0
 572:	fd cf       	rjmp	.-6      	; 0x56e <__vector_10+0xd4>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
 574:	80 91 d8 00 	lds	r24, 0x00D8
 578:	8f 7d       	andi	r24, 0xDF	; 223
 57a:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
 57e:	80 91 e1 00 	lds	r24, 0x00E1
 582:	8f 7e       	andi	r24, 0xEF	; 239
 584:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
 588:	80 91 e2 00 	lds	r24, 0x00E2
 58c:	8f 7e       	andi	r24, 0xEF	; 239
 58e:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 592:	80 91 e2 00 	lds	r24, 0x00E2
 596:	81 60       	ori	r24, 0x01	; 1
 598:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
 59c:	80 91 77 01 	lds	r24, 0x0177
 5a0:	88 23       	and	r24, r24
 5a2:	31 f4       	brne	.+12     	; 0x5b0 <__vector_10+0x116>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 5a4:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 5a8:	87 fd       	sbrc	r24, 7
 5aa:	02 c0       	rjmp	.+4      	; 0x5b0 <__vector_10+0x116>
 5ac:	81 e0       	ldi	r24, 0x01	; 1
 5ae:	01 c0       	rjmp	.+2      	; 0x5b2 <__vector_10+0x118>
 5b0:	84 e0       	ldi	r24, 0x04	; 4
 5b2:	80 93 7b 01 	sts	0x017B, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
 5b6:	63 d2       	rcall	.+1222   	; 0xa7e <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
 5b8:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
 5bc:	83 ff       	sbrs	r24, 3
 5be:	22 c0       	rjmp	.+68     	; 0x604 <__vector_10+0x16a>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
 5c0:	80 91 e2 00 	lds	r24, 0x00E2
 5c4:	83 ff       	sbrs	r24, 3
 5c6:	1e c0       	rjmp	.+60     	; 0x604 <__vector_10+0x16a>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
 5c8:	80 91 e1 00 	lds	r24, 0x00E1
 5cc:	87 7f       	andi	r24, 0xF7	; 247
 5ce:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
 5d2:	82 e0       	ldi	r24, 0x02	; 2
 5d4:	80 93 7b 01 	sts	0x017B, r24
		USB_Device_ConfigurationNumber = 0;
 5d8:	10 92 77 01 	sts	0x0177, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 5dc:	80 91 e1 00 	lds	r24, 0x00E1
 5e0:	8e 7f       	andi	r24, 0xFE	; 254
 5e2:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 5e6:	80 91 e2 00 	lds	r24, 0x00E2
 5ea:	8e 7f       	andi	r24, 0xFE	; 254
 5ec:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 5f0:	80 91 e2 00 	lds	r24, 0x00E2
 5f4:	80 61       	ori	r24, 0x10	; 16
 5f6:	80 93 e2 00 	sts	0x00E2, r24
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
 5fa:	80 e0       	ldi	r24, 0x00	; 0
 5fc:	60 e0       	ldi	r22, 0x00	; 0
 5fe:	42 e0       	ldi	r20, 0x02	; 2
 600:	65 de       	rcall	.-822    	; 0x2cc <Endpoint_ConfigureEndpoint_Prv>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
 602:	3d d2       	rcall	.+1146   	; 0xa7e <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
 604:	ff 91       	pop	r31
 606:	ef 91       	pop	r30
 608:	bf 91       	pop	r27
 60a:	af 91       	pop	r26
 60c:	9f 91       	pop	r25
 60e:	8f 91       	pop	r24
 610:	7f 91       	pop	r23
 612:	6f 91       	pop	r22
 614:	5f 91       	pop	r21
 616:	4f 91       	pop	r20
 618:	3f 91       	pop	r19
 61a:	2f 91       	pop	r18
 61c:	0f 90       	pop	r0
 61e:	0b be       	out	0x3b, r0	; 59
 620:	0f 90       	pop	r0
 622:	0f be       	out	0x3f, r0	; 63
 624:	0f 90       	pop	r0
 626:	1f 90       	pop	r1
 628:	18 95       	reti

0000062a <Endpoint_Write_Control_Stream_LE>:
 62a:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 62c:	40 91 82 01 	lds	r20, 0x0182
 630:	50 91 83 01 	lds	r21, 0x0183
 634:	46 17       	cp	r20, r22
 636:	57 07       	cpc	r21, r23
 638:	18 f4       	brcc	.+6      	; 0x640 <Endpoint_Write_Control_Stream_LE+0x16>
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
 63a:	f9 01       	movw	r30, r18
 63c:	90 e0       	ldi	r25, 0x00	; 0
 63e:	3d c0       	rjmp	.+122    	; 0x6ba <Endpoint_Write_Control_Stream_LE+0x90>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 640:	61 15       	cp	r22, r1
 642:	71 05       	cpc	r23, r1
 644:	11 f0       	breq	.+4      	; 0x64a <Endpoint_Write_Control_Stream_LE+0x20>
 646:	ab 01       	movw	r20, r22
 648:	f8 cf       	rjmp	.-16     	; 0x63a <Endpoint_Write_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 64a:	80 91 e8 00 	lds	r24, 0x00E8
 64e:	8e 77       	andi	r24, 0x7E	; 126
 650:	80 93 e8 00 	sts	0x00E8, r24
 654:	40 e0       	ldi	r20, 0x00	; 0
 656:	50 e0       	ldi	r21, 0x00	; 0
 658:	f0 cf       	rjmp	.-32     	; 0x63a <Endpoint_Write_Control_Stream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 65a:	80 91 7b 01 	lds	r24, 0x017B

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 65e:	88 23       	and	r24, r24
 660:	f1 f1       	breq	.+124    	; 0x6de <Endpoint_Write_Control_Stream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 662:	85 30       	cpi	r24, 0x05	; 5
 664:	f1 f1       	breq	.+124    	; 0x6e2 <Endpoint_Write_Control_Stream_LE+0xb8>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 666:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 66a:	83 ff       	sbrs	r24, 3
 66c:	02 c0       	rjmp	.+4      	; 0x672 <Endpoint_Write_Control_Stream_LE+0x48>
 66e:	81 e0       	ldi	r24, 0x01	; 1
 670:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 672:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
 676:	82 fd       	sbrc	r24, 2
 678:	2c c0       	rjmp	.+88     	; 0x6d2 <Endpoint_Write_Control_Stream_LE+0xa8>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 67a:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
 67e:	80 ff       	sbrs	r24, 0
 680:	1c c0       	rjmp	.+56     	; 0x6ba <Endpoint_Write_Control_Stream_LE+0x90>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
 682:	20 91 f2 00 	lds	r18, 0x00F2
 686:	30 91 f3 00 	lds	r19, 0x00F3
 68a:	07 c0       	rjmp	.+14     	; 0x69a <Endpoint_Write_Control_Stream_LE+0x70>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 68c:	81 91       	ld	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 68e:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
 692:	41 50       	subi	r20, 0x01	; 1
 694:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
 696:	2f 5f       	subi	r18, 0xFF	; 255
 698:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 69a:	41 15       	cp	r20, r1
 69c:	51 05       	cpc	r21, r1
 69e:	19 f0       	breq	.+6      	; 0x6a6 <Endpoint_Write_Control_Stream_LE+0x7c>
 6a0:	28 30       	cpi	r18, 0x08	; 8
 6a2:	31 05       	cpc	r19, r1
 6a4:	98 f3       	brcs	.-26     	; 0x68c <Endpoint_Write_Control_Stream_LE+0x62>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
 6a6:	90 e0       	ldi	r25, 0x00	; 0
 6a8:	28 30       	cpi	r18, 0x08	; 8
 6aa:	31 05       	cpc	r19, r1
 6ac:	09 f4       	brne	.+2      	; 0x6b0 <Endpoint_Write_Control_Stream_LE+0x86>
 6ae:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 6b0:	80 91 e8 00 	lds	r24, 0x00E8
 6b4:	8e 77       	andi	r24, 0x7E	; 126
 6b6:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 6ba:	41 15       	cp	r20, r1
 6bc:	51 05       	cpc	r21, r1
 6be:	69 f6       	brne	.-102    	; 0x65a <Endpoint_Write_Control_Stream_LE+0x30>
 6c0:	99 23       	and	r25, r25
 6c2:	59 f6       	brne	.-106    	; 0x65a <Endpoint_Write_Control_Stream_LE+0x30>
 6c4:	06 c0       	rjmp	.+12     	; 0x6d2 <Endpoint_Write_Control_Stream_LE+0xa8>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 6c6:	80 91 7b 01 	lds	r24, 0x017B

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 6ca:	88 23       	and	r24, r24
 6cc:	41 f0       	breq	.+16     	; 0x6de <Endpoint_Write_Control_Stream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 6ce:	85 30       	cpi	r24, 0x05	; 5
 6d0:	41 f0       	breq	.+16     	; 0x6e2 <Endpoint_Write_Control_Stream_LE+0xb8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 6d2:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 6d6:	82 ff       	sbrs	r24, 2
 6d8:	f6 cf       	rjmp	.-20     	; 0x6c6 <Endpoint_Write_Control_Stream_LE+0x9c>
 6da:	80 e0       	ldi	r24, 0x00	; 0
 6dc:	08 95       	ret
 6de:	82 e0       	ldi	r24, 0x02	; 2
 6e0:	08 95       	ret
 6e2:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 6e4:	08 95       	ret

000006e6 <Endpoint_Write_Control_PStream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
 6e6:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 6e8:	40 91 82 01 	lds	r20, 0x0182
 6ec:	50 91 83 01 	lds	r21, 0x0183
 6f0:	46 17       	cp	r20, r22
 6f2:	57 07       	cpc	r21, r23
 6f4:	18 f4       	brcc	.+6      	; 0x6fc <Endpoint_Write_Control_PStream_LE+0x16>
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
 6f6:	f9 01       	movw	r30, r18
 6f8:	90 e0       	ldi	r25, 0x00	; 0
 6fa:	40 c0       	rjmp	.+128    	; 0x77c <Endpoint_Write_Control_PStream_LE+0x96>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 6fc:	61 15       	cp	r22, r1
 6fe:	71 05       	cpc	r23, r1
 700:	11 f0       	breq	.+4      	; 0x706 <Endpoint_Write_Control_PStream_LE+0x20>
 702:	ab 01       	movw	r20, r22
 704:	f8 cf       	rjmp	.-16     	; 0x6f6 <Endpoint_Write_Control_PStream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 706:	80 91 e8 00 	lds	r24, 0x00E8
 70a:	8e 77       	andi	r24, 0x7E	; 126
 70c:	80 93 e8 00 	sts	0x00E8, r24
 710:	40 e0       	ldi	r20, 0x00	; 0
 712:	50 e0       	ldi	r21, 0x00	; 0
 714:	f0 cf       	rjmp	.-32     	; 0x6f6 <Endpoint_Write_Control_PStream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 716:	80 91 7b 01 	lds	r24, 0x017B

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 71a:	88 23       	and	r24, r24
 71c:	09 f4       	brne	.+2      	; 0x720 <Endpoint_Write_Control_PStream_LE+0x3a>
 71e:	40 c0       	rjmp	.+128    	; 0x7a0 <Endpoint_Write_Control_PStream_LE+0xba>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 720:	85 30       	cpi	r24, 0x05	; 5
 722:	09 f4       	brne	.+2      	; 0x726 <Endpoint_Write_Control_PStream_LE+0x40>
 724:	3f c0       	rjmp	.+126    	; 0x7a4 <Endpoint_Write_Control_PStream_LE+0xbe>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 726:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 72a:	83 ff       	sbrs	r24, 3
 72c:	02 c0       	rjmp	.+4      	; 0x732 <Endpoint_Write_Control_PStream_LE+0x4c>
 72e:	81 e0       	ldi	r24, 0x01	; 1
 730:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 732:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
 736:	82 fd       	sbrc	r24, 2
 738:	2d c0       	rjmp	.+90     	; 0x794 <Endpoint_Write_Control_PStream_LE+0xae>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 73a:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
 73e:	80 ff       	sbrs	r24, 0
 740:	1d c0       	rjmp	.+58     	; 0x77c <Endpoint_Write_Control_PStream_LE+0x96>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
 742:	20 91 f2 00 	lds	r18, 0x00F2
 746:	30 91 f3 00 	lds	r19, 0x00F3
 74a:	08 c0       	rjmp	.+16     	; 0x75c <Endpoint_Write_Control_PStream_LE+0x76>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 74c:	84 91       	lpm	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 74e:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
 752:	31 96       	adiw	r30, 0x01	; 1
				Length--;
 754:	41 50       	subi	r20, 0x01	; 1
 756:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
 758:	2f 5f       	subi	r18, 0xFF	; 255
 75a:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 75c:	41 15       	cp	r20, r1
 75e:	51 05       	cpc	r21, r1
 760:	19 f0       	breq	.+6      	; 0x768 <Endpoint_Write_Control_PStream_LE+0x82>
 762:	28 30       	cpi	r18, 0x08	; 8
 764:	31 05       	cpc	r19, r1
 766:	90 f3       	brcs	.-28     	; 0x74c <Endpoint_Write_Control_PStream_LE+0x66>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
 768:	90 e0       	ldi	r25, 0x00	; 0
 76a:	28 30       	cpi	r18, 0x08	; 8
 76c:	31 05       	cpc	r19, r1
 76e:	09 f4       	brne	.+2      	; 0x772 <Endpoint_Write_Control_PStream_LE+0x8c>
 770:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 772:	80 91 e8 00 	lds	r24, 0x00E8
 776:	8e 77       	andi	r24, 0x7E	; 126
 778:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 77c:	41 15       	cp	r20, r1
 77e:	51 05       	cpc	r21, r1
 780:	51 f6       	brne	.-108    	; 0x716 <Endpoint_Write_Control_PStream_LE+0x30>
 782:	99 23       	and	r25, r25
 784:	41 f6       	brne	.-112    	; 0x716 <Endpoint_Write_Control_PStream_LE+0x30>
 786:	06 c0       	rjmp	.+12     	; 0x794 <Endpoint_Write_Control_PStream_LE+0xae>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 788:	80 91 7b 01 	lds	r24, 0x017B

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 78c:	88 23       	and	r24, r24
 78e:	41 f0       	breq	.+16     	; 0x7a0 <Endpoint_Write_Control_PStream_LE+0xba>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 790:	85 30       	cpi	r24, 0x05	; 5
 792:	41 f0       	breq	.+16     	; 0x7a4 <Endpoint_Write_Control_PStream_LE+0xbe>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 794:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 798:	82 ff       	sbrs	r24, 2
 79a:	f6 cf       	rjmp	.-20     	; 0x788 <Endpoint_Write_Control_PStream_LE+0xa2>
 79c:	80 e0       	ldi	r24, 0x00	; 0
 79e:	08 95       	ret
 7a0:	82 e0       	ldi	r24, 0x02	; 2
 7a2:	08 95       	ret
 7a4:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 7a6:	08 95       	ret

000007a8 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
 7a8:	0f 93       	push	r16
 7aa:	1f 93       	push	r17
 7ac:	df 93       	push	r29
 7ae:	cf 93       	push	r28
 7b0:	cd b7       	in	r28, 0x3d	; 61
 7b2:	de b7       	in	r29, 0x3e	; 62
 7b4:	ac 97       	sbiw	r28, 0x2c	; 44
 7b6:	0f b6       	in	r0, 0x3f	; 63
 7b8:	f8 94       	cli
 7ba:	de bf       	out	0x3e, r29	; 62
 7bc:	0f be       	out	0x3f, r0	; 63
 7be:	cd bf       	out	0x3d, r28	; 61
 7c0:	ec e7       	ldi	r30, 0x7C	; 124
 7c2:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 7c4:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
 7c8:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
 7ca:	21 e0       	ldi	r18, 0x01	; 1
 7cc:	e4 38       	cpi	r30, 0x84	; 132
 7ce:	f2 07       	cpc	r31, r18
 7d0:	c9 f7       	brne	.-14     	; 0x7c4 <USB_Device_ProcessControlRequest+0x1c>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
 7d2:	d0 dc       	rcall	.-1632   	; 0x174 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 7d4:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
 7d8:	83 ff       	sbrs	r24, 3
 7da:	38 c1       	rjmp	.+624    	; 0xa4c <USB_Device_ProcessControlRequest+0x2a4>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
 7dc:	80 91 7c 01 	lds	r24, 0x017C

		switch (USB_ControlRequest.bRequest)
 7e0:	30 91 7d 01 	lds	r19, 0x017D
 7e4:	35 30       	cpi	r19, 0x05	; 5
 7e6:	09 f4       	brne	.+2      	; 0x7ea <USB_Device_ProcessControlRequest+0x42>
 7e8:	87 c0       	rjmp	.+270    	; 0x8f8 <USB_Device_ProcessControlRequest+0x150>
 7ea:	36 30       	cpi	r19, 0x06	; 6
 7ec:	40 f4       	brcc	.+16     	; 0x7fe <USB_Device_ProcessControlRequest+0x56>
 7ee:	31 30       	cpi	r19, 0x01	; 1
 7f0:	c9 f1       	breq	.+114    	; 0x864 <USB_Device_ProcessControlRequest+0xbc>
 7f2:	31 30       	cpi	r19, 0x01	; 1
 7f4:	70 f0       	brcs	.+28     	; 0x812 <USB_Device_ProcessControlRequest+0x6a>
 7f6:	33 30       	cpi	r19, 0x03	; 3
 7f8:	09 f0       	breq	.+2      	; 0x7fc <USB_Device_ProcessControlRequest+0x54>
 7fa:	28 c1       	rjmp	.+592    	; 0xa4c <USB_Device_ProcessControlRequest+0x2a4>
 7fc:	33 c0       	rjmp	.+102    	; 0x864 <USB_Device_ProcessControlRequest+0xbc>
 7fe:	38 30       	cpi	r19, 0x08	; 8
 800:	09 f4       	brne	.+2      	; 0x804 <USB_Device_ProcessControlRequest+0x5c>
 802:	f6 c0       	rjmp	.+492    	; 0x9f0 <USB_Device_ProcessControlRequest+0x248>
 804:	39 30       	cpi	r19, 0x09	; 9
 806:	09 f4       	brne	.+2      	; 0x80a <USB_Device_ProcessControlRequest+0x62>
 808:	05 c1       	rjmp	.+522    	; 0xa14 <USB_Device_ProcessControlRequest+0x26c>
 80a:	36 30       	cpi	r19, 0x06	; 6
 80c:	09 f0       	breq	.+2      	; 0x810 <USB_Device_ProcessControlRequest+0x68>
 80e:	1e c1       	rjmp	.+572    	; 0xa4c <USB_Device_ProcessControlRequest+0x2a4>
 810:	97 c0       	rjmp	.+302    	; 0x940 <USB_Device_ProcessControlRequest+0x198>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 812:	80 38       	cpi	r24, 0x80	; 128
 814:	21 f0       	breq	.+8      	; 0x81e <USB_Device_ProcessControlRequest+0x76>
 816:	82 38       	cpi	r24, 0x82	; 130
 818:	09 f0       	breq	.+2      	; 0x81c <USB_Device_ProcessControlRequest+0x74>
 81a:	18 c1       	rjmp	.+560    	; 0xa4c <USB_Device_ProcessControlRequest+0x2a4>
 81c:	08 c0       	rjmp	.+16     	; 0x82e <USB_Device_ProcessControlRequest+0x86>
 81e:	90 91 78 01 	lds	r25, 0x0178
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
 822:	80 91 79 01 	lds	r24, 0x0179
 826:	88 23       	and	r24, r24
 828:	99 f0       	breq	.+38     	; 0x850 <USB_Device_ProcessControlRequest+0xa8>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
 82a:	92 60       	ori	r25, 0x02	; 2
 82c:	11 c0       	rjmp	.+34     	; 0x850 <USB_Device_ProcessControlRequest+0xa8>
			#endif
			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 82e:	80 91 80 01 	lds	r24, 0x0180
 832:	87 70       	andi	r24, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 834:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 838:	80 91 eb 00 	lds	r24, 0x00EB

			CurrentStatus = Endpoint_IsStalled();
 83c:	90 e0       	ldi	r25, 0x00	; 0
 83e:	25 e0       	ldi	r18, 0x05	; 5
 840:	96 95       	lsr	r25
 842:	87 95       	ror	r24
 844:	2a 95       	dec	r18
 846:	e1 f7       	brne	.-8      	; 0x840 <USB_Device_ProcessControlRequest+0x98>
 848:	98 2f       	mov	r25, r24
 84a:	91 70       	andi	r25, 0x01	; 1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 84c:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 850:	80 91 e8 00 	lds	r24, 0x00E8
 854:	87 7f       	andi	r24, 0xF7	; 247
 856:	80 93 e8 00 	sts	0x00E8, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
 85a:	90 93 f1 00 	sts	0x00F1, r25
				UEDATX = (Data >> 8);
 85e:	10 92 f1 00 	sts	0x00F1, r1
 862:	d1 c0       	rjmp	.+418    	; 0xa06 <USB_Device_ProcessControlRequest+0x25e>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 864:	88 23       	and	r24, r24
 866:	19 f0       	breq	.+6      	; 0x86e <USB_Device_ProcessControlRequest+0xc6>
 868:	82 30       	cpi	r24, 0x02	; 2
 86a:	09 f0       	breq	.+2      	; 0x86e <USB_Device_ProcessControlRequest+0xc6>
 86c:	ef c0       	rjmp	.+478    	; 0xa4c <USB_Device_ProcessControlRequest+0x2a4>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
 86e:	90 e0       	ldi	r25, 0x00	; 0
 870:	8f 71       	andi	r24, 0x1F	; 31
 872:	90 70       	andi	r25, 0x00	; 0
 874:	00 97       	sbiw	r24, 0x00	; 0
 876:	21 f0       	breq	.+8      	; 0x880 <USB_Device_ProcessControlRequest+0xd8>
 878:	02 97       	sbiw	r24, 0x02	; 2
 87a:	09 f0       	breq	.+2      	; 0x87e <USB_Device_ProcessControlRequest+0xd6>
 87c:	e7 c0       	rjmp	.+462    	; 0xa4c <USB_Device_ProcessControlRequest+0x2a4>
 87e:	0c c0       	rjmp	.+24     	; 0x898 <USB_Device_ProcessControlRequest+0xf0>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
 880:	80 91 7e 01 	lds	r24, 0x017E
 884:	81 30       	cpi	r24, 0x01	; 1
 886:	09 f0       	breq	.+2      	; 0x88a <USB_Device_ProcessControlRequest+0xe2>
 888:	e1 c0       	rjmp	.+450    	; 0xa4c <USB_Device_ProcessControlRequest+0x2a4>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
 88a:	10 92 79 01 	sts	0x0179, r1
 88e:	33 30       	cpi	r19, 0x03	; 3
 890:	69 f5       	brne	.+90     	; 0x8ec <USB_Device_ProcessControlRequest+0x144>
 892:	80 93 79 01 	sts	0x0179, r24
 896:	2a c0       	rjmp	.+84     	; 0x8ec <USB_Device_ProcessControlRequest+0x144>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
 898:	80 91 7e 01 	lds	r24, 0x017E
 89c:	88 23       	and	r24, r24
 89e:	31 f5       	brne	.+76     	; 0x8ec <USB_Device_ProcessControlRequest+0x144>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 8a0:	20 91 80 01 	lds	r18, 0x0180
 8a4:	27 70       	andi	r18, 0x07	; 7

				if (EndpointIndex == ENDPOINT_CONTROLEP)
 8a6:	09 f4       	brne	.+2      	; 0x8aa <USB_Device_ProcessControlRequest+0x102>
 8a8:	d1 c0       	rjmp	.+418    	; 0xa4c <USB_Device_ProcessControlRequest+0x2a4>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 8aa:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
 8ae:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
 8b2:	80 ff       	sbrs	r24, 0
 8b4:	1b c0       	rjmp	.+54     	; 0x8ec <USB_Device_ProcessControlRequest+0x144>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
 8b6:	33 30       	cpi	r19, 0x03	; 3
 8b8:	21 f4       	brne	.+8      	; 0x8c2 <USB_Device_ProcessControlRequest+0x11a>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 8ba:	80 91 eb 00 	lds	r24, 0x00EB
 8be:	80 62       	ori	r24, 0x20	; 32
 8c0:	13 c0       	rjmp	.+38     	; 0x8e8 <USB_Device_ProcessControlRequest+0x140>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
 8c2:	80 91 eb 00 	lds	r24, 0x00EB
 8c6:	80 61       	ori	r24, 0x10	; 16
 8c8:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
 8cc:	81 e0       	ldi	r24, 0x01	; 1
 8ce:	90 e0       	ldi	r25, 0x00	; 0
 8d0:	02 c0       	rjmp	.+4      	; 0x8d6 <USB_Device_ProcessControlRequest+0x12e>
 8d2:	88 0f       	add	r24, r24
 8d4:	99 1f       	adc	r25, r25
 8d6:	2a 95       	dec	r18
 8d8:	e2 f7       	brpl	.-8      	; 0x8d2 <USB_Device_ProcessControlRequest+0x12a>
 8da:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
 8de:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
 8e2:	80 91 eb 00 	lds	r24, 0x00EB
 8e6:	88 60       	ori	r24, 0x08	; 8
 8e8:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 8ec:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 8f0:	80 91 e8 00 	lds	r24, 0x00E8
 8f4:	87 7f       	andi	r24, 0xF7	; 247
 8f6:	8a c0       	rjmp	.+276    	; 0xa0c <USB_Device_ProcessControlRequest+0x264>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 8f8:	88 23       	and	r24, r24
 8fa:	09 f0       	breq	.+2      	; 0x8fe <USB_Device_ProcessControlRequest+0x156>
 8fc:	a7 c0       	rjmp	.+334    	; 0xa4c <USB_Device_ProcessControlRequest+0x2a4>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t    DeviceAddress    = (USB_ControlRequest.wValue & 0x7F);
 8fe:	10 91 7e 01 	lds	r17, 0x017E
 902:	1f 77       	andi	r17, 0x7F	; 127
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 904:	0f b7       	in	r16, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 906:	f8 94       	cli
 908:	80 91 e8 00 	lds	r24, 0x00E8
 90c:	87 7f       	andi	r24, 0xF7	; 247
 90e:	80 93 e8 00 	sts	0x00E8, r24
	uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
	GlobalInterruptDisable();
				
	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
 912:	11 dd       	rcall	.-1502   	; 0x336 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 914:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
 918:	80 ff       	sbrs	r24, 0
 91a:	fc cf       	rjmp	.-8      	; 0x914 <USB_Device_ProcessControlRequest+0x16c>
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				uint8_t Temp = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
 91c:	80 91 e3 00 	lds	r24, 0x00E3
 920:	80 78       	andi	r24, 0x80	; 128
 922:	81 2b       	or	r24, r17

				UDADDR = Temp;
 924:	80 93 e3 00 	sts	0x00E3, r24
				UDADDR = Temp | (1 << ADDEN);
 928:	80 68       	ori	r24, 0x80	; 128
 92a:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_SetDeviceAddress(DeviceAddress);
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
 92e:	11 23       	and	r17, r17
 930:	11 f4       	brne	.+4      	; 0x936 <USB_Device_ProcessControlRequest+0x18e>
 932:	82 e0       	ldi	r24, 0x02	; 2
 934:	01 c0       	rjmp	.+2      	; 0x938 <USB_Device_ProcessControlRequest+0x190>
 936:	83 e0       	ldi	r24, 0x03	; 3
 938:	80 93 7b 01 	sts	0x017B, r24
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
 93c:	0f bf       	out	0x3f, r16	; 63
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;				
				#endif
				
				GCC_MEMORY_BARRIER();
 93e:	86 c0       	rjmp	.+268    	; 0xa4c <USB_Device_ProcessControlRequest+0x2a4>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 940:	80 58       	subi	r24, 0x80	; 128
 942:	82 30       	cpi	r24, 0x02	; 2
 944:	08 f0       	brcs	.+2      	; 0x948 <USB_Device_ProcessControlRequest+0x1a0>
 946:	82 c0       	rjmp	.+260    	; 0xa4c <USB_Device_ProcessControlRequest+0x2a4>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
 948:	80 91 7e 01 	lds	r24, 0x017E
 94c:	90 91 7f 01 	lds	r25, 0x017F
 950:	23 e0       	ldi	r18, 0x03	; 3
 952:	8c 3d       	cpi	r24, 0xDC	; 220
 954:	92 07       	cpc	r25, r18
 956:	09 f0       	breq	.+2      	; 0x95a <USB_Device_ProcessControlRequest+0x1b2>
 958:	33 c0       	rjmp	.+102    	; 0x9c0 <USB_Device_ProcessControlRequest+0x218>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
 95a:	83 e0       	ldi	r24, 0x03	; 3
 95c:	8c 83       	std	Y+4, r24	; 0x04
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
 95e:	8a e2       	ldi	r24, 0x2A	; 42
 960:	8b 83       	std	Y+3, r24	; 0x03
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 962:	7f b7       	in	r23, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 964:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
 966:	de 01       	movw	r26, r28
 968:	15 96       	adiw	r26, 0x05	; 5
 96a:	6e e0       	ldi	r22, 0x0E	; 14
 96c:	40 e0       	ldi	r20, 0x00	; 0
 96e:	50 e0       	ldi	r21, 0x00	; 0
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
 970:	11 e2       	ldi	r17, 0x21	; 33
 972:	e6 2f       	mov	r30, r22
 974:	f0 e0       	ldi	r31, 0x00	; 0
 976:	10 93 57 00 	sts	0x0057, r17
 97a:	84 91       	lpm	r24, Z+

					if (SerialCharNum & 0x01)
 97c:	40 ff       	sbrs	r20, 0
 97e:	03 c0       	rjmp	.+6      	; 0x986 <USB_Device_ProcessControlRequest+0x1de>
					{
						SerialByte >>= 4;
 980:	82 95       	swap	r24
 982:	8f 70       	andi	r24, 0x0F	; 15
						SigReadAddress++;
 984:	6f 5f       	subi	r22, 0xFF	; 255
					}

					SerialByte &= 0x0F;
 986:	8f 70       	andi	r24, 0x0F	; 15
 988:	28 2f       	mov	r18, r24
 98a:	30 e0       	ldi	r19, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
 98c:	8a 30       	cpi	r24, 0x0A	; 10
 98e:	18 f0       	brcs	.+6      	; 0x996 <USB_Device_ProcessControlRequest+0x1ee>
 990:	c9 01       	movw	r24, r18
 992:	c7 96       	adiw	r24, 0x37	; 55
 994:	02 c0       	rjmp	.+4      	; 0x99a <USB_Device_ProcessControlRequest+0x1f2>
 996:	c9 01       	movw	r24, r18
 998:	c0 96       	adiw	r24, 0x30	; 48
 99a:	8d 93       	st	X+, r24
 99c:	9d 93       	st	X+, r25
 99e:	4f 5f       	subi	r20, 0xFF	; 255
 9a0:	5f 4f       	sbci	r21, 0xFF	; 255
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 9a2:	44 31       	cpi	r20, 0x14	; 20
 9a4:	51 05       	cpc	r21, r1
 9a6:	29 f7       	brne	.-54     	; 0x972 <USB_Device_ProcessControlRequest+0x1ca>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
 9a8:	7f bf       	out	0x3f, r23	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 9aa:	80 91 e8 00 	lds	r24, 0x00E8
 9ae:	87 7f       	andi	r24, 0xF7	; 247
 9b0:	80 93 e8 00 	sts	0x00E8, r24
	
	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
 9b4:	ce 01       	movw	r24, r28
 9b6:	03 96       	adiw	r24, 0x03	; 3
 9b8:	6a e2       	ldi	r22, 0x2A	; 42
 9ba:	70 e0       	ldi	r23, 0x00	; 0
 9bc:	36 de       	rcall	.-916    	; 0x62a <Endpoint_Write_Control_Stream_LE>
 9be:	12 c0       	rjmp	.+36     	; 0x9e4 <USB_Device_ProcessControlRequest+0x23c>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
 9c0:	60 91 80 01 	lds	r22, 0x0180
 9c4:	ae 01       	movw	r20, r28
 9c6:	4f 5f       	subi	r20, 0xFF	; 255
 9c8:	5f 4f       	sbci	r21, 0xFF	; 255
 9ca:	52 dc       	rcall	.-1884   	; 0x270 <CALLBACK_USB_GetDescriptor>
 9cc:	bc 01       	movw	r22, r24
 9ce:	00 97       	sbiw	r24, 0x00	; 0
 9d0:	09 f4       	brne	.+2      	; 0x9d4 <USB_Device_ProcessControlRequest+0x22c>
 9d2:	3c c0       	rjmp	.+120    	; 0xa4c <USB_Device_ProcessControlRequest+0x2a4>
 9d4:	80 91 e8 00 	lds	r24, 0x00E8
 9d8:	87 7f       	andi	r24, 0xF7	; 247
 9da:	80 93 e8 00 	sts	0x00E8, r24
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
 9de:	89 81       	ldd	r24, Y+1	; 0x01
 9e0:	9a 81       	ldd	r25, Y+2	; 0x02
 9e2:	81 de       	rcall	.-766    	; 0x6e6 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 9e4:	80 91 e8 00 	lds	r24, 0x00E8
 9e8:	8b 77       	andi	r24, 0x7B	; 123
 9ea:	80 93 e8 00 	sts	0x00E8, r24
 9ee:	2e c0       	rjmp	.+92     	; 0xa4c <USB_Device_ProcessControlRequest+0x2a4>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
 9f0:	80 38       	cpi	r24, 0x80	; 128
 9f2:	61 f5       	brne	.+88     	; 0xa4c <USB_Device_ProcessControlRequest+0x2a4>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 9f4:	80 91 e8 00 	lds	r24, 0x00E8
 9f8:	87 7f       	andi	r24, 0xF7	; 247
 9fa:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
 9fe:	80 91 77 01 	lds	r24, 0x0177
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 a02:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 a06:	80 91 e8 00 	lds	r24, 0x00E8
 a0a:	8e 77       	andi	r24, 0x7E	; 126
 a0c:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
 a10:	92 dc       	rcall	.-1756   	; 0x336 <Endpoint_ClearStatusStage>
 a12:	1c c0       	rjmp	.+56     	; 0xa4c <USB_Device_ProcessControlRequest+0x2a4>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 a14:	88 23       	and	r24, r24
 a16:	d1 f4       	brne	.+52     	; 0xa4c <USB_Device_ProcessControlRequest+0x2a4>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
 a18:	90 91 7e 01 	lds	r25, 0x017E
 a1c:	92 30       	cpi	r25, 0x02	; 2
 a1e:	b0 f4       	brcc	.+44     	; 0xa4c <USB_Device_ProcessControlRequest+0x2a4>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 a20:	80 91 e8 00 	lds	r24, 0x00E8
 a24:	87 7f       	andi	r24, 0xF7	; 247
 a26:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
 a2a:	90 93 77 01 	sts	0x0177, r25

	Endpoint_ClearStatusStage();
 a2e:	83 dc       	rcall	.-1786   	; 0x336 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
 a30:	80 91 77 01 	lds	r24, 0x0177
 a34:	88 23       	and	r24, r24
 a36:	31 f4       	brne	.+12     	; 0xa44 <USB_Device_ProcessControlRequest+0x29c>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 a38:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 a3c:	87 fd       	sbrc	r24, 7
 a3e:	02 c0       	rjmp	.+4      	; 0xa44 <USB_Device_ProcessControlRequest+0x29c>
 a40:	81 e0       	ldi	r24, 0x01	; 1
 a42:	01 c0       	rjmp	.+2      	; 0xa46 <USB_Device_ProcessControlRequest+0x29e>
 a44:	84 e0       	ldi	r24, 0x04	; 4
 a46:	80 93 7b 01 	sts	0x017B, r24

	EVENT_USB_Device_ConfigurationChanged();
 a4a:	97 db       	rcall	.-2258   	; 0x17a <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 a4c:	80 91 e8 00 	lds	r24, 0x00E8

				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
 a50:	83 ff       	sbrs	r24, 3
 a52:	0a c0       	rjmp	.+20     	; 0xa68 <USB_Device_ProcessControlRequest+0x2c0>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 a54:	80 91 eb 00 	lds	r24, 0x00EB
 a58:	80 62       	ori	r24, 0x20	; 32
 a5a:	80 93 eb 00 	sts	0x00EB, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 a5e:	80 91 e8 00 	lds	r24, 0x00E8
 a62:	87 7f       	andi	r24, 0xF7	; 247
 a64:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_StallTransaction();
		Endpoint_ClearSETUP();
	}
}
 a68:	ac 96       	adiw	r28, 0x2c	; 44
 a6a:	0f b6       	in	r0, 0x3f	; 63
 a6c:	f8 94       	cli
 a6e:	de bf       	out	0x3e, r29	; 62
 a70:	0f be       	out	0x3f, r0	; 63
 a72:	cd bf       	out	0x3d, r28	; 61
 a74:	cf 91       	pop	r28
 a76:	df 91       	pop	r29
 a78:	1f 91       	pop	r17
 a7a:	0f 91       	pop	r16
 a7c:	08 95       	ret

00000a7e <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
 a7e:	08 95       	ret

00000a80 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
 a80:	1f 93       	push	r17
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
 a82:	80 91 7b 01 	lds	r24, 0x017B
 a86:	88 23       	and	r24, r24
 a88:	61 f0       	breq	.+24     	; 0xaa2 <USB_USBTask+0x22>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
 a8a:	10 91 e9 00 	lds	r17, 0x00E9
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 a8e:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 a92:	80 91 e8 00 	lds	r24, 0x00E8
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
 a96:	83 ff       	sbrs	r24, 3
 a98:	01 c0       	rjmp	.+2      	; 0xa9c <USB_USBTask+0x1c>
		  USB_Device_ProcessControlRequest();
 a9a:	86 de       	rcall	.-756    	; 0x7a8 <USB_Device_ProcessControlRequest>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
 a9c:	17 70       	andi	r17, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 a9e:	10 93 e9 00 	sts	0x00E9, r17
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
 aa2:	1f 91       	pop	r17
 aa4:	08 95       	ret

00000aa6 <CDC_Device_ReceiveByte>:

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 aa6:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 aa8:	80 91 7b 01 	lds	r24, 0x017B
 aac:	84 30       	cpi	r24, 0x04	; 4
 aae:	41 f5       	brne	.+80     	; 0xb00 <CDC_Device_ReceiveByte+0x5a>
 ab0:	87 85       	ldd	r24, Z+15	; 0x0f
 ab2:	90 89       	ldd	r25, Z+16	; 0x10
 ab4:	a1 89       	ldd	r26, Z+17	; 0x11
 ab6:	b2 89       	ldd	r27, Z+18	; 0x12
 ab8:	00 97       	sbiw	r24, 0x00	; 0
 aba:	a1 05       	cpc	r26, r1
 abc:	b1 05       	cpc	r27, r1
 abe:	01 f1       	breq	.+64     	; 0xb00 <CDC_Device_ReceiveByte+0x5a>
	  return -1;

	int16_t ReceivedByte = -1;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataOUTEndpointNumber);
 ac0:	85 81       	ldd	r24, Z+5	; 0x05
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 ac2:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 ac6:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsOUTReceived())
 aca:	82 ff       	sbrs	r24, 2
 acc:	19 c0       	rjmp	.+50     	; 0xb00 <CDC_Device_ReceiveByte+0x5a>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
 ace:	80 91 f2 00 	lds	r24, 0x00F2
 ad2:	90 91 f3 00 	lds	r25, 0x00F3
	{
		if (Endpoint_BytesInEndpoint())
 ad6:	89 2b       	or	r24, r25
 ad8:	19 f4       	brne	.+6      	; 0xae0 <CDC_Device_ReceiveByte+0x3a>
 ada:	2f ef       	ldi	r18, 0xFF	; 255
 adc:	3f ef       	ldi	r19, 0xFF	; 255
 ade:	04 c0       	rjmp	.+8      	; 0xae8 <CDC_Device_ReceiveByte+0x42>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 ae0:	80 91 f1 00 	lds	r24, 0x00F1
		  ReceivedByte = Endpoint_Read_8();
 ae4:	28 2f       	mov	r18, r24
 ae6:	30 e0       	ldi	r19, 0x00	; 0
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
 ae8:	80 91 f2 00 	lds	r24, 0x00F2
 aec:	90 91 f3 00 	lds	r25, 0x00F3

		if (!(Endpoint_BytesInEndpoint()))
 af0:	89 2b       	or	r24, r25
 af2:	41 f4       	brne	.+16     	; 0xb04 <CDC_Device_ReceiveByte+0x5e>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 af4:	80 91 e8 00 	lds	r24, 0x00E8
 af8:	8b 77       	andi	r24, 0x7B	; 123
 afa:	80 93 e8 00 	sts	0x00E8, r24
 afe:	02 c0       	rjmp	.+4      	; 0xb04 <CDC_Device_ReceiveByte+0x5e>
 b00:	2f ef       	ldi	r18, 0xFF	; 255
 b02:	3f ef       	ldi	r19, 0xFF	; 255
		  Endpoint_ClearOUT();
	}

	return ReceivedByte;
}
 b04:	c9 01       	movw	r24, r18
 b06:	08 95       	ret

00000b08 <CDC_Device_CreateStream>:
}

#if defined(FDEV_SETUP_STREAM)
void CDC_Device_CreateStream(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                             FILE* const Stream)
{
 b08:	fb 01       	movw	r30, r22
	*Stream = (FILE)FDEV_SETUP_STREAM(CDC_Device_putchar, CDC_Device_getchar, _FDEV_SETUP_RW);
 b0a:	2e e0       	ldi	r18, 0x0E	; 14
 b0c:	db 01       	movw	r26, r22
 b0e:	1d 92       	st	X+, r1
 b10:	2a 95       	dec	r18
 b12:	e9 f7       	brne	.-6      	; 0xb0e <CDC_Device_CreateStream+0x6>
 b14:	23 e0       	ldi	r18, 0x03	; 3
 b16:	23 83       	std	Z+3, r18	; 0x03
 b18:	26 e0       	ldi	r18, 0x06	; 6
 b1a:	36 e0       	ldi	r19, 0x06	; 6
 b1c:	31 87       	std	Z+9, r19	; 0x09
 b1e:	20 87       	std	Z+8, r18	; 0x08
 b20:	27 e9       	ldi	r18, 0x97	; 151
 b22:	35 e0       	ldi	r19, 0x05	; 5
 b24:	33 87       	std	Z+11, r19	; 0x0b
 b26:	22 87       	std	Z+10, r18	; 0x0a
	fdev_set_udata(Stream, CDCInterfaceInfo);
 b28:	95 87       	std	Z+13, r25	; 0x0d
 b2a:	84 87       	std	Z+12, r24	; 0x0c
}
 b2c:	08 95       	ret

00000b2e <CDC_Device_getchar>:
	return CDC_Device_SendByte((USB_ClassInfo_CDC_Device_t*)fdev_get_udata(Stream), c) ? _FDEV_ERR : 0;
}

static int CDC_Device_getchar(FILE* Stream)
{
	int16_t ReceivedByte = CDC_Device_ReceiveByte((USB_ClassInfo_CDC_Device_t*)fdev_get_udata(Stream));
 b2e:	fc 01       	movw	r30, r24
 b30:	84 85       	ldd	r24, Z+12	; 0x0c
 b32:	95 85       	ldd	r25, Z+13	; 0x0d
 b34:	b8 df       	rcall	.-144    	; 0xaa6 <CDC_Device_ReceiveByte>
 b36:	9c 01       	movw	r18, r24

	if (ReceivedByte < 0)
 b38:	97 ff       	sbrs	r25, 7
 b3a:	02 c0       	rjmp	.+4      	; 0xb40 <CDC_Device_getchar+0x12>
 b3c:	2e ef       	ldi	r18, 0xFE	; 254
 b3e:	3f ef       	ldi	r19, 0xFF	; 255
	  return _FDEV_EOF;

	return ReceivedByte;
}
 b40:	c9 01       	movw	r24, r18
 b42:	08 95       	ret

00000b44 <CDC_Device_Event_Stub>:
#endif

void CDC_Device_Event_Stub(void)
{

}
 b44:	08 95       	ret

00000b46 <CDC_Device_Flush>:
	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
}

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 b46:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 b48:	80 91 7b 01 	lds	r24, 0x017B
 b4c:	84 30       	cpi	r24, 0x04	; 4
 b4e:	21 f5       	brne	.+72     	; 0xb98 <CDC_Device_Flush+0x52>
 b50:	87 85       	ldd	r24, Z+15	; 0x0f
 b52:	90 89       	ldd	r25, Z+16	; 0x10
 b54:	a1 89       	ldd	r26, Z+17	; 0x11
 b56:	b2 89       	ldd	r27, Z+18	; 0x12
 b58:	00 97       	sbiw	r24, 0x00	; 0
 b5a:	a1 05       	cpc	r26, r1
 b5c:	b1 05       	cpc	r27, r1
 b5e:	e1 f0       	breq	.+56     	; 0xb98 <CDC_Device_Flush+0x52>
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpointNumber);
 b60:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 b62:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
 b66:	80 91 f2 00 	lds	r24, 0x00F2
 b6a:	90 91 f3 00 	lds	r25, 0x00F3

	if (!(Endpoint_BytesInEndpoint()))
 b6e:	89 2b       	or	r24, r25
 b70:	a9 f0       	breq	.+42     	; 0xb9c <CDC_Device_Flush+0x56>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 b72:	90 91 e8 00 	lds	r25, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 b76:	80 91 e8 00 	lds	r24, 0x00E8
 b7a:	8e 77       	andi	r24, 0x7E	; 126
 b7c:	80 93 e8 00 	sts	0x00E8, r24

	bool BankFull = !(Endpoint_IsReadWriteAllowed());

	Endpoint_ClearIN();

	if (BankFull)
 b80:	95 fd       	sbrc	r25, 5
 b82:	0c c0       	rjmp	.+24     	; 0xb9c <CDC_Device_Flush+0x56>
	{
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
 b84:	f9 db       	rcall	.-2062   	; 0x378 <Endpoint_WaitUntilReady>
 b86:	98 2f       	mov	r25, r24
 b88:	88 23       	and	r24, r24
 b8a:	49 f4       	brne	.+18     	; 0xb9e <CDC_Device_Flush+0x58>
 b8c:	80 91 e8 00 	lds	r24, 0x00E8
 b90:	8e 77       	andi	r24, 0x7E	; 126
 b92:	80 93 e8 00 	sts	0x00E8, r24
 b96:	03 c0       	rjmp	.+6      	; 0xb9e <CDC_Device_Flush+0x58>
 b98:	92 e0       	ldi	r25, 0x02	; 2
 b9a:	01 c0       	rjmp	.+2      	; 0xb9e <CDC_Device_Flush+0x58>
 b9c:	90 e0       	ldi	r25, 0x00	; 0

		Endpoint_ClearIN();
	}

	return ENDPOINT_READYWAIT_NoError;
}
 b9e:	89 2f       	mov	r24, r25
 ba0:	08 95       	ret

00000ba2 <CDC_Device_USBTask>:

	return true;
}

void CDC_Device_USBTask(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 ba2:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 ba4:	80 91 7b 01 	lds	r24, 0x017B
 ba8:	84 30       	cpi	r24, 0x04	; 4
 baa:	51 f4       	brne	.+20     	; 0xbc0 <CDC_Device_USBTask+0x1e>
 bac:	87 85       	ldd	r24, Z+15	; 0x0f
 bae:	90 89       	ldd	r25, Z+16	; 0x10
 bb0:	a1 89       	ldd	r26, Z+17	; 0x11
 bb2:	b2 89       	ldd	r27, Z+18	; 0x12
 bb4:	00 97       	sbiw	r24, 0x00	; 0
 bb6:	a1 05       	cpc	r26, r1
 bb8:	b1 05       	cpc	r27, r1
 bba:	11 f0       	breq	.+4      	; 0xbc0 <CDC_Device_USBTask+0x1e>
	  return;

	#if !defined(NO_CLASS_DRIVER_AUTOFLUSH)
	CDC_Device_Flush(CDCInterfaceInfo);
 bbc:	cf 01       	movw	r24, r30
 bbe:	c3 cf       	rjmp	.-122    	; 0xb46 <CDC_Device_Flush>
 bc0:	08 95       	ret

00000bc2 <CDC_Device_SendByte>:
	return Endpoint_Write_Stream_LE(Buffer, Length, NULL);
}

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
 bc2:	1f 93       	push	r17
 bc4:	fc 01       	movw	r30, r24
 bc6:	16 2f       	mov	r17, r22
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 bc8:	80 91 7b 01 	lds	r24, 0x017B
 bcc:	84 30       	cpi	r24, 0x04	; 4
 bce:	d9 f4       	brne	.+54     	; 0xc06 <CDC_Device_SendByte+0x44>
 bd0:	87 85       	ldd	r24, Z+15	; 0x0f
 bd2:	90 89       	ldd	r25, Z+16	; 0x10
 bd4:	a1 89       	ldd	r26, Z+17	; 0x11
 bd6:	b2 89       	ldd	r27, Z+18	; 0x12
 bd8:	00 97       	sbiw	r24, 0x00	; 0
 bda:	a1 05       	cpc	r26, r1
 bdc:	b1 05       	cpc	r27, r1
 bde:	99 f0       	breq	.+38     	; 0xc06 <CDC_Device_SendByte+0x44>
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpointNumber);
 be0:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 be2:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 be6:	80 91 e8 00 	lds	r24, 0x00E8

	if (!(Endpoint_IsReadWriteAllowed()))
 bea:	85 fd       	sbrc	r24, 5
 bec:	08 c0       	rjmp	.+16     	; 0xbfe <CDC_Device_SendByte+0x3c>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 bee:	80 91 e8 00 	lds	r24, 0x00E8
 bf2:	8e 77       	andi	r24, 0x7E	; 126
 bf4:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_ClearIN();

		uint8_t ErrorCode;

		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
 bf8:	bf db       	rcall	.-2178   	; 0x378 <Endpoint_WaitUntilReady>
 bfa:	88 23       	and	r24, r24
 bfc:	29 f4       	brne	.+10     	; 0xc08 <CDC_Device_SendByte+0x46>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 bfe:	10 93 f1 00 	sts	0x00F1, r17
 c02:	80 e0       	ldi	r24, 0x00	; 0
 c04:	01 c0       	rjmp	.+2      	; 0xc08 <CDC_Device_SendByte+0x46>
		  return ErrorCode;
	}

	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
 c06:	82 e0       	ldi	r24, 0x02	; 2
}
 c08:	1f 91       	pop	r17
 c0a:	08 95       	ret

00000c0c <CDC_Device_putchar>:
	fdev_set_udata(Stream, CDCInterfaceInfo);
}

static int CDC_Device_putchar(char c,
                              FILE* Stream)
{
 c0c:	28 2f       	mov	r18, r24
 c0e:	fb 01       	movw	r30, r22
	return CDC_Device_SendByte((USB_ClassInfo_CDC_Device_t*)fdev_get_udata(Stream), c) ? _FDEV_ERR : 0;
 c10:	84 85       	ldd	r24, Z+12	; 0x0c
 c12:	95 85       	ldd	r25, Z+13	; 0x0d
 c14:	62 2f       	mov	r22, r18
 c16:	d5 df       	rcall	.-86     	; 0xbc2 <CDC_Device_SendByte>
 c18:	88 23       	and	r24, r24
 c1a:	19 f4       	brne	.+6      	; 0xc22 <CDC_Device_putchar+0x16>
 c1c:	20 e0       	ldi	r18, 0x00	; 0
 c1e:	30 e0       	ldi	r19, 0x00	; 0
 c20:	02 c0       	rjmp	.+4      	; 0xc26 <CDC_Device_putchar+0x1a>
 c22:	2f ef       	ldi	r18, 0xFF	; 255
 c24:	3f ef       	ldi	r19, 0xFF	; 255
}
 c26:	c9 01       	movw	r24, r18
 c28:	08 95       	ret

00000c2a <CDC_Device_ConfigureEndpoints>:
			break;
	}
}

bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 c2a:	1f 93       	push	r17
 c2c:	cf 93       	push	r28
 c2e:	df 93       	push	r29
 c30:	ec 01       	movw	r28, r24
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));
 c32:	0d 96       	adiw	r24, 0x0d	; 13
 c34:	fc 01       	movw	r30, r24
 c36:	89 e0       	ldi	r24, 0x09	; 9
 c38:	df 01       	movw	r26, r30
 c3a:	1d 92       	st	X+, r1
 c3c:	8a 95       	dec	r24
 c3e:	e9 f7       	brne	.-6      	; 0xc3a <CDC_Device_ConfigureEndpoints+0x10>
 c40:	11 e0       	ldi	r17, 0x01	; 1
		uint16_t Size;
		uint8_t  Type;
		uint8_t  Direction;
		bool     DoubleBanked;

		if (EndpointNum == CDCInterfaceInfo->Config.DataINEndpointNumber)
 c42:	89 81       	ldd	r24, Y+1	; 0x01
 c44:	18 17       	cp	r17, r24
 c46:	29 f4       	brne	.+10     	; 0xc52 <CDC_Device_ConfigureEndpoints+0x28>
		{
			Size         = CDCInterfaceInfo->Config.DataINEndpointSize;
 c48:	6a 81       	ldd	r22, Y+2	; 0x02
 c4a:	7b 81       	ldd	r23, Y+3	; 0x03
			Direction    = ENDPOINT_DIR_IN;
			Type         = EP_TYPE_BULK;
			DoubleBanked = CDCInterfaceInfo->Config.DataINEndpointDoubleBank;
 c4c:	8c 81       	ldd	r24, Y+4	; 0x04
 c4e:	52 e0       	ldi	r21, 0x02	; 2
 c50:	10 c0       	rjmp	.+32     	; 0xc72 <CDC_Device_ConfigureEndpoints+0x48>
		}
		else if (EndpointNum == CDCInterfaceInfo->Config.DataOUTEndpointNumber)
 c52:	8d 81       	ldd	r24, Y+5	; 0x05
 c54:	18 17       	cp	r17, r24
 c56:	31 f4       	brne	.+12     	; 0xc64 <CDC_Device_ConfigureEndpoints+0x3a>
		{
			Size         = CDCInterfaceInfo->Config.DataOUTEndpointSize;
 c58:	6e 81       	ldd	r22, Y+6	; 0x06
 c5a:	7f 81       	ldd	r23, Y+7	; 0x07
			Direction    = ENDPOINT_DIR_OUT;
			Type         = EP_TYPE_BULK;
			DoubleBanked = CDCInterfaceInfo->Config.DataOUTEndpointDoubleBank;
 c5c:	88 85       	ldd	r24, Y+8	; 0x08
 c5e:	52 e0       	ldi	r21, 0x02	; 2
 c60:	30 e0       	ldi	r19, 0x00	; 0
 c62:	08 c0       	rjmp	.+16     	; 0xc74 <CDC_Device_ConfigureEndpoints+0x4a>
		}
		else if (EndpointNum == CDCInterfaceInfo->Config.NotificationEndpointNumber)
 c64:	89 85       	ldd	r24, Y+9	; 0x09
 c66:	18 17       	cp	r17, r24
 c68:	39 f5       	brne	.+78     	; 0xcb8 <CDC_Device_ConfigureEndpoints+0x8e>
		{
			Size         = CDCInterfaceInfo->Config.NotificationEndpointSize;
 c6a:	6a 85       	ldd	r22, Y+10	; 0x0a
 c6c:	7b 85       	ldd	r23, Y+11	; 0x0b
			Direction    = ENDPOINT_DIR_IN;
			Type         = EP_TYPE_INTERRUPT;
			DoubleBanked = CDCInterfaceInfo->Config.NotificationEndpointDoubleBank;
 c6e:	8c 85       	ldd	r24, Y+12	; 0x0c
 c70:	53 e0       	ldi	r21, 0x03	; 3
 c72:	30 e8       	ldi	r19, 0x80	; 128
		else
		{
			continue;
		}

		if (!(Endpoint_ConfigureEndpoint(EndpointNum, Type, Direction, Size,
 c74:	88 23       	and	r24, r24
 c76:	11 f4       	brne	.+4      	; 0xc7c <CDC_Device_ConfigureEndpoints+0x52>
 c78:	40 e0       	ldi	r20, 0x00	; 0
 c7a:	01 c0       	rjmp	.+2      	; 0xc7e <CDC_Device_ConfigureEndpoints+0x54>
 c7c:	44 e0       	ldi	r20, 0x04	; 4
 c7e:	20 e0       	ldi	r18, 0x00	; 0
 c80:	88 e0       	ldi	r24, 0x08	; 8
 c82:	90 e0       	ldi	r25, 0x00	; 0
 c84:	03 c0       	rjmp	.+6      	; 0xc8c <CDC_Device_ConfigureEndpoints+0x62>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
				{
					MaskVal++;
 c86:	2f 5f       	subi	r18, 0xFF	; 255
					CheckBytes <<= 1;
 c88:	88 0f       	add	r24, r24
 c8a:	99 1f       	adc	r25, r25
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
 c8c:	86 17       	cp	r24, r22
 c8e:	97 07       	cpc	r25, r23
 c90:	d0 f3       	brcs	.-12     	; 0xc86 <CDC_Device_ConfigureEndpoints+0x5c>
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
 c92:	85 2f       	mov	r24, r21
 c94:	90 e0       	ldi	r25, 0x00	; 0
 c96:	56 e0       	ldi	r21, 0x06	; 6
 c98:	88 0f       	add	r24, r24
 c9a:	99 1f       	adc	r25, r25
 c9c:	5a 95       	dec	r21
 c9e:	e1 f7       	brne	.-8      	; 0xc98 <CDC_Device_ConfigureEndpoints+0x6e>
 ca0:	60 e0       	ldi	r22, 0x00	; 0
 ca2:	31 11       	cpse	r19, r1
 ca4:	61 e0       	ldi	r22, 0x01	; 1
 ca6:	68 2b       	or	r22, r24
 ca8:	42 60       	ori	r20, 0x02	; 2
 caa:	22 95       	swap	r18
 cac:	20 7f       	andi	r18, 0xF0	; 240
 cae:	42 2b       	or	r20, r18
 cb0:	81 2f       	mov	r24, r17
 cb2:	0c db       	rcall	.-2536   	; 0x2cc <Endpoint_ConfigureEndpoint_Prv>
 cb4:	88 23       	and	r24, r24
 cb6:	29 f0       	breq	.+10     	; 0xcc2 <CDC_Device_ConfigureEndpoints+0x98>

bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));

	for (uint8_t EndpointNum = 1; EndpointNum < ENDPOINT_TOTAL_ENDPOINTS; EndpointNum++)
 cb8:	1f 5f       	subi	r17, 0xFF	; 255
 cba:	17 30       	cpi	r17, 0x07	; 7
 cbc:	09 f0       	breq	.+2      	; 0xcc0 <CDC_Device_ConfigureEndpoints+0x96>
 cbe:	c1 cf       	rjmp	.-126    	; 0xc42 <CDC_Device_ConfigureEndpoints+0x18>
 cc0:	81 e0       	ldi	r24, 0x01	; 1
			return false;
		}
	}

	return true;
}
 cc2:	df 91       	pop	r29
 cc4:	cf 91       	pop	r28
 cc6:	1f 91       	pop	r17
 cc8:	08 95       	ret

00000cca <CDC_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_CDC_DRIVER
#define  __INCLUDE_FROM_CDC_DEVICE_C
#include "CDC.h"

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 cca:	cf 93       	push	r28
 ccc:	df 93       	push	r29
 cce:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 cd0:	80 91 e8 00 	lds	r24, 0x00E8
	if (!(Endpoint_IsSETUPReceived()))
 cd4:	83 ff       	sbrs	r24, 3
 cd6:	92 c0       	rjmp	.+292    	; 0xdfc <CDC_Device_ProcessControlRequest+0x132>
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
 cd8:	88 81       	ld	r24, Y
 cda:	90 e0       	ldi	r25, 0x00	; 0
 cdc:	20 91 80 01 	lds	r18, 0x0180
 ce0:	30 91 81 01 	lds	r19, 0x0181
 ce4:	28 17       	cp	r18, r24
 ce6:	39 07       	cpc	r19, r25
 ce8:	09 f0       	breq	.+2      	; 0xcec <CDC_Device_ProcessControlRequest+0x22>
 cea:	88 c0       	rjmp	.+272    	; 0xdfc <CDC_Device_ProcessControlRequest+0x132>
	  return;

	switch (USB_ControlRequest.bRequest)
 cec:	80 91 7d 01 	lds	r24, 0x017D
 cf0:	81 32       	cpi	r24, 0x21	; 33
 cf2:	69 f0       	breq	.+26     	; 0xd0e <CDC_Device_ProcessControlRequest+0x44>
 cf4:	82 32       	cpi	r24, 0x22	; 34
 cf6:	20 f4       	brcc	.+8      	; 0xd00 <CDC_Device_ProcessControlRequest+0x36>
 cf8:	80 32       	cpi	r24, 0x20	; 32
 cfa:	09 f0       	breq	.+2      	; 0xcfe <CDC_Device_ProcessControlRequest+0x34>
 cfc:	7f c0       	rjmp	.+254    	; 0xdfc <CDC_Device_ProcessControlRequest+0x132>
 cfe:	38 c0       	rjmp	.+112    	; 0xd70 <CDC_Device_ProcessControlRequest+0xa6>
 d00:	82 32       	cpi	r24, 0x22	; 34
 d02:	09 f4       	brne	.+2      	; 0xd06 <CDC_Device_ProcessControlRequest+0x3c>
 d04:	5d c0       	rjmp	.+186    	; 0xdc0 <CDC_Device_ProcessControlRequest+0xf6>
 d06:	83 32       	cpi	r24, 0x23	; 35
 d08:	09 f0       	breq	.+2      	; 0xd0c <CDC_Device_ProcessControlRequest+0x42>
 d0a:	78 c0       	rjmp	.+240    	; 0xdfc <CDC_Device_ProcessControlRequest+0x132>
 d0c:	69 c0       	rjmp	.+210    	; 0xde0 <CDC_Device_ProcessControlRequest+0x116>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
 d0e:	80 91 7c 01 	lds	r24, 0x017C
 d12:	81 3a       	cpi	r24, 0xA1	; 161
 d14:	09 f0       	breq	.+2      	; 0xd18 <CDC_Device_ProcessControlRequest+0x4e>
 d16:	72 c0       	rjmp	.+228    	; 0xdfc <CDC_Device_ProcessControlRequest+0x132>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 d18:	80 91 e8 00 	lds	r24, 0x00E8
 d1c:	87 7f       	andi	r24, 0xF7	; 247
 d1e:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
 d22:	8f 85       	ldd	r24, Y+15	; 0x0f
 d24:	98 89       	ldd	r25, Y+16	; 0x10
 d26:	a9 89       	ldd	r26, Y+17	; 0x11
 d28:	ba 89       	ldd	r27, Y+18	; 0x12
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_LE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_LE(const uint32_t Data)
			{
				UEDATX = (Data &  0xFF);
 d2a:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
 d2e:	29 2f       	mov	r18, r25
 d30:	3a 2f       	mov	r19, r26
 d32:	4b 2f       	mov	r20, r27
 d34:	55 27       	eor	r21, r21
 d36:	20 93 f1 00 	sts	0x00F1, r18
				UEDATX = (Data >> 16);
 d3a:	9d 01       	movw	r18, r26
 d3c:	44 27       	eor	r20, r20
 d3e:	55 27       	eor	r21, r21
 d40:	20 93 f1 00 	sts	0x00F1, r18
				UEDATX = (Data >> 24);
 d44:	8b 2f       	mov	r24, r27
 d46:	99 27       	eor	r25, r25
 d48:	aa 27       	eor	r26, r26
 d4a:	bb 27       	eor	r27, r27
 d4c:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
 d50:	8b 89       	ldd	r24, Y+19	; 0x13
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 d52:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
 d56:	8c 89       	ldd	r24, Y+20	; 0x14
 d58:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
 d5c:	8d 89       	ldd	r24, Y+21	; 0x15
 d5e:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 d62:	80 91 e8 00 	lds	r24, 0x00E8
 d66:	8e 77       	andi	r24, 0x7E	; 126
 d68:	80 93 e8 00 	sts	0x00E8, r24
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
 d6c:	e4 da       	rcall	.-2616   	; 0x336 <Endpoint_ClearStatusStage>
 d6e:	46 c0       	rjmp	.+140    	; 0xdfc <CDC_Device_ProcessControlRequest+0x132>
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 d70:	80 91 7c 01 	lds	r24, 0x017C
 d74:	81 32       	cpi	r24, 0x21	; 33
 d76:	09 f0       	breq	.+2      	; 0xd7a <CDC_Device_ProcessControlRequest+0xb0>
 d78:	41 c0       	rjmp	.+130    	; 0xdfc <CDC_Device_ProcessControlRequest+0x132>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 d7a:	80 91 e8 00 	lds	r24, 0x00E8
 d7e:	87 7f       	andi	r24, 0xF7	; 247
 d80:	80 93 e8 00 	sts	0x00E8, r24
				{
					uint32_t Value;
					uint8_t  Bytes[4];
				} Data;

				Data.Bytes[0] = UEDATX;
 d84:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[1] = UEDATX;
 d88:	90 91 f1 00 	lds	r25, 0x00F1
				Data.Bytes[2] = UEDATX;
 d8c:	20 91 f1 00 	lds	r18, 0x00F1
				Data.Bytes[3] = UEDATX;
 d90:	30 91 f1 00 	lds	r19, 0x00F1
			{
				Endpoint_ClearSETUP();
				CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
 d94:	8f 87       	std	Y+15, r24	; 0x0f
 d96:	98 8b       	std	Y+16, r25	; 0x10
 d98:	29 8b       	std	Y+17, r18	; 0x11
 d9a:	3a 8b       	std	Y+18, r19	; 0x12
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 d9c:	80 91 f1 00 	lds	r24, 0x00F1
				CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
 da0:	8b 8b       	std	Y+19, r24	; 0x13
 da2:	80 91 f1 00 	lds	r24, 0x00F1
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
 da6:	8c 8b       	std	Y+20, r24	; 0x14
 da8:	80 91 f1 00 	lds	r24, 0x00F1
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
 dac:	8d 8b       	std	Y+21, r24	; 0x15
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 dae:	80 91 e8 00 	lds	r24, 0x00E8
 db2:	8b 77       	andi	r24, 0x7B	; 123
 db4:	80 93 e8 00 	sts	0x00E8, r24
				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();
 db8:	be da       	rcall	.-2692   	; 0x336 <Endpoint_ClearStatusStage>

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
 dba:	ce 01       	movw	r24, r28
 dbc:	c3 de       	rcall	.-634    	; 0xb44 <CDC_Device_Event_Stub>
 dbe:	1e c0       	rjmp	.+60     	; 0xdfc <CDC_Device_ProcessControlRequest+0x132>
			}

			break;
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 dc0:	80 91 7c 01 	lds	r24, 0x017C
 dc4:	81 32       	cpi	r24, 0x21	; 33
 dc6:	d1 f4       	brne	.+52     	; 0xdfc <CDC_Device_ProcessControlRequest+0x132>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 dc8:	80 91 e8 00 	lds	r24, 0x00E8
 dcc:	87 7f       	andi	r24, 0xF7	; 247
 dce:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
 dd2:	b1 da       	rcall	.-2718   	; 0x336 <Endpoint_ClearStatusStage>

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
 dd4:	80 91 7e 01 	lds	r24, 0x017E
 dd8:	8d 87       	std	Y+13, r24	; 0x0d

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
 dda:	ce 01       	movw	r24, r28
 ddc:	b3 de       	rcall	.-666    	; 0xb44 <CDC_Device_Event_Stub>
 dde:	0e c0       	rjmp	.+28     	; 0xdfc <CDC_Device_ProcessControlRequest+0x132>
			}

			break;
		case CDC_REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 de0:	80 91 7c 01 	lds	r24, 0x017C
 de4:	81 32       	cpi	r24, 0x21	; 33
 de6:	51 f4       	brne	.+20     	; 0xdfc <CDC_Device_ProcessControlRequest+0x132>
 de8:	80 91 e8 00 	lds	r24, 0x00E8
 dec:	87 7f       	andi	r24, 0xF7	; 247
 dee:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
 df2:	a1 da       	rcall	.-2750   	; 0x336 <Endpoint_ClearStatusStage>

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
 df4:	ce 01       	movw	r24, r28
 df6:	60 91 7e 01 	lds	r22, 0x017E
 dfa:	a4 de       	rcall	.-696    	; 0xb44 <CDC_Device_Event_Stub>
			}

			break;
	}
}
 dfc:	df 91       	pop	r29
 dfe:	cf 91       	pop	r28
 e00:	08 95       	ret

00000e02 <fputs>:
 e02:	ef 92       	push	r14
 e04:	ff 92       	push	r15
 e06:	0f 93       	push	r16
 e08:	1f 93       	push	r17
 e0a:	cf 93       	push	r28
 e0c:	df 93       	push	r29
 e0e:	7c 01       	movw	r14, r24
 e10:	8b 01       	movw	r16, r22
 e12:	db 01       	movw	r26, r22
 e14:	13 96       	adiw	r26, 0x03	; 3
 e16:	8c 91       	ld	r24, X
 e18:	81 fd       	sbrc	r24, 1
 e1a:	03 c0       	rjmp	.+6      	; 0xe22 <fputs+0x20>
 e1c:	cf ef       	ldi	r28, 0xFF	; 255
 e1e:	df ef       	ldi	r29, 0xFF	; 255
 e20:	13 c0       	rjmp	.+38     	; 0xe48 <fputs+0x46>
 e22:	c0 e0       	ldi	r28, 0x00	; 0
 e24:	d0 e0       	ldi	r29, 0x00	; 0
 e26:	0b c0       	rjmp	.+22     	; 0xe3e <fputs+0x3c>
 e28:	d8 01       	movw	r26, r16
 e2a:	18 96       	adiw	r26, 0x08	; 8
 e2c:	ed 91       	ld	r30, X+
 e2e:	fc 91       	ld	r31, X
 e30:	19 97       	sbiw	r26, 0x09	; 9
 e32:	b8 01       	movw	r22, r16
 e34:	09 95       	icall
 e36:	89 2b       	or	r24, r25
 e38:	11 f0       	breq	.+4      	; 0xe3e <fputs+0x3c>
 e3a:	cf ef       	ldi	r28, 0xFF	; 255
 e3c:	df ef       	ldi	r29, 0xFF	; 255
 e3e:	f7 01       	movw	r30, r14
 e40:	81 91       	ld	r24, Z+
 e42:	7f 01       	movw	r14, r30
 e44:	88 23       	and	r24, r24
 e46:	81 f7       	brne	.-32     	; 0xe28 <fputs+0x26>
 e48:	ce 01       	movw	r24, r28
 e4a:	df 91       	pop	r29
 e4c:	cf 91       	pop	r28
 e4e:	1f 91       	pop	r17
 e50:	0f 91       	pop	r16
 e52:	ff 90       	pop	r15
 e54:	ef 90       	pop	r14
 e56:	08 95       	ret

00000e58 <_exit>:
 e58:	f8 94       	cli

00000e5a <__stop_program>:
 e5a:	ff cf       	rjmp	.-2      	; 0xe5a <__stop_program>
