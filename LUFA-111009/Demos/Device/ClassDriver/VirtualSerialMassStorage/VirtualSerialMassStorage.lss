
VirtualSerialMassStorage.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000d6  00800100  00001db6  00001e4a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001db6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001c  008001d6  008001d6  00001f20  2**0
                  ALLOC
  3 .debug_aranges 00000508  00000000  00000000  00001f20  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000dd3  00000000  00000000  00002428  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000a51c  00000000  00000000  000031fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002533  00000000  00000000  0000d717  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00007909  00000000  00000000  0000fc4a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000790  00000000  00000000  00017554  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00003951  00000000  00000000  00017ce4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00003c91  00000000  00000000  0001b635  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000690  00000000  00000000  0001f2c6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
 *  \param[in] BufferPtr     Pointer to the data source RAM buffer
 */
void DataflashManager_WriteBlocks_RAM(const uint32_t BlockAddress,
                                      uint16_t TotalBlocks,
                                      uint8_t* BufferPtr)
{
       0:	b2 c0       	rjmp	.+356    	; 0x166 <__ctors_end>
	return true;
#endif
}

void Endpoint_ClearEndpoints(void)
{
       2:	00 00       	nop
	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
}
       4:	ce c0       	rjmp	.+412    	; 0x1a2 <__bad_interrupt>

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
       6:	00 00       	nop
	}
	else
	{
		return 0;
	}
}
       8:	cc c0       	rjmp	.+408    	; 0x1a2 <__bad_interrupt>
       a:	00 00       	nop
       c:	ca c0       	rjmp	.+404    	; 0x1a2 <__bad_interrupt>
       e:	00 00       	nop
      10:	c8 c0       	rjmp	.+400    	; 0x1a2 <__bad_interrupt>
      12:	00 00       	nop
      14:	c6 c0       	rjmp	.+396    	; 0x1a2 <__bad_interrupt>
      16:	00 00       	nop
      18:	c4 c0       	rjmp	.+392    	; 0x1a2 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	c2 c0       	rjmp	.+388    	; 0x1a2 <__bad_interrupt>
      1e:	00 00       	nop
      20:	c0 c0       	rjmp	.+384    	; 0x1a2 <__bad_interrupt>
      22:	00 00       	nop
      24:	be c0       	rjmp	.+380    	; 0x1a2 <__bad_interrupt>
      26:	00 00       	nop
      28:	0b c7       	rjmp	.+3606   	; 0xe40 <__vector_10>
      2a:	00 00       	nop
      2c:	ba c0       	rjmp	.+372    	; 0x1a2 <__bad_interrupt>
      2e:	00 00       	nop
      30:	b8 c0       	rjmp	.+368    	; 0x1a2 <__bad_interrupt>
      32:	00 00       	nop
      34:	b6 c0       	rjmp	.+364    	; 0x1a2 <__bad_interrupt>
      36:	00 00       	nop
      38:	b4 c0       	rjmp	.+360    	; 0x1a2 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	b2 c0       	rjmp	.+356    	; 0x1a2 <__bad_interrupt>
      3e:	00 00       	nop
      40:	b0 c0       	rjmp	.+352    	; 0x1a2 <__bad_interrupt>
      42:	00 00       	nop
      44:	ae c0       	rjmp	.+348    	; 0x1a2 <__bad_interrupt>
      46:	00 00       	nop
      48:	ac c0       	rjmp	.+344    	; 0x1a2 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	aa c0       	rjmp	.+340    	; 0x1a2 <__bad_interrupt>
      4e:	00 00       	nop
      50:	a8 c0       	rjmp	.+336    	; 0x1a2 <__bad_interrupt>
      52:	00 00       	nop
      54:	a6 c0       	rjmp	.+332    	; 0x1a2 <__bad_interrupt>
      56:	00 00       	nop
      58:	a4 c0       	rjmp	.+328    	; 0x1a2 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	a2 c0       	rjmp	.+324    	; 0x1a2 <__bad_interrupt>
      5e:	00 00       	nop
      60:	a0 c0       	rjmp	.+320    	; 0x1a2 <__bad_interrupt>
      62:	00 00       	nop
      64:	9e c0       	rjmp	.+316    	; 0x1a2 <__bad_interrupt>
      66:	00 00       	nop
      68:	9c c0       	rjmp	.+312    	; 0x1a2 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	9a c0       	rjmp	.+308    	; 0x1a2 <__bad_interrupt>
      6e:	00 00       	nop
      70:	98 c0       	rjmp	.+304    	; 0x1a2 <__bad_interrupt>
      72:	00 00       	nop
      74:	96 c0       	rjmp	.+300    	; 0x1a2 <__bad_interrupt>
      76:	00 00       	nop
      78:	94 c0       	rjmp	.+296    	; 0x1a2 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	92 c0       	rjmp	.+292    	; 0x1a2 <__bad_interrupt>
      7e:	00 00       	nop
      80:	90 c0       	rjmp	.+288    	; 0x1a2 <__bad_interrupt>
      82:	00 00       	nop
      84:	8e c0       	rjmp	.+284    	; 0x1a2 <__bad_interrupt>
      86:	00 00       	nop
      88:	8c c0       	rjmp	.+280    	; 0x1a2 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	8a c0       	rjmp	.+276    	; 0x1a2 <__bad_interrupt>
      8e:	00 00       	nop
      90:	88 c0       	rjmp	.+272    	; 0x1a2 <__bad_interrupt>
      92:	00 00       	nop
      94:	86 c0       	rjmp	.+268    	; 0x1a2 <__bad_interrupt>
      96:	00 00       	nop

00000098 <DeviceDescriptor>:
      98:	12 01 10 01 ef 02 01 08 eb 03 68 20 01 00 01 02     ..........h ....
      a8:	dc 01                                               ..

000000aa <ConfigurationDescriptor>:
      aa:	09 02 5d 00 03 01 00 c0 32 08 0b 00 02 02 02 01     ..].....2.......
      ba:	00 09 04 00 00 01 02 02 01 00 05 24 00 10 01 04     ...........$....
      ca:	24 02 06 05 24 06 00 01 07 05 81 03 08 00 ff 09     $...$...........
      da:	04 01 00 02 0a 00 00 00 07 05 03 02 10 00 01 07     ................
      ea:	05 82 02 10 00 01 09 04 02 00 02 08 06 50 00 07     .............P..
      fa:	05 84 02 40 00 01 07 05 05 02 40 00 01              ...@......@..

00000107 <LanguageString>:
     107:	04 03 09 04                                         ....

0000010b <ManufacturerString>:
     10b:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
     11b:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

00000125 <ProductString>:
     125:	3e 03 4c 00 55 00 46 00 41 00 20 00 43 00 44 00     >.L.U.F.A. .C.D.
     135:	43 00 20 00 61 00 6e 00 64 00 20 00 4d 00 61 00     C. .a.n.d. .M.a.
     145:	73 00 73 00 20 00 53 00 74 00 6f 00 72 00 61 00     s.s. .S.t.o.r.a.
     155:	67 00 65 00 20 00 44 00 65 00 6d 00 6f 00 00 00     g.e. .D.e.m.o...
     165:	00                                                  .

00000166 <__ctors_end>:
     166:	11 24       	eor	r1, r1
     168:	1f be       	out	0x3f, r1	; 63
     16a:	cf ef       	ldi	r28, 0xFF	; 255
     16c:	d0 e2       	ldi	r29, 0x20	; 32
     16e:	de bf       	out	0x3e, r29	; 62
     170:	cd bf       	out	0x3d, r28	; 61

00000172 <__do_copy_data>:
     172:	11 e0       	ldi	r17, 0x01	; 1
     174:	a0 e0       	ldi	r26, 0x00	; 0
     176:	b1 e0       	ldi	r27, 0x01	; 1
     178:	e6 eb       	ldi	r30, 0xB6	; 182
     17a:	fd e1       	ldi	r31, 0x1D	; 29
     17c:	00 e0       	ldi	r16, 0x00	; 0
     17e:	0b bf       	out	0x3b, r16	; 59
     180:	02 c0       	rjmp	.+4      	; 0x186 <__do_copy_data+0x14>
     182:	07 90       	elpm	r0, Z+
     184:	0d 92       	st	X+, r0
     186:	a6 3d       	cpi	r26, 0xD6	; 214
     188:	b1 07       	cpc	r27, r17
     18a:	d9 f7       	brne	.-10     	; 0x182 <__do_copy_data+0x10>

0000018c <__do_clear_bss>:
     18c:	11 e0       	ldi	r17, 0x01	; 1
     18e:	a6 ed       	ldi	r26, 0xD6	; 214
     190:	b1 e0       	ldi	r27, 0x01	; 1
     192:	01 c0       	rjmp	.+2      	; 0x196 <.do_clear_bss_start>

00000194 <.do_clear_bss_loop>:
     194:	1d 92       	st	X+, r1

00000196 <.do_clear_bss_start>:
     196:	a2 3f       	cpi	r26, 0xF2	; 242
     198:	b1 07       	cpc	r27, r17
     19a:	e1 f7       	brne	.-8      	; 0x194 <.do_clear_bss_loop>
     19c:	a9 d0       	rcall	.+338    	; 0x2f0 <main>
     19e:	0c 94 d9 0e 	jmp	0x1db2	; 0x1db2 <_exit>

000001a2 <__bad_interrupt>:
     1a2:	2e cf       	rjmp	.-420    	; 0x0 <__vectors>

000001a4 <EVENT_USB_Device_Connect>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     1a4:	8b b1       	in	r24, 0x0b	; 11
     1a6:	8f 70       	andi	r24, 0x0F	; 15
     1a8:	80 6a       	ori	r24, 0xA0	; 160
     1aa:	8b b9       	out	0x0b, r24	; 11

/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_Connect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
}
     1ac:	08 95       	ret

000001ae <EVENT_USB_Device_Disconnect>:
     1ae:	8b b1       	in	r24, 0x0b	; 11
     1b0:	8f 70       	andi	r24, 0x0F	; 15
     1b2:	80 61       	ori	r24, 0x10	; 16
     1b4:	8b b9       	out	0x0b, r24	; 11

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
}
     1b6:	08 95       	ret

000001b8 <CALLBACK_MS_Device_SCSICommandReceived>:
     1b8:	2b b1       	in	r18, 0x0b	; 11
     1ba:	2f 70       	andi	r18, 0x0F	; 15
     1bc:	20 62       	ori	r18, 0x20	; 32
     1be:	2b b9       	out	0x0b, r18	; 11
bool CALLBACK_MS_Device_SCSICommandReceived(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	bool CommandSuccess;

	LEDs_SetAllLEDs(LEDMASK_USB_BUSY);
	CommandSuccess = SCSI_DecodeSCSICommand(MSInterfaceInfo);
     1c0:	34 d4       	rcall	.+2152   	; 0xa2a <SCSI_DecodeSCSICommand>
     1c2:	9b b1       	in	r25, 0x0b	; 11
     1c4:	9f 70       	andi	r25, 0x0F	; 15
     1c6:	90 66       	ori	r25, 0x60	; 96
     1c8:	9b b9       	out	0x0b, r25	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_READY);

	return CommandSuccess;
}
     1ca:	08 95       	ret

000001cc <EVENT_USB_Device_ControlRequest>:
}

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	CDC_Device_ProcessControlRequest(&VirtualSerial_CDC_Interface);
     1cc:	82 e5       	ldi	r24, 0x52	; 82
     1ce:	91 e0       	ldi	r25, 0x01	; 1
     1d0:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <CDC_Device_ProcessControlRequest>
	MS_Device_ProcessControlRequest(&Disk_MS_Interface);
     1d4:	88 e6       	ldi	r24, 0x68	; 104
     1d6:	91 e0       	ldi	r25, 0x01	; 1
     1d8:	0c 94 73 0e 	jmp	0x1ce6	; 0x1ce6 <MS_Device_ProcessControlRequest>

000001dc <EVENT_USB_Device_ConfigurationChanged>:
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
}

/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
     1dc:	0f 93       	push	r16
     1de:	1f 93       	push	r17
	bool ConfigSuccess = true;

	ConfigSuccess &= CDC_Device_ConfigureEndpoints(&VirtualSerial_CDC_Interface);
     1e0:	82 e5       	ldi	r24, 0x52	; 82
     1e2:	91 e0       	ldi	r25, 0x01	; 1
     1e4:	0e 94 23 0c 	call	0x1846	; 0x1846 <CDC_Device_ConfigureEndpoints>
     1e8:	08 2f       	mov	r16, r24
	ConfigSuccess &= MS_Device_ConfigureEndpoints(&Disk_MS_Interface);
     1ea:	88 e6       	ldi	r24, 0x68	; 104
     1ec:	91 e0       	ldi	r25, 0x01	; 1
     1ee:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <MS_Device_ConfigureEndpoints>

	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
     1f2:	10 e0       	ldi	r17, 0x00	; 0
     1f4:	90 e0       	ldi	r25, 0x00	; 0
     1f6:	08 23       	and	r16, r24
     1f8:	19 23       	and	r17, r25
     1fa:	00 ff       	sbrs	r16, 0
     1fc:	02 c0       	rjmp	.+4      	; 0x202 <EVENT_USB_Device_ConfigurationChanged+0x26>
     1fe:	90 e6       	ldi	r25, 0x60	; 96
     200:	01 c0       	rjmp	.+2      	; 0x204 <EVENT_USB_Device_ConfigurationChanged+0x28>
     202:	90 e9       	ldi	r25, 0x90	; 144
     204:	8b b1       	in	r24, 0x0b	; 11
     206:	8f 70       	andi	r24, 0x0F	; 15
     208:	98 2b       	or	r25, r24
     20a:	9b b9       	out	0x0b, r25	; 11
}
     20c:	1f 91       	pop	r17
     20e:	0f 91       	pop	r16
     210:	08 95       	ret

00000212 <CheckJoystickMovement>:
			}

			static inline uint8_t Joystick_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Joystick_GetStatus(void)
			{
				return (((uint8_t)~PINB & JOY_BMASK) | (((uint8_t)~PINE & JOY_EMASK) >> JOY_PORTE_MASK_SHIFT));
     212:	23 b1       	in	r18, 0x03	; 3
     214:	8c b1       	in	r24, 0x0c	; 12
     216:	80 95       	com	r24
     218:	90 e0       	ldi	r25, 0x00	; 0
     21a:	80 73       	andi	r24, 0x30	; 48
     21c:	90 70       	andi	r25, 0x00	; 0
     21e:	95 95       	asr	r25
     220:	87 95       	ror	r24
     222:	20 95       	com	r18
     224:	20 7e       	andi	r18, 0xE0	; 224
     226:	28 2b       	or	r18, r24
{
	uint8_t     JoyStatus_LCL = Joystick_GetStatus();
	char*       ReportString  = NULL;
	static bool ActionSent    = false;

	if (JoyStatus_LCL & JOY_UP)
     228:	27 fd       	sbrc	r18, 7
     22a:	17 c0       	rjmp	.+46     	; 0x25a <CheckJoystickMovement+0x48>
	  ReportString = "Joystick Up\r\n";
	else if (JoyStatus_LCL & JOY_DOWN)
     22c:	24 ff       	sbrs	r18, 4
     22e:	03 c0       	rjmp	.+6      	; 0x236 <CheckJoystickMovement+0x24>
     230:	20 e0       	ldi	r18, 0x00	; 0
     232:	31 e0       	ldi	r19, 0x01	; 1
     234:	14 c0       	rjmp	.+40     	; 0x25e <CheckJoystickMovement+0x4c>
	  ReportString = "Joystick Down\r\n";
	else if (JoyStatus_LCL & JOY_LEFT)
     236:	26 ff       	sbrs	r18, 6
     238:	03 c0       	rjmp	.+6      	; 0x240 <CheckJoystickMovement+0x2e>
     23a:	20 e1       	ldi	r18, 0x10	; 16
     23c:	31 e0       	ldi	r19, 0x01	; 1
     23e:	0f c0       	rjmp	.+30     	; 0x25e <CheckJoystickMovement+0x4c>
	  ReportString = "Joystick Left\r\n";
	else if (JoyStatus_LCL & JOY_RIGHT)
     240:	23 ff       	sbrs	r18, 3
     242:	03 c0       	rjmp	.+6      	; 0x24a <CheckJoystickMovement+0x38>
     244:	20 e2       	ldi	r18, 0x20	; 32
     246:	31 e0       	ldi	r19, 0x01	; 1
     248:	0a c0       	rjmp	.+20     	; 0x25e <CheckJoystickMovement+0x4c>
	  ReportString = "Joystick Right\r\n";
	else if (JoyStatus_LCL & JOY_PRESS)
     24a:	25 ff       	sbrs	r18, 5
     24c:	03 c0       	rjmp	.+6      	; 0x254 <CheckJoystickMovement+0x42>
     24e:	21 e3       	ldi	r18, 0x31	; 49
     250:	31 e0       	ldi	r19, 0x01	; 1
     252:	05 c0       	rjmp	.+10     	; 0x25e <CheckJoystickMovement+0x4c>
	  ReportString = "Joystick Pressed\r\n";
	else
	  ActionSent = false;
     254:	10 92 d6 01 	sts	0x01D6, r1
     258:	08 95       	ret
     25a:	24 e4       	ldi	r18, 0x44	; 68
     25c:	31 e0       	ldi	r19, 0x01	; 1

	if ((ReportString != NULL) && (ActionSent == false))
     25e:	80 91 d6 01 	lds	r24, 0x01D6
     262:	88 23       	and	r24, r24
     264:	41 f4       	brne	.+16     	; 0x276 <CheckJoystickMovement+0x64>
	{
		ActionSent = true;
     266:	81 e0       	ldi	r24, 0x01	; 1
     268:	80 93 d6 01 	sts	0x01D6, r24

		/* Write the string to the virtual COM port via the created character stream */
		fputs(ReportString, &USBSerialStream);
     26c:	c9 01       	movw	r24, r18
     26e:	67 ed       	ldi	r22, 0xD7	; 215
     270:	71 e0       	ldi	r23, 0x01	; 1
     272:	0c 94 ae 0e 	jmp	0x1d5c	; 0x1d5c <fputs>
     276:	08 95       	ret

00000278 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     278:	84 b7       	in	r24, 0x34	; 52
     27a:	87 7f       	andi	r24, 0xF7	; 247
     27c:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     27e:	88 e1       	ldi	r24, 0x18	; 24
     280:	0f b6       	in	r0, 0x3f	; 63
     282:	f8 94       	cli
     284:	80 93 60 00 	sts	0x0060, r24
     288:	10 92 60 00 	sts	0x0060, r1
     28c:	0f be       	out	0x3f, r0	; 63

	/* Disable clock division */
	clock_prescale_set(clock_div_1);
     28e:	80 e0       	ldi	r24, 0x00	; 0
     290:	90 e0       	ldi	r25, 0x00	; 0
     292:	20 e8       	ldi	r18, 0x80	; 128
     294:	0f b6       	in	r0, 0x3f	; 63
     296:	f8 94       	cli
     298:	20 93 61 00 	sts	0x0061, r18
     29c:	80 93 61 00 	sts	0x0061, r24
     2a0:	0f be       	out	0x3f, r0	; 63

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     2a2:	8a b1       	in	r24, 0x0a	; 10
     2a4:	80 6f       	ori	r24, 0xF0	; 240
     2a6:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     2a8:	8b b1       	in	r24, 0x0b	; 11
     2aa:	8f 70       	andi	r24, 0x0F	; 15
     2ac:	8b b9       	out	0x0b, r24	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Joystick_Init(void)
			{
				DDRB  &= ~(JOY_BMASK);
     2ae:	84 b1       	in	r24, 0x04	; 4
     2b0:	8f 71       	andi	r24, 0x1F	; 31
     2b2:	84 b9       	out	0x04, r24	; 4
				DDRE  &= ~(JOY_EMASK);
     2b4:	8d b1       	in	r24, 0x0d	; 13
     2b6:	8f 7c       	andi	r24, 0xCF	; 207
     2b8:	8d b9       	out	0x0d, r24	; 13

				PORTB |= JOY_BMASK;
     2ba:	85 b1       	in	r24, 0x05	; 5
     2bc:	80 6e       	ori	r24, 0xE0	; 224
     2be:	85 b9       	out	0x05, r24	; 5
				PORTE |= JOY_EMASK;
     2c0:	8e b1       	in	r24, 0x0e	; 14
     2c2:	80 63       	ori	r24, 0x30	; 48
     2c4:	8e b9       	out	0x0e, r24	; 14
			 *                         \c SPI_SCK_*, \c SPI_SAMPLE_*, \c SPI_ORDER_* and \c SPI_MODE_* masks.
			 */
			static inline void SPI_Init(const uint8_t SPIOptions)
			{
				/* Prevent high rise times on PB.0 (/SS) from forcing a change to SPI slave mode */
				DDRB  |= (1 << 0);
     2c6:	20 9a       	sbi	0x04, 0	; 4
				PORTB |= (1 << 0);
     2c8:	28 9a       	sbi	0x05, 0	; 5

				DDRB  |=  ((1 << 1) | (1 << 2));
     2ca:	84 b1       	in	r24, 0x04	; 4
     2cc:	86 60       	ori	r24, 0x06	; 6
     2ce:	84 b9       	out	0x04, r24	; 4
				DDRB  &= ~(1 << 3);
     2d0:	23 98       	cbi	0x04, 3	; 4
				PORTB |=  (1 << 3);
     2d2:	2b 9a       	sbi	0x05, 3	; 5

				if (SPIOptions & SPI_USE_DOUBLESPEED)
				  SPSR |= (1 << SPI2X);
     2d4:	8d b5       	in	r24, 0x2d	; 45
     2d6:	81 60       	ori	r24, 0x01	; 1
     2d8:	8d bd       	out	0x2d, r24	; 45
				else
				  SPSR &= ~(1 << SPI2X);

				/* Switch /SS to input mode after configuration to allow for forced mode changes */
				DDRB &= ~(1 << 0);
     2da:	20 98       	cbi	0x04, 0	; 4

				SPCR  = ((1 << SPE) | SPIOptions);
     2dc:	8c e5       	ldi	r24, 0x5C	; 92
     2de:	8c bd       	out	0x2c, r24	; 44
			/** Initializes the dataflash driver so that commands and data may be sent to an attached dataflash IC.
			 *  The microcontroller's SPI driver MUST be initialized before any of the dataflash commands are used.
			 */
			static inline void Dataflash_Init(void)
			{
				DATAFLASH_CHIPCS_DDR  |= DATAFLASH_CHIPCS_MASK;
     2e0:	8d b1       	in	r24, 0x0d	; 13
     2e2:	83 60       	ori	r24, 0x03	; 3
     2e4:	8d b9       	out	0x0d, r24	; 13
				DATAFLASH_CHIPCS_PORT |= DATAFLASH_CHIPCS_MASK;
     2e6:	8e b1       	in	r24, 0x0e	; 14
     2e8:	83 60       	ori	r24, 0x03	; 3
     2ea:	8e b9       	out	0x0e, r24	; 14
	/* Hardware Initialization */
	LEDs_Init();
	Joystick_Init();
	SPI_Init(SPI_SPEED_FCPU_DIV_2 | SPI_ORDER_MSB_FIRST | SPI_SCK_LEAD_FALLING | SPI_SAMPLE_TRAILING | SPI_MODE_MASTER);
	Dataflash_Init();
	USB_Init();
     2ec:	93 d5       	rcall	.+2854   	; 0xe14 <USB_Init>

	/* Clear Dataflash sector protections, if enabled */
	DataflashManager_ResetDataflashProtections();
}
     2ee:	90 c0       	rjmp	.+288    	; 0x410 <DataflashManager_ResetDataflashProtections>

000002f0 <main>:
/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
	SetupHardware();
     2f0:	c3 df       	rcall	.-122    	; 0x278 <SetupHardware>

	/* Create a regular character stream for the interface so that it can be used with the stdio.h functions */
	CDC_Device_CreateStream(&VirtualSerial_CDC_Interface, &USBSerialStream);
     2f2:	82 e5       	ldi	r24, 0x52	; 82
     2f4:	91 e0       	ldi	r25, 0x01	; 1
     2f6:	67 ed       	ldi	r22, 0xD7	; 215
     2f8:	71 e0       	ldi	r23, 0x01	; 1
     2fa:	0e 94 92 0b 	call	0x1724	; 0x1724 <CDC_Device_CreateStream>
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     2fe:	8b b1       	in	r24, 0x0b	; 11
     300:	8f 70       	andi	r24, 0x0F	; 15
     302:	80 61       	ori	r24, 0x10	; 16
     304:	8b b9       	out	0x0b, r24	; 11

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
	sei();
     306:	78 94       	sei

	for (;;)
	{
		CheckJoystickMovement();
     308:	84 df       	rcall	.-248    	; 0x212 <CheckJoystickMovement>

		/* Must throw away unused bytes from the host, or it will lock up while waiting for the device */
		CDC_Device_ReceiveByte(&VirtualSerial_CDC_Interface);
     30a:	82 e5       	ldi	r24, 0x52	; 82
     30c:	91 e0       	ldi	r25, 0x01	; 1
     30e:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <CDC_Device_ReceiveByte>

		CDC_Device_USBTask(&VirtualSerial_CDC_Interface);
     312:	82 e5       	ldi	r24, 0x52	; 82
     314:	91 e0       	ldi	r25, 0x01	; 1
     316:	0e 94 df 0b 	call	0x17be	; 0x17be <CDC_Device_USBTask>
		MS_Device_USBTask(&Disk_MS_Interface);
     31a:	88 e6       	ldi	r24, 0x68	; 104
     31c:	91 e0       	ldi	r25, 0x01	; 1
     31e:	0e 94 0f 0d 	call	0x1a1e	; 0x1a1e <MS_Device_USBTask>
		USB_USBTask();
     322:	0e 94 4e 0b 	call	0x169c	; 0x169c <USB_USBTask>
     326:	f0 cf       	rjmp	.-32     	; 0x308 <main+0x18>

00000328 <CALLBACK_USB_GetDescriptor>:
 *  USB host.
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
     328:	da 01       	movw	r26, r20
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     32a:	92 30       	cpi	r25, 0x02	; 2
     32c:	49 f0       	breq	.+18     	; 0x340 <CALLBACK_USB_GetDescriptor+0x18>
     32e:	93 30       	cpi	r25, 0x03	; 3
     330:	61 f0       	breq	.+24     	; 0x34a <CALLBACK_USB_GetDescriptor+0x22>
     332:	91 30       	cpi	r25, 0x01	; 1
     334:	f9 f4       	brne	.+62     	; 0x374 <CALLBACK_USB_GetDescriptor+0x4c>
     336:	e8 e9       	ldi	r30, 0x98	; 152
     338:	f0 e0       	ldi	r31, 0x00	; 0
     33a:	22 e1       	ldi	r18, 0x12	; 18
     33c:	30 e0       	ldi	r19, 0x00	; 0
     33e:	1e c0       	rjmp	.+60     	; 0x37c <CALLBACK_USB_GetDescriptor+0x54>
     340:	ea ea       	ldi	r30, 0xAA	; 170
     342:	f0 e0       	ldi	r31, 0x00	; 0
     344:	2d e5       	ldi	r18, 0x5D	; 93
     346:	30 e0       	ldi	r19, 0x00	; 0
     348:	19 c0       	rjmp	.+50     	; 0x37c <CALLBACK_USB_GetDescriptor+0x54>
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
     34a:	81 30       	cpi	r24, 0x01	; 1
     34c:	49 f0       	breq	.+18     	; 0x360 <CALLBACK_USB_GetDescriptor+0x38>
     34e:	81 30       	cpi	r24, 0x01	; 1
     350:	18 f0       	brcs	.+6      	; 0x358 <CALLBACK_USB_GetDescriptor+0x30>
     352:	82 30       	cpi	r24, 0x02	; 2
     354:	79 f4       	brne	.+30     	; 0x374 <CALLBACK_USB_GetDescriptor+0x4c>
     356:	08 c0       	rjmp	.+16     	; 0x368 <CALLBACK_USB_GetDescriptor+0x40>
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     358:	e7 e0       	ldi	r30, 0x07	; 7
     35a:	f1 e0       	ldi	r31, 0x01	; 1
     35c:	84 91       	lpm	r24, Z+
     35e:	07 c0       	rjmp	.+14     	; 0x36e <CALLBACK_USB_GetDescriptor+0x46>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     360:	eb e0       	ldi	r30, 0x0B	; 11
     362:	f1 e0       	ldi	r31, 0x01	; 1
     364:	84 91       	lpm	r24, Z+
     366:	03 c0       	rjmp	.+6      	; 0x36e <CALLBACK_USB_GetDescriptor+0x46>
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     368:	e5 e2       	ldi	r30, 0x25	; 37
     36a:	f1 e0       	ldi	r31, 0x01	; 1
     36c:	84 91       	lpm	r24, Z+
     36e:	28 2f       	mov	r18, r24
     370:	30 e0       	ldi	r19, 0x00	; 0
     372:	04 c0       	rjmp	.+8      	; 0x37c <CALLBACK_USB_GetDescriptor+0x54>
     374:	e0 e0       	ldi	r30, 0x00	; 0
     376:	f0 e0       	ldi	r31, 0x00	; 0
     378:	20 e0       	ldi	r18, 0x00	; 0
     37a:	30 e0       	ldi	r19, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
     37c:	ed 93       	st	X+, r30
     37e:	fc 93       	st	X, r31
	return Size;
}
     380:	c9 01       	movw	r24, r18
     382:	08 95       	ret

00000384 <Dataflash_SelectChipFromPage>:
			 *
			 *  \param[in] PageAddress  Address of the page to manipulate, ranging from
			 *                          0 to ((DATAFLASH_PAGES * DATAFLASH_TOTALCHIPS) - 1).
			 */
			static inline void Dataflash_SelectChipFromPage(const uint16_t PageAddress)
			{
     384:	9c 01       	movw	r18, r24
			 *              the chip number).
			 */
			static inline void Dataflash_SelectChip(const uint8_t ChipMask) ATTR_ALWAYS_INLINE;
			static inline void Dataflash_SelectChip(const uint8_t ChipMask)
			{
				DATAFLASH_CHIPCS_PORT = ((DATAFLASH_CHIPCS_PORT & ~DATAFLASH_CHIPCS_MASK) | ChipMask);
     386:	8e b1       	in	r24, 0x0e	; 14
     388:	83 60       	ori	r24, 0x03	; 3
     38a:	8e b9       	out	0x0e, r24	; 14
			 */
			static inline void Dataflash_SelectChipFromPage(const uint16_t PageAddress)
			{
				Dataflash_DeselectChip();

				if (PageAddress >= (DATAFLASH_PAGES * DATAFLASH_TOTALCHIPS))
     38c:	80 e4       	ldi	r24, 0x40	; 64
     38e:	20 30       	cpi	r18, 0x00	; 0
     390:	38 07       	cpc	r19, r24
     392:	58 f4       	brcc	.+22     	; 0x3aa <Dataflash_SelectChipFromPage+0x26>
				  return;

				if (PageAddress & 0x01)
     394:	20 ff       	sbrs	r18, 0
     396:	05 c0       	rjmp	.+10     	; 0x3a2 <Dataflash_SelectChipFromPage+0x1e>
			 *              the chip number).
			 */
			static inline void Dataflash_SelectChip(const uint8_t ChipMask) ATTR_ALWAYS_INLINE;
			static inline void Dataflash_SelectChip(const uint8_t ChipMask)
			{
				DATAFLASH_CHIPCS_PORT = ((DATAFLASH_CHIPCS_PORT & ~DATAFLASH_CHIPCS_MASK) | ChipMask);
     398:	8e b1       	in	r24, 0x0e	; 14
     39a:	8c 7f       	andi	r24, 0xFC	; 252
     39c:	81 60       	ori	r24, 0x01	; 1
     39e:	8e b9       	out	0x0e, r24	; 14
     3a0:	08 95       	ret
     3a2:	8e b1       	in	r24, 0x0e	; 14
     3a4:	8c 7f       	andi	r24, 0xFC	; 252
     3a6:	82 60       	ori	r24, 0x02	; 2
     3a8:	8e b9       	out	0x0e, r24	; 14
     3aa:	08 95       	ret

000003ac <Dataflash_ToggleSelectedChipCS>:
			 *  or a DATAFLASH_CHIPn mask (where n is the chip number).
			 */
			static inline uint8_t Dataflash_GetSelectedChip(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Dataflash_GetSelectedChip(void)
			{
				return (DATAFLASH_CHIPCS_PORT & DATAFLASH_CHIPCS_MASK);
     3ac:	8e b1       	in	r24, 0x0e	; 14
			 *              the chip number).
			 */
			static inline void Dataflash_SelectChip(const uint8_t ChipMask) ATTR_ALWAYS_INLINE;
			static inline void Dataflash_SelectChip(const uint8_t ChipMask)
			{
				DATAFLASH_CHIPCS_PORT = ((DATAFLASH_CHIPCS_PORT & ~DATAFLASH_CHIPCS_MASK) | ChipMask);
     3ae:	9e b1       	in	r25, 0x0e	; 14
     3b0:	93 60       	ori	r25, 0x03	; 3
     3b2:	9e b9       	out	0x0e, r25	; 14
			{
				uint8_t SelectedChipMask = Dataflash_GetSelectedChip();

				Dataflash_DeselectChip();
				Dataflash_SelectChip(SelectedChipMask);
			}
     3b4:	9e b1       	in	r25, 0x0e	; 14
     3b6:	83 70       	andi	r24, 0x03	; 3
     3b8:	9c 7f       	andi	r25, 0xFC	; 252
     3ba:	89 2b       	or	r24, r25
     3bc:	8e b9       	out	0x0e, r24	; 14
     3be:	08 95       	ret

000003c0 <Dataflash_WaitWhileBusy>:
			/** Spin-loops while the currently selected dataflash is busy executing a command, such as a main
			 *  memory page program or main memory to buffer transfer.
			 */
			static inline void Dataflash_WaitWhileBusy(void)
			{
				Dataflash_ToggleSelectedChipCS();
     3c0:	f5 df       	rcall	.-22     	; 0x3ac <Dataflash_ToggleSelectedChipCS>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     3c2:	87 ed       	ldi	r24, 0xD7	; 215
     3c4:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     3c6:	0d b4       	in	r0, 0x2d	; 45
     3c8:	07 fe       	sbrs	r0, 7
     3ca:	fd cf       	rjmp	.-6      	; 0x3c6 <Dataflash_WaitWhileBusy+0x6>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     3cc:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     3ce:	0d b4       	in	r0, 0x2d	; 45
     3d0:	07 fe       	sbrs	r0, 7
     3d2:	fd cf       	rjmp	.-6      	; 0x3ce <Dataflash_WaitWhileBusy+0xe>
				Dataflash_SendByte(DF_CMD_GETSTATUS);
				while (!(Dataflash_ReceiveByte() & DF_STATUS_READY));
     3d4:	0e b4       	in	r0, 0x2e	; 46
     3d6:	07 fe       	sbrs	r0, 7
     3d8:	f9 cf       	rjmp	.-14     	; 0x3cc <Dataflash_WaitWhileBusy+0xc>
				Dataflash_ToggleSelectedChipCS();
			}
     3da:	e8 cf       	rjmp	.-48     	; 0x3ac <Dataflash_ToggleSelectedChipCS>

000003dc <Dataflash_SendAddressBytes>:
			 *  \param[in] BufferByte   Address within the dataflash's buffer
			 */
			static inline void Dataflash_SendAddressBytes(uint16_t PageAddress,
			                                              const uint16_t BufferByte)
			{
				PageAddress >>= 1;
     3dc:	9c 01       	movw	r18, r24
     3de:	36 95       	lsr	r19
     3e0:	27 95       	ror	r18

				Dataflash_SendByte(PageAddress >> 5);
     3e2:	36 e0       	ldi	r19, 0x06	; 6
     3e4:	96 95       	lsr	r25
     3e6:	87 95       	ror	r24
     3e8:	3a 95       	dec	r19
     3ea:	e1 f7       	brne	.-8      	; 0x3e4 <Dataflash_SendAddressBytes+0x8>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     3ec:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     3ee:	0d b4       	in	r0, 0x2d	; 45
     3f0:	07 fe       	sbrs	r0, 7
     3f2:	fd cf       	rjmp	.-6      	; 0x3ee <Dataflash_SendAddressBytes+0x12>
				Dataflash_SendByte((PageAddress << 3) | (BufferByte >> 8));
     3f4:	82 2f       	mov	r24, r18
     3f6:	88 0f       	add	r24, r24
     3f8:	88 0f       	add	r24, r24
     3fa:	88 0f       	add	r24, r24
     3fc:	87 2b       	or	r24, r23
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     3fe:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     400:	0d b4       	in	r0, 0x2d	; 45
     402:	07 fe       	sbrs	r0, 7
     404:	fd cf       	rjmp	.-6      	; 0x400 <Dataflash_SendAddressBytes+0x24>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     406:	6e bd       	out	0x2e, r22	; 46
				while (!(SPSR & (1 << SPIF)));
     408:	0d b4       	in	r0, 0x2d	; 45
     40a:	07 fe       	sbrs	r0, 7
     40c:	fd cf       	rjmp	.-6      	; 0x408 <Dataflash_SendAddressBytes+0x2c>
				Dataflash_SendByte(BufferByte);
			}
     40e:	08 95       	ret

00000410 <DataflashManager_ResetDataflashProtections>:
			 *              the chip number).
			 */
			static inline void Dataflash_SelectChip(const uint8_t ChipMask) ATTR_ALWAYS_INLINE;
			static inline void Dataflash_SelectChip(const uint8_t ChipMask)
			{
				DATAFLASH_CHIPCS_PORT = ((DATAFLASH_CHIPCS_PORT & ~DATAFLASH_CHIPCS_MASK) | ChipMask);
     410:	8e b1       	in	r24, 0x0e	; 14
     412:	8c 7f       	andi	r24, 0xFC	; 252
     414:	82 60       	ori	r24, 0x02	; 2
     416:	8e b9       	out	0x0e, r24	; 14
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     418:	87 ed       	ldi	r24, 0xD7	; 215
     41a:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     41c:	0d b4       	in	r0, 0x2d	; 45
     41e:	07 fe       	sbrs	r0, 7
     420:	fd cf       	rjmp	.-6      	; 0x41c <DataflashManager_ResetDataflashProtections+0xc>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     422:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     424:	0d b4       	in	r0, 0x2d	; 45
     426:	07 fe       	sbrs	r0, 7
     428:	fd cf       	rjmp	.-6      	; 0x424 <DataflashManager_ResetDataflashProtections+0x14>
	/* Select first Dataflash chip, send the read status register command */
	Dataflash_SelectChip(DATAFLASH_CHIP1);
	Dataflash_SendByte(DF_CMD_GETSTATUS);

	/* Check if sector protection is enabled */
	if (Dataflash_ReceiveByte() & DF_STATUS_SECTORPROTECTION_ON)
     42a:	0e b4       	in	r0, 0x2e	; 46
     42c:	01 fe       	sbrs	r0, 1
     42e:	15 c0       	rjmp	.+42     	; 0x45a <DataflashManager_ResetDataflashProtections+0x4a>
	{
		Dataflash_ToggleSelectedChipCS();
     430:	bd df       	rcall	.-134    	; 0x3ac <Dataflash_ToggleSelectedChipCS>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     432:	8d e3       	ldi	r24, 0x3D	; 61
     434:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     436:	0d b4       	in	r0, 0x2d	; 45
     438:	07 fe       	sbrs	r0, 7
     43a:	fd cf       	rjmp	.-6      	; 0x436 <DataflashManager_ResetDataflashProtections+0x26>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     43c:	8a e2       	ldi	r24, 0x2A	; 42
     43e:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     440:	0d b4       	in	r0, 0x2d	; 45
     442:	07 fe       	sbrs	r0, 7
     444:	fd cf       	rjmp	.-6      	; 0x440 <DataflashManager_ResetDataflashProtections+0x30>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     446:	8f e7       	ldi	r24, 0x7F	; 127
     448:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     44a:	0d b4       	in	r0, 0x2d	; 45
     44c:	07 fe       	sbrs	r0, 7
     44e:	fd cf       	rjmp	.-6      	; 0x44a <DataflashManager_ResetDataflashProtections+0x3a>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     450:	8a e9       	ldi	r24, 0x9A	; 154
     452:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     454:	0d b4       	in	r0, 0x2d	; 45
     456:	07 fe       	sbrs	r0, 7
     458:	fd cf       	rjmp	.-6      	; 0x454 <DataflashManager_ResetDataflashProtections+0x44>
     45a:	8e b1       	in	r24, 0x0e	; 14
     45c:	8c 7f       	andi	r24, 0xFC	; 252
     45e:	81 60       	ori	r24, 0x01	; 1
     460:	8e b9       	out	0x0e, r24	; 14
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     462:	87 ed       	ldi	r24, 0xD7	; 215
     464:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     466:	0d b4       	in	r0, 0x2d	; 45
     468:	07 fe       	sbrs	r0, 7
     46a:	fd cf       	rjmp	.-6      	; 0x466 <DataflashManager_ResetDataflashProtections+0x56>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     46c:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     46e:	0d b4       	in	r0, 0x2d	; 45
     470:	07 fe       	sbrs	r0, 7
     472:	fd cf       	rjmp	.-6      	; 0x46e <DataflashManager_ResetDataflashProtections+0x5e>
	#if (DATAFLASH_TOTALCHIPS == 2)
	Dataflash_SelectChip(DATAFLASH_CHIP2);
	Dataflash_SendByte(DF_CMD_GETSTATUS);

	/* Check if sector protection is enabled */
	if (Dataflash_ReceiveByte() & DF_STATUS_SECTORPROTECTION_ON)
     474:	0e b4       	in	r0, 0x2e	; 46
     476:	01 fe       	sbrs	r0, 1
     478:	15 c0       	rjmp	.+42     	; 0x4a4 <DataflashManager_ResetDataflashProtections+0x94>
	{
		Dataflash_ToggleSelectedChipCS();
     47a:	98 df       	rcall	.-208    	; 0x3ac <Dataflash_ToggleSelectedChipCS>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     47c:	8d e3       	ldi	r24, 0x3D	; 61
     47e:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     480:	0d b4       	in	r0, 0x2d	; 45
     482:	07 fe       	sbrs	r0, 7
     484:	fd cf       	rjmp	.-6      	; 0x480 <DataflashManager_ResetDataflashProtections+0x70>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     486:	8a e2       	ldi	r24, 0x2A	; 42
     488:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     48a:	0d b4       	in	r0, 0x2d	; 45
     48c:	07 fe       	sbrs	r0, 7
     48e:	fd cf       	rjmp	.-6      	; 0x48a <DataflashManager_ResetDataflashProtections+0x7a>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     490:	8f e7       	ldi	r24, 0x7F	; 127
     492:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     494:	0d b4       	in	r0, 0x2d	; 45
     496:	07 fe       	sbrs	r0, 7
     498:	fd cf       	rjmp	.-6      	; 0x494 <DataflashManager_ResetDataflashProtections+0x84>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     49a:	8a e9       	ldi	r24, 0x9A	; 154
     49c:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     49e:	0d b4       	in	r0, 0x2d	; 45
     4a0:	07 fe       	sbrs	r0, 7
     4a2:	fd cf       	rjmp	.-6      	; 0x49e <DataflashManager_ResetDataflashProtections+0x8e>
     4a4:	8e b1       	in	r24, 0x0e	; 14
     4a6:	83 60       	ori	r24, 0x03	; 3
     4a8:	8e b9       	out	0x0e, r24	; 14
	}
	#endif

	/* Deselect current Dataflash chip */
	Dataflash_DeselectChip();
}
     4aa:	08 95       	ret

000004ac <DataflashManager_CheckDataflashOperation>:
     4ac:	8e b1       	in	r24, 0x0e	; 14
     4ae:	8c 7f       	andi	r24, 0xFC	; 252
     4b0:	82 60       	ori	r24, 0x02	; 2
     4b2:	8e b9       	out	0x0e, r24	; 14
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     4b4:	8f e9       	ldi	r24, 0x9F	; 159
     4b6:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     4b8:	0d b4       	in	r0, 0x2d	; 45
     4ba:	07 fe       	sbrs	r0, 7
     4bc:	fd cf       	rjmp	.-6      	; 0x4b8 <DataflashManager_CheckDataflashOperation+0xc>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     4be:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     4c0:	0d b4       	in	r0, 0x2d	; 45
     4c2:	07 fe       	sbrs	r0, 7
     4c4:	fd cf       	rjmp	.-6      	; 0x4c0 <DataflashManager_CheckDataflashOperation+0x14>
				return SPDR;
     4c6:	9e b5       	in	r25, 0x2e	; 46
     4c8:	8e b1       	in	r24, 0x0e	; 14
     4ca:	83 60       	ori	r24, 0x03	; 3
     4cc:	8e b9       	out	0x0e, r24	; 14
	Dataflash_SendByte(DF_CMD_READMANUFACTURERDEVICEINFO);
	ReturnByte = Dataflash_ReceiveByte();
	Dataflash_DeselectChip();

	/* If returned data is invalid, fail the command */
	if (ReturnByte != DF_MANUFACTURER_ATMEL)
     4ce:	9f 31       	cpi	r25, 0x1F	; 31
     4d0:	11 f0       	breq	.+4      	; 0x4d6 <DataflashManager_CheckDataflashOperation+0x2a>
     4d2:	80 e0       	ldi	r24, 0x00	; 0
     4d4:	08 95       	ret
     4d6:	8e b1       	in	r24, 0x0e	; 14
     4d8:	8c 7f       	andi	r24, 0xFC	; 252
     4da:	81 60       	ori	r24, 0x01	; 1
     4dc:	8e b9       	out	0x0e, r24	; 14
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     4de:	8f e9       	ldi	r24, 0x9F	; 159
     4e0:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     4e2:	0d b4       	in	r0, 0x2d	; 45
     4e4:	07 fe       	sbrs	r0, 7
     4e6:	fd cf       	rjmp	.-6      	; 0x4e2 <DataflashManager_CheckDataflashOperation+0x36>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     4e8:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     4ea:	0d b4       	in	r0, 0x2d	; 45
     4ec:	07 fe       	sbrs	r0, 7
     4ee:	fd cf       	rjmp	.-6      	; 0x4ea <DataflashManager_CheckDataflashOperation+0x3e>
				return SPDR;
     4f0:	9e b5       	in	r25, 0x2e	; 46
     4f2:	8e b1       	in	r24, 0x0e	; 14
     4f4:	83 60       	ori	r24, 0x03	; 3
     4f6:	8e b9       	out	0x0e, r24	; 14
     4f8:	80 e0       	ldi	r24, 0x00	; 0
     4fa:	9f 31       	cpi	r25, 0x1F	; 31
     4fc:	09 f4       	brne	.+2      	; 0x500 <DataflashManager_CheckDataflashOperation+0x54>
     4fe:	81 e0       	ldi	r24, 0x01	; 1
	if (ReturnByte != DF_MANUFACTURER_ATMEL)
	  return false;
	#endif

	return true;
}
     500:	08 95       	ret

00000502 <DataflashManager_ReadBlocks>:
 *  \param[in] TotalBlocks   Number of blocks of data to read
 */
void DataflashManager_ReadBlocks(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo,
                                 const uint32_t BlockAddress,
                                 uint16_t TotalBlocks)
{
     502:	af 92       	push	r10
     504:	bf 92       	push	r11
     506:	cf 92       	push	r12
     508:	df 92       	push	r13
     50a:	ef 92       	push	r14
     50c:	ff 92       	push	r15
     50e:	0f 93       	push	r16
     510:	1f 93       	push	r17
     512:	df 93       	push	r29
     514:	cf 93       	push	r28
     516:	0f 92       	push	r0
     518:	cd b7       	in	r28, 0x3d	; 61
     51a:	de b7       	in	r29, 0x3e	; 62
     51c:	5c 01       	movw	r10, r24
     51e:	79 01       	movw	r14, r18
	uint16_t CurrDFPage          = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) / DATAFLASH_PAGE_SIZE);
     520:	e9 e0       	ldi	r30, 0x09	; 9
     522:	44 0f       	add	r20, r20
     524:	55 1f       	adc	r21, r21
     526:	66 1f       	adc	r22, r22
     528:	77 1f       	adc	r23, r23
     52a:	ea 95       	dec	r30
     52c:	d1 f7       	brne	.-12     	; 0x522 <DataflashManager_ReadBlocks+0x20>
     52e:	db 01       	movw	r26, r22
     530:	ca 01       	movw	r24, r20
     532:	3a e0       	ldi	r19, 0x0A	; 10
     534:	b6 95       	lsr	r27
     536:	a7 95       	ror	r26
     538:	97 95       	ror	r25
     53a:	87 95       	ror	r24
     53c:	3a 95       	dec	r19
     53e:	d1 f7       	brne	.-12     	; 0x534 <DataflashManager_ReadBlocks+0x32>
     540:	8c 01       	movw	r16, r24
	uint16_t CurrDFPageByte      = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) % DATAFLASH_PAGE_SIZE);
     542:	2f ef       	ldi	r18, 0xFF	; 255
     544:	c2 2e       	mov	r12, r18
     546:	23 e0       	ldi	r18, 0x03	; 3
     548:	d2 2e       	mov	r13, r18
     54a:	c4 22       	and	r12, r20
     54c:	d5 22       	and	r13, r21
	uint8_t  CurrDFPageByteDiv16 = (CurrDFPageByte >> 4);

	/* Select the correct starting Dataflash IC for the block requested */
	Dataflash_SelectChipFromPage(CurrDFPage);
     54e:	1a df       	rcall	.-460    	; 0x384 <Dataflash_SelectChipFromPage>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     550:	82 ed       	ldi	r24, 0xD2	; 210
     552:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     554:	0d b4       	in	r0, 0x2d	; 45
     556:	07 fe       	sbrs	r0, 7
     558:	fd cf       	rjmp	.-6      	; 0x554 <DataflashManager_ReadBlocks+0x52>

	/* Send the Dataflash main memory page read command */
	Dataflash_SendByte(DF_CMD_MAINMEMPAGEREAD);
	Dataflash_SendAddressBytes(CurrDFPage, CurrDFPageByte);
     55a:	c8 01       	movw	r24, r16
     55c:	b6 01       	movw	r22, r12
     55e:	3e df       	rcall	.-388    	; 0x3dc <Dataflash_SendAddressBytes>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     560:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     562:	0d b4       	in	r0, 0x2d	; 45
     564:	07 fe       	sbrs	r0, 7
     566:	fd cf       	rjmp	.-6      	; 0x562 <DataflashManager_ReadBlocks+0x60>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     568:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     56a:	0d b4       	in	r0, 0x2d	; 45
     56c:	07 fe       	sbrs	r0, 7
     56e:	fd cf       	rjmp	.-6      	; 0x56a <DataflashManager_ReadBlocks+0x68>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     570:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     572:	0d b4       	in	r0, 0x2d	; 45
     574:	07 fe       	sbrs	r0, 7
     576:	fd cf       	rjmp	.-6      	; 0x572 <DataflashManager_ReadBlocks+0x70>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     578:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     57a:	0d b4       	in	r0, 0x2d	; 45
     57c:	07 fe       	sbrs	r0, 7
     57e:	fd cf       	rjmp	.-6      	; 0x57a <DataflashManager_ReadBlocks+0x78>
	Dataflash_SendByte(0x00);
	Dataflash_SendByte(0x00);
	Dataflash_SendByte(0x00);

	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
     580:	ce d3       	rcall	.+1948   	; 0xd1e <Endpoint_WaitUntilReady>
     582:	88 23       	and	r24, r24
     584:	09 f0       	breq	.+2      	; 0x588 <DataflashManager_ReadBlocks+0x86>
     586:	c5 c0       	rjmp	.+394    	; 0x712 <DataflashManager_ReadBlocks+0x210>
                                 const uint32_t BlockAddress,
                                 uint16_t TotalBlocks)
{
	uint16_t CurrDFPage          = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) / DATAFLASH_PAGE_SIZE);
	uint16_t CurrDFPageByte      = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) % DATAFLASH_PAGE_SIZE);
	uint8_t  CurrDFPageByteDiv16 = (CurrDFPageByte >> 4);
     588:	94 e0       	ldi	r25, 0x04	; 4
     58a:	d6 94       	lsr	r13
     58c:	c7 94       	ror	r12
     58e:	9a 95       	dec	r25
     590:	e1 f7       	brne	.-8      	; 0x58a <DataflashManager_ReadBlocks+0x88>
     592:	9c 2d       	mov	r25, r12
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     594:	82 ed       	ldi	r24, 0xD2	; 210
     596:	c8 2e       	mov	r12, r24
     598:	ac c0       	rjmp	.+344    	; 0x6f2 <DataflashManager_ReadBlocks+0x1f0>
     59a:	dd 24       	eor	r13, r13
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     59c:	80 91 e8 00 	lds	r24, 0x00E8

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
		{
			/* Check if the endpoint is currently full */
			if (!(Endpoint_IsReadWriteAllowed()))
     5a0:	85 fd       	sbrc	r24, 5
     5a2:	0b c0       	rjmp	.+22     	; 0x5ba <DataflashManager_ReadBlocks+0xb8>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     5a4:	80 91 e8 00 	lds	r24, 0x00E8
     5a8:	8e 77       	andi	r24, 0x7E	; 126
     5aa:	80 93 e8 00 	sts	0x00E8, r24
			{
				/* Clear the endpoint bank to send its contents to the host */
				Endpoint_ClearIN();

				/* Wait until the endpoint is ready for more data */
				if (Endpoint_WaitUntilReady())
     5ae:	99 83       	std	Y+1, r25	; 0x01
     5b0:	b6 d3       	rcall	.+1900   	; 0xd1e <Endpoint_WaitUntilReady>
     5b2:	99 81       	ldd	r25, Y+1	; 0x01
     5b4:	88 23       	and	r24, r24
     5b6:	09 f0       	breq	.+2      	; 0x5ba <DataflashManager_ReadBlocks+0xb8>
     5b8:	ac c0       	rjmp	.+344    	; 0x712 <DataflashManager_ReadBlocks+0x210>
				  return;
			}

			/* Check if end of Dataflash page reached */
			if (CurrDFPageByteDiv16 == (DATAFLASH_PAGE_SIZE >> 4))
     5ba:	90 34       	cpi	r25, 0x40	; 64
     5bc:	e9 f4       	brne	.+58     	; 0x5f8 <DataflashManager_ReadBlocks+0xf6>
			{
				/* Reset the Dataflash buffer counter, increment the page counter */
				CurrDFPageByteDiv16 = 0;
				CurrDFPage++;
     5be:	0f 5f       	subi	r16, 0xFF	; 255
     5c0:	1f 4f       	sbci	r17, 0xFF	; 255

				/* Select the next Dataflash chip based on the new Dataflash page index */
				Dataflash_SelectChipFromPage(CurrDFPage);
     5c2:	c8 01       	movw	r24, r16
     5c4:	df de       	rcall	.-578    	; 0x384 <Dataflash_SelectChipFromPage>
     5c6:	ce bc       	out	0x2e, r12	; 46
				while (!(SPSR & (1 << SPIF)));
     5c8:	0d b4       	in	r0, 0x2d	; 45
     5ca:	07 fe       	sbrs	r0, 7
     5cc:	fd cf       	rjmp	.-6      	; 0x5c8 <DataflashManager_ReadBlocks+0xc6>

				/* Send the Dataflash main memory page read command */
				Dataflash_SendByte(DF_CMD_MAINMEMPAGEREAD);
				Dataflash_SendAddressBytes(CurrDFPage, 0);
     5ce:	c8 01       	movw	r24, r16
     5d0:	60 e0       	ldi	r22, 0x00	; 0
     5d2:	70 e0       	ldi	r23, 0x00	; 0
     5d4:	03 df       	rcall	.-506    	; 0x3dc <Dataflash_SendAddressBytes>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     5d6:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     5d8:	0d b4       	in	r0, 0x2d	; 45
     5da:	07 fe       	sbrs	r0, 7
     5dc:	fd cf       	rjmp	.-6      	; 0x5d8 <DataflashManager_ReadBlocks+0xd6>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     5de:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     5e0:	0d b4       	in	r0, 0x2d	; 45
     5e2:	07 fe       	sbrs	r0, 7
     5e4:	fd cf       	rjmp	.-6      	; 0x5e0 <DataflashManager_ReadBlocks+0xde>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     5e6:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     5e8:	0d b4       	in	r0, 0x2d	; 45
     5ea:	07 fe       	sbrs	r0, 7
     5ec:	fd cf       	rjmp	.-6      	; 0x5e8 <DataflashManager_ReadBlocks+0xe6>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     5ee:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     5f0:	0d b4       	in	r0, 0x2d	; 45
     5f2:	07 fe       	sbrs	r0, 7
     5f4:	fd cf       	rjmp	.-6      	; 0x5f0 <DataflashManager_ReadBlocks+0xee>
     5f6:	90 e0       	ldi	r25, 0x00	; 0
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     5f8:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     5fa:	0d b4       	in	r0, 0x2d	; 45
     5fc:	07 fe       	sbrs	r0, 7
     5fe:	fd cf       	rjmp	.-6      	; 0x5fa <DataflashManager_ReadBlocks+0xf8>
				return SPDR;
     600:	8e b5       	in	r24, 0x2e	; 46
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     602:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     606:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     608:	0d b4       	in	r0, 0x2d	; 45
     60a:	07 fe       	sbrs	r0, 7
     60c:	fd cf       	rjmp	.-6      	; 0x608 <DataflashManager_ReadBlocks+0x106>
				return SPDR;
     60e:	8e b5       	in	r24, 0x2e	; 46
     610:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     614:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     616:	0d b4       	in	r0, 0x2d	; 45
     618:	07 fe       	sbrs	r0, 7
     61a:	fd cf       	rjmp	.-6      	; 0x616 <DataflashManager_ReadBlocks+0x114>
				return SPDR;
     61c:	8e b5       	in	r24, 0x2e	; 46
     61e:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     622:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     624:	0d b4       	in	r0, 0x2d	; 45
     626:	07 fe       	sbrs	r0, 7
     628:	fd cf       	rjmp	.-6      	; 0x624 <DataflashManager_ReadBlocks+0x122>
				return SPDR;
     62a:	8e b5       	in	r24, 0x2e	; 46
     62c:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     630:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     632:	0d b4       	in	r0, 0x2d	; 45
     634:	07 fe       	sbrs	r0, 7
     636:	fd cf       	rjmp	.-6      	; 0x632 <DataflashManager_ReadBlocks+0x130>
				return SPDR;
     638:	8e b5       	in	r24, 0x2e	; 46
     63a:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     63e:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     640:	0d b4       	in	r0, 0x2d	; 45
     642:	07 fe       	sbrs	r0, 7
     644:	fd cf       	rjmp	.-6      	; 0x640 <DataflashManager_ReadBlocks+0x13e>
				return SPDR;
     646:	8e b5       	in	r24, 0x2e	; 46
     648:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     64c:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     64e:	0d b4       	in	r0, 0x2d	; 45
     650:	07 fe       	sbrs	r0, 7
     652:	fd cf       	rjmp	.-6      	; 0x64e <DataflashManager_ReadBlocks+0x14c>
				return SPDR;
     654:	8e b5       	in	r24, 0x2e	; 46
     656:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     65a:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     65c:	0d b4       	in	r0, 0x2d	; 45
     65e:	07 fe       	sbrs	r0, 7
     660:	fd cf       	rjmp	.-6      	; 0x65c <DataflashManager_ReadBlocks+0x15a>
				return SPDR;
     662:	8e b5       	in	r24, 0x2e	; 46
     664:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     668:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     66a:	0d b4       	in	r0, 0x2d	; 45
     66c:	07 fe       	sbrs	r0, 7
     66e:	fd cf       	rjmp	.-6      	; 0x66a <DataflashManager_ReadBlocks+0x168>
				return SPDR;
     670:	8e b5       	in	r24, 0x2e	; 46
     672:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     676:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     678:	0d b4       	in	r0, 0x2d	; 45
     67a:	07 fe       	sbrs	r0, 7
     67c:	fd cf       	rjmp	.-6      	; 0x678 <DataflashManager_ReadBlocks+0x176>
				return SPDR;
     67e:	8e b5       	in	r24, 0x2e	; 46
     680:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     684:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     686:	0d b4       	in	r0, 0x2d	; 45
     688:	07 fe       	sbrs	r0, 7
     68a:	fd cf       	rjmp	.-6      	; 0x686 <DataflashManager_ReadBlocks+0x184>
				return SPDR;
     68c:	8e b5       	in	r24, 0x2e	; 46
     68e:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     692:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     694:	0d b4       	in	r0, 0x2d	; 45
     696:	07 fe       	sbrs	r0, 7
     698:	fd cf       	rjmp	.-6      	; 0x694 <DataflashManager_ReadBlocks+0x192>
				return SPDR;
     69a:	8e b5       	in	r24, 0x2e	; 46
     69c:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     6a0:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     6a2:	0d b4       	in	r0, 0x2d	; 45
     6a4:	07 fe       	sbrs	r0, 7
     6a6:	fd cf       	rjmp	.-6      	; 0x6a2 <DataflashManager_ReadBlocks+0x1a0>
				return SPDR;
     6a8:	8e b5       	in	r24, 0x2e	; 46
     6aa:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     6ae:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     6b0:	0d b4       	in	r0, 0x2d	; 45
     6b2:	07 fe       	sbrs	r0, 7
     6b4:	fd cf       	rjmp	.-6      	; 0x6b0 <DataflashManager_ReadBlocks+0x1ae>
				return SPDR;
     6b6:	8e b5       	in	r24, 0x2e	; 46
     6b8:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     6bc:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     6be:	0d b4       	in	r0, 0x2d	; 45
     6c0:	07 fe       	sbrs	r0, 7
     6c2:	fd cf       	rjmp	.-6      	; 0x6be <DataflashManager_ReadBlocks+0x1bc>
				return SPDR;
     6c4:	8e b5       	in	r24, 0x2e	; 46
     6c6:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     6ca:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     6cc:	0d b4       	in	r0, 0x2d	; 45
     6ce:	07 fe       	sbrs	r0, 7
     6d0:	fd cf       	rjmp	.-6      	; 0x6cc <DataflashManager_ReadBlocks+0x1ca>
				return SPDR;
     6d2:	8e b5       	in	r24, 0x2e	; 46
     6d4:	80 93 f1 00 	sts	0x00F1, r24

			/* Increment the block 16 byte block counter */
			BytesInBlockDiv16++;

			/* Check if the current command is being aborted by the host */
			if (MSInterfaceInfo->State.IsMassStoreReset)
     6d8:	f5 01       	movw	r30, r10
     6da:	86 a9       	ldd	r24, Z+54	; 0x36
     6dc:	88 23       	and	r24, r24
     6de:	c9 f4       	brne	.+50     	; 0x712 <DataflashManager_ReadBlocks+0x210>
			Endpoint_Write_8(Dataflash_ReceiveByte());
			Endpoint_Write_8(Dataflash_ReceiveByte());
			Endpoint_Write_8(Dataflash_ReceiveByte());

			/* Increment the Dataflash page 16 byte block counter */
			CurrDFPageByteDiv16++;
     6e0:	9f 5f       	subi	r25, 0xFF	; 255

			/* Increment the block 16 byte block counter */
			BytesInBlockDiv16++;
     6e2:	d3 94       	inc	r13
	while (TotalBlocks)
	{
		uint8_t BytesInBlockDiv16 = 0;

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
     6e4:	f0 e2       	ldi	r31, 0x20	; 32
     6e6:	df 16       	cp	r13, r31
     6e8:	09 f0       	breq	.+2      	; 0x6ec <DataflashManager_ReadBlocks+0x1ea>
     6ea:	58 cf       	rjmp	.-336    	; 0x59c <DataflashManager_ReadBlocks+0x9a>
			if (MSInterfaceInfo->State.IsMassStoreReset)
			  return;
		}

		/* Decrement the blocks remaining counter */
		TotalBlocks--;
     6ec:	08 94       	sec
     6ee:	e1 08       	sbc	r14, r1
     6f0:	f1 08       	sbc	r15, r1

	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
	  return;

	while (TotalBlocks)
     6f2:	e1 14       	cp	r14, r1
     6f4:	f1 04       	cpc	r15, r1
     6f6:	09 f0       	breq	.+2      	; 0x6fa <DataflashManager_ReadBlocks+0x1f8>
     6f8:	50 cf       	rjmp	.-352    	; 0x59a <DataflashManager_ReadBlocks+0x98>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     6fa:	80 91 e8 00 	lds	r24, 0x00E8
		/* Decrement the blocks remaining counter */
		TotalBlocks--;
	}

	/* If the endpoint is full, send its contents to the host */
	if (!(Endpoint_IsReadWriteAllowed()))
     6fe:	85 fd       	sbrc	r24, 5
     700:	05 c0       	rjmp	.+10     	; 0x70c <DataflashManager_ReadBlocks+0x20a>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     702:	80 91 e8 00 	lds	r24, 0x00E8
     706:	8e 77       	andi	r24, 0x7E	; 126
     708:	80 93 e8 00 	sts	0x00E8, r24
     70c:	8e b1       	in	r24, 0x0e	; 14
     70e:	83 60       	ori	r24, 0x03	; 3
     710:	8e b9       	out	0x0e, r24	; 14
	  Endpoint_ClearIN();

	/* Deselect all Dataflash chips */
	Dataflash_DeselectChip();
}
     712:	0f 90       	pop	r0
     714:	cf 91       	pop	r28
     716:	df 91       	pop	r29
     718:	1f 91       	pop	r17
     71a:	0f 91       	pop	r16
     71c:	ff 90       	pop	r15
     71e:	ef 90       	pop	r14
     720:	df 90       	pop	r13
     722:	cf 90       	pop	r12
     724:	bf 90       	pop	r11
     726:	af 90       	pop	r10
     728:	08 95       	ret

0000072a <DataflashManager_WriteBlocks>:
 *  \param[in] TotalBlocks   Number of blocks of data to write
 */
void DataflashManager_WriteBlocks(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo,
                                  const uint32_t BlockAddress,
                                  uint16_t TotalBlocks)
{
     72a:	8f 92       	push	r8
     72c:	9f 92       	push	r9
     72e:	af 92       	push	r10
     730:	bf 92       	push	r11
     732:	cf 92       	push	r12
     734:	df 92       	push	r13
     736:	ef 92       	push	r14
     738:	ff 92       	push	r15
     73a:	0f 93       	push	r16
     73c:	1f 93       	push	r17
     73e:	df 93       	push	r29
     740:	cf 93       	push	r28
     742:	0f 92       	push	r0
     744:	cd b7       	in	r28, 0x3d	; 61
     746:	de b7       	in	r29, 0x3e	; 62
     748:	5c 01       	movw	r10, r24
     74a:	79 01       	movw	r14, r18
	uint16_t CurrDFPage          = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) / DATAFLASH_PAGE_SIZE);
     74c:	09 e0       	ldi	r16, 0x09	; 9
     74e:	44 0f       	add	r20, r20
     750:	55 1f       	adc	r21, r21
     752:	66 1f       	adc	r22, r22
     754:	77 1f       	adc	r23, r23
     756:	0a 95       	dec	r16
     758:	d1 f7       	brne	.-12     	; 0x74e <DataflashManager_WriteBlocks+0x24>
     75a:	db 01       	movw	r26, r22
     75c:	ca 01       	movw	r24, r20
     75e:	1a e0       	ldi	r17, 0x0A	; 10
     760:	b6 95       	lsr	r27
     762:	a7 95       	ror	r26
     764:	97 95       	ror	r25
     766:	87 95       	ror	r24
     768:	1a 95       	dec	r17
     76a:	d1 f7       	brne	.-12     	; 0x760 <DataflashManager_WriteBlocks+0x36>
     76c:	8c 01       	movw	r16, r24
	uint16_t CurrDFPageByte      = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) % DATAFLASH_PAGE_SIZE);
     76e:	bf ef       	ldi	r27, 0xFF	; 255
     770:	cb 2e       	mov	r12, r27
     772:	b3 e0       	ldi	r27, 0x03	; 3
     774:	db 2e       	mov	r13, r27
     776:	c4 22       	and	r12, r20
     778:	d5 22       	and	r13, r21
	uint8_t  CurrDFPageByteDiv16 = (CurrDFPageByte >> 4);
	bool     UsingSecondBuffer   = false;

	/* Select the correct starting Dataflash IC for the block requested */
	Dataflash_SelectChipFromPage(CurrDFPage);
     77a:	04 de       	rcall	.-1016   	; 0x384 <Dataflash_SelectChipFromPage>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     77c:	83 e5       	ldi	r24, 0x53	; 83
     77e:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     780:	0d b4       	in	r0, 0x2d	; 45
     782:	07 fe       	sbrs	r0, 7
     784:	fd cf       	rjmp	.-6      	; 0x780 <DataflashManager_WriteBlocks+0x56>

#if (DATAFLASH_PAGE_SIZE > VIRTUAL_MEMORY_BLOCK_SIZE)
	/* Copy selected dataflash's current page contents to the Dataflash buffer */
	Dataflash_SendByte(DF_CMD_MAINMEMTOBUFF1);
	Dataflash_SendAddressBytes(CurrDFPage, 0);
     786:	c8 01       	movw	r24, r16
     788:	60 e0       	ldi	r22, 0x00	; 0
     78a:	70 e0       	ldi	r23, 0x00	; 0
     78c:	27 de       	rcall	.-946    	; 0x3dc <Dataflash_SendAddressBytes>
	Dataflash_WaitWhileBusy();
     78e:	18 de       	rcall	.-976    	; 0x3c0 <Dataflash_WaitWhileBusy>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     790:	84 e8       	ldi	r24, 0x84	; 132
     792:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     794:	0d b4       	in	r0, 0x2d	; 45
     796:	07 fe       	sbrs	r0, 7
     798:	fd cf       	rjmp	.-6      	; 0x794 <DataflashManager_WriteBlocks+0x6a>
#endif

	/* Send the Dataflash buffer write command */
	Dataflash_SendByte(DF_CMD_BUFF1WRITE);
	Dataflash_SendAddressBytes(0, CurrDFPageByte);
     79a:	80 e0       	ldi	r24, 0x00	; 0
     79c:	90 e0       	ldi	r25, 0x00	; 0
     79e:	b6 01       	movw	r22, r12
     7a0:	1d de       	rcall	.-966    	; 0x3dc <Dataflash_SendAddressBytes>

	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
     7a2:	bd d2       	rcall	.+1402   	; 0xd1e <Endpoint_WaitUntilReady>
     7a4:	88 23       	and	r24, r24
     7a6:	09 f0       	breq	.+2      	; 0x7aa <DataflashManager_WriteBlocks+0x80>
     7a8:	ea c0       	rjmp	.+468    	; 0x97e <DataflashManager_WriteBlocks+0x254>
                                  const uint32_t BlockAddress,
                                  uint16_t TotalBlocks)
{
	uint16_t CurrDFPage          = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) / DATAFLASH_PAGE_SIZE);
	uint16_t CurrDFPageByte      = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) % DATAFLASH_PAGE_SIZE);
	uint8_t  CurrDFPageByteDiv16 = (CurrDFPageByte >> 4);
     7aa:	a4 e0       	ldi	r26, 0x04	; 4
     7ac:	d6 94       	lsr	r13
     7ae:	c7 94       	ror	r12
     7b0:	aa 95       	dec	r26
     7b2:	e1 f7       	brne	.-8      	; 0x7ac <DataflashManager_WriteBlocks+0x82>
     7b4:	9c 2d       	mov	r25, r12
     7b6:	47 01       	movw	r8, r14
     7b8:	f5 e0       	ldi	r31, 0x05	; 5
     7ba:	88 0c       	add	r8, r8
     7bc:	99 1c       	adc	r9, r9
     7be:	fa 95       	dec	r31
     7c0:	e1 f7       	brne	.-8      	; 0x7ba <DataflashManager_WriteBlocks+0x90>
     7c2:	dd 24       	eor	r13, r13
     7c4:	bd c0       	rjmp	.+378    	; 0x940 <DataflashManager_WriteBlocks+0x216>
     7c6:	cc 24       	eor	r12, r12
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     7c8:	80 91 e8 00 	lds	r24, 0x00E8

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
		{
			/* Check if the endpoint is currently empty */
			if (!(Endpoint_IsReadWriteAllowed()))
     7cc:	85 fd       	sbrc	r24, 5
     7ce:	0b c0       	rjmp	.+22     	; 0x7e6 <DataflashManager_WriteBlocks+0xbc>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     7d0:	80 91 e8 00 	lds	r24, 0x00E8
     7d4:	8b 77       	andi	r24, 0x7B	; 123
     7d6:	80 93 e8 00 	sts	0x00E8, r24
			{
				/* Clear the current endpoint bank */
				Endpoint_ClearOUT();

				/* Wait until the host has sent another packet */
				if (Endpoint_WaitUntilReady())
     7da:	99 83       	std	Y+1, r25	; 0x01
     7dc:	a0 d2       	rcall	.+1344   	; 0xd1e <Endpoint_WaitUntilReady>
     7de:	99 81       	ldd	r25, Y+1	; 0x01
     7e0:	88 23       	and	r24, r24
     7e2:	09 f0       	breq	.+2      	; 0x7e6 <DataflashManager_WriteBlocks+0xbc>
     7e4:	cc c0       	rjmp	.+408    	; 0x97e <DataflashManager_WriteBlocks+0x254>
				  return;
			}

			/* Check if end of Dataflash page reached */
			if (CurrDFPageByteDiv16 == (DATAFLASH_PAGE_SIZE >> 4))
     7e6:	90 34       	cpi	r25, 0x40	; 64
     7e8:	09 f0       	breq	.+2      	; 0x7ec <DataflashManager_WriteBlocks+0xc2>
     7ea:	39 c0       	rjmp	.+114    	; 0x85e <DataflashManager_WriteBlocks+0x134>
			{
				/* Write the Dataflash buffer contents back to the Dataflash page */
				Dataflash_WaitWhileBusy();
     7ec:	e9 dd       	rcall	.-1070   	; 0x3c0 <Dataflash_WaitWhileBusy>
				Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_BUFF2TOMAINMEMWITHERASE : DF_CMD_BUFF1TOMAINMEMWITHERASE);
     7ee:	dd 20       	and	r13, r13
     7f0:	11 f4       	brne	.+4      	; 0x7f6 <DataflashManager_WriteBlocks+0xcc>
     7f2:	83 e8       	ldi	r24, 0x83	; 131
     7f4:	01 c0       	rjmp	.+2      	; 0x7f8 <DataflashManager_WriteBlocks+0xce>
     7f6:	86 e8       	ldi	r24, 0x86	; 134
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     7f8:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     7fa:	0d b4       	in	r0, 0x2d	; 45
     7fc:	07 fe       	sbrs	r0, 7
     7fe:	fd cf       	rjmp	.-6      	; 0x7fa <DataflashManager_WriteBlocks+0xd0>
				Dataflash_SendAddressBytes(CurrDFPage, 0);
     800:	c8 01       	movw	r24, r16
     802:	60 e0       	ldi	r22, 0x00	; 0
     804:	70 e0       	ldi	r23, 0x00	; 0
     806:	ea dd       	rcall	.-1068   	; 0x3dc <Dataflash_SendAddressBytes>

				/* Reset the Dataflash buffer counter, increment the page counter */
				CurrDFPageByteDiv16 = 0;
				CurrDFPage++;
     808:	0f 5f       	subi	r16, 0xFF	; 255
     80a:	1f 4f       	sbci	r17, 0xFF	; 255
			 *  or a DATAFLASH_CHIPn mask (where n is the chip number).
			 */
			static inline uint8_t Dataflash_GetSelectedChip(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Dataflash_GetSelectedChip(void)
			{
				return (DATAFLASH_CHIPCS_PORT & DATAFLASH_CHIPCS_MASK);
     80c:	8e b1       	in	r24, 0x0e	; 14

				/* Once all the Dataflash ICs have had their first buffers filled, switch buffers to maintain throughput */
				if (Dataflash_GetSelectedChip() == DATAFLASH_CHIP_MASK(DATAFLASH_TOTALCHIPS))
     80e:	83 70       	andi	r24, 0x03	; 3
     810:	81 30       	cpi	r24, 0x01	; 1
     812:	09 f4       	brne	.+2      	; 0x816 <DataflashManager_WriteBlocks+0xec>
				  UsingSecondBuffer = !(UsingSecondBuffer);
     814:	d8 26       	eor	r13, r24

				/* Select the next Dataflash chip based on the new Dataflash page index */
				Dataflash_SelectChipFromPage(CurrDFPage);
     816:	c8 01       	movw	r24, r16
     818:	b5 dd       	rcall	.-1174   	; 0x384 <Dataflash_SelectChipFromPage>

#if (DATAFLASH_PAGE_SIZE > VIRTUAL_MEMORY_BLOCK_SIZE)
				/* If less than one Dataflash page remaining, copy over the existing page to preserve trailing data */
				if ((TotalBlocks * (VIRTUAL_MEMORY_BLOCK_SIZE >> 4)) < (DATAFLASH_PAGE_SIZE >> 4))
     81a:	20 e4       	ldi	r18, 0x40	; 64
     81c:	82 16       	cp	r8, r18
     81e:	91 04       	cpc	r9, r1
     820:	78 f4       	brcc	.+30     	; 0x840 <DataflashManager_WriteBlocks+0x116>
				{
					/* Copy selected dataflash's current page contents to the Dataflash buffer */
					Dataflash_WaitWhileBusy();
     822:	ce dd       	rcall	.-1124   	; 0x3c0 <Dataflash_WaitWhileBusy>
					Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_MAINMEMTOBUFF2 : DF_CMD_MAINMEMTOBUFF1);
     824:	dd 20       	and	r13, r13
     826:	11 f4       	brne	.+4      	; 0x82c <DataflashManager_WriteBlocks+0x102>
     828:	83 e5       	ldi	r24, 0x53	; 83
     82a:	01 c0       	rjmp	.+2      	; 0x82e <DataflashManager_WriteBlocks+0x104>
     82c:	85 e5       	ldi	r24, 0x55	; 85
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     82e:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     830:	0d b4       	in	r0, 0x2d	; 45
     832:	07 fe       	sbrs	r0, 7
     834:	fd cf       	rjmp	.-6      	; 0x830 <DataflashManager_WriteBlocks+0x106>
					Dataflash_SendAddressBytes(CurrDFPage, 0);
     836:	c8 01       	movw	r24, r16
     838:	60 e0       	ldi	r22, 0x00	; 0
     83a:	70 e0       	ldi	r23, 0x00	; 0
     83c:	cf dd       	rcall	.-1122   	; 0x3dc <Dataflash_SendAddressBytes>
					Dataflash_WaitWhileBusy();
     83e:	c0 dd       	rcall	.-1152   	; 0x3c0 <Dataflash_WaitWhileBusy>
				}
#endif

				/* Send the Dataflash buffer write command */
				Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_BUFF2WRITE : DF_CMD_BUFF1WRITE);
     840:	dd 20       	and	r13, r13
     842:	11 f4       	brne	.+4      	; 0x848 <DataflashManager_WriteBlocks+0x11e>
     844:	84 e8       	ldi	r24, 0x84	; 132
     846:	01 c0       	rjmp	.+2      	; 0x84a <DataflashManager_WriteBlocks+0x120>
     848:	87 e8       	ldi	r24, 0x87	; 135
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     84a:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     84c:	0d b4       	in	r0, 0x2d	; 45
     84e:	07 fe       	sbrs	r0, 7
     850:	fd cf       	rjmp	.-6      	; 0x84c <DataflashManager_WriteBlocks+0x122>
				Dataflash_SendAddressBytes(0, 0);
     852:	80 e0       	ldi	r24, 0x00	; 0
     854:	90 e0       	ldi	r25, 0x00	; 0
     856:	60 e0       	ldi	r22, 0x00	; 0
     858:	70 e0       	ldi	r23, 0x00	; 0
     85a:	c0 dd       	rcall	.-1152   	; 0x3dc <Dataflash_SendAddressBytes>
     85c:	90 e0       	ldi	r25, 0x00	; 0
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     85e:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     862:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     864:	0d b4       	in	r0, 0x2d	; 45
     866:	07 fe       	sbrs	r0, 7
     868:	fd cf       	rjmp	.-6      	; 0x864 <DataflashManager_WriteBlocks+0x13a>
     86a:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     86e:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     870:	0d b4       	in	r0, 0x2d	; 45
     872:	07 fe       	sbrs	r0, 7
     874:	fd cf       	rjmp	.-6      	; 0x870 <DataflashManager_WriteBlocks+0x146>
     876:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     87a:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     87c:	0d b4       	in	r0, 0x2d	; 45
     87e:	07 fe       	sbrs	r0, 7
     880:	fd cf       	rjmp	.-6      	; 0x87c <DataflashManager_WriteBlocks+0x152>
     882:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     886:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     888:	0d b4       	in	r0, 0x2d	; 45
     88a:	07 fe       	sbrs	r0, 7
     88c:	fd cf       	rjmp	.-6      	; 0x888 <DataflashManager_WriteBlocks+0x15e>
     88e:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     892:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     894:	0d b4       	in	r0, 0x2d	; 45
     896:	07 fe       	sbrs	r0, 7
     898:	fd cf       	rjmp	.-6      	; 0x894 <DataflashManager_WriteBlocks+0x16a>
     89a:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     89e:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     8a0:	0d b4       	in	r0, 0x2d	; 45
     8a2:	07 fe       	sbrs	r0, 7
     8a4:	fd cf       	rjmp	.-6      	; 0x8a0 <DataflashManager_WriteBlocks+0x176>
     8a6:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     8aa:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     8ac:	0d b4       	in	r0, 0x2d	; 45
     8ae:	07 fe       	sbrs	r0, 7
     8b0:	fd cf       	rjmp	.-6      	; 0x8ac <DataflashManager_WriteBlocks+0x182>
     8b2:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     8b6:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     8b8:	0d b4       	in	r0, 0x2d	; 45
     8ba:	07 fe       	sbrs	r0, 7
     8bc:	fd cf       	rjmp	.-6      	; 0x8b8 <DataflashManager_WriteBlocks+0x18e>
     8be:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     8c2:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     8c4:	0d b4       	in	r0, 0x2d	; 45
     8c6:	07 fe       	sbrs	r0, 7
     8c8:	fd cf       	rjmp	.-6      	; 0x8c4 <DataflashManager_WriteBlocks+0x19a>
     8ca:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     8ce:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     8d0:	0d b4       	in	r0, 0x2d	; 45
     8d2:	07 fe       	sbrs	r0, 7
     8d4:	fd cf       	rjmp	.-6      	; 0x8d0 <DataflashManager_WriteBlocks+0x1a6>
     8d6:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     8da:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     8dc:	0d b4       	in	r0, 0x2d	; 45
     8de:	07 fe       	sbrs	r0, 7
     8e0:	fd cf       	rjmp	.-6      	; 0x8dc <DataflashManager_WriteBlocks+0x1b2>
     8e2:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     8e6:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     8e8:	0d b4       	in	r0, 0x2d	; 45
     8ea:	07 fe       	sbrs	r0, 7
     8ec:	fd cf       	rjmp	.-6      	; 0x8e8 <DataflashManager_WriteBlocks+0x1be>
     8ee:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     8f2:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     8f4:	0d b4       	in	r0, 0x2d	; 45
     8f6:	07 fe       	sbrs	r0, 7
     8f8:	fd cf       	rjmp	.-6      	; 0x8f4 <DataflashManager_WriteBlocks+0x1ca>
     8fa:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     8fe:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     900:	0d b4       	in	r0, 0x2d	; 45
     902:	07 fe       	sbrs	r0, 7
     904:	fd cf       	rjmp	.-6      	; 0x900 <DataflashManager_WriteBlocks+0x1d6>
     906:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     90a:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     90c:	0d b4       	in	r0, 0x2d	; 45
     90e:	07 fe       	sbrs	r0, 7
     910:	fd cf       	rjmp	.-6      	; 0x90c <DataflashManager_WriteBlocks+0x1e2>
     912:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     916:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     918:	0d b4       	in	r0, 0x2d	; 45
     91a:	07 fe       	sbrs	r0, 7
     91c:	fd cf       	rjmp	.-6      	; 0x918 <DataflashManager_WriteBlocks+0x1ee>

			/* Increment the block 16 byte block counter */
			BytesInBlockDiv16++;

			/* Check if the current command is being aborted by the host */
			if (MSInterfaceInfo->State.IsMassStoreReset)
     91e:	f5 01       	movw	r30, r10
     920:	86 a9       	ldd	r24, Z+54	; 0x36
     922:	88 23       	and	r24, r24
     924:	61 f5       	brne	.+88     	; 0x97e <DataflashManager_WriteBlocks+0x254>
			Dataflash_SendByte(Endpoint_Read_8());
			Dataflash_SendByte(Endpoint_Read_8());
			Dataflash_SendByte(Endpoint_Read_8());

			/* Increment the Dataflash page 16 byte block counter */
			CurrDFPageByteDiv16++;
     926:	9f 5f       	subi	r25, 0xFF	; 255

			/* Increment the block 16 byte block counter */
			BytesInBlockDiv16++;
     928:	c3 94       	inc	r12
	while (TotalBlocks)
	{
		uint8_t BytesInBlockDiv16 = 0;

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
     92a:	f0 e2       	ldi	r31, 0x20	; 32
     92c:	cf 16       	cp	r12, r31
     92e:	09 f0       	breq	.+2      	; 0x932 <DataflashManager_WriteBlocks+0x208>
     930:	4b cf       	rjmp	.-362    	; 0x7c8 <DataflashManager_WriteBlocks+0x9e>
			if (MSInterfaceInfo->State.IsMassStoreReset)
			  return;
		}

		/* Decrement the blocks remaining counter */
		TotalBlocks--;
     932:	08 94       	sec
     934:	e1 08       	sbc	r14, r1
     936:	f1 08       	sbc	r15, r1
     938:	20 ee       	ldi	r18, 0xE0	; 224
     93a:	3f ef       	ldi	r19, 0xFF	; 255
     93c:	82 0e       	add	r8, r18
     93e:	93 1e       	adc	r9, r19

	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
	  return;

	while (TotalBlocks)
     940:	e1 14       	cp	r14, r1
     942:	f1 04       	cpc	r15, r1
     944:	09 f0       	breq	.+2      	; 0x948 <DataflashManager_WriteBlocks+0x21e>
     946:	3f cf       	rjmp	.-386    	; 0x7c6 <DataflashManager_WriteBlocks+0x9c>
		/* Decrement the blocks remaining counter */
		TotalBlocks--;
	}

	/* Write the Dataflash buffer contents back to the Dataflash page */
	Dataflash_WaitWhileBusy();
     948:	3b dd       	rcall	.-1418   	; 0x3c0 <Dataflash_WaitWhileBusy>
	Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_BUFF2TOMAINMEMWITHERASE : DF_CMD_BUFF1TOMAINMEMWITHERASE);
     94a:	dd 20       	and	r13, r13
     94c:	11 f4       	brne	.+4      	; 0x952 <DataflashManager_WriteBlocks+0x228>
     94e:	83 e8       	ldi	r24, 0x83	; 131
     950:	01 c0       	rjmp	.+2      	; 0x954 <DataflashManager_WriteBlocks+0x22a>
     952:	86 e8       	ldi	r24, 0x86	; 134
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     954:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     956:	0d b4       	in	r0, 0x2d	; 45
     958:	07 fe       	sbrs	r0, 7
     95a:	fd cf       	rjmp	.-6      	; 0x956 <DataflashManager_WriteBlocks+0x22c>
	Dataflash_SendAddressBytes(CurrDFPage, 0x00);
     95c:	c8 01       	movw	r24, r16
     95e:	60 e0       	ldi	r22, 0x00	; 0
     960:	70 e0       	ldi	r23, 0x00	; 0
     962:	3c dd       	rcall	.-1416   	; 0x3dc <Dataflash_SendAddressBytes>
	Dataflash_WaitWhileBusy();
     964:	2d dd       	rcall	.-1446   	; 0x3c0 <Dataflash_WaitWhileBusy>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     966:	80 91 e8 00 	lds	r24, 0x00E8

	/* If the endpoint is empty, clear it ready for the next packet from the host */
	if (!(Endpoint_IsReadWriteAllowed()))
     96a:	85 fd       	sbrc	r24, 5
     96c:	05 c0       	rjmp	.+10     	; 0x978 <DataflashManager_WriteBlocks+0x24e>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     96e:	80 91 e8 00 	lds	r24, 0x00E8
     972:	8b 77       	andi	r24, 0x7B	; 123
     974:	80 93 e8 00 	sts	0x00E8, r24
			 *              the chip number).
			 */
			static inline void Dataflash_SelectChip(const uint8_t ChipMask) ATTR_ALWAYS_INLINE;
			static inline void Dataflash_SelectChip(const uint8_t ChipMask)
			{
				DATAFLASH_CHIPCS_PORT = ((DATAFLASH_CHIPCS_PORT & ~DATAFLASH_CHIPCS_MASK) | ChipMask);
     978:	8e b1       	in	r24, 0x0e	; 14
     97a:	83 60       	ori	r24, 0x03	; 3
     97c:	8e b9       	out	0x0e, r24	; 14
	  Endpoint_ClearOUT();

	/* Deselect all Dataflash chips */
	Dataflash_DeselectChip();
}
     97e:	0f 90       	pop	r0
     980:	cf 91       	pop	r28
     982:	df 91       	pop	r29
     984:	1f 91       	pop	r17
     986:	0f 91       	pop	r16
     988:	ff 90       	pop	r15
     98a:	ef 90       	pop	r14
     98c:	df 90       	pop	r13
     98e:	cf 90       	pop	r12
     990:	bf 90       	pop	r11
     992:	af 90       	pop	r10
     994:	9f 90       	pop	r9
     996:	8f 90       	pop	r8
     998:	08 95       	ret

0000099a <SCSI_Command_ReadWrite_10>:
 *
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_ReadWrite_10(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo,
                                      const bool IsDataRead)
{
     99a:	0f 93       	push	r16
     99c:	1f 93       	push	r17
     99e:	cf 93       	push	r28
     9a0:	df 93       	push	r29
     9a2:	8c 01       	movw	r16, r24
     9a4:	86 2f       	mov	r24, r22

				Temp = Data.Bytes[1];
				Data.Bytes[1] = Data.Bytes[2];
				Data.Bytes[2] = Temp;

				return Data.DWord;
     9a6:	f8 01       	movw	r30, r16
     9a8:	46 8d       	ldd	r20, Z+30	; 0x1e
     9aa:	55 8d       	ldd	r21, Z+29	; 0x1d
     9ac:	64 8d       	ldd	r22, Z+28	; 0x1c
     9ae:	73 8d       	ldd	r23, Z+27	; 0x1b

				Temp = Data.Bytes[0];
				Data.Bytes[0] = Data.Bytes[1];
				Data.Bytes[1] = Temp;

				return Data.Word;
     9b0:	c1 a1       	ldd	r28, Z+33	; 0x21
     9b2:	d0 a1       	ldd	r29, Z+32	; 0x20

	/* Load in the 16-bit total blocks (SCSI uses big-endian, so have to reverse the byte order) */
	TotalBlocks  = SwapEndian_16(*(uint16_t*)&MSInterfaceInfo->State.CommandBlock.SCSICommandData[7]);

	/* Check if the block address is outside the maximum allowable value for the LUN */
	if (BlockAddress >= LUN_MEDIA_BLOCKS)
     9b4:	40 30       	cpi	r20, 0x00	; 0
     9b6:	f0 e8       	ldi	r31, 0x80	; 128
     9b8:	5f 07       	cpc	r21, r31
     9ba:	f0 e0       	ldi	r31, 0x00	; 0
     9bc:	6f 07       	cpc	r22, r31
     9be:	f0 e0       	ldi	r31, 0x00	; 0
     9c0:	7f 07       	cpc	r23, r31
     9c2:	68 f0       	brcs	.+26     	; 0x9de <SCSI_Command_ReadWrite_10+0x44>
	{
		/* Block address is invalid, update SENSE key and return command fail */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
     9c4:	80 91 a1 01 	lds	r24, 0x01A1
     9c8:	80 7f       	andi	r24, 0xF0	; 240
     9ca:	85 60       	ori	r24, 0x05	; 5
     9cc:	80 93 a1 01 	sts	0x01A1, r24
     9d0:	81 e2       	ldi	r24, 0x21	; 33
     9d2:	80 93 ab 01 	sts	0x01AB, r24
     9d6:	10 92 ac 01 	sts	0x01AC, r1
     9da:	80 e0       	ldi	r24, 0x00	; 0
     9dc:	21 c0       	rjmp	.+66     	; 0xa20 <SCSI_Command_ReadWrite_10+0x86>
	/* Adjust the given block address to the real media address based on the selected LUN */
	BlockAddress += ((uint32_t)MSInterfaceInfo->State.CommandBlock.LUN * LUN_MEDIA_BLOCKS);
	#endif
	
	/* Determine if the packet is a READ (10) or WRITE (10) command, call appropriate function */
	if (IsDataRead == DATA_READ)
     9de:	88 23       	and	r24, r24
     9e0:	21 f0       	breq	.+8      	; 0x9ea <SCSI_Command_ReadWrite_10+0x50>
	  DataflashManager_ReadBlocks(MSInterfaceInfo, BlockAddress, TotalBlocks);
     9e2:	c8 01       	movw	r24, r16
     9e4:	9e 01       	movw	r18, r28
     9e6:	8d dd       	rcall	.-1254   	; 0x502 <DataflashManager_ReadBlocks>
     9e8:	03 c0       	rjmp	.+6      	; 0x9f0 <SCSI_Command_ReadWrite_10+0x56>
	else
	  DataflashManager_WriteBlocks(MSInterfaceInfo, BlockAddress, TotalBlocks);
     9ea:	c8 01       	movw	r24, r16
     9ec:	9e 01       	movw	r18, r28
     9ee:	9d de       	rcall	.-710    	; 0x72a <DataflashManager_WriteBlocks>

	/* Update the bytes transferred counter and succeed the command */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= ((uint32_t)TotalBlocks * VIRTUAL_MEMORY_BLOCK_SIZE);
     9f0:	9e 01       	movw	r18, r28
     9f2:	40 e0       	ldi	r20, 0x00	; 0
     9f4:	50 e0       	ldi	r21, 0x00	; 0
     9f6:	89 e0       	ldi	r24, 0x09	; 9
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	8a 95       	dec	r24
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <SCSI_Command_ReadWrite_10+0x5e>
     a04:	f8 01       	movw	r30, r16
     a06:	82 89       	ldd	r24, Z+18	; 0x12
     a08:	93 89       	ldd	r25, Z+19	; 0x13
     a0a:	a4 89       	ldd	r26, Z+20	; 0x14
     a0c:	b5 89       	ldd	r27, Z+21	; 0x15
     a0e:	82 1b       	sub	r24, r18
     a10:	93 0b       	sbc	r25, r19
     a12:	a4 0b       	sbc	r26, r20
     a14:	b5 0b       	sbc	r27, r21
     a16:	82 8b       	std	Z+18, r24	; 0x12
     a18:	93 8b       	std	Z+19, r25	; 0x13
     a1a:	a4 8b       	std	Z+20, r26	; 0x14
     a1c:	b5 8b       	std	Z+21, r27	; 0x15
     a1e:	81 e0       	ldi	r24, 0x01	; 1

	return true;
}
     a20:	df 91       	pop	r29
     a22:	cf 91       	pop	r28
     a24:	1f 91       	pop	r17
     a26:	0f 91       	pop	r16
     a28:	08 95       	ret

00000a2a <SCSI_DecodeSCSICommand>:
 *  \param[in] MSInterfaceInfo  Pointer to the Mass Storage class interface structure that the command is associated with
 *
 *  \return Boolean true if the command completed successfully, false otherwise
 */
bool SCSI_DecodeSCSICommand(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
     a2a:	cf 92       	push	r12
     a2c:	df 92       	push	r13
     a2e:	ef 92       	push	r14
     a30:	ff 92       	push	r15
     a32:	0f 93       	push	r16
     a34:	1f 93       	push	r17
     a36:	df 93       	push	r29
     a38:	cf 93       	push	r28
     a3a:	cd b7       	in	r28, 0x3d	; 61
     a3c:	de b7       	in	r29, 0x3e	; 62
     a3e:	28 97       	sbiw	r28, 0x08	; 8
     a40:	0f b6       	in	r0, 0x3f	; 63
     a42:	f8 94       	cli
     a44:	de bf       	out	0x3e, r29	; 62
     a46:	0f be       	out	0x3f, r0	; 63
     a48:	cd bf       	out	0x3d, r28	; 61
     a4a:	7c 01       	movw	r14, r24
	bool CommandSuccess = false;

	/* Run the appropriate SCSI command hander function based on the passed command */
	switch (MSInterfaceInfo->State.CommandBlock.SCSICommandData[0])
     a4c:	fc 01       	movw	r30, r24
     a4e:	81 8d       	ldd	r24, Z+25	; 0x19
     a50:	8d 31       	cpi	r24, 0x1D	; 29
     a52:	09 f4       	brne	.+2      	; 0xa56 <SCSI_DecodeSCSICommand+0x2c>
     a54:	a6 c0       	rjmp	.+332    	; 0xba2 <SCSI_DecodeSCSICommand+0x178>
     a56:	8e 31       	cpi	r24, 0x1E	; 30
     a58:	78 f4       	brcc	.+30     	; 0xa78 <SCSI_DecodeSCSICommand+0x4e>
     a5a:	83 30       	cpi	r24, 0x03	; 3
     a5c:	09 f4       	brne	.+2      	; 0xa60 <SCSI_DecodeSCSICommand+0x36>
     a5e:	52 c0       	rjmp	.+164    	; 0xb04 <SCSI_DecodeSCSICommand+0xda>
     a60:	84 30       	cpi	r24, 0x04	; 4
     a62:	20 f4       	brcc	.+8      	; 0xa6c <SCSI_DecodeSCSICommand+0x42>
     a64:	88 23       	and	r24, r24
     a66:	09 f4       	brne	.+2      	; 0xa6a <SCSI_DecodeSCSICommand+0x40>
     a68:	d9 c0       	rjmp	.+434    	; 0xc1c <SCSI_DecodeSCSICommand+0x1f2>
     a6a:	de c0       	rjmp	.+444    	; 0xc28 <SCSI_DecodeSCSICommand+0x1fe>
     a6c:	82 31       	cpi	r24, 0x12	; 18
     a6e:	b9 f0       	breq	.+46     	; 0xa9e <SCSI_DecodeSCSICommand+0x74>
     a70:	8a 31       	cpi	r24, 0x1A	; 26
     a72:	09 f0       	breq	.+2      	; 0xa76 <SCSI_DecodeSCSICommand+0x4c>
     a74:	d9 c0       	rjmp	.+434    	; 0xc28 <SCSI_DecodeSCSICommand+0x1fe>
     a76:	b8 c0       	rjmp	.+368    	; 0xbe8 <SCSI_DecodeSCSICommand+0x1be>
     a78:	88 32       	cpi	r24, 0x28	; 40
     a7a:	09 f4       	brne	.+2      	; 0xa7e <SCSI_DecodeSCSICommand+0x54>
     a7c:	af c0       	rjmp	.+350    	; 0xbdc <SCSI_DecodeSCSICommand+0x1b2>
     a7e:	89 32       	cpi	r24, 0x29	; 41
     a80:	38 f4       	brcc	.+14     	; 0xa90 <SCSI_DecodeSCSICommand+0x66>
     a82:	8e 31       	cpi	r24, 0x1E	; 30
     a84:	09 f4       	brne	.+2      	; 0xa88 <SCSI_DecodeSCSICommand+0x5e>
     a86:	ca c0       	rjmp	.+404    	; 0xc1c <SCSI_DecodeSCSICommand+0x1f2>
     a88:	85 32       	cpi	r24, 0x25	; 37
     a8a:	09 f0       	breq	.+2      	; 0xa8e <SCSI_DecodeSCSICommand+0x64>
     a8c:	cd c0       	rjmp	.+410    	; 0xc28 <SCSI_DecodeSCSICommand+0x1fe>
     a8e:	5d c0       	rjmp	.+186    	; 0xb4a <SCSI_DecodeSCSICommand+0x120>
     a90:	8a 32       	cpi	r24, 0x2A	; 42
     a92:	09 f4       	brne	.+2      	; 0xa96 <SCSI_DecodeSCSICommand+0x6c>
     a94:	a0 c0       	rjmp	.+320    	; 0xbd6 <SCSI_DecodeSCSICommand+0x1ac>
     a96:	8f 32       	cpi	r24, 0x2F	; 47
     a98:	09 f0       	breq	.+2      	; 0xa9c <SCSI_DecodeSCSICommand+0x72>
     a9a:	c6 c0       	rjmp	.+396    	; 0xc28 <SCSI_DecodeSCSICommand+0x1fe>
     a9c:	bf c0       	rjmp	.+382    	; 0xc1c <SCSI_DecodeSCSICommand+0x1f2>
     a9e:	f7 01       	movw	r30, r14
     aa0:	05 8d       	ldd	r16, Z+29	; 0x1d
     aa2:	14 8d       	ldd	r17, Z+28	; 0x1c
{
	uint16_t AllocationLength  = SwapEndian_16(*(uint16_t*)&MSInterfaceInfo->State.CommandBlock.SCSICommandData[3]);
	uint16_t BytesTransferred  = MIN(AllocationLength, sizeof(InquiryData));

	/* Only the standard INQUIRY data is supported, check if any optional INQUIRY bits set */
	if ((MSInterfaceInfo->State.CommandBlock.SCSICommandData[1] & ((1 << 0) | (1 << 1))) ||
     aa4:	82 8d       	ldd	r24, Z+26	; 0x1a
     aa6:	90 e0       	ldi	r25, 0x00	; 0
     aa8:	83 70       	andi	r24, 0x03	; 3
     aaa:	90 70       	andi	r25, 0x00	; 0
     aac:	89 2b       	or	r24, r25
     aae:	09 f0       	breq	.+2      	; 0xab2 <SCSI_DecodeSCSICommand+0x88>
     ab0:	7c c0       	rjmp	.+248    	; 0xbaa <SCSI_DecodeSCSICommand+0x180>
     ab2:	83 8d       	ldd	r24, Z+27	; 0x1b
     ab4:	88 23       	and	r24, r24
     ab6:	09 f0       	breq	.+2      	; 0xaba <SCSI_DecodeSCSICommand+0x90>
     ab8:	78 c0       	rjmp	.+240    	; 0xbaa <SCSI_DecodeSCSICommand+0x180>
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_Inquiry(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	uint16_t AllocationLength  = SwapEndian_16(*(uint16_t*)&MSInterfaceInfo->State.CommandBlock.SCSICommandData[3]);
	uint16_t BytesTransferred  = MIN(AllocationLength, sizeof(InquiryData));
     aba:	68 01       	movw	r12, r16
     abc:	05 32       	cpi	r16, 0x25	; 37
     abe:	11 05       	cpc	r17, r1
     ac0:	18 f0       	brcs	.+6      	; 0xac8 <SCSI_DecodeSCSICommand+0x9e>
     ac2:	94 e2       	ldi	r25, 0x24	; 36
     ac4:	c9 2e       	mov	r12, r25
     ac6:	d1 2c       	mov	r13, r1
		               SCSI_ASENSEQ_NO_QUALIFIER);

		return false;
	}

	Endpoint_Write_Stream_LE(&InquiryData, BytesTransferred, NULL);
     ac8:	81 eb       	ldi	r24, 0xB1	; 177
     aca:	91 e0       	ldi	r25, 0x01	; 1
     acc:	b6 01       	movw	r22, r12
     ace:	40 e0       	ldi	r20, 0x00	; 0
     ad0:	50 e0       	ldi	r21, 0x00	; 0
     ad2:	23 d4       	rcall	.+2118   	; 0x131a <Endpoint_Write_Stream_LE>

	/* Pad out remaining bytes with 0x00 */
	Endpoint_Null_Stream((AllocationLength - BytesTransferred), NULL);
     ad4:	c8 01       	movw	r24, r16
     ad6:	8c 19       	sub	r24, r12
     ad8:	9d 09       	sbc	r25, r13
     ada:	60 e0       	ldi	r22, 0x00	; 0
     adc:	70 e0       	ldi	r23, 0x00	; 0
     ade:	37 d3       	rcall	.+1646   	; 0x114e <Endpoint_Null_Stream>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     ae0:	80 91 e8 00 	lds	r24, 0x00E8
     ae4:	8e 77       	andi	r24, 0x7E	; 126
     ae6:	80 93 e8 00 	sts	0x00E8, r24

	/* Finalize the stream transfer to send the last packet */
	Endpoint_ClearIN();

	/* Succeed the command and update the bytes transferred counter */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= BytesTransferred;
     aea:	96 01       	movw	r18, r12
     aec:	40 e0       	ldi	r20, 0x00	; 0
     aee:	50 e0       	ldi	r21, 0x00	; 0
     af0:	f7 01       	movw	r30, r14
     af2:	82 89       	ldd	r24, Z+18	; 0x12
     af4:	93 89       	ldd	r25, Z+19	; 0x13
     af6:	a4 89       	ldd	r26, Z+20	; 0x14
     af8:	b5 89       	ldd	r27, Z+21	; 0x15
     afa:	82 1b       	sub	r24, r18
     afc:	93 0b       	sbc	r25, r19
     afe:	a4 0b       	sbc	r26, r20
     b00:	b5 0b       	sbc	r27, r21
     b02:	87 c0       	rjmp	.+270    	; 0xc12 <SCSI_DecodeSCSICommand+0x1e8>
 *
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_Request_Sense(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	uint8_t  AllocationLength = MSInterfaceInfo->State.CommandBlock.SCSICommandData[4];
     b04:	f7 01       	movw	r30, r14
     b06:	15 8d       	ldd	r17, Z+29	; 0x1d
	uint8_t  BytesTransferred = MIN(AllocationLength, sizeof(SenseData));
     b08:	01 2f       	mov	r16, r17
     b0a:	13 31       	cpi	r17, 0x13	; 19
     b0c:	08 f0       	brcs	.+2      	; 0xb10 <SCSI_DecodeSCSICommand+0xe6>
     b0e:	02 e1       	ldi	r16, 0x12	; 18

	Endpoint_Write_Stream_LE(&SenseData, BytesTransferred, NULL);
     b10:	8f e9       	ldi	r24, 0x9F	; 159
     b12:	91 e0       	ldi	r25, 0x01	; 1
     b14:	60 2f       	mov	r22, r16
     b16:	70 e0       	ldi	r23, 0x00	; 0
     b18:	40 e0       	ldi	r20, 0x00	; 0
     b1a:	50 e0       	ldi	r21, 0x00	; 0
     b1c:	fe d3       	rcall	.+2044   	; 0x131a <Endpoint_Write_Stream_LE>
	Endpoint_Null_Stream((AllocationLength - BytesTransferred), NULL);
     b1e:	81 2f       	mov	r24, r17
     b20:	90 e0       	ldi	r25, 0x00	; 0
     b22:	80 1b       	sub	r24, r16
     b24:	91 09       	sbc	r25, r1
     b26:	60 e0       	ldi	r22, 0x00	; 0
     b28:	70 e0       	ldi	r23, 0x00	; 0
     b2a:	11 d3       	rcall	.+1570   	; 0x114e <Endpoint_Null_Stream>
     b2c:	80 91 e8 00 	lds	r24, 0x00E8
     b30:	8e 77       	andi	r24, 0x7E	; 126
     b32:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	/* Succeed the command and update the bytes transferred counter */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= BytesTransferred;
     b36:	f7 01       	movw	r30, r14
     b38:	82 89       	ldd	r24, Z+18	; 0x12
     b3a:	93 89       	ldd	r25, Z+19	; 0x13
     b3c:	a4 89       	ldd	r26, Z+20	; 0x14
     b3e:	b5 89       	ldd	r27, Z+21	; 0x15
     b40:	80 1b       	sub	r24, r16
     b42:	91 09       	sbc	r25, r1
     b44:	a1 09       	sbc	r26, r1
     b46:	b1 09       	sbc	r27, r1
     b48:	64 c0       	rjmp	.+200    	; 0xc12 <SCSI_DecodeSCSICommand+0x1e8>
 *
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_Read_Capacity_10(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	uint32_t LastBlockAddressInLUN = (LUN_MEDIA_BLOCKS - 1);
     b4a:	8f ef       	ldi	r24, 0xFF	; 255
     b4c:	9f e7       	ldi	r25, 0x7F	; 127
     b4e:	a0 e0       	ldi	r26, 0x00	; 0
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	89 83       	std	Y+1, r24	; 0x01
     b54:	9a 83       	std	Y+2, r25	; 0x02
     b56:	ab 83       	std	Y+3, r26	; 0x03
     b58:	bc 83       	std	Y+4, r27	; 0x04
	uint32_t MediaBlockSize        = VIRTUAL_MEMORY_BLOCK_SIZE;
     b5a:	80 e0       	ldi	r24, 0x00	; 0
     b5c:	92 e0       	ldi	r25, 0x02	; 2
     b5e:	a0 e0       	ldi	r26, 0x00	; 0
     b60:	b0 e0       	ldi	r27, 0x00	; 0
     b62:	8d 83       	std	Y+5, r24	; 0x05
     b64:	9e 83       	std	Y+6, r25	; 0x06
     b66:	af 83       	std	Y+7, r26	; 0x07
     b68:	b8 87       	std	Y+8, r27	; 0x08

	Endpoint_Write_Stream_BE(&LastBlockAddressInLUN, sizeof(LastBlockAddressInLUN), NULL);
     b6a:	ce 01       	movw	r24, r28
     b6c:	01 96       	adiw	r24, 0x01	; 1
     b6e:	64 e0       	ldi	r22, 0x04	; 4
     b70:	70 e0       	ldi	r23, 0x00	; 0
     b72:	40 e0       	ldi	r20, 0x00	; 0
     b74:	50 e0       	ldi	r21, 0x00	; 0
     b76:	7f d3       	rcall	.+1790   	; 0x1276 <Endpoint_Write_Stream_BE>
	Endpoint_Write_Stream_BE(&MediaBlockSize, sizeof(MediaBlockSize), NULL);
     b78:	ce 01       	movw	r24, r28
     b7a:	05 96       	adiw	r24, 0x05	; 5
     b7c:	64 e0       	ldi	r22, 0x04	; 4
     b7e:	70 e0       	ldi	r23, 0x00	; 0
     b80:	40 e0       	ldi	r20, 0x00	; 0
     b82:	50 e0       	ldi	r21, 0x00	; 0
     b84:	78 d3       	rcall	.+1776   	; 0x1276 <Endpoint_Write_Stream_BE>
     b86:	80 91 e8 00 	lds	r24, 0x00E8
     b8a:	8e 77       	andi	r24, 0x7E	; 126
     b8c:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	/* Succeed the command and update the bytes transferred counter */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= 8;
     b90:	f7 01       	movw	r30, r14
     b92:	82 89       	ldd	r24, Z+18	; 0x12
     b94:	93 89       	ldd	r25, Z+19	; 0x13
     b96:	a4 89       	ldd	r26, Z+20	; 0x14
     b98:	b5 89       	ldd	r27, Z+21	; 0x15
     b9a:	08 97       	sbiw	r24, 0x08	; 8
     b9c:	a1 09       	sbc	r26, r1
     b9e:	b1 09       	sbc	r27, r1
     ba0:	38 c0       	rjmp	.+112    	; 0xc12 <SCSI_DecodeSCSICommand+0x1e8>
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_Send_Diagnostic(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	/* Check to see if the SELF TEST bit is not set */
	if (!(MSInterfaceInfo->State.CommandBlock.SCSICommandData[1] & (1 << 2)))
     ba2:	f7 01       	movw	r30, r14
     ba4:	82 8d       	ldd	r24, Z+26	; 0x1a
     ba6:	82 fd       	sbrc	r24, 2
     ba8:	08 c0       	rjmp	.+16     	; 0xbba <SCSI_DecodeSCSICommand+0x190>
	{
		/* Only self-test supported - update SENSE key and fail the command */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
     baa:	80 91 a1 01 	lds	r24, 0x01A1
     bae:	80 7f       	andi	r24, 0xF0	; 240
     bb0:	85 60       	ori	r24, 0x05	; 5
     bb2:	80 93 a1 01 	sts	0x01A1, r24
     bb6:	84 e2       	ldi	r24, 0x24	; 36
     bb8:	3e c0       	rjmp	.+124    	; 0xc36 <SCSI_DecodeSCSICommand+0x20c>

		return false;
	}

	/* Check to see if all attached Dataflash ICs are functional */
	if (!(DataflashManager_CheckDataflashOperation()))
     bba:	78 dc       	rcall	.-1808   	; 0x4ac <DataflashManager_CheckDataflashOperation>
     bbc:	88 23       	and	r24, r24
     bbe:	71 f5       	brne	.+92     	; 0xc1c <SCSI_DecodeSCSICommand+0x1f2>
	{
		/* Update SENSE key with a hardware error condition and return command fail */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_HARDWARE_ERROR,
     bc0:	80 91 a1 01 	lds	r24, 0x01A1
     bc4:	80 7f       	andi	r24, 0xF0	; 240
     bc6:	84 60       	ori	r24, 0x04	; 4
     bc8:	80 93 a1 01 	sts	0x01A1, r24
     bcc:	10 92 ab 01 	sts	0x01AB, r1
     bd0:	10 92 ac 01 	sts	0x01AC, r1
     bd4:	33 c0       	rjmp	.+102    	; 0xc3c <SCSI_DecodeSCSICommand+0x212>
			break;
		case SCSI_CMD_SEND_DIAGNOSTIC:
			CommandSuccess = SCSI_Command_Send_Diagnostic(MSInterfaceInfo);
			break;
		case SCSI_CMD_WRITE_10:
			CommandSuccess = SCSI_Command_ReadWrite_10(MSInterfaceInfo, DATA_WRITE);
     bd6:	c7 01       	movw	r24, r14
     bd8:	60 e0       	ldi	r22, 0x00	; 0
     bda:	02 c0       	rjmp	.+4      	; 0xbe0 <SCSI_DecodeSCSICommand+0x1b6>
			break;
		case SCSI_CMD_READ_10:
			CommandSuccess = SCSI_Command_ReadWrite_10(MSInterfaceInfo, DATA_READ);
     bdc:	c7 01       	movw	r24, r14
     bde:	61 e0       	ldi	r22, 0x01	; 1
     be0:	dc de       	rcall	.-584    	; 0x99a <SCSI_Command_ReadWrite_10>
		                   SCSI_ASENSEQ_NO_QUALIFIER);
			break;
	}

	/* Check if command was successfully processed */
	if (CommandSuccess)
     be2:	88 23       	and	r24, r24
     be4:	59 f1       	breq	.+86     	; 0xc3c <SCSI_DecodeSCSICommand+0x212>
     be6:	2c c0       	rjmp	.+88     	; 0xc40 <SCSI_DecodeSCSICommand+0x216>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     be8:	10 92 f1 00 	sts	0x00F1, r1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     bec:	10 92 f1 00 	sts	0x00F1, r1
     bf0:	10 92 f1 00 	sts	0x00F1, r1
     bf4:	10 92 f1 00 	sts	0x00F1, r1
     bf8:	80 91 e8 00 	lds	r24, 0x00E8
     bfc:	8e 77       	andi	r24, 0x7E	; 126
     bfe:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_Write_8(DISK_READ_ONLY ? 0x80 : 0x00);
	Endpoint_Write_8(0x00);
	Endpoint_ClearIN();

	/* Update the bytes transferred counter and succeed the command */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= 4;
     c02:	f7 01       	movw	r30, r14
     c04:	82 89       	ldd	r24, Z+18	; 0x12
     c06:	93 89       	ldd	r25, Z+19	; 0x13
     c08:	a4 89       	ldd	r26, Z+20	; 0x14
     c0a:	b5 89       	ldd	r27, Z+21	; 0x15
     c0c:	04 97       	sbiw	r24, 0x04	; 4
     c0e:	a1 09       	sbc	r26, r1
     c10:	b1 09       	sbc	r27, r1
     c12:	82 8b       	std	Z+18, r24	; 0x12
     c14:	93 8b       	std	Z+19, r25	; 0x13
     c16:	a4 8b       	std	Z+20, r26	; 0x14
     c18:	b5 8b       	std	Z+21, r27	; 0x15
     c1a:	12 c0       	rjmp	.+36     	; 0xc40 <SCSI_DecodeSCSICommand+0x216>
		case SCSI_CMD_TEST_UNIT_READY:
		case SCSI_CMD_PREVENT_ALLOW_MEDIUM_REMOVAL:
		case SCSI_CMD_VERIFY_10:
			/* These commands should just succeed, no handling required */
			CommandSuccess = true;
			MSInterfaceInfo->State.CommandBlock.DataTransferLength = 0;
     c1c:	f7 01       	movw	r30, r14
     c1e:	12 8a       	std	Z+18, r1	; 0x12
     c20:	13 8a       	std	Z+19, r1	; 0x13
     c22:	14 8a       	std	Z+20, r1	; 0x14
     c24:	15 8a       	std	Z+21, r1	; 0x15
     c26:	0c c0       	rjmp	.+24     	; 0xc40 <SCSI_DecodeSCSICommand+0x216>
			break;
		default:
			/* Update the SENSE key to reflect the invalid command */
			SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
     c28:	80 91 a1 01 	lds	r24, 0x01A1
     c2c:	80 7f       	andi	r24, 0xF0	; 240
     c2e:	85 60       	ori	r24, 0x05	; 5
     c30:	80 93 a1 01 	sts	0x01A1, r24
     c34:	80 e2       	ldi	r24, 0x20	; 32
     c36:	80 93 ab 01 	sts	0x01AB, r24
     c3a:	ca cf       	rjmp	.-108    	; 0xbd0 <SCSI_DecodeSCSICommand+0x1a6>
		                   SCSI_ASENSEQ_NO_QUALIFIER);
			break;
	}

	/* Check if command was successfully processed */
	if (CommandSuccess)
     c3c:	80 e0       	ldi	r24, 0x00	; 0
     c3e:	0a c0       	rjmp	.+20     	; 0xc54 <SCSI_DecodeSCSICommand+0x22a>
	{
		SCSI_SET_SENSE(SCSI_SENSE_KEY_GOOD,
     c40:	80 91 a1 01 	lds	r24, 0x01A1
     c44:	80 7f       	andi	r24, 0xF0	; 240
     c46:	80 93 a1 01 	sts	0x01A1, r24
     c4a:	10 92 ab 01 	sts	0x01AB, r1
     c4e:	10 92 ac 01 	sts	0x01AC, r1
     c52:	81 e0       	ldi	r24, 0x01	; 1

		return true;
	}

	return false;
}
     c54:	28 96       	adiw	r28, 0x08	; 8
     c56:	0f b6       	in	r0, 0x3f	; 63
     c58:	f8 94       	cli
     c5a:	de bf       	out	0x3e, r29	; 62
     c5c:	0f be       	out	0x3f, r0	; 63
     c5e:	cd bf       	out	0x3d, r28	; 61
     c60:	cf 91       	pop	r28
     c62:	df 91       	pop	r29
     c64:	1f 91       	pop	r17
     c66:	0f 91       	pop	r16
     c68:	ff 90       	pop	r15
     c6a:	ef 90       	pop	r14
     c6c:	df 90       	pop	r13
     c6e:	cf 90       	pop	r12
     c70:	08 95       	ret

00000c72 <Endpoint_ConfigureEndpoint_Prv>:
#endif

bool Endpoint_ConfigureEndpoint_Prv(const uint8_t Number,
                                    const uint8_t UECFG0XData,
                                    const uint8_t UECFG1XData)
{
     c72:	38 2f       	mov	r19, r24
     c74:	28 2f       	mov	r18, r24
     c76:	2c c0       	rjmp	.+88     	; 0xcd0 <Endpoint_ConfigureEndpoint_Prv+0x5e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     c78:	20 93 e9 00 	sts	0x00E9, r18
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);
		
		if (EPNum == Number)
     c7c:	23 17       	cp	r18, r19
     c7e:	21 f4       	brne	.+8      	; 0xc88 <Endpoint_ConfigureEndpoint_Prv+0x16>
     c80:	76 2f       	mov	r23, r22
     c82:	94 2f       	mov	r25, r20
     c84:	50 e0       	ldi	r21, 0x00	; 0
     c86:	06 c0       	rjmp	.+12     	; 0xc94 <Endpoint_ConfigureEndpoint_Prv+0x22>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
     c88:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
     c8c:	90 91 ed 00 	lds	r25, 0x00ED
			UEIENXTemp  = UEIENX;
     c90:	50 91 f0 00 	lds	r21, 0x00F0
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
     c94:	91 ff       	sbrs	r25, 1
     c96:	1b c0       	rjmp	.+54     	; 0xcce <Endpoint_ConfigureEndpoint_Prv+0x5c>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
     c98:	80 91 eb 00 	lds	r24, 0x00EB
     c9c:	8e 7f       	andi	r24, 0xFE	; 254
     c9e:	80 93 eb 00 	sts	0x00EB, r24
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
     ca2:	80 91 ed 00 	lds	r24, 0x00ED
     ca6:	8d 7f       	andi	r24, 0xFD	; 253
     ca8:	80 93 ed 00 	sts	0x00ED, r24
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
     cac:	80 91 eb 00 	lds	r24, 0x00EB
     cb0:	81 60       	ori	r24, 0x01	; 1
     cb2:	80 93 eb 00 	sts	0x00EB, r24

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
     cb6:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
     cba:	90 93 ed 00 	sts	0x00ED, r25
		UEIENX  = UEIENXTemp;
     cbe:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
     cc2:	80 91 ee 00 	lds	r24, 0x00EE
			
		if (!(Endpoint_IsConfigured()))
     cc6:	87 fd       	sbrc	r24, 7
     cc8:	02 c0       	rjmp	.+4      	; 0xcce <Endpoint_ConfigureEndpoint_Prv+0x5c>
     cca:	80 e0       	ldi	r24, 0x00	; 0
     ccc:	08 95       	ret
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else	
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
     cce:	2f 5f       	subi	r18, 0xFF	; 255
     cd0:	27 30       	cpi	r18, 0x07	; 7
     cd2:	90 f2       	brcs	.-92     	; 0xc78 <Endpoint_ConfigureEndpoint_Prv+0x6>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     cd4:	30 93 e9 00 	sts	0x00E9, r19
     cd8:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
     cda:	08 95       	ret

00000cdc <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     cdc:	80 91 ea 01 	lds	r24, 0x01EA
     ce0:	88 23       	and	r24, r24
     ce2:	9c f4       	brge	.+38     	; 0xd0a <Endpoint_ClearStatusStage+0x2e>
     ce4:	04 c0       	rjmp	.+8      	; 0xcee <Endpoint_ClearStatusStage+0x12>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     ce6:	80 91 e9 01 	lds	r24, 0x01E9
     cea:	88 23       	and	r24, r24
     cec:	b9 f0       	breq	.+46     	; 0xd1c <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     cee:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
     cf2:	82 ff       	sbrs	r24, 2
     cf4:	f8 cf       	rjmp	.-16     	; 0xce6 <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     cf6:	80 91 e8 00 	lds	r24, 0x00E8
     cfa:	8b 77       	andi	r24, 0x7B	; 123
     cfc:	80 93 e8 00 	sts	0x00E8, r24
     d00:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     d02:	80 91 e9 01 	lds	r24, 0x01E9
     d06:	88 23       	and	r24, r24
     d08:	49 f0       	breq	.+18     	; 0xd1c <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     d0a:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     d0e:	80 ff       	sbrs	r24, 0
     d10:	f8 cf       	rjmp	.-16     	; 0xd02 <Endpoint_ClearStatusStage+0x26>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     d12:	80 91 e8 00 	lds	r24, 0x00E8
     d16:	8e 77       	andi	r24, 0x7E	; 126
     d18:	80 93 e8 00 	sts	0x00E8, r24
     d1c:	08 95       	ret

00000d1e <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     d1e:	40 91 e4 00 	lds	r20, 0x00E4
     d22:	50 91 e5 00 	lds	r21, 0x00E5
     d26:	24 e6       	ldi	r18, 0x64	; 100
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     d28:	80 91 ec 00 	lds	r24, 0x00EC
     d2c:	80 ff       	sbrs	r24, 0
     d2e:	24 c0       	rjmp	.+72     	; 0xd78 <Endpoint_WaitUntilReady+0x5a>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     d30:	80 91 e8 00 	lds	r24, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
     d34:	80 fd       	sbrc	r24, 0
     d36:	1e c0       	rjmp	.+60     	; 0xd74 <Endpoint_WaitUntilReady+0x56>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}
		
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     d38:	80 91 e9 01 	lds	r24, 0x01E9

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     d3c:	88 23       	and	r24, r24
     d3e:	11 f4       	brne	.+4      	; 0xd44 <Endpoint_WaitUntilReady+0x26>
     d40:	82 e0       	ldi	r24, 0x02	; 2
     d42:	08 95       	ret
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     d44:	85 30       	cpi	r24, 0x05	; 5
     d46:	11 f4       	brne	.+4      	; 0xd4c <Endpoint_WaitUntilReady+0x2e>
     d48:	83 e0       	ldi	r24, 0x03	; 3
     d4a:	08 95       	ret
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     d4c:	80 91 eb 00 	lds	r24, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
     d50:	85 ff       	sbrs	r24, 5
     d52:	02 c0       	rjmp	.+4      	; 0xd58 <Endpoint_WaitUntilReady+0x3a>
     d54:	81 e0       	ldi	r24, 0x01	; 1
     d56:	08 95       	ret
     d58:	80 91 e4 00 	lds	r24, 0x00E4
     d5c:	90 91 e5 00 	lds	r25, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     d60:	84 17       	cp	r24, r20
     d62:	95 07       	cpc	r25, r21
     d64:	09 f3       	breq	.-62     	; 0xd28 <Endpoint_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     d66:	22 23       	and	r18, r18
     d68:	11 f4       	brne	.+4      	; 0xd6e <Endpoint_WaitUntilReady+0x50>
     d6a:	84 e0       	ldi	r24, 0x04	; 4
     d6c:	08 95       	ret
     d6e:	21 50       	subi	r18, 0x01	; 1
     d70:	ac 01       	movw	r20, r24
     d72:	da cf       	rjmp	.-76     	; 0xd28 <Endpoint_WaitUntilReady+0xa>
     d74:	80 e0       	ldi	r24, 0x00	; 0
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
     d76:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     d78:	80 91 e8 00 	lds	r24, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
     d7c:	82 ff       	sbrs	r24, 2
     d7e:	dc cf       	rjmp	.-72     	; 0xd38 <Endpoint_WaitUntilReady+0x1a>
     d80:	f9 cf       	rjmp	.-14     	; 0xd74 <Endpoint_WaitUntilReady+0x56>

00000d82 <USB_ResetInterface>:

void USB_ResetInterface(void)
{
     d82:	ef 92       	push	r14
     d84:	ff 92       	push	r15
     d86:	0f 93       	push	r16
     d88:	1f 93       	push	r17
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     d8a:	4d d0       	rcall	.+154    	; 0xe26 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     d8c:	54 d0       	rcall	.+168    	; 0xe36 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     d8e:	08 ed       	ldi	r16, 0xD8	; 216
     d90:	10 e0       	ldi	r17, 0x00	; 0
     d92:	f8 01       	movw	r30, r16
     d94:	80 81       	ld	r24, Z
     d96:	8f 77       	andi	r24, 0x7F	; 127
     d98:	80 83       	st	Z, r24
				USBCON |=  (1 << USBE);
     d9a:	80 81       	ld	r24, Z
     d9c:	80 68       	ori	r24, 0x80	; 128
     d9e:	80 83       	st	Z, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
     da0:	80 81       	ld	r24, Z
     da2:	8f 7d       	andi	r24, 0xDF	; 223
     da4:	80 83       	st	Z, r24

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
     da6:	e7 ed       	ldi	r30, 0xD7	; 215
     da8:	f0 e0       	ldi	r31, 0x00	; 0
     daa:	80 81       	ld	r24, Z
     dac:	80 68       	ori	r24, 0x80	; 128
     dae:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     db0:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
     db2:	10 92 e9 01 	sts	0x01E9, r1
	USB_Device_ConfigurationNumber  = 0;
     db6:	10 92 e5 01 	sts	0x01E5, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
     dba:	10 92 e7 01 	sts	0x01E7, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
     dbe:	10 92 e6 01 	sts	0x01E6, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
     dc2:	80 ee       	ldi	r24, 0xE0	; 224
     dc4:	e8 2e       	mov	r14, r24
     dc6:	f1 2c       	mov	r15, r1
     dc8:	f7 01       	movw	r30, r14
     dca:	80 81       	ld	r24, Z
     dcc:	8b 7f       	andi	r24, 0xFB	; 251
     dce:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
     dd0:	f8 01       	movw	r30, r16
     dd2:	80 81       	ld	r24, Z
     dd4:	81 60       	ori	r24, 0x01	; 1
     dd6:	80 83       	st	Z, r24
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
     dd8:	80 e0       	ldi	r24, 0x00	; 0
     dda:	60 e0       	ldi	r22, 0x00	; 0
     ddc:	42 e0       	ldi	r20, 0x02	; 2
     dde:	49 df       	rcall	.-366    	; 0xc72 <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     de0:	e1 ee       	ldi	r30, 0xE1	; 225
     de2:	f0 e0       	ldi	r31, 0x00	; 0
     de4:	80 81       	ld	r24, Z
     de6:	8e 7f       	andi	r24, 0xFE	; 254
     de8:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     dea:	e2 ee       	ldi	r30, 0xE2	; 226
     dec:	f0 e0       	ldi	r31, 0x00	; 0
     dee:	80 81       	ld	r24, Z
     df0:	81 60       	ori	r24, 0x01	; 1
     df2:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
     df4:	80 81       	ld	r24, Z
     df6:	88 60       	ori	r24, 0x08	; 8
     df8:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     dfa:	f7 01       	movw	r30, r14
     dfc:	80 81       	ld	r24, Z
     dfe:	8e 7f       	andi	r24, 0xFE	; 254
     e00:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     e02:	f8 01       	movw	r30, r16
     e04:	80 81       	ld	r24, Z
     e06:	80 61       	ori	r24, 0x10	; 16
     e08:	80 83       	st	Z, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     e0a:	1f 91       	pop	r17
     e0c:	0f 91       	pop	r16
     e0e:	ff 90       	pop	r15
     e10:	ef 90       	pop	r14
     e12:	08 95       	ret

00000e14 <USB_Init>:

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
     e14:	e7 ed       	ldi	r30, 0xD7	; 215
     e16:	f0 e0       	ldi	r31, 0x00	; 0
     e18:	80 81       	ld	r24, Z
     e1a:	81 60       	ori	r24, 0x01	; 1
     e1c:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     e1e:	81 e0       	ldi	r24, 0x01	; 1
     e20:	80 93 e8 01 	sts	0x01E8, r24

	USB_ResetInterface();
}
     e24:	ae cf       	rjmp	.-164    	; 0xd82 <USB_ResetInterface>

00000e26 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     e26:	e8 ed       	ldi	r30, 0xD8	; 216
     e28:	f0 e0       	ldi	r31, 0x00	; 0
     e2a:	80 81       	ld	r24, Z
     e2c:	8c 7f       	andi	r24, 0xFC	; 252
     e2e:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
     e30:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
     e34:	08 95       	ret

00000e36 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     e36:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
     e3a:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
     e3e:	08 95       	ret

00000e40 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
     e40:	1f 92       	push	r1
     e42:	0f 92       	push	r0
     e44:	0f b6       	in	r0, 0x3f	; 63
     e46:	0f 92       	push	r0
     e48:	0b b6       	in	r0, 0x3b	; 59
     e4a:	0f 92       	push	r0
     e4c:	11 24       	eor	r1, r1
     e4e:	2f 93       	push	r18
     e50:	3f 93       	push	r19
     e52:	4f 93       	push	r20
     e54:	5f 93       	push	r21
     e56:	6f 93       	push	r22
     e58:	7f 93       	push	r23
     e5a:	8f 93       	push	r24
     e5c:	9f 93       	push	r25
     e5e:	af 93       	push	r26
     e60:	bf 93       	push	r27
     e62:	ef 93       	push	r30
     e64:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
     e66:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
     e6a:	82 ff       	sbrs	r24, 2
     e6c:	0a c0       	rjmp	.+20     	; 0xe82 <__vector_10+0x42>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
     e6e:	80 91 e2 00 	lds	r24, 0x00E2
     e72:	82 ff       	sbrs	r24, 2
     e74:	06 c0       	rjmp	.+12     	; 0xe82 <__vector_10+0x42>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
     e76:	80 91 e1 00 	lds	r24, 0x00E1
     e7a:	8b 7f       	andi	r24, 0xFB	; 251
     e7c:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
     e80:	0c d4       	rcall	.+2072   	; 0x169a <USB_Event_Stub>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
     e82:	80 91 da 00 	lds	r24, 0x00DA
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
     e86:	80 ff       	sbrs	r24, 0
     e88:	1d c0       	rjmp	.+58     	; 0xec4 <__vector_10+0x84>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
     e8a:	80 91 d8 00 	lds	r24, 0x00D8
     e8e:	80 ff       	sbrs	r24, 0
     e90:	19 c0       	rjmp	.+50     	; 0xec4 <__vector_10+0x84>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
     e92:	80 91 da 00 	lds	r24, 0x00DA
     e96:	8e 7f       	andi	r24, 0xFE	; 254
     e98:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
     e9c:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
     ea0:	80 ff       	sbrs	r24, 0
     ea2:	0c c0       	rjmp	.+24     	; 0xebc <__vector_10+0x7c>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     ea4:	8c e0       	ldi	r24, 0x0C	; 12
     ea6:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     ea8:	8e e0       	ldi	r24, 0x0E	; 14
     eaa:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
     eac:	09 b4       	in	r0, 0x29	; 41
     eae:	00 fe       	sbrs	r0, 0
     eb0:	fd cf       	rjmp	.-6      	; 0xeac <__vector_10+0x6c>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
     eb2:	81 e0       	ldi	r24, 0x01	; 1
     eb4:	80 93 e9 01 	sts	0x01E9, r24
			EVENT_USB_Device_Connect();
     eb8:	75 d9       	rcall	.-3350   	; 0x1a4 <EVENT_USB_Device_Connect>
     eba:	04 c0       	rjmp	.+8      	; 0xec4 <__vector_10+0x84>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     ebc:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
     ebe:	10 92 e9 01 	sts	0x01E9, r1
			EVENT_USB_Device_Disconnect();
     ec2:	75 d9       	rcall	.-3350   	; 0x1ae <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
     ec4:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
     ec8:	80 ff       	sbrs	r24, 0
     eca:	18 c0       	rjmp	.+48     	; 0xefc <__vector_10+0xbc>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
     ecc:	80 91 e2 00 	lds	r24, 0x00E2
     ed0:	80 ff       	sbrs	r24, 0
     ed2:	14 c0       	rjmp	.+40     	; 0xefc <__vector_10+0xbc>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     ed4:	80 91 e2 00 	lds	r24, 0x00E2
     ed8:	8e 7f       	andi	r24, 0xFE	; 254
     eda:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     ede:	80 91 e2 00 	lds	r24, 0x00E2
     ee2:	80 61       	ori	r24, 0x10	; 16
     ee4:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON  |=  (1 << FRZCLK);
     ee8:	80 91 d8 00 	lds	r24, 0x00D8
     eec:	80 62       	ori	r24, 0x20	; 32
     eee:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     ef2:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
     ef4:	85 e0       	ldi	r24, 0x05	; 5
     ef6:	80 93 e9 01 	sts	0x01E9, r24
		EVENT_USB_Device_Suspend();
     efa:	cf d3       	rcall	.+1950   	; 0x169a <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
     efc:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
     f00:	84 ff       	sbrs	r24, 4
     f02:	2d c0       	rjmp	.+90     	; 0xf5e <__vector_10+0x11e>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
     f04:	80 91 e2 00 	lds	r24, 0x00E2
     f08:	84 ff       	sbrs	r24, 4
     f0a:	29 c0       	rjmp	.+82     	; 0xf5e <__vector_10+0x11e>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     f0c:	8c e0       	ldi	r24, 0x0C	; 12
     f0e:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     f10:	8e e0       	ldi	r24, 0x0E	; 14
     f12:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     f14:	09 b4       	in	r0, 0x29	; 41
     f16:	00 fe       	sbrs	r0, 0
     f18:	fd cf       	rjmp	.-6      	; 0xf14 <__vector_10+0xd4>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
     f1a:	80 91 d8 00 	lds	r24, 0x00D8
     f1e:	8f 7d       	andi	r24, 0xDF	; 223
     f20:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
     f24:	80 91 e1 00 	lds	r24, 0x00E1
     f28:	8f 7e       	andi	r24, 0xEF	; 239
     f2a:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
     f2e:	80 91 e2 00 	lds	r24, 0x00E2
     f32:	8f 7e       	andi	r24, 0xEF	; 239
     f34:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     f38:	80 91 e2 00 	lds	r24, 0x00E2
     f3c:	81 60       	ori	r24, 0x01	; 1
     f3e:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
     f42:	80 91 e5 01 	lds	r24, 0x01E5
     f46:	88 23       	and	r24, r24
     f48:	31 f4       	brne	.+12     	; 0xf56 <__vector_10+0x116>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     f4a:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     f4e:	87 fd       	sbrc	r24, 7
     f50:	02 c0       	rjmp	.+4      	; 0xf56 <__vector_10+0x116>
     f52:	81 e0       	ldi	r24, 0x01	; 1
     f54:	01 c0       	rjmp	.+2      	; 0xf58 <__vector_10+0x118>
     f56:	84 e0       	ldi	r24, 0x04	; 4
     f58:	80 93 e9 01 	sts	0x01E9, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
     f5c:	9e d3       	rcall	.+1852   	; 0x169a <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
     f5e:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
     f62:	83 ff       	sbrs	r24, 3
     f64:	22 c0       	rjmp	.+68     	; 0xfaa <__vector_10+0x16a>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
     f66:	80 91 e2 00 	lds	r24, 0x00E2
     f6a:	83 ff       	sbrs	r24, 3
     f6c:	1e c0       	rjmp	.+60     	; 0xfaa <__vector_10+0x16a>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
     f6e:	80 91 e1 00 	lds	r24, 0x00E1
     f72:	87 7f       	andi	r24, 0xF7	; 247
     f74:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
     f78:	82 e0       	ldi	r24, 0x02	; 2
     f7a:	80 93 e9 01 	sts	0x01E9, r24
		USB_Device_ConfigurationNumber = 0;
     f7e:	10 92 e5 01 	sts	0x01E5, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     f82:	80 91 e1 00 	lds	r24, 0x00E1
     f86:	8e 7f       	andi	r24, 0xFE	; 254
     f88:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     f8c:	80 91 e2 00 	lds	r24, 0x00E2
     f90:	8e 7f       	andi	r24, 0xFE	; 254
     f92:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     f96:	80 91 e2 00 	lds	r24, 0x00E2
     f9a:	80 61       	ori	r24, 0x10	; 16
     f9c:	80 93 e2 00 	sts	0x00E2, r24
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
     fa0:	80 e0       	ldi	r24, 0x00	; 0
     fa2:	60 e0       	ldi	r22, 0x00	; 0
     fa4:	42 e0       	ldi	r20, 0x02	; 2
     fa6:	65 de       	rcall	.-822    	; 0xc72 <Endpoint_ConfigureEndpoint_Prv>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
     fa8:	78 d3       	rcall	.+1776   	; 0x169a <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     faa:	ff 91       	pop	r31
     fac:	ef 91       	pop	r30
     fae:	bf 91       	pop	r27
     fb0:	af 91       	pop	r26
     fb2:	9f 91       	pop	r25
     fb4:	8f 91       	pop	r24
     fb6:	7f 91       	pop	r23
     fb8:	6f 91       	pop	r22
     fba:	5f 91       	pop	r21
     fbc:	4f 91       	pop	r20
     fbe:	3f 91       	pop	r19
     fc0:	2f 91       	pop	r18
     fc2:	0f 90       	pop	r0
     fc4:	0b be       	out	0x3b, r0	; 59
     fc6:	0f 90       	pop	r0
     fc8:	0f be       	out	0x3f, r0	; 63
     fca:	0f 90       	pop	r0
     fcc:	1f 90       	pop	r1
     fce:	18 95       	reti

00000fd0 <Endpoint_Write_Control_Stream_LE>:
     fd0:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     fd2:	40 91 f0 01 	lds	r20, 0x01F0
     fd6:	50 91 f1 01 	lds	r21, 0x01F1
     fda:	46 17       	cp	r20, r22
     fdc:	57 07       	cpc	r21, r23
     fde:	18 f4       	brcc	.+6      	; 0xfe6 <Endpoint_Write_Control_Stream_LE+0x16>
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     fe0:	f9 01       	movw	r30, r18
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	3d c0       	rjmp	.+122    	; 0x1060 <Endpoint_Write_Control_Stream_LE+0x90>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     fe6:	61 15       	cp	r22, r1
     fe8:	71 05       	cpc	r23, r1
     fea:	11 f0       	breq	.+4      	; 0xff0 <Endpoint_Write_Control_Stream_LE+0x20>
     fec:	ab 01       	movw	r20, r22
     fee:	f8 cf       	rjmp	.-16     	; 0xfe0 <Endpoint_Write_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     ff0:	80 91 e8 00 	lds	r24, 0x00E8
     ff4:	8e 77       	andi	r24, 0x7E	; 126
     ff6:	80 93 e8 00 	sts	0x00E8, r24
     ffa:	40 e0       	ldi	r20, 0x00	; 0
     ffc:	50 e0       	ldi	r21, 0x00	; 0
     ffe:	f0 cf       	rjmp	.-32     	; 0xfe0 <Endpoint_Write_Control_Stream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1000:	80 91 e9 01 	lds	r24, 0x01E9

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1004:	88 23       	and	r24, r24
    1006:	f1 f1       	breq	.+124    	; 0x1084 <Endpoint_Write_Control_Stream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1008:	85 30       	cpi	r24, 0x05	; 5
    100a:	f1 f1       	breq	.+124    	; 0x1088 <Endpoint_Write_Control_Stream_LE+0xb8>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    100c:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1010:	83 ff       	sbrs	r24, 3
    1012:	02 c0       	rjmp	.+4      	; 0x1018 <Endpoint_Write_Control_Stream_LE+0x48>
    1014:	81 e0       	ldi	r24, 0x01	; 1
    1016:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1018:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    101c:	82 fd       	sbrc	r24, 2
    101e:	2c c0       	rjmp	.+88     	; 0x1078 <Endpoint_Write_Control_Stream_LE+0xa8>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1020:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    1024:	80 ff       	sbrs	r24, 0
    1026:	1c c0       	rjmp	.+56     	; 0x1060 <Endpoint_Write_Control_Stream_LE+0x90>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
    1028:	20 91 f2 00 	lds	r18, 0x00F2
    102c:	30 91 f3 00 	lds	r19, 0x00F3
    1030:	07 c0       	rjmp	.+14     	; 0x1040 <Endpoint_Write_Control_Stream_LE+0x70>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    1032:	81 91       	ld	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1034:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
    1038:	41 50       	subi	r20, 0x01	; 1
    103a:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
    103c:	2f 5f       	subi	r18, 0xFF	; 255
    103e:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    1040:	41 15       	cp	r20, r1
    1042:	51 05       	cpc	r21, r1
    1044:	19 f0       	breq	.+6      	; 0x104c <Endpoint_Write_Control_Stream_LE+0x7c>
    1046:	28 30       	cpi	r18, 0x08	; 8
    1048:	31 05       	cpc	r19, r1
    104a:	98 f3       	brcs	.-26     	; 0x1032 <Endpoint_Write_Control_Stream_LE+0x62>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	28 30       	cpi	r18, 0x08	; 8
    1050:	31 05       	cpc	r19, r1
    1052:	09 f4       	brne	.+2      	; 0x1056 <Endpoint_Write_Control_Stream_LE+0x86>
    1054:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1056:	80 91 e8 00 	lds	r24, 0x00E8
    105a:	8e 77       	andi	r24, 0x7E	; 126
    105c:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1060:	41 15       	cp	r20, r1
    1062:	51 05       	cpc	r21, r1
    1064:	69 f6       	brne	.-102    	; 0x1000 <Endpoint_Write_Control_Stream_LE+0x30>
    1066:	99 23       	and	r25, r25
    1068:	59 f6       	brne	.-106    	; 0x1000 <Endpoint_Write_Control_Stream_LE+0x30>
    106a:	06 c0       	rjmp	.+12     	; 0x1078 <Endpoint_Write_Control_Stream_LE+0xa8>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    106c:	80 91 e9 01 	lds	r24, 0x01E9

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1070:	88 23       	and	r24, r24
    1072:	41 f0       	breq	.+16     	; 0x1084 <Endpoint_Write_Control_Stream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1074:	85 30       	cpi	r24, 0x05	; 5
    1076:	41 f0       	breq	.+16     	; 0x1088 <Endpoint_Write_Control_Stream_LE+0xb8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1078:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    107c:	82 ff       	sbrs	r24, 2
    107e:	f6 cf       	rjmp	.-20     	; 0x106c <Endpoint_Write_Control_Stream_LE+0x9c>
    1080:	80 e0       	ldi	r24, 0x00	; 0
    1082:	08 95       	ret
    1084:	82 e0       	ldi	r24, 0x02	; 2
    1086:	08 95       	ret
    1088:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    108a:	08 95       	ret

0000108c <Endpoint_Write_Control_PStream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
    108c:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    108e:	40 91 f0 01 	lds	r20, 0x01F0
    1092:	50 91 f1 01 	lds	r21, 0x01F1
    1096:	46 17       	cp	r20, r22
    1098:	57 07       	cpc	r21, r23
    109a:	18 f4       	brcc	.+6      	; 0x10a2 <Endpoint_Write_Control_PStream_LE+0x16>
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    109c:	f9 01       	movw	r30, r18
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	40 c0       	rjmp	.+128    	; 0x1122 <Endpoint_Write_Control_PStream_LE+0x96>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    10a2:	61 15       	cp	r22, r1
    10a4:	71 05       	cpc	r23, r1
    10a6:	11 f0       	breq	.+4      	; 0x10ac <Endpoint_Write_Control_PStream_LE+0x20>
    10a8:	ab 01       	movw	r20, r22
    10aa:	f8 cf       	rjmp	.-16     	; 0x109c <Endpoint_Write_Control_PStream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    10ac:	80 91 e8 00 	lds	r24, 0x00E8
    10b0:	8e 77       	andi	r24, 0x7E	; 126
    10b2:	80 93 e8 00 	sts	0x00E8, r24
    10b6:	40 e0       	ldi	r20, 0x00	; 0
    10b8:	50 e0       	ldi	r21, 0x00	; 0
    10ba:	f0 cf       	rjmp	.-32     	; 0x109c <Endpoint_Write_Control_PStream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    10bc:	80 91 e9 01 	lds	r24, 0x01E9

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    10c0:	88 23       	and	r24, r24
    10c2:	09 f4       	brne	.+2      	; 0x10c6 <Endpoint_Write_Control_PStream_LE+0x3a>
    10c4:	40 c0       	rjmp	.+128    	; 0x1146 <Endpoint_Write_Control_PStream_LE+0xba>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    10c6:	85 30       	cpi	r24, 0x05	; 5
    10c8:	09 f4       	brne	.+2      	; 0x10cc <Endpoint_Write_Control_PStream_LE+0x40>
    10ca:	3f c0       	rjmp	.+126    	; 0x114a <Endpoint_Write_Control_PStream_LE+0xbe>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    10cc:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    10d0:	83 ff       	sbrs	r24, 3
    10d2:	02 c0       	rjmp	.+4      	; 0x10d8 <Endpoint_Write_Control_PStream_LE+0x4c>
    10d4:	81 e0       	ldi	r24, 0x01	; 1
    10d6:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    10d8:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    10dc:	82 fd       	sbrc	r24, 2
    10de:	2d c0       	rjmp	.+90     	; 0x113a <Endpoint_Write_Control_PStream_LE+0xae>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    10e0:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    10e4:	80 ff       	sbrs	r24, 0
    10e6:	1d c0       	rjmp	.+58     	; 0x1122 <Endpoint_Write_Control_PStream_LE+0x96>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
    10e8:	20 91 f2 00 	lds	r18, 0x00F2
    10ec:	30 91 f3 00 	lds	r19, 0x00F3
    10f0:	08 c0       	rjmp	.+16     	; 0x1102 <Endpoint_Write_Control_PStream_LE+0x76>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    10f2:	84 91       	lpm	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    10f4:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    10f8:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    10fa:	41 50       	subi	r20, 0x01	; 1
    10fc:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
    10fe:	2f 5f       	subi	r18, 0xFF	; 255
    1100:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    1102:	41 15       	cp	r20, r1
    1104:	51 05       	cpc	r21, r1
    1106:	19 f0       	breq	.+6      	; 0x110e <Endpoint_Write_Control_PStream_LE+0x82>
    1108:	28 30       	cpi	r18, 0x08	; 8
    110a:	31 05       	cpc	r19, r1
    110c:	90 f3       	brcs	.-28     	; 0x10f2 <Endpoint_Write_Control_PStream_LE+0x66>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    110e:	90 e0       	ldi	r25, 0x00	; 0
    1110:	28 30       	cpi	r18, 0x08	; 8
    1112:	31 05       	cpc	r19, r1
    1114:	09 f4       	brne	.+2      	; 0x1118 <Endpoint_Write_Control_PStream_LE+0x8c>
    1116:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1118:	80 91 e8 00 	lds	r24, 0x00E8
    111c:	8e 77       	andi	r24, 0x7E	; 126
    111e:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1122:	41 15       	cp	r20, r1
    1124:	51 05       	cpc	r21, r1
    1126:	51 f6       	brne	.-108    	; 0x10bc <Endpoint_Write_Control_PStream_LE+0x30>
    1128:	99 23       	and	r25, r25
    112a:	41 f6       	brne	.-112    	; 0x10bc <Endpoint_Write_Control_PStream_LE+0x30>
    112c:	06 c0       	rjmp	.+12     	; 0x113a <Endpoint_Write_Control_PStream_LE+0xae>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    112e:	80 91 e9 01 	lds	r24, 0x01E9

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1132:	88 23       	and	r24, r24
    1134:	41 f0       	breq	.+16     	; 0x1146 <Endpoint_Write_Control_PStream_LE+0xba>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1136:	85 30       	cpi	r24, 0x05	; 5
    1138:	41 f0       	breq	.+16     	; 0x114a <Endpoint_Write_Control_PStream_LE+0xbe>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    113a:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    113e:	82 ff       	sbrs	r24, 2
    1140:	f6 cf       	rjmp	.-20     	; 0x112e <Endpoint_Write_Control_PStream_LE+0xa2>
    1142:	80 e0       	ldi	r24, 0x00	; 0
    1144:	08 95       	ret
    1146:	82 e0       	ldi	r24, 0x02	; 2
    1148:	08 95       	ret
    114a:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    114c:	08 95       	ret

0000114e <Endpoint_Null_Stream>:
	return ENDPOINT_RWSTREAM_NoError;
}

uint8_t Endpoint_Null_Stream(uint16_t Length,
                             uint16_t* const BytesProcessed)
{
    114e:	df 92       	push	r13
    1150:	ef 92       	push	r14
    1152:	ff 92       	push	r15
    1154:	0f 93       	push	r16
    1156:	1f 93       	push	r17
    1158:	cf 93       	push	r28
    115a:	df 93       	push	r29
    115c:	ec 01       	movw	r28, r24
    115e:	8b 01       	movw	r16, r22
	uint8_t  ErrorCode;
	uint16_t BytesInTransfer = 0;
	
	if ((ErrorCode = Endpoint_WaitUntilReady()))
    1160:	de dd       	rcall	.-1092   	; 0xd1e <Endpoint_WaitUntilReady>
    1162:	d8 2e       	mov	r13, r24
    1164:	88 23       	and	r24, r24
    1166:	61 f5       	brne	.+88     	; 0x11c0 <Endpoint_Null_Stream+0x72>
	  return ErrorCode;
	  
	if (BytesProcessed != NULL)
    1168:	01 15       	cp	r16, r1
    116a:	11 05       	cpc	r17, r1
    116c:	29 f0       	breq	.+10     	; 0x1178 <Endpoint_Null_Stream+0x2a>
	  Length -= *BytesProcessed;
    116e:	f8 01       	movw	r30, r16
    1170:	80 81       	ld	r24, Z
    1172:	91 81       	ldd	r25, Z+1	; 0x01
    1174:	c8 1b       	sub	r28, r24
    1176:	d9 0b       	sbc	r29, r25
    1178:	ee 24       	eor	r14, r14
    117a:	ff 24       	eor	r15, r15
    117c:	1f c0       	rjmp	.+62     	; 0x11bc <Endpoint_Null_Stream+0x6e>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    117e:	80 91 e8 00 	lds	r24, 0x00E8

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    1182:	85 fd       	sbrc	r24, 5
    1184:	15 c0       	rjmp	.+42     	; 0x11b0 <Endpoint_Null_Stream+0x62>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1186:	80 91 e8 00 	lds	r24, 0x00E8
    118a:	8e 77       	andi	r24, 0x7E	; 126
    118c:	80 93 e8 00 	sts	0x00E8, r24
		{
			Endpoint_ClearIN();

			if (BytesProcessed != NULL)
    1190:	01 15       	cp	r16, r1
    1192:	11 05       	cpc	r17, r1
    1194:	49 f0       	breq	.+18     	; 0x11a8 <Endpoint_Null_Stream+0x5a>
			{
				*BytesProcessed += BytesInTransfer;
    1196:	f8 01       	movw	r30, r16
    1198:	80 81       	ld	r24, Z
    119a:	91 81       	ldd	r25, Z+1	; 0x01
    119c:	8e 0d       	add	r24, r14
    119e:	9f 1d       	adc	r25, r15
    11a0:	91 83       	std	Z+1, r25	; 0x01
    11a2:	80 83       	st	Z, r24
    11a4:	85 e0       	ldi	r24, 0x05	; 5
    11a6:	0d c0       	rjmp	.+26     	; 0x11c2 <Endpoint_Null_Stream+0x74>
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    11a8:	ba dd       	rcall	.-1164   	; 0xd1e <Endpoint_WaitUntilReady>
    11aa:	88 23       	and	r24, r24
    11ac:	39 f0       	breq	.+14     	; 0x11bc <Endpoint_Null_Stream+0x6e>
    11ae:	09 c0       	rjmp	.+18     	; 0x11c2 <Endpoint_Null_Stream+0x74>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    11b0:	10 92 f1 00 	sts	0x00F1, r1
		}
		else
		{
			Endpoint_Write_8(0);

			Length--;
    11b4:	21 97       	sbiw	r28, 0x01	; 1
			BytesInTransfer++;
    11b6:	08 94       	sec
    11b8:	e1 1c       	adc	r14, r1
    11ba:	f1 1c       	adc	r15, r1
	  return ErrorCode;
	  
	if (BytesProcessed != NULL)
	  Length -= *BytesProcessed;

	while (Length)
    11bc:	20 97       	sbiw	r28, 0x00	; 0
    11be:	f9 f6       	brne	.-66     	; 0x117e <Endpoint_Null_Stream+0x30>
    11c0:	8d 2d       	mov	r24, r13
			BytesInTransfer++;
		}
	}
	
	return ENDPOINT_RWSTREAM_NoError;
}
    11c2:	df 91       	pop	r29
    11c4:	cf 91       	pop	r28
    11c6:	1f 91       	pop	r17
    11c8:	0f 91       	pop	r16
    11ca:	ff 90       	pop	r15
    11cc:	ef 90       	pop	r14
    11ce:	df 90       	pop	r13
    11d0:	08 95       	ret

000011d2 <Endpoint_Read_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    11d2:	bf 92       	push	r11
    11d4:	cf 92       	push	r12
    11d6:	df 92       	push	r13
    11d8:	ef 92       	push	r14
    11da:	ff 92       	push	r15
    11dc:	0f 93       	push	r16
    11de:	1f 93       	push	r17
    11e0:	cf 93       	push	r28
    11e2:	df 93       	push	r29
    11e4:	18 2f       	mov	r17, r24
    11e6:	09 2f       	mov	r16, r25
    11e8:	7b 01       	movw	r14, r22
    11ea:	6a 01       	movw	r12, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    11ec:	98 dd       	rcall	.-1232   	; 0xd1e <Endpoint_WaitUntilReady>
    11ee:	b8 2e       	mov	r11, r24
    11f0:	88 23       	and	r24, r24
    11f2:	b1 f5       	brne	.+108    	; 0x1260 <Endpoint_Read_Stream_LE+0x8e>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    11f4:	81 2f       	mov	r24, r17
    11f6:	90 2f       	mov	r25, r16
    11f8:	9c 01       	movw	r18, r24
    11fa:	e9 01       	movw	r28, r18
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
    11fc:	c1 14       	cp	r12, r1
    11fe:	d1 04       	cpc	r13, r1
    1200:	39 f0       	breq	.+14     	; 0x1210 <Endpoint_Read_Stream_LE+0x3e>
	{
		Length -= *BytesProcessed;
    1202:	f6 01       	movw	r30, r12
    1204:	80 81       	ld	r24, Z
    1206:	91 81       	ldd	r25, Z+1	; 0x01
    1208:	e8 1a       	sub	r14, r24
    120a:	f9 0a       	sbc	r15, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    120c:	c8 0f       	add	r28, r24
    120e:	d9 1f       	adc	r29, r25
    1210:	00 e0       	ldi	r16, 0x00	; 0
    1212:	10 e0       	ldi	r17, 0x00	; 0
    1214:	22 c0       	rjmp	.+68     	; 0x125a <Endpoint_Read_Stream_LE+0x88>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1216:	80 91 e8 00 	lds	r24, 0x00E8
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    121a:	85 fd       	sbrc	r24, 5
    121c:	16 c0       	rjmp	.+44     	; 0x124a <Endpoint_Read_Stream_LE+0x78>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    121e:	80 91 e8 00 	lds	r24, 0x00E8
    1222:	8b 77       	andi	r24, 0x7B	; 123
    1224:	80 93 e8 00 	sts	0x00E8, r24
		{
			TEMPLATE_CLEAR_ENDPOINT();

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
    1228:	39 d2       	rcall	.+1138   	; 0x169c <USB_USBTask>
			#endif

			if (BytesProcessed != NULL)
    122a:	c1 14       	cp	r12, r1
    122c:	d1 04       	cpc	r13, r1
    122e:	49 f0       	breq	.+18     	; 0x1242 <Endpoint_Read_Stream_LE+0x70>
			{
				*BytesProcessed += BytesInTransfer;
    1230:	f6 01       	movw	r30, r12
    1232:	80 81       	ld	r24, Z
    1234:	91 81       	ldd	r25, Z+1	; 0x01
    1236:	80 0f       	add	r24, r16
    1238:	91 1f       	adc	r25, r17
    123a:	91 83       	std	Z+1, r25	; 0x01
    123c:	80 83       	st	Z, r24
    123e:	85 e0       	ldi	r24, 0x05	; 5
    1240:	10 c0       	rjmp	.+32     	; 0x1262 <Endpoint_Read_Stream_LE+0x90>
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    1242:	6d dd       	rcall	.-1318   	; 0xd1e <Endpoint_WaitUntilReady>
    1244:	88 23       	and	r24, r24
    1246:	49 f0       	breq	.+18     	; 0x125a <Endpoint_Read_Stream_LE+0x88>
    1248:	0c c0       	rjmp	.+24     	; 0x1262 <Endpoint_Read_Stream_LE+0x90>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    124a:	80 91 f1 00 	lds	r24, 0x00F1
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    124e:	89 93       	st	Y+, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    1250:	08 94       	sec
    1252:	e1 08       	sbc	r14, r1
    1254:	f1 08       	sbc	r15, r1
			BytesInTransfer++;
    1256:	0f 5f       	subi	r16, 0xFF	; 255
    1258:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    125a:	e1 14       	cp	r14, r1
    125c:	f1 04       	cpc	r15, r1
    125e:	d9 f6       	brne	.-74     	; 0x1216 <Endpoint_Read_Stream_LE+0x44>
    1260:	8b 2d       	mov	r24, r11
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
    1262:	df 91       	pop	r29
    1264:	cf 91       	pop	r28
    1266:	1f 91       	pop	r17
    1268:	0f 91       	pop	r16
    126a:	ff 90       	pop	r15
    126c:	ef 90       	pop	r14
    126e:	df 90       	pop	r13
    1270:	cf 90       	pop	r12
    1272:	bf 90       	pop	r11
    1274:	08 95       	ret

00001276 <Endpoint_Write_Stream_BE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    1276:	bf 92       	push	r11
    1278:	cf 92       	push	r12
    127a:	df 92       	push	r13
    127c:	ef 92       	push	r14
    127e:	ff 92       	push	r15
    1280:	0f 93       	push	r16
    1282:	1f 93       	push	r17
    1284:	cf 93       	push	r28
    1286:	df 93       	push	r29
    1288:	8c 01       	movw	r16, r24
    128a:	eb 01       	movw	r28, r22
    128c:	6a 01       	movw	r12, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    128e:	47 dd       	rcall	.-1394   	; 0xd1e <Endpoint_WaitUntilReady>
    1290:	b8 2e       	mov	r11, r24
    1292:	88 23       	and	r24, r24
    1294:	b9 f5       	brne	.+110    	; 0x1304 <Endpoint_Write_Stream_BE+0x8e>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    1296:	21 97       	sbiw	r28, 0x01	; 1
    1298:	0c 0f       	add	r16, r28
    129a:	1d 1f       	adc	r17, r29
    129c:	21 96       	adiw	r28, 0x01	; 1
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
    129e:	c1 14       	cp	r12, r1
    12a0:	d1 04       	cpc	r13, r1
    12a2:	39 f0       	breq	.+14     	; 0x12b2 <Endpoint_Write_Stream_BE+0x3c>
	{
		Length -= *BytesProcessed;
    12a4:	f6 01       	movw	r30, r12
    12a6:	80 81       	ld	r24, Z
    12a8:	91 81       	ldd	r25, Z+1	; 0x01
    12aa:	c8 1b       	sub	r28, r24
    12ac:	d9 0b       	sbc	r29, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    12ae:	08 1b       	sub	r16, r24
    12b0:	19 0b       	sbc	r17, r25
    12b2:	ee 24       	eor	r14, r14
    12b4:	ff 24       	eor	r15, r15
    12b6:	24 c0       	rjmp	.+72     	; 0x1300 <Endpoint_Write_Stream_BE+0x8a>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    12b8:	80 91 e8 00 	lds	r24, 0x00E8
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    12bc:	85 fd       	sbrc	r24, 5
    12be:	16 c0       	rjmp	.+44     	; 0x12ec <Endpoint_Write_Stream_BE+0x76>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    12c0:	80 91 e8 00 	lds	r24, 0x00E8
    12c4:	8e 77       	andi	r24, 0x7E	; 126
    12c6:	80 93 e8 00 	sts	0x00E8, r24
		{
			TEMPLATE_CLEAR_ENDPOINT();

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
    12ca:	e8 d1       	rcall	.+976    	; 0x169c <USB_USBTask>
			#endif

			if (BytesProcessed != NULL)
    12cc:	c1 14       	cp	r12, r1
    12ce:	d1 04       	cpc	r13, r1
    12d0:	49 f0       	breq	.+18     	; 0x12e4 <Endpoint_Write_Stream_BE+0x6e>
			{
				*BytesProcessed += BytesInTransfer;
    12d2:	f6 01       	movw	r30, r12
    12d4:	80 81       	ld	r24, Z
    12d6:	91 81       	ldd	r25, Z+1	; 0x01
    12d8:	8e 0d       	add	r24, r14
    12da:	9f 1d       	adc	r25, r15
    12dc:	91 83       	std	Z+1, r25	; 0x01
    12de:	80 83       	st	Z, r24
    12e0:	85 e0       	ldi	r24, 0x05	; 5
    12e2:	11 c0       	rjmp	.+34     	; 0x1306 <Endpoint_Write_Stream_BE+0x90>
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    12e4:	1c dd       	rcall	.-1480   	; 0xd1e <Endpoint_WaitUntilReady>
    12e6:	88 23       	and	r24, r24
    12e8:	59 f0       	breq	.+22     	; 0x1300 <Endpoint_Write_Stream_BE+0x8a>
    12ea:	0d c0       	rjmp	.+26     	; 0x1306 <Endpoint_Write_Stream_BE+0x90>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    12ec:	f8 01       	movw	r30, r16
    12ee:	80 81       	ld	r24, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    12f0:	80 93 f1 00 	sts	0x00F1, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
    12f4:	01 50       	subi	r16, 0x01	; 1
    12f6:	10 40       	sbci	r17, 0x00	; 0
			Length--;
    12f8:	21 97       	sbiw	r28, 0x01	; 1
			BytesInTransfer++;
    12fa:	08 94       	sec
    12fc:	e1 1c       	adc	r14, r1
    12fe:	f1 1c       	adc	r15, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    1300:	20 97       	sbiw	r28, 0x00	; 0
    1302:	d1 f6       	brne	.-76     	; 0x12b8 <Endpoint_Write_Stream_BE+0x42>
    1304:	8b 2d       	mov	r24, r11
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
    1306:	df 91       	pop	r29
    1308:	cf 91       	pop	r28
    130a:	1f 91       	pop	r17
    130c:	0f 91       	pop	r16
    130e:	ff 90       	pop	r15
    1310:	ef 90       	pop	r14
    1312:	df 90       	pop	r13
    1314:	cf 90       	pop	r12
    1316:	bf 90       	pop	r11
    1318:	08 95       	ret

0000131a <Endpoint_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    131a:	bf 92       	push	r11
    131c:	cf 92       	push	r12
    131e:	df 92       	push	r13
    1320:	ef 92       	push	r14
    1322:	ff 92       	push	r15
    1324:	0f 93       	push	r16
    1326:	1f 93       	push	r17
    1328:	cf 93       	push	r28
    132a:	df 93       	push	r29
    132c:	18 2f       	mov	r17, r24
    132e:	09 2f       	mov	r16, r25
    1330:	7b 01       	movw	r14, r22
    1332:	6a 01       	movw	r12, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    1334:	f4 dc       	rcall	.-1560   	; 0xd1e <Endpoint_WaitUntilReady>
    1336:	b8 2e       	mov	r11, r24
    1338:	88 23       	and	r24, r24
    133a:	b1 f5       	brne	.+108    	; 0x13a8 <Endpoint_Write_Stream_LE+0x8e>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    133c:	81 2f       	mov	r24, r17
    133e:	90 2f       	mov	r25, r16
    1340:	9c 01       	movw	r18, r24
    1342:	e9 01       	movw	r28, r18
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
    1344:	c1 14       	cp	r12, r1
    1346:	d1 04       	cpc	r13, r1
    1348:	39 f0       	breq	.+14     	; 0x1358 <Endpoint_Write_Stream_LE+0x3e>
	{
		Length -= *BytesProcessed;
    134a:	f6 01       	movw	r30, r12
    134c:	80 81       	ld	r24, Z
    134e:	91 81       	ldd	r25, Z+1	; 0x01
    1350:	e8 1a       	sub	r14, r24
    1352:	f9 0a       	sbc	r15, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    1354:	c8 0f       	add	r28, r24
    1356:	d9 1f       	adc	r29, r25
    1358:	00 e0       	ldi	r16, 0x00	; 0
    135a:	10 e0       	ldi	r17, 0x00	; 0
    135c:	22 c0       	rjmp	.+68     	; 0x13a2 <Endpoint_Write_Stream_LE+0x88>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    135e:	80 91 e8 00 	lds	r24, 0x00E8
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    1362:	85 fd       	sbrc	r24, 5
    1364:	16 c0       	rjmp	.+44     	; 0x1392 <Endpoint_Write_Stream_LE+0x78>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1366:	80 91 e8 00 	lds	r24, 0x00E8
    136a:	8e 77       	andi	r24, 0x7E	; 126
    136c:	80 93 e8 00 	sts	0x00E8, r24
		{
			TEMPLATE_CLEAR_ENDPOINT();

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
    1370:	95 d1       	rcall	.+810    	; 0x169c <USB_USBTask>
			#endif

			if (BytesProcessed != NULL)
    1372:	c1 14       	cp	r12, r1
    1374:	d1 04       	cpc	r13, r1
    1376:	49 f0       	breq	.+18     	; 0x138a <Endpoint_Write_Stream_LE+0x70>
			{
				*BytesProcessed += BytesInTransfer;
    1378:	f6 01       	movw	r30, r12
    137a:	80 81       	ld	r24, Z
    137c:	91 81       	ldd	r25, Z+1	; 0x01
    137e:	80 0f       	add	r24, r16
    1380:	91 1f       	adc	r25, r17
    1382:	91 83       	std	Z+1, r25	; 0x01
    1384:	80 83       	st	Z, r24
    1386:	85 e0       	ldi	r24, 0x05	; 5
    1388:	10 c0       	rjmp	.+32     	; 0x13aa <Endpoint_Write_Stream_LE+0x90>
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    138a:	c9 dc       	rcall	.-1646   	; 0xd1e <Endpoint_WaitUntilReady>
    138c:	88 23       	and	r24, r24
    138e:	49 f0       	breq	.+18     	; 0x13a2 <Endpoint_Write_Stream_LE+0x88>
    1390:	0c c0       	rjmp	.+24     	; 0x13aa <Endpoint_Write_Stream_LE+0x90>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    1392:	89 91       	ld	r24, Y+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1394:	80 93 f1 00 	sts	0x00F1, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    1398:	08 94       	sec
    139a:	e1 08       	sbc	r14, r1
    139c:	f1 08       	sbc	r15, r1
			BytesInTransfer++;
    139e:	0f 5f       	subi	r16, 0xFF	; 255
    13a0:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    13a2:	e1 14       	cp	r14, r1
    13a4:	f1 04       	cpc	r15, r1
    13a6:	d9 f6       	brne	.-74     	; 0x135e <Endpoint_Write_Stream_LE+0x44>
    13a8:	8b 2d       	mov	r24, r11
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
    13aa:	df 91       	pop	r29
    13ac:	cf 91       	pop	r28
    13ae:	1f 91       	pop	r17
    13b0:	0f 91       	pop	r16
    13b2:	ff 90       	pop	r15
    13b4:	ef 90       	pop	r14
    13b6:	df 90       	pop	r13
    13b8:	cf 90       	pop	r12
    13ba:	bf 90       	pop	r11
    13bc:	08 95       	ret

000013be <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    13be:	0f 93       	push	r16
    13c0:	1f 93       	push	r17
    13c2:	df 93       	push	r29
    13c4:	cf 93       	push	r28
    13c6:	cd b7       	in	r28, 0x3d	; 61
    13c8:	de b7       	in	r29, 0x3e	; 62
    13ca:	ac 97       	sbiw	r28, 0x2c	; 44
    13cc:	0f b6       	in	r0, 0x3f	; 63
    13ce:	f8 94       	cli
    13d0:	de bf       	out	0x3e, r29	; 62
    13d2:	0f be       	out	0x3f, r0	; 63
    13d4:	cd bf       	out	0x3d, r28	; 61
    13d6:	ea ee       	ldi	r30, 0xEA	; 234
    13d8:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    13da:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    13de:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    13e0:	21 e0       	ldi	r18, 0x01	; 1
    13e2:	e2 3f       	cpi	r30, 0xF2	; 242
    13e4:	f2 07       	cpc	r31, r18
    13e6:	c9 f7       	brne	.-14     	; 0x13da <USB_Device_ProcessControlRequest+0x1c>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    13e8:	0e 94 e6 00 	call	0x1cc	; 0x1cc <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    13ec:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
    13f0:	83 ff       	sbrs	r24, 3
    13f2:	3a c1       	rjmp	.+628    	; 0x1668 <USB_Device_ProcessControlRequest+0x2aa>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    13f4:	80 91 ea 01 	lds	r24, 0x01EA

		switch (USB_ControlRequest.bRequest)
    13f8:	30 91 eb 01 	lds	r19, 0x01EB
    13fc:	35 30       	cpi	r19, 0x05	; 5
    13fe:	09 f4       	brne	.+2      	; 0x1402 <USB_Device_ProcessControlRequest+0x44>
    1400:	87 c0       	rjmp	.+270    	; 0x1510 <USB_Device_ProcessControlRequest+0x152>
    1402:	36 30       	cpi	r19, 0x06	; 6
    1404:	40 f4       	brcc	.+16     	; 0x1416 <USB_Device_ProcessControlRequest+0x58>
    1406:	31 30       	cpi	r19, 0x01	; 1
    1408:	c9 f1       	breq	.+114    	; 0x147c <USB_Device_ProcessControlRequest+0xbe>
    140a:	31 30       	cpi	r19, 0x01	; 1
    140c:	70 f0       	brcs	.+28     	; 0x142a <USB_Device_ProcessControlRequest+0x6c>
    140e:	33 30       	cpi	r19, 0x03	; 3
    1410:	09 f0       	breq	.+2      	; 0x1414 <USB_Device_ProcessControlRequest+0x56>
    1412:	2a c1       	rjmp	.+596    	; 0x1668 <USB_Device_ProcessControlRequest+0x2aa>
    1414:	33 c0       	rjmp	.+102    	; 0x147c <USB_Device_ProcessControlRequest+0xbe>
    1416:	38 30       	cpi	r19, 0x08	; 8
    1418:	09 f4       	brne	.+2      	; 0x141c <USB_Device_ProcessControlRequest+0x5e>
    141a:	f7 c0       	rjmp	.+494    	; 0x160a <USB_Device_ProcessControlRequest+0x24c>
    141c:	39 30       	cpi	r19, 0x09	; 9
    141e:	09 f4       	brne	.+2      	; 0x1422 <USB_Device_ProcessControlRequest+0x64>
    1420:	06 c1       	rjmp	.+524    	; 0x162e <USB_Device_ProcessControlRequest+0x270>
    1422:	36 30       	cpi	r19, 0x06	; 6
    1424:	09 f0       	breq	.+2      	; 0x1428 <USB_Device_ProcessControlRequest+0x6a>
    1426:	20 c1       	rjmp	.+576    	; 0x1668 <USB_Device_ProcessControlRequest+0x2aa>
    1428:	97 c0       	rjmp	.+302    	; 0x1558 <USB_Device_ProcessControlRequest+0x19a>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    142a:	80 38       	cpi	r24, 0x80	; 128
    142c:	21 f0       	breq	.+8      	; 0x1436 <USB_Device_ProcessControlRequest+0x78>
    142e:	82 38       	cpi	r24, 0x82	; 130
    1430:	09 f0       	breq	.+2      	; 0x1434 <USB_Device_ProcessControlRequest+0x76>
    1432:	1a c1       	rjmp	.+564    	; 0x1668 <USB_Device_ProcessControlRequest+0x2aa>
    1434:	08 c0       	rjmp	.+16     	; 0x1446 <USB_Device_ProcessControlRequest+0x88>
    1436:	90 91 e6 01 	lds	r25, 0x01E6
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    143a:	80 91 e7 01 	lds	r24, 0x01E7
    143e:	88 23       	and	r24, r24
    1440:	99 f0       	breq	.+38     	; 0x1468 <USB_Device_ProcessControlRequest+0xaa>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    1442:	92 60       	ori	r25, 0x02	; 2
    1444:	11 c0       	rjmp	.+34     	; 0x1468 <USB_Device_ProcessControlRequest+0xaa>
			#endif
			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    1446:	80 91 ee 01 	lds	r24, 0x01EE
    144a:	87 70       	andi	r24, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    144c:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1450:	80 91 eb 00 	lds	r24, 0x00EB

			CurrentStatus = Endpoint_IsStalled();
    1454:	90 e0       	ldi	r25, 0x00	; 0
    1456:	25 e0       	ldi	r18, 0x05	; 5
    1458:	96 95       	lsr	r25
    145a:	87 95       	ror	r24
    145c:	2a 95       	dec	r18
    145e:	e1 f7       	brne	.-8      	; 0x1458 <USB_Device_ProcessControlRequest+0x9a>
    1460:	98 2f       	mov	r25, r24
    1462:	91 70       	andi	r25, 0x01	; 1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1464:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1468:	80 91 e8 00 	lds	r24, 0x00E8
    146c:	87 7f       	andi	r24, 0xF7	; 247
    146e:	80 93 e8 00 	sts	0x00E8, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    1472:	90 93 f1 00 	sts	0x00F1, r25
				UEDATX = (Data >> 8);
    1476:	10 92 f1 00 	sts	0x00F1, r1
    147a:	d2 c0       	rjmp	.+420    	; 0x1620 <USB_Device_ProcessControlRequest+0x262>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    147c:	88 23       	and	r24, r24
    147e:	19 f0       	breq	.+6      	; 0x1486 <USB_Device_ProcessControlRequest+0xc8>
    1480:	82 30       	cpi	r24, 0x02	; 2
    1482:	09 f0       	breq	.+2      	; 0x1486 <USB_Device_ProcessControlRequest+0xc8>
    1484:	f1 c0       	rjmp	.+482    	; 0x1668 <USB_Device_ProcessControlRequest+0x2aa>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    1486:	90 e0       	ldi	r25, 0x00	; 0
    1488:	8f 71       	andi	r24, 0x1F	; 31
    148a:	90 70       	andi	r25, 0x00	; 0
    148c:	00 97       	sbiw	r24, 0x00	; 0
    148e:	21 f0       	breq	.+8      	; 0x1498 <USB_Device_ProcessControlRequest+0xda>
    1490:	02 97       	sbiw	r24, 0x02	; 2
    1492:	09 f0       	breq	.+2      	; 0x1496 <USB_Device_ProcessControlRequest+0xd8>
    1494:	e9 c0       	rjmp	.+466    	; 0x1668 <USB_Device_ProcessControlRequest+0x2aa>
    1496:	0c c0       	rjmp	.+24     	; 0x14b0 <USB_Device_ProcessControlRequest+0xf2>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    1498:	80 91 ec 01 	lds	r24, 0x01EC
    149c:	81 30       	cpi	r24, 0x01	; 1
    149e:	09 f0       	breq	.+2      	; 0x14a2 <USB_Device_ProcessControlRequest+0xe4>
    14a0:	e3 c0       	rjmp	.+454    	; 0x1668 <USB_Device_ProcessControlRequest+0x2aa>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    14a2:	10 92 e7 01 	sts	0x01E7, r1
    14a6:	33 30       	cpi	r19, 0x03	; 3
    14a8:	69 f5       	brne	.+90     	; 0x1504 <USB_Device_ProcessControlRequest+0x146>
    14aa:	80 93 e7 01 	sts	0x01E7, r24
    14ae:	2a c0       	rjmp	.+84     	; 0x1504 <USB_Device_ProcessControlRequest+0x146>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    14b0:	80 91 ec 01 	lds	r24, 0x01EC
    14b4:	88 23       	and	r24, r24
    14b6:	31 f5       	brne	.+76     	; 0x1504 <USB_Device_ProcessControlRequest+0x146>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    14b8:	20 91 ee 01 	lds	r18, 0x01EE
    14bc:	27 70       	andi	r18, 0x07	; 7

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    14be:	09 f4       	brne	.+2      	; 0x14c2 <USB_Device_ProcessControlRequest+0x104>
    14c0:	d3 c0       	rjmp	.+422    	; 0x1668 <USB_Device_ProcessControlRequest+0x2aa>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    14c2:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    14c6:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    14ca:	80 ff       	sbrs	r24, 0
    14cc:	1b c0       	rjmp	.+54     	; 0x1504 <USB_Device_ProcessControlRequest+0x146>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    14ce:	33 30       	cpi	r19, 0x03	; 3
    14d0:	21 f4       	brne	.+8      	; 0x14da <USB_Device_ProcessControlRequest+0x11c>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    14d2:	80 91 eb 00 	lds	r24, 0x00EB
    14d6:	80 62       	ori	r24, 0x20	; 32
    14d8:	13 c0       	rjmp	.+38     	; 0x1500 <USB_Device_ProcessControlRequest+0x142>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    14da:	80 91 eb 00 	lds	r24, 0x00EB
    14de:	80 61       	ori	r24, 0x10	; 16
    14e0:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
    14e4:	81 e0       	ldi	r24, 0x01	; 1
    14e6:	90 e0       	ldi	r25, 0x00	; 0
    14e8:	02 c0       	rjmp	.+4      	; 0x14ee <USB_Device_ProcessControlRequest+0x130>
    14ea:	88 0f       	add	r24, r24
    14ec:	99 1f       	adc	r25, r25
    14ee:	2a 95       	dec	r18
    14f0:	e2 f7       	brpl	.-8      	; 0x14ea <USB_Device_ProcessControlRequest+0x12c>
    14f2:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
    14f6:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    14fa:	80 91 eb 00 	lds	r24, 0x00EB
    14fe:	88 60       	ori	r24, 0x08	; 8
    1500:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1504:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1508:	80 91 e8 00 	lds	r24, 0x00E8
    150c:	87 7f       	andi	r24, 0xF7	; 247
    150e:	8b c0       	rjmp	.+278    	; 0x1626 <USB_Device_ProcessControlRequest+0x268>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1510:	88 23       	and	r24, r24
    1512:	09 f0       	breq	.+2      	; 0x1516 <USB_Device_ProcessControlRequest+0x158>
    1514:	a9 c0       	rjmp	.+338    	; 0x1668 <USB_Device_ProcessControlRequest+0x2aa>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t    DeviceAddress    = (USB_ControlRequest.wValue & 0x7F);
    1516:	10 91 ec 01 	lds	r17, 0x01EC
    151a:	1f 77       	andi	r17, 0x7F	; 127
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    151c:	0f b7       	in	r16, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    151e:	f8 94       	cli
    1520:	80 91 e8 00 	lds	r24, 0x00E8
    1524:	87 7f       	andi	r24, 0xF7	; 247
    1526:	80 93 e8 00 	sts	0x00E8, r24
	uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
	GlobalInterruptDisable();
				
	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    152a:	d8 db       	rcall	.-2128   	; 0xcdc <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    152c:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
    1530:	80 ff       	sbrs	r24, 0
    1532:	fc cf       	rjmp	.-8      	; 0x152c <USB_Device_ProcessControlRequest+0x16e>
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				uint8_t Temp = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    1534:	80 91 e3 00 	lds	r24, 0x00E3
    1538:	80 78       	andi	r24, 0x80	; 128
    153a:	81 2b       	or	r24, r17

				UDADDR = Temp;
    153c:	80 93 e3 00 	sts	0x00E3, r24
				UDADDR = Temp | (1 << ADDEN);
    1540:	80 68       	ori	r24, 0x80	; 128
    1542:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_SetDeviceAddress(DeviceAddress);
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    1546:	11 23       	and	r17, r17
    1548:	11 f4       	brne	.+4      	; 0x154e <USB_Device_ProcessControlRequest+0x190>
    154a:	82 e0       	ldi	r24, 0x02	; 2
    154c:	01 c0       	rjmp	.+2      	; 0x1550 <USB_Device_ProcessControlRequest+0x192>
    154e:	83 e0       	ldi	r24, 0x03	; 3
    1550:	80 93 e9 01 	sts	0x01E9, r24
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    1554:	0f bf       	out	0x3f, r16	; 63
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;				
				#endif
				
				GCC_MEMORY_BARRIER();
    1556:	88 c0       	rjmp	.+272    	; 0x1668 <USB_Device_ProcessControlRequest+0x2aa>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1558:	80 58       	subi	r24, 0x80	; 128
    155a:	82 30       	cpi	r24, 0x02	; 2
    155c:	08 f0       	brcs	.+2      	; 0x1560 <USB_Device_ProcessControlRequest+0x1a2>
    155e:	84 c0       	rjmp	.+264    	; 0x1668 <USB_Device_ProcessControlRequest+0x2aa>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    1560:	80 91 ec 01 	lds	r24, 0x01EC
    1564:	90 91 ed 01 	lds	r25, 0x01ED
    1568:	23 e0       	ldi	r18, 0x03	; 3
    156a:	8c 3d       	cpi	r24, 0xDC	; 220
    156c:	92 07       	cpc	r25, r18
    156e:	09 f0       	breq	.+2      	; 0x1572 <USB_Device_ProcessControlRequest+0x1b4>
    1570:	33 c0       	rjmp	.+102    	; 0x15d8 <USB_Device_ProcessControlRequest+0x21a>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    1572:	83 e0       	ldi	r24, 0x03	; 3
    1574:	8c 83       	std	Y+4, r24	; 0x04
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    1576:	8a e2       	ldi	r24, 0x2A	; 42
    1578:	8b 83       	std	Y+3, r24	; 0x03
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    157a:	7f b7       	in	r23, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    157c:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
    157e:	de 01       	movw	r26, r28
    1580:	15 96       	adiw	r26, 0x05	; 5
    1582:	6e e0       	ldi	r22, 0x0E	; 14
    1584:	40 e0       	ldi	r20, 0x00	; 0
    1586:	50 e0       	ldi	r21, 0x00	; 0
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    1588:	11 e2       	ldi	r17, 0x21	; 33
    158a:	e6 2f       	mov	r30, r22
    158c:	f0 e0       	ldi	r31, 0x00	; 0
    158e:	10 93 57 00 	sts	0x0057, r17
    1592:	84 91       	lpm	r24, Z+

					if (SerialCharNum & 0x01)
    1594:	40 ff       	sbrs	r20, 0
    1596:	03 c0       	rjmp	.+6      	; 0x159e <USB_Device_ProcessControlRequest+0x1e0>
					{
						SerialByte >>= 4;
    1598:	82 95       	swap	r24
    159a:	8f 70       	andi	r24, 0x0F	; 15
						SigReadAddress++;
    159c:	6f 5f       	subi	r22, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    159e:	8f 70       	andi	r24, 0x0F	; 15
    15a0:	28 2f       	mov	r18, r24
    15a2:	30 e0       	ldi	r19, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    15a4:	8a 30       	cpi	r24, 0x0A	; 10
    15a6:	18 f0       	brcs	.+6      	; 0x15ae <USB_Device_ProcessControlRequest+0x1f0>
    15a8:	c9 01       	movw	r24, r18
    15aa:	c7 96       	adiw	r24, 0x37	; 55
    15ac:	02 c0       	rjmp	.+4      	; 0x15b2 <USB_Device_ProcessControlRequest+0x1f4>
    15ae:	c9 01       	movw	r24, r18
    15b0:	c0 96       	adiw	r24, 0x30	; 48
    15b2:	8d 93       	st	X+, r24
    15b4:	9d 93       	st	X+, r25
    15b6:	4f 5f       	subi	r20, 0xFF	; 255
    15b8:	5f 4f       	sbci	r21, 0xFF	; 255
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    15ba:	44 31       	cpi	r20, 0x14	; 20
    15bc:	51 05       	cpc	r21, r1
    15be:	29 f7       	brne	.-54     	; 0x158a <USB_Device_ProcessControlRequest+0x1cc>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    15c0:	7f bf       	out	0x3f, r23	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    15c2:	80 91 e8 00 	lds	r24, 0x00E8
    15c6:	87 7f       	andi	r24, 0xF7	; 247
    15c8:	80 93 e8 00 	sts	0x00E8, r24
	
	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    15cc:	ce 01       	movw	r24, r28
    15ce:	03 96       	adiw	r24, 0x03	; 3
    15d0:	6a e2       	ldi	r22, 0x2A	; 42
    15d2:	70 e0       	ldi	r23, 0x00	; 0
    15d4:	fd dc       	rcall	.-1542   	; 0xfd0 <Endpoint_Write_Control_Stream_LE>
    15d6:	13 c0       	rjmp	.+38     	; 0x15fe <USB_Device_ProcessControlRequest+0x240>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    15d8:	60 91 ee 01 	lds	r22, 0x01EE
    15dc:	ae 01       	movw	r20, r28
    15de:	4f 5f       	subi	r20, 0xFF	; 255
    15e0:	5f 4f       	sbci	r21, 0xFF	; 255
    15e2:	0e 94 94 01 	call	0x328	; 0x328 <CALLBACK_USB_GetDescriptor>
    15e6:	bc 01       	movw	r22, r24
    15e8:	00 97       	sbiw	r24, 0x00	; 0
    15ea:	09 f4       	brne	.+2      	; 0x15ee <USB_Device_ProcessControlRequest+0x230>
    15ec:	3d c0       	rjmp	.+122    	; 0x1668 <USB_Device_ProcessControlRequest+0x2aa>
    15ee:	80 91 e8 00 	lds	r24, 0x00E8
    15f2:	87 7f       	andi	r24, 0xF7	; 247
    15f4:	80 93 e8 00 	sts	0x00E8, r24
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    15f8:	89 81       	ldd	r24, Y+1	; 0x01
    15fa:	9a 81       	ldd	r25, Y+2	; 0x02
    15fc:	47 dd       	rcall	.-1394   	; 0x108c <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    15fe:	80 91 e8 00 	lds	r24, 0x00E8
    1602:	8b 77       	andi	r24, 0x7B	; 123
    1604:	80 93 e8 00 	sts	0x00E8, r24
    1608:	2f c0       	rjmp	.+94     	; 0x1668 <USB_Device_ProcessControlRequest+0x2aa>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    160a:	80 38       	cpi	r24, 0x80	; 128
    160c:	69 f5       	brne	.+90     	; 0x1668 <USB_Device_ProcessControlRequest+0x2aa>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    160e:	80 91 e8 00 	lds	r24, 0x00E8
    1612:	87 7f       	andi	r24, 0xF7	; 247
    1614:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    1618:	80 91 e5 01 	lds	r24, 0x01E5
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    161c:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1620:	80 91 e8 00 	lds	r24, 0x00E8
    1624:	8e 77       	andi	r24, 0x7E	; 126
    1626:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    162a:	58 db       	rcall	.-2384   	; 0xcdc <Endpoint_ClearStatusStage>
    162c:	1d c0       	rjmp	.+58     	; 0x1668 <USB_Device_ProcessControlRequest+0x2aa>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    162e:	88 23       	and	r24, r24
    1630:	d9 f4       	brne	.+54     	; 0x1668 <USB_Device_ProcessControlRequest+0x2aa>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    1632:	90 91 ec 01 	lds	r25, 0x01EC
    1636:	92 30       	cpi	r25, 0x02	; 2
    1638:	b8 f4       	brcc	.+46     	; 0x1668 <USB_Device_ProcessControlRequest+0x2aa>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    163a:	80 91 e8 00 	lds	r24, 0x00E8
    163e:	87 7f       	andi	r24, 0xF7	; 247
    1640:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    1644:	90 93 e5 01 	sts	0x01E5, r25

	Endpoint_ClearStatusStage();
    1648:	49 db       	rcall	.-2414   	; 0xcdc <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    164a:	80 91 e5 01 	lds	r24, 0x01E5
    164e:	88 23       	and	r24, r24
    1650:	31 f4       	brne	.+12     	; 0x165e <USB_Device_ProcessControlRequest+0x2a0>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    1652:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    1656:	87 fd       	sbrc	r24, 7
    1658:	02 c0       	rjmp	.+4      	; 0x165e <USB_Device_ProcessControlRequest+0x2a0>
    165a:	81 e0       	ldi	r24, 0x01	; 1
    165c:	01 c0       	rjmp	.+2      	; 0x1660 <USB_Device_ProcessControlRequest+0x2a2>
    165e:	84 e0       	ldi	r24, 0x04	; 4
    1660:	80 93 e9 01 	sts	0x01E9, r24

	EVENT_USB_Device_ConfigurationChanged();
    1664:	0e 94 ee 00 	call	0x1dc	; 0x1dc <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1668:	80 91 e8 00 	lds	r24, 0x00E8

				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    166c:	83 ff       	sbrs	r24, 3
    166e:	0a c0       	rjmp	.+20     	; 0x1684 <USB_Device_ProcessControlRequest+0x2c6>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1670:	80 91 eb 00 	lds	r24, 0x00EB
    1674:	80 62       	ori	r24, 0x20	; 32
    1676:	80 93 eb 00 	sts	0x00EB, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    167a:	80 91 e8 00 	lds	r24, 0x00E8
    167e:	87 7f       	andi	r24, 0xF7	; 247
    1680:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_StallTransaction();
		Endpoint_ClearSETUP();
	}
}
    1684:	ac 96       	adiw	r28, 0x2c	; 44
    1686:	0f b6       	in	r0, 0x3f	; 63
    1688:	f8 94       	cli
    168a:	de bf       	out	0x3e, r29	; 62
    168c:	0f be       	out	0x3f, r0	; 63
    168e:	cd bf       	out	0x3d, r28	; 61
    1690:	cf 91       	pop	r28
    1692:	df 91       	pop	r29
    1694:	1f 91       	pop	r17
    1696:	0f 91       	pop	r16
    1698:	08 95       	ret

0000169a <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
    169a:	08 95       	ret

0000169c <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    169c:	1f 93       	push	r17
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
    169e:	80 91 e9 01 	lds	r24, 0x01E9
    16a2:	88 23       	and	r24, r24
    16a4:	61 f0       	breq	.+24     	; 0x16be <USB_USBTask+0x22>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
    16a6:	10 91 e9 00 	lds	r17, 0x00E9
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    16aa:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    16ae:	80 91 e8 00 	lds	r24, 0x00E8
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
    16b2:	83 ff       	sbrs	r24, 3
    16b4:	01 c0       	rjmp	.+2      	; 0x16b8 <USB_USBTask+0x1c>
		  USB_Device_ProcessControlRequest();
    16b6:	83 de       	rcall	.-762    	; 0x13be <USB_Device_ProcessControlRequest>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
    16b8:	17 70       	andi	r17, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    16ba:	10 93 e9 00 	sts	0x00E9, r17
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
    16be:	1f 91       	pop	r17
    16c0:	08 95       	ret

000016c2 <CDC_Device_ReceiveByte>:

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    16c2:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    16c4:	80 91 e9 01 	lds	r24, 0x01E9
    16c8:	84 30       	cpi	r24, 0x04	; 4
    16ca:	41 f5       	brne	.+80     	; 0x171c <CDC_Device_ReceiveByte+0x5a>
    16cc:	87 85       	ldd	r24, Z+15	; 0x0f
    16ce:	90 89       	ldd	r25, Z+16	; 0x10
    16d0:	a1 89       	ldd	r26, Z+17	; 0x11
    16d2:	b2 89       	ldd	r27, Z+18	; 0x12
    16d4:	00 97       	sbiw	r24, 0x00	; 0
    16d6:	a1 05       	cpc	r26, r1
    16d8:	b1 05       	cpc	r27, r1
    16da:	01 f1       	breq	.+64     	; 0x171c <CDC_Device_ReceiveByte+0x5a>
	  return -1;

	int16_t ReceivedByte = -1;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataOUTEndpointNumber);
    16dc:	85 81       	ldd	r24, Z+5	; 0x05
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    16de:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    16e2:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsOUTReceived())
    16e6:	82 ff       	sbrs	r24, 2
    16e8:	19 c0       	rjmp	.+50     	; 0x171c <CDC_Device_ReceiveByte+0x5a>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
    16ea:	80 91 f2 00 	lds	r24, 0x00F2
    16ee:	90 91 f3 00 	lds	r25, 0x00F3
	{
		if (Endpoint_BytesInEndpoint())
    16f2:	89 2b       	or	r24, r25
    16f4:	19 f4       	brne	.+6      	; 0x16fc <CDC_Device_ReceiveByte+0x3a>
    16f6:	2f ef       	ldi	r18, 0xFF	; 255
    16f8:	3f ef       	ldi	r19, 0xFF	; 255
    16fa:	04 c0       	rjmp	.+8      	; 0x1704 <CDC_Device_ReceiveByte+0x42>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    16fc:	80 91 f1 00 	lds	r24, 0x00F1
		  ReceivedByte = Endpoint_Read_8();
    1700:	28 2f       	mov	r18, r24
    1702:	30 e0       	ldi	r19, 0x00	; 0
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
    1704:	80 91 f2 00 	lds	r24, 0x00F2
    1708:	90 91 f3 00 	lds	r25, 0x00F3

		if (!(Endpoint_BytesInEndpoint()))
    170c:	89 2b       	or	r24, r25
    170e:	41 f4       	brne	.+16     	; 0x1720 <CDC_Device_ReceiveByte+0x5e>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1710:	80 91 e8 00 	lds	r24, 0x00E8
    1714:	8b 77       	andi	r24, 0x7B	; 123
    1716:	80 93 e8 00 	sts	0x00E8, r24
    171a:	02 c0       	rjmp	.+4      	; 0x1720 <CDC_Device_ReceiveByte+0x5e>
    171c:	2f ef       	ldi	r18, 0xFF	; 255
    171e:	3f ef       	ldi	r19, 0xFF	; 255
		  Endpoint_ClearOUT();
	}

	return ReceivedByte;
}
    1720:	c9 01       	movw	r24, r18
    1722:	08 95       	ret

00001724 <CDC_Device_CreateStream>:
}

#if defined(FDEV_SETUP_STREAM)
void CDC_Device_CreateStream(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                             FILE* const Stream)
{
    1724:	fb 01       	movw	r30, r22
	*Stream = (FILE)FDEV_SETUP_STREAM(CDC_Device_putchar, CDC_Device_getchar, _FDEV_SETUP_RW);
    1726:	2e e0       	ldi	r18, 0x0E	; 14
    1728:	db 01       	movw	r26, r22
    172a:	1d 92       	st	X+, r1
    172c:	2a 95       	dec	r18
    172e:	e9 f7       	brne	.-6      	; 0x172a <CDC_Device_CreateStream+0x6>
    1730:	23 e0       	ldi	r18, 0x03	; 3
    1732:	23 83       	std	Z+3, r18	; 0x03
    1734:	24 e1       	ldi	r18, 0x14	; 20
    1736:	3c e0       	ldi	r19, 0x0C	; 12
    1738:	31 87       	std	Z+9, r19	; 0x09
    173a:	20 87       	std	Z+8, r18	; 0x08
    173c:	25 ea       	ldi	r18, 0xA5	; 165
    173e:	3b e0       	ldi	r19, 0x0B	; 11
    1740:	33 87       	std	Z+11, r19	; 0x0b
    1742:	22 87       	std	Z+10, r18	; 0x0a
	fdev_set_udata(Stream, CDCInterfaceInfo);
    1744:	95 87       	std	Z+13, r25	; 0x0d
    1746:	84 87       	std	Z+12, r24	; 0x0c
}
    1748:	08 95       	ret

0000174a <CDC_Device_getchar>:
	return CDC_Device_SendByte((USB_ClassInfo_CDC_Device_t*)fdev_get_udata(Stream), c) ? _FDEV_ERR : 0;
}

static int CDC_Device_getchar(FILE* Stream)
{
	int16_t ReceivedByte = CDC_Device_ReceiveByte((USB_ClassInfo_CDC_Device_t*)fdev_get_udata(Stream));
    174a:	fc 01       	movw	r30, r24
    174c:	84 85       	ldd	r24, Z+12	; 0x0c
    174e:	95 85       	ldd	r25, Z+13	; 0x0d
    1750:	b8 df       	rcall	.-144    	; 0x16c2 <CDC_Device_ReceiveByte>
    1752:	9c 01       	movw	r18, r24

	if (ReceivedByte < 0)
    1754:	97 ff       	sbrs	r25, 7
    1756:	02 c0       	rjmp	.+4      	; 0x175c <CDC_Device_getchar+0x12>
    1758:	2e ef       	ldi	r18, 0xFE	; 254
    175a:	3f ef       	ldi	r19, 0xFF	; 255
	  return _FDEV_EOF;

	return ReceivedByte;
}
    175c:	c9 01       	movw	r24, r18
    175e:	08 95       	ret

00001760 <CDC_Device_Event_Stub>:
#endif

void CDC_Device_Event_Stub(void)
{

}
    1760:	08 95       	ret

00001762 <CDC_Device_Flush>:
	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
}

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    1762:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    1764:	80 91 e9 01 	lds	r24, 0x01E9
    1768:	84 30       	cpi	r24, 0x04	; 4
    176a:	21 f5       	brne	.+72     	; 0x17b4 <CDC_Device_Flush+0x52>
    176c:	87 85       	ldd	r24, Z+15	; 0x0f
    176e:	90 89       	ldd	r25, Z+16	; 0x10
    1770:	a1 89       	ldd	r26, Z+17	; 0x11
    1772:	b2 89       	ldd	r27, Z+18	; 0x12
    1774:	00 97       	sbiw	r24, 0x00	; 0
    1776:	a1 05       	cpc	r26, r1
    1778:	b1 05       	cpc	r27, r1
    177a:	e1 f0       	breq	.+56     	; 0x17b4 <CDC_Device_Flush+0x52>
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpointNumber);
    177c:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    177e:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
    1782:	80 91 f2 00 	lds	r24, 0x00F2
    1786:	90 91 f3 00 	lds	r25, 0x00F3

	if (!(Endpoint_BytesInEndpoint()))
    178a:	89 2b       	or	r24, r25
    178c:	a9 f0       	breq	.+42     	; 0x17b8 <CDC_Device_Flush+0x56>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    178e:	90 91 e8 00 	lds	r25, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1792:	80 91 e8 00 	lds	r24, 0x00E8
    1796:	8e 77       	andi	r24, 0x7E	; 126
    1798:	80 93 e8 00 	sts	0x00E8, r24

	bool BankFull = !(Endpoint_IsReadWriteAllowed());

	Endpoint_ClearIN();

	if (BankFull)
    179c:	95 fd       	sbrc	r25, 5
    179e:	0c c0       	rjmp	.+24     	; 0x17b8 <CDC_Device_Flush+0x56>
	{
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
    17a0:	be da       	rcall	.-2692   	; 0xd1e <Endpoint_WaitUntilReady>
    17a2:	98 2f       	mov	r25, r24
    17a4:	88 23       	and	r24, r24
    17a6:	49 f4       	brne	.+18     	; 0x17ba <CDC_Device_Flush+0x58>
    17a8:	80 91 e8 00 	lds	r24, 0x00E8
    17ac:	8e 77       	andi	r24, 0x7E	; 126
    17ae:	80 93 e8 00 	sts	0x00E8, r24
    17b2:	03 c0       	rjmp	.+6      	; 0x17ba <CDC_Device_Flush+0x58>
    17b4:	92 e0       	ldi	r25, 0x02	; 2
    17b6:	01 c0       	rjmp	.+2      	; 0x17ba <CDC_Device_Flush+0x58>
    17b8:	90 e0       	ldi	r25, 0x00	; 0

		Endpoint_ClearIN();
	}

	return ENDPOINT_READYWAIT_NoError;
}
    17ba:	89 2f       	mov	r24, r25
    17bc:	08 95       	ret

000017be <CDC_Device_USBTask>:

	return true;
}

void CDC_Device_USBTask(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    17be:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    17c0:	80 91 e9 01 	lds	r24, 0x01E9
    17c4:	84 30       	cpi	r24, 0x04	; 4
    17c6:	51 f4       	brne	.+20     	; 0x17dc <CDC_Device_USBTask+0x1e>
    17c8:	87 85       	ldd	r24, Z+15	; 0x0f
    17ca:	90 89       	ldd	r25, Z+16	; 0x10
    17cc:	a1 89       	ldd	r26, Z+17	; 0x11
    17ce:	b2 89       	ldd	r27, Z+18	; 0x12
    17d0:	00 97       	sbiw	r24, 0x00	; 0
    17d2:	a1 05       	cpc	r26, r1
    17d4:	b1 05       	cpc	r27, r1
    17d6:	11 f0       	breq	.+4      	; 0x17dc <CDC_Device_USBTask+0x1e>
	  return;

	#if !defined(NO_CLASS_DRIVER_AUTOFLUSH)
	CDC_Device_Flush(CDCInterfaceInfo);
    17d8:	cf 01       	movw	r24, r30
    17da:	c3 cf       	rjmp	.-122    	; 0x1762 <CDC_Device_Flush>
    17dc:	08 95       	ret

000017de <CDC_Device_SendByte>:
	return Endpoint_Write_Stream_LE(Buffer, Length, NULL);
}

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
    17de:	1f 93       	push	r17
    17e0:	fc 01       	movw	r30, r24
    17e2:	16 2f       	mov	r17, r22
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    17e4:	80 91 e9 01 	lds	r24, 0x01E9
    17e8:	84 30       	cpi	r24, 0x04	; 4
    17ea:	d9 f4       	brne	.+54     	; 0x1822 <CDC_Device_SendByte+0x44>
    17ec:	87 85       	ldd	r24, Z+15	; 0x0f
    17ee:	90 89       	ldd	r25, Z+16	; 0x10
    17f0:	a1 89       	ldd	r26, Z+17	; 0x11
    17f2:	b2 89       	ldd	r27, Z+18	; 0x12
    17f4:	00 97       	sbiw	r24, 0x00	; 0
    17f6:	a1 05       	cpc	r26, r1
    17f8:	b1 05       	cpc	r27, r1
    17fa:	99 f0       	breq	.+38     	; 0x1822 <CDC_Device_SendByte+0x44>
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpointNumber);
    17fc:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    17fe:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1802:	80 91 e8 00 	lds	r24, 0x00E8

	if (!(Endpoint_IsReadWriteAllowed()))
    1806:	85 fd       	sbrc	r24, 5
    1808:	08 c0       	rjmp	.+16     	; 0x181a <CDC_Device_SendByte+0x3c>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    180a:	80 91 e8 00 	lds	r24, 0x00E8
    180e:	8e 77       	andi	r24, 0x7E	; 126
    1810:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_ClearIN();

		uint8_t ErrorCode;

		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
    1814:	84 da       	rcall	.-2808   	; 0xd1e <Endpoint_WaitUntilReady>
    1816:	88 23       	and	r24, r24
    1818:	29 f4       	brne	.+10     	; 0x1824 <CDC_Device_SendByte+0x46>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    181a:	10 93 f1 00 	sts	0x00F1, r17
    181e:	80 e0       	ldi	r24, 0x00	; 0
    1820:	01 c0       	rjmp	.+2      	; 0x1824 <CDC_Device_SendByte+0x46>
		  return ErrorCode;
	}

	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
    1822:	82 e0       	ldi	r24, 0x02	; 2
}
    1824:	1f 91       	pop	r17
    1826:	08 95       	ret

00001828 <CDC_Device_putchar>:
	fdev_set_udata(Stream, CDCInterfaceInfo);
}

static int CDC_Device_putchar(char c,
                              FILE* Stream)
{
    1828:	28 2f       	mov	r18, r24
    182a:	fb 01       	movw	r30, r22
	return CDC_Device_SendByte((USB_ClassInfo_CDC_Device_t*)fdev_get_udata(Stream), c) ? _FDEV_ERR : 0;
    182c:	84 85       	ldd	r24, Z+12	; 0x0c
    182e:	95 85       	ldd	r25, Z+13	; 0x0d
    1830:	62 2f       	mov	r22, r18
    1832:	d5 df       	rcall	.-86     	; 0x17de <CDC_Device_SendByte>
    1834:	88 23       	and	r24, r24
    1836:	19 f4       	brne	.+6      	; 0x183e <CDC_Device_putchar+0x16>
    1838:	20 e0       	ldi	r18, 0x00	; 0
    183a:	30 e0       	ldi	r19, 0x00	; 0
    183c:	02 c0       	rjmp	.+4      	; 0x1842 <CDC_Device_putchar+0x1a>
    183e:	2f ef       	ldi	r18, 0xFF	; 255
    1840:	3f ef       	ldi	r19, 0xFF	; 255
}
    1842:	c9 01       	movw	r24, r18
    1844:	08 95       	ret

00001846 <CDC_Device_ConfigureEndpoints>:
			break;
	}
}

bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    1846:	1f 93       	push	r17
    1848:	cf 93       	push	r28
    184a:	df 93       	push	r29
    184c:	ec 01       	movw	r28, r24
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));
    184e:	0d 96       	adiw	r24, 0x0d	; 13
    1850:	fc 01       	movw	r30, r24
    1852:	89 e0       	ldi	r24, 0x09	; 9
    1854:	df 01       	movw	r26, r30
    1856:	1d 92       	st	X+, r1
    1858:	8a 95       	dec	r24
    185a:	e9 f7       	brne	.-6      	; 0x1856 <CDC_Device_ConfigureEndpoints+0x10>
    185c:	11 e0       	ldi	r17, 0x01	; 1
		uint16_t Size;
		uint8_t  Type;
		uint8_t  Direction;
		bool     DoubleBanked;

		if (EndpointNum == CDCInterfaceInfo->Config.DataINEndpointNumber)
    185e:	89 81       	ldd	r24, Y+1	; 0x01
    1860:	18 17       	cp	r17, r24
    1862:	29 f4       	brne	.+10     	; 0x186e <CDC_Device_ConfigureEndpoints+0x28>
		{
			Size         = CDCInterfaceInfo->Config.DataINEndpointSize;
    1864:	6a 81       	ldd	r22, Y+2	; 0x02
    1866:	7b 81       	ldd	r23, Y+3	; 0x03
			Direction    = ENDPOINT_DIR_IN;
			Type         = EP_TYPE_BULK;
			DoubleBanked = CDCInterfaceInfo->Config.DataINEndpointDoubleBank;
    1868:	8c 81       	ldd	r24, Y+4	; 0x04
    186a:	52 e0       	ldi	r21, 0x02	; 2
    186c:	10 c0       	rjmp	.+32     	; 0x188e <CDC_Device_ConfigureEndpoints+0x48>
		}
		else if (EndpointNum == CDCInterfaceInfo->Config.DataOUTEndpointNumber)
    186e:	8d 81       	ldd	r24, Y+5	; 0x05
    1870:	18 17       	cp	r17, r24
    1872:	31 f4       	brne	.+12     	; 0x1880 <CDC_Device_ConfigureEndpoints+0x3a>
		{
			Size         = CDCInterfaceInfo->Config.DataOUTEndpointSize;
    1874:	6e 81       	ldd	r22, Y+6	; 0x06
    1876:	7f 81       	ldd	r23, Y+7	; 0x07
			Direction    = ENDPOINT_DIR_OUT;
			Type         = EP_TYPE_BULK;
			DoubleBanked = CDCInterfaceInfo->Config.DataOUTEndpointDoubleBank;
    1878:	88 85       	ldd	r24, Y+8	; 0x08
    187a:	52 e0       	ldi	r21, 0x02	; 2
    187c:	30 e0       	ldi	r19, 0x00	; 0
    187e:	08 c0       	rjmp	.+16     	; 0x1890 <CDC_Device_ConfigureEndpoints+0x4a>
		}
		else if (EndpointNum == CDCInterfaceInfo->Config.NotificationEndpointNumber)
    1880:	89 85       	ldd	r24, Y+9	; 0x09
    1882:	18 17       	cp	r17, r24
    1884:	39 f5       	brne	.+78     	; 0x18d4 <CDC_Device_ConfigureEndpoints+0x8e>
		{
			Size         = CDCInterfaceInfo->Config.NotificationEndpointSize;
    1886:	6a 85       	ldd	r22, Y+10	; 0x0a
    1888:	7b 85       	ldd	r23, Y+11	; 0x0b
			Direction    = ENDPOINT_DIR_IN;
			Type         = EP_TYPE_INTERRUPT;
			DoubleBanked = CDCInterfaceInfo->Config.NotificationEndpointDoubleBank;
    188a:	8c 85       	ldd	r24, Y+12	; 0x0c
    188c:	53 e0       	ldi	r21, 0x03	; 3
    188e:	30 e8       	ldi	r19, 0x80	; 128
		else
		{
			continue;
		}

		if (!(Endpoint_ConfigureEndpoint(EndpointNum, Type, Direction, Size,
    1890:	88 23       	and	r24, r24
    1892:	11 f4       	brne	.+4      	; 0x1898 <CDC_Device_ConfigureEndpoints+0x52>
    1894:	40 e0       	ldi	r20, 0x00	; 0
    1896:	01 c0       	rjmp	.+2      	; 0x189a <CDC_Device_ConfigureEndpoints+0x54>
    1898:	44 e0       	ldi	r20, 0x04	; 4
    189a:	20 e0       	ldi	r18, 0x00	; 0
    189c:	88 e0       	ldi	r24, 0x08	; 8
    189e:	90 e0       	ldi	r25, 0x00	; 0
    18a0:	03 c0       	rjmp	.+6      	; 0x18a8 <CDC_Device_ConfigureEndpoints+0x62>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
				{
					MaskVal++;
    18a2:	2f 5f       	subi	r18, 0xFF	; 255
					CheckBytes <<= 1;
    18a4:	88 0f       	add	r24, r24
    18a6:	99 1f       	adc	r25, r25
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
    18a8:	86 17       	cp	r24, r22
    18aa:	97 07       	cpc	r25, r23
    18ac:	d0 f3       	brcs	.-12     	; 0x18a2 <CDC_Device_ConfigureEndpoints+0x5c>
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
    18ae:	85 2f       	mov	r24, r21
    18b0:	90 e0       	ldi	r25, 0x00	; 0
    18b2:	56 e0       	ldi	r21, 0x06	; 6
    18b4:	88 0f       	add	r24, r24
    18b6:	99 1f       	adc	r25, r25
    18b8:	5a 95       	dec	r21
    18ba:	e1 f7       	brne	.-8      	; 0x18b4 <CDC_Device_ConfigureEndpoints+0x6e>
    18bc:	60 e0       	ldi	r22, 0x00	; 0
    18be:	31 11       	cpse	r19, r1
    18c0:	61 e0       	ldi	r22, 0x01	; 1
    18c2:	68 2b       	or	r22, r24
    18c4:	42 60       	ori	r20, 0x02	; 2
    18c6:	22 95       	swap	r18
    18c8:	20 7f       	andi	r18, 0xF0	; 240
    18ca:	42 2b       	or	r20, r18
    18cc:	81 2f       	mov	r24, r17
    18ce:	d1 d9       	rcall	.-3166   	; 0xc72 <Endpoint_ConfigureEndpoint_Prv>
    18d0:	88 23       	and	r24, r24
    18d2:	29 f0       	breq	.+10     	; 0x18de <CDC_Device_ConfigureEndpoints+0x98>

bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));

	for (uint8_t EndpointNum = 1; EndpointNum < ENDPOINT_TOTAL_ENDPOINTS; EndpointNum++)
    18d4:	1f 5f       	subi	r17, 0xFF	; 255
    18d6:	17 30       	cpi	r17, 0x07	; 7
    18d8:	09 f0       	breq	.+2      	; 0x18dc <CDC_Device_ConfigureEndpoints+0x96>
    18da:	c1 cf       	rjmp	.-126    	; 0x185e <CDC_Device_ConfigureEndpoints+0x18>
    18dc:	81 e0       	ldi	r24, 0x01	; 1
			return false;
		}
	}

	return true;
}
    18de:	df 91       	pop	r29
    18e0:	cf 91       	pop	r28
    18e2:	1f 91       	pop	r17
    18e4:	08 95       	ret

000018e6 <CDC_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_CDC_DRIVER
#define  __INCLUDE_FROM_CDC_DEVICE_C
#include "CDC.h"

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    18e6:	cf 93       	push	r28
    18e8:	df 93       	push	r29
    18ea:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    18ec:	80 91 e8 00 	lds	r24, 0x00E8
	if (!(Endpoint_IsSETUPReceived()))
    18f0:	83 ff       	sbrs	r24, 3
    18f2:	92 c0       	rjmp	.+292    	; 0x1a18 <CDC_Device_ProcessControlRequest+0x132>
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
    18f4:	88 81       	ld	r24, Y
    18f6:	90 e0       	ldi	r25, 0x00	; 0
    18f8:	20 91 ee 01 	lds	r18, 0x01EE
    18fc:	30 91 ef 01 	lds	r19, 0x01EF
    1900:	28 17       	cp	r18, r24
    1902:	39 07       	cpc	r19, r25
    1904:	09 f0       	breq	.+2      	; 0x1908 <CDC_Device_ProcessControlRequest+0x22>
    1906:	88 c0       	rjmp	.+272    	; 0x1a18 <CDC_Device_ProcessControlRequest+0x132>
	  return;

	switch (USB_ControlRequest.bRequest)
    1908:	80 91 eb 01 	lds	r24, 0x01EB
    190c:	81 32       	cpi	r24, 0x21	; 33
    190e:	69 f0       	breq	.+26     	; 0x192a <CDC_Device_ProcessControlRequest+0x44>
    1910:	82 32       	cpi	r24, 0x22	; 34
    1912:	20 f4       	brcc	.+8      	; 0x191c <CDC_Device_ProcessControlRequest+0x36>
    1914:	80 32       	cpi	r24, 0x20	; 32
    1916:	09 f0       	breq	.+2      	; 0x191a <CDC_Device_ProcessControlRequest+0x34>
    1918:	7f c0       	rjmp	.+254    	; 0x1a18 <CDC_Device_ProcessControlRequest+0x132>
    191a:	38 c0       	rjmp	.+112    	; 0x198c <CDC_Device_ProcessControlRequest+0xa6>
    191c:	82 32       	cpi	r24, 0x22	; 34
    191e:	09 f4       	brne	.+2      	; 0x1922 <CDC_Device_ProcessControlRequest+0x3c>
    1920:	5d c0       	rjmp	.+186    	; 0x19dc <CDC_Device_ProcessControlRequest+0xf6>
    1922:	83 32       	cpi	r24, 0x23	; 35
    1924:	09 f0       	breq	.+2      	; 0x1928 <CDC_Device_ProcessControlRequest+0x42>
    1926:	78 c0       	rjmp	.+240    	; 0x1a18 <CDC_Device_ProcessControlRequest+0x132>
    1928:	69 c0       	rjmp	.+210    	; 0x19fc <CDC_Device_ProcessControlRequest+0x116>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    192a:	80 91 ea 01 	lds	r24, 0x01EA
    192e:	81 3a       	cpi	r24, 0xA1	; 161
    1930:	09 f0       	breq	.+2      	; 0x1934 <CDC_Device_ProcessControlRequest+0x4e>
    1932:	72 c0       	rjmp	.+228    	; 0x1a18 <CDC_Device_ProcessControlRequest+0x132>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1934:	80 91 e8 00 	lds	r24, 0x00E8
    1938:	87 7f       	andi	r24, 0xF7	; 247
    193a:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
    193e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1940:	98 89       	ldd	r25, Y+16	; 0x10
    1942:	a9 89       	ldd	r26, Y+17	; 0x11
    1944:	ba 89       	ldd	r27, Y+18	; 0x12
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_LE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_LE(const uint32_t Data)
			{
				UEDATX = (Data &  0xFF);
    1946:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
    194a:	29 2f       	mov	r18, r25
    194c:	3a 2f       	mov	r19, r26
    194e:	4b 2f       	mov	r20, r27
    1950:	55 27       	eor	r21, r21
    1952:	20 93 f1 00 	sts	0x00F1, r18
				UEDATX = (Data >> 16);
    1956:	9d 01       	movw	r18, r26
    1958:	44 27       	eor	r20, r20
    195a:	55 27       	eor	r21, r21
    195c:	20 93 f1 00 	sts	0x00F1, r18
				UEDATX = (Data >> 24);
    1960:	8b 2f       	mov	r24, r27
    1962:	99 27       	eor	r25, r25
    1964:	aa 27       	eor	r26, r26
    1966:	bb 27       	eor	r27, r27
    1968:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
    196c:	8b 89       	ldd	r24, Y+19	; 0x13
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    196e:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
    1972:	8c 89       	ldd	r24, Y+20	; 0x14
    1974:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
    1978:	8d 89       	ldd	r24, Y+21	; 0x15
    197a:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    197e:	80 91 e8 00 	lds	r24, 0x00E8
    1982:	8e 77       	andi	r24, 0x7E	; 126
    1984:	80 93 e8 00 	sts	0x00E8, r24
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    1988:	a9 d9       	rcall	.-3246   	; 0xcdc <Endpoint_ClearStatusStage>
    198a:	46 c0       	rjmp	.+140    	; 0x1a18 <CDC_Device_ProcessControlRequest+0x132>
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    198c:	80 91 ea 01 	lds	r24, 0x01EA
    1990:	81 32       	cpi	r24, 0x21	; 33
    1992:	09 f0       	breq	.+2      	; 0x1996 <CDC_Device_ProcessControlRequest+0xb0>
    1994:	41 c0       	rjmp	.+130    	; 0x1a18 <CDC_Device_ProcessControlRequest+0x132>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1996:	80 91 e8 00 	lds	r24, 0x00E8
    199a:	87 7f       	andi	r24, 0xF7	; 247
    199c:	80 93 e8 00 	sts	0x00E8, r24
				{
					uint32_t Value;
					uint8_t  Bytes[4];
				} Data;

				Data.Bytes[0] = UEDATX;
    19a0:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[1] = UEDATX;
    19a4:	90 91 f1 00 	lds	r25, 0x00F1
				Data.Bytes[2] = UEDATX;
    19a8:	20 91 f1 00 	lds	r18, 0x00F1
				Data.Bytes[3] = UEDATX;
    19ac:	30 91 f1 00 	lds	r19, 0x00F1
			{
				Endpoint_ClearSETUP();
				CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
    19b0:	8f 87       	std	Y+15, r24	; 0x0f
    19b2:	98 8b       	std	Y+16, r25	; 0x10
    19b4:	29 8b       	std	Y+17, r18	; 0x11
    19b6:	3a 8b       	std	Y+18, r19	; 0x12
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    19b8:	80 91 f1 00 	lds	r24, 0x00F1
				CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
    19bc:	8b 8b       	std	Y+19, r24	; 0x13
    19be:	80 91 f1 00 	lds	r24, 0x00F1
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
    19c2:	8c 8b       	std	Y+20, r24	; 0x14
    19c4:	80 91 f1 00 	lds	r24, 0x00F1
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
    19c8:	8d 8b       	std	Y+21, r24	; 0x15
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    19ca:	80 91 e8 00 	lds	r24, 0x00E8
    19ce:	8b 77       	andi	r24, 0x7B	; 123
    19d0:	80 93 e8 00 	sts	0x00E8, r24
				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();
    19d4:	83 d9       	rcall	.-3322   	; 0xcdc <Endpoint_ClearStatusStage>

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
    19d6:	ce 01       	movw	r24, r28
    19d8:	c3 de       	rcall	.-634    	; 0x1760 <CDC_Device_Event_Stub>
    19da:	1e c0       	rjmp	.+60     	; 0x1a18 <CDC_Device_ProcessControlRequest+0x132>
			}

			break;
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    19dc:	80 91 ea 01 	lds	r24, 0x01EA
    19e0:	81 32       	cpi	r24, 0x21	; 33
    19e2:	d1 f4       	brne	.+52     	; 0x1a18 <CDC_Device_ProcessControlRequest+0x132>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    19e4:	80 91 e8 00 	lds	r24, 0x00E8
    19e8:	87 7f       	andi	r24, 0xF7	; 247
    19ea:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    19ee:	76 d9       	rcall	.-3348   	; 0xcdc <Endpoint_ClearStatusStage>

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
    19f0:	80 91 ec 01 	lds	r24, 0x01EC
    19f4:	8d 87       	std	Y+13, r24	; 0x0d

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
    19f6:	ce 01       	movw	r24, r28
    19f8:	b3 de       	rcall	.-666    	; 0x1760 <CDC_Device_Event_Stub>
    19fa:	0e c0       	rjmp	.+28     	; 0x1a18 <CDC_Device_ProcessControlRequest+0x132>
			}

			break;
		case CDC_REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    19fc:	80 91 ea 01 	lds	r24, 0x01EA
    1a00:	81 32       	cpi	r24, 0x21	; 33
    1a02:	51 f4       	brne	.+20     	; 0x1a18 <CDC_Device_ProcessControlRequest+0x132>
    1a04:	80 91 e8 00 	lds	r24, 0x00E8
    1a08:	87 7f       	andi	r24, 0xF7	; 247
    1a0a:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    1a0e:	66 d9       	rcall	.-3380   	; 0xcdc <Endpoint_ClearStatusStage>

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
    1a10:	ce 01       	movw	r24, r28
    1a12:	60 91 ec 01 	lds	r22, 0x01EC
    1a16:	a4 de       	rcall	.-696    	; 0x1760 <CDC_Device_Event_Stub>
			}

			break;
	}
}
    1a18:	df 91       	pop	r29
    1a1a:	cf 91       	pop	r28
    1a1c:	08 95       	ret

00001a1e <MS_Device_USBTask>:

	return true;
}

void MS_Device_USBTask(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    1a1e:	cf 92       	push	r12
    1a20:	df 92       	push	r13
    1a22:	ef 92       	push	r14
    1a24:	ff 92       	push	r15
    1a26:	0f 93       	push	r16
    1a28:	1f 93       	push	r17
    1a2a:	df 93       	push	r29
    1a2c:	cf 93       	push	r28
    1a2e:	00 d0       	rcall	.+0      	; 0x1a30 <MS_Device_USBTask+0x12>
    1a30:	cd b7       	in	r28, 0x3d	; 61
    1a32:	de b7       	in	r29, 0x3e	; 62
    1a34:	8c 01       	movw	r16, r24
	if (USB_DeviceState != DEVICE_STATE_Configured)
    1a36:	80 91 e9 01 	lds	r24, 0x01E9
    1a3a:	84 30       	cpi	r24, 0x04	; 4
    1a3c:	09 f0       	breq	.+2      	; 0x1a40 <MS_Device_USBTask+0x22>
    1a3e:	09 c1       	rjmp	.+530    	; 0x1c52 <MS_Device_USBTask+0x234>
	  return;

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpointNumber);
    1a40:	f8 01       	movw	r30, r16
    1a42:	95 81       	ldd	r25, Z+5	; 0x05
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1a44:	90 93 e9 00 	sts	0x00E9, r25
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1a48:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsReadWriteAllowed())
    1a4c:	85 ff       	sbrs	r24, 5
    1a4e:	cb c0       	rjmp	.+406    	; 0x1be6 <MS_Device_USBTask+0x1c8>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1a50:	90 93 e9 00 	sts	0x00E9, r25
{
	uint16_t BytesProcessed;

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpointNumber);
	
	BytesProcessed = 0;
    1a54:	1a 82       	std	Y+2, r1	; 0x02
    1a56:	19 82       	std	Y+1, r1	; 0x01
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock,
    1a58:	2a e0       	ldi	r18, 0x0A	; 10
    1a5a:	e2 2e       	mov	r14, r18
    1a5c:	f1 2c       	mov	r15, r1
    1a5e:	e0 0e       	add	r14, r16
    1a60:	f1 1e       	adc	r15, r17
    1a62:	6e 01       	movw	r12, r28
    1a64:	08 94       	sec
    1a66:	c1 1c       	adc	r12, r1
    1a68:	d1 1c       	adc	r13, r1
    1a6a:	05 c0       	rjmp	.+10     	; 0x1a76 <MS_Device_USBTask+0x58>
	                               (sizeof(MS_CommandBlockWrapper_t) - 16), &BytesProcessed) ==
	                               ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
    1a6c:	f8 01       	movw	r30, r16
    1a6e:	86 a9       	ldd	r24, Z+54	; 0x36
    1a70:	88 23       	and	r24, r24
    1a72:	09 f0       	breq	.+2      	; 0x1a76 <MS_Device_USBTask+0x58>
    1a74:	b8 c0       	rjmp	.+368    	; 0x1be6 <MS_Device_USBTask+0x1c8>
	uint16_t BytesProcessed;

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpointNumber);
	
	BytesProcessed = 0;
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock,
    1a76:	c7 01       	movw	r24, r14
    1a78:	6f e0       	ldi	r22, 0x0F	; 15
    1a7a:	70 e0       	ldi	r23, 0x00	; 0
    1a7c:	a6 01       	movw	r20, r12
    1a7e:	a9 db       	rcall	.-2222   	; 0x11d2 <Endpoint_Read_Stream_LE>
    1a80:	85 30       	cpi	r24, 0x05	; 5
    1a82:	a1 f3       	breq	.-24     	; 0x1a6c <MS_Device_USBTask+0x4e>
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
		  return false;
	}

	if ((MSInterfaceInfo->State.CommandBlock.Signature         != CPU_TO_LE32(MS_CBW_SIGNATURE))     ||
    1a84:	f8 01       	movw	r30, r16
    1a86:	82 85       	ldd	r24, Z+10	; 0x0a
    1a88:	93 85       	ldd	r25, Z+11	; 0x0b
    1a8a:	a4 85       	ldd	r26, Z+12	; 0x0c
    1a8c:	b5 85       	ldd	r27, Z+13	; 0x0d
    1a8e:	85 55       	subi	r24, 0x55	; 85
    1a90:	93 45       	sbci	r25, 0x53	; 83
    1a92:	a2 44       	sbci	r26, 0x42	; 66
    1a94:	b3 44       	sbci	r27, 0x43	; 67
    1a96:	81 f4       	brne	.+32     	; 0x1ab8 <MS_Device_USBTask+0x9a>
    1a98:	f8 01       	movw	r30, r16
    1a9a:	97 89       	ldd	r25, Z+23	; 0x17
    1a9c:	81 85       	ldd	r24, Z+9	; 0x09
    1a9e:	98 17       	cp	r25, r24
    1aa0:	58 f4       	brcc	.+22     	; 0x1ab8 <MS_Device_USBTask+0x9a>
    1aa2:	86 89       	ldd	r24, Z+22	; 0x16
    1aa4:	90 e0       	ldi	r25, 0x00	; 0
    1aa6:	8f 71       	andi	r24, 0x1F	; 31
    1aa8:	90 70       	andi	r25, 0x00	; 0
    1aaa:	89 2b       	or	r24, r25
    1aac:	29 f4       	brne	.+10     	; 0x1ab8 <MS_Device_USBTask+0x9a>
    1aae:	80 8d       	ldd	r24, Z+24	; 0x18
    1ab0:	88 23       	and	r24, r24
    1ab2:	11 f0       	breq	.+4      	; 0x1ab8 <MS_Device_USBTask+0x9a>
    1ab4:	81 31       	cpi	r24, 0x11	; 17
    1ab6:	78 f0       	brcs	.+30     	; 0x1ad6 <MS_Device_USBTask+0xb8>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1ab8:	80 91 eb 00 	lds	r24, 0x00EB
    1abc:	80 62       	ori	r24, 0x20	; 32
    1abe:	80 93 eb 00 	sts	0x00EB, r24
		(MSInterfaceInfo->State.CommandBlock.Flags              & 0x1F)                              ||
		(MSInterfaceInfo->State.CommandBlock.SCSICommandLength == 0)                                 ||
		(MSInterfaceInfo->State.CommandBlock.SCSICommandLength >  16))
	{
		Endpoint_StallTransaction();
		Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpointNumber);
    1ac2:	f8 01       	movw	r30, r16
    1ac4:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1ac6:	80 93 e9 00 	sts	0x00E9, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1aca:	80 91 eb 00 	lds	r24, 0x00EB
    1ace:	80 62       	ori	r24, 0x20	; 32
    1ad0:	80 93 eb 00 	sts	0x00EB, r24
    1ad4:	88 c0       	rjmp	.+272    	; 0x1be6 <MS_Device_USBTask+0x1c8>
		Endpoint_StallTransaction();

		return false;
	}

	BytesProcessed = 0;
    1ad6:	1a 82       	std	Y+2, r1	; 0x02
    1ad8:	19 82       	std	Y+1, r1	; 0x01
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock.SCSICommandData,
    1ada:	99 e1       	ldi	r25, 0x19	; 25
    1adc:	e9 2e       	mov	r14, r25
    1ade:	f1 2c       	mov	r15, r1
    1ae0:	e0 0e       	add	r14, r16
    1ae2:	f1 1e       	adc	r15, r17
    1ae4:	6e 01       	movw	r12, r28
    1ae6:	08 94       	sec
    1ae8:	c1 1c       	adc	r12, r1
    1aea:	d1 1c       	adc	r13, r1
    1aec:	05 c0       	rjmp	.+10     	; 0x1af8 <MS_Device_USBTask+0xda>
	                                MSInterfaceInfo->State.CommandBlock.SCSICommandLength, &BytesProcessed) ==
	                                ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
    1aee:	f8 01       	movw	r30, r16
    1af0:	86 a9       	ldd	r24, Z+54	; 0x36
    1af2:	88 23       	and	r24, r24
    1af4:	09 f0       	breq	.+2      	; 0x1af8 <MS_Device_USBTask+0xda>
    1af6:	77 c0       	rjmp	.+238    	; 0x1be6 <MS_Device_USBTask+0x1c8>

		return false;
	}

	BytesProcessed = 0;
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock.SCSICommandData,
    1af8:	f8 01       	movw	r30, r16
    1afa:	60 8d       	ldd	r22, Z+24	; 0x18
    1afc:	c7 01       	movw	r24, r14
    1afe:	70 e0       	ldi	r23, 0x00	; 0
    1b00:	a6 01       	movw	r20, r12
    1b02:	67 db       	rcall	.-2354   	; 0x11d2 <Endpoint_Read_Stream_LE>
    1b04:	85 30       	cpi	r24, 0x05	; 5
    1b06:	99 f3       	breq	.-26     	; 0x1aee <MS_Device_USBTask+0xd0>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1b08:	80 91 e8 00 	lds	r24, 0x00E8
    1b0c:	8b 77       	andi	r24, 0x7B	; 123
    1b0e:	80 93 e8 00 	sts	0x00E8, r24

	if (Endpoint_IsReadWriteAllowed())
	{
		if (MS_Device_ReadInCommandBlock(MSInterfaceInfo))
		{
			if (MSInterfaceInfo->State.CommandBlock.Flags & MS_COMMAND_DIR_DATA_IN)
    1b12:	f8 01       	movw	r30, r16
    1b14:	86 89       	ldd	r24, Z+22	; 0x16
    1b16:	87 ff       	sbrs	r24, 7
    1b18:	03 c0       	rjmp	.+6      	; 0x1b20 <MS_Device_USBTask+0x102>
			  Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpointNumber);
    1b1a:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1b1c:	80 93 e9 00 	sts	0x00E9, r24

			bool SCSICommandResult = CALLBACK_MS_Device_SCSICommandReceived(MSInterfaceInfo);
    1b20:	c8 01       	movw	r24, r16
    1b22:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <CALLBACK_MS_Device_SCSICommandReceived>

			MSInterfaceInfo->State.CommandStatus.Status              = (SCSICommandResult) ? MS_SCSI_COMMAND_Pass : MS_SCSI_COMMAND_Fail;
    1b26:	91 e0       	ldi	r25, 0x01	; 1
    1b28:	98 27       	eor	r25, r24
    1b2a:	f8 01       	movw	r30, r16
    1b2c:	95 ab       	std	Z+53, r25	; 0x35
			MSInterfaceInfo->State.CommandStatus.Signature           = CPU_TO_LE32(MS_CSW_SIGNATURE);
    1b2e:	25 e5       	ldi	r18, 0x55	; 85
    1b30:	33 e5       	ldi	r19, 0x53	; 83
    1b32:	42 e4       	ldi	r20, 0x42	; 66
    1b34:	53 e5       	ldi	r21, 0x53	; 83
    1b36:	21 a7       	std	Z+41, r18	; 0x29
    1b38:	32 a7       	std	Z+42, r19	; 0x2a
    1b3a:	43 a7       	std	Z+43, r20	; 0x2b
    1b3c:	54 a7       	std	Z+44, r21	; 0x2c
			MSInterfaceInfo->State.CommandStatus.Tag                 = MSInterfaceInfo->State.CommandBlock.Tag;
    1b3e:	26 85       	ldd	r18, Z+14	; 0x0e
    1b40:	37 85       	ldd	r19, Z+15	; 0x0f
    1b42:	40 89       	ldd	r20, Z+16	; 0x10
    1b44:	51 89       	ldd	r21, Z+17	; 0x11
    1b46:	25 a7       	std	Z+45, r18	; 0x2d
    1b48:	36 a7       	std	Z+46, r19	; 0x2e
    1b4a:	47 a7       	std	Z+47, r20	; 0x2f
    1b4c:	50 ab       	std	Z+48, r21	; 0x30
			MSInterfaceInfo->State.CommandStatus.DataTransferResidue = MSInterfaceInfo->State.CommandBlock.DataTransferLength;
    1b4e:	22 89       	ldd	r18, Z+18	; 0x12
    1b50:	33 89       	ldd	r19, Z+19	; 0x13
    1b52:	44 89       	ldd	r20, Z+20	; 0x14
    1b54:	55 89       	ldd	r21, Z+21	; 0x15
    1b56:	21 ab       	std	Z+49, r18	; 0x31
    1b58:	32 ab       	std	Z+50, r19	; 0x32
    1b5a:	43 ab       	std	Z+51, r20	; 0x33
    1b5c:	54 ab       	std	Z+52, r21	; 0x34

			if (!(SCSICommandResult) && (le32_to_cpu(MSInterfaceInfo->State.CommandStatus.DataTransferResidue)))
    1b5e:	88 23       	and	r24, r24
    1b60:	51 f4       	brne	.+20     	; 0x1b76 <MS_Device_USBTask+0x158>
    1b62:	21 15       	cp	r18, r1
    1b64:	31 05       	cpc	r19, r1
    1b66:	41 05       	cpc	r20, r1
    1b68:	51 05       	cpc	r21, r1
    1b6a:	29 f0       	breq	.+10     	; 0x1b76 <MS_Device_USBTask+0x158>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1b6c:	80 91 eb 00 	lds	r24, 0x00EB
    1b70:	80 62       	ori	r24, 0x20	; 32
    1b72:	80 93 eb 00 	sts	0x00EB, r24
	return true;
}

static void MS_Device_ReturnCommandStatus(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpointNumber);
    1b76:	f8 01       	movw	r30, r16
    1b78:	85 81       	ldd	r24, Z+5	; 0x05
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1b7a:	80 93 e9 00 	sts	0x00E9, r24
    1b7e:	05 c0       	rjmp	.+10     	; 0x1b8a <MS_Device_USBTask+0x16c>

	while (Endpoint_IsStalled())
	{
		#if !defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_USBTask();
    1b80:	8d dd       	rcall	.-1254   	; 0x169c <USB_USBTask>
		#endif

		if (MSInterfaceInfo->State.IsMassStoreReset)
    1b82:	f8 01       	movw	r30, r16
    1b84:	86 a9       	ldd	r24, Z+54	; 0x36
    1b86:	88 23       	and	r24, r24
    1b88:	71 f5       	brne	.+92     	; 0x1be6 <MS_Device_USBTask+0x1c8>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1b8a:	80 91 eb 00 	lds	r24, 0x00EB

static void MS_Device_ReturnCommandStatus(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpointNumber);

	while (Endpoint_IsStalled())
    1b8e:	85 fd       	sbrc	r24, 5
    1b90:	f7 cf       	rjmp	.-18     	; 0x1b80 <MS_Device_USBTask+0x162>

		if (MSInterfaceInfo->State.IsMassStoreReset)
		  return;
	}

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpointNumber);
    1b92:	f8 01       	movw	r30, r16
    1b94:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1b96:	80 93 e9 00 	sts	0x00E9, r24
    1b9a:	05 c0       	rjmp	.+10     	; 0x1ba6 <MS_Device_USBTask+0x188>

	while (Endpoint_IsStalled())
	{
		#if !defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_USBTask();
    1b9c:	7f dd       	rcall	.-1282   	; 0x169c <USB_USBTask>
		#endif

		if (MSInterfaceInfo->State.IsMassStoreReset)
    1b9e:	f8 01       	movw	r30, r16
    1ba0:	86 a9       	ldd	r24, Z+54	; 0x36
    1ba2:	88 23       	and	r24, r24
    1ba4:	01 f5       	brne	.+64     	; 0x1be6 <MS_Device_USBTask+0x1c8>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1ba6:	80 91 eb 00 	lds	r24, 0x00EB
		  return;
	}

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpointNumber);

	while (Endpoint_IsStalled())
    1baa:	85 fd       	sbrc	r24, 5
    1bac:	f7 cf       	rjmp	.-18     	; 0x1b9c <MS_Device_USBTask+0x17e>

		if (MSInterfaceInfo->State.IsMassStoreReset)
		  return;
	}

	uint16_t BytesProcessed = 0;
    1bae:	1a 82       	std	Y+2, r1	; 0x02
    1bb0:	19 82       	std	Y+1, r1	; 0x01
	while (Endpoint_Write_Stream_LE(&MSInterfaceInfo->State.CommandStatus,
    1bb2:	89 e2       	ldi	r24, 0x29	; 41
    1bb4:	e8 2e       	mov	r14, r24
    1bb6:	f1 2c       	mov	r15, r1
    1bb8:	e0 0e       	add	r14, r16
    1bba:	f1 1e       	adc	r15, r17
    1bbc:	6e 01       	movw	r12, r28
    1bbe:	08 94       	sec
    1bc0:	c1 1c       	adc	r12, r1
    1bc2:	d1 1c       	adc	r13, r1
    1bc4:	04 c0       	rjmp	.+8      	; 0x1bce <MS_Device_USBTask+0x1b0>
	                                sizeof(MS_CommandStatusWrapper_t), &BytesProcessed) ==
	                                ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
    1bc6:	f8 01       	movw	r30, r16
    1bc8:	86 a9       	ldd	r24, Z+54	; 0x36
    1bca:	88 23       	and	r24, r24
    1bcc:	61 f4       	brne	.+24     	; 0x1be6 <MS_Device_USBTask+0x1c8>
		if (MSInterfaceInfo->State.IsMassStoreReset)
		  return;
	}

	uint16_t BytesProcessed = 0;
	while (Endpoint_Write_Stream_LE(&MSInterfaceInfo->State.CommandStatus,
    1bce:	c7 01       	movw	r24, r14
    1bd0:	6d e0       	ldi	r22, 0x0D	; 13
    1bd2:	70 e0       	ldi	r23, 0x00	; 0
    1bd4:	a6 01       	movw	r20, r12
    1bd6:	a1 db       	rcall	.-2238   	; 0x131a <Endpoint_Write_Stream_LE>
    1bd8:	85 30       	cpi	r24, 0x05	; 5
    1bda:	a9 f3       	breq	.-22     	; 0x1bc6 <MS_Device_USBTask+0x1a8>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1bdc:	80 91 e8 00 	lds	r24, 0x00E8
    1be0:	8e 77       	andi	r24, 0x7E	; 126
    1be2:	80 93 e8 00 	sts	0x00E8, r24

			MS_Device_ReturnCommandStatus(MSInterfaceInfo);
		}
	}

	if (MSInterfaceInfo->State.IsMassStoreReset)
    1be6:	f8 01       	movw	r30, r16
    1be8:	86 a9       	ldd	r24, Z+54	; 0x36
    1bea:	88 23       	and	r24, r24
    1bec:	91 f1       	breq	.+100    	; 0x1c52 <MS_Device_USBTask+0x234>
	{
		Endpoint_ResetEndpoint(MSInterfaceInfo->Config.DataOUTEndpointNumber);
    1bee:	45 81       	ldd	r20, Z+5	; 0x05
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
    1bf0:	21 e0       	ldi	r18, 0x01	; 1
    1bf2:	30 e0       	ldi	r19, 0x00	; 0
    1bf4:	c9 01       	movw	r24, r18
    1bf6:	04 2e       	mov	r0, r20
    1bf8:	02 c0       	rjmp	.+4      	; 0x1bfe <MS_Device_USBTask+0x1e0>
    1bfa:	88 0f       	add	r24, r24
    1bfc:	99 1f       	adc	r25, r25
    1bfe:	0a 94       	dec	r0
    1c00:	e2 f7       	brpl	.-8      	; 0x1bfa <MS_Device_USBTask+0x1dc>
    1c02:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
    1c06:	10 92 ea 00 	sts	0x00EA, r1
		Endpoint_ResetEndpoint(MSInterfaceInfo->Config.DataINEndpointNumber);
    1c0a:	91 81       	ldd	r25, Z+1	; 0x01
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
    1c0c:	09 2e       	mov	r0, r25
    1c0e:	02 c0       	rjmp	.+4      	; 0x1c14 <MS_Device_USBTask+0x1f6>
    1c10:	22 0f       	add	r18, r18
    1c12:	33 1f       	adc	r19, r19
    1c14:	0a 94       	dec	r0
    1c16:	e2 f7       	brpl	.-8      	; 0x1c10 <MS_Device_USBTask+0x1f2>
    1c18:	20 93 ea 00 	sts	0x00EA, r18
				UERST = 0;
    1c1c:	10 92 ea 00 	sts	0x00EA, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1c20:	40 93 e9 00 	sts	0x00E9, r20
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    1c24:	80 91 eb 00 	lds	r24, 0x00EB
    1c28:	80 61       	ori	r24, 0x10	; 16
    1c2a:	80 93 eb 00 	sts	0x00EB, r24

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    1c2e:	80 91 eb 00 	lds	r24, 0x00EB
    1c32:	88 60       	ori	r24, 0x08	; 8
    1c34:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    1c38:	90 93 e9 00 	sts	0x00E9, r25
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    1c3c:	80 91 eb 00 	lds	r24, 0x00EB
    1c40:	80 61       	ori	r24, 0x10	; 16
    1c42:	80 93 eb 00 	sts	0x00EB, r24

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    1c46:	80 91 eb 00 	lds	r24, 0x00EB
    1c4a:	88 60       	ori	r24, 0x08	; 8
    1c4c:	80 93 eb 00 	sts	0x00EB, r24
		Endpoint_ResetDataToggle();
		Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpointNumber);
		Endpoint_ClearStall();
		Endpoint_ResetDataToggle();

		MSInterfaceInfo->State.IsMassStoreReset = false;
    1c50:	16 aa       	std	Z+54, r1	; 0x36
	}
}
    1c52:	0f 90       	pop	r0
    1c54:	0f 90       	pop	r0
    1c56:	cf 91       	pop	r28
    1c58:	df 91       	pop	r29
    1c5a:	1f 91       	pop	r17
    1c5c:	0f 91       	pop	r16
    1c5e:	ff 90       	pop	r15
    1c60:	ef 90       	pop	r14
    1c62:	df 90       	pop	r13
    1c64:	cf 90       	pop	r12
    1c66:	08 95       	ret

00001c68 <MS_Device_ConfigureEndpoints>:
			break;
	}
}

bool MS_Device_ConfigureEndpoints(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    1c68:	1f 93       	push	r17
    1c6a:	cf 93       	push	r28
    1c6c:	df 93       	push	r29
    1c6e:	ec 01       	movw	r28, r24
	memset(&MSInterfaceInfo->State, 0x00, sizeof(MSInterfaceInfo->State));
    1c70:	0a 96       	adiw	r24, 0x0a	; 10
    1c72:	fc 01       	movw	r30, r24
    1c74:	8d e2       	ldi	r24, 0x2D	; 45
    1c76:	df 01       	movw	r26, r30
    1c78:	1d 92       	st	X+, r1
    1c7a:	8a 95       	dec	r24
    1c7c:	e9 f7       	brne	.-6      	; 0x1c78 <MS_Device_ConfigureEndpoints+0x10>
    1c7e:	11 e0       	ldi	r17, 0x01	; 1
		uint16_t Size;
		uint8_t  Type;
		uint8_t  Direction;
		bool     DoubleBanked;

		if (EndpointNum == MSInterfaceInfo->Config.DataINEndpointNumber)
    1c80:	89 81       	ldd	r24, Y+1	; 0x01
    1c82:	18 17       	cp	r17, r24
    1c84:	29 f4       	brne	.+10     	; 0x1c90 <MS_Device_ConfigureEndpoints+0x28>
		{
			Size         = MSInterfaceInfo->Config.DataINEndpointSize;
    1c86:	6a 81       	ldd	r22, Y+2	; 0x02
    1c88:	7b 81       	ldd	r23, Y+3	; 0x03
			Direction    = ENDPOINT_DIR_IN;
			Type         = EP_TYPE_BULK;
			DoubleBanked = MSInterfaceInfo->Config.DataINEndpointDoubleBank;
    1c8a:	8c 81       	ldd	r24, Y+4	; 0x04
    1c8c:	30 e8       	ldi	r19, 0x80	; 128
    1c8e:	07 c0       	rjmp	.+14     	; 0x1c9e <MS_Device_ConfigureEndpoints+0x36>
		}
		else if (EndpointNum == MSInterfaceInfo->Config.DataOUTEndpointNumber)
    1c90:	8d 81       	ldd	r24, Y+5	; 0x05
    1c92:	18 17       	cp	r17, r24
    1c94:	01 f5       	brne	.+64     	; 0x1cd6 <MS_Device_ConfigureEndpoints+0x6e>
		{
			Size         = MSInterfaceInfo->Config.DataOUTEndpointSize;
    1c96:	6e 81       	ldd	r22, Y+6	; 0x06
    1c98:	7f 81       	ldd	r23, Y+7	; 0x07
			Direction    = ENDPOINT_DIR_OUT;
			Type         = EP_TYPE_BULK;
			DoubleBanked = MSInterfaceInfo->Config.DataOUTEndpointDoubleBank;
    1c9a:	88 85       	ldd	r24, Y+8	; 0x08
    1c9c:	30 e0       	ldi	r19, 0x00	; 0
		else
		{
			continue;
		}

		if (!(Endpoint_ConfigureEndpoint(EndpointNum, Type, Direction, Size,
    1c9e:	88 23       	and	r24, r24
    1ca0:	11 f4       	brne	.+4      	; 0x1ca6 <MS_Device_ConfigureEndpoints+0x3e>
    1ca2:	40 e0       	ldi	r20, 0x00	; 0
    1ca4:	01 c0       	rjmp	.+2      	; 0x1ca8 <MS_Device_ConfigureEndpoints+0x40>
    1ca6:	44 e0       	ldi	r20, 0x04	; 4
    1ca8:	20 e0       	ldi	r18, 0x00	; 0
    1caa:	88 e0       	ldi	r24, 0x08	; 8
    1cac:	90 e0       	ldi	r25, 0x00	; 0
    1cae:	03 c0       	rjmp	.+6      	; 0x1cb6 <MS_Device_ConfigureEndpoints+0x4e>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
				{
					MaskVal++;
    1cb0:	2f 5f       	subi	r18, 0xFF	; 255
					CheckBytes <<= 1;
    1cb2:	88 0f       	add	r24, r24
    1cb4:	99 1f       	adc	r25, r25
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
    1cb6:	86 17       	cp	r24, r22
    1cb8:	97 07       	cpc	r25, r23
    1cba:	d0 f3       	brcs	.-12     	; 0x1cb0 <MS_Device_ConfigureEndpoints+0x48>
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
    1cbc:	60 e0       	ldi	r22, 0x00	; 0
    1cbe:	31 11       	cpse	r19, r1
    1cc0:	61 e0       	ldi	r22, 0x01	; 1
    1cc2:	60 68       	ori	r22, 0x80	; 128
    1cc4:	42 60       	ori	r20, 0x02	; 2
    1cc6:	22 95       	swap	r18
    1cc8:	20 7f       	andi	r18, 0xF0	; 240
    1cca:	42 2b       	or	r20, r18
    1ccc:	81 2f       	mov	r24, r17
    1cce:	0e 94 39 06 	call	0xc72	; 0xc72 <Endpoint_ConfigureEndpoint_Prv>
    1cd2:	88 23       	and	r24, r24
    1cd4:	21 f0       	breq	.+8      	; 0x1cde <MS_Device_ConfigureEndpoints+0x76>

bool MS_Device_ConfigureEndpoints(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	memset(&MSInterfaceInfo->State, 0x00, sizeof(MSInterfaceInfo->State));

	for (uint8_t EndpointNum = 1; EndpointNum < ENDPOINT_TOTAL_ENDPOINTS; EndpointNum++)
    1cd6:	1f 5f       	subi	r17, 0xFF	; 255
    1cd8:	17 30       	cpi	r17, 0x07	; 7
    1cda:	91 f6       	brne	.-92     	; 0x1c80 <MS_Device_ConfigureEndpoints+0x18>
    1cdc:	81 e0       	ldi	r24, 0x01	; 1
			return false;
		}
	}

	return true;
}
    1cde:	df 91       	pop	r29
    1ce0:	cf 91       	pop	r28
    1ce2:	1f 91       	pop	r17
    1ce4:	08 95       	ret

00001ce6 <MS_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_MS_DRIVER
#define  __INCLUDE_FROM_MASSSTORAGE_DEVICE_C
#include "MassStorage.h"

void MS_Device_ProcessControlRequest(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    1ce6:	cf 93       	push	r28
    1ce8:	df 93       	push	r29
    1cea:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1cec:	80 91 e8 00 	lds	r24, 0x00E8
	if (!(Endpoint_IsSETUPReceived()))
    1cf0:	83 ff       	sbrs	r24, 3
    1cf2:	31 c0       	rjmp	.+98     	; 0x1d56 <MS_Device_ProcessControlRequest+0x70>
	  return;

	if (USB_ControlRequest.wIndex != MSInterfaceInfo->Config.InterfaceNumber)
    1cf4:	88 81       	ld	r24, Y
    1cf6:	90 e0       	ldi	r25, 0x00	; 0
    1cf8:	20 91 ee 01 	lds	r18, 0x01EE
    1cfc:	30 91 ef 01 	lds	r19, 0x01EF
    1d00:	28 17       	cp	r18, r24
    1d02:	39 07       	cpc	r19, r25
    1d04:	41 f5       	brne	.+80     	; 0x1d56 <MS_Device_ProcessControlRequest+0x70>
	  return;

	switch (USB_ControlRequest.bRequest)
    1d06:	80 91 eb 01 	lds	r24, 0x01EB
    1d0a:	8e 3f       	cpi	r24, 0xFE	; 254
    1d0c:	81 f0       	breq	.+32     	; 0x1d2e <MS_Device_ProcessControlRequest+0x48>
    1d0e:	8f 3f       	cpi	r24, 0xFF	; 255
    1d10:	11 f5       	brne	.+68     	; 0x1d56 <MS_Device_ProcessControlRequest+0x70>
	{
		case MS_REQ_MassStorageReset:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1d12:	80 91 ea 01 	lds	r24, 0x01EA
    1d16:	81 32       	cpi	r24, 0x21	; 33
    1d18:	f1 f4       	brne	.+60     	; 0x1d56 <MS_Device_ProcessControlRequest+0x70>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1d1a:	80 91 e8 00 	lds	r24, 0x00E8
    1d1e:	87 7f       	andi	r24, 0xF7	; 247
    1d20:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    1d24:	0e 94 6e 06 	call	0xcdc	; 0xcdc <Endpoint_ClearStatusStage>

				MSInterfaceInfo->State.IsMassStoreReset = true;
    1d28:	81 e0       	ldi	r24, 0x01	; 1
    1d2a:	8e ab       	std	Y+54, r24	; 0x36
    1d2c:	14 c0       	rjmp	.+40     	; 0x1d56 <MS_Device_ProcessControlRequest+0x70>
			}

			break;
		case MS_REQ_GetMaxLUN:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1d2e:	80 91 ea 01 	lds	r24, 0x01EA
    1d32:	81 3a       	cpi	r24, 0xA1	; 161
    1d34:	81 f4       	brne	.+32     	; 0x1d56 <MS_Device_ProcessControlRequest+0x70>
    1d36:	80 91 e8 00 	lds	r24, 0x00E8
    1d3a:	87 7f       	andi	r24, 0xF7	; 247
    1d3c:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_Write_8(MSInterfaceInfo->Config.TotalLUNs - 1);
    1d40:	89 85       	ldd	r24, Y+9	; 0x09
    1d42:	81 50       	subi	r24, 0x01	; 1
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1d44:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1d48:	80 91 e8 00 	lds	r24, 0x00E8
    1d4c:	8e 77       	andi	r24, 0x7E	; 126
    1d4e:	80 93 e8 00 	sts	0x00E8, r24
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    1d52:	0e 94 6e 06 	call	0xcdc	; 0xcdc <Endpoint_ClearStatusStage>
			}

			break;
	}
}
    1d56:	df 91       	pop	r29
    1d58:	cf 91       	pop	r28
    1d5a:	08 95       	ret

00001d5c <fputs>:
    1d5c:	ef 92       	push	r14
    1d5e:	ff 92       	push	r15
    1d60:	0f 93       	push	r16
    1d62:	1f 93       	push	r17
    1d64:	cf 93       	push	r28
    1d66:	df 93       	push	r29
    1d68:	7c 01       	movw	r14, r24
    1d6a:	8b 01       	movw	r16, r22
    1d6c:	db 01       	movw	r26, r22
    1d6e:	13 96       	adiw	r26, 0x03	; 3
    1d70:	8c 91       	ld	r24, X
    1d72:	81 fd       	sbrc	r24, 1
    1d74:	03 c0       	rjmp	.+6      	; 0x1d7c <fputs+0x20>
    1d76:	cf ef       	ldi	r28, 0xFF	; 255
    1d78:	df ef       	ldi	r29, 0xFF	; 255
    1d7a:	13 c0       	rjmp	.+38     	; 0x1da2 <fputs+0x46>
    1d7c:	c0 e0       	ldi	r28, 0x00	; 0
    1d7e:	d0 e0       	ldi	r29, 0x00	; 0
    1d80:	0b c0       	rjmp	.+22     	; 0x1d98 <fputs+0x3c>
    1d82:	d8 01       	movw	r26, r16
    1d84:	18 96       	adiw	r26, 0x08	; 8
    1d86:	ed 91       	ld	r30, X+
    1d88:	fc 91       	ld	r31, X
    1d8a:	19 97       	sbiw	r26, 0x09	; 9
    1d8c:	b8 01       	movw	r22, r16
    1d8e:	09 95       	icall
    1d90:	89 2b       	or	r24, r25
    1d92:	11 f0       	breq	.+4      	; 0x1d98 <fputs+0x3c>
    1d94:	cf ef       	ldi	r28, 0xFF	; 255
    1d96:	df ef       	ldi	r29, 0xFF	; 255
    1d98:	f7 01       	movw	r30, r14
    1d9a:	81 91       	ld	r24, Z+
    1d9c:	7f 01       	movw	r14, r30
    1d9e:	88 23       	and	r24, r24
    1da0:	81 f7       	brne	.-32     	; 0x1d82 <fputs+0x26>
    1da2:	ce 01       	movw	r24, r28
    1da4:	df 91       	pop	r29
    1da6:	cf 91       	pop	r28
    1da8:	1f 91       	pop	r17
    1daa:	0f 91       	pop	r16
    1dac:	ff 90       	pop	r15
    1dae:	ef 90       	pop	r14
    1db0:	08 95       	ret

00001db2 <_exit>:
    1db2:	f8 94       	cli

00001db4 <__stop_program>:
    1db4:	ff cf       	rjmp	.-2      	; 0x1db4 <__stop_program>
