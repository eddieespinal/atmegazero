
KeyboardMouse.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000e04  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000018  00800100  00800100  00000e78  2**0
                  ALLOC
  2 .debug_aranges 000002d0  00000000  00000000  00000e78  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000846  00000000  00000000  00001148  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000497d  00000000  00000000  0000198e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000011ff  00000000  00000000  0000630b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00003f8c  00000000  00000000  0000750a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000420  00000000  00000000  0000b498  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00002126  00000000  00000000  0000b8b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000254f  00000000  00000000  0000d9de  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000003a0  00000000  00000000  0000ff2d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	return true;
#endif
}

void Endpoint_ClearEndpoints(void)
{
   0:	e0 c0       	rjmp	.+448    	; 0x1c2 <__ctors_end>
	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
}
   2:	00 00       	nop

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
   4:	fb c0       	rjmp	.+502    	; 0x1fc <__bad_interrupt>
   6:	00 00       	nop
   8:	f9 c0       	rjmp	.+498    	; 0x1fc <__bad_interrupt>
   a:	00 00       	nop
   c:	f7 c0       	rjmp	.+494    	; 0x1fc <__bad_interrupt>
   e:	00 00       	nop
  10:	f5 c0       	rjmp	.+490    	; 0x1fc <__bad_interrupt>
  12:	00 00       	nop
  14:	f3 c0       	rjmp	.+486    	; 0x1fc <__bad_interrupt>
  16:	00 00       	nop
  18:	f1 c0       	rjmp	.+482    	; 0x1fc <__bad_interrupt>
  1a:	00 00       	nop
  1c:	ef c0       	rjmp	.+478    	; 0x1fc <__bad_interrupt>
  1e:	00 00       	nop
  20:	ed c0       	rjmp	.+474    	; 0x1fc <__bad_interrupt>
  22:	00 00       	nop
  24:	eb c0       	rjmp	.+470    	; 0x1fc <__bad_interrupt>
  26:	00 00       	nop
  28:	8c c3       	rjmp	.+1816   	; 0x742 <__vector_10>
  2a:	00 00       	nop
  2c:	e7 c0       	rjmp	.+462    	; 0x1fc <__bad_interrupt>
  2e:	00 00       	nop
  30:	e5 c0       	rjmp	.+458    	; 0x1fc <__bad_interrupt>
  32:	00 00       	nop
  34:	e3 c0       	rjmp	.+454    	; 0x1fc <__bad_interrupt>
  36:	00 00       	nop
  38:	e1 c0       	rjmp	.+450    	; 0x1fc <__bad_interrupt>
  3a:	00 00       	nop
  3c:	df c0       	rjmp	.+446    	; 0x1fc <__bad_interrupt>
  3e:	00 00       	nop
  40:	dd c0       	rjmp	.+442    	; 0x1fc <__bad_interrupt>
  42:	00 00       	nop
  44:	db c0       	rjmp	.+438    	; 0x1fc <__bad_interrupt>
  46:	00 00       	nop
  48:	d9 c0       	rjmp	.+434    	; 0x1fc <__bad_interrupt>
  4a:	00 00       	nop
  4c:	d7 c0       	rjmp	.+430    	; 0x1fc <__bad_interrupt>
  4e:	00 00       	nop
  50:	d5 c0       	rjmp	.+426    	; 0x1fc <__bad_interrupt>
  52:	00 00       	nop
  54:	d3 c0       	rjmp	.+422    	; 0x1fc <__bad_interrupt>
  56:	00 00       	nop
  58:	d1 c0       	rjmp	.+418    	; 0x1fc <__bad_interrupt>
  5a:	00 00       	nop
  5c:	cf c0       	rjmp	.+414    	; 0x1fc <__bad_interrupt>
  5e:	00 00       	nop
  60:	cd c0       	rjmp	.+410    	; 0x1fc <__bad_interrupt>
  62:	00 00       	nop
  64:	cb c0       	rjmp	.+406    	; 0x1fc <__bad_interrupt>
  66:	00 00       	nop
  68:	c9 c0       	rjmp	.+402    	; 0x1fc <__bad_interrupt>
  6a:	00 00       	nop
  6c:	c7 c0       	rjmp	.+398    	; 0x1fc <__bad_interrupt>
  6e:	00 00       	nop
  70:	c5 c0       	rjmp	.+394    	; 0x1fc <__bad_interrupt>
  72:	00 00       	nop
  74:	c3 c0       	rjmp	.+390    	; 0x1fc <__bad_interrupt>
  76:	00 00       	nop
  78:	c1 c0       	rjmp	.+386    	; 0x1fc <__bad_interrupt>
  7a:	00 00       	nop
  7c:	bf c0       	rjmp	.+382    	; 0x1fc <__bad_interrupt>
  7e:	00 00       	nop
  80:	bd c0       	rjmp	.+378    	; 0x1fc <__bad_interrupt>
  82:	00 00       	nop
  84:	bb c0       	rjmp	.+374    	; 0x1fc <__bad_interrupt>
  86:	00 00       	nop
  88:	b9 c0       	rjmp	.+370    	; 0x1fc <__bad_interrupt>
  8a:	00 00       	nop
  8c:	b7 c0       	rjmp	.+366    	; 0x1fc <__bad_interrupt>
  8e:	00 00       	nop
  90:	b5 c0       	rjmp	.+362    	; 0x1fc <__bad_interrupt>
  92:	00 00       	nop
  94:	b3 c0       	rjmp	.+358    	; 0x1fc <__bad_interrupt>
  96:	00 00       	nop

00000098 <MouseReport>:
  98:	05 01 09 02 a1 01 09 01 a1 00 05 09 19 01 29 03     ..............).
  a8:	15 00 25 01 95 03 75 01 81 02 95 01 75 05 81 01     ..%...u.....u...
  b8:	05 01 09 30 09 31 15 ff 25 01 35 ff 45 01 95 02     ...0.1..%.5.E...
  c8:	75 08 81 06 c0 c0                                   u.....

000000ce <KeyboardReport>:
  ce:	05 01 09 06 a1 01 05 07 19 e0 29 e7 15 00 25 01     ..........)...%.
  de:	75 01 95 08 81 02 95 01 75 08 81 01 05 08 19 01     u.......u.......
  ee:	29 05 95 05 75 01 91 02 95 01 75 03 91 01 15 00     )...u.....u.....
  fe:	25 65 05 07 19 00 29 65 95 06 75 08 81 00 c0        %e....)e..u....

0000010d <DeviceDescriptor>:
 10d:	12 01 10 01 00 00 00 08 eb 03 4d 20 01 00 01 02     ..........M ....
 11d:	00 01                                               ..

0000011f <ConfigurationDescriptor>:
 11f:	09 02 49 00 02 01 00 c0 32 09 04 00 00 02 03 01     ..I.....2.......
 12f:	01 00 09 21 11 01 00 01 22 3f 00 07 05 81 03 08     ...!...."?......
 13f:	00 01 07 05 02 03 08 00 01 09 04 01 00 01 03 01     ................
 14f:	02 00 09 21 11 01 00 01 22 36 00 07 05 83 03 08     ...!...."6......
 15f:	00 01 00 00 00 00 00 00 00                          .........

00000168 <LanguageString>:
 168:	04 03 09 04                                         ....

0000016c <ManufacturerString>:
 16c:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
 17c:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

00000186 <ProductString>:
 186:	3a 03 4c 00 55 00 46 00 41 00 20 00 4d 00 6f 00     :.L.U.F.A. .M.o.
 196:	75 00 73 00 65 00 20 00 61 00 6e 00 64 00 20 00     u.s.e. .a.n.d. .
 1a6:	4b 00 65 00 79 00 62 00 6f 00 61 00 72 00 64 00     K.e.y.b.o.a.r.d.
 1b6:	20 00 44 00 65 00 6d 00 6f 00 00 00                  .D.e.m.o...

000001c2 <__ctors_end>:
 1c2:	11 24       	eor	r1, r1
 1c4:	1f be       	out	0x3f, r1	; 63
 1c6:	cf ef       	ldi	r28, 0xFF	; 255
 1c8:	d0 e2       	ldi	r29, 0x20	; 32
 1ca:	de bf       	out	0x3e, r29	; 62
 1cc:	cd bf       	out	0x3d, r28	; 61

000001ce <__do_copy_data>:
 1ce:	11 e0       	ldi	r17, 0x01	; 1
 1d0:	a0 e0       	ldi	r26, 0x00	; 0
 1d2:	b1 e0       	ldi	r27, 0x01	; 1
 1d4:	e4 e0       	ldi	r30, 0x04	; 4
 1d6:	fe e0       	ldi	r31, 0x0E	; 14
 1d8:	00 e0       	ldi	r16, 0x00	; 0
 1da:	0b bf       	out	0x3b, r16	; 59
 1dc:	02 c0       	rjmp	.+4      	; 0x1e2 <__do_copy_data+0x14>
 1de:	07 90       	elpm	r0, Z+
 1e0:	0d 92       	st	X+, r0
 1e2:	a0 30       	cpi	r26, 0x00	; 0
 1e4:	b1 07       	cpc	r27, r17
 1e6:	d9 f7       	brne	.-10     	; 0x1de <__do_copy_data+0x10>

000001e8 <__do_clear_bss>:
 1e8:	11 e0       	ldi	r17, 0x01	; 1
 1ea:	a0 e0       	ldi	r26, 0x00	; 0
 1ec:	b1 e0       	ldi	r27, 0x01	; 1
 1ee:	01 c0       	rjmp	.+2      	; 0x1f2 <.do_clear_bss_start>

000001f0 <.do_clear_bss_loop>:
 1f0:	1d 92       	st	X+, r1

000001f2 <.do_clear_bss_start>:
 1f2:	a8 31       	cpi	r26, 0x18	; 24
 1f4:	b1 07       	cpc	r27, r17
 1f6:	e1 f7       	brne	.-8      	; 0x1f0 <.do_clear_bss_loop>
 1f8:	65 d1       	rcall	.+714    	; 0x4c4 <main>
 1fa:	02 c6       	rjmp	.+3076   	; 0xe00 <_exit>

000001fc <__bad_interrupt>:
 1fc:	01 cf       	rjmp	.-510    	; 0x0 <__vectors>

000001fe <EVENT_USB_Device_Connect>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
 1fe:	8b b1       	in	r24, 0x0b	; 11
 200:	8f 70       	andi	r24, 0x0F	; 15
 202:	80 6a       	ori	r24, 0xA0	; 160
 204:	8b b9       	out	0x0b, r24	; 11
 */
void EVENT_USB_Device_Connect(void)
{
	/* Indicate USB enumerating */
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
}
 206:	08 95       	ret

00000208 <EVENT_USB_Device_Disconnect>:
 208:	8b b1       	in	r24, 0x0b	; 11
 20a:	8f 70       	andi	r24, 0x0F	; 15
 20c:	80 61       	ori	r24, 0x10	; 16
 20e:	8b b9       	out	0x0b, r24	; 11
 */
void EVENT_USB_Device_Disconnect(void)
{
	/* Indicate USB not ready */
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
}
 210:	08 95       	ret

00000212 <Keyboard_ProcessLEDReport>:
 */
void Keyboard_ProcessLEDReport(const uint8_t LEDStatus)
{
	uint8_t LEDMask = LEDS_LED2;

	if (LEDStatus & HID_KEYBOARD_LED_NUMLOCK)
 212:	80 fd       	sbrc	r24, 0
 214:	02 c0       	rjmp	.+4      	; 0x21a <Keyboard_ProcessLEDReport+0x8>
 216:	20 e2       	ldi	r18, 0x20	; 32
 218:	01 c0       	rjmp	.+2      	; 0x21c <Keyboard_ProcessLEDReport+0xa>
 21a:	20 e3       	ldi	r18, 0x30	; 48
	  LEDMask |= LEDS_LED1;

	if (LEDStatus & HID_KEYBOARD_LED_CAPSLOCK)
 21c:	81 fd       	sbrc	r24, 1
	  LEDMask |= LEDS_LED3;
 21e:	20 68       	ori	r18, 0x80	; 128

	if (LEDStatus & HID_KEYBOARD_LED_SCROLLLOCK)
 220:	82 fd       	sbrc	r24, 2
	  LEDMask |= LEDS_LED4;
 222:	20 64       	ori	r18, 0x40	; 64
 224:	8b b1       	in	r24, 0x0b	; 11
 226:	8f 70       	andi	r24, 0x0F	; 15
 228:	28 2b       	or	r18, r24
 22a:	2b b9       	out	0x0b, r18	; 11

	/* Set the status LEDs to the current Keyboard LED status */
	LEDs_SetAllLEDs(LEDMask);
}
 22c:	08 95       	ret

0000022e <Mouse_HID_Task>:

/** Mouse task. This generates the next mouse HID report for the host, and transmits it via the
 *  mouse IN endpoint when the host is ready for more data.
 */
void Mouse_HID_Task(void)
{
 22e:	ff 92       	push	r15
 230:	0f 93       	push	r16
 232:	1f 93       	push	r17
			}

			static inline uint8_t Joystick_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Joystick_GetStatus(void)
			{
				return (((uint8_t)~PINB & JOY_BMASK) | (((uint8_t)~PINE & JOY_EMASK) >> JOY_PORTE_MASK_SHIFT));
 234:	23 b1       	in	r18, 0x03	; 3
 236:	9c b1       	in	r25, 0x0c	; 12
	uint8_t JoyStatus_LCL = Joystick_GetStatus();

	/* Device must be connected and configured for the task to run */
	if (USB_DeviceState != DEVICE_STATE_Configured)
 238:	80 91 0f 01 	lds	r24, 0x010F
 23c:	84 30       	cpi	r24, 0x04	; 4
 23e:	09 f0       	breq	.+2      	; 0x242 <Mouse_HID_Task+0x14>
 240:	3f c0       	rjmp	.+126    	; 0x2c0 <Mouse_HID_Task+0x92>
	  return;

	/* Check if board button is pressed, if so mouse mode enabled */
	if (Buttons_GetStatus() & BUTTONS_BUTTON1)
 242:	62 99       	sbic	0x0c, 2	; 12
 244:	24 c0       	rjmp	.+72     	; 0x28e <Mouse_HID_Task+0x60>
 246:	90 95       	com	r25
 248:	89 2f       	mov	r24, r25
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	80 73       	andi	r24, 0x30	; 48
 24e:	90 70       	andi	r25, 0x00	; 0
 250:	95 95       	asr	r25
 252:	87 95       	ror	r24
 254:	92 2f       	mov	r25, r18
 256:	90 95       	com	r25
 258:	90 7e       	andi	r25, 0xE0	; 224
 25a:	98 2b       	or	r25, r24
	{
		if (JoyStatus_LCL & JOY_UP)
 25c:	97 ff       	sbrs	r25, 7
 25e:	02 c0       	rjmp	.+4      	; 0x264 <Mouse_HID_Task+0x36>
		  MouseReportData.Y =  1;
 260:	81 e0       	ldi	r24, 0x01	; 1
 262:	03 c0       	rjmp	.+6      	; 0x26a <Mouse_HID_Task+0x3c>
		else if (JoyStatus_LCL & JOY_DOWN)
 264:	94 ff       	sbrs	r25, 4
 266:	03 c0       	rjmp	.+6      	; 0x26e <Mouse_HID_Task+0x40>
		  MouseReportData.Y = -1;
 268:	8f ef       	ldi	r24, 0xFF	; 255
 26a:	80 93 0a 01 	sts	0x010A, r24

		if (JoyStatus_LCL & JOY_RIGHT)
 26e:	93 ff       	sbrs	r25, 3
 270:	02 c0       	rjmp	.+4      	; 0x276 <Mouse_HID_Task+0x48>
		  MouseReportData.X =  1;
 272:	81 e0       	ldi	r24, 0x01	; 1
 274:	03 c0       	rjmp	.+6      	; 0x27c <Mouse_HID_Task+0x4e>
		else if (JoyStatus_LCL & JOY_LEFT)
 276:	96 ff       	sbrs	r25, 6
 278:	03 c0       	rjmp	.+6      	; 0x280 <Mouse_HID_Task+0x52>
		  MouseReportData.X = -1;
 27a:	8f ef       	ldi	r24, 0xFF	; 255
 27c:	80 93 09 01 	sts	0x0109, r24

		if (JoyStatus_LCL & JOY_PRESS)
 280:	95 ff       	sbrs	r25, 5
 282:	05 c0       	rjmp	.+10     	; 0x28e <Mouse_HID_Task+0x60>
		  MouseReportData.Button |= (1 << 0);
 284:	80 91 08 01 	lds	r24, 0x0108
 288:	81 60       	ori	r24, 0x01	; 1
 28a:	80 93 08 01 	sts	0x0108, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 28e:	83 e0       	ldi	r24, 0x03	; 3
 290:	f8 2e       	mov	r15, r24
 292:	f0 92 e9 00 	sts	0x00E9, r15
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 296:	80 91 e8 00 	lds	r24, 0x00E8

	/* Select the Mouse Report Endpoint */
	Endpoint_SelectEndpoint(MOUSE_IN_EPNUM);

	/* Check if Mouse Endpoint Ready for Read/Write */
	if (Endpoint_IsReadWriteAllowed())
 29a:	85 ff       	sbrs	r24, 5
 29c:	11 c0       	rjmp	.+34     	; 0x2c0 <Mouse_HID_Task+0x92>
	{
		/* Write Mouse Report Data */
		Endpoint_Write_Stream_LE(&MouseReportData, sizeof(MouseReportData), NULL);
 29e:	08 e0       	ldi	r16, 0x08	; 8
 2a0:	11 e0       	ldi	r17, 0x01	; 1
 2a2:	c8 01       	movw	r24, r16
 2a4:	63 e0       	ldi	r22, 0x03	; 3
 2a6:	70 e0       	ldi	r23, 0x00	; 0
 2a8:	40 e0       	ldi	r20, 0x00	; 0
 2aa:	50 e0       	ldi	r21, 0x00	; 0
 2ac:	d1 d3       	rcall	.+1954   	; 0xa50 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 2ae:	80 91 e8 00 	lds	r24, 0x00E8
 2b2:	8e 77       	andi	r24, 0x7E	; 126
 2b4:	80 93 e8 00 	sts	0x00E8, r24

		/* Finalize the stream transfer to send the last packet */
		Endpoint_ClearIN();

		/* Clear the report data afterwards */
		memset(&MouseReportData, 0, sizeof(MouseReportData));
 2b8:	f8 01       	movw	r30, r16
 2ba:	11 92       	st	Z+, r1
 2bc:	fa 94       	dec	r15
 2be:	e9 f7       	brne	.-6      	; 0x2ba <Mouse_HID_Task+0x8c>
	}
}
 2c0:	1f 91       	pop	r17
 2c2:	0f 91       	pop	r16
 2c4:	ff 90       	pop	r15
 2c6:	08 95       	ret

000002c8 <Keyboard_HID_Task>:
/** Keyboard task. This generates the next keyboard HID report for the host, and transmits it via the
 *  keyboard IN endpoint when the host is ready for more data. Additionally, it processes host LED status
 *  reports sent to the device via the keyboard OUT reporting endpoint.
 */
void Keyboard_HID_Task(void)
{
 2c8:	0f 93       	push	r16
 2ca:	1f 93       	push	r17
 2cc:	33 b1       	in	r19, 0x03	; 3
 2ce:	8c b1       	in	r24, 0x0c	; 12
	uint8_t JoyStatus_LCL = Joystick_GetStatus();

	/* Device must be connected and configured for the task to run */
	if (USB_DeviceState != DEVICE_STATE_Configured)
 2d0:	20 91 0f 01 	lds	r18, 0x010F
 2d4:	24 30       	cpi	r18, 0x04	; 4
 2d6:	09 f0       	breq	.+2      	; 0x2da <Keyboard_HID_Task+0x12>
 2d8:	4f c0       	rjmp	.+158    	; 0x378 <Keyboard_HID_Task+0xb0>
	  return;

	/* Check if board button is not pressed, if so mouse mode enabled */
	if (!(Buttons_GetStatus() & BUTTONS_BUTTON1))
 2da:	62 9b       	sbis	0x0c, 2	; 12
 2dc:	25 c0       	rjmp	.+74     	; 0x328 <Keyboard_HID_Task+0x60>
 2de:	80 95       	com	r24
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	80 73       	andi	r24, 0x30	; 48
 2e4:	90 70       	andi	r25, 0x00	; 0
 2e6:	95 95       	asr	r25
 2e8:	87 95       	ror	r24
 2ea:	93 2f       	mov	r25, r19
 2ec:	90 95       	com	r25
 2ee:	90 7e       	andi	r25, 0xE0	; 224
 2f0:	98 2b       	or	r25, r24
	{
		/* Make sent key uppercase by indicating that the left shift key is pressed */
		KeyboardReportData.Modifier = HID_KEYBOARD_MODIFER_LEFTSHIFT;
 2f2:	82 e0       	ldi	r24, 0x02	; 2
 2f4:	80 93 00 01 	sts	0x0100, r24

		if (JoyStatus_LCL & JOY_UP)
 2f8:	97 ff       	sbrs	r25, 7
 2fa:	03 c0       	rjmp	.+6      	; 0x302 <Keyboard_HID_Task+0x3a>
		  KeyboardReportData.KeyCode[0] = HID_KEYBOARD_SC_A;
 2fc:	20 93 02 01 	sts	0x0102, r18
 300:	05 c0       	rjmp	.+10     	; 0x30c <Keyboard_HID_Task+0x44>
		else if (JoyStatus_LCL & JOY_DOWN)
 302:	94 ff       	sbrs	r25, 4
 304:	03 c0       	rjmp	.+6      	; 0x30c <Keyboard_HID_Task+0x44>
		  KeyboardReportData.KeyCode[0] = HID_KEYBOARD_SC_B;
 306:	85 e0       	ldi	r24, 0x05	; 5
 308:	80 93 02 01 	sts	0x0102, r24

		if (JoyStatus_LCL & JOY_LEFT)
 30c:	96 ff       	sbrs	r25, 6
 30e:	02 c0       	rjmp	.+4      	; 0x314 <Keyboard_HID_Task+0x4c>
		  KeyboardReportData.KeyCode[0] = HID_KEYBOARD_SC_C;
 310:	86 e0       	ldi	r24, 0x06	; 6
 312:	03 c0       	rjmp	.+6      	; 0x31a <Keyboard_HID_Task+0x52>
		else if (JoyStatus_LCL & JOY_RIGHT)
 314:	93 ff       	sbrs	r25, 3
 316:	03 c0       	rjmp	.+6      	; 0x31e <Keyboard_HID_Task+0x56>
		  KeyboardReportData.KeyCode[0] = HID_KEYBOARD_SC_D;
 318:	87 e0       	ldi	r24, 0x07	; 7
 31a:	80 93 02 01 	sts	0x0102, r24

		if (JoyStatus_LCL & JOY_PRESS)
 31e:	95 ff       	sbrs	r25, 5
 320:	03 c0       	rjmp	.+6      	; 0x328 <Keyboard_HID_Task+0x60>
		  KeyboardReportData.KeyCode[0] = HID_KEYBOARD_SC_E;
 322:	88 e0       	ldi	r24, 0x08	; 8
 324:	80 93 02 01 	sts	0x0102, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 328:	81 e0       	ldi	r24, 0x01	; 1
 32a:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 32e:	80 91 e8 00 	lds	r24, 0x00E8

	/* Select the Keyboard Report Endpoint */
	Endpoint_SelectEndpoint(KEYBOARD_IN_EPNUM);

	/* Check if Keyboard Endpoint Ready for Read/Write */
	if (Endpoint_IsReadWriteAllowed())
 332:	85 ff       	sbrs	r24, 5
 334:	12 c0       	rjmp	.+36     	; 0x35a <Keyboard_HID_Task+0x92>
	{
		/* Write Keyboard Report Data */
		Endpoint_Write_Stream_LE(&KeyboardReportData, sizeof(KeyboardReportData), NULL);
 336:	00 e0       	ldi	r16, 0x00	; 0
 338:	11 e0       	ldi	r17, 0x01	; 1
 33a:	c8 01       	movw	r24, r16
 33c:	68 e0       	ldi	r22, 0x08	; 8
 33e:	70 e0       	ldi	r23, 0x00	; 0
 340:	40 e0       	ldi	r20, 0x00	; 0
 342:	50 e0       	ldi	r21, 0x00	; 0
 344:	85 d3       	rcall	.+1802   	; 0xa50 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 346:	80 91 e8 00 	lds	r24, 0x00E8
 34a:	8e 77       	andi	r24, 0x7E	; 126
 34c:	80 93 e8 00 	sts	0x00E8, r24

		/* Finalize the stream transfer to send the last packet */
		Endpoint_ClearIN();

		/* Clear the report data afterwards */
		memset(&KeyboardReportData, 0, sizeof(KeyboardReportData));
 350:	88 e0       	ldi	r24, 0x08	; 8
 352:	f8 01       	movw	r30, r16
 354:	11 92       	st	Z+, r1
 356:	8a 95       	dec	r24
 358:	e9 f7       	brne	.-6      	; 0x354 <Keyboard_HID_Task+0x8c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 35a:	82 e0       	ldi	r24, 0x02	; 2
 35c:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 360:	80 91 e8 00 	lds	r24, 0x00E8

	/* Select the Keyboard LED Report Endpoint */
	Endpoint_SelectEndpoint(KEYBOARD_OUT_EPNUM);

	/* Check if Keyboard LED Endpoint Ready for Read/Write */
	if (Endpoint_IsReadWriteAllowed())
 364:	85 ff       	sbrs	r24, 5
 366:	08 c0       	rjmp	.+16     	; 0x378 <Keyboard_HID_Task+0xb0>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 368:	80 91 f1 00 	lds	r24, 0x00F1
	{
		/* Read in and process the LED report from the host */
		Keyboard_ProcessLEDReport(Endpoint_Read_8());
 36c:	52 df       	rcall	.-348    	; 0x212 <Keyboard_ProcessLEDReport>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 36e:	80 91 e8 00 	lds	r24, 0x00E8
 372:	8b 77       	andi	r24, 0x7B	; 123
 374:	80 93 e8 00 	sts	0x00E8, r24

		/* Handshake the OUT Endpoint - clear endpoint and ready for next report */
		Endpoint_ClearOUT();
	}
}
 378:	1f 91       	pop	r17
 37a:	0f 91       	pop	r16
 37c:	08 95       	ret

0000037e <EVENT_USB_Device_ControlRequest>:
/** Event handler for the USB_ControlRequest event. This is used to catch and process control requests sent to
 *  the device from the USB host before passing along unhandled control requests to the library for processing
 *  internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
 37e:	1f 93       	push	r17
 380:	cf 93       	push	r28
 382:	df 93       	push	r29
	uint8_t* ReportData;
	uint8_t  ReportSize;

	/* Handle HID Class specific requests */
	switch (USB_ControlRequest.bRequest)
 384:	80 91 11 01 	lds	r24, 0x0111
 388:	81 30       	cpi	r24, 0x01	; 1
 38a:	21 f0       	breq	.+8      	; 0x394 <EVENT_USB_Device_ControlRequest+0x16>
 38c:	89 30       	cpi	r24, 0x09	; 9
 38e:	09 f0       	breq	.+2      	; 0x392 <EVENT_USB_Device_ControlRequest+0x14>
 390:	44 c0       	rjmp	.+136    	; 0x41a <EVENT_USB_Device_ControlRequest+0x9c>
 392:	27 c0       	rjmp	.+78     	; 0x3e2 <EVENT_USB_Device_ControlRequest+0x64>
	{
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
 394:	80 91 10 01 	lds	r24, 0x0110
 398:	81 3a       	cpi	r24, 0xA1	; 161
 39a:	09 f0       	breq	.+2      	; 0x39e <EVENT_USB_Device_ControlRequest+0x20>
 39c:	3e c0       	rjmp	.+124    	; 0x41a <EVENT_USB_Device_ControlRequest+0x9c>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 39e:	80 91 e8 00 	lds	r24, 0x00E8
 3a2:	87 7f       	andi	r24, 0xF7	; 247
 3a4:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();

				/* Determine if it is the mouse or the keyboard data that is being requested */
				if (!(USB_ControlRequest.wIndex))
 3a8:	80 91 14 01 	lds	r24, 0x0114
 3ac:	90 91 15 01 	lds	r25, 0x0115
 3b0:	89 2b       	or	r24, r25
 3b2:	21 f0       	breq	.+8      	; 0x3bc <EVENT_USB_Device_ControlRequest+0x3e>
 3b4:	c8 e0       	ldi	r28, 0x08	; 8
 3b6:	d1 e0       	ldi	r29, 0x01	; 1
 3b8:	13 e0       	ldi	r17, 0x03	; 3
 3ba:	03 c0       	rjmp	.+6      	; 0x3c2 <EVENT_USB_Device_ControlRequest+0x44>
 3bc:	c0 e0       	ldi	r28, 0x00	; 0
 3be:	d1 e0       	ldi	r29, 0x01	; 1
 3c0:	18 e0       	ldi	r17, 0x08	; 8
					ReportData = (uint8_t*)&MouseReportData;
					ReportSize = sizeof(MouseReportData);
				}

				/* Write the report data to the control endpoint */
				Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
 3c2:	ce 01       	movw	r24, r28
 3c4:	61 2f       	mov	r22, r17
 3c6:	70 e0       	ldi	r23, 0x00	; 0
 3c8:	84 d2       	rcall	.+1288   	; 0x8d2 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 3ca:	80 91 e8 00 	lds	r24, 0x00E8
 3ce:	8b 77       	andi	r24, 0x7B	; 123
 3d0:	80 93 e8 00 	sts	0x00E8, r24
				Endpoint_ClearOUT();

				/* Clear the report data afterwards */
				memset(ReportData, 0, ReportSize);
 3d4:	ce 01       	movw	r24, r28
 3d6:	60 e0       	ldi	r22, 0x00	; 0
 3d8:	70 e0       	ldi	r23, 0x00	; 0
 3da:	41 2f       	mov	r20, r17
 3dc:	50 e0       	ldi	r21, 0x00	; 0
 3de:	09 d5       	rcall	.+2578   	; 0xdf2 <memset>
 3e0:	1c c0       	rjmp	.+56     	; 0x41a <EVENT_USB_Device_ControlRequest+0x9c>
			}

			break;
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 3e2:	80 91 10 01 	lds	r24, 0x0110
 3e6:	81 32       	cpi	r24, 0x21	; 33
 3e8:	c1 f4       	brne	.+48     	; 0x41a <EVENT_USB_Device_ControlRequest+0x9c>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 3ea:	80 91 e8 00 	lds	r24, 0x00E8
 3ee:	87 7f       	andi	r24, 0xF7	; 247
 3f0:	80 93 e8 00 	sts	0x00E8, r24
 3f4:	04 c0       	rjmp	.+8      	; 0x3fe <EVENT_USB_Device_ControlRequest+0x80>
				Endpoint_ClearSETUP();

				/* Wait until the LED report has been sent by the host */
				while (!(Endpoint_IsOUTReceived()))
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
 3f6:	80 91 0f 01 	lds	r24, 0x010F
 3fa:	88 23       	and	r24, r24
 3fc:	71 f0       	breq	.+28     	; 0x41a <EVENT_USB_Device_ControlRequest+0x9c>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 3fe:	80 91 e8 00 	lds	r24, 0x00E8
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();

				/* Wait until the LED report has been sent by the host */
				while (!(Endpoint_IsOUTReceived()))
 402:	82 ff       	sbrs	r24, 2
 404:	f8 cf       	rjmp	.-16     	; 0x3f6 <EVENT_USB_Device_ControlRequest+0x78>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 406:	10 91 f1 00 	lds	r17, 0x00F1
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 40a:	80 91 e8 00 	lds	r24, 0x00E8
 40e:	8b 77       	andi	r24, 0x7B	; 123
 410:	80 93 e8 00 	sts	0x00E8, r24

				/* Read in the LED report from the host */
				uint8_t LEDStatus = Endpoint_Read_8();

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();
 414:	e4 d0       	rcall	.+456    	; 0x5de <Endpoint_ClearStatusStage>

				/* Process the incoming LED report */
				Keyboard_ProcessLEDReport(LEDStatus);
 416:	81 2f       	mov	r24, r17
 418:	fc de       	rcall	.-520    	; 0x212 <Keyboard_ProcessLEDReport>
			}

			break;
	}
}
 41a:	df 91       	pop	r29
 41c:	cf 91       	pop	r28
 41e:	1f 91       	pop	r17
 420:	08 95       	ret

00000422 <EVENT_USB_Device_ConfigurationChanged>:

/** Event handler for the USB_ConfigurationChanged event. This is fired when the host sets the current configuration
 *  of the USB device after enumeration, and configures the keyboard and mouse device endpoints.
 */
void EVENT_USB_Device_ConfigurationChanged(void)
{
 422:	ef 92       	push	r14
 424:	ff 92       	push	r15
 426:	0f 93       	push	r16
 428:	1f 93       	push	r17
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
 42a:	81 e0       	ldi	r24, 0x01	; 1
 42c:	61 ec       	ldi	r22, 0xC1	; 193
 42e:	42 e0       	ldi	r20, 0x02	; 2
 430:	a1 d0       	rcall	.+322    	; 0x574 <Endpoint_ConfigureEndpoint_Prv>
 432:	08 2f       	mov	r16, r24
	/* Setup Mouse HID Report Endpoint */
	ConfigSuccess &= Endpoint_ConfigureEndpoint(MOUSE_IN_EPNUM, EP_TYPE_INTERRUPT, ENDPOINT_DIR_IN,
	                                            HID_EPSIZE, ENDPOINT_BANK_SINGLE);

	/* Indicate endpoint configuration success or failure */
	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
 434:	82 e0       	ldi	r24, 0x02	; 2
 436:	60 ec       	ldi	r22, 0xC0	; 192
 438:	42 e0       	ldi	r20, 0x02	; 2
 43a:	9c d0       	rcall	.+312    	; 0x574 <Endpoint_ConfigureEndpoint_Prv>
 43c:	e8 2e       	mov	r14, r24
 43e:	83 e0       	ldi	r24, 0x03	; 3
 440:	61 ec       	ldi	r22, 0xC1	; 193
 442:	42 e0       	ldi	r20, 0x02	; 2
 444:	97 d0       	rcall	.+302    	; 0x574 <Endpoint_ConfigureEndpoint_Prv>
 446:	10 e0       	ldi	r17, 0x00	; 0
 448:	ff 24       	eor	r15, r15
 44a:	0e 21       	and	r16, r14
 44c:	1f 21       	and	r17, r15
 44e:	01 70       	andi	r16, 0x01	; 1
 450:	10 70       	andi	r17, 0x00	; 0
 452:	90 e0       	ldi	r25, 0x00	; 0
 454:	08 23       	and	r16, r24
 456:	19 23       	and	r17, r25
 458:	01 2b       	or	r16, r17
 45a:	11 f4       	brne	.+4      	; 0x460 <EVENT_USB_Device_ConfigurationChanged+0x3e>
 45c:	90 e9       	ldi	r25, 0x90	; 144
 45e:	01 c0       	rjmp	.+2      	; 0x462 <EVENT_USB_Device_ConfigurationChanged+0x40>
 460:	90 e6       	ldi	r25, 0x60	; 96
 462:	8b b1       	in	r24, 0x0b	; 11
 464:	8f 70       	andi	r24, 0x0F	; 15
 466:	98 2b       	or	r25, r24
 468:	9b b9       	out	0x0b, r25	; 11
}
 46a:	1f 91       	pop	r17
 46c:	0f 91       	pop	r16
 46e:	ff 90       	pop	r15
 470:	ef 90       	pop	r14
 472:	08 95       	ret

00000474 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
 474:	84 b7       	in	r24, 0x34	; 52
 476:	87 7f       	andi	r24, 0xF7	; 247
 478:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
 47a:	88 e1       	ldi	r24, 0x18	; 24
 47c:	0f b6       	in	r0, 0x3f	; 63
 47e:	f8 94       	cli
 480:	80 93 60 00 	sts	0x0060, r24
 484:	10 92 60 00 	sts	0x0060, r1
 488:	0f be       	out	0x3f, r0	; 63

	/* Disable clock division */
	clock_prescale_set(clock_div_1);
 48a:	80 e0       	ldi	r24, 0x00	; 0
 48c:	90 e0       	ldi	r25, 0x00	; 0
 48e:	20 e8       	ldi	r18, 0x80	; 128
 490:	0f b6       	in	r0, 0x3f	; 63
 492:	f8 94       	cli
 494:	20 93 61 00 	sts	0x0061, r18
 498:	80 93 61 00 	sts	0x0061, r24
 49c:	0f be       	out	0x3f, r0	; 63

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Joystick_Init(void)
			{
				DDRB  &= ~(JOY_BMASK);
 49e:	84 b1       	in	r24, 0x04	; 4
 4a0:	8f 71       	andi	r24, 0x1F	; 31
 4a2:	84 b9       	out	0x04, r24	; 4
				DDRE  &= ~(JOY_EMASK);
 4a4:	8d b1       	in	r24, 0x0d	; 13
 4a6:	8f 7c       	andi	r24, 0xCF	; 207
 4a8:	8d b9       	out	0x0d, r24	; 13

				PORTB |= JOY_BMASK;
 4aa:	85 b1       	in	r24, 0x05	; 5
 4ac:	80 6e       	ori	r24, 0xE0	; 224
 4ae:	85 b9       	out	0x05, r24	; 5
				PORTE |= JOY_EMASK;
 4b0:	8e b1       	in	r24, 0x0e	; 14
 4b2:	80 63       	ori	r24, 0x30	; 48
 4b4:	8e b9       	out	0x0e, r24	; 14

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
 4b6:	8a b1       	in	r24, 0x0a	; 10
 4b8:	80 6f       	ori	r24, 0xF0	; 240
 4ba:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
 4bc:	8b b1       	in	r24, 0x0b	; 11
 4be:	8f 70       	andi	r24, 0x0F	; 15
 4c0:	8b b9       	out	0x0b, r24	; 11

	/* Hardware Initialization */
	Joystick_Init();
	LEDs_Init();
	USB_Init();
}
 4c2:	29 c1       	rjmp	.+594    	; 0x716 <USB_Init>

000004c4 <main>:
/** Main program entry point. This routine configures the hardware required by the application, then
 *  enters a loop to run the application tasks in sequence.
 */
int main(void)
{
	SetupHardware();
 4c4:	d7 df       	rcall	.-82     	; 0x474 <SetupHardware>
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
 4c6:	8b b1       	in	r24, 0x0b	; 11
 4c8:	8f 70       	andi	r24, 0x0F	; 15
 4ca:	80 61       	ori	r24, 0x10	; 16
 4cc:	8b b9       	out	0x0b, r24	; 11

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
	sei();
 4ce:	78 94       	sei

	for (;;)
	{
		Keyboard_HID_Task();
 4d0:	fb de       	rcall	.-522    	; 0x2c8 <Keyboard_HID_Task>
		Mouse_HID_Task();
 4d2:	ad de       	rcall	.-678    	; 0x22e <Mouse_HID_Task>
		USB_USBTask();
 4d4:	7b d4       	rcall	.+2294   	; 0xdcc <USB_USBTask>
 4d6:	fc cf       	rjmp	.-8      	; 0x4d0 <main+0xc>

000004d8 <CALLBACK_USB_GetDescriptor>:
 *  USB host.
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
 4d8:	da 01       	movw	r26, r20
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
 4da:	93 30       	cpi	r25, 0x03	; 3
 4dc:	c1 f0       	breq	.+48     	; 0x50e <CALLBACK_USB_GetDescriptor+0x36>
 4de:	94 30       	cpi	r25, 0x04	; 4
 4e0:	30 f4       	brcc	.+12     	; 0x4ee <CALLBACK_USB_GetDescriptor+0x16>
 4e2:	91 30       	cpi	r25, 0x01	; 1
 4e4:	51 f0       	breq	.+20     	; 0x4fa <CALLBACK_USB_GetDescriptor+0x22>
 4e6:	92 30       	cpi	r25, 0x02	; 2
 4e8:	09 f0       	breq	.+2      	; 0x4ec <CALLBACK_USB_GetDescriptor+0x14>
 4ea:	3c c0       	rjmp	.+120    	; 0x564 <CALLBACK_USB_GetDescriptor+0x8c>
 4ec:	0b c0       	rjmp	.+22     	; 0x504 <CALLBACK_USB_GetDescriptor+0x2c>
 4ee:	91 32       	cpi	r25, 0x21	; 33
 4f0:	19 f1       	breq	.+70     	; 0x538 <CALLBACK_USB_GetDescriptor+0x60>
 4f2:	92 32       	cpi	r25, 0x22	; 34
 4f4:	09 f0       	breq	.+2      	; 0x4f8 <CALLBACK_USB_GetDescriptor+0x20>
 4f6:	36 c0       	rjmp	.+108    	; 0x564 <CALLBACK_USB_GetDescriptor+0x8c>
 4f8:	29 c0       	rjmp	.+82     	; 0x54c <CALLBACK_USB_GetDescriptor+0x74>
 4fa:	ed e0       	ldi	r30, 0x0D	; 13
 4fc:	f1 e0       	ldi	r31, 0x01	; 1
 4fe:	22 e1       	ldi	r18, 0x12	; 18
 500:	30 e0       	ldi	r19, 0x00	; 0
 502:	34 c0       	rjmp	.+104    	; 0x56c <CALLBACK_USB_GetDescriptor+0x94>
 504:	ef e1       	ldi	r30, 0x1F	; 31
 506:	f1 e0       	ldi	r31, 0x01	; 1
 508:	29 e4       	ldi	r18, 0x49	; 73
 50a:	30 e0       	ldi	r19, 0x00	; 0
 50c:	2f c0       	rjmp	.+94     	; 0x56c <CALLBACK_USB_GetDescriptor+0x94>
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
 50e:	81 30       	cpi	r24, 0x01	; 1
 510:	49 f0       	breq	.+18     	; 0x524 <CALLBACK_USB_GetDescriptor+0x4c>
 512:	81 30       	cpi	r24, 0x01	; 1
 514:	18 f0       	brcs	.+6      	; 0x51c <CALLBACK_USB_GetDescriptor+0x44>
 516:	82 30       	cpi	r24, 0x02	; 2
 518:	29 f5       	brne	.+74     	; 0x564 <CALLBACK_USB_GetDescriptor+0x8c>
 51a:	0a c0       	rjmp	.+20     	; 0x530 <CALLBACK_USB_GetDescriptor+0x58>
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
 51c:	e8 e6       	ldi	r30, 0x68	; 104
 51e:	f1 e0       	ldi	r31, 0x01	; 1
 520:	84 91       	lpm	r24, Z+
 522:	03 c0       	rjmp	.+6      	; 0x52a <CALLBACK_USB_GetDescriptor+0x52>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
 524:	ec e6       	ldi	r30, 0x6C	; 108
 526:	f1 e0       	ldi	r31, 0x01	; 1
 528:	84 91       	lpm	r24, Z+
 52a:	28 2f       	mov	r18, r24
 52c:	30 e0       	ldi	r19, 0x00	; 0
 52e:	1e c0       	rjmp	.+60     	; 0x56c <CALLBACK_USB_GetDescriptor+0x94>
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
 530:	e6 e8       	ldi	r30, 0x86	; 134
 532:	f1 e0       	ldi	r31, 0x01	; 1
 534:	84 91       	lpm	r24, Z+
 536:	f9 cf       	rjmp	.-14     	; 0x52a <CALLBACK_USB_GetDescriptor+0x52>
					break;
			}

			break;
		case HID_DTYPE_HID:
			if (!(wIndex))
 538:	66 23       	and	r22, r22
 53a:	19 f0       	breq	.+6      	; 0x542 <CALLBACK_USB_GetDescriptor+0x6a>
 53c:	e1 e5       	ldi	r30, 0x51	; 81
 53e:	f1 e0       	ldi	r31, 0x01	; 1
 540:	02 c0       	rjmp	.+4      	; 0x546 <CALLBACK_USB_GetDescriptor+0x6e>
 542:	e1 e3       	ldi	r30, 0x31	; 49
 544:	f1 e0       	ldi	r31, 0x01	; 1
 546:	29 e0       	ldi	r18, 0x09	; 9
 548:	30 e0       	ldi	r19, 0x00	; 0
 54a:	10 c0       	rjmp	.+32     	; 0x56c <CALLBACK_USB_GetDescriptor+0x94>
				Address = &ConfigurationDescriptor.HID2_MouseHID;
				Size    = sizeof(USB_HID_Descriptor_HID_t);
			}
			break;
		case HID_DTYPE_Report:
			if (!(wIndex))
 54c:	66 23       	and	r22, r22
 54e:	29 f0       	breq	.+10     	; 0x55a <CALLBACK_USB_GetDescriptor+0x82>
 550:	e8 e9       	ldi	r30, 0x98	; 152
 552:	f0 e0       	ldi	r31, 0x00	; 0
 554:	26 e3       	ldi	r18, 0x36	; 54
 556:	30 e0       	ldi	r19, 0x00	; 0
 558:	09 c0       	rjmp	.+18     	; 0x56c <CALLBACK_USB_GetDescriptor+0x94>
 55a:	ee ec       	ldi	r30, 0xCE	; 206
 55c:	f0 e0       	ldi	r31, 0x00	; 0
 55e:	2f e3       	ldi	r18, 0x3F	; 63
 560:	30 e0       	ldi	r19, 0x00	; 0
 562:	04 c0       	rjmp	.+8      	; 0x56c <CALLBACK_USB_GetDescriptor+0x94>
 564:	e0 e0       	ldi	r30, 0x00	; 0
 566:	f0 e0       	ldi	r31, 0x00	; 0
 568:	20 e0       	ldi	r18, 0x00	; 0
 56a:	30 e0       	ldi	r19, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
 56c:	ed 93       	st	X+, r30
 56e:	fc 93       	st	X, r31
	return Size;
}
 570:	c9 01       	movw	r24, r18
 572:	08 95       	ret

00000574 <Endpoint_ConfigureEndpoint_Prv>:
#endif

bool Endpoint_ConfigureEndpoint_Prv(const uint8_t Number,
                                    const uint8_t UECFG0XData,
                                    const uint8_t UECFG1XData)
{
 574:	38 2f       	mov	r19, r24
 576:	28 2f       	mov	r18, r24
 578:	2c c0       	rjmp	.+88     	; 0x5d2 <Endpoint_ConfigureEndpoint_Prv+0x5e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 57a:	20 93 e9 00 	sts	0x00E9, r18
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);
		
		if (EPNum == Number)
 57e:	23 17       	cp	r18, r19
 580:	21 f4       	brne	.+8      	; 0x58a <Endpoint_ConfigureEndpoint_Prv+0x16>
 582:	76 2f       	mov	r23, r22
 584:	94 2f       	mov	r25, r20
 586:	50 e0       	ldi	r21, 0x00	; 0
 588:	06 c0       	rjmp	.+12     	; 0x596 <Endpoint_ConfigureEndpoint_Prv+0x22>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
 58a:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
 58e:	90 91 ed 00 	lds	r25, 0x00ED
			UEIENXTemp  = UEIENX;
 592:	50 91 f0 00 	lds	r21, 0x00F0
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
 596:	91 ff       	sbrs	r25, 1
 598:	1b c0       	rjmp	.+54     	; 0x5d0 <Endpoint_ConfigureEndpoint_Prv+0x5c>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
 59a:	80 91 eb 00 	lds	r24, 0x00EB
 59e:	8e 7f       	andi	r24, 0xFE	; 254
 5a0:	80 93 eb 00 	sts	0x00EB, r24
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
 5a4:	80 91 ed 00 	lds	r24, 0x00ED
 5a8:	8d 7f       	andi	r24, 0xFD	; 253
 5aa:	80 93 ed 00 	sts	0x00ED, r24
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
 5ae:	80 91 eb 00 	lds	r24, 0x00EB
 5b2:	81 60       	ori	r24, 0x01	; 1
 5b4:	80 93 eb 00 	sts	0x00EB, r24

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
 5b8:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
 5bc:	90 93 ed 00 	sts	0x00ED, r25
		UEIENX  = UEIENXTemp;
 5c0:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
 5c4:	80 91 ee 00 	lds	r24, 0x00EE
			
		if (!(Endpoint_IsConfigured()))
 5c8:	87 fd       	sbrc	r24, 7
 5ca:	02 c0       	rjmp	.+4      	; 0x5d0 <Endpoint_ConfigureEndpoint_Prv+0x5c>
 5cc:	80 e0       	ldi	r24, 0x00	; 0
 5ce:	08 95       	ret
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else	
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
 5d0:	2f 5f       	subi	r18, 0xFF	; 255
 5d2:	27 30       	cpi	r18, 0x07	; 7
 5d4:	90 f2       	brcs	.-92     	; 0x57a <Endpoint_ConfigureEndpoint_Prv+0x6>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 5d6:	30 93 e9 00 	sts	0x00E9, r19
 5da:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
 5dc:	08 95       	ret

000005de <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
 5de:	80 91 10 01 	lds	r24, 0x0110
 5e2:	88 23       	and	r24, r24
 5e4:	9c f4       	brge	.+38     	; 0x60c <Endpoint_ClearStatusStage+0x2e>
 5e6:	04 c0       	rjmp	.+8      	; 0x5f0 <Endpoint_ClearStatusStage+0x12>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 5e8:	80 91 0f 01 	lds	r24, 0x010F
 5ec:	88 23       	and	r24, r24
 5ee:	b9 f0       	breq	.+46     	; 0x61e <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 5f0:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
 5f4:	82 ff       	sbrs	r24, 2
 5f6:	f8 cf       	rjmp	.-16     	; 0x5e8 <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 5f8:	80 91 e8 00 	lds	r24, 0x00E8
 5fc:	8b 77       	andi	r24, 0x7B	; 123
 5fe:	80 93 e8 00 	sts	0x00E8, r24
 602:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 604:	80 91 0f 01 	lds	r24, 0x010F
 608:	88 23       	and	r24, r24
 60a:	49 f0       	breq	.+18     	; 0x61e <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 60c:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
 610:	80 ff       	sbrs	r24, 0
 612:	f8 cf       	rjmp	.-16     	; 0x604 <Endpoint_ClearStatusStage+0x26>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 614:	80 91 e8 00 	lds	r24, 0x00E8
 618:	8e 77       	andi	r24, 0x7E	; 126
 61a:	80 93 e8 00 	sts	0x00E8, r24
 61e:	08 95       	ret

00000620 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
 620:	40 91 e4 00 	lds	r20, 0x00E4
 624:	50 91 e5 00 	lds	r21, 0x00E5
 628:	24 e6       	ldi	r18, 0x64	; 100
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 62a:	80 91 ec 00 	lds	r24, 0x00EC
 62e:	80 ff       	sbrs	r24, 0
 630:	24 c0       	rjmp	.+72     	; 0x67a <Endpoint_WaitUntilReady+0x5a>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 632:	80 91 e8 00 	lds	r24, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
 636:	80 fd       	sbrc	r24, 0
 638:	1e c0       	rjmp	.+60     	; 0x676 <Endpoint_WaitUntilReady+0x56>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}
		
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 63a:	80 91 0f 01 	lds	r24, 0x010F

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 63e:	88 23       	and	r24, r24
 640:	11 f4       	brne	.+4      	; 0x646 <Endpoint_WaitUntilReady+0x26>
 642:	82 e0       	ldi	r24, 0x02	; 2
 644:	08 95       	ret
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 646:	85 30       	cpi	r24, 0x05	; 5
 648:	11 f4       	brne	.+4      	; 0x64e <Endpoint_WaitUntilReady+0x2e>
 64a:	83 e0       	ldi	r24, 0x03	; 3
 64c:	08 95       	ret
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 64e:	80 91 eb 00 	lds	r24, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
 652:	85 ff       	sbrs	r24, 5
 654:	02 c0       	rjmp	.+4      	; 0x65a <Endpoint_WaitUntilReady+0x3a>
 656:	81 e0       	ldi	r24, 0x01	; 1
 658:	08 95       	ret
 65a:	80 91 e4 00 	lds	r24, 0x00E4
 65e:	90 91 e5 00 	lds	r25, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
 662:	84 17       	cp	r24, r20
 664:	95 07       	cpc	r25, r21
 666:	09 f3       	breq	.-62     	; 0x62a <Endpoint_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
 668:	22 23       	and	r18, r18
 66a:	11 f4       	brne	.+4      	; 0x670 <Endpoint_WaitUntilReady+0x50>
 66c:	84 e0       	ldi	r24, 0x04	; 4
 66e:	08 95       	ret
 670:	21 50       	subi	r18, 0x01	; 1
 672:	ac 01       	movw	r20, r24
 674:	da cf       	rjmp	.-76     	; 0x62a <Endpoint_WaitUntilReady+0xa>
 676:	80 e0       	ldi	r24, 0x00	; 0
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
 678:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 67a:	80 91 e8 00 	lds	r24, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
 67e:	82 ff       	sbrs	r24, 2
 680:	dc cf       	rjmp	.-72     	; 0x63a <Endpoint_WaitUntilReady+0x1a>
 682:	f9 cf       	rjmp	.-14     	; 0x676 <Endpoint_WaitUntilReady+0x56>

00000684 <USB_ResetInterface>:

void USB_ResetInterface(void)
{
 684:	ef 92       	push	r14
 686:	ff 92       	push	r15
 688:	0f 93       	push	r16
 68a:	1f 93       	push	r17
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
 68c:	4d d0       	rcall	.+154    	; 0x728 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
 68e:	54 d0       	rcall	.+168    	; 0x738 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
 690:	08 ed       	ldi	r16, 0xD8	; 216
 692:	10 e0       	ldi	r17, 0x00	; 0
 694:	f8 01       	movw	r30, r16
 696:	80 81       	ld	r24, Z
 698:	8f 77       	andi	r24, 0x7F	; 127
 69a:	80 83       	st	Z, r24
				USBCON |=  (1 << USBE);
 69c:	80 81       	ld	r24, Z
 69e:	80 68       	ori	r24, 0x80	; 128
 6a0:	80 83       	st	Z, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
 6a2:	80 81       	ld	r24, Z
 6a4:	8f 7d       	andi	r24, 0xDF	; 223
 6a6:	80 83       	st	Z, r24

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
 6a8:	e7 ed       	ldi	r30, 0xD7	; 215
 6aa:	f0 e0       	ldi	r31, 0x00	; 0
 6ac:	80 81       	ld	r24, Z
 6ae:	80 68       	ori	r24, 0x80	; 128
 6b0:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
 6b2:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
 6b4:	10 92 0f 01 	sts	0x010F, r1
	USB_Device_ConfigurationNumber  = 0;
 6b8:	10 92 0b 01 	sts	0x010B, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
 6bc:	10 92 0d 01 	sts	0x010D, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
 6c0:	10 92 0c 01 	sts	0x010C, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
 6c4:	80 ee       	ldi	r24, 0xE0	; 224
 6c6:	e8 2e       	mov	r14, r24
 6c8:	f1 2c       	mov	r15, r1
 6ca:	f7 01       	movw	r30, r14
 6cc:	80 81       	ld	r24, Z
 6ce:	8b 7f       	andi	r24, 0xFB	; 251
 6d0:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
 6d2:	f8 01       	movw	r30, r16
 6d4:	80 81       	ld	r24, Z
 6d6:	81 60       	ori	r24, 0x01	; 1
 6d8:	80 83       	st	Z, r24
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
 6da:	80 e0       	ldi	r24, 0x00	; 0
 6dc:	60 e0       	ldi	r22, 0x00	; 0
 6de:	42 e0       	ldi	r20, 0x02	; 2
 6e0:	49 df       	rcall	.-366    	; 0x574 <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 6e2:	e1 ee       	ldi	r30, 0xE1	; 225
 6e4:	f0 e0       	ldi	r31, 0x00	; 0
 6e6:	80 81       	ld	r24, Z
 6e8:	8e 7f       	andi	r24, 0xFE	; 254
 6ea:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 6ec:	e2 ee       	ldi	r30, 0xE2	; 226
 6ee:	f0 e0       	ldi	r31, 0x00	; 0
 6f0:	80 81       	ld	r24, Z
 6f2:	81 60       	ori	r24, 0x01	; 1
 6f4:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
 6f6:	80 81       	ld	r24, Z
 6f8:	88 60       	ori	r24, 0x08	; 8
 6fa:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
 6fc:	f7 01       	movw	r30, r14
 6fe:	80 81       	ld	r24, Z
 700:	8e 7f       	andi	r24, 0xFE	; 254
 702:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
 704:	f8 01       	movw	r30, r16
 706:	80 81       	ld	r24, Z
 708:	80 61       	ori	r24, 0x10	; 16
 70a:	80 83       	st	Z, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
 70c:	1f 91       	pop	r17
 70e:	0f 91       	pop	r16
 710:	ff 90       	pop	r15
 712:	ef 90       	pop	r14
 714:	08 95       	ret

00000716 <USB_Init>:

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
 716:	e7 ed       	ldi	r30, 0xD7	; 215
 718:	f0 e0       	ldi	r31, 0x00	; 0
 71a:	80 81       	ld	r24, Z
 71c:	81 60       	ori	r24, 0x01	; 1
 71e:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
 720:	81 e0       	ldi	r24, 0x01	; 1
 722:	80 93 0e 01 	sts	0x010E, r24

	USB_ResetInterface();
}
 726:	ae cf       	rjmp	.-164    	; 0x684 <USB_ResetInterface>

00000728 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
 728:	e8 ed       	ldi	r30, 0xD8	; 216
 72a:	f0 e0       	ldi	r31, 0x00	; 0
 72c:	80 81       	ld	r24, Z
 72e:	8c 7f       	andi	r24, 0xFC	; 252
 730:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
 732:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
 736:	08 95       	ret

00000738 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
 738:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
 73c:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
 740:	08 95       	ret

00000742 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
 742:	1f 92       	push	r1
 744:	0f 92       	push	r0
 746:	0f b6       	in	r0, 0x3f	; 63
 748:	0f 92       	push	r0
 74a:	0b b6       	in	r0, 0x3b	; 59
 74c:	0f 92       	push	r0
 74e:	11 24       	eor	r1, r1
 750:	2f 93       	push	r18
 752:	3f 93       	push	r19
 754:	4f 93       	push	r20
 756:	5f 93       	push	r21
 758:	6f 93       	push	r22
 75a:	7f 93       	push	r23
 75c:	8f 93       	push	r24
 75e:	9f 93       	push	r25
 760:	af 93       	push	r26
 762:	bf 93       	push	r27
 764:	ef 93       	push	r30
 766:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
 768:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
 76c:	82 ff       	sbrs	r24, 2
 76e:	0a c0       	rjmp	.+20     	; 0x784 <__vector_10+0x42>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
 770:	80 91 e2 00 	lds	r24, 0x00E2
 774:	82 ff       	sbrs	r24, 2
 776:	06 c0       	rjmp	.+12     	; 0x784 <__vector_10+0x42>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
 778:	80 91 e1 00 	lds	r24, 0x00E1
 77c:	8b 7f       	andi	r24, 0xFB	; 251
 77e:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
 782:	23 d3       	rcall	.+1606   	; 0xdca <USB_Event_Stub>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
 784:	80 91 da 00 	lds	r24, 0x00DA
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
 788:	80 ff       	sbrs	r24, 0
 78a:	1d c0       	rjmp	.+58     	; 0x7c6 <__vector_10+0x84>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
 78c:	80 91 d8 00 	lds	r24, 0x00D8
 790:	80 ff       	sbrs	r24, 0
 792:	19 c0       	rjmp	.+50     	; 0x7c6 <__vector_10+0x84>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
 794:	80 91 da 00 	lds	r24, 0x00DA
 798:	8e 7f       	andi	r24, 0xFE	; 254
 79a:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
 79e:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
 7a2:	80 ff       	sbrs	r24, 0
 7a4:	0c c0       	rjmp	.+24     	; 0x7be <__vector_10+0x7c>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 7a6:	8c e0       	ldi	r24, 0x0C	; 12
 7a8:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 7aa:	8e e0       	ldi	r24, 0x0E	; 14
 7ac:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
 7ae:	09 b4       	in	r0, 0x29	; 41
 7b0:	00 fe       	sbrs	r0, 0
 7b2:	fd cf       	rjmp	.-6      	; 0x7ae <__vector_10+0x6c>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
 7b4:	81 e0       	ldi	r24, 0x01	; 1
 7b6:	80 93 0f 01 	sts	0x010F, r24
			EVENT_USB_Device_Connect();
 7ba:	21 dd       	rcall	.-1470   	; 0x1fe <EVENT_USB_Device_Connect>
 7bc:	04 c0       	rjmp	.+8      	; 0x7c6 <__vector_10+0x84>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
 7be:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
 7c0:	10 92 0f 01 	sts	0x010F, r1
			EVENT_USB_Device_Disconnect();
 7c4:	21 dd       	rcall	.-1470   	; 0x208 <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
 7c6:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
 7ca:	80 ff       	sbrs	r24, 0
 7cc:	18 c0       	rjmp	.+48     	; 0x7fe <__vector_10+0xbc>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
 7ce:	80 91 e2 00 	lds	r24, 0x00E2
 7d2:	80 ff       	sbrs	r24, 0
 7d4:	14 c0       	rjmp	.+40     	; 0x7fe <__vector_10+0xbc>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 7d6:	80 91 e2 00 	lds	r24, 0x00E2
 7da:	8e 7f       	andi	r24, 0xFE	; 254
 7dc:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 7e0:	80 91 e2 00 	lds	r24, 0x00E2
 7e4:	80 61       	ori	r24, 0x10	; 16
 7e6:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON  |=  (1 << FRZCLK);
 7ea:	80 91 d8 00 	lds	r24, 0x00D8
 7ee:	80 62       	ori	r24, 0x20	; 32
 7f0:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
 7f4:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
 7f6:	85 e0       	ldi	r24, 0x05	; 5
 7f8:	80 93 0f 01 	sts	0x010F, r24
		EVENT_USB_Device_Suspend();
 7fc:	e6 d2       	rcall	.+1484   	; 0xdca <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
 7fe:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
 802:	84 ff       	sbrs	r24, 4
 804:	2d c0       	rjmp	.+90     	; 0x860 <__vector_10+0x11e>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
 806:	80 91 e2 00 	lds	r24, 0x00E2
 80a:	84 ff       	sbrs	r24, 4
 80c:	29 c0       	rjmp	.+82     	; 0x860 <__vector_10+0x11e>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 80e:	8c e0       	ldi	r24, 0x0C	; 12
 810:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 812:	8e e0       	ldi	r24, 0x0E	; 14
 814:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 816:	09 b4       	in	r0, 0x29	; 41
 818:	00 fe       	sbrs	r0, 0
 81a:	fd cf       	rjmp	.-6      	; 0x816 <__vector_10+0xd4>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
 81c:	80 91 d8 00 	lds	r24, 0x00D8
 820:	8f 7d       	andi	r24, 0xDF	; 223
 822:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
 826:	80 91 e1 00 	lds	r24, 0x00E1
 82a:	8f 7e       	andi	r24, 0xEF	; 239
 82c:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
 830:	80 91 e2 00 	lds	r24, 0x00E2
 834:	8f 7e       	andi	r24, 0xEF	; 239
 836:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 83a:	80 91 e2 00 	lds	r24, 0x00E2
 83e:	81 60       	ori	r24, 0x01	; 1
 840:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
 844:	80 91 0b 01 	lds	r24, 0x010B
 848:	88 23       	and	r24, r24
 84a:	31 f4       	brne	.+12     	; 0x858 <__vector_10+0x116>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 84c:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 850:	87 fd       	sbrc	r24, 7
 852:	02 c0       	rjmp	.+4      	; 0x858 <__vector_10+0x116>
 854:	81 e0       	ldi	r24, 0x01	; 1
 856:	01 c0       	rjmp	.+2      	; 0x85a <__vector_10+0x118>
 858:	84 e0       	ldi	r24, 0x04	; 4
 85a:	80 93 0f 01 	sts	0x010F, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
 85e:	b5 d2       	rcall	.+1386   	; 0xdca <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
 860:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
 864:	83 ff       	sbrs	r24, 3
 866:	22 c0       	rjmp	.+68     	; 0x8ac <__vector_10+0x16a>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
 868:	80 91 e2 00 	lds	r24, 0x00E2
 86c:	83 ff       	sbrs	r24, 3
 86e:	1e c0       	rjmp	.+60     	; 0x8ac <__vector_10+0x16a>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
 870:	80 91 e1 00 	lds	r24, 0x00E1
 874:	87 7f       	andi	r24, 0xF7	; 247
 876:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
 87a:	82 e0       	ldi	r24, 0x02	; 2
 87c:	80 93 0f 01 	sts	0x010F, r24
		USB_Device_ConfigurationNumber = 0;
 880:	10 92 0b 01 	sts	0x010B, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 884:	80 91 e1 00 	lds	r24, 0x00E1
 888:	8e 7f       	andi	r24, 0xFE	; 254
 88a:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 88e:	80 91 e2 00 	lds	r24, 0x00E2
 892:	8e 7f       	andi	r24, 0xFE	; 254
 894:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 898:	80 91 e2 00 	lds	r24, 0x00E2
 89c:	80 61       	ori	r24, 0x10	; 16
 89e:	80 93 e2 00 	sts	0x00E2, r24
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
 8a2:	80 e0       	ldi	r24, 0x00	; 0
 8a4:	60 e0       	ldi	r22, 0x00	; 0
 8a6:	42 e0       	ldi	r20, 0x02	; 2
 8a8:	65 de       	rcall	.-822    	; 0x574 <Endpoint_ConfigureEndpoint_Prv>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
 8aa:	8f d2       	rcall	.+1310   	; 0xdca <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
 8ac:	ff 91       	pop	r31
 8ae:	ef 91       	pop	r30
 8b0:	bf 91       	pop	r27
 8b2:	af 91       	pop	r26
 8b4:	9f 91       	pop	r25
 8b6:	8f 91       	pop	r24
 8b8:	7f 91       	pop	r23
 8ba:	6f 91       	pop	r22
 8bc:	5f 91       	pop	r21
 8be:	4f 91       	pop	r20
 8c0:	3f 91       	pop	r19
 8c2:	2f 91       	pop	r18
 8c4:	0f 90       	pop	r0
 8c6:	0b be       	out	0x3b, r0	; 59
 8c8:	0f 90       	pop	r0
 8ca:	0f be       	out	0x3f, r0	; 63
 8cc:	0f 90       	pop	r0
 8ce:	1f 90       	pop	r1
 8d0:	18 95       	reti

000008d2 <Endpoint_Write_Control_Stream_LE>:
 8d2:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 8d4:	40 91 16 01 	lds	r20, 0x0116
 8d8:	50 91 17 01 	lds	r21, 0x0117
 8dc:	46 17       	cp	r20, r22
 8de:	57 07       	cpc	r21, r23
 8e0:	18 f4       	brcc	.+6      	; 0x8e8 <Endpoint_Write_Control_Stream_LE+0x16>
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
 8e2:	f9 01       	movw	r30, r18
 8e4:	90 e0       	ldi	r25, 0x00	; 0
 8e6:	3d c0       	rjmp	.+122    	; 0x962 <Endpoint_Write_Control_Stream_LE+0x90>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 8e8:	61 15       	cp	r22, r1
 8ea:	71 05       	cpc	r23, r1
 8ec:	11 f0       	breq	.+4      	; 0x8f2 <Endpoint_Write_Control_Stream_LE+0x20>
 8ee:	ab 01       	movw	r20, r22
 8f0:	f8 cf       	rjmp	.-16     	; 0x8e2 <Endpoint_Write_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 8f2:	80 91 e8 00 	lds	r24, 0x00E8
 8f6:	8e 77       	andi	r24, 0x7E	; 126
 8f8:	80 93 e8 00 	sts	0x00E8, r24
 8fc:	40 e0       	ldi	r20, 0x00	; 0
 8fe:	50 e0       	ldi	r21, 0x00	; 0
 900:	f0 cf       	rjmp	.-32     	; 0x8e2 <Endpoint_Write_Control_Stream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 902:	80 91 0f 01 	lds	r24, 0x010F

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 906:	88 23       	and	r24, r24
 908:	f1 f1       	breq	.+124    	; 0x986 <Endpoint_Write_Control_Stream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 90a:	85 30       	cpi	r24, 0x05	; 5
 90c:	f1 f1       	breq	.+124    	; 0x98a <Endpoint_Write_Control_Stream_LE+0xb8>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 90e:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 912:	83 ff       	sbrs	r24, 3
 914:	02 c0       	rjmp	.+4      	; 0x91a <Endpoint_Write_Control_Stream_LE+0x48>
 916:	81 e0       	ldi	r24, 0x01	; 1
 918:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 91a:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
 91e:	82 fd       	sbrc	r24, 2
 920:	2c c0       	rjmp	.+88     	; 0x97a <Endpoint_Write_Control_Stream_LE+0xa8>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 922:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
 926:	80 ff       	sbrs	r24, 0
 928:	1c c0       	rjmp	.+56     	; 0x962 <Endpoint_Write_Control_Stream_LE+0x90>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
 92a:	20 91 f2 00 	lds	r18, 0x00F2
 92e:	30 91 f3 00 	lds	r19, 0x00F3
 932:	07 c0       	rjmp	.+14     	; 0x942 <Endpoint_Write_Control_Stream_LE+0x70>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 934:	81 91       	ld	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 936:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
 93a:	41 50       	subi	r20, 0x01	; 1
 93c:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
 93e:	2f 5f       	subi	r18, 0xFF	; 255
 940:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 942:	41 15       	cp	r20, r1
 944:	51 05       	cpc	r21, r1
 946:	19 f0       	breq	.+6      	; 0x94e <Endpoint_Write_Control_Stream_LE+0x7c>
 948:	28 30       	cpi	r18, 0x08	; 8
 94a:	31 05       	cpc	r19, r1
 94c:	98 f3       	brcs	.-26     	; 0x934 <Endpoint_Write_Control_Stream_LE+0x62>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
 94e:	90 e0       	ldi	r25, 0x00	; 0
 950:	28 30       	cpi	r18, 0x08	; 8
 952:	31 05       	cpc	r19, r1
 954:	09 f4       	brne	.+2      	; 0x958 <Endpoint_Write_Control_Stream_LE+0x86>
 956:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 958:	80 91 e8 00 	lds	r24, 0x00E8
 95c:	8e 77       	andi	r24, 0x7E	; 126
 95e:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 962:	41 15       	cp	r20, r1
 964:	51 05       	cpc	r21, r1
 966:	69 f6       	brne	.-102    	; 0x902 <Endpoint_Write_Control_Stream_LE+0x30>
 968:	99 23       	and	r25, r25
 96a:	59 f6       	brne	.-106    	; 0x902 <Endpoint_Write_Control_Stream_LE+0x30>
 96c:	06 c0       	rjmp	.+12     	; 0x97a <Endpoint_Write_Control_Stream_LE+0xa8>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 96e:	80 91 0f 01 	lds	r24, 0x010F

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 972:	88 23       	and	r24, r24
 974:	41 f0       	breq	.+16     	; 0x986 <Endpoint_Write_Control_Stream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 976:	85 30       	cpi	r24, 0x05	; 5
 978:	41 f0       	breq	.+16     	; 0x98a <Endpoint_Write_Control_Stream_LE+0xb8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 97a:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 97e:	82 ff       	sbrs	r24, 2
 980:	f6 cf       	rjmp	.-20     	; 0x96e <Endpoint_Write_Control_Stream_LE+0x9c>
 982:	80 e0       	ldi	r24, 0x00	; 0
 984:	08 95       	ret
 986:	82 e0       	ldi	r24, 0x02	; 2
 988:	08 95       	ret
 98a:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 98c:	08 95       	ret

0000098e <Endpoint_Write_Control_PStream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
 98e:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 990:	40 91 16 01 	lds	r20, 0x0116
 994:	50 91 17 01 	lds	r21, 0x0117
 998:	46 17       	cp	r20, r22
 99a:	57 07       	cpc	r21, r23
 99c:	18 f4       	brcc	.+6      	; 0x9a4 <Endpoint_Write_Control_PStream_LE+0x16>
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
 99e:	f9 01       	movw	r30, r18
 9a0:	90 e0       	ldi	r25, 0x00	; 0
 9a2:	40 c0       	rjmp	.+128    	; 0xa24 <Endpoint_Write_Control_PStream_LE+0x96>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 9a4:	61 15       	cp	r22, r1
 9a6:	71 05       	cpc	r23, r1
 9a8:	11 f0       	breq	.+4      	; 0x9ae <Endpoint_Write_Control_PStream_LE+0x20>
 9aa:	ab 01       	movw	r20, r22
 9ac:	f8 cf       	rjmp	.-16     	; 0x99e <Endpoint_Write_Control_PStream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 9ae:	80 91 e8 00 	lds	r24, 0x00E8
 9b2:	8e 77       	andi	r24, 0x7E	; 126
 9b4:	80 93 e8 00 	sts	0x00E8, r24
 9b8:	40 e0       	ldi	r20, 0x00	; 0
 9ba:	50 e0       	ldi	r21, 0x00	; 0
 9bc:	f0 cf       	rjmp	.-32     	; 0x99e <Endpoint_Write_Control_PStream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 9be:	80 91 0f 01 	lds	r24, 0x010F

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 9c2:	88 23       	and	r24, r24
 9c4:	09 f4       	brne	.+2      	; 0x9c8 <Endpoint_Write_Control_PStream_LE+0x3a>
 9c6:	40 c0       	rjmp	.+128    	; 0xa48 <Endpoint_Write_Control_PStream_LE+0xba>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 9c8:	85 30       	cpi	r24, 0x05	; 5
 9ca:	09 f4       	brne	.+2      	; 0x9ce <Endpoint_Write_Control_PStream_LE+0x40>
 9cc:	3f c0       	rjmp	.+126    	; 0xa4c <Endpoint_Write_Control_PStream_LE+0xbe>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 9ce:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 9d2:	83 ff       	sbrs	r24, 3
 9d4:	02 c0       	rjmp	.+4      	; 0x9da <Endpoint_Write_Control_PStream_LE+0x4c>
 9d6:	81 e0       	ldi	r24, 0x01	; 1
 9d8:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 9da:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
 9de:	82 fd       	sbrc	r24, 2
 9e0:	2d c0       	rjmp	.+90     	; 0xa3c <Endpoint_Write_Control_PStream_LE+0xae>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 9e2:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
 9e6:	80 ff       	sbrs	r24, 0
 9e8:	1d c0       	rjmp	.+58     	; 0xa24 <Endpoint_Write_Control_PStream_LE+0x96>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
 9ea:	20 91 f2 00 	lds	r18, 0x00F2
 9ee:	30 91 f3 00 	lds	r19, 0x00F3
 9f2:	08 c0       	rjmp	.+16     	; 0xa04 <Endpoint_Write_Control_PStream_LE+0x76>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 9f4:	84 91       	lpm	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 9f6:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
 9fa:	31 96       	adiw	r30, 0x01	; 1
				Length--;
 9fc:	41 50       	subi	r20, 0x01	; 1
 9fe:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
 a00:	2f 5f       	subi	r18, 0xFF	; 255
 a02:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 a04:	41 15       	cp	r20, r1
 a06:	51 05       	cpc	r21, r1
 a08:	19 f0       	breq	.+6      	; 0xa10 <Endpoint_Write_Control_PStream_LE+0x82>
 a0a:	28 30       	cpi	r18, 0x08	; 8
 a0c:	31 05       	cpc	r19, r1
 a0e:	90 f3       	brcs	.-28     	; 0x9f4 <Endpoint_Write_Control_PStream_LE+0x66>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
 a10:	90 e0       	ldi	r25, 0x00	; 0
 a12:	28 30       	cpi	r18, 0x08	; 8
 a14:	31 05       	cpc	r19, r1
 a16:	09 f4       	brne	.+2      	; 0xa1a <Endpoint_Write_Control_PStream_LE+0x8c>
 a18:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 a1a:	80 91 e8 00 	lds	r24, 0x00E8
 a1e:	8e 77       	andi	r24, 0x7E	; 126
 a20:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 a24:	41 15       	cp	r20, r1
 a26:	51 05       	cpc	r21, r1
 a28:	51 f6       	brne	.-108    	; 0x9be <Endpoint_Write_Control_PStream_LE+0x30>
 a2a:	99 23       	and	r25, r25
 a2c:	41 f6       	brne	.-112    	; 0x9be <Endpoint_Write_Control_PStream_LE+0x30>
 a2e:	06 c0       	rjmp	.+12     	; 0xa3c <Endpoint_Write_Control_PStream_LE+0xae>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 a30:	80 91 0f 01 	lds	r24, 0x010F

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 a34:	88 23       	and	r24, r24
 a36:	41 f0       	breq	.+16     	; 0xa48 <Endpoint_Write_Control_PStream_LE+0xba>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 a38:	85 30       	cpi	r24, 0x05	; 5
 a3a:	41 f0       	breq	.+16     	; 0xa4c <Endpoint_Write_Control_PStream_LE+0xbe>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 a3c:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 a40:	82 ff       	sbrs	r24, 2
 a42:	f6 cf       	rjmp	.-20     	; 0xa30 <Endpoint_Write_Control_PStream_LE+0xa2>
 a44:	80 e0       	ldi	r24, 0x00	; 0
 a46:	08 95       	ret
 a48:	82 e0       	ldi	r24, 0x02	; 2
 a4a:	08 95       	ret
 a4c:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 a4e:	08 95       	ret

00000a50 <Endpoint_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
 a50:	bf 92       	push	r11
 a52:	cf 92       	push	r12
 a54:	df 92       	push	r13
 a56:	ef 92       	push	r14
 a58:	ff 92       	push	r15
 a5a:	0f 93       	push	r16
 a5c:	1f 93       	push	r17
 a5e:	cf 93       	push	r28
 a60:	df 93       	push	r29
 a62:	18 2f       	mov	r17, r24
 a64:	09 2f       	mov	r16, r25
 a66:	7b 01       	movw	r14, r22
 a68:	6a 01       	movw	r12, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
 a6a:	da dd       	rcall	.-1100   	; 0x620 <Endpoint_WaitUntilReady>
 a6c:	b8 2e       	mov	r11, r24
 a6e:	88 23       	and	r24, r24
 a70:	b1 f5       	brne	.+108    	; 0xade <Endpoint_Write_Stream_LE+0x8e>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
 a72:	81 2f       	mov	r24, r17
 a74:	90 2f       	mov	r25, r16
 a76:	9c 01       	movw	r18, r24
 a78:	e9 01       	movw	r28, r18
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
 a7a:	c1 14       	cp	r12, r1
 a7c:	d1 04       	cpc	r13, r1
 a7e:	39 f0       	breq	.+14     	; 0xa8e <Endpoint_Write_Stream_LE+0x3e>
	{
		Length -= *BytesProcessed;
 a80:	f6 01       	movw	r30, r12
 a82:	80 81       	ld	r24, Z
 a84:	91 81       	ldd	r25, Z+1	; 0x01
 a86:	e8 1a       	sub	r14, r24
 a88:	f9 0a       	sbc	r15, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
 a8a:	c8 0f       	add	r28, r24
 a8c:	d9 1f       	adc	r29, r25
 a8e:	00 e0       	ldi	r16, 0x00	; 0
 a90:	10 e0       	ldi	r17, 0x00	; 0
 a92:	22 c0       	rjmp	.+68     	; 0xad8 <Endpoint_Write_Stream_LE+0x88>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 a94:	80 91 e8 00 	lds	r24, 0x00E8
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
 a98:	85 fd       	sbrc	r24, 5
 a9a:	16 c0       	rjmp	.+44     	; 0xac8 <Endpoint_Write_Stream_LE+0x78>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 a9c:	80 91 e8 00 	lds	r24, 0x00E8
 aa0:	8e 77       	andi	r24, 0x7E	; 126
 aa2:	80 93 e8 00 	sts	0x00E8, r24
		{
			TEMPLATE_CLEAR_ENDPOINT();

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
 aa6:	92 d1       	rcall	.+804    	; 0xdcc <USB_USBTask>
			#endif

			if (BytesProcessed != NULL)
 aa8:	c1 14       	cp	r12, r1
 aaa:	d1 04       	cpc	r13, r1
 aac:	49 f0       	breq	.+18     	; 0xac0 <Endpoint_Write_Stream_LE+0x70>
			{
				*BytesProcessed += BytesInTransfer;
 aae:	f6 01       	movw	r30, r12
 ab0:	80 81       	ld	r24, Z
 ab2:	91 81       	ldd	r25, Z+1	; 0x01
 ab4:	80 0f       	add	r24, r16
 ab6:	91 1f       	adc	r25, r17
 ab8:	91 83       	std	Z+1, r25	; 0x01
 aba:	80 83       	st	Z, r24
 abc:	85 e0       	ldi	r24, 0x05	; 5
 abe:	10 c0       	rjmp	.+32     	; 0xae0 <Endpoint_Write_Stream_LE+0x90>
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
 ac0:	af dd       	rcall	.-1186   	; 0x620 <Endpoint_WaitUntilReady>
 ac2:	88 23       	and	r24, r24
 ac4:	49 f0       	breq	.+18     	; 0xad8 <Endpoint_Write_Stream_LE+0x88>
 ac6:	0c c0       	rjmp	.+24     	; 0xae0 <Endpoint_Write_Stream_LE+0x90>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
 ac8:	89 91       	ld	r24, Y+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 aca:	80 93 f1 00 	sts	0x00F1, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
 ace:	08 94       	sec
 ad0:	e1 08       	sbc	r14, r1
 ad2:	f1 08       	sbc	r15, r1
			BytesInTransfer++;
 ad4:	0f 5f       	subi	r16, 0xFF	; 255
 ad6:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
 ad8:	e1 14       	cp	r14, r1
 ada:	f1 04       	cpc	r15, r1
 adc:	d9 f6       	brne	.-74     	; 0xa94 <Endpoint_Write_Stream_LE+0x44>
 ade:	8b 2d       	mov	r24, r11
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
 ae0:	df 91       	pop	r29
 ae2:	cf 91       	pop	r28
 ae4:	1f 91       	pop	r17
 ae6:	0f 91       	pop	r16
 ae8:	ff 90       	pop	r15
 aea:	ef 90       	pop	r14
 aec:	df 90       	pop	r13
 aee:	cf 90       	pop	r12
 af0:	bf 90       	pop	r11
 af2:	08 95       	ret

00000af4 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
 af4:	0f 93       	push	r16
 af6:	1f 93       	push	r17
 af8:	df 93       	push	r29
 afa:	cf 93       	push	r28
 afc:	cd b7       	in	r28, 0x3d	; 61
 afe:	de b7       	in	r29, 0x3e	; 62
 b00:	ac 97       	sbiw	r28, 0x2c	; 44
 b02:	0f b6       	in	r0, 0x3f	; 63
 b04:	f8 94       	cli
 b06:	de bf       	out	0x3e, r29	; 62
 b08:	0f be       	out	0x3f, r0	; 63
 b0a:	cd bf       	out	0x3d, r28	; 61
 b0c:	e0 e1       	ldi	r30, 0x10	; 16
 b0e:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 b10:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
 b14:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
 b16:	21 e0       	ldi	r18, 0x01	; 1
 b18:	e8 31       	cpi	r30, 0x18	; 24
 b1a:	f2 07       	cpc	r31, r18
 b1c:	c9 f7       	brne	.-14     	; 0xb10 <USB_Device_ProcessControlRequest+0x1c>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
 b1e:	2f dc       	rcall	.-1954   	; 0x37e <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 b20:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
 b24:	83 ff       	sbrs	r24, 3
 b26:	38 c1       	rjmp	.+624    	; 0xd98 <USB_Device_ProcessControlRequest+0x2a4>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
 b28:	80 91 10 01 	lds	r24, 0x0110

		switch (USB_ControlRequest.bRequest)
 b2c:	30 91 11 01 	lds	r19, 0x0111
 b30:	35 30       	cpi	r19, 0x05	; 5
 b32:	09 f4       	brne	.+2      	; 0xb36 <USB_Device_ProcessControlRequest+0x42>
 b34:	87 c0       	rjmp	.+270    	; 0xc44 <USB_Device_ProcessControlRequest+0x150>
 b36:	36 30       	cpi	r19, 0x06	; 6
 b38:	40 f4       	brcc	.+16     	; 0xb4a <USB_Device_ProcessControlRequest+0x56>
 b3a:	31 30       	cpi	r19, 0x01	; 1
 b3c:	c9 f1       	breq	.+114    	; 0xbb0 <USB_Device_ProcessControlRequest+0xbc>
 b3e:	31 30       	cpi	r19, 0x01	; 1
 b40:	70 f0       	brcs	.+28     	; 0xb5e <USB_Device_ProcessControlRequest+0x6a>
 b42:	33 30       	cpi	r19, 0x03	; 3
 b44:	09 f0       	breq	.+2      	; 0xb48 <USB_Device_ProcessControlRequest+0x54>
 b46:	28 c1       	rjmp	.+592    	; 0xd98 <USB_Device_ProcessControlRequest+0x2a4>
 b48:	33 c0       	rjmp	.+102    	; 0xbb0 <USB_Device_ProcessControlRequest+0xbc>
 b4a:	38 30       	cpi	r19, 0x08	; 8
 b4c:	09 f4       	brne	.+2      	; 0xb50 <USB_Device_ProcessControlRequest+0x5c>
 b4e:	f6 c0       	rjmp	.+492    	; 0xd3c <USB_Device_ProcessControlRequest+0x248>
 b50:	39 30       	cpi	r19, 0x09	; 9
 b52:	09 f4       	brne	.+2      	; 0xb56 <USB_Device_ProcessControlRequest+0x62>
 b54:	05 c1       	rjmp	.+522    	; 0xd60 <USB_Device_ProcessControlRequest+0x26c>
 b56:	36 30       	cpi	r19, 0x06	; 6
 b58:	09 f0       	breq	.+2      	; 0xb5c <USB_Device_ProcessControlRequest+0x68>
 b5a:	1e c1       	rjmp	.+572    	; 0xd98 <USB_Device_ProcessControlRequest+0x2a4>
 b5c:	97 c0       	rjmp	.+302    	; 0xc8c <USB_Device_ProcessControlRequest+0x198>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 b5e:	80 38       	cpi	r24, 0x80	; 128
 b60:	21 f0       	breq	.+8      	; 0xb6a <USB_Device_ProcessControlRequest+0x76>
 b62:	82 38       	cpi	r24, 0x82	; 130
 b64:	09 f0       	breq	.+2      	; 0xb68 <USB_Device_ProcessControlRequest+0x74>
 b66:	18 c1       	rjmp	.+560    	; 0xd98 <USB_Device_ProcessControlRequest+0x2a4>
 b68:	08 c0       	rjmp	.+16     	; 0xb7a <USB_Device_ProcessControlRequest+0x86>
 b6a:	90 91 0c 01 	lds	r25, 0x010C
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
 b6e:	80 91 0d 01 	lds	r24, 0x010D
 b72:	88 23       	and	r24, r24
 b74:	99 f0       	breq	.+38     	; 0xb9c <USB_Device_ProcessControlRequest+0xa8>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
 b76:	92 60       	ori	r25, 0x02	; 2
 b78:	11 c0       	rjmp	.+34     	; 0xb9c <USB_Device_ProcessControlRequest+0xa8>
			#endif
			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 b7a:	80 91 14 01 	lds	r24, 0x0114
 b7e:	87 70       	andi	r24, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 b80:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 b84:	80 91 eb 00 	lds	r24, 0x00EB

			CurrentStatus = Endpoint_IsStalled();
 b88:	90 e0       	ldi	r25, 0x00	; 0
 b8a:	25 e0       	ldi	r18, 0x05	; 5
 b8c:	96 95       	lsr	r25
 b8e:	87 95       	ror	r24
 b90:	2a 95       	dec	r18
 b92:	e1 f7       	brne	.-8      	; 0xb8c <USB_Device_ProcessControlRequest+0x98>
 b94:	98 2f       	mov	r25, r24
 b96:	91 70       	andi	r25, 0x01	; 1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 b98:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 b9c:	80 91 e8 00 	lds	r24, 0x00E8
 ba0:	87 7f       	andi	r24, 0xF7	; 247
 ba2:	80 93 e8 00 	sts	0x00E8, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
 ba6:	90 93 f1 00 	sts	0x00F1, r25
				UEDATX = (Data >> 8);
 baa:	10 92 f1 00 	sts	0x00F1, r1
 bae:	d1 c0       	rjmp	.+418    	; 0xd52 <USB_Device_ProcessControlRequest+0x25e>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 bb0:	88 23       	and	r24, r24
 bb2:	19 f0       	breq	.+6      	; 0xbba <USB_Device_ProcessControlRequest+0xc6>
 bb4:	82 30       	cpi	r24, 0x02	; 2
 bb6:	09 f0       	breq	.+2      	; 0xbba <USB_Device_ProcessControlRequest+0xc6>
 bb8:	ef c0       	rjmp	.+478    	; 0xd98 <USB_Device_ProcessControlRequest+0x2a4>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
 bba:	90 e0       	ldi	r25, 0x00	; 0
 bbc:	8f 71       	andi	r24, 0x1F	; 31
 bbe:	90 70       	andi	r25, 0x00	; 0
 bc0:	00 97       	sbiw	r24, 0x00	; 0
 bc2:	21 f0       	breq	.+8      	; 0xbcc <USB_Device_ProcessControlRequest+0xd8>
 bc4:	02 97       	sbiw	r24, 0x02	; 2
 bc6:	09 f0       	breq	.+2      	; 0xbca <USB_Device_ProcessControlRequest+0xd6>
 bc8:	e7 c0       	rjmp	.+462    	; 0xd98 <USB_Device_ProcessControlRequest+0x2a4>
 bca:	0c c0       	rjmp	.+24     	; 0xbe4 <USB_Device_ProcessControlRequest+0xf0>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
 bcc:	80 91 12 01 	lds	r24, 0x0112
 bd0:	81 30       	cpi	r24, 0x01	; 1
 bd2:	09 f0       	breq	.+2      	; 0xbd6 <USB_Device_ProcessControlRequest+0xe2>
 bd4:	e1 c0       	rjmp	.+450    	; 0xd98 <USB_Device_ProcessControlRequest+0x2a4>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
 bd6:	10 92 0d 01 	sts	0x010D, r1
 bda:	33 30       	cpi	r19, 0x03	; 3
 bdc:	69 f5       	brne	.+90     	; 0xc38 <USB_Device_ProcessControlRequest+0x144>
 bde:	80 93 0d 01 	sts	0x010D, r24
 be2:	2a c0       	rjmp	.+84     	; 0xc38 <USB_Device_ProcessControlRequest+0x144>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
 be4:	80 91 12 01 	lds	r24, 0x0112
 be8:	88 23       	and	r24, r24
 bea:	31 f5       	brne	.+76     	; 0xc38 <USB_Device_ProcessControlRequest+0x144>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 bec:	20 91 14 01 	lds	r18, 0x0114
 bf0:	27 70       	andi	r18, 0x07	; 7

				if (EndpointIndex == ENDPOINT_CONTROLEP)
 bf2:	09 f4       	brne	.+2      	; 0xbf6 <USB_Device_ProcessControlRequest+0x102>
 bf4:	d1 c0       	rjmp	.+418    	; 0xd98 <USB_Device_ProcessControlRequest+0x2a4>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 bf6:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
 bfa:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
 bfe:	80 ff       	sbrs	r24, 0
 c00:	1b c0       	rjmp	.+54     	; 0xc38 <USB_Device_ProcessControlRequest+0x144>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
 c02:	33 30       	cpi	r19, 0x03	; 3
 c04:	21 f4       	brne	.+8      	; 0xc0e <USB_Device_ProcessControlRequest+0x11a>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 c06:	80 91 eb 00 	lds	r24, 0x00EB
 c0a:	80 62       	ori	r24, 0x20	; 32
 c0c:	13 c0       	rjmp	.+38     	; 0xc34 <USB_Device_ProcessControlRequest+0x140>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
 c0e:	80 91 eb 00 	lds	r24, 0x00EB
 c12:	80 61       	ori	r24, 0x10	; 16
 c14:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
 c18:	81 e0       	ldi	r24, 0x01	; 1
 c1a:	90 e0       	ldi	r25, 0x00	; 0
 c1c:	02 c0       	rjmp	.+4      	; 0xc22 <USB_Device_ProcessControlRequest+0x12e>
 c1e:	88 0f       	add	r24, r24
 c20:	99 1f       	adc	r25, r25
 c22:	2a 95       	dec	r18
 c24:	e2 f7       	brpl	.-8      	; 0xc1e <USB_Device_ProcessControlRequest+0x12a>
 c26:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
 c2a:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
 c2e:	80 91 eb 00 	lds	r24, 0x00EB
 c32:	88 60       	ori	r24, 0x08	; 8
 c34:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 c38:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 c3c:	80 91 e8 00 	lds	r24, 0x00E8
 c40:	87 7f       	andi	r24, 0xF7	; 247
 c42:	8a c0       	rjmp	.+276    	; 0xd58 <USB_Device_ProcessControlRequest+0x264>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 c44:	88 23       	and	r24, r24
 c46:	09 f0       	breq	.+2      	; 0xc4a <USB_Device_ProcessControlRequest+0x156>
 c48:	a7 c0       	rjmp	.+334    	; 0xd98 <USB_Device_ProcessControlRequest+0x2a4>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t    DeviceAddress    = (USB_ControlRequest.wValue & 0x7F);
 c4a:	10 91 12 01 	lds	r17, 0x0112
 c4e:	1f 77       	andi	r17, 0x7F	; 127
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 c50:	0f b7       	in	r16, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 c52:	f8 94       	cli
 c54:	80 91 e8 00 	lds	r24, 0x00E8
 c58:	87 7f       	andi	r24, 0xF7	; 247
 c5a:	80 93 e8 00 	sts	0x00E8, r24
	uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
	GlobalInterruptDisable();
				
	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
 c5e:	bf dc       	rcall	.-1666   	; 0x5de <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 c60:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
 c64:	80 ff       	sbrs	r24, 0
 c66:	fc cf       	rjmp	.-8      	; 0xc60 <USB_Device_ProcessControlRequest+0x16c>
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				uint8_t Temp = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
 c68:	80 91 e3 00 	lds	r24, 0x00E3
 c6c:	80 78       	andi	r24, 0x80	; 128
 c6e:	81 2b       	or	r24, r17

				UDADDR = Temp;
 c70:	80 93 e3 00 	sts	0x00E3, r24
				UDADDR = Temp | (1 << ADDEN);
 c74:	80 68       	ori	r24, 0x80	; 128
 c76:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_SetDeviceAddress(DeviceAddress);
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
 c7a:	11 23       	and	r17, r17
 c7c:	11 f4       	brne	.+4      	; 0xc82 <USB_Device_ProcessControlRequest+0x18e>
 c7e:	82 e0       	ldi	r24, 0x02	; 2
 c80:	01 c0       	rjmp	.+2      	; 0xc84 <USB_Device_ProcessControlRequest+0x190>
 c82:	83 e0       	ldi	r24, 0x03	; 3
 c84:	80 93 0f 01 	sts	0x010F, r24
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
 c88:	0f bf       	out	0x3f, r16	; 63
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;				
				#endif
				
				GCC_MEMORY_BARRIER();
 c8a:	86 c0       	rjmp	.+268    	; 0xd98 <USB_Device_ProcessControlRequest+0x2a4>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 c8c:	80 58       	subi	r24, 0x80	; 128
 c8e:	82 30       	cpi	r24, 0x02	; 2
 c90:	08 f0       	brcs	.+2      	; 0xc94 <USB_Device_ProcessControlRequest+0x1a0>
 c92:	82 c0       	rjmp	.+260    	; 0xd98 <USB_Device_ProcessControlRequest+0x2a4>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
 c94:	80 91 12 01 	lds	r24, 0x0112
 c98:	90 91 13 01 	lds	r25, 0x0113
 c9c:	23 e0       	ldi	r18, 0x03	; 3
 c9e:	8c 3d       	cpi	r24, 0xDC	; 220
 ca0:	92 07       	cpc	r25, r18
 ca2:	09 f0       	breq	.+2      	; 0xca6 <USB_Device_ProcessControlRequest+0x1b2>
 ca4:	33 c0       	rjmp	.+102    	; 0xd0c <USB_Device_ProcessControlRequest+0x218>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
 ca6:	83 e0       	ldi	r24, 0x03	; 3
 ca8:	8c 83       	std	Y+4, r24	; 0x04
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
 caa:	8a e2       	ldi	r24, 0x2A	; 42
 cac:	8b 83       	std	Y+3, r24	; 0x03
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 cae:	7f b7       	in	r23, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 cb0:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
 cb2:	de 01       	movw	r26, r28
 cb4:	15 96       	adiw	r26, 0x05	; 5
 cb6:	6e e0       	ldi	r22, 0x0E	; 14
 cb8:	40 e0       	ldi	r20, 0x00	; 0
 cba:	50 e0       	ldi	r21, 0x00	; 0
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
 cbc:	11 e2       	ldi	r17, 0x21	; 33
 cbe:	e6 2f       	mov	r30, r22
 cc0:	f0 e0       	ldi	r31, 0x00	; 0
 cc2:	10 93 57 00 	sts	0x0057, r17
 cc6:	84 91       	lpm	r24, Z+

					if (SerialCharNum & 0x01)
 cc8:	40 ff       	sbrs	r20, 0
 cca:	03 c0       	rjmp	.+6      	; 0xcd2 <USB_Device_ProcessControlRequest+0x1de>
					{
						SerialByte >>= 4;
 ccc:	82 95       	swap	r24
 cce:	8f 70       	andi	r24, 0x0F	; 15
						SigReadAddress++;
 cd0:	6f 5f       	subi	r22, 0xFF	; 255
					}

					SerialByte &= 0x0F;
 cd2:	8f 70       	andi	r24, 0x0F	; 15
 cd4:	28 2f       	mov	r18, r24
 cd6:	30 e0       	ldi	r19, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
 cd8:	8a 30       	cpi	r24, 0x0A	; 10
 cda:	18 f0       	brcs	.+6      	; 0xce2 <USB_Device_ProcessControlRequest+0x1ee>
 cdc:	c9 01       	movw	r24, r18
 cde:	c7 96       	adiw	r24, 0x37	; 55
 ce0:	02 c0       	rjmp	.+4      	; 0xce6 <USB_Device_ProcessControlRequest+0x1f2>
 ce2:	c9 01       	movw	r24, r18
 ce4:	c0 96       	adiw	r24, 0x30	; 48
 ce6:	8d 93       	st	X+, r24
 ce8:	9d 93       	st	X+, r25
 cea:	4f 5f       	subi	r20, 0xFF	; 255
 cec:	5f 4f       	sbci	r21, 0xFF	; 255
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 cee:	44 31       	cpi	r20, 0x14	; 20
 cf0:	51 05       	cpc	r21, r1
 cf2:	29 f7       	brne	.-54     	; 0xcbe <USB_Device_ProcessControlRequest+0x1ca>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
 cf4:	7f bf       	out	0x3f, r23	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 cf6:	80 91 e8 00 	lds	r24, 0x00E8
 cfa:	87 7f       	andi	r24, 0xF7	; 247
 cfc:	80 93 e8 00 	sts	0x00E8, r24
	
	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
 d00:	ce 01       	movw	r24, r28
 d02:	03 96       	adiw	r24, 0x03	; 3
 d04:	6a e2       	ldi	r22, 0x2A	; 42
 d06:	70 e0       	ldi	r23, 0x00	; 0
 d08:	e4 dd       	rcall	.-1080   	; 0x8d2 <Endpoint_Write_Control_Stream_LE>
 d0a:	12 c0       	rjmp	.+36     	; 0xd30 <USB_Device_ProcessControlRequest+0x23c>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
 d0c:	60 91 14 01 	lds	r22, 0x0114
 d10:	ae 01       	movw	r20, r28
 d12:	4f 5f       	subi	r20, 0xFF	; 255
 d14:	5f 4f       	sbci	r21, 0xFF	; 255
 d16:	e0 db       	rcall	.-2112   	; 0x4d8 <CALLBACK_USB_GetDescriptor>
 d18:	bc 01       	movw	r22, r24
 d1a:	00 97       	sbiw	r24, 0x00	; 0
 d1c:	09 f4       	brne	.+2      	; 0xd20 <USB_Device_ProcessControlRequest+0x22c>
 d1e:	3c c0       	rjmp	.+120    	; 0xd98 <USB_Device_ProcessControlRequest+0x2a4>
 d20:	80 91 e8 00 	lds	r24, 0x00E8
 d24:	87 7f       	andi	r24, 0xF7	; 247
 d26:	80 93 e8 00 	sts	0x00E8, r24
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
 d2a:	89 81       	ldd	r24, Y+1	; 0x01
 d2c:	9a 81       	ldd	r25, Y+2	; 0x02
 d2e:	2f de       	rcall	.-930    	; 0x98e <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 d30:	80 91 e8 00 	lds	r24, 0x00E8
 d34:	8b 77       	andi	r24, 0x7B	; 123
 d36:	80 93 e8 00 	sts	0x00E8, r24
 d3a:	2e c0       	rjmp	.+92     	; 0xd98 <USB_Device_ProcessControlRequest+0x2a4>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
 d3c:	80 38       	cpi	r24, 0x80	; 128
 d3e:	61 f5       	brne	.+88     	; 0xd98 <USB_Device_ProcessControlRequest+0x2a4>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 d40:	80 91 e8 00 	lds	r24, 0x00E8
 d44:	87 7f       	andi	r24, 0xF7	; 247
 d46:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
 d4a:	80 91 0b 01 	lds	r24, 0x010B
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 d4e:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 d52:	80 91 e8 00 	lds	r24, 0x00E8
 d56:	8e 77       	andi	r24, 0x7E	; 126
 d58:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
 d5c:	40 dc       	rcall	.-1920   	; 0x5de <Endpoint_ClearStatusStage>
 d5e:	1c c0       	rjmp	.+56     	; 0xd98 <USB_Device_ProcessControlRequest+0x2a4>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 d60:	88 23       	and	r24, r24
 d62:	d1 f4       	brne	.+52     	; 0xd98 <USB_Device_ProcessControlRequest+0x2a4>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
 d64:	90 91 12 01 	lds	r25, 0x0112
 d68:	92 30       	cpi	r25, 0x02	; 2
 d6a:	b0 f4       	brcc	.+44     	; 0xd98 <USB_Device_ProcessControlRequest+0x2a4>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 d6c:	80 91 e8 00 	lds	r24, 0x00E8
 d70:	87 7f       	andi	r24, 0xF7	; 247
 d72:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
 d76:	90 93 0b 01 	sts	0x010B, r25

	Endpoint_ClearStatusStage();
 d7a:	31 dc       	rcall	.-1950   	; 0x5de <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
 d7c:	80 91 0b 01 	lds	r24, 0x010B
 d80:	88 23       	and	r24, r24
 d82:	31 f4       	brne	.+12     	; 0xd90 <USB_Device_ProcessControlRequest+0x29c>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 d84:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 d88:	87 fd       	sbrc	r24, 7
 d8a:	02 c0       	rjmp	.+4      	; 0xd90 <USB_Device_ProcessControlRequest+0x29c>
 d8c:	81 e0       	ldi	r24, 0x01	; 1
 d8e:	01 c0       	rjmp	.+2      	; 0xd92 <USB_Device_ProcessControlRequest+0x29e>
 d90:	84 e0       	ldi	r24, 0x04	; 4
 d92:	80 93 0f 01 	sts	0x010F, r24

	EVENT_USB_Device_ConfigurationChanged();
 d96:	45 db       	rcall	.-2422   	; 0x422 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 d98:	80 91 e8 00 	lds	r24, 0x00E8

				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
 d9c:	83 ff       	sbrs	r24, 3
 d9e:	0a c0       	rjmp	.+20     	; 0xdb4 <USB_Device_ProcessControlRequest+0x2c0>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 da0:	80 91 eb 00 	lds	r24, 0x00EB
 da4:	80 62       	ori	r24, 0x20	; 32
 da6:	80 93 eb 00 	sts	0x00EB, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 daa:	80 91 e8 00 	lds	r24, 0x00E8
 dae:	87 7f       	andi	r24, 0xF7	; 247
 db0:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_StallTransaction();
		Endpoint_ClearSETUP();
	}
}
 db4:	ac 96       	adiw	r28, 0x2c	; 44
 db6:	0f b6       	in	r0, 0x3f	; 63
 db8:	f8 94       	cli
 dba:	de bf       	out	0x3e, r29	; 62
 dbc:	0f be       	out	0x3f, r0	; 63
 dbe:	cd bf       	out	0x3d, r28	; 61
 dc0:	cf 91       	pop	r28
 dc2:	df 91       	pop	r29
 dc4:	1f 91       	pop	r17
 dc6:	0f 91       	pop	r16
 dc8:	08 95       	ret

00000dca <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
 dca:	08 95       	ret

00000dcc <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
 dcc:	1f 93       	push	r17
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
 dce:	80 91 0f 01 	lds	r24, 0x010F
 dd2:	88 23       	and	r24, r24
 dd4:	61 f0       	breq	.+24     	; 0xdee <USB_USBTask+0x22>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
 dd6:	10 91 e9 00 	lds	r17, 0x00E9
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 dda:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 dde:	80 91 e8 00 	lds	r24, 0x00E8
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
 de2:	83 ff       	sbrs	r24, 3
 de4:	01 c0       	rjmp	.+2      	; 0xde8 <USB_USBTask+0x1c>
		  USB_Device_ProcessControlRequest();
 de6:	86 de       	rcall	.-756    	; 0xaf4 <USB_Device_ProcessControlRequest>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
 de8:	17 70       	andi	r17, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 dea:	10 93 e9 00 	sts	0x00E9, r17
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
 dee:	1f 91       	pop	r17
 df0:	08 95       	ret

00000df2 <memset>:
 df2:	dc 01       	movw	r26, r24
 df4:	01 c0       	rjmp	.+2      	; 0xdf8 <memset+0x6>
 df6:	6d 93       	st	X+, r22
 df8:	41 50       	subi	r20, 0x01	; 1
 dfa:	50 40       	sbci	r21, 0x00	; 0
 dfc:	e0 f7       	brcc	.-8      	; 0xdf6 <memset+0x4>
 dfe:	08 95       	ret

00000e00 <_exit>:
 e00:	f8 94       	cli

00000e02 <__stop_program>:
 e02:	ff cf       	rjmp	.-2      	; 0xe02 <__stop_program>
