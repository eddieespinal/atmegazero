
USBtoSerial.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  00000fd0  00001064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000fd0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000122  00800116  00800116  0000107a  2**0
                  ALLOC
  3 .debug_aranges 00000490  00000000  00000000  0000107a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000c88  00000000  00000000  0000150a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000843c  00000000  00000000  00002192  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000020eb  00000000  00000000  0000a5ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000641e  00000000  00000000  0000c6b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000006e0  00000000  00000000  00012ad8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000345f  00000000  00000000  000131b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00003715  00000000  00000000  00016617  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000598  00000000  00000000  00019d2c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	return true;
#endif
}

void Endpoint_ClearEndpoints(void)
{
   0:	9a c0       	rjmp	.+308    	; 0x136 <__ctors_end>
	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
}
   2:	00 00       	nop

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
   4:	b5 c0       	rjmp	.+362    	; 0x170 <__bad_interrupt>
	}
	else
	{
		return 0;
	}
}
   6:	00 00       	nop
   8:	b3 c0       	rjmp	.+358    	; 0x170 <__bad_interrupt>
   a:	00 00       	nop
   c:	b1 c0       	rjmp	.+354    	; 0x170 <__bad_interrupt>
   e:	00 00       	nop
  10:	af c0       	rjmp	.+350    	; 0x170 <__bad_interrupt>
  12:	00 00       	nop
  14:	ad c0       	rjmp	.+346    	; 0x170 <__bad_interrupt>
  16:	00 00       	nop
  18:	ab c0       	rjmp	.+342    	; 0x170 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	a9 c0       	rjmp	.+338    	; 0x170 <__bad_interrupt>
  1e:	00 00       	nop
  20:	a7 c0       	rjmp	.+334    	; 0x170 <__bad_interrupt>
  22:	00 00       	nop
  24:	a5 c0       	rjmp	.+330    	; 0x170 <__bad_interrupt>
  26:	00 00       	nop
  28:	33 c3       	rjmp	.+1638   	; 0x690 <__vector_10>
  2a:	00 00       	nop
  2c:	f4 c2       	rjmp	.+1512   	; 0x616 <__vector_11>
  2e:	00 00       	nop
  30:	9f c0       	rjmp	.+318    	; 0x170 <__bad_interrupt>
  32:	00 00       	nop
  34:	9d c0       	rjmp	.+314    	; 0x170 <__bad_interrupt>
  36:	00 00       	nop
  38:	9b c0       	rjmp	.+310    	; 0x170 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	99 c0       	rjmp	.+306    	; 0x170 <__bad_interrupt>
  3e:	00 00       	nop
  40:	97 c0       	rjmp	.+302    	; 0x170 <__bad_interrupt>
  42:	00 00       	nop
  44:	95 c0       	rjmp	.+298    	; 0x170 <__bad_interrupt>
  46:	00 00       	nop
  48:	93 c0       	rjmp	.+294    	; 0x170 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	91 c0       	rjmp	.+290    	; 0x170 <__bad_interrupt>
  4e:	00 00       	nop
  50:	8f c0       	rjmp	.+286    	; 0x170 <__bad_interrupt>
  52:	00 00       	nop
  54:	8d c0       	rjmp	.+282    	; 0x170 <__bad_interrupt>
  56:	00 00       	nop
  58:	8b c0       	rjmp	.+278    	; 0x170 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	89 c0       	rjmp	.+274    	; 0x170 <__bad_interrupt>
  5e:	00 00       	nop
  60:	87 c0       	rjmp	.+270    	; 0x170 <__bad_interrupt>
  62:	00 00       	nop
  64:	cc c0       	rjmp	.+408    	; 0x1fe <__vector_25>
  66:	00 00       	nop
  68:	83 c0       	rjmp	.+262    	; 0x170 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	81 c0       	rjmp	.+258    	; 0x170 <__bad_interrupt>
  6e:	00 00       	nop
  70:	7f c0       	rjmp	.+254    	; 0x170 <__bad_interrupt>
  72:	00 00       	nop
  74:	7d c0       	rjmp	.+250    	; 0x170 <__bad_interrupt>
  76:	00 00       	nop
  78:	7b c0       	rjmp	.+246    	; 0x170 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	79 c0       	rjmp	.+242    	; 0x170 <__bad_interrupt>
  7e:	00 00       	nop
  80:	77 c0       	rjmp	.+238    	; 0x170 <__bad_interrupt>
  82:	00 00       	nop
  84:	75 c0       	rjmp	.+234    	; 0x170 <__bad_interrupt>
  86:	00 00       	nop
  88:	73 c0       	rjmp	.+230    	; 0x170 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	71 c0       	rjmp	.+226    	; 0x170 <__bad_interrupt>
  8e:	00 00       	nop
  90:	6f c0       	rjmp	.+222    	; 0x170 <__bad_interrupt>
  92:	00 00       	nop
  94:	6d c0       	rjmp	.+218    	; 0x170 <__bad_interrupt>
  96:	00 00       	nop

00000098 <DeviceDescriptor>:
  98:	12 01 10 01 02 00 00 08 eb 03 4b 20 01 00 01 02     ..........K ....
  a8:	dc 01                                               ..

000000aa <ConfigurationDescriptor>:
  aa:	09 02 3e 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..>.....2.......
  ba:	01 00 05 24 00 10 01 04 24 02 06 05 24 06 00 01     ...$....$...$...
  ca:	07 05 82 03 08 00 ff 09 04 01 00 02 0a 00 00 00     ................
  da:	07 05 04 02 10 00 01 07 05 83 02 10 00 01           ..............

000000e8 <LanguageString>:
  e8:	04 03 09 04                                         ....

000000ec <ManufacturerString>:
  ec:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
  fc:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

00000106 <ProductString>:
 106:	30 03 4c 00 55 00 46 00 41 00 20 00 55 00 53 00     0.L.U.F.A. .U.S.
 116:	42 00 2d 00 52 00 53 00 32 00 33 00 32 00 20 00     B.-.R.S.2.3.2. .
 126:	41 00 64 00 61 00 70 00 74 00 65 00 72 00 00 00     A.d.a.p.t.e.r...

00000136 <__ctors_end>:
 136:	11 24       	eor	r1, r1
 138:	1f be       	out	0x3f, r1	; 63
 13a:	cf ef       	ldi	r28, 0xFF	; 255
 13c:	d0 e2       	ldi	r29, 0x20	; 32
 13e:	de bf       	out	0x3e, r29	; 62
 140:	cd bf       	out	0x3d, r28	; 61

00000142 <__do_copy_data>:
 142:	11 e0       	ldi	r17, 0x01	; 1
 144:	a0 e0       	ldi	r26, 0x00	; 0
 146:	b1 e0       	ldi	r27, 0x01	; 1
 148:	e0 ed       	ldi	r30, 0xD0	; 208
 14a:	ff e0       	ldi	r31, 0x0F	; 15
 14c:	00 e0       	ldi	r16, 0x00	; 0
 14e:	0b bf       	out	0x3b, r16	; 59
 150:	02 c0       	rjmp	.+4      	; 0x156 <__do_copy_data+0x14>
 152:	07 90       	elpm	r0, Z+
 154:	0d 92       	st	X+, r0
 156:	a6 31       	cpi	r26, 0x16	; 22
 158:	b1 07       	cpc	r27, r17
 15a:	d9 f7       	brne	.-10     	; 0x152 <__do_copy_data+0x10>

0000015c <__do_clear_bss>:
 15c:	12 e0       	ldi	r17, 0x02	; 2
 15e:	a6 e1       	ldi	r26, 0x16	; 22
 160:	b1 e0       	ldi	r27, 0x01	; 1
 162:	01 c0       	rjmp	.+2      	; 0x166 <.do_clear_bss_start>

00000164 <.do_clear_bss_loop>:
 164:	1d 92       	st	X+, r1

00000166 <.do_clear_bss_start>:
 166:	a8 33       	cpi	r26, 0x38	; 56
 168:	b1 07       	cpc	r27, r17
 16a:	e1 f7       	brne	.-8      	; 0x164 <.do_clear_bss_loop>
 16c:	e7 d0       	rcall	.+462    	; 0x33c <main>
 16e:	2e c7       	rjmp	.+3676   	; 0xfcc <_exit>

00000170 <__bad_interrupt>:
 170:	47 cf       	rjmp	.-370    	; 0x0 <__vectors>

00000172 <RingBuffer_Insert>:
		 *  \param[in,out] Buffer  Pointer to a ring buffer structure to insert into.
		 *  \param[in]     Data    Data element to insert into the buffer.
		 */
		static inline void RingBuffer_Insert(RingBuffer_t* Buffer, const uint8_t Data) ATTR_NON_NULL_PTR_ARG(1);
		static inline void RingBuffer_Insert(RingBuffer_t* Buffer, const uint8_t Data)
		{
 172:	cf 93       	push	r28
 174:	df 93       	push	r29
			GCC_FORCE_POINTER_ACCESS(Buffer);
 176:	ec 01       	movw	r28, r24

			*Buffer->In = Data;
 178:	e8 81       	ld	r30, Y
 17a:	f9 81       	ldd	r31, Y+1	; 0x01
 17c:	60 83       	st	Z, r22

			if (++Buffer->In == Buffer->End)
 17e:	88 81       	ld	r24, Y
 180:	99 81       	ldd	r25, Y+1	; 0x01
 182:	01 96       	adiw	r24, 0x01	; 1
 184:	99 83       	std	Y+1, r25	; 0x01
 186:	88 83       	st	Y, r24
 188:	2e 81       	ldd	r18, Y+6	; 0x06
 18a:	3f 81       	ldd	r19, Y+7	; 0x07
 18c:	82 17       	cp	r24, r18
 18e:	93 07       	cpc	r25, r19
 190:	21 f4       	brne	.+8      	; 0x19a <RingBuffer_Insert+0x28>
			  Buffer->In = Buffer->Start;
 192:	8c 81       	ldd	r24, Y+4	; 0x04
 194:	9d 81       	ldd	r25, Y+5	; 0x05
 196:	99 83       	std	Y+1, r25	; 0x01
 198:	88 83       	st	Y, r24
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 19a:	2f b7       	in	r18, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 19c:	f8 94       	cli

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();
			
			Buffer->Count++;
 19e:	89 85       	ldd	r24, Y+9	; 0x09
 1a0:	9a 85       	ldd	r25, Y+10	; 0x0a
 1a2:	01 96       	adiw	r24, 0x01	; 1
 1a4:	9a 87       	std	Y+10, r25	; 0x0a
 1a6:	89 87       	std	Y+9, r24	; 0x09
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
 1a8:	2f bf       	out	0x3f, r18	; 63

			SetGlobalInterruptMask(CurrentGlobalInt);
		}
 1aa:	df 91       	pop	r29
 1ac:	cf 91       	pop	r28
 1ae:	08 95       	ret

000001b0 <RingBuffer_Remove>:
		 *
		 *  \return Next data element stored in the buffer.
		 */
		static inline uint8_t RingBuffer_Remove(RingBuffer_t* Buffer) ATTR_NON_NULL_PTR_ARG(1);
		static inline uint8_t RingBuffer_Remove(RingBuffer_t* Buffer)
		{
 1b0:	cf 93       	push	r28
 1b2:	df 93       	push	r29
			GCC_FORCE_POINTER_ACCESS(Buffer);
 1b4:	ec 01       	movw	r28, r24
		
			uint8_t Data = *Buffer->Out;
 1b6:	ea 81       	ldd	r30, Y+2	; 0x02
 1b8:	fb 81       	ldd	r31, Y+3	; 0x03
 1ba:	31 91       	ld	r19, Z+

			if (++Buffer->Out == Buffer->End)
 1bc:	fb 83       	std	Y+3, r31	; 0x03
 1be:	ea 83       	std	Y+2, r30	; 0x02
 1c0:	8e 81       	ldd	r24, Y+6	; 0x06
 1c2:	9f 81       	ldd	r25, Y+7	; 0x07
 1c4:	e8 17       	cp	r30, r24
 1c6:	f9 07       	cpc	r31, r25
 1c8:	21 f4       	brne	.+8      	; 0x1d2 <RingBuffer_Remove+0x22>
			  Buffer->Out = Buffer->Start;
 1ca:	8c 81       	ldd	r24, Y+4	; 0x04
 1cc:	9d 81       	ldd	r25, Y+5	; 0x05
 1ce:	9b 83       	std	Y+3, r25	; 0x03
 1d0:	8a 83       	std	Y+2, r24	; 0x02
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 1d2:	2f b7       	in	r18, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 1d4:	f8 94       	cli

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();
			
			Buffer->Count--;
 1d6:	89 85       	ldd	r24, Y+9	; 0x09
 1d8:	9a 85       	ldd	r25, Y+10	; 0x0a
 1da:	01 97       	sbiw	r24, 0x01	; 1
 1dc:	9a 87       	std	Y+10, r25	; 0x0a
 1de:	89 87       	std	Y+9, r24	; 0x09
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
 1e0:	2f bf       	out	0x3f, r18	; 63

			SetGlobalInterruptMask(CurrentGlobalInt);

			return Data;
		}
 1e2:	83 2f       	mov	r24, r19
 1e4:	df 91       	pop	r29
 1e6:	cf 91       	pop	r28
 1e8:	08 95       	ret

000001ea <EVENT_USB_Device_Connect>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
 1ea:	8b b1       	in	r24, 0x0b	; 11
 1ec:	8f 70       	andi	r24, 0x0F	; 15
 1ee:	80 6a       	ori	r24, 0xA0	; 160
 1f0:	8b b9       	out	0x0b, r24	; 11

/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_Connect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
}
 1f2:	08 95       	ret

000001f4 <EVENT_USB_Device_Disconnect>:
 1f4:	8b b1       	in	r24, 0x0b	; 11
 1f6:	8f 70       	andi	r24, 0x0F	; 15
 1f8:	80 61       	ori	r24, 0x10	; 16
 1fa:	8b b9       	out	0x0b, r24	; 11

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
}
 1fc:	08 95       	ret

000001fe <__vector_25>:

/** ISR to manage the reception of data from the serial port, placing received bytes into a circular buffer
 *  for later transmission to the host.
 */
ISR(USART1_RX_vect, ISR_BLOCK)
{
 1fe:	1f 92       	push	r1
 200:	0f 92       	push	r0
 202:	0f b6       	in	r0, 0x3f	; 63
 204:	0f 92       	push	r0
 206:	0b b6       	in	r0, 0x3b	; 59
 208:	0f 92       	push	r0
 20a:	11 24       	eor	r1, r1
 20c:	2f 93       	push	r18
 20e:	3f 93       	push	r19
 210:	4f 93       	push	r20
 212:	5f 93       	push	r21
 214:	6f 93       	push	r22
 216:	7f 93       	push	r23
 218:	8f 93       	push	r24
 21a:	9f 93       	push	r25
 21c:	af 93       	push	r26
 21e:	bf 93       	push	r27
 220:	ef 93       	push	r30
 222:	ff 93       	push	r31
	uint8_t ReceivedByte = UDR1;
 224:	60 91 ce 00 	lds	r22, 0x00CE

	if (USB_DeviceState == DEVICE_STATE_Configured)
 228:	8e b3       	in	r24, 0x1e	; 30
 22a:	84 30       	cpi	r24, 0x04	; 4
 22c:	19 f4       	brne	.+6      	; 0x234 <__vector_25+0x36>
	  RingBuffer_Insert(&USARTtoUSB_Buffer, ReceivedByte);
 22e:	81 ea       	ldi	r24, 0xA1	; 161
 230:	91 e0       	ldi	r25, 0x01	; 1
 232:	9f df       	rcall	.-194    	; 0x172 <RingBuffer_Insert>
}
 234:	ff 91       	pop	r31
 236:	ef 91       	pop	r30
 238:	bf 91       	pop	r27
 23a:	af 91       	pop	r26
 23c:	9f 91       	pop	r25
 23e:	8f 91       	pop	r24
 240:	7f 91       	pop	r23
 242:	6f 91       	pop	r22
 244:	5f 91       	pop	r21
 246:	4f 91       	pop	r20
 248:	3f 91       	pop	r19
 24a:	2f 91       	pop	r18
 24c:	0f 90       	pop	r0
 24e:	0b be       	out	0x3b, r0	; 59
 250:	0f 90       	pop	r0
 252:	0f be       	out	0x3f, r0	; 63
 254:	0f 90       	pop	r0
 256:	1f 90       	pop	r1
 258:	18 95       	reti

0000025a <EVENT_CDC_Device_LineEncodingChanged>:
/** Event handler for the CDC Class driver Line Encoding Changed event.
 *
 *  \param[in] CDCInterfaceInfo  Pointer to the CDC class interface configuration structure being referenced
 */
void EVENT_CDC_Device_LineEncodingChanged(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 25a:	1f 93       	push	r17
 25c:	fc 01       	movw	r30, r24
	uint8_t ConfigMask = 0;

	switch (CDCInterfaceInfo->State.LineEncoding.ParityType)
 25e:	84 89       	ldd	r24, Z+20	; 0x14
 260:	81 30       	cpi	r24, 0x01	; 1
 262:	19 f0       	breq	.+6      	; 0x26a <EVENT_CDC_Device_LineEncodingChanged+0x10>
 264:	82 30       	cpi	r24, 0x02	; 2
 266:	19 f4       	brne	.+6      	; 0x26e <EVENT_CDC_Device_LineEncodingChanged+0x14>
 268:	04 c0       	rjmp	.+8      	; 0x272 <EVENT_CDC_Device_LineEncodingChanged+0x18>
 26a:	10 e3       	ldi	r17, 0x30	; 48
 26c:	03 c0       	rjmp	.+6      	; 0x274 <EVENT_CDC_Device_LineEncodingChanged+0x1a>
 26e:	10 e0       	ldi	r17, 0x00	; 0
 270:	01 c0       	rjmp	.+2      	; 0x274 <EVENT_CDC_Device_LineEncodingChanged+0x1a>
 272:	10 e2       	ldi	r17, 0x20	; 32
		case CDC_PARITY_Even:
			ConfigMask = (1 << UPM11);
			break;
	}

	if (CDCInterfaceInfo->State.LineEncoding.CharFormat == CDC_LINEENCODING_TwoStopBits)
 274:	83 89       	ldd	r24, Z+19	; 0x13
 276:	82 30       	cpi	r24, 0x02	; 2
 278:	09 f4       	brne	.+2      	; 0x27c <EVENT_CDC_Device_LineEncodingChanged+0x22>
	  ConfigMask |= (1 << USBS1);
 27a:	18 60       	ori	r17, 0x08	; 8

	switch (CDCInterfaceInfo->State.LineEncoding.DataBits)
 27c:	85 89       	ldd	r24, Z+21	; 0x15
 27e:	87 30       	cpi	r24, 0x07	; 7
 280:	31 f0       	breq	.+12     	; 0x28e <EVENT_CDC_Device_LineEncodingChanged+0x34>
 282:	88 30       	cpi	r24, 0x08	; 8
 284:	31 f0       	breq	.+12     	; 0x292 <EVENT_CDC_Device_LineEncodingChanged+0x38>
 286:	86 30       	cpi	r24, 0x06	; 6
 288:	29 f4       	brne	.+10     	; 0x294 <EVENT_CDC_Device_LineEncodingChanged+0x3a>
	{
		case 6:
			ConfigMask |= (1 << UCSZ10);
 28a:	12 60       	ori	r17, 0x02	; 2
 28c:	03 c0       	rjmp	.+6      	; 0x294 <EVENT_CDC_Device_LineEncodingChanged+0x3a>
			break;
		case 7:
			ConfigMask |= (1 << UCSZ11);
 28e:	14 60       	ori	r17, 0x04	; 4
 290:	01 c0       	rjmp	.+2      	; 0x294 <EVENT_CDC_Device_LineEncodingChanged+0x3a>
			break;
		case 8:
			ConfigMask |= ((1 << UCSZ11) | (1 << UCSZ10));
 292:	16 60       	ori	r17, 0x06	; 6
			break;
	}

	/* Must turn off USART before reconfiguring it, otherwise incorrect operation may occur */
	UCSR1B = 0;
 294:	10 92 c9 00 	sts	0x00C9, r1
	UCSR1A = 0;
 298:	10 92 c8 00 	sts	0x00C8, r1
	UCSR1C = 0;
 29c:	10 92 ca 00 	sts	0x00CA, r1

	/* Set the new baud rate before configuring the USART */
	UBRR1  = SERIAL_2X_UBBRVAL(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
 2a0:	27 85       	ldd	r18, Z+15	; 0x0f
 2a2:	30 89       	ldd	r19, Z+16	; 0x10
 2a4:	41 89       	ldd	r20, Z+17	; 0x11
 2a6:	52 89       	ldd	r21, Z+18	; 0x12
 2a8:	ca 01       	movw	r24, r20
 2aa:	b9 01       	movw	r22, r18
 2ac:	96 95       	lsr	r25
 2ae:	87 95       	ror	r24
 2b0:	77 95       	ror	r23
 2b2:	67 95       	ror	r22
 2b4:	60 5c       	subi	r22, 0xC0	; 192
 2b6:	7d 4b       	sbci	r23, 0xBD	; 189
 2b8:	80 4f       	sbci	r24, 0xF0	; 240
 2ba:	9f 4f       	sbci	r25, 0xFF	; 255
 2bc:	65 d6       	rcall	.+3274   	; 0xf88 <__udivmodsi4>
 2be:	21 50       	subi	r18, 0x01	; 1
 2c0:	30 40       	sbci	r19, 0x00	; 0
 2c2:	30 93 cd 00 	sts	0x00CD, r19
 2c6:	20 93 cc 00 	sts	0x00CC, r18

	/* Reconfigure the USART in double speed mode for a wider baud rate range at the expense of accuracy */
	UCSR1C = ConfigMask;
 2ca:	10 93 ca 00 	sts	0x00CA, r17
	UCSR1A = (1 << U2X1);
 2ce:	82 e0       	ldi	r24, 0x02	; 2
 2d0:	80 93 c8 00 	sts	0x00C8, r24
	UCSR1B = ((1 << RXCIE1) | (1 << TXEN1) | (1 << RXEN1));
 2d4:	88 e9       	ldi	r24, 0x98	; 152
 2d6:	80 93 c9 00 	sts	0x00C9, r24
}
 2da:	1f 91       	pop	r17
 2dc:	08 95       	ret

000002de <EVENT_USB_Device_ControlRequest>:
}

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	CDC_Device_ProcessControlRequest(&VirtualSerial_CDC_Interface);
 2de:	80 e0       	ldi	r24, 0x00	; 0
 2e0:	91 e0       	ldi	r25, 0x01	; 1
}
 2e2:	b6 c5       	rjmp	.+2924   	; 0xe50 <CDC_Device_ProcessControlRequest>

000002e4 <EVENT_USB_Device_ConfigurationChanged>:
/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
	bool ConfigSuccess = true;

	ConfigSuccess &= CDC_Device_ConfigureEndpoints(&VirtualSerial_CDC_Interface);
 2e4:	80 e0       	ldi	r24, 0x00	; 0
 2e6:	91 e0       	ldi	r25, 0x01	; 1
 2e8:	63 d5       	rcall	.+2758   	; 0xdb0 <CDC_Device_ConfigureEndpoints>

	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
 2ea:	80 fd       	sbrc	r24, 0
 2ec:	02 c0       	rjmp	.+4      	; 0x2f2 <EVENT_USB_Device_ConfigurationChanged+0xe>
 2ee:	90 e9       	ldi	r25, 0x90	; 144
 2f0:	01 c0       	rjmp	.+2      	; 0x2f4 <EVENT_USB_Device_ConfigurationChanged+0x10>
 2f2:	90 e6       	ldi	r25, 0x60	; 96
 2f4:	8b b1       	in	r24, 0x0b	; 11
 2f6:	8f 70       	andi	r24, 0x0F	; 15
 2f8:	98 2b       	or	r25, r24
 2fa:	9b b9       	out	0x0b, r25	; 11
}
 2fc:	08 95       	ret

000002fe <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
 2fe:	84 b7       	in	r24, 0x34	; 52
 300:	87 7f       	andi	r24, 0xF7	; 247
 302:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
 304:	88 e1       	ldi	r24, 0x18	; 24
 306:	0f b6       	in	r0, 0x3f	; 63
 308:	f8 94       	cli
 30a:	80 93 60 00 	sts	0x0060, r24
 30e:	10 92 60 00 	sts	0x0060, r1
 312:	0f be       	out	0x3f, r0	; 63

	/* Disable clock division */
	clock_prescale_set(clock_div_1);
 314:	80 e0       	ldi	r24, 0x00	; 0
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	20 e8       	ldi	r18, 0x80	; 128
 31a:	0f b6       	in	r0, 0x3f	; 63
 31c:	f8 94       	cli
 31e:	20 93 61 00 	sts	0x0061, r18
 322:	80 93 61 00 	sts	0x0061, r24
 326:	0f be       	out	0x3f, r0	; 63

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
 328:	8a b1       	in	r24, 0x0a	; 10
 32a:	80 6f       	ori	r24, 0xF0	; 240
 32c:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
 32e:	8b b1       	in	r24, 0x0b	; 11
 330:	8f 70       	andi	r24, 0x0F	; 15
 332:	8b b9       	out	0x0b, r24	; 11

	/* Hardware Initialization */
	LEDs_Init();
	USB_Init();
 334:	5a d1       	rcall	.+692    	; 0x5ea <USB_Init>

	/* Start the flush timer so that overflows occur rapidly to push received bytes to the USB interface */
	TCCR0B = (1 << CS02);
 336:	84 e0       	ldi	r24, 0x04	; 4
 338:	85 bd       	out	0x25, r24	; 37
}
 33a:	08 95       	ret

0000033c <main>:

/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
 33c:	cf 93       	push	r28
 33e:	df 93       	push	r29
	SetupHardware();
 340:	de df       	rcall	.-68     	; 0x2fe <SetupHardware>
		 */
		static inline void RingBuffer_InitBuffer(RingBuffer_t* Buffer, uint8_t* const DataPtr, const uint16_t Size)
		                                         ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
		static inline void RingBuffer_InitBuffer(RingBuffer_t* Buffer, uint8_t* const DataPtr, const uint16_t Size)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
 342:	e6 e1       	ldi	r30, 0x16	; 22
 344:	f1 e0       	ldi	r31, 0x01	; 1
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 346:	2f b7       	in	r18, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 348:	f8 94       	cli

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();
	
			Buffer->In     = DataPtr;
 34a:	81 e2       	ldi	r24, 0x21	; 33
 34c:	91 e0       	ldi	r25, 0x01	; 1
 34e:	91 83       	std	Z+1, r25	; 0x01
 350:	80 83       	st	Z, r24
			Buffer->Out    = DataPtr;
 352:	93 83       	std	Z+3, r25	; 0x03
 354:	82 83       	std	Z+2, r24	; 0x02
			Buffer->Start  = &DataPtr[0];
 356:	95 83       	std	Z+5, r25	; 0x05
 358:	84 83       	std	Z+4, r24	; 0x04
			Buffer->End    = &DataPtr[Size];
 35a:	81 ea       	ldi	r24, 0xA1	; 161
 35c:	91 e0       	ldi	r25, 0x01	; 1
 35e:	97 83       	std	Z+7, r25	; 0x07
 360:	86 83       	std	Z+6, r24	; 0x06
			Buffer->Size   = Size;
 362:	80 e8       	ldi	r24, 0x80	; 128
 364:	80 87       	std	Z+8, r24	; 0x08
			Buffer->Count  = 0;
 366:	12 86       	std	Z+10, r1	; 0x0a
 368:	11 86       	std	Z+9, r1	; 0x09
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
 36a:	2f bf       	out	0x3f, r18	; 63
		 */
		static inline void RingBuffer_InitBuffer(RingBuffer_t* Buffer, uint8_t* const DataPtr, const uint16_t Size)
		                                         ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
		static inline void RingBuffer_InitBuffer(RingBuffer_t* Buffer, uint8_t* const DataPtr, const uint16_t Size)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
 36c:	e1 ea       	ldi	r30, 0xA1	; 161
 36e:	f1 e0       	ldi	r31, 0x01	; 1
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 370:	2f b7       	in	r18, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 372:	f8 94       	cli

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();
	
			Buffer->In     = DataPtr;
 374:	8c ea       	ldi	r24, 0xAC	; 172
 376:	91 e0       	ldi	r25, 0x01	; 1
 378:	91 83       	std	Z+1, r25	; 0x01
 37a:	80 83       	st	Z, r24
			Buffer->Out    = DataPtr;
 37c:	93 83       	std	Z+3, r25	; 0x03
 37e:	82 83       	std	Z+2, r24	; 0x02
			Buffer->Start  = &DataPtr[0];
 380:	95 83       	std	Z+5, r25	; 0x05
 382:	84 83       	std	Z+4, r24	; 0x04
			Buffer->End    = &DataPtr[Size];
 384:	8c e2       	ldi	r24, 0x2C	; 44
 386:	92 e0       	ldi	r25, 0x02	; 2
 388:	97 83       	std	Z+7, r25	; 0x07
 38a:	86 83       	std	Z+6, r24	; 0x06
			Buffer->Size   = Size;
 38c:	80 e8       	ldi	r24, 0x80	; 128
 38e:	80 87       	std	Z+8, r24	; 0x08
			Buffer->Count  = 0;
 390:	12 86       	std	Z+10, r1	; 0x0a
 392:	11 86       	std	Z+9, r1	; 0x09
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
 394:	2f bf       	out	0x3f, r18	; 63
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
 396:	8b b1       	in	r24, 0x0b	; 11
 398:	8f 70       	andi	r24, 0x0F	; 15
 39a:	80 61       	ori	r24, 0x10	; 16
 39c:	8b b9       	out	0x0b, r24	; 11

	RingBuffer_InitBuffer(&USBtoUSART_Buffer, USBtoUSART_Buffer_Data, sizeof(USBtoUSART_Buffer_Data));
	RingBuffer_InitBuffer(&USARTtoUSB_Buffer, USARTtoUSB_Buffer_Data, sizeof(USARTtoUSB_Buffer_Data));

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
	sei();
 39e:	78 94       	sei
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 3a0:	8f b7       	in	r24, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 3a2:	f8 94       	cli
			uint16_t Count;

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();
			
			Count = Buffer->Count;
 3a4:	20 91 1f 01 	lds	r18, 0x011F
 3a8:	30 91 20 01 	lds	r19, 0x0120
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
 3ac:	8f bf       	out	0x3f, r24	; 63

	for (;;)
	{
		/* Only try to read in bytes from the CDC interface if the transmit buffer is not full */
		if (!(RingBuffer_IsFull(&USBtoUSART_Buffer)))
 3ae:	80 91 1e 01 	lds	r24, 0x011E
 3b2:	90 e0       	ldi	r25, 0x00	; 0
 3b4:	28 17       	cp	r18, r24
 3b6:	39 07       	cpc	r19, r25
 3b8:	49 f0       	breq	.+18     	; 0x3cc <main+0x90>
		{
			int16_t ReceivedByte = CDC_Device_ReceiveByte(&VirtualSerial_CDC_Interface);
 3ba:	80 e0       	ldi	r24, 0x00	; 0
 3bc:	91 e0       	ldi	r25, 0x01	; 1
 3be:	67 d4       	rcall	.+2254   	; 0xc8e <CDC_Device_ReceiveByte>
 3c0:	bc 01       	movw	r22, r24

			/* Read bytes from the USB OUT endpoint into the USART transmit buffer */
			if (!(ReceivedByte < 0))
 3c2:	97 fd       	sbrc	r25, 7
 3c4:	03 c0       	rjmp	.+6      	; 0x3cc <main+0x90>
			  RingBuffer_Insert(&USBtoUSART_Buffer, ReceivedByte);
 3c6:	86 e1       	ldi	r24, 0x16	; 22
 3c8:	91 e0       	ldi	r25, 0x01	; 1
 3ca:	d3 de       	rcall	.-602    	; 0x172 <RingBuffer_Insert>
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 3cc:	8f b7       	in	r24, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 3ce:	f8 94       	cli
 3d0:	c0 91 aa 01 	lds	r28, 0x01AA
 3d4:	d0 91 ab 01 	lds	r29, 0x01AB
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
 3d8:	8f bf       	out	0x3f, r24	; 63
		}
		
		/* Check if the UART receive buffer flush timer has expired or the buffer is nearly full */
		uint16_t BufferCount = RingBuffer_GetCount(&USARTtoUSB_Buffer);
		if ((TIFR0 & (1 << TOV0)) || (BufferCount > (uint8_t)(sizeof(USARTtoUSB_Buffer_Data) * .75)))
 3da:	a8 99       	sbic	0x15, 0	; 21
 3dc:	03 c0       	rjmp	.+6      	; 0x3e4 <main+0xa8>
 3de:	c1 36       	cpi	r28, 0x61	; 97
 3e0:	d1 05       	cpc	r29, r1
 3e2:	90 f0       	brcs	.+36     	; 0x408 <main+0xcc>
		{
			/* Clear flush timer expiry flag */
			TIFR0 |= (1 << TOV0);
 3e4:	a8 9a       	sbi	0x15, 0	; 21
 3e6:	0e c0       	rjmp	.+28     	; 0x404 <main+0xc8>

			/* Read bytes from the USART receive buffer into the USB IN endpoint */
			while (BufferCount--)
			{
				/* Try to send the next byte of data to the host, abort if there is an error without dequeuing */
				if (CDC_Device_SendByte(&VirtualSerial_CDC_Interface,
 3e8:	e0 91 a3 01 	lds	r30, 0x01A3
 3ec:	f0 91 a4 01 	lds	r31, 0x01A4
 3f0:	80 e0       	ldi	r24, 0x00	; 0
 3f2:	91 e0       	ldi	r25, 0x01	; 1
 3f4:	60 81       	ld	r22, Z
 3f6:	b8 d4       	rcall	.+2416   	; 0xd68 <CDC_Device_SendByte>
 3f8:	21 97       	sbiw	r28, 0x01	; 1
 3fa:	88 23       	and	r24, r24
 3fc:	29 f4       	brne	.+10     	; 0x408 <main+0xcc>
				{
					break;
				}

				/* Dequeue the already sent byte from the buffer now we have confirmed that no transmission error occurred */
				RingBuffer_Remove(&USARTtoUSB_Buffer);
 3fe:	81 ea       	ldi	r24, 0xA1	; 161
 400:	91 e0       	ldi	r25, 0x01	; 1
 402:	d6 de       	rcall	.-596    	; 0x1b0 <RingBuffer_Remove>
		{
			/* Clear flush timer expiry flag */
			TIFR0 |= (1 << TOV0);

			/* Read bytes from the USART receive buffer into the USB IN endpoint */
			while (BufferCount--)
 404:	20 97       	sbiw	r28, 0x00	; 0
 406:	81 f7       	brne	.-32     	; 0x3e8 <main+0xac>
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 408:	2f b7       	in	r18, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 40a:	f8 94       	cli
 40c:	80 91 1f 01 	lds	r24, 0x011F
 410:	90 91 20 01 	lds	r25, 0x0120
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
 414:	2f bf       	out	0x3f, r18	; 63
				RingBuffer_Remove(&USARTtoUSB_Buffer);
			}
		}

		/* Load the next byte from the USART transmit buffer into the USART */
		if (!(RingBuffer_IsEmpty(&USBtoUSART_Buffer)))
 416:	89 2b       	or	r24, r25
 418:	51 f0       	breq	.+20     	; 0x42e <main+0xf2>
		  Serial_SendByte(RingBuffer_Remove(&USBtoUSART_Buffer));
 41a:	86 e1       	ldi	r24, 0x16	; 22
 41c:	91 e0       	ldi	r25, 0x01	; 1
 41e:	c8 de       	rcall	.-624    	; 0x1b0 <RingBuffer_Remove>
 420:	98 2f       	mov	r25, r24
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
 422:	80 91 c8 00 	lds	r24, 0x00C8
 426:	85 ff       	sbrs	r24, 5
 428:	fc cf       	rjmp	.-8      	; 0x422 <main+0xe6>
				UDR1 = DataByte;
 42a:	90 93 ce 00 	sts	0x00CE, r25

		CDC_Device_USBTask(&VirtualSerial_CDC_Interface);
 42e:	80 e0       	ldi	r24, 0x00	; 0
 430:	91 e0       	ldi	r25, 0x01	; 1
 432:	8b d4       	rcall	.+2326   	; 0xd4a <CDC_Device_USBTask>
		USB_USBTask();
 434:	1a d4       	rcall	.+2100   	; 0xc6a <USB_USBTask>
 436:	b4 cf       	rjmp	.-152    	; 0x3a0 <main+0x64>

00000438 <CALLBACK_USB_GetDescriptor>:
 *  USB host.
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
 438:	da 01       	movw	r26, r20
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
 43a:	92 30       	cpi	r25, 0x02	; 2
 43c:	49 f0       	breq	.+18     	; 0x450 <CALLBACK_USB_GetDescriptor+0x18>
 43e:	93 30       	cpi	r25, 0x03	; 3
 440:	61 f0       	breq	.+24     	; 0x45a <CALLBACK_USB_GetDescriptor+0x22>
 442:	91 30       	cpi	r25, 0x01	; 1
 444:	f9 f4       	brne	.+62     	; 0x484 <CALLBACK_USB_GetDescriptor+0x4c>
 446:	e8 e9       	ldi	r30, 0x98	; 152
 448:	f0 e0       	ldi	r31, 0x00	; 0
 44a:	22 e1       	ldi	r18, 0x12	; 18
 44c:	30 e0       	ldi	r19, 0x00	; 0
 44e:	1e c0       	rjmp	.+60     	; 0x48c <CALLBACK_USB_GetDescriptor+0x54>
 450:	ea ea       	ldi	r30, 0xAA	; 170
 452:	f0 e0       	ldi	r31, 0x00	; 0
 454:	2e e3       	ldi	r18, 0x3E	; 62
 456:	30 e0       	ldi	r19, 0x00	; 0
 458:	19 c0       	rjmp	.+50     	; 0x48c <CALLBACK_USB_GetDescriptor+0x54>
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
 45a:	81 30       	cpi	r24, 0x01	; 1
 45c:	49 f0       	breq	.+18     	; 0x470 <CALLBACK_USB_GetDescriptor+0x38>
 45e:	81 30       	cpi	r24, 0x01	; 1
 460:	18 f0       	brcs	.+6      	; 0x468 <CALLBACK_USB_GetDescriptor+0x30>
 462:	82 30       	cpi	r24, 0x02	; 2
 464:	79 f4       	brne	.+30     	; 0x484 <CALLBACK_USB_GetDescriptor+0x4c>
 466:	08 c0       	rjmp	.+16     	; 0x478 <CALLBACK_USB_GetDescriptor+0x40>
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
 468:	e8 ee       	ldi	r30, 0xE8	; 232
 46a:	f0 e0       	ldi	r31, 0x00	; 0
 46c:	84 91       	lpm	r24, Z+
 46e:	07 c0       	rjmp	.+14     	; 0x47e <CALLBACK_USB_GetDescriptor+0x46>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
 470:	ec ee       	ldi	r30, 0xEC	; 236
 472:	f0 e0       	ldi	r31, 0x00	; 0
 474:	84 91       	lpm	r24, Z+
 476:	03 c0       	rjmp	.+6      	; 0x47e <CALLBACK_USB_GetDescriptor+0x46>
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
 478:	e6 e0       	ldi	r30, 0x06	; 6
 47a:	f1 e0       	ldi	r31, 0x01	; 1
 47c:	84 91       	lpm	r24, Z+
 47e:	28 2f       	mov	r18, r24
 480:	30 e0       	ldi	r19, 0x00	; 0
 482:	04 c0       	rjmp	.+8      	; 0x48c <CALLBACK_USB_GetDescriptor+0x54>
 484:	e0 e0       	ldi	r30, 0x00	; 0
 486:	f0 e0       	ldi	r31, 0x00	; 0
 488:	20 e0       	ldi	r18, 0x00	; 0
 48a:	30 e0       	ldi	r19, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
 48c:	ed 93       	st	X+, r30
 48e:	fc 93       	st	X, r31
	return Size;
}
 490:	c9 01       	movw	r24, r18
 492:	08 95       	ret

00000494 <Endpoint_ConfigureEndpoint_Prv>:
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 494:	80 93 e9 00 	sts	0x00E9, r24
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
 498:	80 91 eb 00 	lds	r24, 0x00EB
 49c:	81 60       	ori	r24, 0x01	; 1
 49e:	80 93 eb 00 	sts	0x00EB, r24
{
#if defined(CONTROL_ONLY_DEVICE) || defined(ORDERED_EP_CONFIG)
	Endpoint_SelectEndpoint(Number);
	Endpoint_EnableEndpoint();

	UECFG1X = 0;
 4a2:	10 92 ed 00 	sts	0x00ED, r1
	UECFG0X = UECFG0XData;
 4a6:	60 93 ec 00 	sts	0x00EC, r22
	UECFG1X = UECFG1XData;
 4aa:	40 93 ed 00 	sts	0x00ED, r20
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
 4ae:	80 91 ee 00 	lds	r24, 0x00EE
	}
	
	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
 4b2:	88 1f       	adc	r24, r24
 4b4:	88 27       	eor	r24, r24
 4b6:	88 1f       	adc	r24, r24
 4b8:	08 95       	ret

000004ba <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
 4ba:	80 91 30 02 	lds	r24, 0x0230
 4be:	88 23       	and	r24, r24
 4c0:	8c f4       	brge	.+34     	; 0x4e4 <Endpoint_ClearStatusStage+0x2a>
 4c2:	03 c0       	rjmp	.+6      	; 0x4ca <Endpoint_ClearStatusStage+0x10>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 4c4:	8e b3       	in	r24, 0x1e	; 30
 4c6:	88 23       	and	r24, r24
 4c8:	b1 f0       	breq	.+44     	; 0x4f6 <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 4ca:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
 4ce:	82 ff       	sbrs	r24, 2
 4d0:	f9 cf       	rjmp	.-14     	; 0x4c4 <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 4d2:	80 91 e8 00 	lds	r24, 0x00E8
 4d6:	8b 77       	andi	r24, 0x7B	; 123
 4d8:	80 93 e8 00 	sts	0x00E8, r24
 4dc:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 4de:	8e b3       	in	r24, 0x1e	; 30
 4e0:	88 23       	and	r24, r24
 4e2:	49 f0       	breq	.+18     	; 0x4f6 <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 4e4:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
 4e8:	80 ff       	sbrs	r24, 0
 4ea:	f9 cf       	rjmp	.-14     	; 0x4de <Endpoint_ClearStatusStage+0x24>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 4ec:	80 91 e8 00 	lds	r24, 0x00E8
 4f0:	8e 77       	andi	r24, 0x7E	; 126
 4f2:	80 93 e8 00 	sts	0x00E8, r24
 4f6:	08 95       	ret

000004f8 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
 4f8:	40 91 e4 00 	lds	r20, 0x00E4
 4fc:	50 91 e5 00 	lds	r21, 0x00E5
 500:	24 e6       	ldi	r18, 0x64	; 100
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 502:	80 91 ec 00 	lds	r24, 0x00EC
 506:	80 ff       	sbrs	r24, 0
 508:	23 c0       	rjmp	.+70     	; 0x550 <Endpoint_WaitUntilReady+0x58>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 50a:	80 91 e8 00 	lds	r24, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
 50e:	80 fd       	sbrc	r24, 0
 510:	1d c0       	rjmp	.+58     	; 0x54c <Endpoint_WaitUntilReady+0x54>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}
		
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 512:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 514:	88 23       	and	r24, r24
 516:	11 f4       	brne	.+4      	; 0x51c <Endpoint_WaitUntilReady+0x24>
 518:	82 e0       	ldi	r24, 0x02	; 2
 51a:	08 95       	ret
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 51c:	85 30       	cpi	r24, 0x05	; 5
 51e:	11 f4       	brne	.+4      	; 0x524 <Endpoint_WaitUntilReady+0x2c>
 520:	83 e0       	ldi	r24, 0x03	; 3
 522:	08 95       	ret
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 524:	80 91 eb 00 	lds	r24, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
 528:	85 ff       	sbrs	r24, 5
 52a:	02 c0       	rjmp	.+4      	; 0x530 <Endpoint_WaitUntilReady+0x38>
 52c:	81 e0       	ldi	r24, 0x01	; 1
 52e:	08 95       	ret
 530:	80 91 e4 00 	lds	r24, 0x00E4
 534:	90 91 e5 00 	lds	r25, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
 538:	84 17       	cp	r24, r20
 53a:	95 07       	cpc	r25, r21
 53c:	11 f3       	breq	.-60     	; 0x502 <Endpoint_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
 53e:	22 23       	and	r18, r18
 540:	11 f4       	brne	.+4      	; 0x546 <Endpoint_WaitUntilReady+0x4e>
 542:	84 e0       	ldi	r24, 0x04	; 4
 544:	08 95       	ret
 546:	21 50       	subi	r18, 0x01	; 1
 548:	ac 01       	movw	r20, r24
 54a:	db cf       	rjmp	.-74     	; 0x502 <Endpoint_WaitUntilReady+0xa>
 54c:	80 e0       	ldi	r24, 0x00	; 0
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
 54e:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 550:	80 91 e8 00 	lds	r24, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
 554:	82 ff       	sbrs	r24, 2
 556:	dd cf       	rjmp	.-70     	; 0x512 <Endpoint_WaitUntilReady+0x1a>
 558:	f9 cf       	rjmp	.-14     	; 0x54c <Endpoint_WaitUntilReady+0x54>

0000055a <USB_ResetInterface>:

void USB_ResetInterface(void)
{
 55a:	ef 92       	push	r14
 55c:	ff 92       	push	r15
 55e:	0f 93       	push	r16
 560:	1f 93       	push	r17
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
 562:	4c d0       	rcall	.+152    	; 0x5fc <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
 564:	53 d0       	rcall	.+166    	; 0x60c <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
 566:	08 ed       	ldi	r16, 0xD8	; 216
 568:	10 e0       	ldi	r17, 0x00	; 0
 56a:	f8 01       	movw	r30, r16
 56c:	80 81       	ld	r24, Z
 56e:	8f 77       	andi	r24, 0x7F	; 127
 570:	80 83       	st	Z, r24
				USBCON |=  (1 << USBE);
 572:	80 81       	ld	r24, Z
 574:	80 68       	ori	r24, 0x80	; 128
 576:	80 83       	st	Z, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
 578:	80 81       	ld	r24, Z
 57a:	8f 7d       	andi	r24, 0xDF	; 223
 57c:	80 83       	st	Z, r24

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
 57e:	e7 ed       	ldi	r30, 0xD7	; 215
 580:	f0 e0       	ldi	r31, 0x00	; 0
 582:	80 81       	ld	r24, Z
 584:	80 68       	ori	r24, 0x80	; 128
 586:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
 588:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
 58a:	1e ba       	out	0x1e, r1	; 30
	USB_Device_ConfigurationNumber  = 0;
 58c:	10 92 2c 02 	sts	0x022C, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
 590:	10 92 2e 02 	sts	0x022E, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
 594:	10 92 2d 02 	sts	0x022D, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
 598:	80 ee       	ldi	r24, 0xE0	; 224
 59a:	e8 2e       	mov	r14, r24
 59c:	f1 2c       	mov	r15, r1
 59e:	f7 01       	movw	r30, r14
 5a0:	80 81       	ld	r24, Z
 5a2:	8b 7f       	andi	r24, 0xFB	; 251
 5a4:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
 5a6:	f8 01       	movw	r30, r16
 5a8:	80 81       	ld	r24, Z
 5aa:	81 60       	ori	r24, 0x01	; 1
 5ac:	80 83       	st	Z, r24
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
 5ae:	80 e0       	ldi	r24, 0x00	; 0
 5b0:	60 e0       	ldi	r22, 0x00	; 0
 5b2:	42 e0       	ldi	r20, 0x02	; 2
 5b4:	6f df       	rcall	.-290    	; 0x494 <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 5b6:	e1 ee       	ldi	r30, 0xE1	; 225
 5b8:	f0 e0       	ldi	r31, 0x00	; 0
 5ba:	80 81       	ld	r24, Z
 5bc:	8e 7f       	andi	r24, 0xFE	; 254
 5be:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 5c0:	e2 ee       	ldi	r30, 0xE2	; 226
 5c2:	f0 e0       	ldi	r31, 0x00	; 0
 5c4:	80 81       	ld	r24, Z
 5c6:	81 60       	ori	r24, 0x01	; 1
 5c8:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
 5ca:	80 81       	ld	r24, Z
 5cc:	88 60       	ori	r24, 0x08	; 8
 5ce:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
 5d0:	f7 01       	movw	r30, r14
 5d2:	80 81       	ld	r24, Z
 5d4:	8e 7f       	andi	r24, 0xFE	; 254
 5d6:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
 5d8:	f8 01       	movw	r30, r16
 5da:	80 81       	ld	r24, Z
 5dc:	80 61       	ori	r24, 0x10	; 16
 5de:	80 83       	st	Z, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
 5e0:	1f 91       	pop	r17
 5e2:	0f 91       	pop	r16
 5e4:	ff 90       	pop	r15
 5e6:	ef 90       	pop	r14
 5e8:	08 95       	ret

000005ea <USB_Init>:

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
 5ea:	e7 ed       	ldi	r30, 0xD7	; 215
 5ec:	f0 e0       	ldi	r31, 0x00	; 0
 5ee:	80 81       	ld	r24, Z
 5f0:	81 60       	ori	r24, 0x01	; 1
 5f2:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
 5f4:	81 e0       	ldi	r24, 0x01	; 1
 5f6:	80 93 2f 02 	sts	0x022F, r24

	USB_ResetInterface();
}
 5fa:	af cf       	rjmp	.-162    	; 0x55a <USB_ResetInterface>

000005fc <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
 5fc:	e8 ed       	ldi	r30, 0xD8	; 216
 5fe:	f0 e0       	ldi	r31, 0x00	; 0
 600:	80 81       	ld	r24, Z
 602:	8c 7f       	andi	r24, 0xFC	; 252
 604:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
 606:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
 60a:	08 95       	ret

0000060c <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
 60c:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
 610:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
 614:	08 95       	ret

00000616 <__vector_11>:
	#endif
}

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
 616:	1f 92       	push	r1
 618:	0f 92       	push	r0
 61a:	0f b6       	in	r0, 0x3f	; 63
 61c:	0f 92       	push	r0
 61e:	0b b6       	in	r0, 0x3b	; 59
 620:	0f 92       	push	r0
 622:	11 24       	eor	r1, r1
 624:	1f 93       	push	r17
 626:	2f 93       	push	r18
 628:	3f 93       	push	r19
 62a:	4f 93       	push	r20
 62c:	5f 93       	push	r21
 62e:	6f 93       	push	r22
 630:	7f 93       	push	r23
 632:	8f 93       	push	r24
 634:	9f 93       	push	r25
 636:	af 93       	push	r26
 638:	bf 93       	push	r27
 63a:	ef 93       	push	r30
 63c:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
 63e:	e9 ee       	ldi	r30, 0xE9	; 233
 640:	f0 e0       	ldi	r31, 0x00	; 0
 642:	10 81       	ld	r17, Z
 644:	17 70       	andi	r17, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 646:	10 82       	st	Z, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
 648:	e0 ef       	ldi	r30, 0xF0	; 240
 64a:	f0 e0       	ldi	r31, 0x00	; 0
 64c:	80 81       	ld	r24, Z
 64e:	87 7f       	andi	r24, 0xF7	; 247
 650:	80 83       	st	Z, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
 652:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
 654:	a0 d1       	rcall	.+832    	; 0x996 <USB_Device_ProcessControlRequest>
 656:	a9 ee       	ldi	r26, 0xE9	; 233
 658:	b0 e0       	ldi	r27, 0x00	; 0
 65a:	1c 92       	st	X, r1
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
 65c:	e0 ef       	ldi	r30, 0xF0	; 240
 65e:	f0 e0       	ldi	r31, 0x00	; 0
 660:	80 81       	ld	r24, Z
 662:	88 60       	ori	r24, 0x08	; 8
 664:	80 83       	st	Z, r24
 666:	1c 93       	st	X, r17

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
 668:	ff 91       	pop	r31
 66a:	ef 91       	pop	r30
 66c:	bf 91       	pop	r27
 66e:	af 91       	pop	r26
 670:	9f 91       	pop	r25
 672:	8f 91       	pop	r24
 674:	7f 91       	pop	r23
 676:	6f 91       	pop	r22
 678:	5f 91       	pop	r21
 67a:	4f 91       	pop	r20
 67c:	3f 91       	pop	r19
 67e:	2f 91       	pop	r18
 680:	1f 91       	pop	r17
 682:	0f 90       	pop	r0
 684:	0b be       	out	0x3b, r0	; 59
 686:	0f 90       	pop	r0
 688:	0f be       	out	0x3f, r0	; 63
 68a:	0f 90       	pop	r0
 68c:	1f 90       	pop	r1
 68e:	18 95       	reti

00000690 <__vector_10>:
	UDINT  = 0;
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
 690:	1f 92       	push	r1
 692:	0f 92       	push	r0
 694:	0f b6       	in	r0, 0x3f	; 63
 696:	0f 92       	push	r0
 698:	0b b6       	in	r0, 0x3b	; 59
 69a:	0f 92       	push	r0
 69c:	11 24       	eor	r1, r1
 69e:	2f 93       	push	r18
 6a0:	3f 93       	push	r19
 6a2:	4f 93       	push	r20
 6a4:	5f 93       	push	r21
 6a6:	6f 93       	push	r22
 6a8:	7f 93       	push	r23
 6aa:	8f 93       	push	r24
 6ac:	9f 93       	push	r25
 6ae:	af 93       	push	r26
 6b0:	bf 93       	push	r27
 6b2:	ef 93       	push	r30
 6b4:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
 6b6:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
 6ba:	82 ff       	sbrs	r24, 2
 6bc:	0a c0       	rjmp	.+20     	; 0x6d2 <__vector_10+0x42>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
 6be:	80 91 e2 00 	lds	r24, 0x00E2
 6c2:	82 ff       	sbrs	r24, 2
 6c4:	06 c0       	rjmp	.+12     	; 0x6d2 <__vector_10+0x42>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
 6c6:	80 91 e1 00 	lds	r24, 0x00E1
 6ca:	8b 7f       	andi	r24, 0xFB	; 251
 6cc:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
 6d0:	cb d2       	rcall	.+1430   	; 0xc68 <USB_Event_Stub>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
 6d2:	80 91 da 00 	lds	r24, 0x00DA
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
 6d6:	80 ff       	sbrs	r24, 0
 6d8:	1b c0       	rjmp	.+54     	; 0x710 <__vector_10+0x80>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
 6da:	80 91 d8 00 	lds	r24, 0x00D8
 6de:	80 ff       	sbrs	r24, 0
 6e0:	17 c0       	rjmp	.+46     	; 0x710 <__vector_10+0x80>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
 6e2:	80 91 da 00 	lds	r24, 0x00DA
 6e6:	8e 7f       	andi	r24, 0xFE	; 254
 6e8:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
 6ec:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
 6f0:	80 ff       	sbrs	r24, 0
 6f2:	0b c0       	rjmp	.+22     	; 0x70a <__vector_10+0x7a>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 6f4:	8c e0       	ldi	r24, 0x0C	; 12
 6f6:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 6f8:	8e e0       	ldi	r24, 0x0E	; 14
 6fa:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
 6fc:	09 b4       	in	r0, 0x29	; 41
 6fe:	00 fe       	sbrs	r0, 0
 700:	fd cf       	rjmp	.-6      	; 0x6fc <__vector_10+0x6c>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
 702:	81 e0       	ldi	r24, 0x01	; 1
 704:	8e bb       	out	0x1e, r24	; 30
			EVENT_USB_Device_Connect();
 706:	71 dd       	rcall	.-1310   	; 0x1ea <EVENT_USB_Device_Connect>
 708:	03 c0       	rjmp	.+6      	; 0x710 <__vector_10+0x80>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
 70a:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
 70c:	1e ba       	out	0x1e, r1	; 30
			EVENT_USB_Device_Disconnect();
 70e:	72 dd       	rcall	.-1308   	; 0x1f4 <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
 710:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
 714:	80 ff       	sbrs	r24, 0
 716:	17 c0       	rjmp	.+46     	; 0x746 <__vector_10+0xb6>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
 718:	80 91 e2 00 	lds	r24, 0x00E2
 71c:	80 ff       	sbrs	r24, 0
 71e:	13 c0       	rjmp	.+38     	; 0x746 <__vector_10+0xb6>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 720:	80 91 e2 00 	lds	r24, 0x00E2
 724:	8e 7f       	andi	r24, 0xFE	; 254
 726:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 72a:	80 91 e2 00 	lds	r24, 0x00E2
 72e:	80 61       	ori	r24, 0x10	; 16
 730:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON  |=  (1 << FRZCLK);
 734:	80 91 d8 00 	lds	r24, 0x00D8
 738:	80 62       	ori	r24, 0x20	; 32
 73a:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
 73e:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
 740:	85 e0       	ldi	r24, 0x05	; 5
 742:	8e bb       	out	0x1e, r24	; 30
		EVENT_USB_Device_Suspend();
 744:	91 d2       	rcall	.+1314   	; 0xc68 <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
 746:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
 74a:	84 ff       	sbrs	r24, 4
 74c:	2c c0       	rjmp	.+88     	; 0x7a6 <__vector_10+0x116>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
 74e:	80 91 e2 00 	lds	r24, 0x00E2
 752:	84 ff       	sbrs	r24, 4
 754:	28 c0       	rjmp	.+80     	; 0x7a6 <__vector_10+0x116>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 756:	8c e0       	ldi	r24, 0x0C	; 12
 758:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 75a:	8e e0       	ldi	r24, 0x0E	; 14
 75c:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 75e:	09 b4       	in	r0, 0x29	; 41
 760:	00 fe       	sbrs	r0, 0
 762:	fd cf       	rjmp	.-6      	; 0x75e <__vector_10+0xce>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
 764:	80 91 d8 00 	lds	r24, 0x00D8
 768:	8f 7d       	andi	r24, 0xDF	; 223
 76a:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
 76e:	80 91 e1 00 	lds	r24, 0x00E1
 772:	8f 7e       	andi	r24, 0xEF	; 239
 774:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
 778:	80 91 e2 00 	lds	r24, 0x00E2
 77c:	8f 7e       	andi	r24, 0xEF	; 239
 77e:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 782:	80 91 e2 00 	lds	r24, 0x00E2
 786:	81 60       	ori	r24, 0x01	; 1
 788:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
 78c:	80 91 2c 02 	lds	r24, 0x022C
 790:	88 23       	and	r24, r24
 792:	31 f4       	brne	.+12     	; 0x7a0 <__vector_10+0x110>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 794:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 798:	87 fd       	sbrc	r24, 7
 79a:	02 c0       	rjmp	.+4      	; 0x7a0 <__vector_10+0x110>
 79c:	81 e0       	ldi	r24, 0x01	; 1
 79e:	01 c0       	rjmp	.+2      	; 0x7a2 <__vector_10+0x112>
 7a0:	84 e0       	ldi	r24, 0x04	; 4
 7a2:	8e bb       	out	0x1e, r24	; 30

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
 7a4:	61 d2       	rcall	.+1218   	; 0xc68 <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
 7a6:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
 7aa:	83 ff       	sbrs	r24, 3
 7ac:	26 c0       	rjmp	.+76     	; 0x7fa <__vector_10+0x16a>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
 7ae:	80 91 e2 00 	lds	r24, 0x00E2
 7b2:	83 ff       	sbrs	r24, 3
 7b4:	22 c0       	rjmp	.+68     	; 0x7fa <__vector_10+0x16a>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
 7b6:	80 91 e1 00 	lds	r24, 0x00E1
 7ba:	87 7f       	andi	r24, 0xF7	; 247
 7bc:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
 7c0:	82 e0       	ldi	r24, 0x02	; 2
 7c2:	8e bb       	out	0x1e, r24	; 30
		USB_Device_ConfigurationNumber = 0;
 7c4:	10 92 2c 02 	sts	0x022C, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 7c8:	80 91 e1 00 	lds	r24, 0x00E1
 7cc:	8e 7f       	andi	r24, 0xFE	; 254
 7ce:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 7d2:	80 91 e2 00 	lds	r24, 0x00E2
 7d6:	8e 7f       	andi	r24, 0xFE	; 254
 7d8:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 7dc:	80 91 e2 00 	lds	r24, 0x00E2
 7e0:	80 61       	ori	r24, 0x10	; 16
 7e2:	80 93 e2 00 	sts	0x00E2, r24
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
 7e6:	80 e0       	ldi	r24, 0x00	; 0
 7e8:	60 e0       	ldi	r22, 0x00	; 0
 7ea:	42 e0       	ldi	r20, 0x02	; 2
 7ec:	53 de       	rcall	.-858    	; 0x494 <Endpoint_ConfigureEndpoint_Prv>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
 7ee:	80 91 f0 00 	lds	r24, 0x00F0
 7f2:	88 60       	ori	r24, 0x08	; 8
 7f4:	80 93 f0 00 	sts	0x00F0, r24

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
 7f8:	37 d2       	rcall	.+1134   	; 0xc68 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
 7fa:	ff 91       	pop	r31
 7fc:	ef 91       	pop	r30
 7fe:	bf 91       	pop	r27
 800:	af 91       	pop	r26
 802:	9f 91       	pop	r25
 804:	8f 91       	pop	r24
 806:	7f 91       	pop	r23
 808:	6f 91       	pop	r22
 80a:	5f 91       	pop	r21
 80c:	4f 91       	pop	r20
 80e:	3f 91       	pop	r19
 810:	2f 91       	pop	r18
 812:	0f 90       	pop	r0
 814:	0b be       	out	0x3b, r0	; 59
 816:	0f 90       	pop	r0
 818:	0f be       	out	0x3f, r0	; 63
 81a:	0f 90       	pop	r0
 81c:	1f 90       	pop	r1
 81e:	18 95       	reti

00000820 <Endpoint_Write_Control_Stream_LE>:
 820:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 822:	40 91 36 02 	lds	r20, 0x0236
 826:	50 91 37 02 	lds	r21, 0x0237
 82a:	46 17       	cp	r20, r22
 82c:	57 07       	cpc	r21, r23
 82e:	18 f4       	brcc	.+6      	; 0x836 <Endpoint_Write_Control_Stream_LE+0x16>
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
 830:	f9 01       	movw	r30, r18
 832:	90 e0       	ldi	r25, 0x00	; 0
 834:	3c c0       	rjmp	.+120    	; 0x8ae <Endpoint_Write_Control_Stream_LE+0x8e>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 836:	61 15       	cp	r22, r1
 838:	71 05       	cpc	r23, r1
 83a:	11 f0       	breq	.+4      	; 0x840 <Endpoint_Write_Control_Stream_LE+0x20>
 83c:	ab 01       	movw	r20, r22
 83e:	f8 cf       	rjmp	.-16     	; 0x830 <Endpoint_Write_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 840:	80 91 e8 00 	lds	r24, 0x00E8
 844:	8e 77       	andi	r24, 0x7E	; 126
 846:	80 93 e8 00 	sts	0x00E8, r24
 84a:	40 e0       	ldi	r20, 0x00	; 0
 84c:	50 e0       	ldi	r21, 0x00	; 0
 84e:	f0 cf       	rjmp	.-32     	; 0x830 <Endpoint_Write_Control_Stream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 850:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 852:	88 23       	and	r24, r24
 854:	e9 f1       	breq	.+122    	; 0x8d0 <Endpoint_Write_Control_Stream_LE+0xb0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 856:	85 30       	cpi	r24, 0x05	; 5
 858:	e9 f1       	breq	.+122    	; 0x8d4 <Endpoint_Write_Control_Stream_LE+0xb4>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 85a:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 85e:	83 ff       	sbrs	r24, 3
 860:	02 c0       	rjmp	.+4      	; 0x866 <Endpoint_Write_Control_Stream_LE+0x46>
 862:	81 e0       	ldi	r24, 0x01	; 1
 864:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 866:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
 86a:	82 fd       	sbrc	r24, 2
 86c:	2b c0       	rjmp	.+86     	; 0x8c4 <Endpoint_Write_Control_Stream_LE+0xa4>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 86e:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
 872:	80 ff       	sbrs	r24, 0
 874:	1c c0       	rjmp	.+56     	; 0x8ae <Endpoint_Write_Control_Stream_LE+0x8e>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
 876:	20 91 f2 00 	lds	r18, 0x00F2
 87a:	30 91 f3 00 	lds	r19, 0x00F3
 87e:	07 c0       	rjmp	.+14     	; 0x88e <Endpoint_Write_Control_Stream_LE+0x6e>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 880:	81 91       	ld	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 882:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
 886:	41 50       	subi	r20, 0x01	; 1
 888:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
 88a:	2f 5f       	subi	r18, 0xFF	; 255
 88c:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 88e:	41 15       	cp	r20, r1
 890:	51 05       	cpc	r21, r1
 892:	19 f0       	breq	.+6      	; 0x89a <Endpoint_Write_Control_Stream_LE+0x7a>
 894:	28 30       	cpi	r18, 0x08	; 8
 896:	31 05       	cpc	r19, r1
 898:	98 f3       	brcs	.-26     	; 0x880 <Endpoint_Write_Control_Stream_LE+0x60>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
 89a:	90 e0       	ldi	r25, 0x00	; 0
 89c:	28 30       	cpi	r18, 0x08	; 8
 89e:	31 05       	cpc	r19, r1
 8a0:	09 f4       	brne	.+2      	; 0x8a4 <Endpoint_Write_Control_Stream_LE+0x84>
 8a2:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 8a4:	80 91 e8 00 	lds	r24, 0x00E8
 8a8:	8e 77       	andi	r24, 0x7E	; 126
 8aa:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 8ae:	41 15       	cp	r20, r1
 8b0:	51 05       	cpc	r21, r1
 8b2:	71 f6       	brne	.-100    	; 0x850 <Endpoint_Write_Control_Stream_LE+0x30>
 8b4:	99 23       	and	r25, r25
 8b6:	61 f6       	brne	.-104    	; 0x850 <Endpoint_Write_Control_Stream_LE+0x30>
 8b8:	05 c0       	rjmp	.+10     	; 0x8c4 <Endpoint_Write_Control_Stream_LE+0xa4>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 8ba:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 8bc:	88 23       	and	r24, r24
 8be:	41 f0       	breq	.+16     	; 0x8d0 <Endpoint_Write_Control_Stream_LE+0xb0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 8c0:	85 30       	cpi	r24, 0x05	; 5
 8c2:	41 f0       	breq	.+16     	; 0x8d4 <Endpoint_Write_Control_Stream_LE+0xb4>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 8c4:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 8c8:	82 ff       	sbrs	r24, 2
 8ca:	f7 cf       	rjmp	.-18     	; 0x8ba <Endpoint_Write_Control_Stream_LE+0x9a>
 8cc:	80 e0       	ldi	r24, 0x00	; 0
 8ce:	08 95       	ret
 8d0:	82 e0       	ldi	r24, 0x02	; 2
 8d2:	08 95       	ret
 8d4:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 8d6:	08 95       	ret

000008d8 <Endpoint_Write_Control_PStream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
 8d8:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 8da:	40 91 36 02 	lds	r20, 0x0236
 8de:	50 91 37 02 	lds	r21, 0x0237
 8e2:	46 17       	cp	r20, r22
 8e4:	57 07       	cpc	r21, r23
 8e6:	18 f4       	brcc	.+6      	; 0x8ee <Endpoint_Write_Control_PStream_LE+0x16>
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
 8e8:	f9 01       	movw	r30, r18
 8ea:	90 e0       	ldi	r25, 0x00	; 0
 8ec:	3f c0       	rjmp	.+126    	; 0x96c <Endpoint_Write_Control_PStream_LE+0x94>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 8ee:	61 15       	cp	r22, r1
 8f0:	71 05       	cpc	r23, r1
 8f2:	11 f0       	breq	.+4      	; 0x8f8 <Endpoint_Write_Control_PStream_LE+0x20>
 8f4:	ab 01       	movw	r20, r22
 8f6:	f8 cf       	rjmp	.-16     	; 0x8e8 <Endpoint_Write_Control_PStream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 8f8:	80 91 e8 00 	lds	r24, 0x00E8
 8fc:	8e 77       	andi	r24, 0x7E	; 126
 8fe:	80 93 e8 00 	sts	0x00E8, r24
 902:	40 e0       	ldi	r20, 0x00	; 0
 904:	50 e0       	ldi	r21, 0x00	; 0
 906:	f0 cf       	rjmp	.-32     	; 0x8e8 <Endpoint_Write_Control_PStream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 908:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 90a:	88 23       	and	r24, r24
 90c:	09 f4       	brne	.+2      	; 0x910 <Endpoint_Write_Control_PStream_LE+0x38>
 90e:	3f c0       	rjmp	.+126    	; 0x98e <Endpoint_Write_Control_PStream_LE+0xb6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 910:	85 30       	cpi	r24, 0x05	; 5
 912:	09 f4       	brne	.+2      	; 0x916 <Endpoint_Write_Control_PStream_LE+0x3e>
 914:	3e c0       	rjmp	.+124    	; 0x992 <Endpoint_Write_Control_PStream_LE+0xba>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 916:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 91a:	83 ff       	sbrs	r24, 3
 91c:	02 c0       	rjmp	.+4      	; 0x922 <Endpoint_Write_Control_PStream_LE+0x4a>
 91e:	81 e0       	ldi	r24, 0x01	; 1
 920:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 922:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
 926:	82 fd       	sbrc	r24, 2
 928:	2c c0       	rjmp	.+88     	; 0x982 <Endpoint_Write_Control_PStream_LE+0xaa>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 92a:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
 92e:	80 ff       	sbrs	r24, 0
 930:	1d c0       	rjmp	.+58     	; 0x96c <Endpoint_Write_Control_PStream_LE+0x94>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
 932:	20 91 f2 00 	lds	r18, 0x00F2
 936:	30 91 f3 00 	lds	r19, 0x00F3
 93a:	08 c0       	rjmp	.+16     	; 0x94c <Endpoint_Write_Control_PStream_LE+0x74>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 93c:	84 91       	lpm	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 93e:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
 942:	31 96       	adiw	r30, 0x01	; 1
				Length--;
 944:	41 50       	subi	r20, 0x01	; 1
 946:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
 948:	2f 5f       	subi	r18, 0xFF	; 255
 94a:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 94c:	41 15       	cp	r20, r1
 94e:	51 05       	cpc	r21, r1
 950:	19 f0       	breq	.+6      	; 0x958 <Endpoint_Write_Control_PStream_LE+0x80>
 952:	28 30       	cpi	r18, 0x08	; 8
 954:	31 05       	cpc	r19, r1
 956:	90 f3       	brcs	.-28     	; 0x93c <Endpoint_Write_Control_PStream_LE+0x64>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
 958:	90 e0       	ldi	r25, 0x00	; 0
 95a:	28 30       	cpi	r18, 0x08	; 8
 95c:	31 05       	cpc	r19, r1
 95e:	09 f4       	brne	.+2      	; 0x962 <Endpoint_Write_Control_PStream_LE+0x8a>
 960:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 962:	80 91 e8 00 	lds	r24, 0x00E8
 966:	8e 77       	andi	r24, 0x7E	; 126
 968:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 96c:	41 15       	cp	r20, r1
 96e:	51 05       	cpc	r21, r1
 970:	59 f6       	brne	.-106    	; 0x908 <Endpoint_Write_Control_PStream_LE+0x30>
 972:	99 23       	and	r25, r25
 974:	49 f6       	brne	.-110    	; 0x908 <Endpoint_Write_Control_PStream_LE+0x30>
 976:	05 c0       	rjmp	.+10     	; 0x982 <Endpoint_Write_Control_PStream_LE+0xaa>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 978:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 97a:	88 23       	and	r24, r24
 97c:	41 f0       	breq	.+16     	; 0x98e <Endpoint_Write_Control_PStream_LE+0xb6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 97e:	85 30       	cpi	r24, 0x05	; 5
 980:	41 f0       	breq	.+16     	; 0x992 <Endpoint_Write_Control_PStream_LE+0xba>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 982:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 986:	82 ff       	sbrs	r24, 2
 988:	f7 cf       	rjmp	.-18     	; 0x978 <Endpoint_Write_Control_PStream_LE+0xa0>
 98a:	80 e0       	ldi	r24, 0x00	; 0
 98c:	08 95       	ret
 98e:	82 e0       	ldi	r24, 0x02	; 2
 990:	08 95       	ret
 992:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 994:	08 95       	ret

00000996 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
 996:	0f 93       	push	r16
 998:	1f 93       	push	r17
 99a:	df 93       	push	r29
 99c:	cf 93       	push	r28
 99e:	cd b7       	in	r28, 0x3d	; 61
 9a0:	de b7       	in	r29, 0x3e	; 62
 9a2:	ac 97       	sbiw	r28, 0x2c	; 44
 9a4:	0f b6       	in	r0, 0x3f	; 63
 9a6:	f8 94       	cli
 9a8:	de bf       	out	0x3e, r29	; 62
 9aa:	0f be       	out	0x3f, r0	; 63
 9ac:	cd bf       	out	0x3d, r28	; 61
 9ae:	e0 e3       	ldi	r30, 0x30	; 48
 9b0:	f2 e0       	ldi	r31, 0x02	; 2
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 9b2:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
 9b6:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
 9b8:	22 e0       	ldi	r18, 0x02	; 2
 9ba:	e8 33       	cpi	r30, 0x38	; 56
 9bc:	f2 07       	cpc	r31, r18
 9be:	c9 f7       	brne	.-14     	; 0x9b2 <USB_Device_ProcessControlRequest+0x1c>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
 9c0:	8e dc       	rcall	.-1764   	; 0x2de <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 9c2:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
 9c6:	83 ff       	sbrs	r24, 3
 9c8:	36 c1       	rjmp	.+620    	; 0xc36 <USB_Device_ProcessControlRequest+0x2a0>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
 9ca:	80 91 30 02 	lds	r24, 0x0230

		switch (USB_ControlRequest.bRequest)
 9ce:	30 91 31 02 	lds	r19, 0x0231
 9d2:	35 30       	cpi	r19, 0x05	; 5
 9d4:	09 f4       	brne	.+2      	; 0x9d8 <USB_Device_ProcessControlRequest+0x42>
 9d6:	87 c0       	rjmp	.+270    	; 0xae6 <USB_Device_ProcessControlRequest+0x150>
 9d8:	36 30       	cpi	r19, 0x06	; 6
 9da:	40 f4       	brcc	.+16     	; 0x9ec <USB_Device_ProcessControlRequest+0x56>
 9dc:	31 30       	cpi	r19, 0x01	; 1
 9de:	c9 f1       	breq	.+114    	; 0xa52 <USB_Device_ProcessControlRequest+0xbc>
 9e0:	31 30       	cpi	r19, 0x01	; 1
 9e2:	70 f0       	brcs	.+28     	; 0xa00 <USB_Device_ProcessControlRequest+0x6a>
 9e4:	33 30       	cpi	r19, 0x03	; 3
 9e6:	09 f0       	breq	.+2      	; 0x9ea <USB_Device_ProcessControlRequest+0x54>
 9e8:	26 c1       	rjmp	.+588    	; 0xc36 <USB_Device_ProcessControlRequest+0x2a0>
 9ea:	33 c0       	rjmp	.+102    	; 0xa52 <USB_Device_ProcessControlRequest+0xbc>
 9ec:	38 30       	cpi	r19, 0x08	; 8
 9ee:	09 f4       	brne	.+2      	; 0x9f2 <USB_Device_ProcessControlRequest+0x5c>
 9f0:	f5 c0       	rjmp	.+490    	; 0xbdc <USB_Device_ProcessControlRequest+0x246>
 9f2:	39 30       	cpi	r19, 0x09	; 9
 9f4:	09 f4       	brne	.+2      	; 0x9f8 <USB_Device_ProcessControlRequest+0x62>
 9f6:	04 c1       	rjmp	.+520    	; 0xc00 <USB_Device_ProcessControlRequest+0x26a>
 9f8:	36 30       	cpi	r19, 0x06	; 6
 9fa:	09 f0       	breq	.+2      	; 0x9fe <USB_Device_ProcessControlRequest+0x68>
 9fc:	1c c1       	rjmp	.+568    	; 0xc36 <USB_Device_ProcessControlRequest+0x2a0>
 9fe:	96 c0       	rjmp	.+300    	; 0xb2c <USB_Device_ProcessControlRequest+0x196>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 a00:	80 38       	cpi	r24, 0x80	; 128
 a02:	21 f0       	breq	.+8      	; 0xa0c <USB_Device_ProcessControlRequest+0x76>
 a04:	82 38       	cpi	r24, 0x82	; 130
 a06:	09 f0       	breq	.+2      	; 0xa0a <USB_Device_ProcessControlRequest+0x74>
 a08:	16 c1       	rjmp	.+556    	; 0xc36 <USB_Device_ProcessControlRequest+0x2a0>
 a0a:	08 c0       	rjmp	.+16     	; 0xa1c <USB_Device_ProcessControlRequest+0x86>
 a0c:	90 91 2d 02 	lds	r25, 0x022D
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
 a10:	80 91 2e 02 	lds	r24, 0x022E
 a14:	88 23       	and	r24, r24
 a16:	99 f0       	breq	.+38     	; 0xa3e <USB_Device_ProcessControlRequest+0xa8>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
 a18:	92 60       	ori	r25, 0x02	; 2
 a1a:	11 c0       	rjmp	.+34     	; 0xa3e <USB_Device_ProcessControlRequest+0xa8>
			#endif
			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 a1c:	80 91 34 02 	lds	r24, 0x0234
 a20:	87 70       	andi	r24, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 a22:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 a26:	80 91 eb 00 	lds	r24, 0x00EB

			CurrentStatus = Endpoint_IsStalled();
 a2a:	90 e0       	ldi	r25, 0x00	; 0
 a2c:	25 e0       	ldi	r18, 0x05	; 5
 a2e:	96 95       	lsr	r25
 a30:	87 95       	ror	r24
 a32:	2a 95       	dec	r18
 a34:	e1 f7       	brne	.-8      	; 0xa2e <USB_Device_ProcessControlRequest+0x98>
 a36:	98 2f       	mov	r25, r24
 a38:	91 70       	andi	r25, 0x01	; 1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 a3a:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 a3e:	80 91 e8 00 	lds	r24, 0x00E8
 a42:	87 7f       	andi	r24, 0xF7	; 247
 a44:	80 93 e8 00 	sts	0x00E8, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
 a48:	90 93 f1 00 	sts	0x00F1, r25
				UEDATX = (Data >> 8);
 a4c:	10 92 f1 00 	sts	0x00F1, r1
 a50:	d0 c0       	rjmp	.+416    	; 0xbf2 <USB_Device_ProcessControlRequest+0x25c>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 a52:	88 23       	and	r24, r24
 a54:	19 f0       	breq	.+6      	; 0xa5c <USB_Device_ProcessControlRequest+0xc6>
 a56:	82 30       	cpi	r24, 0x02	; 2
 a58:	09 f0       	breq	.+2      	; 0xa5c <USB_Device_ProcessControlRequest+0xc6>
 a5a:	ed c0       	rjmp	.+474    	; 0xc36 <USB_Device_ProcessControlRequest+0x2a0>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
 a5c:	90 e0       	ldi	r25, 0x00	; 0
 a5e:	8f 71       	andi	r24, 0x1F	; 31
 a60:	90 70       	andi	r25, 0x00	; 0
 a62:	00 97       	sbiw	r24, 0x00	; 0
 a64:	21 f0       	breq	.+8      	; 0xa6e <USB_Device_ProcessControlRequest+0xd8>
 a66:	02 97       	sbiw	r24, 0x02	; 2
 a68:	09 f0       	breq	.+2      	; 0xa6c <USB_Device_ProcessControlRequest+0xd6>
 a6a:	e5 c0       	rjmp	.+458    	; 0xc36 <USB_Device_ProcessControlRequest+0x2a0>
 a6c:	0c c0       	rjmp	.+24     	; 0xa86 <USB_Device_ProcessControlRequest+0xf0>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
 a6e:	80 91 32 02 	lds	r24, 0x0232
 a72:	81 30       	cpi	r24, 0x01	; 1
 a74:	09 f0       	breq	.+2      	; 0xa78 <USB_Device_ProcessControlRequest+0xe2>
 a76:	df c0       	rjmp	.+446    	; 0xc36 <USB_Device_ProcessControlRequest+0x2a0>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
 a78:	10 92 2e 02 	sts	0x022E, r1
 a7c:	33 30       	cpi	r19, 0x03	; 3
 a7e:	69 f5       	brne	.+90     	; 0xada <USB_Device_ProcessControlRequest+0x144>
 a80:	80 93 2e 02 	sts	0x022E, r24
 a84:	2a c0       	rjmp	.+84     	; 0xada <USB_Device_ProcessControlRequest+0x144>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
 a86:	80 91 32 02 	lds	r24, 0x0232
 a8a:	88 23       	and	r24, r24
 a8c:	31 f5       	brne	.+76     	; 0xada <USB_Device_ProcessControlRequest+0x144>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 a8e:	20 91 34 02 	lds	r18, 0x0234
 a92:	27 70       	andi	r18, 0x07	; 7

				if (EndpointIndex == ENDPOINT_CONTROLEP)
 a94:	09 f4       	brne	.+2      	; 0xa98 <USB_Device_ProcessControlRequest+0x102>
 a96:	cf c0       	rjmp	.+414    	; 0xc36 <USB_Device_ProcessControlRequest+0x2a0>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 a98:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
 a9c:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
 aa0:	80 ff       	sbrs	r24, 0
 aa2:	1b c0       	rjmp	.+54     	; 0xada <USB_Device_ProcessControlRequest+0x144>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
 aa4:	33 30       	cpi	r19, 0x03	; 3
 aa6:	21 f4       	brne	.+8      	; 0xab0 <USB_Device_ProcessControlRequest+0x11a>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 aa8:	80 91 eb 00 	lds	r24, 0x00EB
 aac:	80 62       	ori	r24, 0x20	; 32
 aae:	13 c0       	rjmp	.+38     	; 0xad6 <USB_Device_ProcessControlRequest+0x140>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
 ab0:	80 91 eb 00 	lds	r24, 0x00EB
 ab4:	80 61       	ori	r24, 0x10	; 16
 ab6:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
 aba:	81 e0       	ldi	r24, 0x01	; 1
 abc:	90 e0       	ldi	r25, 0x00	; 0
 abe:	02 c0       	rjmp	.+4      	; 0xac4 <USB_Device_ProcessControlRequest+0x12e>
 ac0:	88 0f       	add	r24, r24
 ac2:	99 1f       	adc	r25, r25
 ac4:	2a 95       	dec	r18
 ac6:	e2 f7       	brpl	.-8      	; 0xac0 <USB_Device_ProcessControlRequest+0x12a>
 ac8:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
 acc:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
 ad0:	80 91 eb 00 	lds	r24, 0x00EB
 ad4:	88 60       	ori	r24, 0x08	; 8
 ad6:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 ada:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 ade:	80 91 e8 00 	lds	r24, 0x00E8
 ae2:	87 7f       	andi	r24, 0xF7	; 247
 ae4:	89 c0       	rjmp	.+274    	; 0xbf8 <USB_Device_ProcessControlRequest+0x262>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 ae6:	88 23       	and	r24, r24
 ae8:	09 f0       	breq	.+2      	; 0xaec <USB_Device_ProcessControlRequest+0x156>
 aea:	a5 c0       	rjmp	.+330    	; 0xc36 <USB_Device_ProcessControlRequest+0x2a0>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t    DeviceAddress    = (USB_ControlRequest.wValue & 0x7F);
 aec:	10 91 32 02 	lds	r17, 0x0232
 af0:	1f 77       	andi	r17, 0x7F	; 127
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 af2:	0f b7       	in	r16, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 af4:	f8 94       	cli
 af6:	80 91 e8 00 	lds	r24, 0x00E8
 afa:	87 7f       	andi	r24, 0xF7	; 247
 afc:	80 93 e8 00 	sts	0x00E8, r24
	uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
	GlobalInterruptDisable();
				
	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
 b00:	dc dc       	rcall	.-1608   	; 0x4ba <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 b02:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
 b06:	80 ff       	sbrs	r24, 0
 b08:	fc cf       	rjmp	.-8      	; 0xb02 <USB_Device_ProcessControlRequest+0x16c>
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				uint8_t Temp = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
 b0a:	80 91 e3 00 	lds	r24, 0x00E3
 b0e:	80 78       	andi	r24, 0x80	; 128
 b10:	81 2b       	or	r24, r17

				UDADDR = Temp;
 b12:	80 93 e3 00 	sts	0x00E3, r24
				UDADDR = Temp | (1 << ADDEN);
 b16:	80 68       	ori	r24, 0x80	; 128
 b18:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_SetDeviceAddress(DeviceAddress);
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
 b1c:	11 23       	and	r17, r17
 b1e:	11 f4       	brne	.+4      	; 0xb24 <USB_Device_ProcessControlRequest+0x18e>
 b20:	82 e0       	ldi	r24, 0x02	; 2
 b22:	01 c0       	rjmp	.+2      	; 0xb26 <USB_Device_ProcessControlRequest+0x190>
 b24:	83 e0       	ldi	r24, 0x03	; 3
 b26:	8e bb       	out	0x1e, r24	; 30
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
 b28:	0f bf       	out	0x3f, r16	; 63
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;				
				#endif
				
				GCC_MEMORY_BARRIER();
 b2a:	85 c0       	rjmp	.+266    	; 0xc36 <USB_Device_ProcessControlRequest+0x2a0>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 b2c:	80 58       	subi	r24, 0x80	; 128
 b2e:	82 30       	cpi	r24, 0x02	; 2
 b30:	08 f0       	brcs	.+2      	; 0xb34 <USB_Device_ProcessControlRequest+0x19e>
 b32:	81 c0       	rjmp	.+258    	; 0xc36 <USB_Device_ProcessControlRequest+0x2a0>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
 b34:	80 91 32 02 	lds	r24, 0x0232
 b38:	90 91 33 02 	lds	r25, 0x0233
 b3c:	23 e0       	ldi	r18, 0x03	; 3
 b3e:	8c 3d       	cpi	r24, 0xDC	; 220
 b40:	92 07       	cpc	r25, r18
 b42:	09 f0       	breq	.+2      	; 0xb46 <USB_Device_ProcessControlRequest+0x1b0>
 b44:	33 c0       	rjmp	.+102    	; 0xbac <USB_Device_ProcessControlRequest+0x216>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
 b46:	83 e0       	ldi	r24, 0x03	; 3
 b48:	8c 83       	std	Y+4, r24	; 0x04
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
 b4a:	8a e2       	ldi	r24, 0x2A	; 42
 b4c:	8b 83       	std	Y+3, r24	; 0x03
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 b4e:	7f b7       	in	r23, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 b50:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
 b52:	de 01       	movw	r26, r28
 b54:	15 96       	adiw	r26, 0x05	; 5
 b56:	6e e0       	ldi	r22, 0x0E	; 14
 b58:	40 e0       	ldi	r20, 0x00	; 0
 b5a:	50 e0       	ldi	r21, 0x00	; 0
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
 b5c:	11 e2       	ldi	r17, 0x21	; 33
 b5e:	e6 2f       	mov	r30, r22
 b60:	f0 e0       	ldi	r31, 0x00	; 0
 b62:	10 93 57 00 	sts	0x0057, r17
 b66:	84 91       	lpm	r24, Z+

					if (SerialCharNum & 0x01)
 b68:	40 ff       	sbrs	r20, 0
 b6a:	03 c0       	rjmp	.+6      	; 0xb72 <USB_Device_ProcessControlRequest+0x1dc>
					{
						SerialByte >>= 4;
 b6c:	82 95       	swap	r24
 b6e:	8f 70       	andi	r24, 0x0F	; 15
						SigReadAddress++;
 b70:	6f 5f       	subi	r22, 0xFF	; 255
					}

					SerialByte &= 0x0F;
 b72:	8f 70       	andi	r24, 0x0F	; 15
 b74:	28 2f       	mov	r18, r24
 b76:	30 e0       	ldi	r19, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
 b78:	8a 30       	cpi	r24, 0x0A	; 10
 b7a:	18 f0       	brcs	.+6      	; 0xb82 <USB_Device_ProcessControlRequest+0x1ec>
 b7c:	c9 01       	movw	r24, r18
 b7e:	c7 96       	adiw	r24, 0x37	; 55
 b80:	02 c0       	rjmp	.+4      	; 0xb86 <USB_Device_ProcessControlRequest+0x1f0>
 b82:	c9 01       	movw	r24, r18
 b84:	c0 96       	adiw	r24, 0x30	; 48
 b86:	8d 93       	st	X+, r24
 b88:	9d 93       	st	X+, r25
 b8a:	4f 5f       	subi	r20, 0xFF	; 255
 b8c:	5f 4f       	sbci	r21, 0xFF	; 255
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();
				
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 b8e:	44 31       	cpi	r20, 0x14	; 20
 b90:	51 05       	cpc	r21, r1
 b92:	29 f7       	brne	.-54     	; 0xb5e <USB_Device_ProcessControlRequest+0x1c8>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
 b94:	7f bf       	out	0x3f, r23	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 b96:	80 91 e8 00 	lds	r24, 0x00E8
 b9a:	87 7f       	andi	r24, 0xF7	; 247
 b9c:	80 93 e8 00 	sts	0x00E8, r24
	
	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
 ba0:	ce 01       	movw	r24, r28
 ba2:	03 96       	adiw	r24, 0x03	; 3
 ba4:	6a e2       	ldi	r22, 0x2A	; 42
 ba6:	70 e0       	ldi	r23, 0x00	; 0
 ba8:	3b de       	rcall	.-906    	; 0x820 <Endpoint_Write_Control_Stream_LE>
 baa:	12 c0       	rjmp	.+36     	; 0xbd0 <USB_Device_ProcessControlRequest+0x23a>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
 bac:	60 91 34 02 	lds	r22, 0x0234
 bb0:	ae 01       	movw	r20, r28
 bb2:	4f 5f       	subi	r20, 0xFF	; 255
 bb4:	5f 4f       	sbci	r21, 0xFF	; 255
 bb6:	40 dc       	rcall	.-1920   	; 0x438 <CALLBACK_USB_GetDescriptor>
 bb8:	bc 01       	movw	r22, r24
 bba:	00 97       	sbiw	r24, 0x00	; 0
 bbc:	09 f4       	brne	.+2      	; 0xbc0 <USB_Device_ProcessControlRequest+0x22a>
 bbe:	3b c0       	rjmp	.+118    	; 0xc36 <USB_Device_ProcessControlRequest+0x2a0>
 bc0:	80 91 e8 00 	lds	r24, 0x00E8
 bc4:	87 7f       	andi	r24, 0xF7	; 247
 bc6:	80 93 e8 00 	sts	0x00E8, r24
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
 bca:	89 81       	ldd	r24, Y+1	; 0x01
 bcc:	9a 81       	ldd	r25, Y+2	; 0x02
 bce:	84 de       	rcall	.-760    	; 0x8d8 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 bd0:	80 91 e8 00 	lds	r24, 0x00E8
 bd4:	8b 77       	andi	r24, 0x7B	; 123
 bd6:	80 93 e8 00 	sts	0x00E8, r24
 bda:	2d c0       	rjmp	.+90     	; 0xc36 <USB_Device_ProcessControlRequest+0x2a0>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
 bdc:	80 38       	cpi	r24, 0x80	; 128
 bde:	59 f5       	brne	.+86     	; 0xc36 <USB_Device_ProcessControlRequest+0x2a0>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 be0:	80 91 e8 00 	lds	r24, 0x00E8
 be4:	87 7f       	andi	r24, 0xF7	; 247
 be6:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
 bea:	80 91 2c 02 	lds	r24, 0x022C
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 bee:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 bf2:	80 91 e8 00 	lds	r24, 0x00E8
 bf6:	8e 77       	andi	r24, 0x7E	; 126
 bf8:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
 bfc:	5e dc       	rcall	.-1860   	; 0x4ba <Endpoint_ClearStatusStage>
 bfe:	1b c0       	rjmp	.+54     	; 0xc36 <USB_Device_ProcessControlRequest+0x2a0>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 c00:	88 23       	and	r24, r24
 c02:	c9 f4       	brne	.+50     	; 0xc36 <USB_Device_ProcessControlRequest+0x2a0>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
 c04:	90 91 32 02 	lds	r25, 0x0232
 c08:	92 30       	cpi	r25, 0x02	; 2
 c0a:	a8 f4       	brcc	.+42     	; 0xc36 <USB_Device_ProcessControlRequest+0x2a0>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 c0c:	80 91 e8 00 	lds	r24, 0x00E8
 c10:	87 7f       	andi	r24, 0xF7	; 247
 c12:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
 c16:	90 93 2c 02 	sts	0x022C, r25

	Endpoint_ClearStatusStage();
 c1a:	4f dc       	rcall	.-1890   	; 0x4ba <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
 c1c:	80 91 2c 02 	lds	r24, 0x022C
 c20:	88 23       	and	r24, r24
 c22:	31 f4       	brne	.+12     	; 0xc30 <USB_Device_ProcessControlRequest+0x29a>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 c24:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 c28:	87 fd       	sbrc	r24, 7
 c2a:	02 c0       	rjmp	.+4      	; 0xc30 <USB_Device_ProcessControlRequest+0x29a>
 c2c:	81 e0       	ldi	r24, 0x01	; 1
 c2e:	01 c0       	rjmp	.+2      	; 0xc32 <USB_Device_ProcessControlRequest+0x29c>
 c30:	84 e0       	ldi	r24, 0x04	; 4
 c32:	8e bb       	out	0x1e, r24	; 30

	EVENT_USB_Device_ConfigurationChanged();
 c34:	57 db       	rcall	.-2386   	; 0x2e4 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 c36:	80 91 e8 00 	lds	r24, 0x00E8

				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
 c3a:	83 ff       	sbrs	r24, 3
 c3c:	0a c0       	rjmp	.+20     	; 0xc52 <USB_Device_ProcessControlRequest+0x2bc>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 c3e:	80 91 eb 00 	lds	r24, 0x00EB
 c42:	80 62       	ori	r24, 0x20	; 32
 c44:	80 93 eb 00 	sts	0x00EB, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 c48:	80 91 e8 00 	lds	r24, 0x00E8
 c4c:	87 7f       	andi	r24, 0xF7	; 247
 c4e:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_StallTransaction();
		Endpoint_ClearSETUP();
	}
}
 c52:	ac 96       	adiw	r28, 0x2c	; 44
 c54:	0f b6       	in	r0, 0x3f	; 63
 c56:	f8 94       	cli
 c58:	de bf       	out	0x3e, r29	; 62
 c5a:	0f be       	out	0x3f, r0	; 63
 c5c:	cd bf       	out	0x3d, r28	; 61
 c5e:	cf 91       	pop	r28
 c60:	df 91       	pop	r29
 c62:	1f 91       	pop	r17
 c64:	0f 91       	pop	r16
 c66:	08 95       	ret

00000c68 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
 c68:	08 95       	ret

00000c6a <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
 c6a:	1f 93       	push	r17
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
 c6c:	8e b3       	in	r24, 0x1e	; 30
 c6e:	88 23       	and	r24, r24
 c70:	61 f0       	breq	.+24     	; 0xc8a <USB_USBTask+0x20>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
 c72:	10 91 e9 00 	lds	r17, 0x00E9
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 c76:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 c7a:	80 91 e8 00 	lds	r24, 0x00E8
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
 c7e:	83 ff       	sbrs	r24, 3
 c80:	01 c0       	rjmp	.+2      	; 0xc84 <USB_USBTask+0x1a>
		  USB_Device_ProcessControlRequest();
 c82:	89 de       	rcall	.-750    	; 0x996 <USB_Device_ProcessControlRequest>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
 c84:	17 70       	andi	r17, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 c86:	10 93 e9 00 	sts	0x00E9, r17
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
 c8a:	1f 91       	pop	r17
 c8c:	08 95       	ret

00000c8e <CDC_Device_ReceiveByte>:

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 c8e:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 c90:	8e b3       	in	r24, 0x1e	; 30
 c92:	84 30       	cpi	r24, 0x04	; 4
 c94:	41 f5       	brne	.+80     	; 0xce6 <CDC_Device_ReceiveByte+0x58>
 c96:	87 85       	ldd	r24, Z+15	; 0x0f
 c98:	90 89       	ldd	r25, Z+16	; 0x10
 c9a:	a1 89       	ldd	r26, Z+17	; 0x11
 c9c:	b2 89       	ldd	r27, Z+18	; 0x12
 c9e:	00 97       	sbiw	r24, 0x00	; 0
 ca0:	a1 05       	cpc	r26, r1
 ca2:	b1 05       	cpc	r27, r1
 ca4:	01 f1       	breq	.+64     	; 0xce6 <CDC_Device_ReceiveByte+0x58>
	  return -1;

	int16_t ReceivedByte = -1;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataOUTEndpointNumber);
 ca6:	85 81       	ldd	r24, Z+5	; 0x05
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 ca8:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 cac:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsOUTReceived())
 cb0:	82 ff       	sbrs	r24, 2
 cb2:	19 c0       	rjmp	.+50     	; 0xce6 <CDC_Device_ReceiveByte+0x58>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
 cb4:	80 91 f2 00 	lds	r24, 0x00F2
 cb8:	90 91 f3 00 	lds	r25, 0x00F3
	{
		if (Endpoint_BytesInEndpoint())
 cbc:	89 2b       	or	r24, r25
 cbe:	19 f4       	brne	.+6      	; 0xcc6 <CDC_Device_ReceiveByte+0x38>
 cc0:	2f ef       	ldi	r18, 0xFF	; 255
 cc2:	3f ef       	ldi	r19, 0xFF	; 255
 cc4:	04 c0       	rjmp	.+8      	; 0xcce <CDC_Device_ReceiveByte+0x40>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 cc6:	80 91 f1 00 	lds	r24, 0x00F1
		  ReceivedByte = Endpoint_Read_8();
 cca:	28 2f       	mov	r18, r24
 ccc:	30 e0       	ldi	r19, 0x00	; 0
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
 cce:	80 91 f2 00 	lds	r24, 0x00F2
 cd2:	90 91 f3 00 	lds	r25, 0x00F3

		if (!(Endpoint_BytesInEndpoint()))
 cd6:	89 2b       	or	r24, r25
 cd8:	41 f4       	brne	.+16     	; 0xcea <CDC_Device_ReceiveByte+0x5c>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 cda:	80 91 e8 00 	lds	r24, 0x00E8
 cde:	8b 77       	andi	r24, 0x7B	; 123
 ce0:	80 93 e8 00 	sts	0x00E8, r24
 ce4:	02 c0       	rjmp	.+4      	; 0xcea <CDC_Device_ReceiveByte+0x5c>
 ce6:	2f ef       	ldi	r18, 0xFF	; 255
 ce8:	3f ef       	ldi	r19, 0xFF	; 255
		  Endpoint_ClearOUT();
	}

	return ReceivedByte;
}
 cea:	c9 01       	movw	r24, r18
 cec:	08 95       	ret

00000cee <CDC_Device_Event_Stub>:
#endif

void CDC_Device_Event_Stub(void)
{

}
 cee:	08 95       	ret

00000cf0 <CDC_Device_Flush>:
	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
}

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 cf0:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 cf2:	8e b3       	in	r24, 0x1e	; 30
 cf4:	84 30       	cpi	r24, 0x04	; 4
 cf6:	21 f5       	brne	.+72     	; 0xd40 <CDC_Device_Flush+0x50>
 cf8:	87 85       	ldd	r24, Z+15	; 0x0f
 cfa:	90 89       	ldd	r25, Z+16	; 0x10
 cfc:	a1 89       	ldd	r26, Z+17	; 0x11
 cfe:	b2 89       	ldd	r27, Z+18	; 0x12
 d00:	00 97       	sbiw	r24, 0x00	; 0
 d02:	a1 05       	cpc	r26, r1
 d04:	b1 05       	cpc	r27, r1
 d06:	e1 f0       	breq	.+56     	; 0xd40 <CDC_Device_Flush+0x50>
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpointNumber);
 d08:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 d0a:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
 d0e:	80 91 f2 00 	lds	r24, 0x00F2
 d12:	90 91 f3 00 	lds	r25, 0x00F3

	if (!(Endpoint_BytesInEndpoint()))
 d16:	89 2b       	or	r24, r25
 d18:	a9 f0       	breq	.+42     	; 0xd44 <CDC_Device_Flush+0x54>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 d1a:	90 91 e8 00 	lds	r25, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 d1e:	80 91 e8 00 	lds	r24, 0x00E8
 d22:	8e 77       	andi	r24, 0x7E	; 126
 d24:	80 93 e8 00 	sts	0x00E8, r24

	bool BankFull = !(Endpoint_IsReadWriteAllowed());

	Endpoint_ClearIN();

	if (BankFull)
 d28:	95 fd       	sbrc	r25, 5
 d2a:	0c c0       	rjmp	.+24     	; 0xd44 <CDC_Device_Flush+0x54>
	{
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
 d2c:	e5 db       	rcall	.-2102   	; 0x4f8 <Endpoint_WaitUntilReady>
 d2e:	98 2f       	mov	r25, r24
 d30:	88 23       	and	r24, r24
 d32:	49 f4       	brne	.+18     	; 0xd46 <CDC_Device_Flush+0x56>
 d34:	80 91 e8 00 	lds	r24, 0x00E8
 d38:	8e 77       	andi	r24, 0x7E	; 126
 d3a:	80 93 e8 00 	sts	0x00E8, r24
 d3e:	03 c0       	rjmp	.+6      	; 0xd46 <CDC_Device_Flush+0x56>
 d40:	92 e0       	ldi	r25, 0x02	; 2
 d42:	01 c0       	rjmp	.+2      	; 0xd46 <CDC_Device_Flush+0x56>
 d44:	90 e0       	ldi	r25, 0x00	; 0

		Endpoint_ClearIN();
	}

	return ENDPOINT_READYWAIT_NoError;
}
 d46:	89 2f       	mov	r24, r25
 d48:	08 95       	ret

00000d4a <CDC_Device_USBTask>:

	return true;
}

void CDC_Device_USBTask(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 d4a:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 d4c:	8e b3       	in	r24, 0x1e	; 30
 d4e:	84 30       	cpi	r24, 0x04	; 4
 d50:	51 f4       	brne	.+20     	; 0xd66 <CDC_Device_USBTask+0x1c>
 d52:	87 85       	ldd	r24, Z+15	; 0x0f
 d54:	90 89       	ldd	r25, Z+16	; 0x10
 d56:	a1 89       	ldd	r26, Z+17	; 0x11
 d58:	b2 89       	ldd	r27, Z+18	; 0x12
 d5a:	00 97       	sbiw	r24, 0x00	; 0
 d5c:	a1 05       	cpc	r26, r1
 d5e:	b1 05       	cpc	r27, r1
 d60:	11 f0       	breq	.+4      	; 0xd66 <CDC_Device_USBTask+0x1c>
	  return;

	#if !defined(NO_CLASS_DRIVER_AUTOFLUSH)
	CDC_Device_Flush(CDCInterfaceInfo);
 d62:	cf 01       	movw	r24, r30
 d64:	c5 cf       	rjmp	.-118    	; 0xcf0 <CDC_Device_Flush>
 d66:	08 95       	ret

00000d68 <CDC_Device_SendByte>:
	return Endpoint_Write_Stream_LE(Buffer, Length, NULL);
}

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
 d68:	1f 93       	push	r17
 d6a:	fc 01       	movw	r30, r24
 d6c:	16 2f       	mov	r17, r22
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
 d6e:	8e b3       	in	r24, 0x1e	; 30
 d70:	84 30       	cpi	r24, 0x04	; 4
 d72:	d9 f4       	brne	.+54     	; 0xdaa <CDC_Device_SendByte+0x42>
 d74:	87 85       	ldd	r24, Z+15	; 0x0f
 d76:	90 89       	ldd	r25, Z+16	; 0x10
 d78:	a1 89       	ldd	r26, Z+17	; 0x11
 d7a:	b2 89       	ldd	r27, Z+18	; 0x12
 d7c:	00 97       	sbiw	r24, 0x00	; 0
 d7e:	a1 05       	cpc	r26, r1
 d80:	b1 05       	cpc	r27, r1
 d82:	99 f0       	breq	.+38     	; 0xdaa <CDC_Device_SendByte+0x42>
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpointNumber);
 d84:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 d86:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 d8a:	80 91 e8 00 	lds	r24, 0x00E8

	if (!(Endpoint_IsReadWriteAllowed()))
 d8e:	85 fd       	sbrc	r24, 5
 d90:	08 c0       	rjmp	.+16     	; 0xda2 <CDC_Device_SendByte+0x3a>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 d92:	80 91 e8 00 	lds	r24, 0x00E8
 d96:	8e 77       	andi	r24, 0x7E	; 126
 d98:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_ClearIN();

		uint8_t ErrorCode;

		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
 d9c:	ad db       	rcall	.-2214   	; 0x4f8 <Endpoint_WaitUntilReady>
 d9e:	88 23       	and	r24, r24
 da0:	29 f4       	brne	.+10     	; 0xdac <CDC_Device_SendByte+0x44>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 da2:	10 93 f1 00 	sts	0x00F1, r17
 da6:	80 e0       	ldi	r24, 0x00	; 0
 da8:	01 c0       	rjmp	.+2      	; 0xdac <CDC_Device_SendByte+0x44>
		  return ErrorCode;
	}

	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
 daa:	82 e0       	ldi	r24, 0x02	; 2
}
 dac:	1f 91       	pop	r17
 dae:	08 95       	ret

00000db0 <CDC_Device_ConfigureEndpoints>:
			break;
	}
}

bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 db0:	1f 93       	push	r17
 db2:	cf 93       	push	r28
 db4:	df 93       	push	r29
 db6:	ec 01       	movw	r28, r24
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));
 db8:	0d 96       	adiw	r24, 0x0d	; 13
 dba:	fc 01       	movw	r30, r24
 dbc:	89 e0       	ldi	r24, 0x09	; 9
 dbe:	df 01       	movw	r26, r30
 dc0:	1d 92       	st	X+, r1
 dc2:	8a 95       	dec	r24
 dc4:	e9 f7       	brne	.-6      	; 0xdc0 <CDC_Device_ConfigureEndpoints+0x10>
 dc6:	11 e0       	ldi	r17, 0x01	; 1
		uint16_t Size;
		uint8_t  Type;
		uint8_t  Direction;
		bool     DoubleBanked;

		if (EndpointNum == CDCInterfaceInfo->Config.DataINEndpointNumber)
 dc8:	89 81       	ldd	r24, Y+1	; 0x01
 dca:	18 17       	cp	r17, r24
 dcc:	29 f4       	brne	.+10     	; 0xdd8 <CDC_Device_ConfigureEndpoints+0x28>
		{
			Size         = CDCInterfaceInfo->Config.DataINEndpointSize;
 dce:	6a 81       	ldd	r22, Y+2	; 0x02
 dd0:	7b 81       	ldd	r23, Y+3	; 0x03
			Direction    = ENDPOINT_DIR_IN;
			Type         = EP_TYPE_BULK;
			DoubleBanked = CDCInterfaceInfo->Config.DataINEndpointDoubleBank;
 dd2:	8c 81       	ldd	r24, Y+4	; 0x04
 dd4:	52 e0       	ldi	r21, 0x02	; 2
 dd6:	10 c0       	rjmp	.+32     	; 0xdf8 <CDC_Device_ConfigureEndpoints+0x48>
		}
		else if (EndpointNum == CDCInterfaceInfo->Config.DataOUTEndpointNumber)
 dd8:	8d 81       	ldd	r24, Y+5	; 0x05
 dda:	18 17       	cp	r17, r24
 ddc:	31 f4       	brne	.+12     	; 0xdea <CDC_Device_ConfigureEndpoints+0x3a>
		{
			Size         = CDCInterfaceInfo->Config.DataOUTEndpointSize;
 dde:	6e 81       	ldd	r22, Y+6	; 0x06
 de0:	7f 81       	ldd	r23, Y+7	; 0x07
			Direction    = ENDPOINT_DIR_OUT;
			Type         = EP_TYPE_BULK;
			DoubleBanked = CDCInterfaceInfo->Config.DataOUTEndpointDoubleBank;
 de2:	88 85       	ldd	r24, Y+8	; 0x08
 de4:	52 e0       	ldi	r21, 0x02	; 2
 de6:	30 e0       	ldi	r19, 0x00	; 0
 de8:	08 c0       	rjmp	.+16     	; 0xdfa <CDC_Device_ConfigureEndpoints+0x4a>
		}
		else if (EndpointNum == CDCInterfaceInfo->Config.NotificationEndpointNumber)
 dea:	89 85       	ldd	r24, Y+9	; 0x09
 dec:	18 17       	cp	r17, r24
 dee:	39 f5       	brne	.+78     	; 0xe3e <CDC_Device_ConfigureEndpoints+0x8e>
		{
			Size         = CDCInterfaceInfo->Config.NotificationEndpointSize;
 df0:	6a 85       	ldd	r22, Y+10	; 0x0a
 df2:	7b 85       	ldd	r23, Y+11	; 0x0b
			Direction    = ENDPOINT_DIR_IN;
			Type         = EP_TYPE_INTERRUPT;
			DoubleBanked = CDCInterfaceInfo->Config.NotificationEndpointDoubleBank;
 df4:	8c 85       	ldd	r24, Y+12	; 0x0c
 df6:	53 e0       	ldi	r21, 0x03	; 3
 df8:	30 e8       	ldi	r19, 0x80	; 128
		else
		{
			continue;
		}

		if (!(Endpoint_ConfigureEndpoint(EndpointNum, Type, Direction, Size,
 dfa:	88 23       	and	r24, r24
 dfc:	11 f4       	brne	.+4      	; 0xe02 <CDC_Device_ConfigureEndpoints+0x52>
 dfe:	40 e0       	ldi	r20, 0x00	; 0
 e00:	01 c0       	rjmp	.+2      	; 0xe04 <CDC_Device_ConfigureEndpoints+0x54>
 e02:	44 e0       	ldi	r20, 0x04	; 4
 e04:	20 e0       	ldi	r18, 0x00	; 0
 e06:	88 e0       	ldi	r24, 0x08	; 8
 e08:	90 e0       	ldi	r25, 0x00	; 0
 e0a:	03 c0       	rjmp	.+6      	; 0xe12 <CDC_Device_ConfigureEndpoints+0x62>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
				{
					MaskVal++;
 e0c:	2f 5f       	subi	r18, 0xFF	; 255
					CheckBytes <<= 1;
 e0e:	88 0f       	add	r24, r24
 e10:	99 1f       	adc	r25, r25
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
 e12:	86 17       	cp	r24, r22
 e14:	97 07       	cpc	r25, r23
 e16:	d0 f3       	brcs	.-12     	; 0xe0c <CDC_Device_ConfigureEndpoints+0x5c>
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
 e18:	85 2f       	mov	r24, r21
 e1a:	90 e0       	ldi	r25, 0x00	; 0
 e1c:	56 e0       	ldi	r21, 0x06	; 6
 e1e:	88 0f       	add	r24, r24
 e20:	99 1f       	adc	r25, r25
 e22:	5a 95       	dec	r21
 e24:	e1 f7       	brne	.-8      	; 0xe1e <CDC_Device_ConfigureEndpoints+0x6e>
 e26:	60 e0       	ldi	r22, 0x00	; 0
 e28:	31 11       	cpse	r19, r1
 e2a:	61 e0       	ldi	r22, 0x01	; 1
 e2c:	68 2b       	or	r22, r24
 e2e:	42 60       	ori	r20, 0x02	; 2
 e30:	22 95       	swap	r18
 e32:	20 7f       	andi	r18, 0xF0	; 240
 e34:	42 2b       	or	r20, r18
 e36:	81 2f       	mov	r24, r17
 e38:	2d db       	rcall	.-2470   	; 0x494 <Endpoint_ConfigureEndpoint_Prv>
 e3a:	88 23       	and	r24, r24
 e3c:	29 f0       	breq	.+10     	; 0xe48 <CDC_Device_ConfigureEndpoints+0x98>

bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));

	for (uint8_t EndpointNum = 1; EndpointNum < ENDPOINT_TOTAL_ENDPOINTS; EndpointNum++)
 e3e:	1f 5f       	subi	r17, 0xFF	; 255
 e40:	17 30       	cpi	r17, 0x07	; 7
 e42:	09 f0       	breq	.+2      	; 0xe46 <CDC_Device_ConfigureEndpoints+0x96>
 e44:	c1 cf       	rjmp	.-126    	; 0xdc8 <CDC_Device_ConfigureEndpoints+0x18>
 e46:	81 e0       	ldi	r24, 0x01	; 1
			return false;
		}
	}

	return true;
}
 e48:	df 91       	pop	r29
 e4a:	cf 91       	pop	r28
 e4c:	1f 91       	pop	r17
 e4e:	08 95       	ret

00000e50 <CDC_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_CDC_DRIVER
#define  __INCLUDE_FROM_CDC_DEVICE_C
#include "CDC.h"

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 e50:	cf 93       	push	r28
 e52:	df 93       	push	r29
 e54:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 e56:	80 91 e8 00 	lds	r24, 0x00E8
	if (!(Endpoint_IsSETUPReceived()))
 e5a:	83 ff       	sbrs	r24, 3
 e5c:	92 c0       	rjmp	.+292    	; 0xf82 <CDC_Device_ProcessControlRequest+0x132>
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
 e5e:	88 81       	ld	r24, Y
 e60:	90 e0       	ldi	r25, 0x00	; 0
 e62:	20 91 34 02 	lds	r18, 0x0234
 e66:	30 91 35 02 	lds	r19, 0x0235
 e6a:	28 17       	cp	r18, r24
 e6c:	39 07       	cpc	r19, r25
 e6e:	09 f0       	breq	.+2      	; 0xe72 <CDC_Device_ProcessControlRequest+0x22>
 e70:	88 c0       	rjmp	.+272    	; 0xf82 <CDC_Device_ProcessControlRequest+0x132>
	  return;

	switch (USB_ControlRequest.bRequest)
 e72:	80 91 31 02 	lds	r24, 0x0231
 e76:	81 32       	cpi	r24, 0x21	; 33
 e78:	69 f0       	breq	.+26     	; 0xe94 <CDC_Device_ProcessControlRequest+0x44>
 e7a:	82 32       	cpi	r24, 0x22	; 34
 e7c:	20 f4       	brcc	.+8      	; 0xe86 <CDC_Device_ProcessControlRequest+0x36>
 e7e:	80 32       	cpi	r24, 0x20	; 32
 e80:	09 f0       	breq	.+2      	; 0xe84 <CDC_Device_ProcessControlRequest+0x34>
 e82:	7f c0       	rjmp	.+254    	; 0xf82 <CDC_Device_ProcessControlRequest+0x132>
 e84:	38 c0       	rjmp	.+112    	; 0xef6 <CDC_Device_ProcessControlRequest+0xa6>
 e86:	82 32       	cpi	r24, 0x22	; 34
 e88:	09 f4       	brne	.+2      	; 0xe8c <CDC_Device_ProcessControlRequest+0x3c>
 e8a:	5d c0       	rjmp	.+186    	; 0xf46 <CDC_Device_ProcessControlRequest+0xf6>
 e8c:	83 32       	cpi	r24, 0x23	; 35
 e8e:	09 f0       	breq	.+2      	; 0xe92 <CDC_Device_ProcessControlRequest+0x42>
 e90:	78 c0       	rjmp	.+240    	; 0xf82 <CDC_Device_ProcessControlRequest+0x132>
 e92:	69 c0       	rjmp	.+210    	; 0xf66 <CDC_Device_ProcessControlRequest+0x116>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
 e94:	80 91 30 02 	lds	r24, 0x0230
 e98:	81 3a       	cpi	r24, 0xA1	; 161
 e9a:	09 f0       	breq	.+2      	; 0xe9e <CDC_Device_ProcessControlRequest+0x4e>
 e9c:	72 c0       	rjmp	.+228    	; 0xf82 <CDC_Device_ProcessControlRequest+0x132>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 e9e:	80 91 e8 00 	lds	r24, 0x00E8
 ea2:	87 7f       	andi	r24, 0xF7	; 247
 ea4:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
 ea8:	8f 85       	ldd	r24, Y+15	; 0x0f
 eaa:	98 89       	ldd	r25, Y+16	; 0x10
 eac:	a9 89       	ldd	r26, Y+17	; 0x11
 eae:	ba 89       	ldd	r27, Y+18	; 0x12
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_LE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_LE(const uint32_t Data)
			{
				UEDATX = (Data &  0xFF);
 eb0:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
 eb4:	29 2f       	mov	r18, r25
 eb6:	3a 2f       	mov	r19, r26
 eb8:	4b 2f       	mov	r20, r27
 eba:	55 27       	eor	r21, r21
 ebc:	20 93 f1 00 	sts	0x00F1, r18
				UEDATX = (Data >> 16);
 ec0:	9d 01       	movw	r18, r26
 ec2:	44 27       	eor	r20, r20
 ec4:	55 27       	eor	r21, r21
 ec6:	20 93 f1 00 	sts	0x00F1, r18
				UEDATX = (Data >> 24);
 eca:	8b 2f       	mov	r24, r27
 ecc:	99 27       	eor	r25, r25
 ece:	aa 27       	eor	r26, r26
 ed0:	bb 27       	eor	r27, r27
 ed2:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
 ed6:	8b 89       	ldd	r24, Y+19	; 0x13
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 ed8:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
 edc:	8c 89       	ldd	r24, Y+20	; 0x14
 ede:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
 ee2:	8d 89       	ldd	r24, Y+21	; 0x15
 ee4:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 ee8:	80 91 e8 00 	lds	r24, 0x00E8
 eec:	8e 77       	andi	r24, 0x7E	; 126
 eee:	80 93 e8 00 	sts	0x00E8, r24
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
 ef2:	e3 da       	rcall	.-2618   	; 0x4ba <Endpoint_ClearStatusStage>
 ef4:	46 c0       	rjmp	.+140    	; 0xf82 <CDC_Device_ProcessControlRequest+0x132>
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 ef6:	80 91 30 02 	lds	r24, 0x0230
 efa:	81 32       	cpi	r24, 0x21	; 33
 efc:	09 f0       	breq	.+2      	; 0xf00 <CDC_Device_ProcessControlRequest+0xb0>
 efe:	41 c0       	rjmp	.+130    	; 0xf82 <CDC_Device_ProcessControlRequest+0x132>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 f00:	80 91 e8 00 	lds	r24, 0x00E8
 f04:	87 7f       	andi	r24, 0xF7	; 247
 f06:	80 93 e8 00 	sts	0x00E8, r24
				{
					uint32_t Value;
					uint8_t  Bytes[4];
				} Data;

				Data.Bytes[0] = UEDATX;
 f0a:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[1] = UEDATX;
 f0e:	90 91 f1 00 	lds	r25, 0x00F1
				Data.Bytes[2] = UEDATX;
 f12:	20 91 f1 00 	lds	r18, 0x00F1
				Data.Bytes[3] = UEDATX;
 f16:	30 91 f1 00 	lds	r19, 0x00F1
			{
				Endpoint_ClearSETUP();
				CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
 f1a:	8f 87       	std	Y+15, r24	; 0x0f
 f1c:	98 8b       	std	Y+16, r25	; 0x10
 f1e:	29 8b       	std	Y+17, r18	; 0x11
 f20:	3a 8b       	std	Y+18, r19	; 0x12
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 f22:	80 91 f1 00 	lds	r24, 0x00F1
				CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
 f26:	8b 8b       	std	Y+19, r24	; 0x13
 f28:	80 91 f1 00 	lds	r24, 0x00F1
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
 f2c:	8c 8b       	std	Y+20, r24	; 0x14
 f2e:	80 91 f1 00 	lds	r24, 0x00F1
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
 f32:	8d 8b       	std	Y+21, r24	; 0x15
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 f34:	80 91 e8 00 	lds	r24, 0x00E8
 f38:	8b 77       	andi	r24, 0x7B	; 123
 f3a:	80 93 e8 00 	sts	0x00E8, r24
				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();
 f3e:	bd da       	rcall	.-2694   	; 0x4ba <Endpoint_ClearStatusStage>

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
 f40:	ce 01       	movw	r24, r28
 f42:	8b d9       	rcall	.-3306   	; 0x25a <EVENT_CDC_Device_LineEncodingChanged>
 f44:	1e c0       	rjmp	.+60     	; 0xf82 <CDC_Device_ProcessControlRequest+0x132>
			}

			break;
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 f46:	80 91 30 02 	lds	r24, 0x0230
 f4a:	81 32       	cpi	r24, 0x21	; 33
 f4c:	d1 f4       	brne	.+52     	; 0xf82 <CDC_Device_ProcessControlRequest+0x132>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 f4e:	80 91 e8 00 	lds	r24, 0x00E8
 f52:	87 7f       	andi	r24, 0xF7	; 247
 f54:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
 f58:	b0 da       	rcall	.-2720   	; 0x4ba <Endpoint_ClearStatusStage>

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
 f5a:	80 91 32 02 	lds	r24, 0x0232
 f5e:	8d 87       	std	Y+13, r24	; 0x0d

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
 f60:	ce 01       	movw	r24, r28
 f62:	c5 de       	rcall	.-630    	; 0xcee <CDC_Device_Event_Stub>
 f64:	0e c0       	rjmp	.+28     	; 0xf82 <CDC_Device_ProcessControlRequest+0x132>
			}

			break;
		case CDC_REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 f66:	80 91 30 02 	lds	r24, 0x0230
 f6a:	81 32       	cpi	r24, 0x21	; 33
 f6c:	51 f4       	brne	.+20     	; 0xf82 <CDC_Device_ProcessControlRequest+0x132>
 f6e:	80 91 e8 00 	lds	r24, 0x00E8
 f72:	87 7f       	andi	r24, 0xF7	; 247
 f74:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
 f78:	a0 da       	rcall	.-2752   	; 0x4ba <Endpoint_ClearStatusStage>

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
 f7a:	ce 01       	movw	r24, r28
 f7c:	60 91 32 02 	lds	r22, 0x0232
 f80:	b6 de       	rcall	.-660    	; 0xcee <CDC_Device_Event_Stub>
			}

			break;
	}
}
 f82:	df 91       	pop	r29
 f84:	cf 91       	pop	r28
 f86:	08 95       	ret

00000f88 <__udivmodsi4>:
 f88:	a1 e2       	ldi	r26, 0x21	; 33
 f8a:	1a 2e       	mov	r1, r26
 f8c:	aa 1b       	sub	r26, r26
 f8e:	bb 1b       	sub	r27, r27
 f90:	fd 01       	movw	r30, r26
 f92:	0d c0       	rjmp	.+26     	; 0xfae <__udivmodsi4_ep>

00000f94 <__udivmodsi4_loop>:
 f94:	aa 1f       	adc	r26, r26
 f96:	bb 1f       	adc	r27, r27
 f98:	ee 1f       	adc	r30, r30
 f9a:	ff 1f       	adc	r31, r31
 f9c:	a2 17       	cp	r26, r18
 f9e:	b3 07       	cpc	r27, r19
 fa0:	e4 07       	cpc	r30, r20
 fa2:	f5 07       	cpc	r31, r21
 fa4:	20 f0       	brcs	.+8      	; 0xfae <__udivmodsi4_ep>
 fa6:	a2 1b       	sub	r26, r18
 fa8:	b3 0b       	sbc	r27, r19
 faa:	e4 0b       	sbc	r30, r20
 fac:	f5 0b       	sbc	r31, r21

00000fae <__udivmodsi4_ep>:
 fae:	66 1f       	adc	r22, r22
 fb0:	77 1f       	adc	r23, r23
 fb2:	88 1f       	adc	r24, r24
 fb4:	99 1f       	adc	r25, r25
 fb6:	1a 94       	dec	r1
 fb8:	69 f7       	brne	.-38     	; 0xf94 <__udivmodsi4_loop>
 fba:	60 95       	com	r22
 fbc:	70 95       	com	r23
 fbe:	80 95       	com	r24
 fc0:	90 95       	com	r25
 fc2:	9b 01       	movw	r18, r22
 fc4:	ac 01       	movw	r20, r24
 fc6:	bd 01       	movw	r22, r26
 fc8:	cf 01       	movw	r24, r30
 fca:	08 95       	ret

00000fcc <_exit>:
 fcc:	f8 94       	cli

00000fce <__stop_program>:
 fce:	ff cf       	rjmp	.-2      	; 0xfce <__stop_program>
